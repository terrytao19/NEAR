
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d75c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800d81c  0800d81c  0000e81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db00  0800db00  0000f210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800db00  0800db00  0000f210  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800db00  0800db00  0000f210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db00  0800db00  0000eb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db04  0800db04  0000eb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800db08  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001558  20000210  0800dd18  0000f210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001768  0800dd18  0000f768  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001789d  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004095  00000000  00000000  00026ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8f  00000000  00000000  0002bfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000685b  00000000  00000000  0002cf77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbcf  00000000  00000000  000337d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a33c3  00000000  00000000  000503a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f18  00000000  00000000  000f37a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f86c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000172  00000000  00000000  000f871d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000210 	.word	0x20000210
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d804 	.word	0x0800d804

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000214 	.word	0x20000214
 8000104:	0800d804 	.word	0x0800d804

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_d2uiz>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	2200      	movs	r2, #0
 8000238:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <__aeabi_d2uiz+0x38>)
 800023a:	0004      	movs	r4, r0
 800023c:	000d      	movs	r5, r1
 800023e:	f001 fef7 	bl	8002030 <__aeabi_dcmpge>
 8000242:	2800      	cmp	r0, #0
 8000244:	d104      	bne.n	8000250 <__aeabi_d2uiz+0x1c>
 8000246:	0020      	movs	r0, r4
 8000248:	0029      	movs	r1, r5
 800024a:	f001 fe2f 	bl	8001eac <__aeabi_d2iz>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <__aeabi_d2uiz+0x38>)
 8000252:	2200      	movs	r2, #0
 8000254:	0020      	movs	r0, r4
 8000256:	0029      	movs	r1, r5
 8000258:	f001 fa1e 	bl	8001698 <__aeabi_dsub>
 800025c:	f001 fe26 	bl	8001eac <__aeabi_d2iz>
 8000260:	2380      	movs	r3, #128	@ 0x80
 8000262:	061b      	lsls	r3, r3, #24
 8000264:	469c      	mov	ip, r3
 8000266:	4460      	add	r0, ip
 8000268:	e7f1      	b.n	800024e <__aeabi_d2uiz+0x1a>
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	41e00000 	.word	0x41e00000

08000270 <__aeabi_d2lz>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	2200      	movs	r2, #0
 8000274:	2300      	movs	r3, #0
 8000276:	0004      	movs	r4, r0
 8000278:	000d      	movs	r5, r1
 800027a:	f001 febb 	bl	8001ff4 <__aeabi_dcmplt>
 800027e:	2800      	cmp	r0, #0
 8000280:	d108      	bne.n	8000294 <__aeabi_d2lz+0x24>
 8000282:	0020      	movs	r0, r4
 8000284:	0029      	movs	r1, r5
 8000286:	f000 f80f 	bl	80002a8 <__aeabi_d2ulz>
 800028a:	0002      	movs	r2, r0
 800028c:	000b      	movs	r3, r1
 800028e:	0010      	movs	r0, r2
 8000290:	0019      	movs	r1, r3
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	061b      	lsls	r3, r3, #24
 8000298:	18e9      	adds	r1, r5, r3
 800029a:	0020      	movs	r0, r4
 800029c:	f000 f804 	bl	80002a8 <__aeabi_d2ulz>
 80002a0:	2300      	movs	r3, #0
 80002a2:	4242      	negs	r2, r0
 80002a4:	418b      	sbcs	r3, r1
 80002a6:	e7f2      	b.n	800028e <__aeabi_d2lz+0x1e>

080002a8 <__aeabi_d2ulz>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	2200      	movs	r2, #0
 80002ac:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <__aeabi_d2ulz+0x34>)
 80002ae:	000d      	movs	r5, r1
 80002b0:	0004      	movs	r4, r0
 80002b2:	f000 ff0b 	bl	80010cc <__aeabi_dmul>
 80002b6:	f7ff ffbd 	bl	8000234 <__aeabi_d2uiz>
 80002ba:	0006      	movs	r6, r0
 80002bc:	f001 fe60 	bl	8001f80 <__aeabi_ui2d>
 80002c0:	2200      	movs	r2, #0
 80002c2:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <__aeabi_d2ulz+0x38>)
 80002c4:	f000 ff02 	bl	80010cc <__aeabi_dmul>
 80002c8:	0002      	movs	r2, r0
 80002ca:	000b      	movs	r3, r1
 80002cc:	0020      	movs	r0, r4
 80002ce:	0029      	movs	r1, r5
 80002d0:	f001 f9e2 	bl	8001698 <__aeabi_dsub>
 80002d4:	f7ff ffae 	bl	8000234 <__aeabi_d2uiz>
 80002d8:	0031      	movs	r1, r6
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	3df00000 	.word	0x3df00000
 80002e0:	41f00000 	.word	0x41f00000

080002e4 <__aeabi_l2d>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	0006      	movs	r6, r0
 80002e8:	0008      	movs	r0, r1
 80002ea:	f001 fe1b 	bl	8001f24 <__aeabi_i2d>
 80002ee:	2200      	movs	r2, #0
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <__aeabi_l2d+0x28>)
 80002f2:	f000 feeb 	bl	80010cc <__aeabi_dmul>
 80002f6:	000d      	movs	r5, r1
 80002f8:	0004      	movs	r4, r0
 80002fa:	0030      	movs	r0, r6
 80002fc:	f001 fe40 	bl	8001f80 <__aeabi_ui2d>
 8000300:	002b      	movs	r3, r5
 8000302:	0022      	movs	r2, r4
 8000304:	f000 f804 	bl	8000310 <__aeabi_dadd>
 8000308:	bd70      	pop	{r4, r5, r6, pc}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	41f00000 	.word	0x41f00000

08000310 <__aeabi_dadd>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	464f      	mov	r7, r9
 8000314:	4646      	mov	r6, r8
 8000316:	46d6      	mov	lr, sl
 8000318:	b5c0      	push	{r6, r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	9000      	str	r0, [sp, #0]
 800031e:	9101      	str	r1, [sp, #4]
 8000320:	030e      	lsls	r6, r1, #12
 8000322:	004c      	lsls	r4, r1, #1
 8000324:	0fcd      	lsrs	r5, r1, #31
 8000326:	0a71      	lsrs	r1, r6, #9
 8000328:	9e00      	ldr	r6, [sp, #0]
 800032a:	005f      	lsls	r7, r3, #1
 800032c:	0f76      	lsrs	r6, r6, #29
 800032e:	430e      	orrs	r6, r1
 8000330:	9900      	ldr	r1, [sp, #0]
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	00c9      	lsls	r1, r1, #3
 8000338:	4689      	mov	r9, r1
 800033a:	0319      	lsls	r1, r3, #12
 800033c:	0d7b      	lsrs	r3, r7, #21
 800033e:	4698      	mov	r8, r3
 8000340:	9b01      	ldr	r3, [sp, #4]
 8000342:	0a49      	lsrs	r1, r1, #9
 8000344:	0fdb      	lsrs	r3, r3, #31
 8000346:	469c      	mov	ip, r3
 8000348:	9b00      	ldr	r3, [sp, #0]
 800034a:	9a00      	ldr	r2, [sp, #0]
 800034c:	0f5b      	lsrs	r3, r3, #29
 800034e:	430b      	orrs	r3, r1
 8000350:	4641      	mov	r1, r8
 8000352:	0d64      	lsrs	r4, r4, #21
 8000354:	00d2      	lsls	r2, r2, #3
 8000356:	1a61      	subs	r1, r4, r1
 8000358:	4565      	cmp	r5, ip
 800035a:	d100      	bne.n	800035e <__aeabi_dadd+0x4e>
 800035c:	e0a6      	b.n	80004ac <__aeabi_dadd+0x19c>
 800035e:	2900      	cmp	r1, #0
 8000360:	dd72      	ble.n	8000448 <__aeabi_dadd+0x138>
 8000362:	4647      	mov	r7, r8
 8000364:	2f00      	cmp	r7, #0
 8000366:	d100      	bne.n	800036a <__aeabi_dadd+0x5a>
 8000368:	e0dd      	b.n	8000526 <__aeabi_dadd+0x216>
 800036a:	4fcc      	ldr	r7, [pc, #816]	@ (800069c <__aeabi_dadd+0x38c>)
 800036c:	42bc      	cmp	r4, r7
 800036e:	d100      	bne.n	8000372 <__aeabi_dadd+0x62>
 8000370:	e19a      	b.n	80006a8 <__aeabi_dadd+0x398>
 8000372:	2701      	movs	r7, #1
 8000374:	2938      	cmp	r1, #56	@ 0x38
 8000376:	dc17      	bgt.n	80003a8 <__aeabi_dadd+0x98>
 8000378:	2780      	movs	r7, #128	@ 0x80
 800037a:	043f      	lsls	r7, r7, #16
 800037c:	433b      	orrs	r3, r7
 800037e:	291f      	cmp	r1, #31
 8000380:	dd00      	ble.n	8000384 <__aeabi_dadd+0x74>
 8000382:	e1dd      	b.n	8000740 <__aeabi_dadd+0x430>
 8000384:	2720      	movs	r7, #32
 8000386:	1a78      	subs	r0, r7, r1
 8000388:	001f      	movs	r7, r3
 800038a:	4087      	lsls	r7, r0
 800038c:	46ba      	mov	sl, r7
 800038e:	0017      	movs	r7, r2
 8000390:	40cf      	lsrs	r7, r1
 8000392:	4684      	mov	ip, r0
 8000394:	0038      	movs	r0, r7
 8000396:	4657      	mov	r7, sl
 8000398:	4307      	orrs	r7, r0
 800039a:	4660      	mov	r0, ip
 800039c:	4082      	lsls	r2, r0
 800039e:	40cb      	lsrs	r3, r1
 80003a0:	1e50      	subs	r0, r2, #1
 80003a2:	4182      	sbcs	r2, r0
 80003a4:	1af6      	subs	r6, r6, r3
 80003a6:	4317      	orrs	r7, r2
 80003a8:	464b      	mov	r3, r9
 80003aa:	1bdf      	subs	r7, r3, r7
 80003ac:	45b9      	cmp	r9, r7
 80003ae:	4180      	sbcs	r0, r0
 80003b0:	4240      	negs	r0, r0
 80003b2:	1a36      	subs	r6, r6, r0
 80003b4:	0233      	lsls	r3, r6, #8
 80003b6:	d400      	bmi.n	80003ba <__aeabi_dadd+0xaa>
 80003b8:	e0ff      	b.n	80005ba <__aeabi_dadd+0x2aa>
 80003ba:	0276      	lsls	r6, r6, #9
 80003bc:	0a76      	lsrs	r6, r6, #9
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d100      	bne.n	80003c4 <__aeabi_dadd+0xb4>
 80003c2:	e13c      	b.n	800063e <__aeabi_dadd+0x32e>
 80003c4:	0030      	movs	r0, r6
 80003c6:	f001 fe3d 	bl	8002044 <__clzsi2>
 80003ca:	0003      	movs	r3, r0
 80003cc:	3b08      	subs	r3, #8
 80003ce:	2120      	movs	r1, #32
 80003d0:	0038      	movs	r0, r7
 80003d2:	1aca      	subs	r2, r1, r3
 80003d4:	40d0      	lsrs	r0, r2
 80003d6:	409e      	lsls	r6, r3
 80003d8:	0002      	movs	r2, r0
 80003da:	409f      	lsls	r7, r3
 80003dc:	4332      	orrs	r2, r6
 80003de:	429c      	cmp	r4, r3
 80003e0:	dd00      	ble.n	80003e4 <__aeabi_dadd+0xd4>
 80003e2:	e1a6      	b.n	8000732 <__aeabi_dadd+0x422>
 80003e4:	1b18      	subs	r0, r3, r4
 80003e6:	3001      	adds	r0, #1
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	003e      	movs	r6, r7
 80003ec:	408f      	lsls	r7, r1
 80003ee:	40c6      	lsrs	r6, r0
 80003f0:	1e7b      	subs	r3, r7, #1
 80003f2:	419f      	sbcs	r7, r3
 80003f4:	0013      	movs	r3, r2
 80003f6:	408b      	lsls	r3, r1
 80003f8:	4337      	orrs	r7, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	40c2      	lsrs	r2, r0
 80003fe:	003b      	movs	r3, r7
 8000400:	0016      	movs	r6, r2
 8000402:	2400      	movs	r4, #0
 8000404:	4313      	orrs	r3, r2
 8000406:	d100      	bne.n	800040a <__aeabi_dadd+0xfa>
 8000408:	e1df      	b.n	80007ca <__aeabi_dadd+0x4ba>
 800040a:	077b      	lsls	r3, r7, #29
 800040c:	d100      	bne.n	8000410 <__aeabi_dadd+0x100>
 800040e:	e332      	b.n	8000a76 <__aeabi_dadd+0x766>
 8000410:	230f      	movs	r3, #15
 8000412:	003a      	movs	r2, r7
 8000414:	403b      	ands	r3, r7
 8000416:	2b04      	cmp	r3, #4
 8000418:	d004      	beq.n	8000424 <__aeabi_dadd+0x114>
 800041a:	1d3a      	adds	r2, r7, #4
 800041c:	42ba      	cmp	r2, r7
 800041e:	41bf      	sbcs	r7, r7
 8000420:	427f      	negs	r7, r7
 8000422:	19f6      	adds	r6, r6, r7
 8000424:	0233      	lsls	r3, r6, #8
 8000426:	d400      	bmi.n	800042a <__aeabi_dadd+0x11a>
 8000428:	e323      	b.n	8000a72 <__aeabi_dadd+0x762>
 800042a:	4b9c      	ldr	r3, [pc, #624]	@ (800069c <__aeabi_dadd+0x38c>)
 800042c:	3401      	adds	r4, #1
 800042e:	429c      	cmp	r4, r3
 8000430:	d100      	bne.n	8000434 <__aeabi_dadd+0x124>
 8000432:	e0b4      	b.n	800059e <__aeabi_dadd+0x28e>
 8000434:	4b9a      	ldr	r3, [pc, #616]	@ (80006a0 <__aeabi_dadd+0x390>)
 8000436:	0564      	lsls	r4, r4, #21
 8000438:	401e      	ands	r6, r3
 800043a:	0d64      	lsrs	r4, r4, #21
 800043c:	0777      	lsls	r7, r6, #29
 800043e:	08d2      	lsrs	r2, r2, #3
 8000440:	0276      	lsls	r6, r6, #9
 8000442:	4317      	orrs	r7, r2
 8000444:	0b36      	lsrs	r6, r6, #12
 8000446:	e0ac      	b.n	80005a2 <__aeabi_dadd+0x292>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_dadd+0x13e>
 800044c:	e07e      	b.n	800054c <__aeabi_dadd+0x23c>
 800044e:	4641      	mov	r1, r8
 8000450:	1b09      	subs	r1, r1, r4
 8000452:	2c00      	cmp	r4, #0
 8000454:	d000      	beq.n	8000458 <__aeabi_dadd+0x148>
 8000456:	e160      	b.n	800071a <__aeabi_dadd+0x40a>
 8000458:	0034      	movs	r4, r6
 800045a:	4648      	mov	r0, r9
 800045c:	4304      	orrs	r4, r0
 800045e:	d100      	bne.n	8000462 <__aeabi_dadd+0x152>
 8000460:	e1c9      	b.n	80007f6 <__aeabi_dadd+0x4e6>
 8000462:	1e4c      	subs	r4, r1, #1
 8000464:	2901      	cmp	r1, #1
 8000466:	d100      	bne.n	800046a <__aeabi_dadd+0x15a>
 8000468:	e22e      	b.n	80008c8 <__aeabi_dadd+0x5b8>
 800046a:	4d8c      	ldr	r5, [pc, #560]	@ (800069c <__aeabi_dadd+0x38c>)
 800046c:	42a9      	cmp	r1, r5
 800046e:	d100      	bne.n	8000472 <__aeabi_dadd+0x162>
 8000470:	e224      	b.n	80008bc <__aeabi_dadd+0x5ac>
 8000472:	2701      	movs	r7, #1
 8000474:	2c38      	cmp	r4, #56	@ 0x38
 8000476:	dc11      	bgt.n	800049c <__aeabi_dadd+0x18c>
 8000478:	0021      	movs	r1, r4
 800047a:	291f      	cmp	r1, #31
 800047c:	dd00      	ble.n	8000480 <__aeabi_dadd+0x170>
 800047e:	e20b      	b.n	8000898 <__aeabi_dadd+0x588>
 8000480:	2420      	movs	r4, #32
 8000482:	0037      	movs	r7, r6
 8000484:	4648      	mov	r0, r9
 8000486:	1a64      	subs	r4, r4, r1
 8000488:	40a7      	lsls	r7, r4
 800048a:	40c8      	lsrs	r0, r1
 800048c:	4307      	orrs	r7, r0
 800048e:	4648      	mov	r0, r9
 8000490:	40a0      	lsls	r0, r4
 8000492:	40ce      	lsrs	r6, r1
 8000494:	1e44      	subs	r4, r0, #1
 8000496:	41a0      	sbcs	r0, r4
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	4307      	orrs	r7, r0
 800049c:	1bd7      	subs	r7, r2, r7
 800049e:	42ba      	cmp	r2, r7
 80004a0:	4192      	sbcs	r2, r2
 80004a2:	4252      	negs	r2, r2
 80004a4:	4665      	mov	r5, ip
 80004a6:	4644      	mov	r4, r8
 80004a8:	1a9e      	subs	r6, r3, r2
 80004aa:	e783      	b.n	80003b4 <__aeabi_dadd+0xa4>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	dc00      	bgt.n	80004b2 <__aeabi_dadd+0x1a2>
 80004b0:	e09c      	b.n	80005ec <__aeabi_dadd+0x2dc>
 80004b2:	4647      	mov	r7, r8
 80004b4:	2f00      	cmp	r7, #0
 80004b6:	d167      	bne.n	8000588 <__aeabi_dadd+0x278>
 80004b8:	001f      	movs	r7, r3
 80004ba:	4317      	orrs	r7, r2
 80004bc:	d100      	bne.n	80004c0 <__aeabi_dadd+0x1b0>
 80004be:	e0e4      	b.n	800068a <__aeabi_dadd+0x37a>
 80004c0:	1e48      	subs	r0, r1, #1
 80004c2:	2901      	cmp	r1, #1
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dadd+0x1b8>
 80004c6:	e19b      	b.n	8000800 <__aeabi_dadd+0x4f0>
 80004c8:	4f74      	ldr	r7, [pc, #464]	@ (800069c <__aeabi_dadd+0x38c>)
 80004ca:	42b9      	cmp	r1, r7
 80004cc:	d100      	bne.n	80004d0 <__aeabi_dadd+0x1c0>
 80004ce:	e0eb      	b.n	80006a8 <__aeabi_dadd+0x398>
 80004d0:	2701      	movs	r7, #1
 80004d2:	0001      	movs	r1, r0
 80004d4:	2838      	cmp	r0, #56	@ 0x38
 80004d6:	dc11      	bgt.n	80004fc <__aeabi_dadd+0x1ec>
 80004d8:	291f      	cmp	r1, #31
 80004da:	dd00      	ble.n	80004de <__aeabi_dadd+0x1ce>
 80004dc:	e1c7      	b.n	800086e <__aeabi_dadd+0x55e>
 80004de:	2720      	movs	r7, #32
 80004e0:	1a78      	subs	r0, r7, r1
 80004e2:	001f      	movs	r7, r3
 80004e4:	4684      	mov	ip, r0
 80004e6:	4087      	lsls	r7, r0
 80004e8:	0010      	movs	r0, r2
 80004ea:	40c8      	lsrs	r0, r1
 80004ec:	4307      	orrs	r7, r0
 80004ee:	4660      	mov	r0, ip
 80004f0:	4082      	lsls	r2, r0
 80004f2:	40cb      	lsrs	r3, r1
 80004f4:	1e50      	subs	r0, r2, #1
 80004f6:	4182      	sbcs	r2, r0
 80004f8:	18f6      	adds	r6, r6, r3
 80004fa:	4317      	orrs	r7, r2
 80004fc:	444f      	add	r7, r9
 80004fe:	454f      	cmp	r7, r9
 8000500:	4180      	sbcs	r0, r0
 8000502:	4240      	negs	r0, r0
 8000504:	1836      	adds	r6, r6, r0
 8000506:	0233      	lsls	r3, r6, #8
 8000508:	d557      	bpl.n	80005ba <__aeabi_dadd+0x2aa>
 800050a:	4b64      	ldr	r3, [pc, #400]	@ (800069c <__aeabi_dadd+0x38c>)
 800050c:	3401      	adds	r4, #1
 800050e:	429c      	cmp	r4, r3
 8000510:	d045      	beq.n	800059e <__aeabi_dadd+0x28e>
 8000512:	2101      	movs	r1, #1
 8000514:	4b62      	ldr	r3, [pc, #392]	@ (80006a0 <__aeabi_dadd+0x390>)
 8000516:	087a      	lsrs	r2, r7, #1
 8000518:	401e      	ands	r6, r3
 800051a:	4039      	ands	r1, r7
 800051c:	430a      	orrs	r2, r1
 800051e:	07f7      	lsls	r7, r6, #31
 8000520:	4317      	orrs	r7, r2
 8000522:	0876      	lsrs	r6, r6, #1
 8000524:	e771      	b.n	800040a <__aeabi_dadd+0xfa>
 8000526:	001f      	movs	r7, r3
 8000528:	4317      	orrs	r7, r2
 800052a:	d100      	bne.n	800052e <__aeabi_dadd+0x21e>
 800052c:	e0ad      	b.n	800068a <__aeabi_dadd+0x37a>
 800052e:	1e4f      	subs	r7, r1, #1
 8000530:	46bc      	mov	ip, r7
 8000532:	2901      	cmp	r1, #1
 8000534:	d100      	bne.n	8000538 <__aeabi_dadd+0x228>
 8000536:	e182      	b.n	800083e <__aeabi_dadd+0x52e>
 8000538:	4f58      	ldr	r7, [pc, #352]	@ (800069c <__aeabi_dadd+0x38c>)
 800053a:	42b9      	cmp	r1, r7
 800053c:	d100      	bne.n	8000540 <__aeabi_dadd+0x230>
 800053e:	e190      	b.n	8000862 <__aeabi_dadd+0x552>
 8000540:	4661      	mov	r1, ip
 8000542:	2701      	movs	r7, #1
 8000544:	2938      	cmp	r1, #56	@ 0x38
 8000546:	dd00      	ble.n	800054a <__aeabi_dadd+0x23a>
 8000548:	e72e      	b.n	80003a8 <__aeabi_dadd+0x98>
 800054a:	e718      	b.n	800037e <__aeabi_dadd+0x6e>
 800054c:	4f55      	ldr	r7, [pc, #340]	@ (80006a4 <__aeabi_dadd+0x394>)
 800054e:	1c61      	adds	r1, r4, #1
 8000550:	4239      	tst	r1, r7
 8000552:	d000      	beq.n	8000556 <__aeabi_dadd+0x246>
 8000554:	e0d0      	b.n	80006f8 <__aeabi_dadd+0x3e8>
 8000556:	0031      	movs	r1, r6
 8000558:	4648      	mov	r0, r9
 800055a:	001f      	movs	r7, r3
 800055c:	4301      	orrs	r1, r0
 800055e:	4317      	orrs	r7, r2
 8000560:	2c00      	cmp	r4, #0
 8000562:	d000      	beq.n	8000566 <__aeabi_dadd+0x256>
 8000564:	e13d      	b.n	80007e2 <__aeabi_dadd+0x4d2>
 8000566:	2900      	cmp	r1, #0
 8000568:	d100      	bne.n	800056c <__aeabi_dadd+0x25c>
 800056a:	e1bc      	b.n	80008e6 <__aeabi_dadd+0x5d6>
 800056c:	2f00      	cmp	r7, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_dadd+0x262>
 8000570:	e1bf      	b.n	80008f2 <__aeabi_dadd+0x5e2>
 8000572:	464b      	mov	r3, r9
 8000574:	2100      	movs	r1, #0
 8000576:	08d8      	lsrs	r0, r3, #3
 8000578:	0777      	lsls	r7, r6, #29
 800057a:	4307      	orrs	r7, r0
 800057c:	08f0      	lsrs	r0, r6, #3
 800057e:	0306      	lsls	r6, r0, #12
 8000580:	054c      	lsls	r4, r1, #21
 8000582:	0b36      	lsrs	r6, r6, #12
 8000584:	0d64      	lsrs	r4, r4, #21
 8000586:	e00c      	b.n	80005a2 <__aeabi_dadd+0x292>
 8000588:	4f44      	ldr	r7, [pc, #272]	@ (800069c <__aeabi_dadd+0x38c>)
 800058a:	42bc      	cmp	r4, r7
 800058c:	d100      	bne.n	8000590 <__aeabi_dadd+0x280>
 800058e:	e08b      	b.n	80006a8 <__aeabi_dadd+0x398>
 8000590:	2701      	movs	r7, #1
 8000592:	2938      	cmp	r1, #56	@ 0x38
 8000594:	dcb2      	bgt.n	80004fc <__aeabi_dadd+0x1ec>
 8000596:	2780      	movs	r7, #128	@ 0x80
 8000598:	043f      	lsls	r7, r7, #16
 800059a:	433b      	orrs	r3, r7
 800059c:	e79c      	b.n	80004d8 <__aeabi_dadd+0x1c8>
 800059e:	2600      	movs	r6, #0
 80005a0:	2700      	movs	r7, #0
 80005a2:	0524      	lsls	r4, r4, #20
 80005a4:	4334      	orrs	r4, r6
 80005a6:	07ed      	lsls	r5, r5, #31
 80005a8:	432c      	orrs	r4, r5
 80005aa:	0038      	movs	r0, r7
 80005ac:	0021      	movs	r1, r4
 80005ae:	b002      	add	sp, #8
 80005b0:	bce0      	pop	{r5, r6, r7}
 80005b2:	46ba      	mov	sl, r7
 80005b4:	46b1      	mov	r9, r6
 80005b6:	46a8      	mov	r8, r5
 80005b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ba:	077b      	lsls	r3, r7, #29
 80005bc:	d004      	beq.n	80005c8 <__aeabi_dadd+0x2b8>
 80005be:	230f      	movs	r3, #15
 80005c0:	403b      	ands	r3, r7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d000      	beq.n	80005c8 <__aeabi_dadd+0x2b8>
 80005c6:	e728      	b.n	800041a <__aeabi_dadd+0x10a>
 80005c8:	08f8      	lsrs	r0, r7, #3
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <__aeabi_dadd+0x38c>)
 80005cc:	0777      	lsls	r7, r6, #29
 80005ce:	4307      	orrs	r7, r0
 80005d0:	08f0      	lsrs	r0, r6, #3
 80005d2:	429c      	cmp	r4, r3
 80005d4:	d000      	beq.n	80005d8 <__aeabi_dadd+0x2c8>
 80005d6:	e24a      	b.n	8000a6e <__aeabi_dadd+0x75e>
 80005d8:	003b      	movs	r3, r7
 80005da:	4303      	orrs	r3, r0
 80005dc:	d059      	beq.n	8000692 <__aeabi_dadd+0x382>
 80005de:	2680      	movs	r6, #128	@ 0x80
 80005e0:	0336      	lsls	r6, r6, #12
 80005e2:	4306      	orrs	r6, r0
 80005e4:	0336      	lsls	r6, r6, #12
 80005e6:	4c2d      	ldr	r4, [pc, #180]	@ (800069c <__aeabi_dadd+0x38c>)
 80005e8:	0b36      	lsrs	r6, r6, #12
 80005ea:	e7da      	b.n	80005a2 <__aeabi_dadd+0x292>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	d061      	beq.n	80006b4 <__aeabi_dadd+0x3a4>
 80005f0:	4641      	mov	r1, r8
 80005f2:	1b09      	subs	r1, r1, r4
 80005f4:	2c00      	cmp	r4, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_dadd+0x2ea>
 80005f8:	e0b9      	b.n	800076e <__aeabi_dadd+0x45e>
 80005fa:	4c28      	ldr	r4, [pc, #160]	@ (800069c <__aeabi_dadd+0x38c>)
 80005fc:	45a0      	cmp	r8, r4
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x2f2>
 8000600:	e1a5      	b.n	800094e <__aeabi_dadd+0x63e>
 8000602:	2701      	movs	r7, #1
 8000604:	2938      	cmp	r1, #56	@ 0x38
 8000606:	dc13      	bgt.n	8000630 <__aeabi_dadd+0x320>
 8000608:	2480      	movs	r4, #128	@ 0x80
 800060a:	0424      	lsls	r4, r4, #16
 800060c:	4326      	orrs	r6, r4
 800060e:	291f      	cmp	r1, #31
 8000610:	dd00      	ble.n	8000614 <__aeabi_dadd+0x304>
 8000612:	e1c8      	b.n	80009a6 <__aeabi_dadd+0x696>
 8000614:	2420      	movs	r4, #32
 8000616:	0037      	movs	r7, r6
 8000618:	4648      	mov	r0, r9
 800061a:	1a64      	subs	r4, r4, r1
 800061c:	40a7      	lsls	r7, r4
 800061e:	40c8      	lsrs	r0, r1
 8000620:	4307      	orrs	r7, r0
 8000622:	4648      	mov	r0, r9
 8000624:	40a0      	lsls	r0, r4
 8000626:	40ce      	lsrs	r6, r1
 8000628:	1e44      	subs	r4, r0, #1
 800062a:	41a0      	sbcs	r0, r4
 800062c:	199b      	adds	r3, r3, r6
 800062e:	4307      	orrs	r7, r0
 8000630:	18bf      	adds	r7, r7, r2
 8000632:	4297      	cmp	r7, r2
 8000634:	4192      	sbcs	r2, r2
 8000636:	4252      	negs	r2, r2
 8000638:	4644      	mov	r4, r8
 800063a:	18d6      	adds	r6, r2, r3
 800063c:	e763      	b.n	8000506 <__aeabi_dadd+0x1f6>
 800063e:	0038      	movs	r0, r7
 8000640:	f001 fd00 	bl	8002044 <__clzsi2>
 8000644:	0003      	movs	r3, r0
 8000646:	3318      	adds	r3, #24
 8000648:	2b1f      	cmp	r3, #31
 800064a:	dc00      	bgt.n	800064e <__aeabi_dadd+0x33e>
 800064c:	e6bf      	b.n	80003ce <__aeabi_dadd+0xbe>
 800064e:	003a      	movs	r2, r7
 8000650:	3808      	subs	r0, #8
 8000652:	4082      	lsls	r2, r0
 8000654:	429c      	cmp	r4, r3
 8000656:	dd00      	ble.n	800065a <__aeabi_dadd+0x34a>
 8000658:	e083      	b.n	8000762 <__aeabi_dadd+0x452>
 800065a:	1b1b      	subs	r3, r3, r4
 800065c:	1c58      	adds	r0, r3, #1
 800065e:	281f      	cmp	r0, #31
 8000660:	dc00      	bgt.n	8000664 <__aeabi_dadd+0x354>
 8000662:	e1b4      	b.n	80009ce <__aeabi_dadd+0x6be>
 8000664:	0017      	movs	r7, r2
 8000666:	3b1f      	subs	r3, #31
 8000668:	40df      	lsrs	r7, r3
 800066a:	2820      	cmp	r0, #32
 800066c:	d005      	beq.n	800067a <__aeabi_dadd+0x36a>
 800066e:	2340      	movs	r3, #64	@ 0x40
 8000670:	1a1b      	subs	r3, r3, r0
 8000672:	409a      	lsls	r2, r3
 8000674:	1e53      	subs	r3, r2, #1
 8000676:	419a      	sbcs	r2, r3
 8000678:	4317      	orrs	r7, r2
 800067a:	2400      	movs	r4, #0
 800067c:	2f00      	cmp	r7, #0
 800067e:	d00a      	beq.n	8000696 <__aeabi_dadd+0x386>
 8000680:	077b      	lsls	r3, r7, #29
 8000682:	d000      	beq.n	8000686 <__aeabi_dadd+0x376>
 8000684:	e6c4      	b.n	8000410 <__aeabi_dadd+0x100>
 8000686:	0026      	movs	r6, r4
 8000688:	e79e      	b.n	80005c8 <__aeabi_dadd+0x2b8>
 800068a:	464b      	mov	r3, r9
 800068c:	000c      	movs	r4, r1
 800068e:	08d8      	lsrs	r0, r3, #3
 8000690:	e79b      	b.n	80005ca <__aeabi_dadd+0x2ba>
 8000692:	2700      	movs	r7, #0
 8000694:	4c01      	ldr	r4, [pc, #4]	@ (800069c <__aeabi_dadd+0x38c>)
 8000696:	2600      	movs	r6, #0
 8000698:	e783      	b.n	80005a2 <__aeabi_dadd+0x292>
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	000007ff 	.word	0x000007ff
 80006a0:	ff7fffff 	.word	0xff7fffff
 80006a4:	000007fe 	.word	0x000007fe
 80006a8:	464b      	mov	r3, r9
 80006aa:	0777      	lsls	r7, r6, #29
 80006ac:	08d8      	lsrs	r0, r3, #3
 80006ae:	4307      	orrs	r7, r0
 80006b0:	08f0      	lsrs	r0, r6, #3
 80006b2:	e791      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 80006b4:	4fcd      	ldr	r7, [pc, #820]	@ (80009ec <__aeabi_dadd+0x6dc>)
 80006b6:	1c61      	adds	r1, r4, #1
 80006b8:	4239      	tst	r1, r7
 80006ba:	d16b      	bne.n	8000794 <__aeabi_dadd+0x484>
 80006bc:	0031      	movs	r1, r6
 80006be:	4648      	mov	r0, r9
 80006c0:	4301      	orrs	r1, r0
 80006c2:	2c00      	cmp	r4, #0
 80006c4:	d000      	beq.n	80006c8 <__aeabi_dadd+0x3b8>
 80006c6:	e14b      	b.n	8000960 <__aeabi_dadd+0x650>
 80006c8:	001f      	movs	r7, r3
 80006ca:	4317      	orrs	r7, r2
 80006cc:	2900      	cmp	r1, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dadd+0x3c2>
 80006d0:	e181      	b.n	80009d6 <__aeabi_dadd+0x6c6>
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x3c8>
 80006d6:	e74c      	b.n	8000572 <__aeabi_dadd+0x262>
 80006d8:	444a      	add	r2, r9
 80006da:	454a      	cmp	r2, r9
 80006dc:	4180      	sbcs	r0, r0
 80006de:	18f6      	adds	r6, r6, r3
 80006e0:	4240      	negs	r0, r0
 80006e2:	1836      	adds	r6, r6, r0
 80006e4:	0233      	lsls	r3, r6, #8
 80006e6:	d500      	bpl.n	80006ea <__aeabi_dadd+0x3da>
 80006e8:	e1b0      	b.n	8000a4c <__aeabi_dadd+0x73c>
 80006ea:	0017      	movs	r7, r2
 80006ec:	4691      	mov	r9, r2
 80006ee:	4337      	orrs	r7, r6
 80006f0:	d000      	beq.n	80006f4 <__aeabi_dadd+0x3e4>
 80006f2:	e73e      	b.n	8000572 <__aeabi_dadd+0x262>
 80006f4:	2600      	movs	r6, #0
 80006f6:	e754      	b.n	80005a2 <__aeabi_dadd+0x292>
 80006f8:	4649      	mov	r1, r9
 80006fa:	1a89      	subs	r1, r1, r2
 80006fc:	4688      	mov	r8, r1
 80006fe:	45c1      	cmp	r9, r8
 8000700:	41bf      	sbcs	r7, r7
 8000702:	1af1      	subs	r1, r6, r3
 8000704:	427f      	negs	r7, r7
 8000706:	1bc9      	subs	r1, r1, r7
 8000708:	020f      	lsls	r7, r1, #8
 800070a:	d461      	bmi.n	80007d0 <__aeabi_dadd+0x4c0>
 800070c:	4647      	mov	r7, r8
 800070e:	430f      	orrs	r7, r1
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x404>
 8000712:	e0bd      	b.n	8000890 <__aeabi_dadd+0x580>
 8000714:	000e      	movs	r6, r1
 8000716:	4647      	mov	r7, r8
 8000718:	e651      	b.n	80003be <__aeabi_dadd+0xae>
 800071a:	4cb5      	ldr	r4, [pc, #724]	@ (80009f0 <__aeabi_dadd+0x6e0>)
 800071c:	45a0      	cmp	r8, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x412>
 8000720:	e100      	b.n	8000924 <__aeabi_dadd+0x614>
 8000722:	2701      	movs	r7, #1
 8000724:	2938      	cmp	r1, #56	@ 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x41a>
 8000728:	e6b8      	b.n	800049c <__aeabi_dadd+0x18c>
 800072a:	2480      	movs	r4, #128	@ 0x80
 800072c:	0424      	lsls	r4, r4, #16
 800072e:	4326      	orrs	r6, r4
 8000730:	e6a3      	b.n	800047a <__aeabi_dadd+0x16a>
 8000732:	4eb0      	ldr	r6, [pc, #704]	@ (80009f4 <__aeabi_dadd+0x6e4>)
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	4016      	ands	r6, r2
 8000738:	077b      	lsls	r3, r7, #29
 800073a:	d000      	beq.n	800073e <__aeabi_dadd+0x42e>
 800073c:	e73f      	b.n	80005be <__aeabi_dadd+0x2ae>
 800073e:	e743      	b.n	80005c8 <__aeabi_dadd+0x2b8>
 8000740:	000f      	movs	r7, r1
 8000742:	0018      	movs	r0, r3
 8000744:	3f20      	subs	r7, #32
 8000746:	40f8      	lsrs	r0, r7
 8000748:	4684      	mov	ip, r0
 800074a:	2920      	cmp	r1, #32
 800074c:	d003      	beq.n	8000756 <__aeabi_dadd+0x446>
 800074e:	2740      	movs	r7, #64	@ 0x40
 8000750:	1a79      	subs	r1, r7, r1
 8000752:	408b      	lsls	r3, r1
 8000754:	431a      	orrs	r2, r3
 8000756:	1e53      	subs	r3, r2, #1
 8000758:	419a      	sbcs	r2, r3
 800075a:	4663      	mov	r3, ip
 800075c:	0017      	movs	r7, r2
 800075e:	431f      	orrs	r7, r3
 8000760:	e622      	b.n	80003a8 <__aeabi_dadd+0x98>
 8000762:	48a4      	ldr	r0, [pc, #656]	@ (80009f4 <__aeabi_dadd+0x6e4>)
 8000764:	1ae1      	subs	r1, r4, r3
 8000766:	4010      	ands	r0, r2
 8000768:	0747      	lsls	r7, r0, #29
 800076a:	08c0      	lsrs	r0, r0, #3
 800076c:	e707      	b.n	800057e <__aeabi_dadd+0x26e>
 800076e:	0034      	movs	r4, r6
 8000770:	4648      	mov	r0, r9
 8000772:	4304      	orrs	r4, r0
 8000774:	d100      	bne.n	8000778 <__aeabi_dadd+0x468>
 8000776:	e0fa      	b.n	800096e <__aeabi_dadd+0x65e>
 8000778:	1e4c      	subs	r4, r1, #1
 800077a:	2901      	cmp	r1, #1
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x470>
 800077e:	e0d7      	b.n	8000930 <__aeabi_dadd+0x620>
 8000780:	4f9b      	ldr	r7, [pc, #620]	@ (80009f0 <__aeabi_dadd+0x6e0>)
 8000782:	42b9      	cmp	r1, r7
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x478>
 8000786:	e0e2      	b.n	800094e <__aeabi_dadd+0x63e>
 8000788:	2701      	movs	r7, #1
 800078a:	2c38      	cmp	r4, #56	@ 0x38
 800078c:	dd00      	ble.n	8000790 <__aeabi_dadd+0x480>
 800078e:	e74f      	b.n	8000630 <__aeabi_dadd+0x320>
 8000790:	0021      	movs	r1, r4
 8000792:	e73c      	b.n	800060e <__aeabi_dadd+0x2fe>
 8000794:	4c96      	ldr	r4, [pc, #600]	@ (80009f0 <__aeabi_dadd+0x6e0>)
 8000796:	42a1      	cmp	r1, r4
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x48c>
 800079a:	e0dd      	b.n	8000958 <__aeabi_dadd+0x648>
 800079c:	444a      	add	r2, r9
 800079e:	454a      	cmp	r2, r9
 80007a0:	4180      	sbcs	r0, r0
 80007a2:	18f3      	adds	r3, r6, r3
 80007a4:	4240      	negs	r0, r0
 80007a6:	1818      	adds	r0, r3, r0
 80007a8:	07c7      	lsls	r7, r0, #31
 80007aa:	0852      	lsrs	r2, r2, #1
 80007ac:	4317      	orrs	r7, r2
 80007ae:	0846      	lsrs	r6, r0, #1
 80007b0:	0752      	lsls	r2, r2, #29
 80007b2:	d005      	beq.n	80007c0 <__aeabi_dadd+0x4b0>
 80007b4:	220f      	movs	r2, #15
 80007b6:	000c      	movs	r4, r1
 80007b8:	403a      	ands	r2, r7
 80007ba:	2a04      	cmp	r2, #4
 80007bc:	d000      	beq.n	80007c0 <__aeabi_dadd+0x4b0>
 80007be:	e62c      	b.n	800041a <__aeabi_dadd+0x10a>
 80007c0:	0776      	lsls	r6, r6, #29
 80007c2:	08ff      	lsrs	r7, r7, #3
 80007c4:	4337      	orrs	r7, r6
 80007c6:	0900      	lsrs	r0, r0, #4
 80007c8:	e6d9      	b.n	800057e <__aeabi_dadd+0x26e>
 80007ca:	2700      	movs	r7, #0
 80007cc:	2600      	movs	r6, #0
 80007ce:	e6e8      	b.n	80005a2 <__aeabi_dadd+0x292>
 80007d0:	4649      	mov	r1, r9
 80007d2:	1a57      	subs	r7, r2, r1
 80007d4:	42ba      	cmp	r2, r7
 80007d6:	4192      	sbcs	r2, r2
 80007d8:	1b9e      	subs	r6, r3, r6
 80007da:	4252      	negs	r2, r2
 80007dc:	4665      	mov	r5, ip
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	e5ed      	b.n	80003be <__aeabi_dadd+0xae>
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d000      	beq.n	80007e8 <__aeabi_dadd+0x4d8>
 80007e6:	e0c6      	b.n	8000976 <__aeabi_dadd+0x666>
 80007e8:	2f00      	cmp	r7, #0
 80007ea:	d167      	bne.n	80008bc <__aeabi_dadd+0x5ac>
 80007ec:	2680      	movs	r6, #128	@ 0x80
 80007ee:	2500      	movs	r5, #0
 80007f0:	4c7f      	ldr	r4, [pc, #508]	@ (80009f0 <__aeabi_dadd+0x6e0>)
 80007f2:	0336      	lsls	r6, r6, #12
 80007f4:	e6d5      	b.n	80005a2 <__aeabi_dadd+0x292>
 80007f6:	4665      	mov	r5, ip
 80007f8:	000c      	movs	r4, r1
 80007fa:	001e      	movs	r6, r3
 80007fc:	08d0      	lsrs	r0, r2, #3
 80007fe:	e6e4      	b.n	80005ca <__aeabi_dadd+0x2ba>
 8000800:	444a      	add	r2, r9
 8000802:	454a      	cmp	r2, r9
 8000804:	4180      	sbcs	r0, r0
 8000806:	18f3      	adds	r3, r6, r3
 8000808:	4240      	negs	r0, r0
 800080a:	1818      	adds	r0, r3, r0
 800080c:	0011      	movs	r1, r2
 800080e:	0203      	lsls	r3, r0, #8
 8000810:	d400      	bmi.n	8000814 <__aeabi_dadd+0x504>
 8000812:	e096      	b.n	8000942 <__aeabi_dadd+0x632>
 8000814:	4b77      	ldr	r3, [pc, #476]	@ (80009f4 <__aeabi_dadd+0x6e4>)
 8000816:	0849      	lsrs	r1, r1, #1
 8000818:	4018      	ands	r0, r3
 800081a:	07c3      	lsls	r3, r0, #31
 800081c:	430b      	orrs	r3, r1
 800081e:	0844      	lsrs	r4, r0, #1
 8000820:	0749      	lsls	r1, r1, #29
 8000822:	d100      	bne.n	8000826 <__aeabi_dadd+0x516>
 8000824:	e129      	b.n	8000a7a <__aeabi_dadd+0x76a>
 8000826:	220f      	movs	r2, #15
 8000828:	401a      	ands	r2, r3
 800082a:	2a04      	cmp	r2, #4
 800082c:	d100      	bne.n	8000830 <__aeabi_dadd+0x520>
 800082e:	e0ea      	b.n	8000a06 <__aeabi_dadd+0x6f6>
 8000830:	1d1f      	adds	r7, r3, #4
 8000832:	429f      	cmp	r7, r3
 8000834:	41b6      	sbcs	r6, r6
 8000836:	4276      	negs	r6, r6
 8000838:	1936      	adds	r6, r6, r4
 800083a:	2402      	movs	r4, #2
 800083c:	e6c4      	b.n	80005c8 <__aeabi_dadd+0x2b8>
 800083e:	4649      	mov	r1, r9
 8000840:	1a8f      	subs	r7, r1, r2
 8000842:	45b9      	cmp	r9, r7
 8000844:	4180      	sbcs	r0, r0
 8000846:	1af6      	subs	r6, r6, r3
 8000848:	4240      	negs	r0, r0
 800084a:	1a36      	subs	r6, r6, r0
 800084c:	0233      	lsls	r3, r6, #8
 800084e:	d406      	bmi.n	800085e <__aeabi_dadd+0x54e>
 8000850:	0773      	lsls	r3, r6, #29
 8000852:	08ff      	lsrs	r7, r7, #3
 8000854:	2101      	movs	r1, #1
 8000856:	431f      	orrs	r7, r3
 8000858:	08f0      	lsrs	r0, r6, #3
 800085a:	e690      	b.n	800057e <__aeabi_dadd+0x26e>
 800085c:	4665      	mov	r5, ip
 800085e:	2401      	movs	r4, #1
 8000860:	e5ab      	b.n	80003ba <__aeabi_dadd+0xaa>
 8000862:	464b      	mov	r3, r9
 8000864:	0777      	lsls	r7, r6, #29
 8000866:	08d8      	lsrs	r0, r3, #3
 8000868:	4307      	orrs	r7, r0
 800086a:	08f0      	lsrs	r0, r6, #3
 800086c:	e6b4      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 800086e:	000f      	movs	r7, r1
 8000870:	0018      	movs	r0, r3
 8000872:	3f20      	subs	r7, #32
 8000874:	40f8      	lsrs	r0, r7
 8000876:	4684      	mov	ip, r0
 8000878:	2920      	cmp	r1, #32
 800087a:	d003      	beq.n	8000884 <__aeabi_dadd+0x574>
 800087c:	2740      	movs	r7, #64	@ 0x40
 800087e:	1a79      	subs	r1, r7, r1
 8000880:	408b      	lsls	r3, r1
 8000882:	431a      	orrs	r2, r3
 8000884:	1e53      	subs	r3, r2, #1
 8000886:	419a      	sbcs	r2, r3
 8000888:	4663      	mov	r3, ip
 800088a:	0017      	movs	r7, r2
 800088c:	431f      	orrs	r7, r3
 800088e:	e635      	b.n	80004fc <__aeabi_dadd+0x1ec>
 8000890:	2500      	movs	r5, #0
 8000892:	2400      	movs	r4, #0
 8000894:	2600      	movs	r6, #0
 8000896:	e684      	b.n	80005a2 <__aeabi_dadd+0x292>
 8000898:	000c      	movs	r4, r1
 800089a:	0035      	movs	r5, r6
 800089c:	3c20      	subs	r4, #32
 800089e:	40e5      	lsrs	r5, r4
 80008a0:	2920      	cmp	r1, #32
 80008a2:	d005      	beq.n	80008b0 <__aeabi_dadd+0x5a0>
 80008a4:	2440      	movs	r4, #64	@ 0x40
 80008a6:	1a61      	subs	r1, r4, r1
 80008a8:	408e      	lsls	r6, r1
 80008aa:	4649      	mov	r1, r9
 80008ac:	4331      	orrs	r1, r6
 80008ae:	4689      	mov	r9, r1
 80008b0:	4648      	mov	r0, r9
 80008b2:	1e41      	subs	r1, r0, #1
 80008b4:	4188      	sbcs	r0, r1
 80008b6:	0007      	movs	r7, r0
 80008b8:	432f      	orrs	r7, r5
 80008ba:	e5ef      	b.n	800049c <__aeabi_dadd+0x18c>
 80008bc:	08d2      	lsrs	r2, r2, #3
 80008be:	075f      	lsls	r7, r3, #29
 80008c0:	4665      	mov	r5, ip
 80008c2:	4317      	orrs	r7, r2
 80008c4:	08d8      	lsrs	r0, r3, #3
 80008c6:	e687      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 80008c8:	1a17      	subs	r7, r2, r0
 80008ca:	42ba      	cmp	r2, r7
 80008cc:	4192      	sbcs	r2, r2
 80008ce:	1b9e      	subs	r6, r3, r6
 80008d0:	4252      	negs	r2, r2
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	0233      	lsls	r3, r6, #8
 80008d6:	d4c1      	bmi.n	800085c <__aeabi_dadd+0x54c>
 80008d8:	0773      	lsls	r3, r6, #29
 80008da:	08ff      	lsrs	r7, r7, #3
 80008dc:	4665      	mov	r5, ip
 80008de:	2101      	movs	r1, #1
 80008e0:	431f      	orrs	r7, r3
 80008e2:	08f0      	lsrs	r0, r6, #3
 80008e4:	e64b      	b.n	800057e <__aeabi_dadd+0x26e>
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d07b      	beq.n	80009e2 <__aeabi_dadd+0x6d2>
 80008ea:	4665      	mov	r5, ip
 80008ec:	001e      	movs	r6, r3
 80008ee:	4691      	mov	r9, r2
 80008f0:	e63f      	b.n	8000572 <__aeabi_dadd+0x262>
 80008f2:	1a81      	subs	r1, r0, r2
 80008f4:	4688      	mov	r8, r1
 80008f6:	45c1      	cmp	r9, r8
 80008f8:	41a4      	sbcs	r4, r4
 80008fa:	1af1      	subs	r1, r6, r3
 80008fc:	4264      	negs	r4, r4
 80008fe:	1b09      	subs	r1, r1, r4
 8000900:	2480      	movs	r4, #128	@ 0x80
 8000902:	0424      	lsls	r4, r4, #16
 8000904:	4221      	tst	r1, r4
 8000906:	d077      	beq.n	80009f8 <__aeabi_dadd+0x6e8>
 8000908:	1a10      	subs	r0, r2, r0
 800090a:	4282      	cmp	r2, r0
 800090c:	4192      	sbcs	r2, r2
 800090e:	0007      	movs	r7, r0
 8000910:	1b9e      	subs	r6, r3, r6
 8000912:	4252      	negs	r2, r2
 8000914:	1ab6      	subs	r6, r6, r2
 8000916:	4337      	orrs	r7, r6
 8000918:	d000      	beq.n	800091c <__aeabi_dadd+0x60c>
 800091a:	e0a0      	b.n	8000a5e <__aeabi_dadd+0x74e>
 800091c:	4665      	mov	r5, ip
 800091e:	2400      	movs	r4, #0
 8000920:	2600      	movs	r6, #0
 8000922:	e63e      	b.n	80005a2 <__aeabi_dadd+0x292>
 8000924:	075f      	lsls	r7, r3, #29
 8000926:	08d2      	lsrs	r2, r2, #3
 8000928:	4665      	mov	r5, ip
 800092a:	4317      	orrs	r7, r2
 800092c:	08d8      	lsrs	r0, r3, #3
 800092e:	e653      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 8000930:	1881      	adds	r1, r0, r2
 8000932:	4291      	cmp	r1, r2
 8000934:	4192      	sbcs	r2, r2
 8000936:	18f0      	adds	r0, r6, r3
 8000938:	4252      	negs	r2, r2
 800093a:	1880      	adds	r0, r0, r2
 800093c:	0203      	lsls	r3, r0, #8
 800093e:	d500      	bpl.n	8000942 <__aeabi_dadd+0x632>
 8000940:	e768      	b.n	8000814 <__aeabi_dadd+0x504>
 8000942:	0747      	lsls	r7, r0, #29
 8000944:	08c9      	lsrs	r1, r1, #3
 8000946:	430f      	orrs	r7, r1
 8000948:	08c0      	lsrs	r0, r0, #3
 800094a:	2101      	movs	r1, #1
 800094c:	e617      	b.n	800057e <__aeabi_dadd+0x26e>
 800094e:	08d2      	lsrs	r2, r2, #3
 8000950:	075f      	lsls	r7, r3, #29
 8000952:	4317      	orrs	r7, r2
 8000954:	08d8      	lsrs	r0, r3, #3
 8000956:	e63f      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 8000958:	000c      	movs	r4, r1
 800095a:	2600      	movs	r6, #0
 800095c:	2700      	movs	r7, #0
 800095e:	e620      	b.n	80005a2 <__aeabi_dadd+0x292>
 8000960:	2900      	cmp	r1, #0
 8000962:	d156      	bne.n	8000a12 <__aeabi_dadd+0x702>
 8000964:	075f      	lsls	r7, r3, #29
 8000966:	08d2      	lsrs	r2, r2, #3
 8000968:	4317      	orrs	r7, r2
 800096a:	08d8      	lsrs	r0, r3, #3
 800096c:	e634      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 800096e:	000c      	movs	r4, r1
 8000970:	001e      	movs	r6, r3
 8000972:	08d0      	lsrs	r0, r2, #3
 8000974:	e629      	b.n	80005ca <__aeabi_dadd+0x2ba>
 8000976:	08c1      	lsrs	r1, r0, #3
 8000978:	0770      	lsls	r0, r6, #29
 800097a:	4301      	orrs	r1, r0
 800097c:	08f0      	lsrs	r0, r6, #3
 800097e:	2f00      	cmp	r7, #0
 8000980:	d062      	beq.n	8000a48 <__aeabi_dadd+0x738>
 8000982:	2480      	movs	r4, #128	@ 0x80
 8000984:	0324      	lsls	r4, r4, #12
 8000986:	4220      	tst	r0, r4
 8000988:	d007      	beq.n	800099a <__aeabi_dadd+0x68a>
 800098a:	08de      	lsrs	r6, r3, #3
 800098c:	4226      	tst	r6, r4
 800098e:	d104      	bne.n	800099a <__aeabi_dadd+0x68a>
 8000990:	4665      	mov	r5, ip
 8000992:	0030      	movs	r0, r6
 8000994:	08d1      	lsrs	r1, r2, #3
 8000996:	075b      	lsls	r3, r3, #29
 8000998:	4319      	orrs	r1, r3
 800099a:	0f4f      	lsrs	r7, r1, #29
 800099c:	00c9      	lsls	r1, r1, #3
 800099e:	08c9      	lsrs	r1, r1, #3
 80009a0:	077f      	lsls	r7, r7, #29
 80009a2:	430f      	orrs	r7, r1
 80009a4:	e618      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 80009a6:	000c      	movs	r4, r1
 80009a8:	0030      	movs	r0, r6
 80009aa:	3c20      	subs	r4, #32
 80009ac:	40e0      	lsrs	r0, r4
 80009ae:	4684      	mov	ip, r0
 80009b0:	2920      	cmp	r1, #32
 80009b2:	d005      	beq.n	80009c0 <__aeabi_dadd+0x6b0>
 80009b4:	2440      	movs	r4, #64	@ 0x40
 80009b6:	1a61      	subs	r1, r4, r1
 80009b8:	408e      	lsls	r6, r1
 80009ba:	4649      	mov	r1, r9
 80009bc:	4331      	orrs	r1, r6
 80009be:	4689      	mov	r9, r1
 80009c0:	4648      	mov	r0, r9
 80009c2:	1e41      	subs	r1, r0, #1
 80009c4:	4188      	sbcs	r0, r1
 80009c6:	4661      	mov	r1, ip
 80009c8:	0007      	movs	r7, r0
 80009ca:	430f      	orrs	r7, r1
 80009cc:	e630      	b.n	8000630 <__aeabi_dadd+0x320>
 80009ce:	2120      	movs	r1, #32
 80009d0:	2700      	movs	r7, #0
 80009d2:	1a09      	subs	r1, r1, r0
 80009d4:	e50e      	b.n	80003f4 <__aeabi_dadd+0xe4>
 80009d6:	001e      	movs	r6, r3
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d000      	beq.n	80009de <__aeabi_dadd+0x6ce>
 80009dc:	e522      	b.n	8000424 <__aeabi_dadd+0x114>
 80009de:	2400      	movs	r4, #0
 80009e0:	e758      	b.n	8000894 <__aeabi_dadd+0x584>
 80009e2:	2500      	movs	r5, #0
 80009e4:	2400      	movs	r4, #0
 80009e6:	2600      	movs	r6, #0
 80009e8:	e5db      	b.n	80005a2 <__aeabi_dadd+0x292>
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	000007ff 	.word	0x000007ff
 80009f4:	ff7fffff 	.word	0xff7fffff
 80009f8:	4647      	mov	r7, r8
 80009fa:	430f      	orrs	r7, r1
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dadd+0x6f0>
 80009fe:	e747      	b.n	8000890 <__aeabi_dadd+0x580>
 8000a00:	000e      	movs	r6, r1
 8000a02:	46c1      	mov	r9, r8
 8000a04:	e5b5      	b.n	8000572 <__aeabi_dadd+0x262>
 8000a06:	08df      	lsrs	r7, r3, #3
 8000a08:	0764      	lsls	r4, r4, #29
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4327      	orrs	r7, r4
 8000a0e:	0900      	lsrs	r0, r0, #4
 8000a10:	e5b5      	b.n	800057e <__aeabi_dadd+0x26e>
 8000a12:	0019      	movs	r1, r3
 8000a14:	08c0      	lsrs	r0, r0, #3
 8000a16:	0777      	lsls	r7, r6, #29
 8000a18:	4307      	orrs	r7, r0
 8000a1a:	4311      	orrs	r1, r2
 8000a1c:	08f0      	lsrs	r0, r6, #3
 8000a1e:	2900      	cmp	r1, #0
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dadd+0x714>
 8000a22:	e5d9      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	0309      	lsls	r1, r1, #12
 8000a28:	4208      	tst	r0, r1
 8000a2a:	d007      	beq.n	8000a3c <__aeabi_dadd+0x72c>
 8000a2c:	08dc      	lsrs	r4, r3, #3
 8000a2e:	420c      	tst	r4, r1
 8000a30:	d104      	bne.n	8000a3c <__aeabi_dadd+0x72c>
 8000a32:	08d2      	lsrs	r2, r2, #3
 8000a34:	075b      	lsls	r3, r3, #29
 8000a36:	431a      	orrs	r2, r3
 8000a38:	0017      	movs	r7, r2
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	0f7b      	lsrs	r3, r7, #29
 8000a3e:	00ff      	lsls	r7, r7, #3
 8000a40:	08ff      	lsrs	r7, r7, #3
 8000a42:	075b      	lsls	r3, r3, #29
 8000a44:	431f      	orrs	r7, r3
 8000a46:	e5c7      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 8000a48:	000f      	movs	r7, r1
 8000a4a:	e5c5      	b.n	80005d8 <__aeabi_dadd+0x2c8>
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <__aeabi_dadd+0x788>)
 8000a4e:	08d2      	lsrs	r2, r2, #3
 8000a50:	4033      	ands	r3, r6
 8000a52:	075f      	lsls	r7, r3, #29
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	2401      	movs	r4, #1
 8000a58:	4317      	orrs	r7, r2
 8000a5a:	0b1e      	lsrs	r6, r3, #12
 8000a5c:	e5a1      	b.n	80005a2 <__aeabi_dadd+0x292>
 8000a5e:	4226      	tst	r6, r4
 8000a60:	d012      	beq.n	8000a88 <__aeabi_dadd+0x778>
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <__aeabi_dadd+0x788>)
 8000a64:	4665      	mov	r5, ip
 8000a66:	0002      	movs	r2, r0
 8000a68:	2401      	movs	r4, #1
 8000a6a:	401e      	ands	r6, r3
 8000a6c:	e4e6      	b.n	800043c <__aeabi_dadd+0x12c>
 8000a6e:	0021      	movs	r1, r4
 8000a70:	e585      	b.n	800057e <__aeabi_dadd+0x26e>
 8000a72:	0017      	movs	r7, r2
 8000a74:	e5a8      	b.n	80005c8 <__aeabi_dadd+0x2b8>
 8000a76:	003a      	movs	r2, r7
 8000a78:	e4d4      	b.n	8000424 <__aeabi_dadd+0x114>
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	0764      	lsls	r4, r4, #29
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	0027      	movs	r7, r4
 8000a82:	2102      	movs	r1, #2
 8000a84:	0900      	lsrs	r0, r0, #4
 8000a86:	e57a      	b.n	800057e <__aeabi_dadd+0x26e>
 8000a88:	08c0      	lsrs	r0, r0, #3
 8000a8a:	0777      	lsls	r7, r6, #29
 8000a8c:	4307      	orrs	r7, r0
 8000a8e:	4665      	mov	r5, ip
 8000a90:	2100      	movs	r1, #0
 8000a92:	08f0      	lsrs	r0, r6, #3
 8000a94:	e573      	b.n	800057e <__aeabi_dadd+0x26e>
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	ff7fffff 	.word	0xff7fffff

08000a9c <__aeabi_ddiv>:
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9e:	46de      	mov	lr, fp
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	4657      	mov	r7, sl
 8000aa4:	464e      	mov	r6, r9
 8000aa6:	b5e0      	push	{r5, r6, r7, lr}
 8000aa8:	b087      	sub	sp, #28
 8000aaa:	9200      	str	r2, [sp, #0]
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	030b      	lsls	r3, r1, #12
 8000ab0:	0b1b      	lsrs	r3, r3, #12
 8000ab2:	469b      	mov	fp, r3
 8000ab4:	0fca      	lsrs	r2, r1, #31
 8000ab6:	004b      	lsls	r3, r1, #1
 8000ab8:	0004      	movs	r4, r0
 8000aba:	4680      	mov	r8, r0
 8000abc:	0d5b      	lsrs	r3, r3, #21
 8000abe:	9202      	str	r2, [sp, #8]
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_ddiv+0x28>
 8000ac2:	e098      	b.n	8000bf6 <__aeabi_ddiv+0x15a>
 8000ac4:	4a7c      	ldr	r2, [pc, #496]	@ (8000cb8 <__aeabi_ddiv+0x21c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d037      	beq.n	8000b3a <__aeabi_ddiv+0x9e>
 8000aca:	4659      	mov	r1, fp
 8000acc:	0f42      	lsrs	r2, r0, #29
 8000ace:	00c9      	lsls	r1, r1, #3
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	0409      	lsls	r1, r1, #16
 8000ad6:	4311      	orrs	r1, r2
 8000ad8:	00c2      	lsls	r2, r0, #3
 8000ada:	4690      	mov	r8, r2
 8000adc:	4a77      	ldr	r2, [pc, #476]	@ (8000cbc <__aeabi_ddiv+0x220>)
 8000ade:	4689      	mov	r9, r1
 8000ae0:	4692      	mov	sl, r2
 8000ae2:	449a      	add	sl, r3
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	2400      	movs	r4, #0
 8000ae8:	9303      	str	r3, [sp, #12]
 8000aea:	9e00      	ldr	r6, [sp, #0]
 8000aec:	9f01      	ldr	r7, [sp, #4]
 8000aee:	033b      	lsls	r3, r7, #12
 8000af0:	0b1b      	lsrs	r3, r3, #12
 8000af2:	469b      	mov	fp, r3
 8000af4:	007b      	lsls	r3, r7, #1
 8000af6:	0030      	movs	r0, r6
 8000af8:	0d5b      	lsrs	r3, r3, #21
 8000afa:	0ffd      	lsrs	r5, r7, #31
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d059      	beq.n	8000bb4 <__aeabi_ddiv+0x118>
 8000b00:	4a6d      	ldr	r2, [pc, #436]	@ (8000cb8 <__aeabi_ddiv+0x21c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d048      	beq.n	8000b98 <__aeabi_ddiv+0xfc>
 8000b06:	4659      	mov	r1, fp
 8000b08:	0f72      	lsrs	r2, r6, #29
 8000b0a:	00c9      	lsls	r1, r1, #3
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	2180      	movs	r1, #128	@ 0x80
 8000b10:	0409      	lsls	r1, r1, #16
 8000b12:	4311      	orrs	r1, r2
 8000b14:	468b      	mov	fp, r1
 8000b16:	4969      	ldr	r1, [pc, #420]	@ (8000cbc <__aeabi_ddiv+0x220>)
 8000b18:	00f2      	lsls	r2, r6, #3
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	4651      	mov	r1, sl
 8000b1e:	4463      	add	r3, ip
 8000b20:	1acb      	subs	r3, r1, r3
 8000b22:	469a      	mov	sl, r3
 8000b24:	2100      	movs	r1, #0
 8000b26:	9e02      	ldr	r6, [sp, #8]
 8000b28:	406e      	eors	r6, r5
 8000b2a:	b2f6      	uxtb	r6, r6
 8000b2c:	2c0f      	cmp	r4, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_ddiv+0x96>
 8000b30:	e0ce      	b.n	8000cd0 <__aeabi_ddiv+0x234>
 8000b32:	4b63      	ldr	r3, [pc, #396]	@ (8000cc0 <__aeabi_ddiv+0x224>)
 8000b34:	00a4      	lsls	r4, r4, #2
 8000b36:	591b      	ldr	r3, [r3, r4]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	465a      	mov	r2, fp
 8000b3c:	4302      	orrs	r2, r0
 8000b3e:	4691      	mov	r9, r2
 8000b40:	d000      	beq.n	8000b44 <__aeabi_ddiv+0xa8>
 8000b42:	e090      	b.n	8000c66 <__aeabi_ddiv+0x1ca>
 8000b44:	469a      	mov	sl, r3
 8000b46:	2302      	movs	r3, #2
 8000b48:	4690      	mov	r8, r2
 8000b4a:	2408      	movs	r4, #8
 8000b4c:	9303      	str	r3, [sp, #12]
 8000b4e:	e7cc      	b.n	8000aea <__aeabi_ddiv+0x4e>
 8000b50:	46cb      	mov	fp, r9
 8000b52:	4642      	mov	r2, r8
 8000b54:	9d02      	ldr	r5, [sp, #8]
 8000b56:	9903      	ldr	r1, [sp, #12]
 8000b58:	2902      	cmp	r1, #2
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_ddiv+0xc2>
 8000b5c:	e1de      	b.n	8000f1c <__aeabi_ddiv+0x480>
 8000b5e:	2903      	cmp	r1, #3
 8000b60:	d100      	bne.n	8000b64 <__aeabi_ddiv+0xc8>
 8000b62:	e08d      	b.n	8000c80 <__aeabi_ddiv+0x1e4>
 8000b64:	2901      	cmp	r1, #1
 8000b66:	d000      	beq.n	8000b6a <__aeabi_ddiv+0xce>
 8000b68:	e179      	b.n	8000e5e <__aeabi_ddiv+0x3c2>
 8000b6a:	002e      	movs	r6, r5
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2400      	movs	r4, #0
 8000b72:	4690      	mov	r8, r2
 8000b74:	051b      	lsls	r3, r3, #20
 8000b76:	4323      	orrs	r3, r4
 8000b78:	07f6      	lsls	r6, r6, #31
 8000b7a:	4333      	orrs	r3, r6
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	0019      	movs	r1, r3
 8000b80:	b007      	add	sp, #28
 8000b82:	bcf0      	pop	{r4, r5, r6, r7}
 8000b84:	46bb      	mov	fp, r7
 8000b86:	46b2      	mov	sl, r6
 8000b88:	46a9      	mov	r9, r5
 8000b8a:	46a0      	mov	r8, r4
 8000b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2400      	movs	r4, #0
 8000b92:	4690      	mov	r8, r2
 8000b94:	4b48      	ldr	r3, [pc, #288]	@ (8000cb8 <__aeabi_ddiv+0x21c>)
 8000b96:	e7ed      	b.n	8000b74 <__aeabi_ddiv+0xd8>
 8000b98:	465a      	mov	r2, fp
 8000b9a:	9b00      	ldr	r3, [sp, #0]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	4b49      	ldr	r3, [pc, #292]	@ (8000cc4 <__aeabi_ddiv+0x228>)
 8000ba0:	469c      	mov	ip, r3
 8000ba2:	44e2      	add	sl, ip
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	d159      	bne.n	8000c5c <__aeabi_ddiv+0x1c0>
 8000ba8:	2302      	movs	r3, #2
 8000baa:	431c      	orrs	r4, r3
 8000bac:	2300      	movs	r3, #0
 8000bae:	2102      	movs	r1, #2
 8000bb0:	469b      	mov	fp, r3
 8000bb2:	e7b8      	b.n	8000b26 <__aeabi_ddiv+0x8a>
 8000bb4:	465a      	mov	r2, fp
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	d049      	beq.n	8000c50 <__aeabi_ddiv+0x1b4>
 8000bbc:	465b      	mov	r3, fp
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x128>
 8000bc2:	e19c      	b.n	8000efe <__aeabi_ddiv+0x462>
 8000bc4:	4658      	mov	r0, fp
 8000bc6:	f001 fa3d 	bl	8002044 <__clzsi2>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	0003      	movs	r3, r0
 8000bce:	3a0b      	subs	r2, #11
 8000bd0:	271d      	movs	r7, #29
 8000bd2:	9e00      	ldr	r6, [sp, #0]
 8000bd4:	1aba      	subs	r2, r7, r2
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	4658      	mov	r0, fp
 8000bda:	40d6      	lsrs	r6, r2
 8000bdc:	3908      	subs	r1, #8
 8000bde:	4088      	lsls	r0, r1
 8000be0:	0032      	movs	r2, r6
 8000be2:	4302      	orrs	r2, r0
 8000be4:	4693      	mov	fp, r2
 8000be6:	9a00      	ldr	r2, [sp, #0]
 8000be8:	408a      	lsls	r2, r1
 8000bea:	4937      	ldr	r1, [pc, #220]	@ (8000cc8 <__aeabi_ddiv+0x22c>)
 8000bec:	4453      	add	r3, sl
 8000bee:	468a      	mov	sl, r1
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	449a      	add	sl, r3
 8000bf4:	e797      	b.n	8000b26 <__aeabi_ddiv+0x8a>
 8000bf6:	465b      	mov	r3, fp
 8000bf8:	4303      	orrs	r3, r0
 8000bfa:	4699      	mov	r9, r3
 8000bfc:	d021      	beq.n	8000c42 <__aeabi_ddiv+0x1a6>
 8000bfe:	465b      	mov	r3, fp
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0x16a>
 8000c04:	e169      	b.n	8000eda <__aeabi_ddiv+0x43e>
 8000c06:	4658      	mov	r0, fp
 8000c08:	f001 fa1c 	bl	8002044 <__clzsi2>
 8000c0c:	230b      	movs	r3, #11
 8000c0e:	425b      	negs	r3, r3
 8000c10:	469c      	mov	ip, r3
 8000c12:	0002      	movs	r2, r0
 8000c14:	4484      	add	ip, r0
 8000c16:	4666      	mov	r6, ip
 8000c18:	231d      	movs	r3, #29
 8000c1a:	1b9b      	subs	r3, r3, r6
 8000c1c:	0026      	movs	r6, r4
 8000c1e:	0011      	movs	r1, r2
 8000c20:	4658      	mov	r0, fp
 8000c22:	40de      	lsrs	r6, r3
 8000c24:	3908      	subs	r1, #8
 8000c26:	4088      	lsls	r0, r1
 8000c28:	0033      	movs	r3, r6
 8000c2a:	4303      	orrs	r3, r0
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	0023      	movs	r3, r4
 8000c30:	408b      	lsls	r3, r1
 8000c32:	4698      	mov	r8, r3
 8000c34:	4b25      	ldr	r3, [pc, #148]	@ (8000ccc <__aeabi_ddiv+0x230>)
 8000c36:	2400      	movs	r4, #0
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9303      	str	r3, [sp, #12]
 8000c40:	e753      	b.n	8000aea <__aeabi_ddiv+0x4e>
 8000c42:	2300      	movs	r3, #0
 8000c44:	4698      	mov	r8, r3
 8000c46:	469a      	mov	sl, r3
 8000c48:	3301      	adds	r3, #1
 8000c4a:	2404      	movs	r4, #4
 8000c4c:	9303      	str	r3, [sp, #12]
 8000c4e:	e74c      	b.n	8000aea <__aeabi_ddiv+0x4e>
 8000c50:	2301      	movs	r3, #1
 8000c52:	431c      	orrs	r4, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	469b      	mov	fp, r3
 8000c5a:	e764      	b.n	8000b26 <__aeabi_ddiv+0x8a>
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	0032      	movs	r2, r6
 8000c60:	2103      	movs	r1, #3
 8000c62:	431c      	orrs	r4, r3
 8000c64:	e75f      	b.n	8000b26 <__aeabi_ddiv+0x8a>
 8000c66:	469a      	mov	sl, r3
 8000c68:	2303      	movs	r3, #3
 8000c6a:	46d9      	mov	r9, fp
 8000c6c:	240c      	movs	r4, #12
 8000c6e:	9303      	str	r3, [sp, #12]
 8000c70:	e73b      	b.n	8000aea <__aeabi_ddiv+0x4e>
 8000c72:	2300      	movs	r3, #0
 8000c74:	2480      	movs	r4, #128	@ 0x80
 8000c76:	4698      	mov	r8, r3
 8000c78:	2600      	movs	r6, #0
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <__aeabi_ddiv+0x21c>)
 8000c7c:	0324      	lsls	r4, r4, #12
 8000c7e:	e779      	b.n	8000b74 <__aeabi_ddiv+0xd8>
 8000c80:	2480      	movs	r4, #128	@ 0x80
 8000c82:	465b      	mov	r3, fp
 8000c84:	0324      	lsls	r4, r4, #12
 8000c86:	431c      	orrs	r4, r3
 8000c88:	0324      	lsls	r4, r4, #12
 8000c8a:	002e      	movs	r6, r5
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <__aeabi_ddiv+0x21c>)
 8000c90:	0b24      	lsrs	r4, r4, #12
 8000c92:	e76f      	b.n	8000b74 <__aeabi_ddiv+0xd8>
 8000c94:	2480      	movs	r4, #128	@ 0x80
 8000c96:	464b      	mov	r3, r9
 8000c98:	0324      	lsls	r4, r4, #12
 8000c9a:	4223      	tst	r3, r4
 8000c9c:	d002      	beq.n	8000ca4 <__aeabi_ddiv+0x208>
 8000c9e:	465b      	mov	r3, fp
 8000ca0:	4223      	tst	r3, r4
 8000ca2:	d0f0      	beq.n	8000c86 <__aeabi_ddiv+0x1ea>
 8000ca4:	2480      	movs	r4, #128	@ 0x80
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	0324      	lsls	r4, r4, #12
 8000caa:	431c      	orrs	r4, r3
 8000cac:	0324      	lsls	r4, r4, #12
 8000cae:	9e02      	ldr	r6, [sp, #8]
 8000cb0:	4b01      	ldr	r3, [pc, #4]	@ (8000cb8 <__aeabi_ddiv+0x21c>)
 8000cb2:	0b24      	lsrs	r4, r4, #12
 8000cb4:	e75e      	b.n	8000b74 <__aeabi_ddiv+0xd8>
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	000007ff 	.word	0x000007ff
 8000cbc:	fffffc01 	.word	0xfffffc01
 8000cc0:	0800d874 	.word	0x0800d874
 8000cc4:	fffff801 	.word	0xfffff801
 8000cc8:	000003f3 	.word	0x000003f3
 8000ccc:	fffffc0d 	.word	0xfffffc0d
 8000cd0:	45cb      	cmp	fp, r9
 8000cd2:	d200      	bcs.n	8000cd6 <__aeabi_ddiv+0x23a>
 8000cd4:	e0f8      	b.n	8000ec8 <__aeabi_ddiv+0x42c>
 8000cd6:	d100      	bne.n	8000cda <__aeabi_ddiv+0x23e>
 8000cd8:	e0f3      	b.n	8000ec2 <__aeabi_ddiv+0x426>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	425b      	negs	r3, r3
 8000cde:	469c      	mov	ip, r3
 8000ce0:	4644      	mov	r4, r8
 8000ce2:	4648      	mov	r0, r9
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	44e2      	add	sl, ip
 8000ce8:	465b      	mov	r3, fp
 8000cea:	0e17      	lsrs	r7, r2, #24
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	0c19      	lsrs	r1, r3, #16
 8000cf2:	043b      	lsls	r3, r7, #16
 8000cf4:	0212      	lsls	r2, r2, #8
 8000cf6:	9700      	str	r7, [sp, #0]
 8000cf8:	0c1f      	lsrs	r7, r3, #16
 8000cfa:	4691      	mov	r9, r2
 8000cfc:	9102      	str	r1, [sp, #8]
 8000cfe:	9703      	str	r7, [sp, #12]
 8000d00:	f7ff fa92 	bl	8000228 <__aeabi_uidivmod>
 8000d04:	0002      	movs	r2, r0
 8000d06:	437a      	muls	r2, r7
 8000d08:	040b      	lsls	r3, r1, #16
 8000d0a:	0c21      	lsrs	r1, r4, #16
 8000d0c:	4680      	mov	r8, r0
 8000d0e:	4319      	orrs	r1, r3
 8000d10:	428a      	cmp	r2, r1
 8000d12:	d909      	bls.n	8000d28 <__aeabi_ddiv+0x28c>
 8000d14:	9f00      	ldr	r7, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	46bc      	mov	ip, r7
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	4461      	add	r1, ip
 8000d1e:	469c      	mov	ip, r3
 8000d20:	44e0      	add	r8, ip
 8000d22:	428f      	cmp	r7, r1
 8000d24:	d800      	bhi.n	8000d28 <__aeabi_ddiv+0x28c>
 8000d26:	e15c      	b.n	8000fe2 <__aeabi_ddiv+0x546>
 8000d28:	1a88      	subs	r0, r1, r2
 8000d2a:	9902      	ldr	r1, [sp, #8]
 8000d2c:	f7ff fa7c 	bl	8000228 <__aeabi_uidivmod>
 8000d30:	9a03      	ldr	r2, [sp, #12]
 8000d32:	0424      	lsls	r4, r4, #16
 8000d34:	4342      	muls	r2, r0
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	0c24      	lsrs	r4, r4, #16
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	430c      	orrs	r4, r1
 8000d3e:	42a2      	cmp	r2, r4
 8000d40:	d906      	bls.n	8000d50 <__aeabi_ddiv+0x2b4>
 8000d42:	9900      	ldr	r1, [sp, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	468c      	mov	ip, r1
 8000d48:	4464      	add	r4, ip
 8000d4a:	42a1      	cmp	r1, r4
 8000d4c:	d800      	bhi.n	8000d50 <__aeabi_ddiv+0x2b4>
 8000d4e:	e142      	b.n	8000fd6 <__aeabi_ddiv+0x53a>
 8000d50:	1aa0      	subs	r0, r4, r2
 8000d52:	4642      	mov	r2, r8
 8000d54:	0412      	lsls	r2, r2, #16
 8000d56:	431a      	orrs	r2, r3
 8000d58:	4693      	mov	fp, r2
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	4659      	mov	r1, fp
 8000d5e:	0c1b      	lsrs	r3, r3, #16
 8000d60:	001f      	movs	r7, r3
 8000d62:	9304      	str	r3, [sp, #16]
 8000d64:	040b      	lsls	r3, r1, #16
 8000d66:	4649      	mov	r1, r9
 8000d68:	0409      	lsls	r1, r1, #16
 8000d6a:	0c09      	lsrs	r1, r1, #16
 8000d6c:	000c      	movs	r4, r1
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	435c      	muls	r4, r3
 8000d72:	0c12      	lsrs	r2, r2, #16
 8000d74:	437b      	muls	r3, r7
 8000d76:	4688      	mov	r8, r1
 8000d78:	4351      	muls	r1, r2
 8000d7a:	437a      	muls	r2, r7
 8000d7c:	0c27      	lsrs	r7, r4, #16
 8000d7e:	46bc      	mov	ip, r7
 8000d80:	185b      	adds	r3, r3, r1
 8000d82:	4463      	add	r3, ip
 8000d84:	4299      	cmp	r1, r3
 8000d86:	d903      	bls.n	8000d90 <__aeabi_ddiv+0x2f4>
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	0249      	lsls	r1, r1, #9
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	4462      	add	r2, ip
 8000d90:	0c19      	lsrs	r1, r3, #16
 8000d92:	0424      	lsls	r4, r4, #16
 8000d94:	041b      	lsls	r3, r3, #16
 8000d96:	0c24      	lsrs	r4, r4, #16
 8000d98:	188a      	adds	r2, r1, r2
 8000d9a:	191c      	adds	r4, r3, r4
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d302      	bcc.n	8000da6 <__aeabi_ddiv+0x30a>
 8000da0:	d116      	bne.n	8000dd0 <__aeabi_ddiv+0x334>
 8000da2:	42a5      	cmp	r5, r4
 8000da4:	d214      	bcs.n	8000dd0 <__aeabi_ddiv+0x334>
 8000da6:	465b      	mov	r3, fp
 8000da8:	9f00      	ldr	r7, [sp, #0]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	444d      	add	r5, r9
 8000dae:	9305      	str	r3, [sp, #20]
 8000db0:	454d      	cmp	r5, r9
 8000db2:	419b      	sbcs	r3, r3
 8000db4:	46bc      	mov	ip, r7
 8000db6:	425b      	negs	r3, r3
 8000db8:	4463      	add	r3, ip
 8000dba:	18c0      	adds	r0, r0, r3
 8000dbc:	4287      	cmp	r7, r0
 8000dbe:	d300      	bcc.n	8000dc2 <__aeabi_ddiv+0x326>
 8000dc0:	e102      	b.n	8000fc8 <__aeabi_ddiv+0x52c>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	d900      	bls.n	8000dc8 <__aeabi_ddiv+0x32c>
 8000dc6:	e129      	b.n	800101c <__aeabi_ddiv+0x580>
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x330>
 8000dca:	e124      	b.n	8001016 <__aeabi_ddiv+0x57a>
 8000dcc:	9b05      	ldr	r3, [sp, #20]
 8000dce:	469b      	mov	fp, r3
 8000dd0:	1b2c      	subs	r4, r5, r4
 8000dd2:	42a5      	cmp	r5, r4
 8000dd4:	41ad      	sbcs	r5, r5
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	1a80      	subs	r0, r0, r2
 8000dda:	426d      	negs	r5, r5
 8000ddc:	1b40      	subs	r0, r0, r5
 8000dde:	4283      	cmp	r3, r0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x348>
 8000de2:	e10f      	b.n	8001004 <__aeabi_ddiv+0x568>
 8000de4:	9902      	ldr	r1, [sp, #8]
 8000de6:	f7ff fa1f 	bl	8000228 <__aeabi_uidivmod>
 8000dea:	9a03      	ldr	r2, [sp, #12]
 8000dec:	040b      	lsls	r3, r1, #16
 8000dee:	4342      	muls	r2, r0
 8000df0:	0c21      	lsrs	r1, r4, #16
 8000df2:	0005      	movs	r5, r0
 8000df4:	4319      	orrs	r1, r3
 8000df6:	428a      	cmp	r2, r1
 8000df8:	d900      	bls.n	8000dfc <__aeabi_ddiv+0x360>
 8000dfa:	e0cb      	b.n	8000f94 <__aeabi_ddiv+0x4f8>
 8000dfc:	1a88      	subs	r0, r1, r2
 8000dfe:	9902      	ldr	r1, [sp, #8]
 8000e00:	f7ff fa12 	bl	8000228 <__aeabi_uidivmod>
 8000e04:	9a03      	ldr	r2, [sp, #12]
 8000e06:	0424      	lsls	r4, r4, #16
 8000e08:	4342      	muls	r2, r0
 8000e0a:	0409      	lsls	r1, r1, #16
 8000e0c:	0c24      	lsrs	r4, r4, #16
 8000e0e:	0003      	movs	r3, r0
 8000e10:	430c      	orrs	r4, r1
 8000e12:	42a2      	cmp	r2, r4
 8000e14:	d900      	bls.n	8000e18 <__aeabi_ddiv+0x37c>
 8000e16:	e0ca      	b.n	8000fae <__aeabi_ddiv+0x512>
 8000e18:	4641      	mov	r1, r8
 8000e1a:	1aa4      	subs	r4, r4, r2
 8000e1c:	042a      	lsls	r2, r5, #16
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	9f04      	ldr	r7, [sp, #16]
 8000e22:	0413      	lsls	r3, r2, #16
 8000e24:	0c1b      	lsrs	r3, r3, #16
 8000e26:	4359      	muls	r1, r3
 8000e28:	4640      	mov	r0, r8
 8000e2a:	437b      	muls	r3, r7
 8000e2c:	469c      	mov	ip, r3
 8000e2e:	0c15      	lsrs	r5, r2, #16
 8000e30:	4368      	muls	r0, r5
 8000e32:	0c0b      	lsrs	r3, r1, #16
 8000e34:	4484      	add	ip, r0
 8000e36:	4463      	add	r3, ip
 8000e38:	437d      	muls	r5, r7
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d903      	bls.n	8000e46 <__aeabi_ddiv+0x3aa>
 8000e3e:	2080      	movs	r0, #128	@ 0x80
 8000e40:	0240      	lsls	r0, r0, #9
 8000e42:	4684      	mov	ip, r0
 8000e44:	4465      	add	r5, ip
 8000e46:	0c18      	lsrs	r0, r3, #16
 8000e48:	0409      	lsls	r1, r1, #16
 8000e4a:	041b      	lsls	r3, r3, #16
 8000e4c:	0c09      	lsrs	r1, r1, #16
 8000e4e:	1940      	adds	r0, r0, r5
 8000e50:	185b      	adds	r3, r3, r1
 8000e52:	4284      	cmp	r4, r0
 8000e54:	d327      	bcc.n	8000ea6 <__aeabi_ddiv+0x40a>
 8000e56:	d023      	beq.n	8000ea0 <__aeabi_ddiv+0x404>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	0035      	movs	r5, r6
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	4b94      	ldr	r3, [pc, #592]	@ (80010b0 <__aeabi_ddiv+0x614>)
 8000e60:	4453      	add	r3, sl
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dd60      	ble.n	8000f28 <__aeabi_ddiv+0x48c>
 8000e66:	0751      	lsls	r1, r2, #29
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x3d0>
 8000e6a:	e086      	b.n	8000f7a <__aeabi_ddiv+0x4de>
 8000e6c:	002e      	movs	r6, r5
 8000e6e:	08d1      	lsrs	r1, r2, #3
 8000e70:	465a      	mov	r2, fp
 8000e72:	01d2      	lsls	r2, r2, #7
 8000e74:	d506      	bpl.n	8000e84 <__aeabi_ddiv+0x3e8>
 8000e76:	465a      	mov	r2, fp
 8000e78:	4b8e      	ldr	r3, [pc, #568]	@ (80010b4 <__aeabi_ddiv+0x618>)
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	4693      	mov	fp, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4453      	add	r3, sl
 8000e84:	4a8c      	ldr	r2, [pc, #560]	@ (80010b8 <__aeabi_ddiv+0x61c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	dd00      	ble.n	8000e8c <__aeabi_ddiv+0x3f0>
 8000e8a:	e680      	b.n	8000b8e <__aeabi_ddiv+0xf2>
 8000e8c:	465a      	mov	r2, fp
 8000e8e:	0752      	lsls	r2, r2, #29
 8000e90:	430a      	orrs	r2, r1
 8000e92:	4690      	mov	r8, r2
 8000e94:	465a      	mov	r2, fp
 8000e96:	055b      	lsls	r3, r3, #21
 8000e98:	0254      	lsls	r4, r2, #9
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	0d5b      	lsrs	r3, r3, #21
 8000e9e:	e669      	b.n	8000b74 <__aeabi_ddiv+0xd8>
 8000ea0:	0035      	movs	r5, r6
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0db      	beq.n	8000e5e <__aeabi_ddiv+0x3c2>
 8000ea6:	9d00      	ldr	r5, [sp, #0]
 8000ea8:	1e51      	subs	r1, r2, #1
 8000eaa:	46ac      	mov	ip, r5
 8000eac:	4464      	add	r4, ip
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x418>
 8000eb2:	e09e      	b.n	8000ff2 <__aeabi_ddiv+0x556>
 8000eb4:	4284      	cmp	r4, r0
 8000eb6:	d200      	bcs.n	8000eba <__aeabi_ddiv+0x41e>
 8000eb8:	e0e1      	b.n	800107e <__aeabi_ddiv+0x5e2>
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0x422>
 8000ebc:	e0ee      	b.n	800109c <__aeabi_ddiv+0x600>
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	e7ca      	b.n	8000e58 <__aeabi_ddiv+0x3bc>
 8000ec2:	4542      	cmp	r2, r8
 8000ec4:	d900      	bls.n	8000ec8 <__aeabi_ddiv+0x42c>
 8000ec6:	e708      	b.n	8000cda <__aeabi_ddiv+0x23e>
 8000ec8:	464b      	mov	r3, r9
 8000eca:	07dc      	lsls	r4, r3, #31
 8000ecc:	0858      	lsrs	r0, r3, #1
 8000ece:	4643      	mov	r3, r8
 8000ed0:	085b      	lsrs	r3, r3, #1
 8000ed2:	431c      	orrs	r4, r3
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	07dd      	lsls	r5, r3, #31
 8000ed8:	e706      	b.n	8000ce8 <__aeabi_ddiv+0x24c>
 8000eda:	f001 f8b3 	bl	8002044 <__clzsi2>
 8000ede:	2315      	movs	r3, #21
 8000ee0:	469c      	mov	ip, r3
 8000ee2:	4484      	add	ip, r0
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	4663      	mov	r3, ip
 8000ee8:	3220      	adds	r2, #32
 8000eea:	2b1c      	cmp	r3, #28
 8000eec:	dc00      	bgt.n	8000ef0 <__aeabi_ddiv+0x454>
 8000eee:	e692      	b.n	8000c16 <__aeabi_ddiv+0x17a>
 8000ef0:	0023      	movs	r3, r4
 8000ef2:	3808      	subs	r0, #8
 8000ef4:	4083      	lsls	r3, r0
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4698      	mov	r8, r3
 8000efc:	e69a      	b.n	8000c34 <__aeabi_ddiv+0x198>
 8000efe:	f001 f8a1 	bl	8002044 <__clzsi2>
 8000f02:	0002      	movs	r2, r0
 8000f04:	0003      	movs	r3, r0
 8000f06:	3215      	adds	r2, #21
 8000f08:	3320      	adds	r3, #32
 8000f0a:	2a1c      	cmp	r2, #28
 8000f0c:	dc00      	bgt.n	8000f10 <__aeabi_ddiv+0x474>
 8000f0e:	e65f      	b.n	8000bd0 <__aeabi_ddiv+0x134>
 8000f10:	9900      	ldr	r1, [sp, #0]
 8000f12:	3808      	subs	r0, #8
 8000f14:	4081      	lsls	r1, r0
 8000f16:	2200      	movs	r2, #0
 8000f18:	468b      	mov	fp, r1
 8000f1a:	e666      	b.n	8000bea <__aeabi_ddiv+0x14e>
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	002e      	movs	r6, r5
 8000f20:	2400      	movs	r4, #0
 8000f22:	4690      	mov	r8, r2
 8000f24:	4b65      	ldr	r3, [pc, #404]	@ (80010bc <__aeabi_ddiv+0x620>)
 8000f26:	e625      	b.n	8000b74 <__aeabi_ddiv+0xd8>
 8000f28:	002e      	movs	r6, r5
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	1ac9      	subs	r1, r1, r3
 8000f2e:	2938      	cmp	r1, #56	@ 0x38
 8000f30:	dd00      	ble.n	8000f34 <__aeabi_ddiv+0x498>
 8000f32:	e61b      	b.n	8000b6c <__aeabi_ddiv+0xd0>
 8000f34:	291f      	cmp	r1, #31
 8000f36:	dc7e      	bgt.n	8001036 <__aeabi_ddiv+0x59a>
 8000f38:	4861      	ldr	r0, [pc, #388]	@ (80010c0 <__aeabi_ddiv+0x624>)
 8000f3a:	0014      	movs	r4, r2
 8000f3c:	4450      	add	r0, sl
 8000f3e:	465b      	mov	r3, fp
 8000f40:	4082      	lsls	r2, r0
 8000f42:	4083      	lsls	r3, r0
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	1e50      	subs	r0, r2, #1
 8000f48:	4182      	sbcs	r2, r0
 8000f4a:	4323      	orrs	r3, r4
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	465b      	mov	r3, fp
 8000f50:	40cb      	lsrs	r3, r1
 8000f52:	0751      	lsls	r1, r2, #29
 8000f54:	d009      	beq.n	8000f6a <__aeabi_ddiv+0x4ce>
 8000f56:	210f      	movs	r1, #15
 8000f58:	4011      	ands	r1, r2
 8000f5a:	2904      	cmp	r1, #4
 8000f5c:	d005      	beq.n	8000f6a <__aeabi_ddiv+0x4ce>
 8000f5e:	1d11      	adds	r1, r2, #4
 8000f60:	4291      	cmp	r1, r2
 8000f62:	4192      	sbcs	r2, r2
 8000f64:	4252      	negs	r2, r2
 8000f66:	189b      	adds	r3, r3, r2
 8000f68:	000a      	movs	r2, r1
 8000f6a:	0219      	lsls	r1, r3, #8
 8000f6c:	d400      	bmi.n	8000f70 <__aeabi_ddiv+0x4d4>
 8000f6e:	e09b      	b.n	80010a8 <__aeabi_ddiv+0x60c>
 8000f70:	2200      	movs	r2, #0
 8000f72:	2301      	movs	r3, #1
 8000f74:	2400      	movs	r4, #0
 8000f76:	4690      	mov	r8, r2
 8000f78:	e5fc      	b.n	8000b74 <__aeabi_ddiv+0xd8>
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	4011      	ands	r1, r2
 8000f7e:	2904      	cmp	r1, #4
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x4e8>
 8000f82:	e773      	b.n	8000e6c <__aeabi_ddiv+0x3d0>
 8000f84:	1d11      	adds	r1, r2, #4
 8000f86:	4291      	cmp	r1, r2
 8000f88:	4192      	sbcs	r2, r2
 8000f8a:	4252      	negs	r2, r2
 8000f8c:	002e      	movs	r6, r5
 8000f8e:	08c9      	lsrs	r1, r1, #3
 8000f90:	4493      	add	fp, r2
 8000f92:	e76d      	b.n	8000e70 <__aeabi_ddiv+0x3d4>
 8000f94:	9b00      	ldr	r3, [sp, #0]
 8000f96:	3d01      	subs	r5, #1
 8000f98:	469c      	mov	ip, r3
 8000f9a:	4461      	add	r1, ip
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d900      	bls.n	8000fa2 <__aeabi_ddiv+0x506>
 8000fa0:	e72c      	b.n	8000dfc <__aeabi_ddiv+0x360>
 8000fa2:	428a      	cmp	r2, r1
 8000fa4:	d800      	bhi.n	8000fa8 <__aeabi_ddiv+0x50c>
 8000fa6:	e729      	b.n	8000dfc <__aeabi_ddiv+0x360>
 8000fa8:	1e85      	subs	r5, r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e726      	b.n	8000dfc <__aeabi_ddiv+0x360>
 8000fae:	9900      	ldr	r1, [sp, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	468c      	mov	ip, r1
 8000fb4:	4464      	add	r4, ip
 8000fb6:	42a1      	cmp	r1, r4
 8000fb8:	d900      	bls.n	8000fbc <__aeabi_ddiv+0x520>
 8000fba:	e72d      	b.n	8000e18 <__aeabi_ddiv+0x37c>
 8000fbc:	42a2      	cmp	r2, r4
 8000fbe:	d800      	bhi.n	8000fc2 <__aeabi_ddiv+0x526>
 8000fc0:	e72a      	b.n	8000e18 <__aeabi_ddiv+0x37c>
 8000fc2:	1e83      	subs	r3, r0, #2
 8000fc4:	4464      	add	r4, ip
 8000fc6:	e727      	b.n	8000e18 <__aeabi_ddiv+0x37c>
 8000fc8:	4287      	cmp	r7, r0
 8000fca:	d000      	beq.n	8000fce <__aeabi_ddiv+0x532>
 8000fcc:	e6fe      	b.n	8000dcc <__aeabi_ddiv+0x330>
 8000fce:	45a9      	cmp	r9, r5
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x538>
 8000fd2:	e6fb      	b.n	8000dcc <__aeabi_ddiv+0x330>
 8000fd4:	e6f5      	b.n	8000dc2 <__aeabi_ddiv+0x326>
 8000fd6:	42a2      	cmp	r2, r4
 8000fd8:	d800      	bhi.n	8000fdc <__aeabi_ddiv+0x540>
 8000fda:	e6b9      	b.n	8000d50 <__aeabi_ddiv+0x2b4>
 8000fdc:	1e83      	subs	r3, r0, #2
 8000fde:	4464      	add	r4, ip
 8000fe0:	e6b6      	b.n	8000d50 <__aeabi_ddiv+0x2b4>
 8000fe2:	428a      	cmp	r2, r1
 8000fe4:	d800      	bhi.n	8000fe8 <__aeabi_ddiv+0x54c>
 8000fe6:	e69f      	b.n	8000d28 <__aeabi_ddiv+0x28c>
 8000fe8:	46bc      	mov	ip, r7
 8000fea:	1e83      	subs	r3, r0, #2
 8000fec:	4698      	mov	r8, r3
 8000fee:	4461      	add	r1, ip
 8000ff0:	e69a      	b.n	8000d28 <__aeabi_ddiv+0x28c>
 8000ff2:	000a      	movs	r2, r1
 8000ff4:	4284      	cmp	r4, r0
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_ddiv+0x55e>
 8000ff8:	e72e      	b.n	8000e58 <__aeabi_ddiv+0x3bc>
 8000ffa:	454b      	cmp	r3, r9
 8000ffc:	d000      	beq.n	8001000 <__aeabi_ddiv+0x564>
 8000ffe:	e72b      	b.n	8000e58 <__aeabi_ddiv+0x3bc>
 8001000:	0035      	movs	r5, r6
 8001002:	e72c      	b.n	8000e5e <__aeabi_ddiv+0x3c2>
 8001004:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <__aeabi_ddiv+0x614>)
 8001006:	4a2f      	ldr	r2, [pc, #188]	@ (80010c4 <__aeabi_ddiv+0x628>)
 8001008:	4453      	add	r3, sl
 800100a:	4592      	cmp	sl, r2
 800100c:	db43      	blt.n	8001096 <__aeabi_ddiv+0x5fa>
 800100e:	2201      	movs	r2, #1
 8001010:	2100      	movs	r1, #0
 8001012:	4493      	add	fp, r2
 8001014:	e72c      	b.n	8000e70 <__aeabi_ddiv+0x3d4>
 8001016:	42ac      	cmp	r4, r5
 8001018:	d800      	bhi.n	800101c <__aeabi_ddiv+0x580>
 800101a:	e6d7      	b.n	8000dcc <__aeabi_ddiv+0x330>
 800101c:	2302      	movs	r3, #2
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	9900      	ldr	r1, [sp, #0]
 8001024:	444d      	add	r5, r9
 8001026:	454d      	cmp	r5, r9
 8001028:	419b      	sbcs	r3, r3
 800102a:	44e3      	add	fp, ip
 800102c:	468c      	mov	ip, r1
 800102e:	425b      	negs	r3, r3
 8001030:	4463      	add	r3, ip
 8001032:	18c0      	adds	r0, r0, r3
 8001034:	e6cc      	b.n	8000dd0 <__aeabi_ddiv+0x334>
 8001036:	201f      	movs	r0, #31
 8001038:	4240      	negs	r0, r0
 800103a:	1ac3      	subs	r3, r0, r3
 800103c:	4658      	mov	r0, fp
 800103e:	40d8      	lsrs	r0, r3
 8001040:	2920      	cmp	r1, #32
 8001042:	d004      	beq.n	800104e <__aeabi_ddiv+0x5b2>
 8001044:	4659      	mov	r1, fp
 8001046:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <__aeabi_ddiv+0x62c>)
 8001048:	4453      	add	r3, sl
 800104a:	4099      	lsls	r1, r3
 800104c:	430a      	orrs	r2, r1
 800104e:	1e53      	subs	r3, r2, #1
 8001050:	419a      	sbcs	r2, r3
 8001052:	2307      	movs	r3, #7
 8001054:	0019      	movs	r1, r3
 8001056:	4302      	orrs	r2, r0
 8001058:	2400      	movs	r4, #0
 800105a:	4011      	ands	r1, r2
 800105c:	4213      	tst	r3, r2
 800105e:	d009      	beq.n	8001074 <__aeabi_ddiv+0x5d8>
 8001060:	3308      	adds	r3, #8
 8001062:	4013      	ands	r3, r2
 8001064:	2b04      	cmp	r3, #4
 8001066:	d01d      	beq.n	80010a4 <__aeabi_ddiv+0x608>
 8001068:	1d13      	adds	r3, r2, #4
 800106a:	4293      	cmp	r3, r2
 800106c:	4189      	sbcs	r1, r1
 800106e:	001a      	movs	r2, r3
 8001070:	4249      	negs	r1, r1
 8001072:	0749      	lsls	r1, r1, #29
 8001074:	08d2      	lsrs	r2, r2, #3
 8001076:	430a      	orrs	r2, r1
 8001078:	4690      	mov	r8, r2
 800107a:	2300      	movs	r3, #0
 800107c:	e57a      	b.n	8000b74 <__aeabi_ddiv+0xd8>
 800107e:	4649      	mov	r1, r9
 8001080:	9f00      	ldr	r7, [sp, #0]
 8001082:	004d      	lsls	r5, r1, #1
 8001084:	454d      	cmp	r5, r9
 8001086:	4189      	sbcs	r1, r1
 8001088:	46bc      	mov	ip, r7
 800108a:	4249      	negs	r1, r1
 800108c:	4461      	add	r1, ip
 800108e:	46a9      	mov	r9, r5
 8001090:	3a02      	subs	r2, #2
 8001092:	1864      	adds	r4, r4, r1
 8001094:	e7ae      	b.n	8000ff4 <__aeabi_ddiv+0x558>
 8001096:	2201      	movs	r2, #1
 8001098:	4252      	negs	r2, r2
 800109a:	e746      	b.n	8000f2a <__aeabi_ddiv+0x48e>
 800109c:	4599      	cmp	r9, r3
 800109e:	d3ee      	bcc.n	800107e <__aeabi_ddiv+0x5e2>
 80010a0:	000a      	movs	r2, r1
 80010a2:	e7aa      	b.n	8000ffa <__aeabi_ddiv+0x55e>
 80010a4:	2100      	movs	r1, #0
 80010a6:	e7e5      	b.n	8001074 <__aeabi_ddiv+0x5d8>
 80010a8:	0759      	lsls	r1, r3, #29
 80010aa:	025b      	lsls	r3, r3, #9
 80010ac:	0b1c      	lsrs	r4, r3, #12
 80010ae:	e7e1      	b.n	8001074 <__aeabi_ddiv+0x5d8>
 80010b0:	000003ff 	.word	0x000003ff
 80010b4:	feffffff 	.word	0xfeffffff
 80010b8:	000007fe 	.word	0x000007fe
 80010bc:	000007ff 	.word	0x000007ff
 80010c0:	0000041e 	.word	0x0000041e
 80010c4:	fffffc02 	.word	0xfffffc02
 80010c8:	0000043e 	.word	0x0000043e

080010cc <__aeabi_dmul>:
 80010cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ce:	4657      	mov	r7, sl
 80010d0:	464e      	mov	r6, r9
 80010d2:	46de      	mov	lr, fp
 80010d4:	4645      	mov	r5, r8
 80010d6:	b5e0      	push	{r5, r6, r7, lr}
 80010d8:	001f      	movs	r7, r3
 80010da:	030b      	lsls	r3, r1, #12
 80010dc:	0b1b      	lsrs	r3, r3, #12
 80010de:	0016      	movs	r6, r2
 80010e0:	469a      	mov	sl, r3
 80010e2:	0fca      	lsrs	r2, r1, #31
 80010e4:	004b      	lsls	r3, r1, #1
 80010e6:	0004      	movs	r4, r0
 80010e8:	4691      	mov	r9, r2
 80010ea:	b085      	sub	sp, #20
 80010ec:	0d5b      	lsrs	r3, r3, #21
 80010ee:	d100      	bne.n	80010f2 <__aeabi_dmul+0x26>
 80010f0:	e1cf      	b.n	8001492 <__aeabi_dmul+0x3c6>
 80010f2:	4acd      	ldr	r2, [pc, #820]	@ (8001428 <__aeabi_dmul+0x35c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d055      	beq.n	80011a4 <__aeabi_dmul+0xd8>
 80010f8:	4651      	mov	r1, sl
 80010fa:	0f42      	lsrs	r2, r0, #29
 80010fc:	00c9      	lsls	r1, r1, #3
 80010fe:	430a      	orrs	r2, r1
 8001100:	2180      	movs	r1, #128	@ 0x80
 8001102:	0409      	lsls	r1, r1, #16
 8001104:	4311      	orrs	r1, r2
 8001106:	00c2      	lsls	r2, r0, #3
 8001108:	4690      	mov	r8, r2
 800110a:	4ac8      	ldr	r2, [pc, #800]	@ (800142c <__aeabi_dmul+0x360>)
 800110c:	468a      	mov	sl, r1
 800110e:	4693      	mov	fp, r2
 8001110:	449b      	add	fp, r3
 8001112:	2300      	movs	r3, #0
 8001114:	2500      	movs	r5, #0
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	033c      	lsls	r4, r7, #12
 800111a:	007b      	lsls	r3, r7, #1
 800111c:	0ffa      	lsrs	r2, r7, #31
 800111e:	9601      	str	r6, [sp, #4]
 8001120:	0b24      	lsrs	r4, r4, #12
 8001122:	0d5b      	lsrs	r3, r3, #21
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	d100      	bne.n	800112a <__aeabi_dmul+0x5e>
 8001128:	e188      	b.n	800143c <__aeabi_dmul+0x370>
 800112a:	4abf      	ldr	r2, [pc, #764]	@ (8001428 <__aeabi_dmul+0x35c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d100      	bne.n	8001132 <__aeabi_dmul+0x66>
 8001130:	e092      	b.n	8001258 <__aeabi_dmul+0x18c>
 8001132:	4abe      	ldr	r2, [pc, #760]	@ (800142c <__aeabi_dmul+0x360>)
 8001134:	4694      	mov	ip, r2
 8001136:	4463      	add	r3, ip
 8001138:	449b      	add	fp, r3
 800113a:	2d0a      	cmp	r5, #10
 800113c:	dc42      	bgt.n	80011c4 <__aeabi_dmul+0xf8>
 800113e:	00e4      	lsls	r4, r4, #3
 8001140:	0f73      	lsrs	r3, r6, #29
 8001142:	4323      	orrs	r3, r4
 8001144:	2480      	movs	r4, #128	@ 0x80
 8001146:	4649      	mov	r1, r9
 8001148:	0424      	lsls	r4, r4, #16
 800114a:	431c      	orrs	r4, r3
 800114c:	00f3      	lsls	r3, r6, #3
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	9b00      	ldr	r3, [sp, #0]
 8001152:	2000      	movs	r0, #0
 8001154:	4059      	eors	r1, r3
 8001156:	b2cb      	uxtb	r3, r1
 8001158:	9303      	str	r3, [sp, #12]
 800115a:	2d02      	cmp	r5, #2
 800115c:	dc00      	bgt.n	8001160 <__aeabi_dmul+0x94>
 800115e:	e094      	b.n	800128a <__aeabi_dmul+0x1be>
 8001160:	2301      	movs	r3, #1
 8001162:	40ab      	lsls	r3, r5
 8001164:	001d      	movs	r5, r3
 8001166:	23a6      	movs	r3, #166	@ 0xa6
 8001168:	002a      	movs	r2, r5
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	401a      	ands	r2, r3
 800116e:	421d      	tst	r5, r3
 8001170:	d000      	beq.n	8001174 <__aeabi_dmul+0xa8>
 8001172:	e229      	b.n	80015c8 <__aeabi_dmul+0x4fc>
 8001174:	2390      	movs	r3, #144	@ 0x90
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	421d      	tst	r5, r3
 800117a:	d100      	bne.n	800117e <__aeabi_dmul+0xb2>
 800117c:	e24d      	b.n	800161a <__aeabi_dmul+0x54e>
 800117e:	2300      	movs	r3, #0
 8001180:	2480      	movs	r4, #128	@ 0x80
 8001182:	4699      	mov	r9, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	4ba8      	ldr	r3, [pc, #672]	@ (8001428 <__aeabi_dmul+0x35c>)
 8001188:	0010      	movs	r0, r2
 800118a:	464a      	mov	r2, r9
 800118c:	051b      	lsls	r3, r3, #20
 800118e:	4323      	orrs	r3, r4
 8001190:	07d2      	lsls	r2, r2, #31
 8001192:	4313      	orrs	r3, r2
 8001194:	0019      	movs	r1, r3
 8001196:	b005      	add	sp, #20
 8001198:	bcf0      	pop	{r4, r5, r6, r7}
 800119a:	46bb      	mov	fp, r7
 800119c:	46b2      	mov	sl, r6
 800119e:	46a9      	mov	r9, r5
 80011a0:	46a0      	mov	r8, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	4652      	mov	r2, sl
 80011a6:	4302      	orrs	r2, r0
 80011a8:	4690      	mov	r8, r2
 80011aa:	d000      	beq.n	80011ae <__aeabi_dmul+0xe2>
 80011ac:	e1ac      	b.n	8001508 <__aeabi_dmul+0x43c>
 80011ae:	469b      	mov	fp, r3
 80011b0:	2302      	movs	r3, #2
 80011b2:	4692      	mov	sl, r2
 80011b4:	2508      	movs	r5, #8
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	e7ae      	b.n	8001118 <__aeabi_dmul+0x4c>
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	46a2      	mov	sl, r4
 80011be:	4699      	mov	r9, r3
 80011c0:	9b01      	ldr	r3, [sp, #4]
 80011c2:	4698      	mov	r8, r3
 80011c4:	9b02      	ldr	r3, [sp, #8]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d100      	bne.n	80011cc <__aeabi_dmul+0x100>
 80011ca:	e1ca      	b.n	8001562 <__aeabi_dmul+0x496>
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dmul+0x106>
 80011d0:	e192      	b.n	80014f8 <__aeabi_dmul+0x42c>
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d110      	bne.n	80011f8 <__aeabi_dmul+0x12c>
 80011d6:	2300      	movs	r3, #0
 80011d8:	2400      	movs	r4, #0
 80011da:	2200      	movs	r2, #0
 80011dc:	e7d4      	b.n	8001188 <__aeabi_dmul+0xbc>
 80011de:	2201      	movs	r2, #1
 80011e0:	087b      	lsrs	r3, r7, #1
 80011e2:	403a      	ands	r2, r7
 80011e4:	4313      	orrs	r3, r2
 80011e6:	4652      	mov	r2, sl
 80011e8:	07d2      	lsls	r2, r2, #31
 80011ea:	4313      	orrs	r3, r2
 80011ec:	4698      	mov	r8, r3
 80011ee:	4653      	mov	r3, sl
 80011f0:	085b      	lsrs	r3, r3, #1
 80011f2:	469a      	mov	sl, r3
 80011f4:	9b03      	ldr	r3, [sp, #12]
 80011f6:	4699      	mov	r9, r3
 80011f8:	465b      	mov	r3, fp
 80011fa:	1c58      	adds	r0, r3, #1
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	445b      	add	r3, fp
 8001202:	2b00      	cmp	r3, #0
 8001204:	dc00      	bgt.n	8001208 <__aeabi_dmul+0x13c>
 8001206:	e1b1      	b.n	800156c <__aeabi_dmul+0x4a0>
 8001208:	4642      	mov	r2, r8
 800120a:	0752      	lsls	r2, r2, #29
 800120c:	d00b      	beq.n	8001226 <__aeabi_dmul+0x15a>
 800120e:	220f      	movs	r2, #15
 8001210:	4641      	mov	r1, r8
 8001212:	400a      	ands	r2, r1
 8001214:	2a04      	cmp	r2, #4
 8001216:	d006      	beq.n	8001226 <__aeabi_dmul+0x15a>
 8001218:	4642      	mov	r2, r8
 800121a:	1d11      	adds	r1, r2, #4
 800121c:	4541      	cmp	r1, r8
 800121e:	4192      	sbcs	r2, r2
 8001220:	4688      	mov	r8, r1
 8001222:	4252      	negs	r2, r2
 8001224:	4492      	add	sl, r2
 8001226:	4652      	mov	r2, sl
 8001228:	01d2      	lsls	r2, r2, #7
 800122a:	d506      	bpl.n	800123a <__aeabi_dmul+0x16e>
 800122c:	4652      	mov	r2, sl
 800122e:	4b80      	ldr	r3, [pc, #512]	@ (8001430 <__aeabi_dmul+0x364>)
 8001230:	401a      	ands	r2, r3
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	4692      	mov	sl, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	18c3      	adds	r3, r0, r3
 800123a:	4a7e      	ldr	r2, [pc, #504]	@ (8001434 <__aeabi_dmul+0x368>)
 800123c:	4293      	cmp	r3, r2
 800123e:	dd00      	ble.n	8001242 <__aeabi_dmul+0x176>
 8001240:	e18f      	b.n	8001562 <__aeabi_dmul+0x496>
 8001242:	4642      	mov	r2, r8
 8001244:	08d1      	lsrs	r1, r2, #3
 8001246:	4652      	mov	r2, sl
 8001248:	0752      	lsls	r2, r2, #29
 800124a:	430a      	orrs	r2, r1
 800124c:	4651      	mov	r1, sl
 800124e:	055b      	lsls	r3, r3, #21
 8001250:	024c      	lsls	r4, r1, #9
 8001252:	0b24      	lsrs	r4, r4, #12
 8001254:	0d5b      	lsrs	r3, r3, #21
 8001256:	e797      	b.n	8001188 <__aeabi_dmul+0xbc>
 8001258:	4b73      	ldr	r3, [pc, #460]	@ (8001428 <__aeabi_dmul+0x35c>)
 800125a:	4326      	orrs	r6, r4
 800125c:	469c      	mov	ip, r3
 800125e:	44e3      	add	fp, ip
 8001260:	2e00      	cmp	r6, #0
 8001262:	d100      	bne.n	8001266 <__aeabi_dmul+0x19a>
 8001264:	e16f      	b.n	8001546 <__aeabi_dmul+0x47a>
 8001266:	2303      	movs	r3, #3
 8001268:	4649      	mov	r1, r9
 800126a:	431d      	orrs	r5, r3
 800126c:	9b00      	ldr	r3, [sp, #0]
 800126e:	4059      	eors	r1, r3
 8001270:	b2cb      	uxtb	r3, r1
 8001272:	9303      	str	r3, [sp, #12]
 8001274:	2d0a      	cmp	r5, #10
 8001276:	dd00      	ble.n	800127a <__aeabi_dmul+0x1ae>
 8001278:	e133      	b.n	80014e2 <__aeabi_dmul+0x416>
 800127a:	2301      	movs	r3, #1
 800127c:	40ab      	lsls	r3, r5
 800127e:	001d      	movs	r5, r3
 8001280:	2303      	movs	r3, #3
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2288      	movs	r2, #136	@ 0x88
 8001286:	422a      	tst	r2, r5
 8001288:	d197      	bne.n	80011ba <__aeabi_dmul+0xee>
 800128a:	4642      	mov	r2, r8
 800128c:	4643      	mov	r3, r8
 800128e:	0412      	lsls	r2, r2, #16
 8001290:	0c12      	lsrs	r2, r2, #16
 8001292:	0016      	movs	r6, r2
 8001294:	9801      	ldr	r0, [sp, #4]
 8001296:	0c1d      	lsrs	r5, r3, #16
 8001298:	0c03      	lsrs	r3, r0, #16
 800129a:	0400      	lsls	r0, r0, #16
 800129c:	0c00      	lsrs	r0, r0, #16
 800129e:	4346      	muls	r6, r0
 80012a0:	46b4      	mov	ip, r6
 80012a2:	001e      	movs	r6, r3
 80012a4:	436e      	muls	r6, r5
 80012a6:	9600      	str	r6, [sp, #0]
 80012a8:	0016      	movs	r6, r2
 80012aa:	0007      	movs	r7, r0
 80012ac:	435e      	muls	r6, r3
 80012ae:	4661      	mov	r1, ip
 80012b0:	46b0      	mov	r8, r6
 80012b2:	436f      	muls	r7, r5
 80012b4:	0c0e      	lsrs	r6, r1, #16
 80012b6:	44b8      	add	r8, r7
 80012b8:	4446      	add	r6, r8
 80012ba:	42b7      	cmp	r7, r6
 80012bc:	d905      	bls.n	80012ca <__aeabi_dmul+0x1fe>
 80012be:	2180      	movs	r1, #128	@ 0x80
 80012c0:	0249      	lsls	r1, r1, #9
 80012c2:	4688      	mov	r8, r1
 80012c4:	9f00      	ldr	r7, [sp, #0]
 80012c6:	4447      	add	r7, r8
 80012c8:	9700      	str	r7, [sp, #0]
 80012ca:	4661      	mov	r1, ip
 80012cc:	0409      	lsls	r1, r1, #16
 80012ce:	0c09      	lsrs	r1, r1, #16
 80012d0:	0c37      	lsrs	r7, r6, #16
 80012d2:	0436      	lsls	r6, r6, #16
 80012d4:	468c      	mov	ip, r1
 80012d6:	0031      	movs	r1, r6
 80012d8:	4461      	add	r1, ip
 80012da:	9101      	str	r1, [sp, #4]
 80012dc:	0011      	movs	r1, r2
 80012de:	0c26      	lsrs	r6, r4, #16
 80012e0:	0424      	lsls	r4, r4, #16
 80012e2:	0c24      	lsrs	r4, r4, #16
 80012e4:	4361      	muls	r1, r4
 80012e6:	468c      	mov	ip, r1
 80012e8:	0021      	movs	r1, r4
 80012ea:	4369      	muls	r1, r5
 80012ec:	4689      	mov	r9, r1
 80012ee:	4661      	mov	r1, ip
 80012f0:	0c09      	lsrs	r1, r1, #16
 80012f2:	4688      	mov	r8, r1
 80012f4:	4372      	muls	r2, r6
 80012f6:	444a      	add	r2, r9
 80012f8:	4442      	add	r2, r8
 80012fa:	4375      	muls	r5, r6
 80012fc:	4591      	cmp	r9, r2
 80012fe:	d903      	bls.n	8001308 <__aeabi_dmul+0x23c>
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	0249      	lsls	r1, r1, #9
 8001304:	4688      	mov	r8, r1
 8001306:	4445      	add	r5, r8
 8001308:	0c11      	lsrs	r1, r2, #16
 800130a:	4688      	mov	r8, r1
 800130c:	4661      	mov	r1, ip
 800130e:	0409      	lsls	r1, r1, #16
 8001310:	0c09      	lsrs	r1, r1, #16
 8001312:	468c      	mov	ip, r1
 8001314:	0412      	lsls	r2, r2, #16
 8001316:	4462      	add	r2, ip
 8001318:	18b9      	adds	r1, r7, r2
 800131a:	9102      	str	r1, [sp, #8]
 800131c:	4651      	mov	r1, sl
 800131e:	0c09      	lsrs	r1, r1, #16
 8001320:	468c      	mov	ip, r1
 8001322:	4651      	mov	r1, sl
 8001324:	040f      	lsls	r7, r1, #16
 8001326:	0c3f      	lsrs	r7, r7, #16
 8001328:	0039      	movs	r1, r7
 800132a:	4341      	muls	r1, r0
 800132c:	4445      	add	r5, r8
 800132e:	4688      	mov	r8, r1
 8001330:	4661      	mov	r1, ip
 8001332:	4341      	muls	r1, r0
 8001334:	468a      	mov	sl, r1
 8001336:	4641      	mov	r1, r8
 8001338:	4660      	mov	r0, ip
 800133a:	0c09      	lsrs	r1, r1, #16
 800133c:	4689      	mov	r9, r1
 800133e:	4358      	muls	r0, r3
 8001340:	437b      	muls	r3, r7
 8001342:	4453      	add	r3, sl
 8001344:	444b      	add	r3, r9
 8001346:	459a      	cmp	sl, r3
 8001348:	d903      	bls.n	8001352 <__aeabi_dmul+0x286>
 800134a:	2180      	movs	r1, #128	@ 0x80
 800134c:	0249      	lsls	r1, r1, #9
 800134e:	4689      	mov	r9, r1
 8001350:	4448      	add	r0, r9
 8001352:	0c19      	lsrs	r1, r3, #16
 8001354:	4689      	mov	r9, r1
 8001356:	4641      	mov	r1, r8
 8001358:	0409      	lsls	r1, r1, #16
 800135a:	0c09      	lsrs	r1, r1, #16
 800135c:	4688      	mov	r8, r1
 800135e:	0039      	movs	r1, r7
 8001360:	4361      	muls	r1, r4
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	4443      	add	r3, r8
 8001366:	4688      	mov	r8, r1
 8001368:	4661      	mov	r1, ip
 800136a:	434c      	muls	r4, r1
 800136c:	4371      	muls	r1, r6
 800136e:	468c      	mov	ip, r1
 8001370:	4641      	mov	r1, r8
 8001372:	4377      	muls	r7, r6
 8001374:	0c0e      	lsrs	r6, r1, #16
 8001376:	193f      	adds	r7, r7, r4
 8001378:	19f6      	adds	r6, r6, r7
 800137a:	4448      	add	r0, r9
 800137c:	42b4      	cmp	r4, r6
 800137e:	d903      	bls.n	8001388 <__aeabi_dmul+0x2bc>
 8001380:	2180      	movs	r1, #128	@ 0x80
 8001382:	0249      	lsls	r1, r1, #9
 8001384:	4689      	mov	r9, r1
 8001386:	44cc      	add	ip, r9
 8001388:	9902      	ldr	r1, [sp, #8]
 800138a:	9f00      	ldr	r7, [sp, #0]
 800138c:	4689      	mov	r9, r1
 800138e:	0431      	lsls	r1, r6, #16
 8001390:	444f      	add	r7, r9
 8001392:	4689      	mov	r9, r1
 8001394:	4641      	mov	r1, r8
 8001396:	4297      	cmp	r7, r2
 8001398:	4192      	sbcs	r2, r2
 800139a:	040c      	lsls	r4, r1, #16
 800139c:	0c24      	lsrs	r4, r4, #16
 800139e:	444c      	add	r4, r9
 80013a0:	18ff      	adds	r7, r7, r3
 80013a2:	4252      	negs	r2, r2
 80013a4:	1964      	adds	r4, r4, r5
 80013a6:	18a1      	adds	r1, r4, r2
 80013a8:	429f      	cmp	r7, r3
 80013aa:	419b      	sbcs	r3, r3
 80013ac:	4688      	mov	r8, r1
 80013ae:	4682      	mov	sl, r0
 80013b0:	425b      	negs	r3, r3
 80013b2:	4699      	mov	r9, r3
 80013b4:	4590      	cmp	r8, r2
 80013b6:	4192      	sbcs	r2, r2
 80013b8:	42ac      	cmp	r4, r5
 80013ba:	41a4      	sbcs	r4, r4
 80013bc:	44c2      	add	sl, r8
 80013be:	44d1      	add	r9, sl
 80013c0:	4252      	negs	r2, r2
 80013c2:	4264      	negs	r4, r4
 80013c4:	4314      	orrs	r4, r2
 80013c6:	4599      	cmp	r9, r3
 80013c8:	419b      	sbcs	r3, r3
 80013ca:	4582      	cmp	sl, r0
 80013cc:	4192      	sbcs	r2, r2
 80013ce:	425b      	negs	r3, r3
 80013d0:	4252      	negs	r2, r2
 80013d2:	4313      	orrs	r3, r2
 80013d4:	464a      	mov	r2, r9
 80013d6:	0c36      	lsrs	r6, r6, #16
 80013d8:	19a4      	adds	r4, r4, r6
 80013da:	18e3      	adds	r3, r4, r3
 80013dc:	4463      	add	r3, ip
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	0dd2      	lsrs	r2, r2, #23
 80013e2:	431a      	orrs	r2, r3
 80013e4:	9901      	ldr	r1, [sp, #4]
 80013e6:	4692      	mov	sl, r2
 80013e8:	027a      	lsls	r2, r7, #9
 80013ea:	430a      	orrs	r2, r1
 80013ec:	1e50      	subs	r0, r2, #1
 80013ee:	4182      	sbcs	r2, r0
 80013f0:	0dff      	lsrs	r7, r7, #23
 80013f2:	4317      	orrs	r7, r2
 80013f4:	464a      	mov	r2, r9
 80013f6:	0252      	lsls	r2, r2, #9
 80013f8:	4317      	orrs	r7, r2
 80013fa:	46b8      	mov	r8, r7
 80013fc:	01db      	lsls	r3, r3, #7
 80013fe:	d500      	bpl.n	8001402 <__aeabi_dmul+0x336>
 8001400:	e6ed      	b.n	80011de <__aeabi_dmul+0x112>
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <__aeabi_dmul+0x36c>)
 8001404:	9a03      	ldr	r2, [sp, #12]
 8001406:	445b      	add	r3, fp
 8001408:	4691      	mov	r9, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	dc00      	bgt.n	8001410 <__aeabi_dmul+0x344>
 800140e:	e0ac      	b.n	800156a <__aeabi_dmul+0x49e>
 8001410:	003a      	movs	r2, r7
 8001412:	0752      	lsls	r2, r2, #29
 8001414:	d100      	bne.n	8001418 <__aeabi_dmul+0x34c>
 8001416:	e710      	b.n	800123a <__aeabi_dmul+0x16e>
 8001418:	220f      	movs	r2, #15
 800141a:	4658      	mov	r0, fp
 800141c:	403a      	ands	r2, r7
 800141e:	2a04      	cmp	r2, #4
 8001420:	d000      	beq.n	8001424 <__aeabi_dmul+0x358>
 8001422:	e6f9      	b.n	8001218 <__aeabi_dmul+0x14c>
 8001424:	e709      	b.n	800123a <__aeabi_dmul+0x16e>
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	000007ff 	.word	0x000007ff
 800142c:	fffffc01 	.word	0xfffffc01
 8001430:	feffffff 	.word	0xfeffffff
 8001434:	000007fe 	.word	0x000007fe
 8001438:	000003ff 	.word	0x000003ff
 800143c:	0022      	movs	r2, r4
 800143e:	4332      	orrs	r2, r6
 8001440:	d06f      	beq.n	8001522 <__aeabi_dmul+0x456>
 8001442:	2c00      	cmp	r4, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_dmul+0x37c>
 8001446:	e0c2      	b.n	80015ce <__aeabi_dmul+0x502>
 8001448:	0020      	movs	r0, r4
 800144a:	f000 fdfb 	bl	8002044 <__clzsi2>
 800144e:	0002      	movs	r2, r0
 8001450:	0003      	movs	r3, r0
 8001452:	3a0b      	subs	r2, #11
 8001454:	201d      	movs	r0, #29
 8001456:	1a82      	subs	r2, r0, r2
 8001458:	0030      	movs	r0, r6
 800145a:	0019      	movs	r1, r3
 800145c:	40d0      	lsrs	r0, r2
 800145e:	3908      	subs	r1, #8
 8001460:	408c      	lsls	r4, r1
 8001462:	0002      	movs	r2, r0
 8001464:	4322      	orrs	r2, r4
 8001466:	0034      	movs	r4, r6
 8001468:	408c      	lsls	r4, r1
 800146a:	4659      	mov	r1, fp
 800146c:	1acb      	subs	r3, r1, r3
 800146e:	4986      	ldr	r1, [pc, #536]	@ (8001688 <__aeabi_dmul+0x5bc>)
 8001470:	468b      	mov	fp, r1
 8001472:	449b      	add	fp, r3
 8001474:	2d0a      	cmp	r5, #10
 8001476:	dd00      	ble.n	800147a <__aeabi_dmul+0x3ae>
 8001478:	e6a4      	b.n	80011c4 <__aeabi_dmul+0xf8>
 800147a:	4649      	mov	r1, r9
 800147c:	9b00      	ldr	r3, [sp, #0]
 800147e:	9401      	str	r4, [sp, #4]
 8001480:	4059      	eors	r1, r3
 8001482:	b2cb      	uxtb	r3, r1
 8001484:	0014      	movs	r4, r2
 8001486:	2000      	movs	r0, #0
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	2d02      	cmp	r5, #2
 800148c:	dd00      	ble.n	8001490 <__aeabi_dmul+0x3c4>
 800148e:	e667      	b.n	8001160 <__aeabi_dmul+0x94>
 8001490:	e6fb      	b.n	800128a <__aeabi_dmul+0x1be>
 8001492:	4653      	mov	r3, sl
 8001494:	4303      	orrs	r3, r0
 8001496:	4698      	mov	r8, r3
 8001498:	d03c      	beq.n	8001514 <__aeabi_dmul+0x448>
 800149a:	4653      	mov	r3, sl
 800149c:	2b00      	cmp	r3, #0
 800149e:	d100      	bne.n	80014a2 <__aeabi_dmul+0x3d6>
 80014a0:	e0a3      	b.n	80015ea <__aeabi_dmul+0x51e>
 80014a2:	4650      	mov	r0, sl
 80014a4:	f000 fdce 	bl	8002044 <__clzsi2>
 80014a8:	230b      	movs	r3, #11
 80014aa:	425b      	negs	r3, r3
 80014ac:	469c      	mov	ip, r3
 80014ae:	0002      	movs	r2, r0
 80014b0:	4484      	add	ip, r0
 80014b2:	0011      	movs	r1, r2
 80014b4:	4650      	mov	r0, sl
 80014b6:	3908      	subs	r1, #8
 80014b8:	4088      	lsls	r0, r1
 80014ba:	231d      	movs	r3, #29
 80014bc:	4680      	mov	r8, r0
 80014be:	4660      	mov	r0, ip
 80014c0:	1a1b      	subs	r3, r3, r0
 80014c2:	0020      	movs	r0, r4
 80014c4:	40d8      	lsrs	r0, r3
 80014c6:	0003      	movs	r3, r0
 80014c8:	4640      	mov	r0, r8
 80014ca:	4303      	orrs	r3, r0
 80014cc:	469a      	mov	sl, r3
 80014ce:	0023      	movs	r3, r4
 80014d0:	408b      	lsls	r3, r1
 80014d2:	4698      	mov	r8, r3
 80014d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001688 <__aeabi_dmul+0x5bc>)
 80014d6:	2500      	movs	r5, #0
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	469b      	mov	fp, r3
 80014dc:	2300      	movs	r3, #0
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	e61a      	b.n	8001118 <__aeabi_dmul+0x4c>
 80014e2:	2d0f      	cmp	r5, #15
 80014e4:	d000      	beq.n	80014e8 <__aeabi_dmul+0x41c>
 80014e6:	e0c9      	b.n	800167c <__aeabi_dmul+0x5b0>
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	4652      	mov	r2, sl
 80014ec:	031b      	lsls	r3, r3, #12
 80014ee:	421a      	tst	r2, r3
 80014f0:	d002      	beq.n	80014f8 <__aeabi_dmul+0x42c>
 80014f2:	421c      	tst	r4, r3
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dmul+0x42c>
 80014f6:	e092      	b.n	800161e <__aeabi_dmul+0x552>
 80014f8:	2480      	movs	r4, #128	@ 0x80
 80014fa:	4653      	mov	r3, sl
 80014fc:	0324      	lsls	r4, r4, #12
 80014fe:	431c      	orrs	r4, r3
 8001500:	0324      	lsls	r4, r4, #12
 8001502:	4642      	mov	r2, r8
 8001504:	0b24      	lsrs	r4, r4, #12
 8001506:	e63e      	b.n	8001186 <__aeabi_dmul+0xba>
 8001508:	469b      	mov	fp, r3
 800150a:	2303      	movs	r3, #3
 800150c:	4680      	mov	r8, r0
 800150e:	250c      	movs	r5, #12
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	e601      	b.n	8001118 <__aeabi_dmul+0x4c>
 8001514:	2300      	movs	r3, #0
 8001516:	469a      	mov	sl, r3
 8001518:	469b      	mov	fp, r3
 800151a:	3301      	adds	r3, #1
 800151c:	2504      	movs	r5, #4
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	e5fa      	b.n	8001118 <__aeabi_dmul+0x4c>
 8001522:	2101      	movs	r1, #1
 8001524:	430d      	orrs	r5, r1
 8001526:	2d0a      	cmp	r5, #10
 8001528:	dd00      	ble.n	800152c <__aeabi_dmul+0x460>
 800152a:	e64b      	b.n	80011c4 <__aeabi_dmul+0xf8>
 800152c:	4649      	mov	r1, r9
 800152e:	9800      	ldr	r0, [sp, #0]
 8001530:	4041      	eors	r1, r0
 8001532:	b2c9      	uxtb	r1, r1
 8001534:	9103      	str	r1, [sp, #12]
 8001536:	2d02      	cmp	r5, #2
 8001538:	dc00      	bgt.n	800153c <__aeabi_dmul+0x470>
 800153a:	e096      	b.n	800166a <__aeabi_dmul+0x59e>
 800153c:	2300      	movs	r3, #0
 800153e:	2400      	movs	r4, #0
 8001540:	2001      	movs	r0, #1
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	e60c      	b.n	8001160 <__aeabi_dmul+0x94>
 8001546:	4649      	mov	r1, r9
 8001548:	2302      	movs	r3, #2
 800154a:	9a00      	ldr	r2, [sp, #0]
 800154c:	432b      	orrs	r3, r5
 800154e:	4051      	eors	r1, r2
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	9203      	str	r2, [sp, #12]
 8001554:	2b0a      	cmp	r3, #10
 8001556:	dd00      	ble.n	800155a <__aeabi_dmul+0x48e>
 8001558:	e634      	b.n	80011c4 <__aeabi_dmul+0xf8>
 800155a:	2d00      	cmp	r5, #0
 800155c:	d157      	bne.n	800160e <__aeabi_dmul+0x542>
 800155e:	9b03      	ldr	r3, [sp, #12]
 8001560:	4699      	mov	r9, r3
 8001562:	2400      	movs	r4, #0
 8001564:	2200      	movs	r2, #0
 8001566:	4b49      	ldr	r3, [pc, #292]	@ (800168c <__aeabi_dmul+0x5c0>)
 8001568:	e60e      	b.n	8001188 <__aeabi_dmul+0xbc>
 800156a:	4658      	mov	r0, fp
 800156c:	2101      	movs	r1, #1
 800156e:	1ac9      	subs	r1, r1, r3
 8001570:	2938      	cmp	r1, #56	@ 0x38
 8001572:	dd00      	ble.n	8001576 <__aeabi_dmul+0x4aa>
 8001574:	e62f      	b.n	80011d6 <__aeabi_dmul+0x10a>
 8001576:	291f      	cmp	r1, #31
 8001578:	dd56      	ble.n	8001628 <__aeabi_dmul+0x55c>
 800157a:	221f      	movs	r2, #31
 800157c:	4654      	mov	r4, sl
 800157e:	4252      	negs	r2, r2
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	40dc      	lsrs	r4, r3
 8001584:	2920      	cmp	r1, #32
 8001586:	d007      	beq.n	8001598 <__aeabi_dmul+0x4cc>
 8001588:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <__aeabi_dmul+0x5c4>)
 800158a:	4642      	mov	r2, r8
 800158c:	469c      	mov	ip, r3
 800158e:	4653      	mov	r3, sl
 8001590:	4460      	add	r0, ip
 8001592:	4083      	lsls	r3, r0
 8001594:	431a      	orrs	r2, r3
 8001596:	4690      	mov	r8, r2
 8001598:	4642      	mov	r2, r8
 800159a:	2107      	movs	r1, #7
 800159c:	1e53      	subs	r3, r2, #1
 800159e:	419a      	sbcs	r2, r3
 80015a0:	000b      	movs	r3, r1
 80015a2:	4322      	orrs	r2, r4
 80015a4:	4013      	ands	r3, r2
 80015a6:	2400      	movs	r4, #0
 80015a8:	4211      	tst	r1, r2
 80015aa:	d009      	beq.n	80015c0 <__aeabi_dmul+0x4f4>
 80015ac:	230f      	movs	r3, #15
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d05d      	beq.n	8001670 <__aeabi_dmul+0x5a4>
 80015b4:	1d11      	adds	r1, r2, #4
 80015b6:	4291      	cmp	r1, r2
 80015b8:	419b      	sbcs	r3, r3
 80015ba:	000a      	movs	r2, r1
 80015bc:	425b      	negs	r3, r3
 80015be:	075b      	lsls	r3, r3, #29
 80015c0:	08d2      	lsrs	r2, r2, #3
 80015c2:	431a      	orrs	r2, r3
 80015c4:	2300      	movs	r3, #0
 80015c6:	e5df      	b.n	8001188 <__aeabi_dmul+0xbc>
 80015c8:	9b03      	ldr	r3, [sp, #12]
 80015ca:	4699      	mov	r9, r3
 80015cc:	e5fa      	b.n	80011c4 <__aeabi_dmul+0xf8>
 80015ce:	9801      	ldr	r0, [sp, #4]
 80015d0:	f000 fd38 	bl	8002044 <__clzsi2>
 80015d4:	0002      	movs	r2, r0
 80015d6:	0003      	movs	r3, r0
 80015d8:	3215      	adds	r2, #21
 80015da:	3320      	adds	r3, #32
 80015dc:	2a1c      	cmp	r2, #28
 80015de:	dc00      	bgt.n	80015e2 <__aeabi_dmul+0x516>
 80015e0:	e738      	b.n	8001454 <__aeabi_dmul+0x388>
 80015e2:	9a01      	ldr	r2, [sp, #4]
 80015e4:	3808      	subs	r0, #8
 80015e6:	4082      	lsls	r2, r0
 80015e8:	e73f      	b.n	800146a <__aeabi_dmul+0x39e>
 80015ea:	f000 fd2b 	bl	8002044 <__clzsi2>
 80015ee:	2315      	movs	r3, #21
 80015f0:	469c      	mov	ip, r3
 80015f2:	4484      	add	ip, r0
 80015f4:	0002      	movs	r2, r0
 80015f6:	4663      	mov	r3, ip
 80015f8:	3220      	adds	r2, #32
 80015fa:	2b1c      	cmp	r3, #28
 80015fc:	dc00      	bgt.n	8001600 <__aeabi_dmul+0x534>
 80015fe:	e758      	b.n	80014b2 <__aeabi_dmul+0x3e6>
 8001600:	2300      	movs	r3, #0
 8001602:	4698      	mov	r8, r3
 8001604:	0023      	movs	r3, r4
 8001606:	3808      	subs	r0, #8
 8001608:	4083      	lsls	r3, r0
 800160a:	469a      	mov	sl, r3
 800160c:	e762      	b.n	80014d4 <__aeabi_dmul+0x408>
 800160e:	001d      	movs	r5, r3
 8001610:	2300      	movs	r3, #0
 8001612:	2400      	movs	r4, #0
 8001614:	2002      	movs	r0, #2
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	e5a2      	b.n	8001160 <__aeabi_dmul+0x94>
 800161a:	9002      	str	r0, [sp, #8]
 800161c:	e632      	b.n	8001284 <__aeabi_dmul+0x1b8>
 800161e:	431c      	orrs	r4, r3
 8001620:	9b00      	ldr	r3, [sp, #0]
 8001622:	9a01      	ldr	r2, [sp, #4]
 8001624:	4699      	mov	r9, r3
 8001626:	e5ae      	b.n	8001186 <__aeabi_dmul+0xba>
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <__aeabi_dmul+0x5c8>)
 800162a:	4652      	mov	r2, sl
 800162c:	18c3      	adds	r3, r0, r3
 800162e:	4640      	mov	r0, r8
 8001630:	409a      	lsls	r2, r3
 8001632:	40c8      	lsrs	r0, r1
 8001634:	4302      	orrs	r2, r0
 8001636:	4640      	mov	r0, r8
 8001638:	4098      	lsls	r0, r3
 800163a:	0003      	movs	r3, r0
 800163c:	1e58      	subs	r0, r3, #1
 800163e:	4183      	sbcs	r3, r0
 8001640:	4654      	mov	r4, sl
 8001642:	431a      	orrs	r2, r3
 8001644:	40cc      	lsrs	r4, r1
 8001646:	0753      	lsls	r3, r2, #29
 8001648:	d009      	beq.n	800165e <__aeabi_dmul+0x592>
 800164a:	230f      	movs	r3, #15
 800164c:	4013      	ands	r3, r2
 800164e:	2b04      	cmp	r3, #4
 8001650:	d005      	beq.n	800165e <__aeabi_dmul+0x592>
 8001652:	1d13      	adds	r3, r2, #4
 8001654:	4293      	cmp	r3, r2
 8001656:	4192      	sbcs	r2, r2
 8001658:	4252      	negs	r2, r2
 800165a:	18a4      	adds	r4, r4, r2
 800165c:	001a      	movs	r2, r3
 800165e:	0223      	lsls	r3, r4, #8
 8001660:	d508      	bpl.n	8001674 <__aeabi_dmul+0x5a8>
 8001662:	2301      	movs	r3, #1
 8001664:	2400      	movs	r4, #0
 8001666:	2200      	movs	r2, #0
 8001668:	e58e      	b.n	8001188 <__aeabi_dmul+0xbc>
 800166a:	4689      	mov	r9, r1
 800166c:	2400      	movs	r4, #0
 800166e:	e58b      	b.n	8001188 <__aeabi_dmul+0xbc>
 8001670:	2300      	movs	r3, #0
 8001672:	e7a5      	b.n	80015c0 <__aeabi_dmul+0x4f4>
 8001674:	0763      	lsls	r3, r4, #29
 8001676:	0264      	lsls	r4, r4, #9
 8001678:	0b24      	lsrs	r4, r4, #12
 800167a:	e7a1      	b.n	80015c0 <__aeabi_dmul+0x4f4>
 800167c:	9b00      	ldr	r3, [sp, #0]
 800167e:	46a2      	mov	sl, r4
 8001680:	4699      	mov	r9, r3
 8001682:	9b01      	ldr	r3, [sp, #4]
 8001684:	4698      	mov	r8, r3
 8001686:	e737      	b.n	80014f8 <__aeabi_dmul+0x42c>
 8001688:	fffffc0d 	.word	0xfffffc0d
 800168c:	000007ff 	.word	0x000007ff
 8001690:	0000043e 	.word	0x0000043e
 8001694:	0000041e 	.word	0x0000041e

08001698 <__aeabi_dsub>:
 8001698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169a:	4657      	mov	r7, sl
 800169c:	464e      	mov	r6, r9
 800169e:	4645      	mov	r5, r8
 80016a0:	46de      	mov	lr, fp
 80016a2:	b5e0      	push	{r5, r6, r7, lr}
 80016a4:	b083      	sub	sp, #12
 80016a6:	9000      	str	r0, [sp, #0]
 80016a8:	9101      	str	r1, [sp, #4]
 80016aa:	030c      	lsls	r4, r1, #12
 80016ac:	004d      	lsls	r5, r1, #1
 80016ae:	0fce      	lsrs	r6, r1, #31
 80016b0:	0a61      	lsrs	r1, r4, #9
 80016b2:	9c00      	ldr	r4, [sp, #0]
 80016b4:	005f      	lsls	r7, r3, #1
 80016b6:	0f64      	lsrs	r4, r4, #29
 80016b8:	430c      	orrs	r4, r1
 80016ba:	9900      	ldr	r1, [sp, #0]
 80016bc:	9200      	str	r2, [sp, #0]
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	00c8      	lsls	r0, r1, #3
 80016c2:	0319      	lsls	r1, r3, #12
 80016c4:	0d7b      	lsrs	r3, r7, #21
 80016c6:	4699      	mov	r9, r3
 80016c8:	9b01      	ldr	r3, [sp, #4]
 80016ca:	4fcc      	ldr	r7, [pc, #816]	@ (80019fc <__aeabi_dsub+0x364>)
 80016cc:	0fdb      	lsrs	r3, r3, #31
 80016ce:	469c      	mov	ip, r3
 80016d0:	0a4b      	lsrs	r3, r1, #9
 80016d2:	9900      	ldr	r1, [sp, #0]
 80016d4:	4680      	mov	r8, r0
 80016d6:	0f49      	lsrs	r1, r1, #29
 80016d8:	4319      	orrs	r1, r3
 80016da:	9b00      	ldr	r3, [sp, #0]
 80016dc:	468b      	mov	fp, r1
 80016de:	00da      	lsls	r2, r3, #3
 80016e0:	4692      	mov	sl, r2
 80016e2:	0d6d      	lsrs	r5, r5, #21
 80016e4:	45b9      	cmp	r9, r7
 80016e6:	d100      	bne.n	80016ea <__aeabi_dsub+0x52>
 80016e8:	e0bf      	b.n	800186a <__aeabi_dsub+0x1d2>
 80016ea:	2301      	movs	r3, #1
 80016ec:	4661      	mov	r1, ip
 80016ee:	4059      	eors	r1, r3
 80016f0:	464b      	mov	r3, r9
 80016f2:	468c      	mov	ip, r1
 80016f4:	1aeb      	subs	r3, r5, r3
 80016f6:	428e      	cmp	r6, r1
 80016f8:	d075      	beq.n	80017e6 <__aeabi_dsub+0x14e>
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	dc00      	bgt.n	8001700 <__aeabi_dsub+0x68>
 80016fe:	e2a3      	b.n	8001c48 <__aeabi_dsub+0x5b0>
 8001700:	4649      	mov	r1, r9
 8001702:	2900      	cmp	r1, #0
 8001704:	d100      	bne.n	8001708 <__aeabi_dsub+0x70>
 8001706:	e0ce      	b.n	80018a6 <__aeabi_dsub+0x20e>
 8001708:	42bd      	cmp	r5, r7
 800170a:	d100      	bne.n	800170e <__aeabi_dsub+0x76>
 800170c:	e200      	b.n	8001b10 <__aeabi_dsub+0x478>
 800170e:	2701      	movs	r7, #1
 8001710:	2b38      	cmp	r3, #56	@ 0x38
 8001712:	dc19      	bgt.n	8001748 <__aeabi_dsub+0xb0>
 8001714:	2780      	movs	r7, #128	@ 0x80
 8001716:	4659      	mov	r1, fp
 8001718:	043f      	lsls	r7, r7, #16
 800171a:	4339      	orrs	r1, r7
 800171c:	468b      	mov	fp, r1
 800171e:	2b1f      	cmp	r3, #31
 8001720:	dd00      	ble.n	8001724 <__aeabi_dsub+0x8c>
 8001722:	e1fa      	b.n	8001b1a <__aeabi_dsub+0x482>
 8001724:	2720      	movs	r7, #32
 8001726:	1af9      	subs	r1, r7, r3
 8001728:	468c      	mov	ip, r1
 800172a:	4659      	mov	r1, fp
 800172c:	4667      	mov	r7, ip
 800172e:	40b9      	lsls	r1, r7
 8001730:	000f      	movs	r7, r1
 8001732:	0011      	movs	r1, r2
 8001734:	40d9      	lsrs	r1, r3
 8001736:	430f      	orrs	r7, r1
 8001738:	4661      	mov	r1, ip
 800173a:	408a      	lsls	r2, r1
 800173c:	1e51      	subs	r1, r2, #1
 800173e:	418a      	sbcs	r2, r1
 8001740:	4659      	mov	r1, fp
 8001742:	40d9      	lsrs	r1, r3
 8001744:	4317      	orrs	r7, r2
 8001746:	1a64      	subs	r4, r4, r1
 8001748:	1bc7      	subs	r7, r0, r7
 800174a:	42b8      	cmp	r0, r7
 800174c:	4180      	sbcs	r0, r0
 800174e:	4240      	negs	r0, r0
 8001750:	1a24      	subs	r4, r4, r0
 8001752:	0223      	lsls	r3, r4, #8
 8001754:	d400      	bmi.n	8001758 <__aeabi_dsub+0xc0>
 8001756:	e140      	b.n	80019da <__aeabi_dsub+0x342>
 8001758:	0264      	lsls	r4, r4, #9
 800175a:	0a64      	lsrs	r4, r4, #9
 800175c:	2c00      	cmp	r4, #0
 800175e:	d100      	bne.n	8001762 <__aeabi_dsub+0xca>
 8001760:	e154      	b.n	8001a0c <__aeabi_dsub+0x374>
 8001762:	0020      	movs	r0, r4
 8001764:	f000 fc6e 	bl	8002044 <__clzsi2>
 8001768:	0003      	movs	r3, r0
 800176a:	3b08      	subs	r3, #8
 800176c:	2120      	movs	r1, #32
 800176e:	0038      	movs	r0, r7
 8001770:	1aca      	subs	r2, r1, r3
 8001772:	40d0      	lsrs	r0, r2
 8001774:	409c      	lsls	r4, r3
 8001776:	0002      	movs	r2, r0
 8001778:	409f      	lsls	r7, r3
 800177a:	4322      	orrs	r2, r4
 800177c:	429d      	cmp	r5, r3
 800177e:	dd00      	ble.n	8001782 <__aeabi_dsub+0xea>
 8001780:	e1a6      	b.n	8001ad0 <__aeabi_dsub+0x438>
 8001782:	1b58      	subs	r0, r3, r5
 8001784:	3001      	adds	r0, #1
 8001786:	1a09      	subs	r1, r1, r0
 8001788:	003c      	movs	r4, r7
 800178a:	408f      	lsls	r7, r1
 800178c:	40c4      	lsrs	r4, r0
 800178e:	1e7b      	subs	r3, r7, #1
 8001790:	419f      	sbcs	r7, r3
 8001792:	0013      	movs	r3, r2
 8001794:	408b      	lsls	r3, r1
 8001796:	4327      	orrs	r7, r4
 8001798:	431f      	orrs	r7, r3
 800179a:	40c2      	lsrs	r2, r0
 800179c:	003b      	movs	r3, r7
 800179e:	0014      	movs	r4, r2
 80017a0:	2500      	movs	r5, #0
 80017a2:	4313      	orrs	r3, r2
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dsub+0x110>
 80017a6:	e1f7      	b.n	8001b98 <__aeabi_dsub+0x500>
 80017a8:	077b      	lsls	r3, r7, #29
 80017aa:	d100      	bne.n	80017ae <__aeabi_dsub+0x116>
 80017ac:	e377      	b.n	8001e9e <__aeabi_dsub+0x806>
 80017ae:	230f      	movs	r3, #15
 80017b0:	0038      	movs	r0, r7
 80017b2:	403b      	ands	r3, r7
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d004      	beq.n	80017c2 <__aeabi_dsub+0x12a>
 80017b8:	1d38      	adds	r0, r7, #4
 80017ba:	42b8      	cmp	r0, r7
 80017bc:	41bf      	sbcs	r7, r7
 80017be:	427f      	negs	r7, r7
 80017c0:	19e4      	adds	r4, r4, r7
 80017c2:	0223      	lsls	r3, r4, #8
 80017c4:	d400      	bmi.n	80017c8 <__aeabi_dsub+0x130>
 80017c6:	e368      	b.n	8001e9a <__aeabi_dsub+0x802>
 80017c8:	4b8c      	ldr	r3, [pc, #560]	@ (80019fc <__aeabi_dsub+0x364>)
 80017ca:	3501      	adds	r5, #1
 80017cc:	429d      	cmp	r5, r3
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dsub+0x13a>
 80017d0:	e0f4      	b.n	80019bc <__aeabi_dsub+0x324>
 80017d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001a00 <__aeabi_dsub+0x368>)
 80017d4:	056d      	lsls	r5, r5, #21
 80017d6:	401c      	ands	r4, r3
 80017d8:	0d6d      	lsrs	r5, r5, #21
 80017da:	0767      	lsls	r7, r4, #29
 80017dc:	08c0      	lsrs	r0, r0, #3
 80017de:	0264      	lsls	r4, r4, #9
 80017e0:	4307      	orrs	r7, r0
 80017e2:	0b24      	lsrs	r4, r4, #12
 80017e4:	e0ec      	b.n	80019c0 <__aeabi_dsub+0x328>
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_dsub+0x154>
 80017ea:	e329      	b.n	8001e40 <__aeabi_dsub+0x7a8>
 80017ec:	4649      	mov	r1, r9
 80017ee:	2900      	cmp	r1, #0
 80017f0:	d000      	beq.n	80017f4 <__aeabi_dsub+0x15c>
 80017f2:	e0d6      	b.n	80019a2 <__aeabi_dsub+0x30a>
 80017f4:	4659      	mov	r1, fp
 80017f6:	4311      	orrs	r1, r2
 80017f8:	d100      	bne.n	80017fc <__aeabi_dsub+0x164>
 80017fa:	e12e      	b.n	8001a5a <__aeabi_dsub+0x3c2>
 80017fc:	1e59      	subs	r1, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x16c>
 8001802:	e1e6      	b.n	8001bd2 <__aeabi_dsub+0x53a>
 8001804:	42bb      	cmp	r3, r7
 8001806:	d100      	bne.n	800180a <__aeabi_dsub+0x172>
 8001808:	e182      	b.n	8001b10 <__aeabi_dsub+0x478>
 800180a:	2701      	movs	r7, #1
 800180c:	000b      	movs	r3, r1
 800180e:	2938      	cmp	r1, #56	@ 0x38
 8001810:	dc14      	bgt.n	800183c <__aeabi_dsub+0x1a4>
 8001812:	2b1f      	cmp	r3, #31
 8001814:	dd00      	ble.n	8001818 <__aeabi_dsub+0x180>
 8001816:	e23c      	b.n	8001c92 <__aeabi_dsub+0x5fa>
 8001818:	2720      	movs	r7, #32
 800181a:	1af9      	subs	r1, r7, r3
 800181c:	468c      	mov	ip, r1
 800181e:	4659      	mov	r1, fp
 8001820:	4667      	mov	r7, ip
 8001822:	40b9      	lsls	r1, r7
 8001824:	000f      	movs	r7, r1
 8001826:	0011      	movs	r1, r2
 8001828:	40d9      	lsrs	r1, r3
 800182a:	430f      	orrs	r7, r1
 800182c:	4661      	mov	r1, ip
 800182e:	408a      	lsls	r2, r1
 8001830:	1e51      	subs	r1, r2, #1
 8001832:	418a      	sbcs	r2, r1
 8001834:	4659      	mov	r1, fp
 8001836:	40d9      	lsrs	r1, r3
 8001838:	4317      	orrs	r7, r2
 800183a:	1864      	adds	r4, r4, r1
 800183c:	183f      	adds	r7, r7, r0
 800183e:	4287      	cmp	r7, r0
 8001840:	4180      	sbcs	r0, r0
 8001842:	4240      	negs	r0, r0
 8001844:	1824      	adds	r4, r4, r0
 8001846:	0223      	lsls	r3, r4, #8
 8001848:	d400      	bmi.n	800184c <__aeabi_dsub+0x1b4>
 800184a:	e0c6      	b.n	80019da <__aeabi_dsub+0x342>
 800184c:	4b6b      	ldr	r3, [pc, #428]	@ (80019fc <__aeabi_dsub+0x364>)
 800184e:	3501      	adds	r5, #1
 8001850:	429d      	cmp	r5, r3
 8001852:	d100      	bne.n	8001856 <__aeabi_dsub+0x1be>
 8001854:	e0b2      	b.n	80019bc <__aeabi_dsub+0x324>
 8001856:	2101      	movs	r1, #1
 8001858:	4b69      	ldr	r3, [pc, #420]	@ (8001a00 <__aeabi_dsub+0x368>)
 800185a:	087a      	lsrs	r2, r7, #1
 800185c:	401c      	ands	r4, r3
 800185e:	4039      	ands	r1, r7
 8001860:	430a      	orrs	r2, r1
 8001862:	07e7      	lsls	r7, r4, #31
 8001864:	4317      	orrs	r7, r2
 8001866:	0864      	lsrs	r4, r4, #1
 8001868:	e79e      	b.n	80017a8 <__aeabi_dsub+0x110>
 800186a:	4b66      	ldr	r3, [pc, #408]	@ (8001a04 <__aeabi_dsub+0x36c>)
 800186c:	4311      	orrs	r1, r2
 800186e:	468a      	mov	sl, r1
 8001870:	18eb      	adds	r3, r5, r3
 8001872:	2900      	cmp	r1, #0
 8001874:	d028      	beq.n	80018c8 <__aeabi_dsub+0x230>
 8001876:	4566      	cmp	r6, ip
 8001878:	d02c      	beq.n	80018d4 <__aeabi_dsub+0x23c>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d05b      	beq.n	8001936 <__aeabi_dsub+0x29e>
 800187e:	2d00      	cmp	r5, #0
 8001880:	d100      	bne.n	8001884 <__aeabi_dsub+0x1ec>
 8001882:	e12c      	b.n	8001ade <__aeabi_dsub+0x446>
 8001884:	465b      	mov	r3, fp
 8001886:	4666      	mov	r6, ip
 8001888:	075f      	lsls	r7, r3, #29
 800188a:	08d2      	lsrs	r2, r2, #3
 800188c:	4317      	orrs	r7, r2
 800188e:	08dd      	lsrs	r5, r3, #3
 8001890:	003b      	movs	r3, r7
 8001892:	432b      	orrs	r3, r5
 8001894:	d100      	bne.n	8001898 <__aeabi_dsub+0x200>
 8001896:	e0e2      	b.n	8001a5e <__aeabi_dsub+0x3c6>
 8001898:	2480      	movs	r4, #128	@ 0x80
 800189a:	0324      	lsls	r4, r4, #12
 800189c:	432c      	orrs	r4, r5
 800189e:	0324      	lsls	r4, r4, #12
 80018a0:	4d56      	ldr	r5, [pc, #344]	@ (80019fc <__aeabi_dsub+0x364>)
 80018a2:	0b24      	lsrs	r4, r4, #12
 80018a4:	e08c      	b.n	80019c0 <__aeabi_dsub+0x328>
 80018a6:	4659      	mov	r1, fp
 80018a8:	4311      	orrs	r1, r2
 80018aa:	d100      	bne.n	80018ae <__aeabi_dsub+0x216>
 80018ac:	e0d5      	b.n	8001a5a <__aeabi_dsub+0x3c2>
 80018ae:	1e59      	subs	r1, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0x21e>
 80018b4:	e1b9      	b.n	8001c2a <__aeabi_dsub+0x592>
 80018b6:	42bb      	cmp	r3, r7
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x224>
 80018ba:	e1b1      	b.n	8001c20 <__aeabi_dsub+0x588>
 80018bc:	2701      	movs	r7, #1
 80018be:	000b      	movs	r3, r1
 80018c0:	2938      	cmp	r1, #56	@ 0x38
 80018c2:	dd00      	ble.n	80018c6 <__aeabi_dsub+0x22e>
 80018c4:	e740      	b.n	8001748 <__aeabi_dsub+0xb0>
 80018c6:	e72a      	b.n	800171e <__aeabi_dsub+0x86>
 80018c8:	4661      	mov	r1, ip
 80018ca:	2701      	movs	r7, #1
 80018cc:	4079      	eors	r1, r7
 80018ce:	468c      	mov	ip, r1
 80018d0:	4566      	cmp	r6, ip
 80018d2:	d1d2      	bne.n	800187a <__aeabi_dsub+0x1e2>
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d100      	bne.n	80018da <__aeabi_dsub+0x242>
 80018d8:	e0c5      	b.n	8001a66 <__aeabi_dsub+0x3ce>
 80018da:	2d00      	cmp	r5, #0
 80018dc:	d000      	beq.n	80018e0 <__aeabi_dsub+0x248>
 80018de:	e155      	b.n	8001b8c <__aeabi_dsub+0x4f4>
 80018e0:	464b      	mov	r3, r9
 80018e2:	0025      	movs	r5, r4
 80018e4:	4305      	orrs	r5, r0
 80018e6:	d100      	bne.n	80018ea <__aeabi_dsub+0x252>
 80018e8:	e212      	b.n	8001d10 <__aeabi_dsub+0x678>
 80018ea:	1e59      	subs	r1, r3, #1
 80018ec:	468c      	mov	ip, r1
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dsub+0x25c>
 80018f2:	e249      	b.n	8001d88 <__aeabi_dsub+0x6f0>
 80018f4:	4d41      	ldr	r5, [pc, #260]	@ (80019fc <__aeabi_dsub+0x364>)
 80018f6:	42ab      	cmp	r3, r5
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x264>
 80018fa:	e28f      	b.n	8001e1c <__aeabi_dsub+0x784>
 80018fc:	2701      	movs	r7, #1
 80018fe:	2938      	cmp	r1, #56	@ 0x38
 8001900:	dc11      	bgt.n	8001926 <__aeabi_dsub+0x28e>
 8001902:	4663      	mov	r3, ip
 8001904:	2b1f      	cmp	r3, #31
 8001906:	dd00      	ble.n	800190a <__aeabi_dsub+0x272>
 8001908:	e25b      	b.n	8001dc2 <__aeabi_dsub+0x72a>
 800190a:	4661      	mov	r1, ip
 800190c:	2320      	movs	r3, #32
 800190e:	0027      	movs	r7, r4
 8001910:	1a5b      	subs	r3, r3, r1
 8001912:	0005      	movs	r5, r0
 8001914:	4098      	lsls	r0, r3
 8001916:	409f      	lsls	r7, r3
 8001918:	40cd      	lsrs	r5, r1
 800191a:	1e43      	subs	r3, r0, #1
 800191c:	4198      	sbcs	r0, r3
 800191e:	40cc      	lsrs	r4, r1
 8001920:	432f      	orrs	r7, r5
 8001922:	4307      	orrs	r7, r0
 8001924:	44a3      	add	fp, r4
 8001926:	18bf      	adds	r7, r7, r2
 8001928:	4297      	cmp	r7, r2
 800192a:	4192      	sbcs	r2, r2
 800192c:	4252      	negs	r2, r2
 800192e:	445a      	add	r2, fp
 8001930:	0014      	movs	r4, r2
 8001932:	464d      	mov	r5, r9
 8001934:	e787      	b.n	8001846 <__aeabi_dsub+0x1ae>
 8001936:	4f34      	ldr	r7, [pc, #208]	@ (8001a08 <__aeabi_dsub+0x370>)
 8001938:	1c6b      	adds	r3, r5, #1
 800193a:	423b      	tst	r3, r7
 800193c:	d000      	beq.n	8001940 <__aeabi_dsub+0x2a8>
 800193e:	e0b6      	b.n	8001aae <__aeabi_dsub+0x416>
 8001940:	4659      	mov	r1, fp
 8001942:	0023      	movs	r3, r4
 8001944:	4311      	orrs	r1, r2
 8001946:	000f      	movs	r7, r1
 8001948:	4303      	orrs	r3, r0
 800194a:	2d00      	cmp	r5, #0
 800194c:	d000      	beq.n	8001950 <__aeabi_dsub+0x2b8>
 800194e:	e126      	b.n	8001b9e <__aeabi_dsub+0x506>
 8001950:	2b00      	cmp	r3, #0
 8001952:	d100      	bne.n	8001956 <__aeabi_dsub+0x2be>
 8001954:	e1c0      	b.n	8001cd8 <__aeabi_dsub+0x640>
 8001956:	2900      	cmp	r1, #0
 8001958:	d100      	bne.n	800195c <__aeabi_dsub+0x2c4>
 800195a:	e0a1      	b.n	8001aa0 <__aeabi_dsub+0x408>
 800195c:	1a83      	subs	r3, r0, r2
 800195e:	4698      	mov	r8, r3
 8001960:	465b      	mov	r3, fp
 8001962:	4540      	cmp	r0, r8
 8001964:	41ad      	sbcs	r5, r5
 8001966:	1ae3      	subs	r3, r4, r3
 8001968:	426d      	negs	r5, r5
 800196a:	1b5b      	subs	r3, r3, r5
 800196c:	2580      	movs	r5, #128	@ 0x80
 800196e:	042d      	lsls	r5, r5, #16
 8001970:	422b      	tst	r3, r5
 8001972:	d100      	bne.n	8001976 <__aeabi_dsub+0x2de>
 8001974:	e14b      	b.n	8001c0e <__aeabi_dsub+0x576>
 8001976:	465b      	mov	r3, fp
 8001978:	1a10      	subs	r0, r2, r0
 800197a:	4282      	cmp	r2, r0
 800197c:	4192      	sbcs	r2, r2
 800197e:	1b1c      	subs	r4, r3, r4
 8001980:	0007      	movs	r7, r0
 8001982:	2601      	movs	r6, #1
 8001984:	4663      	mov	r3, ip
 8001986:	4252      	negs	r2, r2
 8001988:	1aa4      	subs	r4, r4, r2
 800198a:	4327      	orrs	r7, r4
 800198c:	401e      	ands	r6, r3
 800198e:	2f00      	cmp	r7, #0
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x2fc>
 8001992:	e142      	b.n	8001c1a <__aeabi_dsub+0x582>
 8001994:	422c      	tst	r4, r5
 8001996:	d100      	bne.n	800199a <__aeabi_dsub+0x302>
 8001998:	e26d      	b.n	8001e76 <__aeabi_dsub+0x7de>
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <__aeabi_dsub+0x368>)
 800199c:	2501      	movs	r5, #1
 800199e:	401c      	ands	r4, r3
 80019a0:	e71b      	b.n	80017da <__aeabi_dsub+0x142>
 80019a2:	42bd      	cmp	r5, r7
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0x310>
 80019a6:	e13b      	b.n	8001c20 <__aeabi_dsub+0x588>
 80019a8:	2701      	movs	r7, #1
 80019aa:	2b38      	cmp	r3, #56	@ 0x38
 80019ac:	dd00      	ble.n	80019b0 <__aeabi_dsub+0x318>
 80019ae:	e745      	b.n	800183c <__aeabi_dsub+0x1a4>
 80019b0:	2780      	movs	r7, #128	@ 0x80
 80019b2:	4659      	mov	r1, fp
 80019b4:	043f      	lsls	r7, r7, #16
 80019b6:	4339      	orrs	r1, r7
 80019b8:	468b      	mov	fp, r1
 80019ba:	e72a      	b.n	8001812 <__aeabi_dsub+0x17a>
 80019bc:	2400      	movs	r4, #0
 80019be:	2700      	movs	r7, #0
 80019c0:	052d      	lsls	r5, r5, #20
 80019c2:	4325      	orrs	r5, r4
 80019c4:	07f6      	lsls	r6, r6, #31
 80019c6:	4335      	orrs	r5, r6
 80019c8:	0038      	movs	r0, r7
 80019ca:	0029      	movs	r1, r5
 80019cc:	b003      	add	sp, #12
 80019ce:	bcf0      	pop	{r4, r5, r6, r7}
 80019d0:	46bb      	mov	fp, r7
 80019d2:	46b2      	mov	sl, r6
 80019d4:	46a9      	mov	r9, r5
 80019d6:	46a0      	mov	r8, r4
 80019d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019da:	077b      	lsls	r3, r7, #29
 80019dc:	d004      	beq.n	80019e8 <__aeabi_dsub+0x350>
 80019de:	230f      	movs	r3, #15
 80019e0:	403b      	ands	r3, r7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d000      	beq.n	80019e8 <__aeabi_dsub+0x350>
 80019e6:	e6e7      	b.n	80017b8 <__aeabi_dsub+0x120>
 80019e8:	002b      	movs	r3, r5
 80019ea:	08f8      	lsrs	r0, r7, #3
 80019ec:	4a03      	ldr	r2, [pc, #12]	@ (80019fc <__aeabi_dsub+0x364>)
 80019ee:	0767      	lsls	r7, r4, #29
 80019f0:	4307      	orrs	r7, r0
 80019f2:	08e5      	lsrs	r5, r4, #3
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d100      	bne.n	80019fa <__aeabi_dsub+0x362>
 80019f8:	e74a      	b.n	8001890 <__aeabi_dsub+0x1f8>
 80019fa:	e0a5      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 80019fc:	000007ff 	.word	0x000007ff
 8001a00:	ff7fffff 	.word	0xff7fffff
 8001a04:	fffff801 	.word	0xfffff801
 8001a08:	000007fe 	.word	0x000007fe
 8001a0c:	0038      	movs	r0, r7
 8001a0e:	f000 fb19 	bl	8002044 <__clzsi2>
 8001a12:	0003      	movs	r3, r0
 8001a14:	3318      	adds	r3, #24
 8001a16:	2b1f      	cmp	r3, #31
 8001a18:	dc00      	bgt.n	8001a1c <__aeabi_dsub+0x384>
 8001a1a:	e6a7      	b.n	800176c <__aeabi_dsub+0xd4>
 8001a1c:	003a      	movs	r2, r7
 8001a1e:	3808      	subs	r0, #8
 8001a20:	4082      	lsls	r2, r0
 8001a22:	429d      	cmp	r5, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dsub+0x390>
 8001a26:	e08a      	b.n	8001b3e <__aeabi_dsub+0x4a6>
 8001a28:	1b5b      	subs	r3, r3, r5
 8001a2a:	1c58      	adds	r0, r3, #1
 8001a2c:	281f      	cmp	r0, #31
 8001a2e:	dc00      	bgt.n	8001a32 <__aeabi_dsub+0x39a>
 8001a30:	e1d8      	b.n	8001de4 <__aeabi_dsub+0x74c>
 8001a32:	0017      	movs	r7, r2
 8001a34:	3b1f      	subs	r3, #31
 8001a36:	40df      	lsrs	r7, r3
 8001a38:	2820      	cmp	r0, #32
 8001a3a:	d005      	beq.n	8001a48 <__aeabi_dsub+0x3b0>
 8001a3c:	2340      	movs	r3, #64	@ 0x40
 8001a3e:	1a1b      	subs	r3, r3, r0
 8001a40:	409a      	lsls	r2, r3
 8001a42:	1e53      	subs	r3, r2, #1
 8001a44:	419a      	sbcs	r2, r3
 8001a46:	4317      	orrs	r7, r2
 8001a48:	2500      	movs	r5, #0
 8001a4a:	2f00      	cmp	r7, #0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x3b8>
 8001a4e:	e0e5      	b.n	8001c1c <__aeabi_dsub+0x584>
 8001a50:	077b      	lsls	r3, r7, #29
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dsub+0x3be>
 8001a54:	e6ab      	b.n	80017ae <__aeabi_dsub+0x116>
 8001a56:	002c      	movs	r4, r5
 8001a58:	e7c6      	b.n	80019e8 <__aeabi_dsub+0x350>
 8001a5a:	08c0      	lsrs	r0, r0, #3
 8001a5c:	e7c6      	b.n	80019ec <__aeabi_dsub+0x354>
 8001a5e:	2700      	movs	r7, #0
 8001a60:	2400      	movs	r4, #0
 8001a62:	4dd1      	ldr	r5, [pc, #836]	@ (8001da8 <__aeabi_dsub+0x710>)
 8001a64:	e7ac      	b.n	80019c0 <__aeabi_dsub+0x328>
 8001a66:	4fd1      	ldr	r7, [pc, #836]	@ (8001dac <__aeabi_dsub+0x714>)
 8001a68:	1c6b      	adds	r3, r5, #1
 8001a6a:	423b      	tst	r3, r7
 8001a6c:	d171      	bne.n	8001b52 <__aeabi_dsub+0x4ba>
 8001a6e:	0023      	movs	r3, r4
 8001a70:	4303      	orrs	r3, r0
 8001a72:	2d00      	cmp	r5, #0
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dsub+0x3e0>
 8001a76:	e14e      	b.n	8001d16 <__aeabi_dsub+0x67e>
 8001a78:	4657      	mov	r7, sl
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x3e8>
 8001a7e:	e1b5      	b.n	8001dec <__aeabi_dsub+0x754>
 8001a80:	2f00      	cmp	r7, #0
 8001a82:	d00d      	beq.n	8001aa0 <__aeabi_dsub+0x408>
 8001a84:	1883      	adds	r3, r0, r2
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	445c      	add	r4, fp
 8001a8c:	4240      	negs	r0, r0
 8001a8e:	1824      	adds	r4, r4, r0
 8001a90:	0222      	lsls	r2, r4, #8
 8001a92:	d500      	bpl.n	8001a96 <__aeabi_dsub+0x3fe>
 8001a94:	e1c8      	b.n	8001e28 <__aeabi_dsub+0x790>
 8001a96:	001f      	movs	r7, r3
 8001a98:	4698      	mov	r8, r3
 8001a9a:	4327      	orrs	r7, r4
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x408>
 8001a9e:	e0bc      	b.n	8001c1a <__aeabi_dsub+0x582>
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	0767      	lsls	r7, r4, #29
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	431f      	orrs	r7, r3
 8001aa8:	08e5      	lsrs	r5, r4, #3
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e04c      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001aae:	1a83      	subs	r3, r0, r2
 8001ab0:	4698      	mov	r8, r3
 8001ab2:	465b      	mov	r3, fp
 8001ab4:	4540      	cmp	r0, r8
 8001ab6:	41bf      	sbcs	r7, r7
 8001ab8:	1ae3      	subs	r3, r4, r3
 8001aba:	427f      	negs	r7, r7
 8001abc:	1bdb      	subs	r3, r3, r7
 8001abe:	021f      	lsls	r7, r3, #8
 8001ac0:	d47c      	bmi.n	8001bbc <__aeabi_dsub+0x524>
 8001ac2:	4647      	mov	r7, r8
 8001ac4:	431f      	orrs	r7, r3
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x432>
 8001ac8:	e0a6      	b.n	8001c18 <__aeabi_dsub+0x580>
 8001aca:	001c      	movs	r4, r3
 8001acc:	4647      	mov	r7, r8
 8001ace:	e645      	b.n	800175c <__aeabi_dsub+0xc4>
 8001ad0:	4cb7      	ldr	r4, [pc, #732]	@ (8001db0 <__aeabi_dsub+0x718>)
 8001ad2:	1aed      	subs	r5, r5, r3
 8001ad4:	4014      	ands	r4, r2
 8001ad6:	077b      	lsls	r3, r7, #29
 8001ad8:	d000      	beq.n	8001adc <__aeabi_dsub+0x444>
 8001ada:	e780      	b.n	80019de <__aeabi_dsub+0x346>
 8001adc:	e784      	b.n	80019e8 <__aeabi_dsub+0x350>
 8001ade:	464b      	mov	r3, r9
 8001ae0:	0025      	movs	r5, r4
 8001ae2:	4305      	orrs	r5, r0
 8001ae4:	d066      	beq.n	8001bb4 <__aeabi_dsub+0x51c>
 8001ae6:	1e5f      	subs	r7, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x456>
 8001aec:	e0fc      	b.n	8001ce8 <__aeabi_dsub+0x650>
 8001aee:	4dae      	ldr	r5, [pc, #696]	@ (8001da8 <__aeabi_dsub+0x710>)
 8001af0:	42ab      	cmp	r3, r5
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x45e>
 8001af4:	e15e      	b.n	8001db4 <__aeabi_dsub+0x71c>
 8001af6:	4666      	mov	r6, ip
 8001af8:	2f38      	cmp	r7, #56	@ 0x38
 8001afa:	dc00      	bgt.n	8001afe <__aeabi_dsub+0x466>
 8001afc:	e0b4      	b.n	8001c68 <__aeabi_dsub+0x5d0>
 8001afe:	2001      	movs	r0, #1
 8001b00:	1a17      	subs	r7, r2, r0
 8001b02:	42ba      	cmp	r2, r7
 8001b04:	4192      	sbcs	r2, r2
 8001b06:	465b      	mov	r3, fp
 8001b08:	4252      	negs	r2, r2
 8001b0a:	464d      	mov	r5, r9
 8001b0c:	1a9c      	subs	r4, r3, r2
 8001b0e:	e620      	b.n	8001752 <__aeabi_dsub+0xba>
 8001b10:	0767      	lsls	r7, r4, #29
 8001b12:	08c0      	lsrs	r0, r0, #3
 8001b14:	4307      	orrs	r7, r0
 8001b16:	08e5      	lsrs	r5, r4, #3
 8001b18:	e6ba      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001b1a:	001f      	movs	r7, r3
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	3f20      	subs	r7, #32
 8001b20:	40f9      	lsrs	r1, r7
 8001b22:	000f      	movs	r7, r1
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d005      	beq.n	8001b34 <__aeabi_dsub+0x49c>
 8001b28:	2140      	movs	r1, #64	@ 0x40
 8001b2a:	1acb      	subs	r3, r1, r3
 8001b2c:	4659      	mov	r1, fp
 8001b2e:	4099      	lsls	r1, r3
 8001b30:	430a      	orrs	r2, r1
 8001b32:	4692      	mov	sl, r2
 8001b34:	4653      	mov	r3, sl
 8001b36:	1e5a      	subs	r2, r3, #1
 8001b38:	4193      	sbcs	r3, r2
 8001b3a:	431f      	orrs	r7, r3
 8001b3c:	e604      	b.n	8001748 <__aeabi_dsub+0xb0>
 8001b3e:	1aeb      	subs	r3, r5, r3
 8001b40:	4d9b      	ldr	r5, [pc, #620]	@ (8001db0 <__aeabi_dsub+0x718>)
 8001b42:	4015      	ands	r5, r2
 8001b44:	076f      	lsls	r7, r5, #29
 8001b46:	08ed      	lsrs	r5, r5, #3
 8001b48:	032c      	lsls	r4, r5, #12
 8001b4a:	055d      	lsls	r5, r3, #21
 8001b4c:	0b24      	lsrs	r4, r4, #12
 8001b4e:	0d6d      	lsrs	r5, r5, #21
 8001b50:	e736      	b.n	80019c0 <__aeabi_dsub+0x328>
 8001b52:	4d95      	ldr	r5, [pc, #596]	@ (8001da8 <__aeabi_dsub+0x710>)
 8001b54:	42ab      	cmp	r3, r5
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dsub+0x4c2>
 8001b58:	e0d6      	b.n	8001d08 <__aeabi_dsub+0x670>
 8001b5a:	1882      	adds	r2, r0, r2
 8001b5c:	0021      	movs	r1, r4
 8001b5e:	4282      	cmp	r2, r0
 8001b60:	4180      	sbcs	r0, r0
 8001b62:	4459      	add	r1, fp
 8001b64:	4240      	negs	r0, r0
 8001b66:	1808      	adds	r0, r1, r0
 8001b68:	07c7      	lsls	r7, r0, #31
 8001b6a:	0852      	lsrs	r2, r2, #1
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	0844      	lsrs	r4, r0, #1
 8001b70:	0752      	lsls	r2, r2, #29
 8001b72:	d400      	bmi.n	8001b76 <__aeabi_dsub+0x4de>
 8001b74:	e185      	b.n	8001e82 <__aeabi_dsub+0x7ea>
 8001b76:	220f      	movs	r2, #15
 8001b78:	001d      	movs	r5, r3
 8001b7a:	403a      	ands	r2, r7
 8001b7c:	2a04      	cmp	r2, #4
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_dsub+0x4ea>
 8001b80:	e61a      	b.n	80017b8 <__aeabi_dsub+0x120>
 8001b82:	08ff      	lsrs	r7, r7, #3
 8001b84:	0764      	lsls	r4, r4, #29
 8001b86:	4327      	orrs	r7, r4
 8001b88:	0905      	lsrs	r5, r0, #4
 8001b8a:	e7dd      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001b8c:	465b      	mov	r3, fp
 8001b8e:	08d2      	lsrs	r2, r2, #3
 8001b90:	075f      	lsls	r7, r3, #29
 8001b92:	4317      	orrs	r7, r2
 8001b94:	08dd      	lsrs	r5, r3, #3
 8001b96:	e67b      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001b98:	2700      	movs	r7, #0
 8001b9a:	2400      	movs	r4, #0
 8001b9c:	e710      	b.n	80019c0 <__aeabi_dsub+0x328>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d000      	beq.n	8001ba4 <__aeabi_dsub+0x50c>
 8001ba2:	e0d6      	b.n	8001d52 <__aeabi_dsub+0x6ba>
 8001ba4:	2900      	cmp	r1, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dsub+0x512>
 8001ba8:	e12f      	b.n	8001e0a <__aeabi_dsub+0x772>
 8001baa:	2480      	movs	r4, #128	@ 0x80
 8001bac:	2600      	movs	r6, #0
 8001bae:	4d7e      	ldr	r5, [pc, #504]	@ (8001da8 <__aeabi_dsub+0x710>)
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	e705      	b.n	80019c0 <__aeabi_dsub+0x328>
 8001bb4:	4666      	mov	r6, ip
 8001bb6:	465c      	mov	r4, fp
 8001bb8:	08d0      	lsrs	r0, r2, #3
 8001bba:	e717      	b.n	80019ec <__aeabi_dsub+0x354>
 8001bbc:	465b      	mov	r3, fp
 8001bbe:	1a17      	subs	r7, r2, r0
 8001bc0:	42ba      	cmp	r2, r7
 8001bc2:	4192      	sbcs	r2, r2
 8001bc4:	1b1c      	subs	r4, r3, r4
 8001bc6:	2601      	movs	r6, #1
 8001bc8:	4663      	mov	r3, ip
 8001bca:	4252      	negs	r2, r2
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	401e      	ands	r6, r3
 8001bd0:	e5c4      	b.n	800175c <__aeabi_dsub+0xc4>
 8001bd2:	1883      	adds	r3, r0, r2
 8001bd4:	4283      	cmp	r3, r0
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	445c      	add	r4, fp
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1825      	adds	r5, r4, r0
 8001bde:	022a      	lsls	r2, r5, #8
 8001be0:	d400      	bmi.n	8001be4 <__aeabi_dsub+0x54c>
 8001be2:	e0da      	b.n	8001d9a <__aeabi_dsub+0x702>
 8001be4:	4a72      	ldr	r2, [pc, #456]	@ (8001db0 <__aeabi_dsub+0x718>)
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	4015      	ands	r5, r2
 8001bea:	07ea      	lsls	r2, r5, #31
 8001bec:	431a      	orrs	r2, r3
 8001bee:	0869      	lsrs	r1, r5, #1
 8001bf0:	075b      	lsls	r3, r3, #29
 8001bf2:	d400      	bmi.n	8001bf6 <__aeabi_dsub+0x55e>
 8001bf4:	e14a      	b.n	8001e8c <__aeabi_dsub+0x7f4>
 8001bf6:	230f      	movs	r3, #15
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x568>
 8001bfe:	e0fc      	b.n	8001dfa <__aeabi_dsub+0x762>
 8001c00:	1d17      	adds	r7, r2, #4
 8001c02:	4297      	cmp	r7, r2
 8001c04:	41a4      	sbcs	r4, r4
 8001c06:	4264      	negs	r4, r4
 8001c08:	2502      	movs	r5, #2
 8001c0a:	1864      	adds	r4, r4, r1
 8001c0c:	e6ec      	b.n	80019e8 <__aeabi_dsub+0x350>
 8001c0e:	4647      	mov	r7, r8
 8001c10:	001c      	movs	r4, r3
 8001c12:	431f      	orrs	r7, r3
 8001c14:	d000      	beq.n	8001c18 <__aeabi_dsub+0x580>
 8001c16:	e743      	b.n	8001aa0 <__aeabi_dsub+0x408>
 8001c18:	2600      	movs	r6, #0
 8001c1a:	2500      	movs	r5, #0
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	e6cf      	b.n	80019c0 <__aeabi_dsub+0x328>
 8001c20:	08c0      	lsrs	r0, r0, #3
 8001c22:	0767      	lsls	r7, r4, #29
 8001c24:	4307      	orrs	r7, r0
 8001c26:	08e5      	lsrs	r5, r4, #3
 8001c28:	e632      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001c2a:	1a87      	subs	r7, r0, r2
 8001c2c:	465b      	mov	r3, fp
 8001c2e:	42b8      	cmp	r0, r7
 8001c30:	4180      	sbcs	r0, r0
 8001c32:	1ae4      	subs	r4, r4, r3
 8001c34:	4240      	negs	r0, r0
 8001c36:	1a24      	subs	r4, r4, r0
 8001c38:	0223      	lsls	r3, r4, #8
 8001c3a:	d428      	bmi.n	8001c8e <__aeabi_dsub+0x5f6>
 8001c3c:	0763      	lsls	r3, r4, #29
 8001c3e:	08ff      	lsrs	r7, r7, #3
 8001c40:	431f      	orrs	r7, r3
 8001c42:	08e5      	lsrs	r5, r4, #3
 8001c44:	2301      	movs	r3, #1
 8001c46:	e77f      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x5b6>
 8001c4c:	e673      	b.n	8001936 <__aeabi_dsub+0x29e>
 8001c4e:	464b      	mov	r3, r9
 8001c50:	1b5f      	subs	r7, r3, r5
 8001c52:	003b      	movs	r3, r7
 8001c54:	2d00      	cmp	r5, #0
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x5c2>
 8001c58:	e742      	b.n	8001ae0 <__aeabi_dsub+0x448>
 8001c5a:	2f38      	cmp	r7, #56	@ 0x38
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_dsub+0x5c8>
 8001c5e:	e0ec      	b.n	8001e3a <__aeabi_dsub+0x7a2>
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	000e      	movs	r6, r1
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	431c      	orrs	r4, r3
 8001c68:	2f1f      	cmp	r7, #31
 8001c6a:	dc25      	bgt.n	8001cb8 <__aeabi_dsub+0x620>
 8001c6c:	2520      	movs	r5, #32
 8001c6e:	0023      	movs	r3, r4
 8001c70:	1bed      	subs	r5, r5, r7
 8001c72:	0001      	movs	r1, r0
 8001c74:	40a8      	lsls	r0, r5
 8001c76:	40ab      	lsls	r3, r5
 8001c78:	40f9      	lsrs	r1, r7
 8001c7a:	1e45      	subs	r5, r0, #1
 8001c7c:	41a8      	sbcs	r0, r5
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	40fc      	lsrs	r4, r7
 8001c82:	4318      	orrs	r0, r3
 8001c84:	465b      	mov	r3, fp
 8001c86:	1b1b      	subs	r3, r3, r4
 8001c88:	469b      	mov	fp, r3
 8001c8a:	e739      	b.n	8001b00 <__aeabi_dsub+0x468>
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	2501      	movs	r5, #1
 8001c90:	e562      	b.n	8001758 <__aeabi_dsub+0xc0>
 8001c92:	001f      	movs	r7, r3
 8001c94:	4659      	mov	r1, fp
 8001c96:	3f20      	subs	r7, #32
 8001c98:	40f9      	lsrs	r1, r7
 8001c9a:	468c      	mov	ip, r1
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d005      	beq.n	8001cac <__aeabi_dsub+0x614>
 8001ca0:	2740      	movs	r7, #64	@ 0x40
 8001ca2:	4659      	mov	r1, fp
 8001ca4:	1afb      	subs	r3, r7, r3
 8001ca6:	4099      	lsls	r1, r3
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	4692      	mov	sl, r2
 8001cac:	4657      	mov	r7, sl
 8001cae:	1e7b      	subs	r3, r7, #1
 8001cb0:	419f      	sbcs	r7, r3
 8001cb2:	4663      	mov	r3, ip
 8001cb4:	431f      	orrs	r7, r3
 8001cb6:	e5c1      	b.n	800183c <__aeabi_dsub+0x1a4>
 8001cb8:	003b      	movs	r3, r7
 8001cba:	0025      	movs	r5, r4
 8001cbc:	3b20      	subs	r3, #32
 8001cbe:	40dd      	lsrs	r5, r3
 8001cc0:	2f20      	cmp	r7, #32
 8001cc2:	d004      	beq.n	8001cce <__aeabi_dsub+0x636>
 8001cc4:	2340      	movs	r3, #64	@ 0x40
 8001cc6:	1bdb      	subs	r3, r3, r7
 8001cc8:	409c      	lsls	r4, r3
 8001cca:	4320      	orrs	r0, r4
 8001ccc:	4680      	mov	r8, r0
 8001cce:	4640      	mov	r0, r8
 8001cd0:	1e43      	subs	r3, r0, #1
 8001cd2:	4198      	sbcs	r0, r3
 8001cd4:	4328      	orrs	r0, r5
 8001cd6:	e713      	b.n	8001b00 <__aeabi_dsub+0x468>
 8001cd8:	2900      	cmp	r1, #0
 8001cda:	d09d      	beq.n	8001c18 <__aeabi_dsub+0x580>
 8001cdc:	2601      	movs	r6, #1
 8001cde:	4663      	mov	r3, ip
 8001ce0:	465c      	mov	r4, fp
 8001ce2:	4690      	mov	r8, r2
 8001ce4:	401e      	ands	r6, r3
 8001ce6:	e6db      	b.n	8001aa0 <__aeabi_dsub+0x408>
 8001ce8:	1a17      	subs	r7, r2, r0
 8001cea:	465b      	mov	r3, fp
 8001cec:	42ba      	cmp	r2, r7
 8001cee:	4192      	sbcs	r2, r2
 8001cf0:	1b1c      	subs	r4, r3, r4
 8001cf2:	4252      	negs	r2, r2
 8001cf4:	1aa4      	subs	r4, r4, r2
 8001cf6:	0223      	lsls	r3, r4, #8
 8001cf8:	d4c8      	bmi.n	8001c8c <__aeabi_dsub+0x5f4>
 8001cfa:	0763      	lsls	r3, r4, #29
 8001cfc:	08ff      	lsrs	r7, r7, #3
 8001cfe:	431f      	orrs	r7, r3
 8001d00:	4666      	mov	r6, ip
 8001d02:	2301      	movs	r3, #1
 8001d04:	08e5      	lsrs	r5, r4, #3
 8001d06:	e71f      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001d08:	001d      	movs	r5, r3
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	e657      	b.n	80019c0 <__aeabi_dsub+0x328>
 8001d10:	465c      	mov	r4, fp
 8001d12:	08d0      	lsrs	r0, r2, #3
 8001d14:	e66a      	b.n	80019ec <__aeabi_dsub+0x354>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dsub+0x684>
 8001d1a:	e737      	b.n	8001b8c <__aeabi_dsub+0x4f4>
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	08c0      	lsrs	r0, r0, #3
 8001d20:	0767      	lsls	r7, r4, #29
 8001d22:	4307      	orrs	r7, r0
 8001d24:	08e5      	lsrs	r5, r4, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x694>
 8001d2a:	e5b1      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	031b      	lsls	r3, r3, #12
 8001d30:	421d      	tst	r5, r3
 8001d32:	d008      	beq.n	8001d46 <__aeabi_dsub+0x6ae>
 8001d34:	4659      	mov	r1, fp
 8001d36:	08c8      	lsrs	r0, r1, #3
 8001d38:	4218      	tst	r0, r3
 8001d3a:	d104      	bne.n	8001d46 <__aeabi_dsub+0x6ae>
 8001d3c:	08d2      	lsrs	r2, r2, #3
 8001d3e:	0749      	lsls	r1, r1, #29
 8001d40:	430a      	orrs	r2, r1
 8001d42:	0017      	movs	r7, r2
 8001d44:	0005      	movs	r5, r0
 8001d46:	0f7b      	lsrs	r3, r7, #29
 8001d48:	00ff      	lsls	r7, r7, #3
 8001d4a:	08ff      	lsrs	r7, r7, #3
 8001d4c:	075b      	lsls	r3, r3, #29
 8001d4e:	431f      	orrs	r7, r3
 8001d50:	e59e      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001d52:	08c0      	lsrs	r0, r0, #3
 8001d54:	0763      	lsls	r3, r4, #29
 8001d56:	4318      	orrs	r0, r3
 8001d58:	08e5      	lsrs	r5, r4, #3
 8001d5a:	2900      	cmp	r1, #0
 8001d5c:	d053      	beq.n	8001e06 <__aeabi_dsub+0x76e>
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	031b      	lsls	r3, r3, #12
 8001d62:	421d      	tst	r5, r3
 8001d64:	d00a      	beq.n	8001d7c <__aeabi_dsub+0x6e4>
 8001d66:	4659      	mov	r1, fp
 8001d68:	08cc      	lsrs	r4, r1, #3
 8001d6a:	421c      	tst	r4, r3
 8001d6c:	d106      	bne.n	8001d7c <__aeabi_dsub+0x6e4>
 8001d6e:	2601      	movs	r6, #1
 8001d70:	4663      	mov	r3, ip
 8001d72:	0025      	movs	r5, r4
 8001d74:	08d0      	lsrs	r0, r2, #3
 8001d76:	0749      	lsls	r1, r1, #29
 8001d78:	4308      	orrs	r0, r1
 8001d7a:	401e      	ands	r6, r3
 8001d7c:	0f47      	lsrs	r7, r0, #29
 8001d7e:	00c0      	lsls	r0, r0, #3
 8001d80:	08c0      	lsrs	r0, r0, #3
 8001d82:	077f      	lsls	r7, r7, #29
 8001d84:	4307      	orrs	r7, r0
 8001d86:	e583      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001d88:	1883      	adds	r3, r0, r2
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	4192      	sbcs	r2, r2
 8001d8e:	445c      	add	r4, fp
 8001d90:	4252      	negs	r2, r2
 8001d92:	18a5      	adds	r5, r4, r2
 8001d94:	022a      	lsls	r2, r5, #8
 8001d96:	d500      	bpl.n	8001d9a <__aeabi_dsub+0x702>
 8001d98:	e724      	b.n	8001be4 <__aeabi_dsub+0x54c>
 8001d9a:	076f      	lsls	r7, r5, #29
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	431f      	orrs	r7, r3
 8001da0:	08ed      	lsrs	r5, r5, #3
 8001da2:	2301      	movs	r3, #1
 8001da4:	e6d0      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	000007fe 	.word	0x000007fe
 8001db0:	ff7fffff 	.word	0xff7fffff
 8001db4:	465b      	mov	r3, fp
 8001db6:	08d2      	lsrs	r2, r2, #3
 8001db8:	075f      	lsls	r7, r3, #29
 8001dba:	4666      	mov	r6, ip
 8001dbc:	4317      	orrs	r7, r2
 8001dbe:	08dd      	lsrs	r5, r3, #3
 8001dc0:	e566      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001dc2:	0025      	movs	r5, r4
 8001dc4:	3b20      	subs	r3, #32
 8001dc6:	40dd      	lsrs	r5, r3
 8001dc8:	4663      	mov	r3, ip
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d005      	beq.n	8001dda <__aeabi_dsub+0x742>
 8001dce:	2340      	movs	r3, #64	@ 0x40
 8001dd0:	4661      	mov	r1, ip
 8001dd2:	1a5b      	subs	r3, r3, r1
 8001dd4:	409c      	lsls	r4, r3
 8001dd6:	4320      	orrs	r0, r4
 8001dd8:	4680      	mov	r8, r0
 8001dda:	4647      	mov	r7, r8
 8001ddc:	1e7b      	subs	r3, r7, #1
 8001dde:	419f      	sbcs	r7, r3
 8001de0:	432f      	orrs	r7, r5
 8001de2:	e5a0      	b.n	8001926 <__aeabi_dsub+0x28e>
 8001de4:	2120      	movs	r1, #32
 8001de6:	2700      	movs	r7, #0
 8001de8:	1a09      	subs	r1, r1, r0
 8001dea:	e4d2      	b.n	8001792 <__aeabi_dsub+0xfa>
 8001dec:	2f00      	cmp	r7, #0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x75a>
 8001df0:	e713      	b.n	8001c1a <__aeabi_dsub+0x582>
 8001df2:	465c      	mov	r4, fp
 8001df4:	0017      	movs	r7, r2
 8001df6:	2500      	movs	r5, #0
 8001df8:	e5f6      	b.n	80019e8 <__aeabi_dsub+0x350>
 8001dfa:	08d7      	lsrs	r7, r2, #3
 8001dfc:	0749      	lsls	r1, r1, #29
 8001dfe:	2302      	movs	r3, #2
 8001e00:	430f      	orrs	r7, r1
 8001e02:	092d      	lsrs	r5, r5, #4
 8001e04:	e6a0      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001e06:	0007      	movs	r7, r0
 8001e08:	e542      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001e0a:	465b      	mov	r3, fp
 8001e0c:	2601      	movs	r6, #1
 8001e0e:	075f      	lsls	r7, r3, #29
 8001e10:	08dd      	lsrs	r5, r3, #3
 8001e12:	4663      	mov	r3, ip
 8001e14:	08d2      	lsrs	r2, r2, #3
 8001e16:	4317      	orrs	r7, r2
 8001e18:	401e      	ands	r6, r3
 8001e1a:	e539      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001e1c:	465b      	mov	r3, fp
 8001e1e:	08d2      	lsrs	r2, r2, #3
 8001e20:	075f      	lsls	r7, r3, #29
 8001e22:	4317      	orrs	r7, r2
 8001e24:	08dd      	lsrs	r5, r3, #3
 8001e26:	e533      	b.n	8001890 <__aeabi_dsub+0x1f8>
 8001e28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <__aeabi_dsub+0x80c>)
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	4022      	ands	r2, r4
 8001e2e:	0757      	lsls	r7, r2, #29
 8001e30:	0252      	lsls	r2, r2, #9
 8001e32:	2501      	movs	r5, #1
 8001e34:	431f      	orrs	r7, r3
 8001e36:	0b14      	lsrs	r4, r2, #12
 8001e38:	e5c2      	b.n	80019c0 <__aeabi_dsub+0x328>
 8001e3a:	000e      	movs	r6, r1
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	e65f      	b.n	8001b00 <__aeabi_dsub+0x468>
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <__aeabi_dsub+0x7c8>
 8001e44:	464b      	mov	r3, r9
 8001e46:	1b5b      	subs	r3, r3, r5
 8001e48:	469c      	mov	ip, r3
 8001e4a:	2d00      	cmp	r5, #0
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_dsub+0x7b8>
 8001e4e:	e548      	b.n	80018e2 <__aeabi_dsub+0x24a>
 8001e50:	2701      	movs	r7, #1
 8001e52:	2b38      	cmp	r3, #56	@ 0x38
 8001e54:	dd00      	ble.n	8001e58 <__aeabi_dsub+0x7c0>
 8001e56:	e566      	b.n	8001926 <__aeabi_dsub+0x28e>
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	431c      	orrs	r4, r3
 8001e5e:	e550      	b.n	8001902 <__aeabi_dsub+0x26a>
 8001e60:	1c6b      	adds	r3, r5, #1
 8001e62:	4d11      	ldr	r5, [pc, #68]	@ (8001ea8 <__aeabi_dsub+0x810>)
 8001e64:	422b      	tst	r3, r5
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dsub+0x7d2>
 8001e68:	e673      	b.n	8001b52 <__aeabi_dsub+0x4ba>
 8001e6a:	4659      	mov	r1, fp
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	4311      	orrs	r1, r2
 8001e70:	468a      	mov	sl, r1
 8001e72:	4303      	orrs	r3, r0
 8001e74:	e600      	b.n	8001a78 <__aeabi_dsub+0x3e0>
 8001e76:	0767      	lsls	r7, r4, #29
 8001e78:	08c0      	lsrs	r0, r0, #3
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	4307      	orrs	r7, r0
 8001e7e:	08e5      	lsrs	r5, r4, #3
 8001e80:	e662      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001e82:	0764      	lsls	r4, r4, #29
 8001e84:	08ff      	lsrs	r7, r7, #3
 8001e86:	4327      	orrs	r7, r4
 8001e88:	0905      	lsrs	r5, r0, #4
 8001e8a:	e65d      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001e8c:	08d2      	lsrs	r2, r2, #3
 8001e8e:	0749      	lsls	r1, r1, #29
 8001e90:	4311      	orrs	r1, r2
 8001e92:	000f      	movs	r7, r1
 8001e94:	2302      	movs	r3, #2
 8001e96:	092d      	lsrs	r5, r5, #4
 8001e98:	e656      	b.n	8001b48 <__aeabi_dsub+0x4b0>
 8001e9a:	0007      	movs	r7, r0
 8001e9c:	e5a4      	b.n	80019e8 <__aeabi_dsub+0x350>
 8001e9e:	0038      	movs	r0, r7
 8001ea0:	e48f      	b.n	80017c2 <__aeabi_dsub+0x12a>
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	ff7fffff 	.word	0xff7fffff
 8001ea8:	000007fe 	.word	0x000007fe

08001eac <__aeabi_d2iz>:
 8001eac:	000b      	movs	r3, r1
 8001eae:	0002      	movs	r2, r0
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4d16      	ldr	r5, [pc, #88]	@ (8001f0c <__aeabi_d2iz+0x60>)
 8001eb4:	030c      	lsls	r4, r1, #12
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	0049      	lsls	r1, r1, #1
 8001eba:	2000      	movs	r0, #0
 8001ebc:	9200      	str	r2, [sp, #0]
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	0b24      	lsrs	r4, r4, #12
 8001ec2:	0d49      	lsrs	r1, r1, #21
 8001ec4:	0fde      	lsrs	r6, r3, #31
 8001ec6:	42a9      	cmp	r1, r5
 8001ec8:	dd04      	ble.n	8001ed4 <__aeabi_d2iz+0x28>
 8001eca:	4811      	ldr	r0, [pc, #68]	@ (8001f10 <__aeabi_d2iz+0x64>)
 8001ecc:	4281      	cmp	r1, r0
 8001ece:	dd03      	ble.n	8001ed8 <__aeabi_d2iz+0x2c>
 8001ed0:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <__aeabi_d2iz+0x68>)
 8001ed2:	18f0      	adds	r0, r6, r3
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
 8001ed8:	2080      	movs	r0, #128	@ 0x80
 8001eda:	0340      	lsls	r0, r0, #13
 8001edc:	4320      	orrs	r0, r4
 8001ede:	4c0e      	ldr	r4, [pc, #56]	@ (8001f18 <__aeabi_d2iz+0x6c>)
 8001ee0:	1a64      	subs	r4, r4, r1
 8001ee2:	2c1f      	cmp	r4, #31
 8001ee4:	dd08      	ble.n	8001ef8 <__aeabi_d2iz+0x4c>
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <__aeabi_d2iz+0x70>)
 8001ee8:	1a5b      	subs	r3, r3, r1
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	0003      	movs	r3, r0
 8001eee:	4258      	negs	r0, r3
 8001ef0:	2e00      	cmp	r6, #0
 8001ef2:	d1ef      	bne.n	8001ed4 <__aeabi_d2iz+0x28>
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	e7ed      	b.n	8001ed4 <__aeabi_d2iz+0x28>
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <__aeabi_d2iz+0x74>)
 8001efa:	9a00      	ldr	r2, [sp, #0]
 8001efc:	469c      	mov	ip, r3
 8001efe:	0003      	movs	r3, r0
 8001f00:	4461      	add	r1, ip
 8001f02:	408b      	lsls	r3, r1
 8001f04:	40e2      	lsrs	r2, r4
 8001f06:	4313      	orrs	r3, r2
 8001f08:	e7f1      	b.n	8001eee <__aeabi_d2iz+0x42>
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	000003fe 	.word	0x000003fe
 8001f10:	0000041d 	.word	0x0000041d
 8001f14:	7fffffff 	.word	0x7fffffff
 8001f18:	00000433 	.word	0x00000433
 8001f1c:	00000413 	.word	0x00000413
 8001f20:	fffffbed 	.word	0xfffffbed

08001f24 <__aeabi_i2d>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d016      	beq.n	8001f58 <__aeabi_i2d+0x34>
 8001f2a:	17c3      	asrs	r3, r0, #31
 8001f2c:	18c5      	adds	r5, r0, r3
 8001f2e:	405d      	eors	r5, r3
 8001f30:	0fc4      	lsrs	r4, r0, #31
 8001f32:	0028      	movs	r0, r5
 8001f34:	f000 f886 	bl	8002044 <__clzsi2>
 8001f38:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <__aeabi_i2d+0x58>)
 8001f3a:	1a1b      	subs	r3, r3, r0
 8001f3c:	055b      	lsls	r3, r3, #21
 8001f3e:	0d5b      	lsrs	r3, r3, #21
 8001f40:	280a      	cmp	r0, #10
 8001f42:	dc14      	bgt.n	8001f6e <__aeabi_i2d+0x4a>
 8001f44:	0002      	movs	r2, r0
 8001f46:	002e      	movs	r6, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4096      	lsls	r6, r2
 8001f4c:	220b      	movs	r2, #11
 8001f4e:	1a12      	subs	r2, r2, r0
 8001f50:	40d5      	lsrs	r5, r2
 8001f52:	032d      	lsls	r5, r5, #12
 8001f54:	0b2d      	lsrs	r5, r5, #12
 8001f56:	e003      	b.n	8001f60 <__aeabi_i2d+0x3c>
 8001f58:	2400      	movs	r4, #0
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	2600      	movs	r6, #0
 8001f60:	051b      	lsls	r3, r3, #20
 8001f62:	432b      	orrs	r3, r5
 8001f64:	07e4      	lsls	r4, r4, #31
 8001f66:	4323      	orrs	r3, r4
 8001f68:	0030      	movs	r0, r6
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
 8001f6e:	380b      	subs	r0, #11
 8001f70:	4085      	lsls	r5, r0
 8001f72:	032d      	lsls	r5, r5, #12
 8001f74:	2600      	movs	r6, #0
 8001f76:	0b2d      	lsrs	r5, r5, #12
 8001f78:	e7f2      	b.n	8001f60 <__aeabi_i2d+0x3c>
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	0000041e 	.word	0x0000041e

08001f80 <__aeabi_ui2d>:
 8001f80:	b510      	push	{r4, lr}
 8001f82:	1e04      	subs	r4, r0, #0
 8001f84:	d010      	beq.n	8001fa8 <__aeabi_ui2d+0x28>
 8001f86:	f000 f85d 	bl	8002044 <__clzsi2>
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <__aeabi_ui2d+0x44>)
 8001f8c:	1a1b      	subs	r3, r3, r0
 8001f8e:	055b      	lsls	r3, r3, #21
 8001f90:	0d5b      	lsrs	r3, r3, #21
 8001f92:	280a      	cmp	r0, #10
 8001f94:	dc0f      	bgt.n	8001fb6 <__aeabi_ui2d+0x36>
 8001f96:	220b      	movs	r2, #11
 8001f98:	0021      	movs	r1, r4
 8001f9a:	1a12      	subs	r2, r2, r0
 8001f9c:	40d1      	lsrs	r1, r2
 8001f9e:	3015      	adds	r0, #21
 8001fa0:	030a      	lsls	r2, r1, #12
 8001fa2:	4084      	lsls	r4, r0
 8001fa4:	0b12      	lsrs	r2, r2, #12
 8001fa6:	e001      	b.n	8001fac <__aeabi_ui2d+0x2c>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2200      	movs	r2, #0
 8001fac:	051b      	lsls	r3, r3, #20
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	0020      	movs	r0, r4
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	0022      	movs	r2, r4
 8001fb8:	380b      	subs	r0, #11
 8001fba:	4082      	lsls	r2, r0
 8001fbc:	0312      	lsls	r2, r2, #12
 8001fbe:	2400      	movs	r4, #0
 8001fc0:	0b12      	lsrs	r2, r2, #12
 8001fc2:	e7f3      	b.n	8001fac <__aeabi_ui2d+0x2c>
 8001fc4:	0000041e 	.word	0x0000041e

08001fc8 <__aeabi_cdrcmple>:
 8001fc8:	4684      	mov	ip, r0
 8001fca:	0010      	movs	r0, r2
 8001fcc:	4662      	mov	r2, ip
 8001fce:	468c      	mov	ip, r1
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	4663      	mov	r3, ip
 8001fd4:	e000      	b.n	8001fd8 <__aeabi_cdcmpeq>
 8001fd6:	46c0      	nop			@ (mov r8, r8)

08001fd8 <__aeabi_cdcmpeq>:
 8001fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001fda:	f000 f905 	bl	80021e8 <__ledf2>
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d401      	bmi.n	8001fe6 <__aeabi_cdcmpeq+0xe>
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	42c8      	cmn	r0, r1
 8001fe6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001fe8 <__aeabi_dcmpeq>:
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	f000 f849 	bl	8002080 <__eqdf2>
 8001fee:	4240      	negs	r0, r0
 8001ff0:	3001      	adds	r0, #1
 8001ff2:	bd10      	pop	{r4, pc}

08001ff4 <__aeabi_dcmplt>:
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	f000 f8f7 	bl	80021e8 <__ledf2>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	db01      	blt.n	8002002 <__aeabi_dcmplt+0xe>
 8001ffe:	2000      	movs	r0, #0
 8002000:	bd10      	pop	{r4, pc}
 8002002:	2001      	movs	r0, #1
 8002004:	bd10      	pop	{r4, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)

08002008 <__aeabi_dcmple>:
 8002008:	b510      	push	{r4, lr}
 800200a:	f000 f8ed 	bl	80021e8 <__ledf2>
 800200e:	2800      	cmp	r0, #0
 8002010:	dd01      	ble.n	8002016 <__aeabi_dcmple+0xe>
 8002012:	2000      	movs	r0, #0
 8002014:	bd10      	pop	{r4, pc}
 8002016:	2001      	movs	r0, #1
 8002018:	bd10      	pop	{r4, pc}
 800201a:	46c0      	nop			@ (mov r8, r8)

0800201c <__aeabi_dcmpgt>:
 800201c:	b510      	push	{r4, lr}
 800201e:	f000 f873 	bl	8002108 <__gedf2>
 8002022:	2800      	cmp	r0, #0
 8002024:	dc01      	bgt.n	800202a <__aeabi_dcmpgt+0xe>
 8002026:	2000      	movs	r0, #0
 8002028:	bd10      	pop	{r4, pc}
 800202a:	2001      	movs	r0, #1
 800202c:	bd10      	pop	{r4, pc}
 800202e:	46c0      	nop			@ (mov r8, r8)

08002030 <__aeabi_dcmpge>:
 8002030:	b510      	push	{r4, lr}
 8002032:	f000 f869 	bl	8002108 <__gedf2>
 8002036:	2800      	cmp	r0, #0
 8002038:	da01      	bge.n	800203e <__aeabi_dcmpge+0xe>
 800203a:	2000      	movs	r0, #0
 800203c:	bd10      	pop	{r4, pc}
 800203e:	2001      	movs	r0, #1
 8002040:	bd10      	pop	{r4, pc}
 8002042:	46c0      	nop			@ (mov r8, r8)

08002044 <__clzsi2>:
 8002044:	211c      	movs	r1, #28
 8002046:	2301      	movs	r3, #1
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	4298      	cmp	r0, r3
 800204c:	d301      	bcc.n	8002052 <__clzsi2+0xe>
 800204e:	0c00      	lsrs	r0, r0, #16
 8002050:	3910      	subs	r1, #16
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	4298      	cmp	r0, r3
 8002056:	d301      	bcc.n	800205c <__clzsi2+0x18>
 8002058:	0a00      	lsrs	r0, r0, #8
 800205a:	3908      	subs	r1, #8
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	4298      	cmp	r0, r3
 8002060:	d301      	bcc.n	8002066 <__clzsi2+0x22>
 8002062:	0900      	lsrs	r0, r0, #4
 8002064:	3904      	subs	r1, #4
 8002066:	a202      	add	r2, pc, #8	@ (adr r2, 8002070 <__clzsi2+0x2c>)
 8002068:	5c10      	ldrb	r0, [r2, r0]
 800206a:	1840      	adds	r0, r0, r1
 800206c:	4770      	bx	lr
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	02020304 	.word	0x02020304
 8002074:	01010101 	.word	0x01010101
	...

08002080 <__eqdf2>:
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	4657      	mov	r7, sl
 8002084:	46de      	mov	lr, fp
 8002086:	464e      	mov	r6, r9
 8002088:	4645      	mov	r5, r8
 800208a:	b5e0      	push	{r5, r6, r7, lr}
 800208c:	000d      	movs	r5, r1
 800208e:	0004      	movs	r4, r0
 8002090:	0fe8      	lsrs	r0, r5, #31
 8002092:	4683      	mov	fp, r0
 8002094:	0309      	lsls	r1, r1, #12
 8002096:	0fd8      	lsrs	r0, r3, #31
 8002098:	0b09      	lsrs	r1, r1, #12
 800209a:	4682      	mov	sl, r0
 800209c:	4819      	ldr	r0, [pc, #100]	@ (8002104 <__eqdf2+0x84>)
 800209e:	468c      	mov	ip, r1
 80020a0:	031f      	lsls	r7, r3, #12
 80020a2:	0069      	lsls	r1, r5, #1
 80020a4:	005e      	lsls	r6, r3, #1
 80020a6:	0d49      	lsrs	r1, r1, #21
 80020a8:	0b3f      	lsrs	r7, r7, #12
 80020aa:	0d76      	lsrs	r6, r6, #21
 80020ac:	4281      	cmp	r1, r0
 80020ae:	d018      	beq.n	80020e2 <__eqdf2+0x62>
 80020b0:	4286      	cmp	r6, r0
 80020b2:	d00f      	beq.n	80020d4 <__eqdf2+0x54>
 80020b4:	2001      	movs	r0, #1
 80020b6:	42b1      	cmp	r1, r6
 80020b8:	d10d      	bne.n	80020d6 <__eqdf2+0x56>
 80020ba:	45bc      	cmp	ip, r7
 80020bc:	d10b      	bne.n	80020d6 <__eqdf2+0x56>
 80020be:	4294      	cmp	r4, r2
 80020c0:	d109      	bne.n	80020d6 <__eqdf2+0x56>
 80020c2:	45d3      	cmp	fp, sl
 80020c4:	d01c      	beq.n	8002100 <__eqdf2+0x80>
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d105      	bne.n	80020d6 <__eqdf2+0x56>
 80020ca:	4660      	mov	r0, ip
 80020cc:	4320      	orrs	r0, r4
 80020ce:	1e43      	subs	r3, r0, #1
 80020d0:	4198      	sbcs	r0, r3
 80020d2:	e000      	b.n	80020d6 <__eqdf2+0x56>
 80020d4:	2001      	movs	r0, #1
 80020d6:	bcf0      	pop	{r4, r5, r6, r7}
 80020d8:	46bb      	mov	fp, r7
 80020da:	46b2      	mov	sl, r6
 80020dc:	46a9      	mov	r9, r5
 80020de:	46a0      	mov	r8, r4
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e2:	2001      	movs	r0, #1
 80020e4:	428e      	cmp	r6, r1
 80020e6:	d1f6      	bne.n	80020d6 <__eqdf2+0x56>
 80020e8:	4661      	mov	r1, ip
 80020ea:	4339      	orrs	r1, r7
 80020ec:	000f      	movs	r7, r1
 80020ee:	4317      	orrs	r7, r2
 80020f0:	4327      	orrs	r7, r4
 80020f2:	d1f0      	bne.n	80020d6 <__eqdf2+0x56>
 80020f4:	465b      	mov	r3, fp
 80020f6:	4652      	mov	r2, sl
 80020f8:	1a98      	subs	r0, r3, r2
 80020fa:	1e43      	subs	r3, r0, #1
 80020fc:	4198      	sbcs	r0, r3
 80020fe:	e7ea      	b.n	80020d6 <__eqdf2+0x56>
 8002100:	2000      	movs	r0, #0
 8002102:	e7e8      	b.n	80020d6 <__eqdf2+0x56>
 8002104:	000007ff 	.word	0x000007ff

08002108 <__gedf2>:
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210a:	4657      	mov	r7, sl
 800210c:	464e      	mov	r6, r9
 800210e:	4645      	mov	r5, r8
 8002110:	46de      	mov	lr, fp
 8002112:	b5e0      	push	{r5, r6, r7, lr}
 8002114:	000d      	movs	r5, r1
 8002116:	030e      	lsls	r6, r1, #12
 8002118:	0049      	lsls	r1, r1, #1
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	468a      	mov	sl, r1
 800211e:	0fdf      	lsrs	r7, r3, #31
 8002120:	0fe9      	lsrs	r1, r5, #31
 8002122:	46bc      	mov	ip, r7
 8002124:	b083      	sub	sp, #12
 8002126:	4f2f      	ldr	r7, [pc, #188]	@ (80021e4 <__gedf2+0xdc>)
 8002128:	0004      	movs	r4, r0
 800212a:	4680      	mov	r8, r0
 800212c:	9101      	str	r1, [sp, #4]
 800212e:	0058      	lsls	r0, r3, #1
 8002130:	0319      	lsls	r1, r3, #12
 8002132:	4691      	mov	r9, r2
 8002134:	0b36      	lsrs	r6, r6, #12
 8002136:	0b09      	lsrs	r1, r1, #12
 8002138:	0d40      	lsrs	r0, r0, #21
 800213a:	45ba      	cmp	sl, r7
 800213c:	d01d      	beq.n	800217a <__gedf2+0x72>
 800213e:	42b8      	cmp	r0, r7
 8002140:	d00d      	beq.n	800215e <__gedf2+0x56>
 8002142:	4657      	mov	r7, sl
 8002144:	2f00      	cmp	r7, #0
 8002146:	d12a      	bne.n	800219e <__gedf2+0x96>
 8002148:	4334      	orrs	r4, r6
 800214a:	2800      	cmp	r0, #0
 800214c:	d124      	bne.n	8002198 <__gedf2+0x90>
 800214e:	430a      	orrs	r2, r1
 8002150:	d036      	beq.n	80021c0 <__gedf2+0xb8>
 8002152:	2c00      	cmp	r4, #0
 8002154:	d141      	bne.n	80021da <__gedf2+0xd2>
 8002156:	4663      	mov	r3, ip
 8002158:	0058      	lsls	r0, r3, #1
 800215a:	3801      	subs	r0, #1
 800215c:	e015      	b.n	800218a <__gedf2+0x82>
 800215e:	4311      	orrs	r1, r2
 8002160:	d138      	bne.n	80021d4 <__gedf2+0xcc>
 8002162:	4653      	mov	r3, sl
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <__gedf2+0x64>
 8002168:	4326      	orrs	r6, r4
 800216a:	d0f4      	beq.n	8002156 <__gedf2+0x4e>
 800216c:	9b01      	ldr	r3, [sp, #4]
 800216e:	4563      	cmp	r3, ip
 8002170:	d107      	bne.n	8002182 <__gedf2+0x7a>
 8002172:	9b01      	ldr	r3, [sp, #4]
 8002174:	0058      	lsls	r0, r3, #1
 8002176:	3801      	subs	r0, #1
 8002178:	e007      	b.n	800218a <__gedf2+0x82>
 800217a:	4326      	orrs	r6, r4
 800217c:	d12a      	bne.n	80021d4 <__gedf2+0xcc>
 800217e:	4550      	cmp	r0, sl
 8002180:	d021      	beq.n	80021c6 <__gedf2+0xbe>
 8002182:	2001      	movs	r0, #1
 8002184:	9b01      	ldr	r3, [sp, #4]
 8002186:	425f      	negs	r7, r3
 8002188:	4338      	orrs	r0, r7
 800218a:	b003      	add	sp, #12
 800218c:	bcf0      	pop	{r4, r5, r6, r7}
 800218e:	46bb      	mov	fp, r7
 8002190:	46b2      	mov	sl, r6
 8002192:	46a9      	mov	r9, r5
 8002194:	46a0      	mov	r8, r4
 8002196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002198:	2c00      	cmp	r4, #0
 800219a:	d0dc      	beq.n	8002156 <__gedf2+0x4e>
 800219c:	e7e6      	b.n	800216c <__gedf2+0x64>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d0ef      	beq.n	8002182 <__gedf2+0x7a>
 80021a2:	9b01      	ldr	r3, [sp, #4]
 80021a4:	4563      	cmp	r3, ip
 80021a6:	d1ec      	bne.n	8002182 <__gedf2+0x7a>
 80021a8:	4582      	cmp	sl, r0
 80021aa:	dcea      	bgt.n	8002182 <__gedf2+0x7a>
 80021ac:	dbe1      	blt.n	8002172 <__gedf2+0x6a>
 80021ae:	428e      	cmp	r6, r1
 80021b0:	d8e7      	bhi.n	8002182 <__gedf2+0x7a>
 80021b2:	d1de      	bne.n	8002172 <__gedf2+0x6a>
 80021b4:	45c8      	cmp	r8, r9
 80021b6:	d8e4      	bhi.n	8002182 <__gedf2+0x7a>
 80021b8:	2000      	movs	r0, #0
 80021ba:	45c8      	cmp	r8, r9
 80021bc:	d2e5      	bcs.n	800218a <__gedf2+0x82>
 80021be:	e7d8      	b.n	8002172 <__gedf2+0x6a>
 80021c0:	2c00      	cmp	r4, #0
 80021c2:	d0e2      	beq.n	800218a <__gedf2+0x82>
 80021c4:	e7dd      	b.n	8002182 <__gedf2+0x7a>
 80021c6:	4311      	orrs	r1, r2
 80021c8:	d104      	bne.n	80021d4 <__gedf2+0xcc>
 80021ca:	9b01      	ldr	r3, [sp, #4]
 80021cc:	4563      	cmp	r3, ip
 80021ce:	d1d8      	bne.n	8002182 <__gedf2+0x7a>
 80021d0:	2000      	movs	r0, #0
 80021d2:	e7da      	b.n	800218a <__gedf2+0x82>
 80021d4:	2002      	movs	r0, #2
 80021d6:	4240      	negs	r0, r0
 80021d8:	e7d7      	b.n	800218a <__gedf2+0x82>
 80021da:	9b01      	ldr	r3, [sp, #4]
 80021dc:	4563      	cmp	r3, ip
 80021de:	d0e6      	beq.n	80021ae <__gedf2+0xa6>
 80021e0:	e7cf      	b.n	8002182 <__gedf2+0x7a>
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff

080021e8 <__ledf2>:
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	4657      	mov	r7, sl
 80021ec:	464e      	mov	r6, r9
 80021ee:	4645      	mov	r5, r8
 80021f0:	46de      	mov	lr, fp
 80021f2:	b5e0      	push	{r5, r6, r7, lr}
 80021f4:	000d      	movs	r5, r1
 80021f6:	030e      	lsls	r6, r1, #12
 80021f8:	0049      	lsls	r1, r1, #1
 80021fa:	0d49      	lsrs	r1, r1, #21
 80021fc:	468a      	mov	sl, r1
 80021fe:	0fdf      	lsrs	r7, r3, #31
 8002200:	0fe9      	lsrs	r1, r5, #31
 8002202:	46bc      	mov	ip, r7
 8002204:	b083      	sub	sp, #12
 8002206:	4f2e      	ldr	r7, [pc, #184]	@ (80022c0 <__ledf2+0xd8>)
 8002208:	0004      	movs	r4, r0
 800220a:	4680      	mov	r8, r0
 800220c:	9101      	str	r1, [sp, #4]
 800220e:	0058      	lsls	r0, r3, #1
 8002210:	0319      	lsls	r1, r3, #12
 8002212:	4691      	mov	r9, r2
 8002214:	0b36      	lsrs	r6, r6, #12
 8002216:	0b09      	lsrs	r1, r1, #12
 8002218:	0d40      	lsrs	r0, r0, #21
 800221a:	45ba      	cmp	sl, r7
 800221c:	d01e      	beq.n	800225c <__ledf2+0x74>
 800221e:	42b8      	cmp	r0, r7
 8002220:	d00d      	beq.n	800223e <__ledf2+0x56>
 8002222:	4657      	mov	r7, sl
 8002224:	2f00      	cmp	r7, #0
 8002226:	d127      	bne.n	8002278 <__ledf2+0x90>
 8002228:	4334      	orrs	r4, r6
 800222a:	2800      	cmp	r0, #0
 800222c:	d133      	bne.n	8002296 <__ledf2+0xae>
 800222e:	430a      	orrs	r2, r1
 8002230:	d034      	beq.n	800229c <__ledf2+0xb4>
 8002232:	2c00      	cmp	r4, #0
 8002234:	d140      	bne.n	80022b8 <__ledf2+0xd0>
 8002236:	4663      	mov	r3, ip
 8002238:	0058      	lsls	r0, r3, #1
 800223a:	3801      	subs	r0, #1
 800223c:	e015      	b.n	800226a <__ledf2+0x82>
 800223e:	4311      	orrs	r1, r2
 8002240:	d112      	bne.n	8002268 <__ledf2+0x80>
 8002242:	4653      	mov	r3, sl
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <__ledf2+0x64>
 8002248:	4326      	orrs	r6, r4
 800224a:	d0f4      	beq.n	8002236 <__ledf2+0x4e>
 800224c:	9b01      	ldr	r3, [sp, #4]
 800224e:	4563      	cmp	r3, ip
 8002250:	d01d      	beq.n	800228e <__ledf2+0xa6>
 8002252:	2001      	movs	r0, #1
 8002254:	9b01      	ldr	r3, [sp, #4]
 8002256:	425f      	negs	r7, r3
 8002258:	4338      	orrs	r0, r7
 800225a:	e006      	b.n	800226a <__ledf2+0x82>
 800225c:	4326      	orrs	r6, r4
 800225e:	d103      	bne.n	8002268 <__ledf2+0x80>
 8002260:	4550      	cmp	r0, sl
 8002262:	d1f6      	bne.n	8002252 <__ledf2+0x6a>
 8002264:	4311      	orrs	r1, r2
 8002266:	d01c      	beq.n	80022a2 <__ledf2+0xba>
 8002268:	2002      	movs	r0, #2
 800226a:	b003      	add	sp, #12
 800226c:	bcf0      	pop	{r4, r5, r6, r7}
 800226e:	46bb      	mov	fp, r7
 8002270:	46b2      	mov	sl, r6
 8002272:	46a9      	mov	r9, r5
 8002274:	46a0      	mov	r8, r4
 8002276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002278:	2800      	cmp	r0, #0
 800227a:	d0ea      	beq.n	8002252 <__ledf2+0x6a>
 800227c:	9b01      	ldr	r3, [sp, #4]
 800227e:	4563      	cmp	r3, ip
 8002280:	d1e7      	bne.n	8002252 <__ledf2+0x6a>
 8002282:	4582      	cmp	sl, r0
 8002284:	dce5      	bgt.n	8002252 <__ledf2+0x6a>
 8002286:	db02      	blt.n	800228e <__ledf2+0xa6>
 8002288:	428e      	cmp	r6, r1
 800228a:	d8e2      	bhi.n	8002252 <__ledf2+0x6a>
 800228c:	d00e      	beq.n	80022ac <__ledf2+0xc4>
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	0058      	lsls	r0, r3, #1
 8002292:	3801      	subs	r0, #1
 8002294:	e7e9      	b.n	800226a <__ledf2+0x82>
 8002296:	2c00      	cmp	r4, #0
 8002298:	d0cd      	beq.n	8002236 <__ledf2+0x4e>
 800229a:	e7d7      	b.n	800224c <__ledf2+0x64>
 800229c:	2c00      	cmp	r4, #0
 800229e:	d0e4      	beq.n	800226a <__ledf2+0x82>
 80022a0:	e7d7      	b.n	8002252 <__ledf2+0x6a>
 80022a2:	9b01      	ldr	r3, [sp, #4]
 80022a4:	2000      	movs	r0, #0
 80022a6:	4563      	cmp	r3, ip
 80022a8:	d0df      	beq.n	800226a <__ledf2+0x82>
 80022aa:	e7d2      	b.n	8002252 <__ledf2+0x6a>
 80022ac:	45c8      	cmp	r8, r9
 80022ae:	d8d0      	bhi.n	8002252 <__ledf2+0x6a>
 80022b0:	2000      	movs	r0, #0
 80022b2:	45c8      	cmp	r8, r9
 80022b4:	d2d9      	bcs.n	800226a <__ledf2+0x82>
 80022b6:	e7ea      	b.n	800228e <__ledf2+0xa6>
 80022b8:	9b01      	ldr	r3, [sp, #4]
 80022ba:	4563      	cmp	r3, ip
 80022bc:	d0e4      	beq.n	8002288 <__ledf2+0xa0>
 80022be:	e7c8      	b.n	8002252 <__ledf2+0x6a>
 80022c0:	000007ff 	.word	0x000007ff

080022c4 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 80022c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c6:	b09b      	sub	sp, #108	@ 0x6c
 80022c8:	af00      	add	r7, sp, #0
    // lcd_display_str(APP_NAME);

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 80022ca:	f00a fd2f 	bl	800cd2c <reset_DW1000>
    port_set_dw1000_slowrate();
 80022ce:	f00a fd99 	bl	800ce04 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 80022d2:	2001      	movs	r0, #1
 80022d4:	f009 fbb8 	bl	800ba48 <dwt_initialise>
 80022d8:	0003      	movs	r3, r0
 80022da:	3301      	adds	r3, #1
 80022dc:	d101      	bne.n	80022e2 <dw_main+0x1e>
    {
        // lcd_display_str("INIT FAILED");
        while (1)
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	e7fd      	b.n	80022de <dw_main+0x1a>
        { };
    }
//    port_set_dw1000_fastrate();

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 80022e2:	4bdb      	ldr	r3, [pc, #876]	@ (8002650 <dw_main+0x38c>)
 80022e4:	0018      	movs	r0, r3
 80022e6:	f009 fd0d 	bl	800bd04 <dwt_configure>

    dwt_setdblrxbuffmode(0);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f00a f938 	bl	800c560 <dwt_setdblrxbuffmode>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 80022f0:	4bd8      	ldr	r3, [pc, #864]	@ (8002654 <dw_main+0x390>)
 80022f2:	0018      	movs	r0, r3
 80022f4:	f009 feaa 	bl	800c04c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 80022f8:	4bd6      	ldr	r3, [pc, #856]	@ (8002654 <dw_main+0x390>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f009 feba 	bl	800c074 <dwt_settxantennadelay>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 8002300:	2000      	movs	r0, #0
 8002302:	f00a fb31 	bl	800c968 <dwt_setrxtimeout>

        int i;

        for (i = 0 ; i < RX_BUF_LEN; i++ )
 8002306:	2300      	movs	r3, #0
 8002308:	667b      	str	r3, [r7, #100]	@ 0x64
 800230a:	e007      	b.n	800231c <dw_main+0x58>
        {
            rx_buffer[i] = 0;
 800230c:	4ad2      	ldr	r2, [pc, #840]	@ (8002658 <dw_main+0x394>)
 800230e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002310:	18d3      	adds	r3, r2, r3
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < RX_BUF_LEN; i++ )
 8002316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002318:	3301      	adds	r3, #1
 800231a:	667b      	str	r3, [r7, #100]	@ 0x64
 800231c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800231e:	2b17      	cmp	r3, #23
 8002320:	ddf4      	ble.n	800230c <dw_main+0x48>
        }

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002322:	2000      	movs	r0, #0
 8002324:	f00a fad8 	bl	800c8d8 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	2100      	movs	r1, #0
 800232c:	200f      	movs	r0, #15
 800232e:	f009 fff1 	bl	800c314 <dwt_read32bitoffsetreg>
 8002332:	0002      	movs	r2, r0
 8002334:	4bc9      	ldr	r3, [pc, #804]	@ (800265c <dw_main+0x398>)
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	4bc8      	ldr	r3, [pc, #800]	@ (800265c <dw_main+0x398>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4ac8      	ldr	r2, [pc, #800]	@ (8002660 <dw_main+0x39c>)
 800233e:	4013      	ands	r3, r2
 8002340:	d0f3      	beq.n	800232a <dw_main+0x66>
        // while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
        { };

         uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002342:	4bc6      	ldr	r3, [pc, #792]	@ (800265c <dw_main+0x398>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4ac6      	ldr	r2, [pc, #792]	@ (8002660 <dw_main+0x39c>)
 8002348:	4013      	ands	r3, r2
 800234a:	663b      	str	r3, [r7, #96]	@ 0x60
//         CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

        if (status_reg & SYS_STATUS_RXFCG)
 800234c:	4bc3      	ldr	r3, [pc, #780]	@ (800265c <dw_main+0x398>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	01db      	lsls	r3, r3, #7
 8002354:	4013      	ands	r3, r2
 8002356:	d100      	bne.n	800235a <dw_main+0x96>
 8002358:	e16e      	b.n	8002638 <dw_main+0x374>
        {
            uint32 frame_len;

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 800235a:	2100      	movs	r1, #0
 800235c:	2010      	movs	r0, #16
 800235e:	f009 ffd9 	bl	800c314 <dwt_read32bitoffsetreg>
 8002362:	0003      	movs	r3, r0
 8002364:	059b      	lsls	r3, r3, #22
 8002366:	0d9b      	lsrs	r3, r3, #22
 8002368:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (frame_len <= RX_BUFFER_LEN)
 800236a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	429a      	cmp	r2, r3
 8002372:	d806      	bhi.n	8002382 <dw_main+0xbe>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002376:	b299      	uxth	r1, r3
 8002378:	4bb7      	ldr	r3, [pc, #732]	@ (8002658 <dw_main+0x394>)
 800237a:	2200      	movs	r2, #0
 800237c:	0018      	movs	r0, r3
 800237e:	f009 fed7 	bl	800c130 <dwt_readrxdata>
            }

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	01db      	lsls	r3, r3, #7
 8002386:	001a      	movs	r2, r3
 8002388:	2100      	movs	r1, #0
 800238a:	200f      	movs	r0, #15
 800238c:	f00a f853 	bl	800c436 <dwt_write32bitoffsetreg>
            
            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002390:	4bb1      	ldr	r3, [pc, #708]	@ (8002658 <dw_main+0x394>)
 8002392:	2200      	movs	r2, #0
 8002394:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8002396:	49b3      	ldr	r1, [pc, #716]	@ (8002664 <dw_main+0x3a0>)
 8002398:	4baf      	ldr	r3, [pc, #700]	@ (8002658 <dw_main+0x394>)
 800239a:	220a      	movs	r2, #10
 800239c:	0018      	movs	r0, r3
 800239e:	f00a fda9 	bl	800cef4 <memcmp>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d1ac      	bne.n	8002300 <dw_main+0x3c>

                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                 poll_rx_ts = get_rx_timestamp_u64();
 80023a6:	f000 f9c1 	bl	800272c <get_rx_timestamp_u64>
 80023aa:	0002      	movs	r2, r0
 80023ac:	000b      	movs	r3, r1
 80023ae:	49ae      	ldr	r1, [pc, #696]	@ (8002668 <dw_main+0x3a4>)
 80023b0:	600a      	str	r2, [r1, #0]
 80023b2:	604b      	str	r3, [r1, #4]

//                 CDC_Transmit_FS((uint8*) &poll_rx_ts, sizeof(poll_rx_ts));

                /* Set send time for response. See NOTE 9 below. */
                 resp_tx_time = (poll_rx_ts + (uint64)(POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80023b4:	4bac      	ldr	r3, [pc, #688]	@ (8002668 <dw_main+0x3a4>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	48ac      	ldr	r0, [pc, #688]	@ (800266c <dw_main+0x3a8>)
 80023bc:	2100      	movs	r1, #0
 80023be:	1812      	adds	r2, r2, r0
 80023c0:	414b      	adcs	r3, r1
 80023c2:	0619      	lsls	r1, r3, #24
 80023c4:	0a14      	lsrs	r4, r2, #8
 80023c6:	430c      	orrs	r4, r1
 80023c8:	0a1d      	lsrs	r5, r3, #8
 80023ca:	0023      	movs	r3, r4
 80023cc:	65bb      	str	r3, [r7, #88]	@ 0x58
                 dwt_setdelayedtrxtime(resp_tx_time);
 80023ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023d0:	0018      	movs	r0, r3
 80023d2:	f00a f9c2 	bl	800c75a <dwt_setdelayedtrxtime>

                // CDC_Transmit_FS((uint8*)&resp_tx_time, sizeof(resp_tx_time));

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                 dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 80023d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002670 <dw_main+0x3ac>)
 80023d8:	0018      	movs	r0, r3
 80023da:	f00a f8f3 	bl	800c5c4 <dwt_setrxaftertxdelay>
                 dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 80023de:	4ba5      	ldr	r3, [pc, #660]	@ (8002674 <dw_main+0x3b0>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f00a fac1 	bl	800c968 <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80023e6:	4ba4      	ldr	r3, [pc, #656]	@ (8002678 <dw_main+0x3b4>)
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	4ba4      	ldr	r3, [pc, #656]	@ (800267c <dw_main+0x3b8>)
 80023ec:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 80023ee:	4ba3      	ldr	r3, [pc, #652]	@ (800267c <dw_main+0x3b8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	0019      	movs	r1, r3
 80023f4:	200f      	movs	r0, #15
 80023f6:	f009 fe4e 	bl	800c096 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 80023fa:	2201      	movs	r2, #1
 80023fc:	2100      	movs	r1, #0
 80023fe:	200f      	movs	r0, #15
 8002400:	f009 fe72 	bl	800c0e8 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002404:	2003      	movs	r0, #3
 8002406:	f00a f9b7 	bl	800c778 <dwt_starttx>
 800240a:	0003      	movs	r3, r0
 800240c:	657b      	str	r3, [r7, #84]	@ 0x54

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 800240e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002410:	3301      	adds	r3, #1
 8002412:	d100      	bne.n	8002416 <dw_main+0x152>
 8002414:	e119      	b.n	800264a <dw_main+0x386>




                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	2100      	movs	r1, #0
 800241a:	200f      	movs	r0, #15
 800241c:	f009 ff7a 	bl	800c314 <dwt_read32bitoffsetreg>
 8002420:	0002      	movs	r2, r0
 8002422:	4b8e      	ldr	r3, [pc, #568]	@ (800265c <dw_main+0x398>)
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	4b8d      	ldr	r3, [pc, #564]	@ (800265c <dw_main+0x398>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a8d      	ldr	r2, [pc, #564]	@ (8002660 <dw_main+0x39c>)
 800242c:	4013      	ands	r3, r2
 800242e:	d0f3      	beq.n	8002418 <dw_main+0x154>
                { };
                uint32 error = status_reg & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002430:	4b8a      	ldr	r3, [pc, #552]	@ (800265c <dw_main+0x398>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a8a      	ldr	r2, [pc, #552]	@ (8002660 <dw_main+0x39c>)
 8002436:	4013      	ands	r3, r2
 8002438:	653b      	str	r3, [r7, #80]	@ 0x50
//                CDC_Transmit_FS((uint8 *) &error, sizeof(status_reg));

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 800243a:	4b8f      	ldr	r3, [pc, #572]	@ (8002678 <dw_main+0x3b4>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b8d      	ldr	r3, [pc, #564]	@ (8002678 <dw_main+0x3b4>)
 8002444:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 8002446:	4b85      	ldr	r3, [pc, #532]	@ (800265c <dw_main+0x398>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	01db      	lsls	r3, r3, #7
 800244e:	4013      	ands	r3, r2
 8002450:	d100      	bne.n	8002454 <dw_main+0x190>
 8002452:	e0e8      	b.n	8002626 <dw_main+0x362>
                {
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002454:	2381      	movs	r3, #129	@ 0x81
 8002456:	01db      	lsls	r3, r3, #7
 8002458:	001a      	movs	r2, r3
 800245a:	2100      	movs	r1, #0
 800245c:	200f      	movs	r0, #15
 800245e:	f009 ffea 	bl	800c436 <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002462:	2100      	movs	r1, #0
 8002464:	2010      	movs	r0, #16
 8002466:	f009 ff55 	bl	800c314 <dwt_read32bitoffsetreg>
 800246a:	0003      	movs	r3, r0
 800246c:	227f      	movs	r2, #127	@ 0x7f
 800246e:	4013      	ands	r3, r2
 8002470:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    if (frame_len <= RX_BUF_LEN)
 8002472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002474:	2b18      	cmp	r3, #24
 8002476:	d806      	bhi.n	8002486 <dw_main+0x1c2>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8002478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800247a:	b299      	uxth	r1, r3
 800247c:	4b76      	ldr	r3, [pc, #472]	@ (8002658 <dw_main+0x394>)
 800247e:	2200      	movs	r2, #0
 8002480:	0018      	movs	r0, r3
 8002482:	f009 fe55 	bl	800c130 <dwt_readrxdata>
                    }

                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002486:	4b74      	ldr	r3, [pc, #464]	@ (8002658 <dw_main+0x394>)
 8002488:	2200      	movs	r2, #0
 800248a:	709a      	strb	r2, [r3, #2]
//                    CDC_Transmit_FS(rx_buffer, ALL_MSG_COMMON_LEN);
//                    CDC_Transmit_FS(rx_final_msg, ALL_MSG_COMMON_LEN);
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 800248c:	497c      	ldr	r1, [pc, #496]	@ (8002680 <dw_main+0x3bc>)
 800248e:	4b72      	ldr	r3, [pc, #456]	@ (8002658 <dw_main+0x394>)
 8002490:	220a      	movs	r2, #10
 8002492:	0018      	movs	r0, r3
 8002494:	f00a fd2e 	bl	800cef4 <memcmp>
 8002498:	1e03      	subs	r3, r0, #0
 800249a:	d000      	beq.n	800249e <dw_main+0x1da>
 800249c:	e730      	b.n	8002300 <dw_main+0x3c>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 800249e:	f000 f90b 	bl	80026b8 <get_tx_timestamp_u64>
 80024a2:	0002      	movs	r2, r0
 80024a4:	000b      	movs	r3, r1
 80024a6:	4977      	ldr	r1, [pc, #476]	@ (8002684 <dw_main+0x3c0>)
 80024a8:	600a      	str	r2, [r1, #0]
 80024aa:	604b      	str	r3, [r1, #4]
                        final_rx_ts = get_rx_timestamp_u64();
 80024ac:	f000 f93e 	bl	800272c <get_rx_timestamp_u64>
 80024b0:	0002      	movs	r2, r0
 80024b2:	000b      	movs	r3, r1
 80024b4:	4974      	ldr	r1, [pc, #464]	@ (8002688 <dw_main+0x3c4>)
 80024b6:	600a      	str	r2, [r1, #0]
 80024b8:	604b      	str	r3, [r1, #4]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 80024ba:	230c      	movs	r3, #12
 80024bc:	2608      	movs	r6, #8
 80024be:	199b      	adds	r3, r3, r6
 80024c0:	19da      	adds	r2, r3, r7
 80024c2:	4b72      	ldr	r3, [pc, #456]	@ (800268c <dw_main+0x3c8>)
 80024c4:	0011      	movs	r1, r2
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 f96a 	bl	80027a0 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 80024cc:	2308      	movs	r3, #8
 80024ce:	199b      	adds	r3, r3, r6
 80024d0:	19da      	adds	r2, r3, r7
 80024d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002690 <dw_main+0x3cc>)
 80024d4:	0011      	movs	r1, r2
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f962 	bl	80027a0 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 80024dc:	230c      	movs	r3, #12
 80024de:	18fa      	adds	r2, r7, r3
 80024e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002694 <dw_main+0x3d0>)
 80024e2:	0011      	movs	r1, r2
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 f95b 	bl	80027a0 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 80024ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002668 <dw_main+0x3a4>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0013      	movs	r3, r2
 80024f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 80024f4:	4b63      	ldr	r3, [pc, #396]	@ (8002684 <dw_main+0x3c0>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0013      	movs	r3, r2
 80024fc:	64bb      	str	r3, [r7, #72]	@ 0x48
                        final_rx_ts_32 = (uint32)final_rx_ts;
 80024fe:	4b62      	ldr	r3, [pc, #392]	@ (8002688 <dw_main+0x3c4>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0013      	movs	r3, r2
 8002506:	647b      	str	r3, [r7, #68]	@ 0x44
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	0018      	movs	r0, r3
 8002510:	f7ff fd36 	bl	8001f80 <__aeabi_ui2d>
 8002514:	0002      	movs	r2, r0
 8002516:	000b      	movs	r3, r1
 8002518:	63ba      	str	r2, [r7, #56]	@ 0x38
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 800251c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800251e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff fd2c 	bl	8001f80 <__aeabi_ui2d>
 8002528:	0002      	movs	r2, r0
 800252a:	000b      	movs	r3, r1
 800252c:	633a      	str	r2, [r7, #48]	@ 0x30
 800252e:	637b      	str	r3, [r7, #52]	@ 0x34
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	0018      	movs	r0, r3
 8002538:	f7ff fd22 	bl	8001f80 <__aeabi_ui2d>
 800253c:	0002      	movs	r2, r0
 800253e:	000b      	movs	r3, r1
 8002540:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8002544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	0018      	movs	r0, r3
 800254c:	f7ff fd18 	bl	8001f80 <__aeabi_ui2d>
 8002550:	0002      	movs	r2, r0
 8002552:	000b      	movs	r3, r1
 8002554:	623a      	str	r2, [r7, #32]
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8002558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800255a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800255c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800255e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002560:	f7fe fdb4 	bl	80010cc <__aeabi_dmul>
 8002564:	0002      	movs	r2, r0
 8002566:	000b      	movs	r3, r1
 8002568:	603a      	str	r2, [r7, #0]
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002574:	f7fe fdaa 	bl	80010cc <__aeabi_dmul>
 8002578:	0002      	movs	r2, r0
 800257a:	000b      	movs	r3, r1
 800257c:	6838      	ldr	r0, [r7, #0]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f7ff f88a 	bl	8001698 <__aeabi_dsub>
 8002584:	0002      	movs	r2, r0
 8002586:	000b      	movs	r3, r1
 8002588:	603a      	str	r2, [r7, #0]
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800258e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002590:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002594:	f7fd febc 	bl	8000310 <__aeabi_dadd>
 8002598:	0002      	movs	r2, r0
 800259a:	000b      	movs	r3, r1
 800259c:	0010      	movs	r0, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	f7fd feb4 	bl	8000310 <__aeabi_dadd>
 80025a8:	0002      	movs	r2, r0
 80025aa:	000b      	movs	r3, r1
 80025ac:	0010      	movs	r0, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	6a3a      	ldr	r2, [r7, #32]
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	f7fd feac 	bl	8000310 <__aeabi_dadd>
 80025b8:	0002      	movs	r2, r0
 80025ba:	000b      	movs	r3, r1
 80025bc:	6838      	ldr	r0, [r7, #0]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	f7fe fa6c 	bl	8000a9c <__aeabi_ddiv>
 80025c4:	0002      	movs	r2, r0
 80025c6:	000b      	movs	r3, r1
 80025c8:	0010      	movs	r0, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	f7fd fe50 	bl	8000270 <__aeabi_d2lz>
 80025d0:	0002      	movs	r2, r0
 80025d2:	000b      	movs	r3, r1
 80025d4:	61ba      	str	r2, [r7, #24]
 80025d6:	61fb      	str	r3, [r7, #28]

                        tof = tof_dtu * DWT_TIME_UNITS;
 80025d8:	69b8      	ldr	r0, [r7, #24]
 80025da:	69f9      	ldr	r1, [r7, #28]
 80025dc:	f7fd fe82 	bl	80002e4 <__aeabi_l2d>
 80025e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002698 <dw_main+0x3d4>)
 80025e2:	4b2e      	ldr	r3, [pc, #184]	@ (800269c <dw_main+0x3d8>)
 80025e4:	f7fe fd72 	bl	80010cc <__aeabi_dmul>
 80025e8:	0002      	movs	r2, r0
 80025ea:	000b      	movs	r3, r1
 80025ec:	492c      	ldr	r1, [pc, #176]	@ (80026a0 <dw_main+0x3dc>)
 80025ee:	600a      	str	r2, [r1, #0]
 80025f0:	604b      	str	r3, [r1, #4]
                        distance = tof * SPEED_OF_LIGHT;
 80025f2:	4b2b      	ldr	r3, [pc, #172]	@ (80026a0 <dw_main+0x3dc>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	2298      	movs	r2, #152	@ 0x98
 80025fa:	0552      	lsls	r2, r2, #21
 80025fc:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <dw_main+0x3e0>)
 80025fe:	f7fe fd65 	bl	80010cc <__aeabi_dmul>
 8002602:	0002      	movs	r2, r0
 8002604:	000b      	movs	r3, r1
 8002606:	4928      	ldr	r1, [pc, #160]	@ (80026a8 <dw_main+0x3e4>)
 8002608:	600a      	str	r2, [r1, #0]
 800260a:	604b      	str	r3, [r1, #4]

                        /* Display computed distance on LCD. */
                         sprintf(dist_str, "DIST: %3.2f m", distance);
 800260c:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <dw_main+0x3e4>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4926      	ldr	r1, [pc, #152]	@ (80026ac <dw_main+0x3e8>)
 8002614:	4826      	ldr	r0, [pc, #152]	@ (80026b0 <dw_main+0x3ec>)
 8002616:	f00a fc4b 	bl	800ceb0 <siprintf>
                        // lcd_display_str(dist_str);

                         CDC_Transmit_FS((uint8_t*) dist_str, sizeof(dist_str));
 800261a:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <dw_main+0x3ec>)
 800261c:	2110      	movs	r1, #16
 800261e:	0018      	movs	r0, r3
 8002620:	f008 fd58 	bl	800b0d4 <CDC_Transmit_FS>
 8002624:	e66c      	b.n	8002300 <dw_main+0x3c>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002626:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <dw_main+0x3f0>)
 8002628:	001a      	movs	r2, r3
 800262a:	2100      	movs	r1, #0
 800262c:	200f      	movs	r0, #15
 800262e:	f009 ff02 	bl	800c436 <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 8002632:	f00a f9e9 	bl	800ca08 <dwt_rxreset>
 8002636:	e663      	b.n	8002300 <dw_main+0x3c>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002638:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <dw_main+0x3f0>)
 800263a:	001a      	movs	r2, r3
 800263c:	2100      	movs	r1, #0
 800263e:	200f      	movs	r0, #15
 8002640:	f009 fef9 	bl	800c436 <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 8002644:	f00a f9e0 	bl	800ca08 <dwt_rxreset>
 8002648:	e65a      	b.n	8002300 <dw_main+0x3c>
                    continue;
 800264a:	46c0      	nop			@ (mov r8, r8)
    {
 800264c:	e658      	b.n	8002300 <dw_main+0x3c>
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	20000000 	.word	0x20000000
 8002654:	00004034 	.word	0x00004034
 8002658:	20000230 	.word	0x20000230
 800265c:	20000248 	.word	0x20000248
 8002660:	2427d000 	.word	0x2427d000
 8002664:	2000000c 	.word	0x2000000c
 8002668:	20000250 	.word	0x20000250
 800266c:	17700000 	.word	0x17700000
 8002670:	00000bb8 	.word	0x00000bb8
 8002674:	00002710 	.word	0x00002710
 8002678:	2000022c 	.word	0x2000022c
 800267c:	20000018 	.word	0x20000018
 8002680:	20000028 	.word	0x20000028
 8002684:	20000258 	.word	0x20000258
 8002688:	20000260 	.word	0x20000260
 800268c:	2000023a 	.word	0x2000023a
 8002690:	2000023e 	.word	0x2000023e
 8002694:	20000242 	.word	0x20000242
 8002698:	3bce48fa 	.word	0x3bce48fa
 800269c:	3db13518 	.word	0x3db13518
 80026a0:	20000268 	.word	0x20000268
 80026a4:	41b1dd19 	.word	0x41b1dd19
 80026a8:	20000270 	.word	0x20000270
 80026ac:	0800d81c 	.word	0x0800d81c
 80026b0:	20000278 	.word	0x20000278
 80026b4:	24279000 	.word	0x24279000

080026b8 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80026be:	2200      	movs	r2, #0
 80026c0:	2300      	movs	r3, #0
 80026c2:	623a      	str	r2, [r7, #32]
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readtxtimestamp(ts_tab);
 80026c6:	2314      	movs	r3, #20
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	0018      	movs	r0, r3
 80026cc:	f009 fd49 	bl	800c162 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80026d0:	2304      	movs	r3, #4
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	e020      	b.n	8002718 <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	0e1b      	lsrs	r3, r3, #24
 80026da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026dc:	0215      	lsls	r5, r2, #8
 80026de:	431d      	orrs	r5, r3
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	021c      	lsls	r4, r3, #8
 80026e4:	623c      	str	r4, [r7, #32]
 80026e6:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 80026e8:	2314      	movs	r3, #20
 80026ea:	18fa      	adds	r2, r7, r3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	18d3      	adds	r3, r2, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	0008      	movs	r0, r1
 8002700:	4318      	orrs	r0, r3
 8002702:	6038      	str	r0, [r7, #0]
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	431a      	orrs	r2, r3
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	623a      	str	r2, [r7, #32]
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b01      	subs	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	dadb      	bge.n	80026d6 <get_tx_timestamp_u64+0x1e>
    }
    return ts;
 800271e:	6a3a      	ldr	r2, [r7, #32]
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002722:	0010      	movs	r0, r2
 8002724:	0019      	movs	r1, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b00a      	add	sp, #40	@ 0x28
 800272a:	bdb0      	pop	{r4, r5, r7, pc}

0800272c <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002732:	2200      	movs	r2, #0
 8002734:	2300      	movs	r3, #0
 8002736:	623a      	str	r2, [r7, #32]
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
    int i;
    dwt_readrxtimestamp(ts_tab);
 800273a:	2314      	movs	r3, #20
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	0018      	movs	r0, r3
 8002740:	f009 fd1d 	bl	800c17e <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8002744:	2304      	movs	r3, #4
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	e020      	b.n	800278c <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	0e1b      	lsrs	r3, r3, #24
 800274e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002750:	0215      	lsls	r5, r2, #8
 8002752:	431d      	orrs	r5, r3
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	021c      	lsls	r4, r3, #8
 8002758:	623c      	str	r4, [r7, #32]
 800275a:	627d      	str	r5, [r7, #36]	@ 0x24
        ts |= ts_tab[i];
 800275c:	2314      	movs	r3, #20
 800275e:	18fa      	adds	r2, r7, r3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	18d3      	adds	r3, r2, r3
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	0008      	movs	r0, r1
 8002774:	4318      	orrs	r0, r3
 8002776:	6038      	str	r0, [r7, #0]
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	431a      	orrs	r2, r3
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	623a      	str	r2, [r7, #32]
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 4; i >= 0; i--)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b01      	subs	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	dadb      	bge.n	800274a <get_rx_timestamp_u64+0x1e>
    }
    return ts;
 8002792:	6a3a      	ldr	r2, [r7, #32]
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002796:	0010      	movs	r0, r2
 8002798:	0019      	movs	r1, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b00a      	add	sp, #40	@ 0x28
 800279e:	bdb0      	pop	{r4, r5, r7, pc}

080027a0 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e010      	b.n	80027d8 <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	188a      	adds	r2, r1, r2
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	0011      	movs	r1, r2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	00d2      	lsls	r2, r2, #3
 80027c8:	4091      	lsls	r1, r2
 80027ca:	000a      	movs	r2, r1
 80027cc:	189a      	adds	r2, r3, r2
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	ddeb      	ble.n	80027b6 <final_msg_get_ts+0x16>
    }
}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b004      	add	sp, #16
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ec:	f000 fc5e 	bl	80030ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027f0:	f000 f814 	bl	800281c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f4:	f000 f98a 	bl	8002b0c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80027f8:	f000 f958 	bl	8002aac <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80027fc:	f000 f8da 	bl	80029b4 <MX_SPI1_Init>
  MX_ADC_Init();
 8002800:	f000 f87c 	bl	80028fc <MX_ADC_Init>
  MX_SPI2_Init();
 8002804:	f000 f914 	bl	8002a30 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002808:	f008 fbe0 	bl	800afcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  setup_DW1000RSTnIRQ(0);
 800280c:	2000      	movs	r0, #0
 800280e:	f00a fab4 	bl	800cd7a <setup_DW1000RSTnIRQ>

  // initLCD();

  dw_main();
 8002812:	f7ff fd57 	bl	80022c4 <dw_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	e7fd      	b.n	8002816 <main+0x2e>
	...

0800281c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b099      	sub	sp, #100	@ 0x64
 8002820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002822:	242c      	movs	r4, #44	@ 0x2c
 8002824:	193b      	adds	r3, r7, r4
 8002826:	0018      	movs	r0, r3
 8002828:	2334      	movs	r3, #52	@ 0x34
 800282a:	001a      	movs	r2, r3
 800282c:	2100      	movs	r1, #0
 800282e:	f00a fb6f 	bl	800cf10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002832:	231c      	movs	r3, #28
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	0018      	movs	r0, r3
 8002838:	2310      	movs	r3, #16
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	f00a fb67 	bl	800cf10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002842:	003b      	movs	r3, r7
 8002844:	0018      	movs	r0, r3
 8002846:	231c      	movs	r3, #28
 8002848:	001a      	movs	r2, r3
 800284a:	2100      	movs	r1, #0
 800284c:	f00a fb60 	bl	800cf10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002850:	0021      	movs	r1, r4
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2232      	movs	r2, #50	@ 0x32
 8002856:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002858:	187b      	adds	r3, r7, r1
 800285a:	2201      	movs	r2, #1
 800285c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800285e:	187b      	adds	r3, r7, r1
 8002860:	2201      	movs	r2, #1
 8002862:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002864:	187b      	adds	r3, r7, r1
 8002866:	2201      	movs	r2, #1
 8002868:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800286a:	187b      	adds	r3, r7, r1
 800286c:	2210      	movs	r2, #16
 800286e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2210      	movs	r2, #16
 8002874:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2202      	movs	r2, #2
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	2280      	movs	r2, #128	@ 0x80
 8002880:	0212      	lsls	r2, r2, #8
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002884:	187b      	adds	r3, r7, r1
 8002886:	22e0      	movs	r2, #224	@ 0xe0
 8002888:	0352      	lsls	r2, r2, #13
 800288a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800288c:	187b      	adds	r3, r7, r1
 800288e:	2201      	movs	r2, #1
 8002890:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002892:	187b      	adds	r3, r7, r1
 8002894:	0018      	movs	r0, r3
 8002896:	f002 ffff 	bl	8005898 <HAL_RCC_OscConfig>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d001      	beq.n	80028a2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800289e:	f000 f9fd 	bl	8002c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a2:	211c      	movs	r1, #28
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2207      	movs	r2, #7
 80028a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2202      	movs	r2, #2
 80028ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	2101      	movs	r1, #1
 80028c0:	0018      	movs	r0, r3
 80028c2:	f003 fb6f 	bl	8005fa4 <HAL_RCC_ClockConfig>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80028ca:	f000 f9e7 	bl	8002c9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 80028ce:	003b      	movs	r3, r7
 80028d0:	4a09      	ldr	r2, [pc, #36]	@ (80028f8 <SystemClock_Config+0xdc>)
 80028d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80028d4:	003b      	movs	r3, r7
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80028da:	003b      	movs	r3, r7
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e0:	003b      	movs	r3, r7
 80028e2:	0018      	movs	r0, r3
 80028e4:	f003 fcca 	bl	800627c <HAL_RCCEx_PeriphCLKConfig>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80028ec:	f000 f9d6 	bl	8002c9c <Error_Handler>
  }
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b019      	add	sp, #100	@ 0x64
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	00020001 	.word	0x00020001

080028fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	0018      	movs	r0, r3
 8002906:	230c      	movs	r3, #12
 8002908:	001a      	movs	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f00a fb00 	bl	800cf10 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002910:	4b26      	ldr	r3, [pc, #152]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002912:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <MX_ADC_Init+0xb4>)
 8002914:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002916:	4b25      	ldr	r3, [pc, #148]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002918:	2200      	movs	r2, #0
 800291a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800291c:	4b23      	ldr	r3, [pc, #140]	@ (80029ac <MX_ADC_Init+0xb0>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002922:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002928:	4b20      	ldr	r3, [pc, #128]	@ (80029ac <MX_ADC_Init+0xb0>)
 800292a:	2201      	movs	r2, #1
 800292c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800292e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002930:	2204      	movs	r2, #4
 8002932:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002934:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002936:	2200      	movs	r2, #0
 8002938:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800293a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <MX_ADC_Init+0xb0>)
 800293c:	2200      	movs	r2, #0
 800293e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002940:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002942:	2200      	movs	r2, #0
 8002944:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002946:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002948:	2200      	movs	r2, #0
 800294a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800294c:	4b17      	ldr	r3, [pc, #92]	@ (80029ac <MX_ADC_Init+0xb0>)
 800294e:	22c2      	movs	r2, #194	@ 0xc2
 8002950:	32ff      	adds	r2, #255	@ 0xff
 8002952:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800295a:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <MX_ADC_Init+0xb0>)
 800295c:	2224      	movs	r2, #36	@ 0x24
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002964:	2201      	movs	r2, #1
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002968:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <MX_ADC_Init+0xb0>)
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fc26 	bl	80031bc <HAL_ADC_Init>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d001      	beq.n	8002978 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002974:	f000 f992 	bl	8002c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2208      	movs	r2, #8
 800297c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2280      	movs	r2, #128	@ 0x80
 8002982:	0152      	lsls	r2, r2, #5
 8002984:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	2280      	movs	r2, #128	@ 0x80
 800298a:	0552      	lsls	r2, r2, #21
 800298c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800298e:	1d3a      	adds	r2, r7, #4
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <MX_ADC_Init+0xb0>)
 8002992:	0011      	movs	r1, r2
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fd51 	bl	800343c <HAL_ADC_ConfigChannel>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d001      	beq.n	80029a2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800299e:	f000 f97d 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b004      	add	sp, #16
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			@ (mov r8, r8)
 80029ac:	20000288 	.word	0x20000288
 80029b0:	40012400 	.word	0x40012400

080029b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029ba:	4a1c      	ldr	r2, [pc, #112]	@ (8002a2c <MX_SPI1_Init+0x78>)
 80029bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029c0:	2282      	movs	r2, #130	@ 0x82
 80029c2:	0052      	lsls	r2, r2, #1
 80029c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029cc:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029ce:	22e0      	movs	r2, #224	@ 0xe0
 80029d0:	00d2      	lsls	r2, r2, #3
 80029d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d4:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029da:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029e2:	2280      	movs	r2, #128	@ 0x80
 80029e4:	0092      	lsls	r2, r2, #2
 80029e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029ea:	2218      	movs	r2, #24
 80029ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <MX_SPI1_Init+0x74>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <MX_SPI1_Init+0x74>)
 8002a02:	2207      	movs	r2, #7
 8002a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <MX_SPI1_Init+0x74>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <MX_SPI1_Init+0x74>)
 8002a0e:	2208      	movs	r2, #8
 8002a10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <MX_SPI1_Init+0x74>)
 8002a14:	0018      	movs	r0, r3
 8002a16:	f003 fd2f 	bl	8006478 <HAL_SPI_Init>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a1e:	f000 f93d 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200002c8 	.word	0x200002c8
 8002a2c:	40013000 	.word	0x40013000

08002a30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a36:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <MX_SPI2_Init+0x78>)
 8002a38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a3c:	2282      	movs	r2, #130	@ 0x82
 8002a3e:	0052      	lsls	r2, r2, #1
 8002a40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a42:	4b18      	ldr	r3, [pc, #96]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a4a:	22c0      	movs	r2, #192	@ 0xc0
 8002a4c:	0092      	lsls	r2, r2, #2
 8002a4e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a5e:	2280      	movs	r2, #128	@ 0x80
 8002a60:	02d2      	lsls	r2, r2, #11
 8002a62:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a7e:	2207      	movs	r2, #7
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a82:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a8e:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <MX_SPI2_Init+0x74>)
 8002a90:	0018      	movs	r0, r3
 8002a92:	f003 fcf1 	bl	8006478 <HAL_SPI_Init>
 8002a96:	1e03      	subs	r3, r0, #0
 8002a98:	d001      	beq.n	8002a9e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002a9a:	f000 f8ff 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	2000032c 	.word	0x2000032c
 8002aa8:	40003800 	.word	0x40003800

08002aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ab0:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002ab2:	4a15      	ldr	r2, [pc, #84]	@ (8002b08 <MX_USART1_UART_Init+0x5c>)
 8002ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002ab6:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002ab8:	2296      	movs	r2, #150	@ 0x96
 8002aba:	0212      	lsls	r2, r2, #8
 8002abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aee:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <MX_USART1_UART_Init+0x58>)
 8002af0:	0018      	movs	r0, r3
 8002af2:	f004 f85b 	bl	8006bac <HAL_UART_Init>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d001      	beq.n	8002afe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002afa:	f000 f8cf 	bl	8002c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000390 	.word	0x20000390
 8002b08:	40013800 	.word	0x40013800

08002b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b12:	240c      	movs	r4, #12
 8002b14:	193b      	adds	r3, r7, r4
 8002b16:	0018      	movs	r0, r3
 8002b18:	2314      	movs	r3, #20
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f00a f9f7 	bl	800cf10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b22:	4b5b      	ldr	r3, [pc, #364]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	4b5a      	ldr	r3, [pc, #360]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b28:	2180      	movs	r1, #128	@ 0x80
 8002b2a:	03c9      	lsls	r1, r1, #15
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	615a      	str	r2, [r3, #20]
 8002b30:	4b57      	ldr	r3, [pc, #348]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	03db      	lsls	r3, r3, #15
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	4b54      	ldr	r3, [pc, #336]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	4b53      	ldr	r3, [pc, #332]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b44:	2180      	movs	r1, #128	@ 0x80
 8002b46:	0289      	lsls	r1, r1, #10
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	615a      	str	r2, [r3, #20]
 8002b4c:	4b50      	ldr	r3, [pc, #320]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	2380      	movs	r3, #128	@ 0x80
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	4013      	ands	r3, r2
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b60:	2180      	movs	r1, #128	@ 0x80
 8002b62:	02c9      	lsls	r1, r1, #11
 8002b64:	430a      	orrs	r2, r1
 8002b66:	615a      	str	r2, [r3, #20]
 8002b68:	4b49      	ldr	r3, [pc, #292]	@ (8002c90 <MX_GPIO_Init+0x184>)
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	02db      	lsls	r3, r3, #11
 8002b70:	4013      	ands	r3, r2
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 8002b76:	2390      	movs	r3, #144	@ 0x90
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2111      	movs	r1, #17
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f001 f80f 	bl	8003ba2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002b84:	4943      	ldr	r1, [pc, #268]	@ (8002c94 <MX_GPIO_Init+0x188>)
 8002b86:	4b44      	ldr	r3, [pc, #272]	@ (8002c98 <MX_GPIO_Init+0x18c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f001 f809 	bl	8003ba2 <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002b90:	193b      	adds	r3, r7, r4
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	193b      	adds	r3, r7, r4
 8002b98:	2201      	movs	r2, #1
 8002b9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	193b      	adds	r3, r7, r4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	193a      	adds	r2, r7, r4
 8002baa:	2390      	movs	r3, #144	@ 0x90
 8002bac:	05db      	lsls	r3, r3, #23
 8002bae:	0011      	movs	r1, r2
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 fe61 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	2204      	movs	r2, #4
 8002bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2288      	movs	r2, #136	@ 0x88
 8002bc0:	0352      	lsls	r2, r2, #13
 8002bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8002bca:	193a      	adds	r2, r7, r4
 8002bcc:	2390      	movs	r3, #144	@ 0x90
 8002bce:	05db      	lsls	r3, r3, #23
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 fe50 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	2210      	movs	r2, #16
 8002bdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bde:	193b      	adds	r3, r7, r4
 8002be0:	2201      	movs	r2, #1
 8002be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	193b      	adds	r3, r7, r4
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bea:	193b      	adds	r3, r7, r4
 8002bec:	2203      	movs	r2, #3
 8002bee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002bf0:	193a      	adds	r2, r7, r4
 8002bf2:	2390      	movs	r3, #144	@ 0x90
 8002bf4:	05db      	lsls	r3, r3, #23
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fe3d 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	4a24      	ldr	r2, [pc, #144]	@ (8002c94 <MX_GPIO_Init+0x188>)
 8002c02:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	2201      	movs	r2, #1
 8002c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	193b      	adds	r3, r7, r4
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <MX_GPIO_Init+0x18c>)
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	0010      	movs	r0, r2
 8002c1e:	f000 fe2b 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002c22:	0021      	movs	r1, r4
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	0192      	lsls	r2, r2, #6
 8002c2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2c:	000c      	movs	r4, r1
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	4a16      	ldr	r2, [pc, #88]	@ (8002c98 <MX_GPIO_Init+0x18c>)
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0010      	movs	r0, r2
 8002c42:	f000 fe19 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002c46:	0021      	movs	r1, r4
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	2288      	movs	r2, #136	@ 0x88
 8002c52:	0352      	lsls	r2, r2, #13
 8002c54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2202      	movs	r2, #2
 8002c5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c98 <MX_GPIO_Init+0x18c>)
 8002c60:	0019      	movs	r1, r3
 8002c62:	0010      	movs	r0, r2
 8002c64:	f000 fe08 	bl	8003878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2006      	movs	r0, #6
 8002c6e:	f000 fdc1 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002c72:	2006      	movs	r0, #6
 8002c74:	f000 fdd3 	bl	800381e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2007      	movs	r0, #7
 8002c7e:	f000 fdb9 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002c82:	2007      	movs	r0, #7
 8002c84:	f000 fdcb 	bl	800381e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b009      	add	sp, #36	@ 0x24
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	00000b44 	.word	0x00000b44
 8002c98:	48000400 	.word	0x48000400

08002c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca0:	b672      	cpsid	i
}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	e7fd      	b.n	8002ca4 <Error_Handler+0x8>

08002ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cae:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <HAL_MspInit+0x54>)
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <HAL_MspInit+0x54>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	619a      	str	r2, [r3, #24]
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <HAL_MspInit+0x54>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <HAL_MspInit+0x54>)
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <HAL_MspInit+0x54>)
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	0549      	lsls	r1, r1, #21
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_MspInit+0x54>)
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	055b      	lsls	r3, r3, #21
 8002cdc:	4013      	ands	r3, r2
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2004      	movs	r0, #4
 8002ce8:	f000 fd84 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002cec:	2004      	movs	r0, #4
 8002cee:	f000 fd96 	bl	800381e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b08b      	sub	sp, #44	@ 0x2c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	2414      	movs	r4, #20
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	2314      	movs	r3, #20
 8002d10:	001a      	movs	r2, r3
 8002d12:	2100      	movs	r1, #0
 8002d14:	f00a f8fc 	bl	800cf10 <memset>
  if(hadc->Instance==ADC1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a18      	ldr	r2, [pc, #96]	@ (8002d80 <HAL_ADC_MspInit+0x80>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d12a      	bne.n	8002d78 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d22:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <HAL_ADC_MspInit+0x84>)
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	4b17      	ldr	r3, [pc, #92]	@ (8002d84 <HAL_ADC_MspInit+0x84>)
 8002d28:	2180      	movs	r1, #128	@ 0x80
 8002d2a:	0089      	lsls	r1, r1, #2
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <HAL_ADC_MspInit+0x84>)
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3e:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_ADC_MspInit+0x84>)
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <HAL_ADC_MspInit+0x84>)
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	02c9      	lsls	r1, r1, #11
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	615a      	str	r2, [r3, #20]
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <HAL_ADC_MspInit+0x84>)
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	02db      	lsls	r3, r3, #11
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	2203      	movs	r2, #3
 8002d64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	4a06      	ldr	r2, [pc, #24]	@ (8002d88 <HAL_ADC_MspInit+0x88>)
 8002d70:	0019      	movs	r1, r3
 8002d72:	0010      	movs	r0, r2
 8002d74:	f000 fd80 	bl	8003878 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d78:	46c0      	nop			@ (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b00b      	add	sp, #44	@ 0x2c
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	40012400 	.word	0x40012400
 8002d84:	40021000 	.word	0x40021000
 8002d88:	48000400 	.word	0x48000400

08002d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b08d      	sub	sp, #52	@ 0x34
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	241c      	movs	r4, #28
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	0018      	movs	r0, r3
 8002d9a:	2314      	movs	r3, #20
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f00a f8b6 	bl	800cf10 <memset>
  if(hspi->Instance==SPI1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a45      	ldr	r2, [pc, #276]	@ (8002ec0 <HAL_SPI_MspInit+0x134>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d133      	bne.n	8002e16 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dae:	4b45      	ldr	r3, [pc, #276]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	4b44      	ldr	r3, [pc, #272]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002db4:	2180      	movs	r1, #128	@ 0x80
 8002db6:	0149      	lsls	r1, r1, #5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	619a      	str	r2, [r3, #24]
 8002dbc:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	015b      	lsls	r3, r3, #5
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002dd0:	2180      	movs	r1, #128	@ 0x80
 8002dd2:	0289      	lsls	r1, r1, #10
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	615a      	str	r2, [r3, #20]
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8002de6:	0021      	movs	r1, r4
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	22e0      	movs	r2, #224	@ 0xe0
 8002dec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	2202      	movs	r2, #2
 8002df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	187a      	adds	r2, r7, r1
 8002e08:	2390      	movs	r3, #144	@ 0x90
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	0011      	movs	r1, r2
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 fd32 	bl	8003878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e14:	e04f      	b.n	8002eb6 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec8 <HAL_SPI_MspInit+0x13c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d14a      	bne.n	8002eb6 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e20:	4b28      	ldr	r3, [pc, #160]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	4b27      	ldr	r3, [pc, #156]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002e26:	2180      	movs	r1, #128	@ 0x80
 8002e28:	01c9      	lsls	r1, r1, #7
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	61da      	str	r2, [r3, #28]
 8002e2e:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	2380      	movs	r3, #128	@ 0x80
 8002e34:	01db      	lsls	r3, r3, #7
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002e42:	2180      	movs	r1, #128	@ 0x80
 8002e44:	02c9      	lsls	r1, r1, #11
 8002e46:	430a      	orrs	r2, r1
 8002e48:	615a      	str	r2, [r3, #20]
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec4 <HAL_SPI_MspInit+0x138>)
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	2380      	movs	r3, #128	@ 0x80
 8002e50:	02db      	lsls	r3, r3, #11
 8002e52:	4013      	ands	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e58:	211c      	movs	r1, #28
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2280      	movs	r2, #128	@ 0x80
 8002e5e:	00d2      	lsls	r2, r2, #3
 8002e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	000c      	movs	r4, r1
 8002e64:	193b      	adds	r3, r7, r4
 8002e66:	2202      	movs	r2, #2
 8002e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	193b      	adds	r3, r7, r4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e70:	193b      	adds	r3, r7, r4
 8002e72:	2203      	movs	r2, #3
 8002e74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	2205      	movs	r2, #5
 8002e7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7c:	193b      	adds	r3, r7, r4
 8002e7e:	4a13      	ldr	r2, [pc, #76]	@ (8002ecc <HAL_SPI_MspInit+0x140>)
 8002e80:	0019      	movs	r1, r3
 8002e82:	0010      	movs	r0, r2
 8002e84:	f000 fcf8 	bl	8003878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002e88:	0021      	movs	r1, r4
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	22d0      	movs	r2, #208	@ 0xd0
 8002e8e:	0212      	lsls	r2, r2, #8
 8002e90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	2202      	movs	r2, #2
 8002e96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	4a07      	ldr	r2, [pc, #28]	@ (8002ecc <HAL_SPI_MspInit+0x140>)
 8002eae:	0019      	movs	r1, r3
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	f000 fce1 	bl	8003878 <HAL_GPIO_Init>
}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b00d      	add	sp, #52	@ 0x34
 8002ebc:	bd90      	pop	{r4, r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	40013000 	.word	0x40013000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40003800 	.word	0x40003800
 8002ecc:	48000400 	.word	0x48000400

08002ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08b      	sub	sp, #44	@ 0x2c
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	2414      	movs	r4, #20
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	0018      	movs	r0, r3
 8002ede:	2314      	movs	r3, #20
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f00a f814 	bl	800cf10 <memset>
  if(huart->Instance==USART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <HAL_UART_MspInit+0x94>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d133      	bne.n	8002f5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	01c9      	lsls	r1, r1, #7
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	01db      	lsls	r3, r3, #7
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	4b16      	ldr	r3, [pc, #88]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002f14:	2180      	movs	r1, #128	@ 0x80
 8002f16:	0289      	lsls	r1, r1, #10
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	615a      	str	r2, [r3, #20]
 8002f1c:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_UART_MspInit+0x98>)
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f2a:	193b      	adds	r3, r7, r4
 8002f2c:	22c0      	movs	r2, #192	@ 0xc0
 8002f2e:	00d2      	lsls	r2, r2, #3
 8002f30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	0021      	movs	r1, r4
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2202      	movs	r2, #2
 8002f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2203      	movs	r2, #3
 8002f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	2201      	movs	r2, #1
 8002f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	187a      	adds	r2, r7, r1
 8002f4e:	2390      	movs	r3, #144	@ 0x90
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	0011      	movs	r1, r2
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 fc8f 	bl	8003878 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b00b      	add	sp, #44	@ 0x2c
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40021000 	.word	0x40021000

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f70:	46c0      	nop			@ (mov r8, r8)
 8002f72:	e7fd      	b.n	8002f70 <NMI_Handler+0x4>

08002f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	e7fd      	b.n	8002f78 <HardFault_Handler+0x4>

08002f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f80:	46c0      	nop			@ (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f94:	f000 f8d2 	bl	800313c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8002fac:	2004      	movs	r0, #4
 8002fae:	f000 fe15 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002fbc:	2020      	movs	r0, #32
 8002fbe:	f000 fe0d 	bl	8003bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002fcc:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <USB_IRQHandler+0x14>)
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 ff3a 	bl	8003e48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	200010e8 	.word	0x200010e8

08002fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe8:	4a14      	ldr	r2, [pc, #80]	@ (800303c <_sbrk+0x5c>)
 8002fea:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <_sbrk+0x60>)
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff4:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <_sbrk+0x64>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	@ (8003048 <_sbrk+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003002:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	18d3      	adds	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003010:	f009 ff86 	bl	800cf20 <__errno>
 8003014:	0003      	movs	r3, r0
 8003016:	220c      	movs	r2, #12
 8003018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800301a:	2301      	movs	r3, #1
 800301c:	425b      	negs	r3, r3
 800301e:	e009      	b.n	8003034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003020:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003026:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	18d2      	adds	r2, r2, r3
 800302e:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <_sbrk+0x64>)
 8003030:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b006      	add	sp, #24
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20004000 	.word	0x20004000
 8003040:	00000400 	.word	0x00000400
 8003044:	20000418 	.word	0x20000418
 8003048:	20001768 	.word	0x20001768

0800304c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003058:	480d      	ldr	r0, [pc, #52]	@ (8003090 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800305a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800305c:	f7ff fff6 	bl	800304c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003060:	480c      	ldr	r0, [pc, #48]	@ (8003094 <LoopForever+0x6>)
  ldr r1, =_edata
 8003062:	490d      	ldr	r1, [pc, #52]	@ (8003098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003064:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <LoopForever+0xe>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003068:	e002      	b.n	8003070 <LoopCopyDataInit>

0800306a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800306c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306e:	3304      	adds	r3, #4

08003070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003074:	d3f9      	bcc.n	800306a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003076:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003078:	4c0a      	ldr	r4, [pc, #40]	@ (80030a4 <LoopForever+0x16>)
  movs r3, #0
 800307a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800307c:	e001      	b.n	8003082 <LoopFillZerobss>

0800307e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003080:	3204      	adds	r2, #4

08003082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003084:	d3fb      	bcc.n	800307e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003086:	f009 ff51 	bl	800cf2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800308a:	f7ff fbad 	bl	80027e8 <main>

0800308e <LoopForever>:

LoopForever:
    b LoopForever
 800308e:	e7fe      	b.n	800308e <LoopForever>
  ldr   r0, =_estack
 8003090:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003098:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800309c:	0800db08 	.word	0x0800db08
  ldr r2, =_sbss
 80030a0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80030a4:	20001768 	.word	0x20001768

080030a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030a8:	e7fe      	b.n	80030a8 <ADC1_COMP_IRQHandler>
	...

080030ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_Init+0x24>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <HAL_Init+0x24>)
 80030b6:	2110      	movs	r1, #16
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80030bc:	2003      	movs	r0, #3
 80030be:	f000 f809 	bl	80030d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c2:	f7ff fdf1 	bl	8002ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	40022000 	.word	0x40022000

080030d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030dc:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <HAL_InitTick+0x5c>)
 80030de:	681c      	ldr	r4, [r3, #0]
 80030e0:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <HAL_InitTick+0x60>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	0019      	movs	r1, r3
 80030e6:	23fa      	movs	r3, #250	@ 0xfa
 80030e8:	0098      	lsls	r0, r3, #2
 80030ea:	f7fd f817 	bl	800011c <__udivsi3>
 80030ee:	0003      	movs	r3, r0
 80030f0:	0019      	movs	r1, r3
 80030f2:	0020      	movs	r0, r4
 80030f4:	f7fd f812 	bl	800011c <__udivsi3>
 80030f8:	0003      	movs	r3, r0
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 fbaf 	bl	800385e <HAL_SYSTICK_Config>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d001      	beq.n	8003108 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e00f      	b.n	8003128 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d80b      	bhi.n	8003126 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	2301      	movs	r3, #1
 8003112:	425b      	negs	r3, r3
 8003114:	2200      	movs	r2, #0
 8003116:	0018      	movs	r0, r3
 8003118:	f000 fb6c 	bl	80037f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_InitTick+0x64>)
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b003      	add	sp, #12
 800312e:	bd90      	pop	{r4, r7, pc}
 8003130:	20000040 	.word	0x20000040
 8003134:	20000048 	.word	0x20000048
 8003138:	20000044 	.word	0x20000044

0800313c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_IncTick+0x1c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	001a      	movs	r2, r3
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_IncTick+0x20>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	18d2      	adds	r2, r2, r3
 800314c:	4b03      	ldr	r3, [pc, #12]	@ (800315c <HAL_IncTick+0x20>)
 800314e:	601a      	str	r2, [r3, #0]
}
 8003150:	46c0      	nop			@ (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	20000048 	.word	0x20000048
 800315c:	2000041c 	.word	0x2000041c

08003160 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  return uwTick;
 8003164:	4b02      	ldr	r3, [pc, #8]	@ (8003170 <HAL_GetTick+0x10>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	2000041c 	.word	0x2000041c

08003174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7ff fff0 	bl	8003160 <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	d005      	beq.n	800319a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_Delay+0x44>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	001a      	movs	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	189b      	adds	r3, r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	f7ff ffe0 	bl	8003160 <HAL_GetTick>
 80031a0:	0002      	movs	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d8f7      	bhi.n	800319c <HAL_Delay+0x28>
  {
  }
}
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b004      	add	sp, #16
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	20000048 	.word	0x20000048

080031bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c4:	230f      	movs	r3, #15
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e125      	b.n	8003426 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2234      	movs	r2, #52	@ 0x34
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7ff fd84 	bl	8002d00 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fc:	2210      	movs	r2, #16
 80031fe:	4013      	ands	r3, r2
 8003200:	d000      	beq.n	8003204 <HAL_ADC_Init+0x48>
 8003202:	e103      	b.n	800340c <HAL_ADC_Init+0x250>
 8003204:	230f      	movs	r3, #15
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d000      	beq.n	8003210 <HAL_ADC_Init+0x54>
 800320e:	e0fd      	b.n	800340c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2204      	movs	r2, #4
 8003218:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800321a:	d000      	beq.n	800321e <HAL_ADC_Init+0x62>
 800321c:	e0f6      	b.n	800340c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003222:	4a83      	ldr	r2, [pc, #524]	@ (8003430 <HAL_ADC_Init+0x274>)
 8003224:	4013      	ands	r3, r2
 8003226:	2202      	movs	r2, #2
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2203      	movs	r2, #3
 8003236:	4013      	ands	r3, r2
 8003238:	2b01      	cmp	r3, #1
 800323a:	d112      	bne.n	8003262 <HAL_ADC_Init+0xa6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	4013      	ands	r3, r2
 8003246:	2b01      	cmp	r3, #1
 8003248:	d009      	beq.n	800325e <HAL_ADC_Init+0xa2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	2380      	movs	r3, #128	@ 0x80
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	401a      	ands	r2, r3
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	429a      	cmp	r2, r3
 800325c:	d101      	bne.n	8003262 <HAL_ADC_Init+0xa6>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_ADC_Init+0xa8>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d116      	bne.n	8003296 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2218      	movs	r2, #24
 8003270:	4393      	bics	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	0899      	lsrs	r1, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4964      	ldr	r1, [pc, #400]	@ (8003434 <HAL_ADC_Init+0x278>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7e1b      	ldrb	r3, [r3, #24]
 80032aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7e5b      	ldrb	r3, [r3, #25]
 80032b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7e9b      	ldrb	r3, [r3, #26]
 80032b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80032ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d002      	beq.n	80032ca <HAL_ADC_Init+0x10e>
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	015b      	lsls	r3, r3, #5
 80032c8:	e000      	b.n	80032cc <HAL_ADC_Init+0x110>
 80032ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80032d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_Init+0x124>
 80032dc:	2304      	movs	r3, #4
 80032de:	e000      	b.n	80032e2 <HAL_ADC_Init+0x126>
 80032e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80032e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2124      	movs	r1, #36	@ 0x24
 80032e8:	5c5b      	ldrb	r3, [r3, r1]
 80032ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80032ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7edb      	ldrb	r3, [r3, #27]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d115      	bne.n	8003328 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7e9b      	ldrb	r3, [r3, #26]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	0252      	lsls	r2, r2, #9
 800330a:	4313      	orrs	r3, r2
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	e00b      	b.n	8003328 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003314:	2220      	movs	r2, #32
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003320:	2201      	movs	r2, #1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	23c2      	movs	r3, #194	@ 0xc2
 800332e:	33ff      	adds	r3, #255	@ 0xff
 8003330:	429a      	cmp	r2, r3
 8003332:	d007      	beq.n	8003344 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800333c:	4313      	orrs	r3, r2
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4313      	orrs	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68d9      	ldr	r1, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	430a      	orrs	r2, r1
 8003352:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	055b      	lsls	r3, r3, #21
 800335c:	429a      	cmp	r2, r3
 800335e:	d01b      	beq.n	8003398 <HAL_ADC_Init+0x1dc>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d017      	beq.n	8003398 <HAL_ADC_Init+0x1dc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	2b02      	cmp	r3, #2
 800336e:	d013      	beq.n	8003398 <HAL_ADC_Init+0x1dc>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	2b03      	cmp	r3, #3
 8003376:	d00f      	beq.n	8003398 <HAL_ADC_Init+0x1dc>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	2b04      	cmp	r3, #4
 800337e:	d00b      	beq.n	8003398 <HAL_ADC_Init+0x1dc>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	2b05      	cmp	r3, #5
 8003386:	d007      	beq.n	8003398 <HAL_ADC_Init+0x1dc>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	2b06      	cmp	r3, #6
 800338e:	d003      	beq.n	8003398 <HAL_ADC_Init+0x1dc>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	2b07      	cmp	r3, #7
 8003396:	d112      	bne.n	80033be <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2107      	movs	r1, #7
 80033a4:	438a      	bics	r2, r1
 80033a6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6959      	ldr	r1, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	2207      	movs	r2, #7
 80033b4:	401a      	ands	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003438 <HAL_ADC_Init+0x27c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d10b      	bne.n	80033e6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	2203      	movs	r2, #3
 80033da:	4393      	bics	r3, r2
 80033dc:	2201      	movs	r2, #1
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033e4:	e01c      	b.n	8003420 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	2212      	movs	r2, #18
 80033ec:	4393      	bics	r3, r2
 80033ee:	2210      	movs	r2, #16
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	2201      	movs	r2, #1
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003402:	230f      	movs	r3, #15
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800340a:	e009      	b.n	8003420 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	2210      	movs	r2, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003418:	230f      	movs	r3, #15
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003420:	230f      	movs	r3, #15
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	781b      	ldrb	r3, [r3, #0]
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	fffffefd 	.word	0xfffffefd
 8003434:	fffe0219 	.word	0xfffe0219
 8003438:	833fffe7 	.word	0x833fffe7

0800343c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003446:	230f      	movs	r3, #15
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003456:	2380      	movs	r3, #128	@ 0x80
 8003458:	055b      	lsls	r3, r3, #21
 800345a:	429a      	cmp	r2, r3
 800345c:	d011      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d00d      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346a:	2b02      	cmp	r3, #2
 800346c:	d009      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	2b03      	cmp	r3, #3
 8003474:	d005      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	2b04      	cmp	r3, #4
 800347c:	d001      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2234      	movs	r2, #52	@ 0x34
 8003486:	5c9b      	ldrb	r3, [r3, r2]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x54>
 800348c:	2302      	movs	r3, #2
 800348e:	e0d0      	b.n	8003632 <HAL_ADC_ConfigChannel+0x1f6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2234      	movs	r2, #52	@ 0x34
 8003494:	2101      	movs	r1, #1
 8003496:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2204      	movs	r2, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	d000      	beq.n	80034a6 <HAL_ADC_ConfigChannel+0x6a>
 80034a4:	e0b4      	b.n	8003610 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4a64      	ldr	r2, [pc, #400]	@ (800363c <HAL_ADC_ConfigChannel+0x200>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d100      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x76>
 80034b0:	e082      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034cc:	2380      	movs	r3, #128	@ 0x80
 80034ce:	055b      	lsls	r3, r3, #21
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d037      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d033      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d02f      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d02b      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d027      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d023      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	2b06      	cmp	r3, #6
 8003502:	d01f      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	2b07      	cmp	r3, #7
 800350a:	d01b      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2107      	movs	r1, #7
 8003518:	400b      	ands	r3, r1
 800351a:	429a      	cmp	r2, r3
 800351c:	d012      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2107      	movs	r1, #7
 800352a:	438a      	bics	r2, r1
 800352c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6959      	ldr	r1, [r3, #20]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2207      	movs	r2, #7
 800353a:	401a      	ands	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b10      	cmp	r3, #16
 800354a:	d007      	beq.n	800355c <HAL_ADC_ConfigChannel+0x120>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b11      	cmp	r3, #17
 8003552:	d003      	beq.n	800355c <HAL_ADC_ConfigChannel+0x120>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b12      	cmp	r3, #18
 800355a:	d163      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800355c:	4b38      	ldr	r3, [pc, #224]	@ (8003640 <HAL_ADC_ConfigChannel+0x204>)
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b10      	cmp	r3, #16
 8003566:	d009      	beq.n	800357c <HAL_ADC_ConfigChannel+0x140>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b11      	cmp	r3, #17
 800356e:	d102      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x13a>
 8003570:	2380      	movs	r3, #128	@ 0x80
 8003572:	03db      	lsls	r3, r3, #15
 8003574:	e004      	b.n	8003580 <HAL_ADC_ConfigChannel+0x144>
 8003576:	2380      	movs	r3, #128	@ 0x80
 8003578:	045b      	lsls	r3, r3, #17
 800357a:	e001      	b.n	8003580 <HAL_ADC_ConfigChannel+0x144>
 800357c:	2380      	movs	r3, #128	@ 0x80
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	4a2f      	ldr	r2, [pc, #188]	@ (8003640 <HAL_ADC_ConfigChannel+0x204>)
 8003582:	430b      	orrs	r3, r1
 8003584:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b10      	cmp	r3, #16
 800358c:	d14a      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800358e:	4b2d      	ldr	r3, [pc, #180]	@ (8003644 <HAL_ADC_ConfigChannel+0x208>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	492d      	ldr	r1, [pc, #180]	@ (8003648 <HAL_ADC_ConfigChannel+0x20c>)
 8003594:	0018      	movs	r0, r3
 8003596:	f7fc fdc1 	bl	800011c <__udivsi3>
 800359a:	0003      	movs	r3, r0
 800359c:	001a      	movs	r2, r3
 800359e:	0013      	movs	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x16e>
 80035b6:	e035      	b.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	4099      	lsls	r1, r3
 80035c6:	000b      	movs	r3, r1
 80035c8:	43d9      	mvns	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	400a      	ands	r2, r1
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d007      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x1ae>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b11      	cmp	r3, #17
 80035e0:	d003      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x1ae>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b12      	cmp	r3, #18
 80035e8:	d11c      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80035ea:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <HAL_ADC_ConfigChannel+0x204>)
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d007      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x1ca>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b11      	cmp	r3, #17
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x1c6>
 80035fe:	4b13      	ldr	r3, [pc, #76]	@ (800364c <HAL_ADC_ConfigChannel+0x210>)
 8003600:	e002      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1cc>
 8003602:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <HAL_ADC_ConfigChannel+0x214>)
 8003604:	e000      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1cc>
 8003606:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <HAL_ADC_ConfigChannel+0x218>)
 8003608:	4a0d      	ldr	r2, [pc, #52]	@ (8003640 <HAL_ADC_ConfigChannel+0x204>)
 800360a:	400b      	ands	r3, r1
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e009      	b.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	2220      	movs	r2, #32
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800361c:	230f      	movs	r3, #15
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2234      	movs	r2, #52	@ 0x34
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800362c:	230f      	movs	r3, #15
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	00001001 	.word	0x00001001
 8003640:	40012708 	.word	0x40012708
 8003644:	20000040 	.word	0x20000040
 8003648:	000f4240 	.word	0x000f4240
 800364c:	ffbfffff 	.word	0xffbfffff
 8003650:	feffffff 	.word	0xfeffffff
 8003654:	ff7fffff 	.word	0xff7fffff

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	0002      	movs	r2, r0
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b7f      	cmp	r3, #127	@ 0x7f
 800366a:	d809      	bhi.n	8003680 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	001a      	movs	r2, r3
 8003672:	231f      	movs	r3, #31
 8003674:	401a      	ands	r2, r3
 8003676:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <__NVIC_EnableIRQ+0x30>)
 8003678:	2101      	movs	r1, #1
 800367a:	4091      	lsls	r1, r2
 800367c:	000a      	movs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
  }
}
 8003680:	46c0      	nop			@ (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}
 8003688:	e000e100 	.word	0xe000e100

0800368c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	0002      	movs	r2, r0
 8003694:	1dfb      	adds	r3, r7, #7
 8003696:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003698:	1dfb      	adds	r3, r7, #7
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b7f      	cmp	r3, #127	@ 0x7f
 800369e:	d810      	bhi.n	80036c2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	001a      	movs	r2, r3
 80036a6:	231f      	movs	r3, #31
 80036a8:	4013      	ands	r3, r2
 80036aa:	4908      	ldr	r1, [pc, #32]	@ (80036cc <__NVIC_DisableIRQ+0x40>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	409a      	lsls	r2, r3
 80036b0:	0013      	movs	r3, r2
 80036b2:	2280      	movs	r2, #128	@ 0x80
 80036b4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036b6:	f3bf 8f4f 	dsb	sy
}
 80036ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80036bc:	f3bf 8f6f 	isb	sy
}
 80036c0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	0002      	movs	r2, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036de:	1dfb      	adds	r3, r7, #7
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80036e4:	d828      	bhi.n	8003738 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036e6:	4a2f      	ldr	r2, [pc, #188]	@ (80037a4 <__NVIC_SetPriority+0xd4>)
 80036e8:	1dfb      	adds	r3, r7, #7
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b25b      	sxtb	r3, r3
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	33c0      	adds	r3, #192	@ 0xc0
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	589b      	ldr	r3, [r3, r2]
 80036f6:	1dfa      	adds	r2, r7, #7
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	0011      	movs	r1, r2
 80036fc:	2203      	movs	r2, #3
 80036fe:	400a      	ands	r2, r1
 8003700:	00d2      	lsls	r2, r2, #3
 8003702:	21ff      	movs	r1, #255	@ 0xff
 8003704:	4091      	lsls	r1, r2
 8003706:	000a      	movs	r2, r1
 8003708:	43d2      	mvns	r2, r2
 800370a:	401a      	ands	r2, r3
 800370c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	22ff      	movs	r2, #255	@ 0xff
 8003714:	401a      	ands	r2, r3
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	0018      	movs	r0, r3
 800371c:	2303      	movs	r3, #3
 800371e:	4003      	ands	r3, r0
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003724:	481f      	ldr	r0, [pc, #124]	@ (80037a4 <__NVIC_SetPriority+0xd4>)
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b25b      	sxtb	r3, r3
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	430a      	orrs	r2, r1
 8003730:	33c0      	adds	r3, #192	@ 0xc0
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003736:	e031      	b.n	800379c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003738:	4a1b      	ldr	r2, [pc, #108]	@ (80037a8 <__NVIC_SetPriority+0xd8>)
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	0019      	movs	r1, r3
 8003740:	230f      	movs	r3, #15
 8003742:	400b      	ands	r3, r1
 8003744:	3b08      	subs	r3, #8
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3306      	adds	r3, #6
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	18d3      	adds	r3, r2, r3
 800374e:	3304      	adds	r3, #4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1dfa      	adds	r2, r7, #7
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	0011      	movs	r1, r2
 8003758:	2203      	movs	r2, #3
 800375a:	400a      	ands	r2, r1
 800375c:	00d2      	lsls	r2, r2, #3
 800375e:	21ff      	movs	r1, #255	@ 0xff
 8003760:	4091      	lsls	r1, r2
 8003762:	000a      	movs	r2, r1
 8003764:	43d2      	mvns	r2, r2
 8003766:	401a      	ands	r2, r3
 8003768:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	019b      	lsls	r3, r3, #6
 800376e:	22ff      	movs	r2, #255	@ 0xff
 8003770:	401a      	ands	r2, r3
 8003772:	1dfb      	adds	r3, r7, #7
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	0018      	movs	r0, r3
 8003778:	2303      	movs	r3, #3
 800377a:	4003      	ands	r3, r0
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003780:	4809      	ldr	r0, [pc, #36]	@ (80037a8 <__NVIC_SetPriority+0xd8>)
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	001c      	movs	r4, r3
 8003788:	230f      	movs	r3, #15
 800378a:	4023      	ands	r3, r4
 800378c:	3b08      	subs	r3, #8
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	430a      	orrs	r2, r1
 8003792:	3306      	adds	r3, #6
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	18c3      	adds	r3, r0, r3
 8003798:	3304      	adds	r3, #4
 800379a:	601a      	str	r2, [r3, #0]
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b003      	add	sp, #12
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	2380      	movs	r3, #128	@ 0x80
 80037ba:	045b      	lsls	r3, r3, #17
 80037bc:	429a      	cmp	r2, r3
 80037be:	d301      	bcc.n	80037c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c0:	2301      	movs	r3, #1
 80037c2:	e010      	b.n	80037e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c4:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <SysTick_Config+0x44>)
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	3a01      	subs	r2, #1
 80037ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037cc:	2301      	movs	r3, #1
 80037ce:	425b      	negs	r3, r3
 80037d0:	2103      	movs	r1, #3
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7ff ff7c 	bl	80036d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <SysTick_Config+0x44>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037de:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <SysTick_Config+0x44>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b002      	add	sp, #8
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	e000e010 	.word	0xe000e010

080037f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	210f      	movs	r1, #15
 8003800:	187b      	adds	r3, r7, r1
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	187b      	adds	r3, r7, r1
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	b25b      	sxtb	r3, r3
 800380e:	0011      	movs	r1, r2
 8003810:	0018      	movs	r0, r3
 8003812:	f7ff ff5d 	bl	80036d0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	0002      	movs	r2, r0
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b25b      	sxtb	r3, r3
 8003830:	0018      	movs	r0, r3
 8003832:	f7ff ff11 	bl	8003658 <__NVIC_EnableIRQ>
}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b002      	add	sp, #8
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	0002      	movs	r2, r0
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b25b      	sxtb	r3, r3
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff ff1b 	bl	800368c <__NVIC_DisableIRQ>
}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b002      	add	sp, #8
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff ff9f 	bl	80037ac <SysTick_Config>
 800386e:	0003      	movs	r3, r0
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003886:	e155      	b.n	8003b34 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4091      	lsls	r1, r2
 8003892:	000a      	movs	r2, r1
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d100      	bne.n	80038a0 <HAL_GPIO_Init+0x28>
 800389e:	e146      	b.n	8003b2e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2203      	movs	r2, #3
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d005      	beq.n	80038b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2203      	movs	r2, #3
 80038b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d130      	bne.n	800391a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	409a      	lsls	r2, r3
 80038c6:	0013      	movs	r3, r2
 80038c8:	43da      	mvns	r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	0013      	movs	r3, r2
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ee:	2201      	movs	r2, #1
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
 80038f4:	0013      	movs	r3, r2
 80038f6:	43da      	mvns	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	2201      	movs	r2, #1
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
 800390c:	0013      	movs	r3, r2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	4013      	ands	r3, r2
 8003922:	2b03      	cmp	r3, #3
 8003924:	d017      	beq.n	8003956 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	409a      	lsls	r2, r3
 8003934:	0013      	movs	r3, r2
 8003936:	43da      	mvns	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	409a      	lsls	r2, r3
 8003948:	0013      	movs	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2203      	movs	r2, #3
 800395c:	4013      	ands	r3, r2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d123      	bne.n	80039aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	58d3      	ldr	r3, [r2, r3]
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2207      	movs	r2, #7
 8003974:	4013      	ands	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	409a      	lsls	r2, r3
 800397c:	0013      	movs	r3, r2
 800397e:	43da      	mvns	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2107      	movs	r1, #7
 800398e:	400b      	ands	r3, r1
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	409a      	lsls	r2, r3
 8003994:	0013      	movs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	0092      	lsls	r2, r2, #2
 80039a6:	6939      	ldr	r1, [r7, #16]
 80039a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2203      	movs	r2, #3
 80039b6:	409a      	lsls	r2, r3
 80039b8:	0013      	movs	r3, r2
 80039ba:	43da      	mvns	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2203      	movs	r2, #3
 80039c8:	401a      	ands	r2, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	0013      	movs	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	23c0      	movs	r3, #192	@ 0xc0
 80039e4:	029b      	lsls	r3, r3, #10
 80039e6:	4013      	ands	r3, r2
 80039e8:	d100      	bne.n	80039ec <HAL_GPIO_Init+0x174>
 80039ea:	e0a0      	b.n	8003b2e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ec:	4b57      	ldr	r3, [pc, #348]	@ (8003b4c <HAL_GPIO_Init+0x2d4>)
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	4b56      	ldr	r3, [pc, #344]	@ (8003b4c <HAL_GPIO_Init+0x2d4>)
 80039f2:	2101      	movs	r1, #1
 80039f4:	430a      	orrs	r2, r1
 80039f6:	619a      	str	r2, [r3, #24]
 80039f8:	4b54      	ldr	r3, [pc, #336]	@ (8003b4c <HAL_GPIO_Init+0x2d4>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	2201      	movs	r2, #1
 80039fe:	4013      	ands	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a04:	4a52      	ldr	r2, [pc, #328]	@ (8003b50 <HAL_GPIO_Init+0x2d8>)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	589b      	ldr	r3, [r3, r2]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2203      	movs	r2, #3
 8003a16:	4013      	ands	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	220f      	movs	r2, #15
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	0013      	movs	r3, r2
 8003a20:	43da      	mvns	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	2390      	movs	r3, #144	@ 0x90
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d019      	beq.n	8003a66 <HAL_GPIO_Init+0x1ee>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a47      	ldr	r2, [pc, #284]	@ (8003b54 <HAL_GPIO_Init+0x2dc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_GPIO_Init+0x1ea>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a46      	ldr	r2, [pc, #280]	@ (8003b58 <HAL_GPIO_Init+0x2e0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00d      	beq.n	8003a5e <HAL_GPIO_Init+0x1e6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a45      	ldr	r2, [pc, #276]	@ (8003b5c <HAL_GPIO_Init+0x2e4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <HAL_GPIO_Init+0x1e2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a44      	ldr	r2, [pc, #272]	@ (8003b60 <HAL_GPIO_Init+0x2e8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_GPIO_Init+0x1de>
 8003a52:	2304      	movs	r3, #4
 8003a54:	e008      	b.n	8003a68 <HAL_GPIO_Init+0x1f0>
 8003a56:	2305      	movs	r3, #5
 8003a58:	e006      	b.n	8003a68 <HAL_GPIO_Init+0x1f0>
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e004      	b.n	8003a68 <HAL_GPIO_Init+0x1f0>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_Init+0x1f0>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_GPIO_Init+0x1f0>
 8003a66:	2300      	movs	r3, #0
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	2103      	movs	r1, #3
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	4093      	lsls	r3, r2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a78:	4935      	ldr	r1, [pc, #212]	@ (8003b50 <HAL_GPIO_Init+0x2d8>)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a86:	4b37      	ldr	r3, [pc, #220]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	035b      	lsls	r3, r3, #13
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43da      	mvns	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	039b      	lsls	r3, r3, #14
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ad4:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003ada:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	2380      	movs	r3, #128	@ 0x80
 8003af0:	029b      	lsls	r3, r3, #10
 8003af2:	4013      	ands	r3, r2
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003afe:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003b04:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	2380      	movs	r3, #128	@ 0x80
 8003b1a:	025b      	lsls	r3, r3, #9
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b28:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <HAL_GPIO_Init+0x2ec>)
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	3301      	adds	r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	40da      	lsrs	r2, r3
 8003b3c:	1e13      	subs	r3, r2, #0
 8003b3e:	d000      	beq.n	8003b42 <HAL_GPIO_Init+0x2ca>
 8003b40:	e6a2      	b.n	8003888 <HAL_GPIO_Init+0x10>
  } 
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46c0      	nop			@ (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b006      	add	sp, #24
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40010000 	.word	0x40010000
 8003b54:	48000400 	.word	0x48000400
 8003b58:	48000800 	.word	0x48000800
 8003b5c:	48000c00 	.word	0x48000c00
 8003b60:	48001000 	.word	0x48001000
 8003b64:	40010400 	.word	0x40010400

08003b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	000a      	movs	r2, r1
 8003b72:	1cbb      	adds	r3, r7, #2
 8003b74:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	1cba      	adds	r2, r7, #2
 8003b7c:	8812      	ldrh	r2, [r2, #0]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003b82:	230f      	movs	r3, #15
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e003      	b.n	8003b94 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b8c:	230f      	movs	r3, #15
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003b94:	230f      	movs	r3, #15
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	781b      	ldrb	r3, [r3, #0]
  }
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	0008      	movs	r0, r1
 8003bac:	0011      	movs	r1, r2
 8003bae:	1cbb      	adds	r3, r7, #2
 8003bb0:	1c02      	adds	r2, r0, #0
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	1c7b      	adds	r3, r7, #1
 8003bb6:	1c0a      	adds	r2, r1, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bba:	1c7b      	adds	r3, r7, #1
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bc2:	1cbb      	adds	r3, r7, #2
 8003bc4:	881a      	ldrh	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bca:	e003      	b.n	8003bd4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bcc:	1cbb      	adds	r3, r7, #2
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	0002      	movs	r2, r0
 8003be4:	1dbb      	adds	r3, r7, #6
 8003be6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003be8:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	1dba      	adds	r2, r7, #6
 8003bee:	8812      	ldrh	r2, [r2, #0]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d008      	beq.n	8003c06 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003bf6:	1dba      	adds	r2, r7, #6
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bfc:	1dbb      	adds	r3, r7, #6
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f009 f90d 	bl	800ce20 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b002      	add	sp, #8
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	40010400 	.word	0x40010400

08003c14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0e4      	b.n	8003df0 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a73      	ldr	r2, [pc, #460]	@ (8003df8 <HAL_PCD_Init+0x1e4>)
 8003c2a:	5c9b      	ldrb	r3, [r3, r2]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	23a4      	movs	r3, #164	@ 0xa4
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	2100      	movs	r1, #0
 8003c3a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f007 fba6 	bl	800b390 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a6c      	ldr	r2, [pc, #432]	@ (8003df8 <HAL_PCD_Init+0x1e4>)
 8003c48:	2103      	movs	r1, #3
 8003c4a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f003 fbcd 	bl	80073f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c56:	230f      	movs	r3, #15
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e047      	b.n	8003cf0 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c60:	200f      	movs	r0, #15
 8003c62:	183b      	adds	r3, r7, r0
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	0013      	movs	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	18cb      	adds	r3, r1, r3
 8003c72:	3311      	adds	r3, #17
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c78:	183b      	adds	r3, r7, r0
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	0013      	movs	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	18cb      	adds	r3, r1, r3
 8003c88:	3310      	adds	r3, #16
 8003c8a:	183a      	adds	r2, r7, r0
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c90:	183b      	adds	r3, r7, r0
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	0013      	movs	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	18cb      	adds	r3, r1, r3
 8003ca0:	3313      	adds	r3, #19
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ca6:	183b      	adds	r3, r7, r0
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	0013      	movs	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	18cb      	adds	r3, r1, r3
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cbc:	183b      	adds	r3, r7, r0
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	0013      	movs	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	18cb      	adds	r3, r1, r3
 8003ccc:	3324      	adds	r3, #36	@ 0x24
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cd2:	183b      	adds	r3, r7, r0
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	0013      	movs	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce6:	183b      	adds	r3, r7, r0
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	183b      	adds	r3, r7, r0
 8003cec:	3201      	adds	r2, #1
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	791b      	ldrb	r3, [r3, #4]
 8003cf4:	210f      	movs	r1, #15
 8003cf6:	187a      	adds	r2, r7, r1
 8003cf8:	7812      	ldrb	r2, [r2, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d3b0      	bcc.n	8003c60 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e056      	b.n	8003db4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d06:	240f      	movs	r4, #15
 8003d08:	193b      	adds	r3, r7, r4
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	2352      	movs	r3, #82	@ 0x52
 8003d10:	33ff      	adds	r3, #255	@ 0xff
 8003d12:	0019      	movs	r1, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	18c3      	adds	r3, r0, r3
 8003d1e:	185b      	adds	r3, r3, r1
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d24:	193b      	adds	r3, r7, r4
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	23a8      	movs	r3, #168	@ 0xa8
 8003d2c:	0059      	lsls	r1, r3, #1
 8003d2e:	0013      	movs	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	18c3      	adds	r3, r0, r3
 8003d38:	185b      	adds	r3, r3, r1
 8003d3a:	193a      	adds	r2, r7, r4
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d40:	193b      	adds	r3, r7, r4
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	2354      	movs	r3, #84	@ 0x54
 8003d48:	33ff      	adds	r3, #255	@ 0xff
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	0013      	movs	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	18c3      	adds	r3, r0, r3
 8003d56:	185b      	adds	r3, r3, r1
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d5c:	193b      	adds	r3, r7, r4
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	23b0      	movs	r3, #176	@ 0xb0
 8003d64:	0059      	lsls	r1, r3, #1
 8003d66:	0013      	movs	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	18c3      	adds	r3, r0, r3
 8003d70:	185b      	adds	r3, r3, r1
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	23b2      	movs	r3, #178	@ 0xb2
 8003d7e:	0059      	lsls	r1, r3, #1
 8003d80:	0013      	movs	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	18c3      	adds	r3, r0, r3
 8003d8a:	185b      	adds	r3, r3, r1
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d90:	193b      	adds	r3, r7, r4
 8003d92:	781a      	ldrb	r2, [r3, #0]
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	23b4      	movs	r3, #180	@ 0xb4
 8003d98:	0059      	lsls	r1, r3, #1
 8003d9a:	0013      	movs	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	18c3      	adds	r3, r0, r3
 8003da4:	185b      	adds	r3, r3, r1
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003daa:	193b      	adds	r3, r7, r4
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	3201      	adds	r2, #1
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	791b      	ldrb	r3, [r3, #4]
 8003db8:	220f      	movs	r2, #15
 8003dba:	18ba      	adds	r2, r7, r2
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3a1      	bcc.n	8003d06 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	f003 fb2a 	bl	8007424 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <HAL_PCD_Init+0x1e4>)
 8003dda:	2101      	movs	r1, #1
 8003ddc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7a9b      	ldrb	r3, [r3, #10]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d103      	bne.n	8003dee <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f001 fd1f 	bl	800582c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b005      	add	sp, #20
 8003df6:	bd90      	pop	{r4, r7, pc}
 8003df8:	00000291 	.word	0x00000291

08003dfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	23a4      	movs	r3, #164	@ 0xa4
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	5cd3      	ldrb	r3, [r2, r3]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_PCD_Start+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e014      	b.n	8003e3e <HAL_PCD_Start+0x42>
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	23a4      	movs	r3, #164	@ 0xa4
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	0018      	movs	r0, r3
 8003e24:	f003 face 	bl	80073c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f005 fac3 	bl	80093b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	23a4      	movs	r3, #164	@ 0xa4
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	2100      	movs	r1, #0
 8003e3a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f005 fac5 	bl	80093e4 <USB_ReadInterrupts>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	2380      	movs	r3, #128	@ 0x80
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	4013      	ands	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 fb60 	bl	8004530 <PCD_EP_ISR_Handler>

    return;
 8003e70:	e11d      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	2380      	movs	r3, #128	@ 0x80
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d015      	beq.n	8003ea8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2244      	movs	r2, #68	@ 0x44
 8003e82:	5a9b      	ldrh	r3, [r3, r2]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	498a      	ldr	r1, [pc, #552]	@ (80040b4 <HAL_PCD_IRQHandler+0x26c>)
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	b291      	uxth	r1, r2
 8003e90:	2244      	movs	r2, #68	@ 0x44
 8003e92:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	0018      	movs	r0, r3
 8003e98:	f007 fb05 	bl	800b4a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 f915 	bl	80040d0 <HAL_PCD_SetAddress>

    return;
 8003ea6:	e102      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	2380      	movs	r3, #128	@ 0x80
 8003eac:	01db      	lsls	r3, r3, #7
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d00c      	beq.n	8003ecc <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2244      	movs	r2, #68	@ 0x44
 8003eb8:	5a9b      	ldrh	r3, [r3, r2]
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	497d      	ldr	r1, [pc, #500]	@ (80040b8 <HAL_PCD_IRQHandler+0x270>)
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	b291      	uxth	r1, r2
 8003ec6:	2244      	movs	r2, #68	@ 0x44
 8003ec8:	5299      	strh	r1, [r3, r2]

    return;
 8003eca:	e0f0      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	2380      	movs	r3, #128	@ 0x80
 8003ed0:	019b      	lsls	r3, r3, #6
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2244      	movs	r2, #68	@ 0x44
 8003edc:	5a9b      	ldrh	r3, [r3, r2]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4975      	ldr	r1, [pc, #468]	@ (80040bc <HAL_PCD_IRQHandler+0x274>)
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	b291      	uxth	r1, r2
 8003eea:	2244      	movs	r2, #68	@ 0x44
 8003eec:	5299      	strh	r1, [r3, r2]

    return;
 8003eee:	e0de      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	015b      	lsls	r3, r3, #5
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d038      	beq.n	8003f6c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2240      	movs	r2, #64	@ 0x40
 8003f00:	5a9b      	ldrh	r3, [r3, r2]
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2104      	movs	r1, #4
 8003f0a:	438a      	bics	r2, r1
 8003f0c:	b291      	uxth	r1, r2
 8003f0e:	2240      	movs	r2, #64	@ 0x40
 8003f10:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2240      	movs	r2, #64	@ 0x40
 8003f18:	5a9b      	ldrh	r3, [r3, r2]
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2108      	movs	r1, #8
 8003f22:	438a      	bics	r2, r1
 8003f24:	b291      	uxth	r1, r2
 8003f26:	2240      	movs	r2, #64	@ 0x40
 8003f28:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	23b2      	movs	r3, #178	@ 0xb2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	5cd3      	ldrb	r3, [r2, r3]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d109      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	23b2      	movs	r3, #178	@ 0xb2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2100      	movs	r1, #0
 8003f44:	0018      	movs	r0, r3
 8003f46:	f001 fc9b 	bl	8005880 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f007 faeb 	bl	800b528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2244      	movs	r2, #68	@ 0x44
 8003f58:	5a9b      	ldrh	r3, [r3, r2]
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4957      	ldr	r1, [pc, #348]	@ (80040c0 <HAL_PCD_IRQHandler+0x278>)
 8003f62:	400a      	ands	r2, r1
 8003f64:	b291      	uxth	r1, r2
 8003f66:	2244      	movs	r2, #68	@ 0x44
 8003f68:	5299      	strh	r1, [r3, r2]

    return;
 8003f6a:	e0a0      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	2380      	movs	r3, #128	@ 0x80
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	4013      	ands	r3, r2
 8003f74:	d028      	beq.n	8003fc8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2240      	movs	r2, #64	@ 0x40
 8003f7c:	5a9b      	ldrh	r3, [r3, r2]
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2108      	movs	r1, #8
 8003f86:	430a      	orrs	r2, r1
 8003f88:	b291      	uxth	r1, r2
 8003f8a:	2240      	movs	r2, #64	@ 0x40
 8003f8c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2244      	movs	r2, #68	@ 0x44
 8003f94:	5a9b      	ldrh	r3, [r3, r2]
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4949      	ldr	r1, [pc, #292]	@ (80040c4 <HAL_PCD_IRQHandler+0x27c>)
 8003f9e:	400a      	ands	r2, r1
 8003fa0:	b291      	uxth	r1, r2
 8003fa2:	2244      	movs	r2, #68	@ 0x44
 8003fa4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2240      	movs	r2, #64	@ 0x40
 8003fac:	5a9b      	ldrh	r3, [r3, r2]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	b291      	uxth	r1, r2
 8003fba:	2240      	movs	r2, #64	@ 0x40
 8003fbc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f007 fa95 	bl	800b4f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003fc6:	e072      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2280      	movs	r2, #128	@ 0x80
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d046      	beq.n	800405e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2244      	movs	r2, #68	@ 0x44
 8003fd6:	5a9b      	ldrh	r3, [r3, r2]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2180      	movs	r1, #128	@ 0x80
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	b291      	uxth	r1, r2
 8003fe4:	2244      	movs	r2, #68	@ 0x44
 8003fe6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	23b2      	movs	r3, #178	@ 0xb2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	5cd3      	ldrb	r3, [r2, r3]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d12f      	bne.n	8004054 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2240      	movs	r2, #64	@ 0x40
 8003ffa:	5a9b      	ldrh	r3, [r3, r2]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2104      	movs	r1, #4
 8004004:	430a      	orrs	r2, r1
 8004006:	b291      	uxth	r1, r2
 8004008:	2240      	movs	r2, #64	@ 0x40
 800400a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2240      	movs	r2, #64	@ 0x40
 8004012:	5a9b      	ldrh	r3, [r3, r2]
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2108      	movs	r1, #8
 800401c:	430a      	orrs	r2, r1
 800401e:	b291      	uxth	r1, r2
 8004020:	2240      	movs	r2, #64	@ 0x40
 8004022:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	23b2      	movs	r3, #178	@ 0xb2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	2101      	movs	r1, #1
 800402c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2254      	movs	r2, #84	@ 0x54
 8004034:	5a9b      	ldrh	r3, [r3, r2]
 8004036:	b29b      	uxth	r3, r3
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	223c      	movs	r2, #60	@ 0x3c
 800403c:	4013      	ands	r3, r2
 800403e:	0019      	movs	r1, r3
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	23b3      	movs	r3, #179	@ 0xb3
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2101      	movs	r1, #1
 800404c:	0018      	movs	r0, r3
 800404e:	f001 fc17 	bl	8005880 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004052:	e02c      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0018      	movs	r0, r3
 8004058:	f007 fa4a 	bl	800b4f0 <HAL_PCD_SuspendCallback>
    return;
 800405c:	e027      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4013      	ands	r3, r2
 8004066:	d010      	beq.n	800408a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2244      	movs	r2, #68	@ 0x44
 800406e:	5a9b      	ldrh	r3, [r3, r2]
 8004070:	b29a      	uxth	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4914      	ldr	r1, [pc, #80]	@ (80040c8 <HAL_PCD_IRQHandler+0x280>)
 8004078:	400a      	ands	r2, r1
 800407a:	b291      	uxth	r1, r2
 800407c:	2244      	movs	r2, #68	@ 0x44
 800407e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	0018      	movs	r0, r3
 8004084:	f007 fa00 	bl	800b488 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004088:	e011      	b.n	80040ae <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	2380      	movs	r3, #128	@ 0x80
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4013      	ands	r3, r2
 8004092:	d00c      	beq.n	80040ae <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2244      	movs	r2, #68	@ 0x44
 800409a:	5a9b      	ldrh	r3, [r3, r2]
 800409c:	b29a      	uxth	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	490a      	ldr	r1, [pc, #40]	@ (80040cc <HAL_PCD_IRQHandler+0x284>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	b291      	uxth	r1, r2
 80040a8:	2244      	movs	r2, #68	@ 0x44
 80040aa:	5299      	strh	r1, [r3, r2]

    return;
 80040ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b004      	add	sp, #16
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	fffffbff 	.word	0xfffffbff
 80040b8:	ffffbfff 	.word	0xffffbfff
 80040bc:	ffffdfff 	.word	0xffffdfff
 80040c0:	ffffefff 	.word	0xffffefff
 80040c4:	fffff7ff 	.word	0xfffff7ff
 80040c8:	fffffdff 	.word	0xfffffdff
 80040cc:	fffffeff 	.word	0xfffffeff

080040d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	000a      	movs	r2, r1
 80040da:	1cfb      	adds	r3, r7, #3
 80040dc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	23a4      	movs	r3, #164	@ 0xa4
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	5cd3      	ldrb	r3, [r2, r3]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_PCD_SetAddress+0x1e>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e016      	b.n	800411c <HAL_PCD_SetAddress+0x4c>
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	23a4      	movs	r3, #164	@ 0xa4
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	2101      	movs	r1, #1
 80040f6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1cfa      	adds	r2, r7, #3
 80040fc:	7812      	ldrb	r2, [r2, #0]
 80040fe:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	1cfb      	adds	r3, r7, #3
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	0019      	movs	r1, r3
 800410a:	0010      	movs	r0, r2
 800410c:	f005 f940 	bl	8009390 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	23a4      	movs	r3, #164	@ 0xa4
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	2100      	movs	r1, #0
 8004118:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	000c      	movs	r4, r1
 800412e:	0010      	movs	r0, r2
 8004130:	0019      	movs	r1, r3
 8004132:	1cfb      	adds	r3, r7, #3
 8004134:	1c22      	adds	r2, r4, #0
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	003b      	movs	r3, r7
 800413a:	1c02      	adds	r2, r0, #0
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	1cbb      	adds	r3, r7, #2
 8004140:	1c0a      	adds	r2, r1, #0
 8004142:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004144:	230b      	movs	r3, #11
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800414c:	1cfb      	adds	r3, r7, #3
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b25b      	sxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	da0f      	bge.n	8004176 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004156:	1cfb      	adds	r3, r7, #3
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2207      	movs	r2, #7
 800415c:	401a      	ands	r2, r3
 800415e:	0013      	movs	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	189b      	adds	r3, r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	3310      	adds	r3, #16
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	18d3      	adds	r3, r2, r3
 800416c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	705a      	strb	r2, [r3, #1]
 8004174:	e00f      	b.n	8004196 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004176:	1cfb      	adds	r3, r7, #3
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2207      	movs	r2, #7
 800417c:	401a      	ands	r2, r3
 800417e:	0013      	movs	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	189b      	adds	r3, r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	3351      	adds	r3, #81	@ 0x51
 8004188:	33ff      	adds	r3, #255	@ 0xff
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	18d3      	adds	r3, r2, r3
 800418e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004196:	1cfb      	adds	r3, r7, #3
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2207      	movs	r2, #7
 800419c:	4013      	ands	r3, r2
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041a4:	003b      	movs	r3, r7
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1cba      	adds	r2, r7, #2
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041b4:	1cbb      	adds	r3, r7, #2
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d102      	bne.n	80041c2 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	23a4      	movs	r3, #164	@ 0xa4
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	5cd3      	ldrb	r3, [r2, r3]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_PCD_EP_Open+0xae>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e013      	b.n	80041fa <HAL_PCD_EP_Open+0xd6>
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	23a4      	movs	r3, #164	@ 0xa4
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	2101      	movs	r1, #1
 80041da:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f003 f939 	bl	800745c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	23a4      	movs	r3, #164	@ 0xa4
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	2100      	movs	r1, #0
 80041f2:	54d1      	strb	r1, [r2, r3]

  return ret;
 80041f4:	230b      	movs	r3, #11
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	781b      	ldrb	r3, [r3, #0]
}
 80041fa:	0018      	movs	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b005      	add	sp, #20
 8004200:	bd90      	pop	{r4, r7, pc}

08004202 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	000a      	movs	r2, r1
 800420c:	1cfb      	adds	r3, r7, #3
 800420e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004210:	1cfb      	adds	r3, r7, #3
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	b25b      	sxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	da0f      	bge.n	800423a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800421a:	1cfb      	adds	r3, r7, #3
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2207      	movs	r2, #7
 8004220:	401a      	ands	r2, r3
 8004222:	0013      	movs	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	189b      	adds	r3, r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	3310      	adds	r3, #16
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	18d3      	adds	r3, r2, r3
 8004230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	705a      	strb	r2, [r3, #1]
 8004238:	e00f      	b.n	800425a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800423a:	1cfb      	adds	r3, r7, #3
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2207      	movs	r2, #7
 8004240:	401a      	ands	r2, r3
 8004242:	0013      	movs	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	189b      	adds	r3, r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	3351      	adds	r3, #81	@ 0x51
 800424c:	33ff      	adds	r3, #255	@ 0xff
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	18d3      	adds	r3, r2, r3
 8004252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800425a:	1cfb      	adds	r3, r7, #3
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2207      	movs	r2, #7
 8004260:	4013      	ands	r3, r2
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	23a4      	movs	r3, #164	@ 0xa4
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_PCD_EP_Close+0x76>
 8004274:	2302      	movs	r3, #2
 8004276:	e011      	b.n	800429c <HAL_PCD_EP_Close+0x9a>
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	23a4      	movs	r3, #164	@ 0xa4
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	2101      	movs	r1, #1
 8004280:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	0011      	movs	r1, r2
 800428a:	0018      	movs	r0, r3
 800428c:	f003 fc8e 	bl	8007bac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	23a4      	movs	r3, #164	@ 0xa4
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	2100      	movs	r1, #0
 8004298:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	b004      	add	sp, #16
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	200b      	movs	r0, #11
 80042b2:	183b      	adds	r3, r7, r0
 80042b4:	1c0a      	adds	r2, r1, #0
 80042b6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b8:	0001      	movs	r1, r0
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2207      	movs	r2, #7
 80042c0:	401a      	ands	r2, r3
 80042c2:	0013      	movs	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	3351      	adds	r3, #81	@ 0x51
 80042cc:	33ff      	adds	r3, #255	@ 0xff
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	18d3      	adds	r3, r2, r3
 80042d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2200      	movs	r2, #0
 80042e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2207      	movs	r2, #7
 80042f2:	4013      	ands	r3, r2
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	0011      	movs	r1, r2
 8004302:	0018      	movs	r0, r3
 8004304:	f003 fe12 	bl	8007f2c <USB_EPStartXfer>

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b006      	add	sp, #24
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	000a      	movs	r2, r1
 800431c:	1cfb      	adds	r3, r7, #3
 800431e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004320:	1cfb      	adds	r3, r7, #3
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2207      	movs	r2, #7
 8004326:	401a      	ands	r2, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	23b6      	movs	r3, #182	@ 0xb6
 800432c:	0059      	lsls	r1, r3, #1
 800432e:	0013      	movs	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	189b      	adds	r3, r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	18c3      	adds	r3, r0, r3
 8004338:	185b      	adds	r3, r3, r1
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	200b      	movs	r0, #11
 8004352:	183b      	adds	r3, r7, r0
 8004354:	1c0a      	adds	r2, r1, #0
 8004356:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004358:	183b      	adds	r3, r7, r0
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2207      	movs	r2, #7
 800435e:	401a      	ands	r2, r3
 8004360:	0013      	movs	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	189b      	adds	r3, r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	3310      	adds	r3, #16
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	18d3      	adds	r3, r2, r3
 800436e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2224      	movs	r2, #36	@ 0x24
 8004380:	2101      	movs	r1, #1
 8004382:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2201      	movs	r2, #1
 8004394:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004396:	183b      	adds	r3, r7, r0
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2207      	movs	r2, #7
 800439c:	4013      	ands	r3, r2
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	0011      	movs	r1, r2
 80043ac:	0018      	movs	r0, r3
 80043ae:	f003 fdbd 	bl	8007f2c <USB_EPStartXfer>

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b006      	add	sp, #24
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	000a      	movs	r2, r1
 80043c6:	1cfb      	adds	r3, r7, #3
 80043c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043ca:	1cfb      	adds	r3, r7, #3
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2207      	movs	r2, #7
 80043d0:	4013      	ands	r3, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	7912      	ldrb	r2, [r2, #4]
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e046      	b.n	800446c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043de:	1cfb      	adds	r3, r7, #3
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	da0f      	bge.n	8004408 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e8:	1cfb      	adds	r3, r7, #3
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2207      	movs	r2, #7
 80043ee:	401a      	ands	r2, r3
 80043f0:	0013      	movs	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	3310      	adds	r3, #16
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	18d3      	adds	r3, r2, r3
 80043fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	705a      	strb	r2, [r3, #1]
 8004406:	e00d      	b.n	8004424 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004408:	1cfb      	adds	r3, r7, #3
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	0013      	movs	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	189b      	adds	r3, r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	3351      	adds	r3, #81	@ 0x51
 8004416:	33ff      	adds	r3, #255	@ 0xff
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	18d3      	adds	r3, r2, r3
 800441c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800442a:	1cfb      	adds	r3, r7, #3
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2207      	movs	r2, #7
 8004430:	4013      	ands	r3, r2
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	23a4      	movs	r3, #164	@ 0xa4
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_PCD_EP_SetStall+0x8c>
 8004444:	2302      	movs	r3, #2
 8004446:	e011      	b.n	800446c <HAL_PCD_EP_SetStall+0xb0>
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	23a4      	movs	r3, #164	@ 0xa4
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	2101      	movs	r1, #1
 8004450:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	0011      	movs	r1, r2
 800445a:	0018      	movs	r0, r3
 800445c:	f004 fe96 	bl	800918c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	23a4      	movs	r3, #164	@ 0xa4
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	2100      	movs	r1, #0
 8004468:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b004      	add	sp, #16
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	000a      	movs	r2, r1
 800447e:	1cfb      	adds	r3, r7, #3
 8004480:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004482:	1cfb      	adds	r3, r7, #3
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	220f      	movs	r2, #15
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	7912      	ldrb	r2, [r2, #4]
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e048      	b.n	8004528 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004496:	1cfb      	adds	r3, r7, #3
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b25b      	sxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	da0f      	bge.n	80044c0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a0:	1cfb      	adds	r3, r7, #3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2207      	movs	r2, #7
 80044a6:	401a      	ands	r2, r3
 80044a8:	0013      	movs	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	3310      	adds	r3, #16
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	18d3      	adds	r3, r2, r3
 80044b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	705a      	strb	r2, [r3, #1]
 80044be:	e00f      	b.n	80044e0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044c0:	1cfb      	adds	r3, r7, #3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2207      	movs	r2, #7
 80044c6:	401a      	ands	r2, r3
 80044c8:	0013      	movs	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	189b      	adds	r3, r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	3351      	adds	r3, #81	@ 0x51
 80044d2:	33ff      	adds	r3, #255	@ 0xff
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	18d3      	adds	r3, r2, r3
 80044d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e6:	1cfb      	adds	r3, r7, #3
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2207      	movs	r2, #7
 80044ec:	4013      	ands	r3, r2
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	23a4      	movs	r3, #164	@ 0xa4
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	5cd3      	ldrb	r3, [r2, r3]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_PCD_EP_ClrStall+0x90>
 8004500:	2302      	movs	r3, #2
 8004502:	e011      	b.n	8004528 <HAL_PCD_EP_ClrStall+0xb4>
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	23a4      	movs	r3, #164	@ 0xa4
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	2101      	movs	r1, #1
 800450c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	0011      	movs	r1, r2
 8004516:	0018      	movs	r0, r3
 8004518:	f004 fe88 	bl	800922c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	23a4      	movs	r3, #164	@ 0xa4
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	2100      	movs	r1, #0
 8004524:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	0018      	movs	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	b004      	add	sp, #16
 800452e:	bd80      	pop	{r7, pc}

08004530 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	b096      	sub	sp, #88	@ 0x58
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004538:	f000 fbea 	bl	8004d10 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2048      	movs	r0, #72	@ 0x48
 8004542:	183b      	adds	r3, r7, r0
 8004544:	2144      	movs	r1, #68	@ 0x44
 8004546:	5a52      	ldrh	r2, [r2, r1]
 8004548:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800454a:	183b      	adds	r3, r7, r0
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	244f      	movs	r4, #79	@ 0x4f
 8004552:	193b      	adds	r3, r7, r4
 8004554:	210f      	movs	r1, #15
 8004556:	400a      	ands	r2, r1
 8004558:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800455a:	193b      	adds	r3, r7, r4
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d000      	beq.n	8004564 <PCD_EP_ISR_Handler+0x34>
 8004562:	e18d      	b.n	8004880 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004564:	183b      	adds	r3, r7, r0
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	2210      	movs	r2, #16
 800456a:	4013      	ands	r3, r2
 800456c:	d152      	bne.n	8004614 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29a      	uxth	r2, r3
 8004576:	200e      	movs	r0, #14
 8004578:	183b      	adds	r3, r7, r0
 800457a:	49ba      	ldr	r1, [pc, #744]	@ (8004864 <PCD_EP_ISR_Handler+0x334>)
 800457c:	400a      	ands	r2, r1
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	183a      	adds	r2, r7, r0
 8004586:	8812      	ldrh	r2, [r2, #0]
 8004588:	49b7      	ldr	r1, [pc, #732]	@ (8004868 <PCD_EP_ISR_Handler+0x338>)
 800458a:	430a      	orrs	r2, r1
 800458c:	b292      	uxth	r2, r2
 800458e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3310      	adds	r3, #16
 8004594:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2250      	movs	r2, #80	@ 0x50
 800459c:	5a9b      	ldrh	r3, [r3, r2]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	001a      	movs	r2, r3
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	18d2      	adds	r2, r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	18d3      	adds	r3, r2, r3
 80045b0:	4aae      	ldr	r2, [pc, #696]	@ (800486c <PCD_EP_ISR_Handler+0x33c>)
 80045b2:	4694      	mov	ip, r2
 80045b4:	4463      	add	r3, ip
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	059b      	lsls	r3, r3, #22
 80045ba:	0d9a      	lsrs	r2, r3, #22
 80045bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80045c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	18d2      	adds	r2, r2, r3
 80045ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2100      	movs	r1, #0
 80045d2:	0018      	movs	r0, r3
 80045d4:	f006 ff3a 	bl	800b44c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	7b1b      	ldrb	r3, [r3, #12]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <PCD_EP_ISR_Handler+0xb6>
 80045e2:	f000 fb95 	bl	8004d10 <PCD_EP_ISR_Handler+0x7e0>
 80045e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <PCD_EP_ISR_Handler+0xc2>
 80045ee:	f000 fb8f 	bl	8004d10 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	7b1b      	ldrb	r3, [r3, #12]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2280      	movs	r2, #128	@ 0x80
 80045fa:	4252      	negs	r2, r2
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0011      	movs	r1, r2
 8004606:	224c      	movs	r2, #76	@ 0x4c
 8004608:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	731a      	strb	r2, [r3, #12]
 8004610:	f000 fb7e 	bl	8004d10 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3351      	adds	r3, #81	@ 0x51
 8004618:	33ff      	adds	r3, #255	@ 0xff
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	214c      	movs	r1, #76	@ 0x4c
 8004622:	187b      	adds	r3, r7, r1
 8004624:	8812      	ldrh	r2, [r2, #0]
 8004626:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004628:	187b      	adds	r3, r7, r1
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	4013      	ands	r3, r2
 8004632:	d037      	beq.n	80046a4 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2250      	movs	r2, #80	@ 0x50
 800463a:	5a9b      	ldrh	r3, [r3, r2]
 800463c:	b29b      	uxth	r3, r3
 800463e:	001a      	movs	r2, r3
 8004640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	18d2      	adds	r2, r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	18d3      	adds	r3, r2, r3
 800464e:	4a88      	ldr	r2, [pc, #544]	@ (8004870 <PCD_EP_ISR_Handler+0x340>)
 8004650:	4694      	mov	ip, r2
 8004652:	4463      	add	r3, ip
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	059b      	lsls	r3, r3, #22
 8004658:	0d9a      	lsrs	r2, r3, #22
 800465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	22a6      	movs	r2, #166	@ 0xa6
 8004666:	0092      	lsls	r2, r2, #2
 8004668:	1899      	adds	r1, r3, r2
 800466a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004670:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004672:	b29b      	uxth	r3, r3
 8004674:	f004 ff0e 	bl	8009494 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29a      	uxth	r2, r3
 8004680:	2010      	movs	r0, #16
 8004682:	183b      	adds	r3, r7, r0
 8004684:	497b      	ldr	r1, [pc, #492]	@ (8004874 <PCD_EP_ISR_Handler+0x344>)
 8004686:	400a      	ands	r2, r1
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	183a      	adds	r2, r7, r0
 8004690:	8812      	ldrh	r2, [r2, #0]
 8004692:	2180      	movs	r1, #128	@ 0x80
 8004694:	430a      	orrs	r2, r1
 8004696:	b292      	uxth	r2, r2
 8004698:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f006 fe9f 	bl	800b3e0 <HAL_PCD_SetupStageCallback>
 80046a2:	e335      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046a4:	234c      	movs	r3, #76	@ 0x4c
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	2200      	movs	r2, #0
 80046aa:	5e9b      	ldrsh	r3, [r3, r2]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	db00      	blt.n	80046b2 <PCD_EP_ISR_Handler+0x182>
 80046b0:	e32e      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	201e      	movs	r0, #30
 80046bc:	183b      	adds	r3, r7, r0
 80046be:	496d      	ldr	r1, [pc, #436]	@ (8004874 <PCD_EP_ISR_Handler+0x344>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	183a      	adds	r2, r7, r0
 80046ca:	8812      	ldrh	r2, [r2, #0]
 80046cc:	2180      	movs	r1, #128	@ 0x80
 80046ce:	430a      	orrs	r2, r1
 80046d0:	b292      	uxth	r2, r2
 80046d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2250      	movs	r2, #80	@ 0x50
 80046da:	5a9b      	ldrh	r3, [r3, r2]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	001a      	movs	r2, r3
 80046e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	18d2      	adds	r2, r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	4a60      	ldr	r2, [pc, #384]	@ (8004870 <PCD_EP_ISR_Handler+0x340>)
 80046f0:	4694      	mov	ip, r2
 80046f2:	4463      	add	r3, ip
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	059b      	lsls	r3, r3, #22
 80046f8:	0d9a      	lsrs	r2, r3, #22
 80046fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80046fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <PCD_EP_ISR_Handler+0x20c>
 8004706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d016      	beq.n	800473c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004714:	6959      	ldr	r1, [r3, #20]
 8004716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004718:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800471a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800471c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800471e:	b29b      	uxth	r3, r3
 8004720:	f004 feb8 	bl	8009494 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	18d2      	adds	r2, r2, r3
 800472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004730:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2100      	movs	r1, #0
 8004736:	0018      	movs	r0, r3
 8004738:	f006 fe67 	bl	800b40a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	214c      	movs	r1, #76	@ 0x4c
 8004742:	187b      	adds	r3, r7, r1
 8004744:	8812      	ldrh	r2, [r2, #0]
 8004746:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004748:	187b      	adds	r3, r7, r1
 800474a:	881a      	ldrh	r2, [r3, #0]
 800474c:	2380      	movs	r3, #128	@ 0x80
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	4013      	ands	r3, r2
 8004752:	d000      	beq.n	8004756 <PCD_EP_ISR_Handler+0x226>
 8004754:	e2dc      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
 8004756:	187b      	adds	r3, r7, r1
 8004758:	881a      	ldrh	r2, [r3, #0]
 800475a:	23c0      	movs	r3, #192	@ 0xc0
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	401a      	ands	r2, r3
 8004760:	23c0      	movs	r3, #192	@ 0xc0
 8004762:	019b      	lsls	r3, r3, #6
 8004764:	429a      	cmp	r2, r3
 8004766:	d100      	bne.n	800476a <PCD_EP_ISR_Handler+0x23a>
 8004768:	e2d2      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2250      	movs	r2, #80	@ 0x50
 8004776:	5a9b      	ldrh	r3, [r3, r2]
 8004778:	b29b      	uxth	r3, r3
 800477a:	001a      	movs	r2, r3
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	189b      	adds	r3, r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4a3a      	ldr	r2, [pc, #232]	@ (8004870 <PCD_EP_ISR_Handler+0x340>)
 8004786:	4694      	mov	ip, r2
 8004788:	4463      	add	r3, ip
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	059b      	lsls	r3, r3, #22
 8004794:	0d9b      	lsrs	r3, r3, #22
 8004796:	b29a      	uxth	r2, r3
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d108      	bne.n	80047b6 <PCD_EP_ISR_Handler+0x286>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004868 <PCD_EP_ISR_Handler+0x338>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	e035      	b.n	8004822 <PCD_EP_ISR_Handler+0x2f2>
 80047b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80047bc:	d817      	bhi.n	80047ee <PCD_EP_ISR_Handler+0x2be>
 80047be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2201      	movs	r2, #1
 80047cc:	4013      	ands	r3, r2
 80047ce:	d002      	beq.n	80047d6 <PCD_EP_ISR_Handler+0x2a6>
 80047d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d2:	3301      	adds	r3, #1
 80047d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047de:	b29b      	uxth	r3, r3
 80047e0:	029b      	lsls	r3, r3, #10
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4313      	orrs	r3, r2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	e019      	b.n	8004822 <PCD_EP_ISR_Handler+0x2f2>
 80047ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	221f      	movs	r2, #31
 80047fc:	4013      	ands	r3, r2
 80047fe:	d102      	bne.n	8004806 <PCD_EP_ISR_Handler+0x2d6>
 8004800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004802:	3b01      	subs	r3, #1
 8004804:	647b      	str	r3, [r7, #68]	@ 0x44
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29a      	uxth	r2, r3
 800480c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480e:	b29b      	uxth	r3, r3
 8004810:	029b      	lsls	r3, r3, #10
 8004812:	b29b      	uxth	r3, r3
 8004814:	4313      	orrs	r3, r2
 8004816:	b29b      	uxth	r3, r3
 8004818:	4a13      	ldr	r2, [pc, #76]	@ (8004868 <PCD_EP_ISR_Handler+0x338>)
 800481a:	4313      	orrs	r3, r2
 800481c:	b29a      	uxth	r2, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29a      	uxth	r2, r3
 800482a:	2012      	movs	r0, #18
 800482c:	183b      	adds	r3, r7, r0
 800482e:	4912      	ldr	r1, [pc, #72]	@ (8004878 <PCD_EP_ISR_Handler+0x348>)
 8004830:	400a      	ands	r2, r1
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	183b      	adds	r3, r7, r0
 8004836:	183a      	adds	r2, r7, r0
 8004838:	8812      	ldrh	r2, [r2, #0]
 800483a:	2180      	movs	r1, #128	@ 0x80
 800483c:	0149      	lsls	r1, r1, #5
 800483e:	404a      	eors	r2, r1
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	183b      	adds	r3, r7, r0
 8004844:	183a      	adds	r2, r7, r0
 8004846:	8812      	ldrh	r2, [r2, #0]
 8004848:	2180      	movs	r1, #128	@ 0x80
 800484a:	0189      	lsls	r1, r1, #6
 800484c:	404a      	eors	r2, r1
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	183a      	adds	r2, r7, r0
 8004856:	8812      	ldrh	r2, [r2, #0]
 8004858:	4908      	ldr	r1, [pc, #32]	@ (800487c <PCD_EP_ISR_Handler+0x34c>)
 800485a:	430a      	orrs	r2, r1
 800485c:	b292      	uxth	r2, r2
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	e256      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	ffff8f0f 	.word	0xffff8f0f
 8004868:	ffff8000 	.word	0xffff8000
 800486c:	00000402 	.word	0x00000402
 8004870:	00000406 	.word	0x00000406
 8004874:	00000f8f 	.word	0x00000f8f
 8004878:	ffffbf8f 	.word	0xffffbf8f
 800487c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	001a      	movs	r2, r3
 8004886:	204f      	movs	r0, #79	@ 0x4f
 8004888:	183b      	adds	r3, r7, r0
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	18d2      	adds	r2, r2, r3
 8004890:	214c      	movs	r1, #76	@ 0x4c
 8004892:	187b      	adds	r3, r7, r1
 8004894:	8812      	ldrh	r2, [r2, #0]
 8004896:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004898:	187b      	adds	r3, r7, r1
 800489a:	2200      	movs	r2, #0
 800489c:	5e9b      	ldrsh	r3, [r3, r2]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	db00      	blt.n	80048a4 <PCD_EP_ISR_Handler+0x374>
 80048a2:	e0fa      	b.n	8004a9a <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	001a      	movs	r2, r3
 80048aa:	183b      	adds	r3, r7, r0
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	18d3      	adds	r3, r2, r3
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	244a      	movs	r4, #74	@ 0x4a
 80048b8:	193b      	adds	r3, r7, r4
 80048ba:	49d1      	ldr	r1, [pc, #836]	@ (8004c00 <PCD_EP_ISR_Handler+0x6d0>)
 80048bc:	400a      	ands	r2, r1
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	001a      	movs	r2, r3
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	18d3      	adds	r3, r2, r3
 80048ce:	193a      	adds	r2, r7, r4
 80048d0:	8812      	ldrh	r2, [r2, #0]
 80048d2:	2180      	movs	r1, #128	@ 0x80
 80048d4:	430a      	orrs	r2, r1
 80048d6:	b292      	uxth	r2, r2
 80048d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80048da:	183b      	adds	r3, r7, r0
 80048dc:	781a      	ldrb	r2, [r3, #0]
 80048de:	0013      	movs	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	3351      	adds	r3, #81	@ 0x51
 80048e8:	33ff      	adds	r3, #255	@ 0xff
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	18d3      	adds	r3, r2, r3
 80048ee:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80048f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f2:	7b1b      	ldrb	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d125      	bne.n	8004944 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2250      	movs	r2, #80	@ 0x50
 80048fe:	5a9b      	ldrh	r3, [r3, r2]
 8004900:	b29b      	uxth	r3, r3
 8004902:	001a      	movs	r2, r3
 8004904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	18d2      	adds	r2, r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	18d3      	adds	r3, r2, r3
 8004912:	4abc      	ldr	r2, [pc, #752]	@ (8004c04 <PCD_EP_ISR_Handler+0x6d4>)
 8004914:	4694      	mov	ip, r2
 8004916:	4463      	add	r3, ip
 8004918:	881a      	ldrh	r2, [r3, #0]
 800491a:	2450      	movs	r4, #80	@ 0x50
 800491c:	193b      	adds	r3, r7, r4
 800491e:	0592      	lsls	r2, r2, #22
 8004920:	0d92      	lsrs	r2, r2, #22
 8004922:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004924:	193b      	adds	r3, r7, r4
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d100      	bne.n	800492e <PCD_EP_ISR_Handler+0x3fe>
 800492c:	e08d      	b.n	8004a4a <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004934:	6959      	ldr	r1, [r3, #20]
 8004936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004938:	88da      	ldrh	r2, [r3, #6]
 800493a:	193b      	adds	r3, r7, r4
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	f004 fda9 	bl	8009494 <USB_ReadPMA>
 8004942:	e082      	b.n	8004a4a <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004946:	78db      	ldrb	r3, [r3, #3]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d10c      	bne.n	8004966 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800494c:	2350      	movs	r3, #80	@ 0x50
 800494e:	18fc      	adds	r4, r7, r3
 8004950:	234c      	movs	r3, #76	@ 0x4c
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	881a      	ldrh	r2, [r3, #0]
 8004956:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	0018      	movs	r0, r3
 800495c:	f000 f9ec 	bl	8004d38 <HAL_PCD_EP_DB_Receive>
 8004960:	0003      	movs	r3, r0
 8004962:	8023      	strh	r3, [r4, #0]
 8004964:	e071      	b.n	8004a4a <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	001a      	movs	r2, r3
 800496c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	18d3      	adds	r3, r2, r3
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b29a      	uxth	r2, r3
 8004978:	2052      	movs	r0, #82	@ 0x52
 800497a:	183b      	adds	r3, r7, r0
 800497c:	49a2      	ldr	r1, [pc, #648]	@ (8004c08 <PCD_EP_ISR_Handler+0x6d8>)
 800497e:	400a      	ands	r2, r1
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	001a      	movs	r2, r3
 8004988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	18d3      	adds	r3, r2, r3
 8004990:	183a      	adds	r2, r7, r0
 8004992:	8812      	ldrh	r2, [r2, #0]
 8004994:	499d      	ldr	r1, [pc, #628]	@ (8004c0c <PCD_EP_ISR_Handler+0x6dc>)
 8004996:	430a      	orrs	r2, r1
 8004998:	b292      	uxth	r2, r2
 800499a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	001a      	movs	r2, r3
 80049a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	18d3      	adds	r3, r2, r3
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	001a      	movs	r2, r3
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	4013      	ands	r3, r2
 80049b6:	d024      	beq.n	8004a02 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2250      	movs	r2, #80	@ 0x50
 80049be:	5a9b      	ldrh	r3, [r3, r2]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	001a      	movs	r2, r3
 80049c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	18d2      	adds	r2, r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	18d3      	adds	r3, r2, r3
 80049d2:	4a8f      	ldr	r2, [pc, #572]	@ (8004c10 <PCD_EP_ISR_Handler+0x6e0>)
 80049d4:	4694      	mov	ip, r2
 80049d6:	4463      	add	r3, ip
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	2450      	movs	r4, #80	@ 0x50
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	0592      	lsls	r2, r2, #22
 80049e0:	0d92      	lsrs	r2, r2, #22
 80049e2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80049e4:	193b      	adds	r3, r7, r4
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02e      	beq.n	8004a4a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f2:	6959      	ldr	r1, [r3, #20]
 80049f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f6:	891a      	ldrh	r2, [r3, #8]
 80049f8:	193b      	adds	r3, r7, r4
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	f004 fd4a 	bl	8009494 <USB_ReadPMA>
 8004a00:	e023      	b.n	8004a4a <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2250      	movs	r2, #80	@ 0x50
 8004a08:	5a9b      	ldrh	r3, [r3, r2]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	001a      	movs	r2, r3
 8004a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	18d2      	adds	r2, r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	18d3      	adds	r3, r2, r3
 8004a1c:	4a79      	ldr	r2, [pc, #484]	@ (8004c04 <PCD_EP_ISR_Handler+0x6d4>)
 8004a1e:	4694      	mov	ip, r2
 8004a20:	4463      	add	r3, ip
 8004a22:	881a      	ldrh	r2, [r3, #0]
 8004a24:	2450      	movs	r4, #80	@ 0x50
 8004a26:	193b      	adds	r3, r7, r4
 8004a28:	0592      	lsls	r2, r2, #22
 8004a2a:	0d92      	lsrs	r2, r2, #22
 8004a2c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004a2e:	193b      	adds	r3, r7, r4
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a3c:	6959      	ldr	r1, [r3, #20]
 8004a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a40:	895a      	ldrh	r2, [r3, #10]
 8004a42:	193b      	adds	r3, r7, r4
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	f004 fd25 	bl	8009494 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	2150      	movs	r1, #80	@ 0x50
 8004a50:	187b      	adds	r3, r7, r1
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	18d2      	adds	r2, r2, r3
 8004a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	187b      	adds	r3, r7, r1
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	18d2      	adds	r2, r2, r3
 8004a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a66:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <PCD_EP_ISR_Handler+0x54c>
 8004a70:	187b      	adds	r3, r7, r1
 8004a72:	881a      	ldrh	r2, [r3, #0]
 8004a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d207      	bcs.n	8004a8c <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a7e:	781a      	ldrb	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	0011      	movs	r1, r2
 8004a84:	0018      	movs	r0, r3
 8004a86:	f006 fcc0 	bl	800b40a <HAL_PCD_DataOutStageCallback>
 8004a8a:	e006      	b.n	8004a9a <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a92:	0011      	movs	r1, r2
 8004a94:	0018      	movs	r0, r3
 8004a96:	f003 fa49 	bl	8007f2c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004a9a:	244c      	movs	r4, #76	@ 0x4c
 8004a9c:	193b      	adds	r3, r7, r4
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	2280      	movs	r2, #128	@ 0x80
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d100      	bne.n	8004aa8 <PCD_EP_ISR_Handler+0x578>
 8004aa6:	e133      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8004aa8:	204f      	movs	r0, #79	@ 0x4f
 8004aaa:	183b      	adds	r3, r7, r0
 8004aac:	781a      	ldrb	r2, [r3, #0]
 8004aae:	0013      	movs	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	3310      	adds	r3, #16
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	183b      	adds	r3, r7, r0
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	18d3      	adds	r3, r2, r3
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	2542      	movs	r5, #66	@ 0x42
 8004ad2:	197b      	adds	r3, r7, r5
 8004ad4:	494f      	ldr	r1, [pc, #316]	@ (8004c14 <PCD_EP_ISR_Handler+0x6e4>)
 8004ad6:	400a      	ands	r2, r1
 8004ad8:	801a      	strh	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	001a      	movs	r2, r3
 8004ae0:	183b      	adds	r3, r7, r0
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	18d3      	adds	r3, r2, r3
 8004ae8:	197a      	adds	r2, r7, r5
 8004aea:	8812      	ldrh	r2, [r2, #0]
 8004aec:	494a      	ldr	r1, [pc, #296]	@ (8004c18 <PCD_EP_ISR_Handler+0x6e8>)
 8004aee:	430a      	orrs	r2, r1
 8004af0:	b292      	uxth	r2, r2
 8004af2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af6:	78db      	ldrb	r3, [r3, #3]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d000      	beq.n	8004afe <PCD_EP_ISR_Handler+0x5ce>
 8004afc:	e0af      	b.n	8004c5e <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8004afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b00:	2200      	movs	r2, #0
 8004b02:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	7b1b      	ldrb	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d100      	bne.n	8004b0e <PCD_EP_ISR_Handler+0x5de>
 8004b0c:	e09f      	b.n	8004c4e <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b0e:	193b      	adds	r3, r7, r4
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	2240      	movs	r2, #64	@ 0x40
 8004b14:	4013      	ands	r3, r2
 8004b16:	d046      	beq.n	8004ba6 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d125      	bne.n	8004b6c <PCD_EP_ISR_Handler+0x63c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2250      	movs	r2, #80	@ 0x50
 8004b2c:	5a9b      	ldrh	r3, [r3, r2]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	001a      	movs	r2, r3
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	189b      	adds	r3, r3, r2
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	00da      	lsls	r2, r3, #3
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	18d3      	adds	r3, r2, r3
 8004b42:	4a33      	ldr	r2, [pc, #204]	@ (8004c10 <PCD_EP_ISR_Handler+0x6e0>)
 8004b44:	4694      	mov	ip, r2
 8004b46:	4463      	add	r3, ip
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	059b      	lsls	r3, r3, #22
 8004b52:	0d9b      	lsrs	r3, r3, #22
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4a2d      	ldr	r2, [pc, #180]	@ (8004c18 <PCD_EP_ISR_Handler+0x6e8>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	e070      	b.n	8004c4e <PCD_EP_ISR_Handler+0x71e>
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d16c      	bne.n	8004c4e <PCD_EP_ISR_Handler+0x71e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2250      	movs	r2, #80	@ 0x50
 8004b80:	5a9b      	ldrh	r3, [r3, r2]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	001a      	movs	r2, r3
 8004b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b88:	189b      	adds	r3, r3, r2
 8004b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	00da      	lsls	r2, r3, #3
 8004b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b94:	18d3      	adds	r3, r2, r3
 8004b96:	4a1e      	ldr	r2, [pc, #120]	@ (8004c10 <PCD_EP_ISR_Handler+0x6e0>)
 8004b98:	4694      	mov	ip, r2
 8004b9a:	4463      	add	r3, ip
 8004b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e053      	b.n	8004c4e <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d133      	bne.n	8004c1c <PCD_EP_ISR_Handler+0x6ec>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2250      	movs	r2, #80	@ 0x50
 8004bc0:	5a9b      	ldrh	r3, [r3, r2]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc8:	189b      	adds	r3, r3, r2
 8004bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	00da      	lsls	r2, r3, #3
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd4:	18d3      	adds	r3, r2, r3
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8004c04 <PCD_EP_ISR_Handler+0x6d4>)
 8004bd8:	4694      	mov	ip, r2
 8004bda:	4463      	add	r3, ip
 8004bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	059b      	lsls	r3, r3, #22
 8004be6:	0d9b      	lsrs	r3, r3, #22
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bec:	801a      	strh	r2, [r3, #0]
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4a08      	ldr	r2, [pc, #32]	@ (8004c18 <PCD_EP_ISR_Handler+0x6e8>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	e026      	b.n	8004c4e <PCD_EP_ISR_Handler+0x71e>
 8004c00:	00000f8f 	.word	0x00000f8f
 8004c04:	00000406 	.word	0x00000406
 8004c08:	ffff8f8f 	.word	0xffff8f8f
 8004c0c:	ffff80c0 	.word	0xffff80c0
 8004c10:	00000402 	.word	0x00000402
 8004c14:	ffff8f0f 	.word	0xffff8f0f
 8004c18:	ffff8000 	.word	0xffff8000
 8004c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d114      	bne.n	8004c4e <PCD_EP_ISR_Handler+0x71e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2250      	movs	r2, #80	@ 0x50
 8004c2a:	5a9b      	ldrh	r3, [r3, r2]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	001a      	movs	r2, r3
 8004c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	00da      	lsls	r2, r3, #3
 8004c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3e:	18d3      	adds	r3, r2, r3
 8004c40:	4a3b      	ldr	r2, [pc, #236]	@ (8004d30 <PCD_EP_ISR_Handler+0x800>)
 8004c42:	4694      	mov	ip, r2
 8004c44:	4463      	add	r3, ip
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0011      	movs	r1, r2
 8004c56:	0018      	movs	r0, r3
 8004c58:	f006 fbf8 	bl	800b44c <HAL_PCD_DataInStageCallback>
 8004c5c:	e058      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004c5e:	234c      	movs	r3, #76	@ 0x4c
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	881a      	ldrh	r2, [r3, #0]
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d149      	bne.n	8004d00 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2250      	movs	r2, #80	@ 0x50
 8004c72:	5a9b      	ldrh	r3, [r3, r2]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	001a      	movs	r2, r3
 8004c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	18d2      	adds	r2, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	18d3      	adds	r3, r2, r3
 8004c86:	4a2b      	ldr	r2, [pc, #172]	@ (8004d34 <PCD_EP_ISR_Handler+0x804>)
 8004c88:	4694      	mov	ip, r2
 8004c8a:	4463      	add	r3, ip
 8004c8c:	881a      	ldrh	r2, [r3, #0]
 8004c8e:	2140      	movs	r1, #64	@ 0x40
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	0592      	lsls	r2, r2, #22
 8004c94:	0d92      	lsrs	r2, r2, #22
 8004c96:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8004c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	187b      	adds	r3, r7, r1
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d907      	bls.n	8004cb4 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	1ad2      	subs	r2, r2, r3
 8004cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb0:	619a      	str	r2, [r3, #24]
 8004cb2:	e002      	b.n	8004cba <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d107      	bne.n	8004cd2 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc4:	781a      	ldrb	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	0011      	movs	r1, r2
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f006 fbbe 	bl	800b44c <HAL_PCD_DataInStageCallback>
 8004cd0:	e01e      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	2140      	movs	r1, #64	@ 0x40
 8004cd8:	187b      	adds	r3, r7, r1
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	18d2      	adds	r2, r2, r3
 8004cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	187b      	adds	r3, r7, r1
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	18d2      	adds	r2, r2, r3
 8004cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cee:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cf6:	0011      	movs	r1, r2
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f003 f917 	bl	8007f2c <USB_EPStartXfer>
 8004cfe:	e007      	b.n	8004d10 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d00:	234c      	movs	r3, #76	@ 0x4c
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	881a      	ldrh	r2, [r3, #0]
 8004d06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 f930 	bl	8004f70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2244      	movs	r2, #68	@ 0x44
 8004d16:	5a9b      	ldrh	r3, [r3, r2]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	b21b      	sxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da01      	bge.n	8004d24 <PCD_EP_ISR_Handler+0x7f4>
 8004d20:	f7ff fc0c 	bl	800453c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	0018      	movs	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b016      	add	sp, #88	@ 0x58
 8004d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	00000406 	.word	0x00000406
 8004d34:	00000402 	.word	0x00000402

08004d38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b089      	sub	sp, #36	@ 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	1dbb      	adds	r3, r7, #6
 8004d44:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d46:	1dbb      	adds	r3, r7, #6
 8004d48:	881a      	ldrh	r2, [r3, #0]
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	01db      	lsls	r3, r3, #7
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d100      	bne.n	8004d54 <HAL_PCD_EP_DB_Receive+0x1c>
 8004d52:	e07d      	b.n	8004e50 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2250      	movs	r2, #80	@ 0x50
 8004d5a:	5a9b      	ldrh	r3, [r3, r2]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	001a      	movs	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	18d2      	adds	r2, r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	18d3      	adds	r3, r2, r3
 8004d6e:	4a7a      	ldr	r2, [pc, #488]	@ (8004f58 <HAL_PCD_EP_DB_Receive+0x220>)
 8004d70:	4694      	mov	ip, r2
 8004d72:	4463      	add	r3, ip
 8004d74:	881a      	ldrh	r2, [r3, #0]
 8004d76:	211a      	movs	r1, #26
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	0592      	lsls	r2, r2, #22
 8004d7c:	0d92      	lsrs	r2, r2, #22
 8004d7e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d307      	bcc.n	8004d9c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	1ad2      	subs	r2, r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	619a      	str	r2, [r3, #24]
 8004d9a:	e002      	b.n	8004da2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d121      	bne.n	8004dee <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	001a      	movs	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	2018      	movs	r0, #24
 8004dbe:	183b      	adds	r3, r7, r0
 8004dc0:	4966      	ldr	r1, [pc, #408]	@ (8004f5c <HAL_PCD_EP_DB_Receive+0x224>)
 8004dc2:	400a      	ands	r2, r1
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	183b      	adds	r3, r7, r0
 8004dc8:	183a      	adds	r2, r7, r0
 8004dca:	8812      	ldrh	r2, [r2, #0]
 8004dcc:	2180      	movs	r1, #128	@ 0x80
 8004dce:	0189      	lsls	r1, r1, #6
 8004dd0:	404a      	eors	r2, r1
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	001a      	movs	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	183a      	adds	r2, r7, r0
 8004de4:	8812      	ldrh	r2, [r2, #0]
 8004de6:	495e      	ldr	r1, [pc, #376]	@ (8004f60 <HAL_PCD_EP_DB_Receive+0x228>)
 8004de8:	430a      	orrs	r2, r1
 8004dea:	b292      	uxth	r2, r2
 8004dec:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dee:	1dbb      	adds	r3, r7, #6
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	2240      	movs	r2, #64	@ 0x40
 8004df4:	4013      	ands	r3, r2
 8004df6:	d01a      	beq.n	8004e2e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	18d3      	adds	r3, r2, r3
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	2016      	movs	r0, #22
 8004e0c:	183b      	adds	r3, r7, r0
 8004e0e:	4955      	ldr	r1, [pc, #340]	@ (8004f64 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	801a      	strh	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	001a      	movs	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	183a      	adds	r2, r7, r0
 8004e24:	8812      	ldrh	r2, [r2, #0]
 8004e26:	4950      	ldr	r1, [pc, #320]	@ (8004f68 <HAL_PCD_EP_DB_Receive+0x230>)
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	b292      	uxth	r2, r2
 8004e2c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004e2e:	241a      	movs	r4, #26
 8004e30:	193b      	adds	r3, r7, r4
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d100      	bne.n	8004e3a <HAL_PCD_EP_DB_Receive+0x102>
 8004e38:	e086      	b.n	8004f48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6959      	ldr	r1, [r3, #20]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	891a      	ldrh	r2, [r3, #8]
 8004e46:	193b      	adds	r3, r7, r4
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	f004 fb23 	bl	8009494 <USB_ReadPMA>
 8004e4e:	e07b      	b.n	8004f48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2250      	movs	r2, #80	@ 0x50
 8004e56:	5a9b      	ldrh	r3, [r3, r2]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	18d2      	adds	r2, r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	18d3      	adds	r3, r2, r3
 8004e6a:	4a40      	ldr	r2, [pc, #256]	@ (8004f6c <HAL_PCD_EP_DB_Receive+0x234>)
 8004e6c:	4694      	mov	ip, r2
 8004e6e:	4463      	add	r3, ip
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	211a      	movs	r1, #26
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	0592      	lsls	r2, r2, #22
 8004e78:	0d92      	lsrs	r2, r2, #22
 8004e7a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	187b      	adds	r3, r7, r1
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d307      	bcc.n	8004e98 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	187b      	adds	r3, r7, r1
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	1ad2      	subs	r2, r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	619a      	str	r2, [r3, #24]
 8004e96:	e002      	b.n	8004e9e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d121      	bne.n	8004eea <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	001a      	movs	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	201e      	movs	r0, #30
 8004eba:	183b      	adds	r3, r7, r0
 8004ebc:	4927      	ldr	r1, [pc, #156]	@ (8004f5c <HAL_PCD_EP_DB_Receive+0x224>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	183b      	adds	r3, r7, r0
 8004ec4:	183a      	adds	r2, r7, r0
 8004ec6:	8812      	ldrh	r2, [r2, #0]
 8004ec8:	2180      	movs	r1, #128	@ 0x80
 8004eca:	0189      	lsls	r1, r1, #6
 8004ecc:	404a      	eors	r2, r1
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	18d3      	adds	r3, r2, r3
 8004ede:	183a      	adds	r2, r7, r0
 8004ee0:	8812      	ldrh	r2, [r2, #0]
 8004ee2:	491f      	ldr	r1, [pc, #124]	@ (8004f60 <HAL_PCD_EP_DB_Receive+0x228>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	b292      	uxth	r2, r2
 8004ee8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004eea:	1dbb      	adds	r3, r7, #6
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	2240      	movs	r2, #64	@ 0x40
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d11a      	bne.n	8004f2a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	001a      	movs	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	18d3      	adds	r3, r2, r3
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	201c      	movs	r0, #28
 8004f08:	183b      	adds	r3, r7, r0
 8004f0a:	4916      	ldr	r1, [pc, #88]	@ (8004f64 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	001a      	movs	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	18d3      	adds	r3, r2, r3
 8004f1e:	183a      	adds	r2, r7, r0
 8004f20:	8812      	ldrh	r2, [r2, #0]
 8004f22:	4911      	ldr	r1, [pc, #68]	@ (8004f68 <HAL_PCD_EP_DB_Receive+0x230>)
 8004f24:	430a      	orrs	r2, r1
 8004f26:	b292      	uxth	r2, r2
 8004f28:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004f2a:	241a      	movs	r4, #26
 8004f2c:	193b      	adds	r3, r7, r4
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6959      	ldr	r1, [r3, #20]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	895a      	ldrh	r2, [r3, #10]
 8004f40:	193b      	adds	r3, r7, r4
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	f004 faa6 	bl	8009494 <USB_ReadPMA>
    }
  }

  return count;
 8004f48:	231a      	movs	r3, #26
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	881b      	ldrh	r3, [r3, #0]
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b009      	add	sp, #36	@ 0x24
 8004f54:	bd90      	pop	{r4, r7, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	00000402 	.word	0x00000402
 8004f5c:	ffffbf8f 	.word	0xffffbf8f
 8004f60:	ffff8080 	.word	0xffff8080
 8004f64:	ffff8f8f 	.word	0xffff8f8f
 8004f68:	ffff80c0 	.word	0xffff80c0
 8004f6c:	00000406 	.word	0x00000406

08004f70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b0a4      	sub	sp, #144	@ 0x90
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	1dbb      	adds	r3, r7, #6
 8004f7c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f7e:	1dbb      	adds	r3, r7, #6
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	2240      	movs	r2, #64	@ 0x40
 8004f84:	4013      	ands	r3, r2
 8004f86:	d100      	bne.n	8004f8a <HAL_PCD_EP_DB_Transmit+0x1a>
 8004f88:	e1e4      	b.n	8005354 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2250      	movs	r2, #80	@ 0x50
 8004f90:	5a9b      	ldrh	r3, [r3, r2]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	001a      	movs	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	18d2      	adds	r2, r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	18d3      	adds	r3, r2, r3
 8004fa4:	4ad0      	ldr	r2, [pc, #832]	@ (80052e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004fa6:	4694      	mov	ip, r2
 8004fa8:	4463      	add	r3, ip
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	2188      	movs	r1, #136	@ 0x88
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	0592      	lsls	r2, r2, #22
 8004fb2:	0d92      	lsrs	r2, r2, #22
 8004fb4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	187b      	adds	r3, r7, r1
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d907      	bls.n	8004fd2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	619a      	str	r2, [r3, #24]
 8004fd0:	e002      	b.n	8004fd8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d000      	beq.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x72>
 8004fe0:	e0b5      	b.n	800514e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d125      	bne.n	8005036 <HAL_PCD_EP_DB_Transmit+0xc6>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2250      	movs	r2, #80	@ 0x50
 8004ff6:	5a9b      	ldrh	r3, [r3, r2]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	001a      	movs	r2, r3
 8004ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	00da      	lsls	r2, r3, #3
 8005008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500a:	18d3      	adds	r3, r2, r3
 800500c:	4ab6      	ldr	r2, [pc, #728]	@ (80052e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 800500e:	4694      	mov	ip, r2
 8005010:	4463      	add	r3, ip
 8005012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	059b      	lsls	r3, r3, #22
 800501c:	0d9b      	lsrs	r3, r3, #22
 800501e:	b29a      	uxth	r2, r3
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	4ab0      	ldr	r2, [pc, #704]	@ (80052ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	b29a      	uxth	r2, r3
 8005030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005032:	801a      	strh	r2, [r3, #0]
 8005034:	e01b      	b.n	800506e <HAL_PCD_EP_DB_Transmit+0xfe>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d117      	bne.n	800506e <HAL_PCD_EP_DB_Transmit+0xfe>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	637b      	str	r3, [r7, #52]	@ 0x34
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2250      	movs	r2, #80	@ 0x50
 800504a:	5a9b      	ldrh	r3, [r3, r2]
 800504c:	b29b      	uxth	r3, r3
 800504e:	001a      	movs	r2, r3
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	189b      	adds	r3, r3, r2
 8005054:	637b      	str	r3, [r7, #52]	@ 0x34
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	00da      	lsls	r2, r3, #3
 800505c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505e:	18d3      	adds	r3, r2, r3
 8005060:	4aa1      	ldr	r2, [pc, #644]	@ (80052e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005062:	4694      	mov	ip, r2
 8005064:	4463      	add	r3, ip
 8005066:	633b      	str	r3, [r7, #48]	@ 0x30
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	2200      	movs	r2, #0
 800506c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	627b      	str	r3, [r7, #36]	@ 0x24
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d125      	bne.n	80050c8 <HAL_PCD_EP_DB_Transmit+0x158>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2250      	movs	r2, #80	@ 0x50
 8005088:	5a9b      	ldrh	r3, [r3, r2]
 800508a:	b29b      	uxth	r3, r3
 800508c:	001a      	movs	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	189b      	adds	r3, r3, r2
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	00da      	lsls	r2, r3, #3
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	18d3      	adds	r3, r2, r3
 800509e:	4a94      	ldr	r2, [pc, #592]	@ (80052f0 <HAL_PCD_EP_DB_Transmit+0x380>)
 80050a0:	4694      	mov	ip, r2
 80050a2:	4463      	add	r3, ip
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	059b      	lsls	r3, r3, #22
 80050ae:	0d9b      	lsrs	r3, r3, #22
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	4a8b      	ldr	r2, [pc, #556]	@ (80052ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	e018      	b.n	80050fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d114      	bne.n	80050fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2250      	movs	r2, #80	@ 0x50
 80050d6:	5a9b      	ldrh	r3, [r3, r2]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	001a      	movs	r2, r3
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	00da      	lsls	r2, r3, #3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	18d3      	adds	r3, r2, r3
 80050ec:	4a80      	ldr	r2, [pc, #512]	@ (80052f0 <HAL_PCD_EP_DB_Transmit+0x380>)
 80050ee:	4694      	mov	ip, r2
 80050f0:	4463      	add	r3, ip
 80050f2:	623b      	str	r3, [r7, #32]
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	2200      	movs	r2, #0
 80050f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	0011      	movs	r1, r2
 8005102:	0018      	movs	r0, r3
 8005104:	f006 f9a2 	bl	800b44c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005108:	1dbb      	adds	r3, r7, #6
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	01db      	lsls	r3, r3, #7
 8005110:	4013      	ands	r3, r2
 8005112:	d100      	bne.n	8005116 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005114:	e308      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	001a      	movs	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	18d3      	adds	r3, r2, r3
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29a      	uxth	r2, r3
 8005128:	2016      	movs	r0, #22
 800512a:	183b      	adds	r3, r7, r0
 800512c:	4971      	ldr	r1, [pc, #452]	@ (80052f4 <HAL_PCD_EP_DB_Transmit+0x384>)
 800512e:	400a      	ands	r2, r1
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	001a      	movs	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	18d3      	adds	r3, r2, r3
 8005140:	183a      	adds	r2, r7, r0
 8005142:	8812      	ldrh	r2, [r2, #0]
 8005144:	496c      	ldr	r1, [pc, #432]	@ (80052f8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005146:	430a      	orrs	r2, r1
 8005148:	b292      	uxth	r2, r2
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	e2ec      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800514e:	1dbb      	adds	r3, r7, #6
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	01db      	lsls	r3, r3, #7
 8005156:	4013      	ands	r3, r2
 8005158:	d01a      	beq.n	8005190 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	001a      	movs	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	18d3      	adds	r3, r2, r3
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29a      	uxth	r2, r3
 800516c:	208a      	movs	r0, #138	@ 0x8a
 800516e:	183b      	adds	r3, r7, r0
 8005170:	4960      	ldr	r1, [pc, #384]	@ (80052f4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8005172:	400a      	ands	r2, r1
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	001a      	movs	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	18d3      	adds	r3, r2, r3
 8005184:	183a      	adds	r2, r7, r0
 8005186:	8812      	ldrh	r2, [r2, #0]
 8005188:	495b      	ldr	r1, [pc, #364]	@ (80052f8 <HAL_PCD_EP_DB_Transmit+0x388>)
 800518a:	430a      	orrs	r2, r1
 800518c:	b292      	uxth	r2, r2
 800518e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2224      	movs	r2, #36	@ 0x24
 8005194:	5c9b      	ldrb	r3, [r3, r2]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d000      	beq.n	800519c <HAL_PCD_EP_DB_Transmit+0x22c>
 800519a:	e2c5      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	2188      	movs	r1, #136	@ 0x88
 80051a2:	187b      	adds	r3, r7, r1
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	18d2      	adds	r2, r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	187b      	adds	r3, r7, r1
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	18d2      	adds	r2, r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6a1a      	ldr	r2, [r3, #32]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d30c      	bcc.n	80051e0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	218c      	movs	r1, #140	@ 0x8c
 80051cc:	187a      	adds	r2, r7, r1
 80051ce:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	187b      	adds	r3, r7, r1
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	1ad2      	subs	r2, r2, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	621a      	str	r2, [r3, #32]
 80051de:	e01a      	b.n	8005216 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80051e8:	2388      	movs	r3, #136	@ 0x88
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	228c      	movs	r2, #140	@ 0x8c
 80051f0:	18ba      	adds	r2, r7, r2
 80051f2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2224      	movs	r2, #36	@ 0x24
 80051f8:	2100      	movs	r1, #0
 80051fa:	5499      	strb	r1, [r3, r2]
 80051fc:	e00b      	b.n	8005216 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2224      	movs	r2, #36	@ 0x24
 8005202:	2100      	movs	r1, #0
 8005204:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	228c      	movs	r2, #140	@ 0x8c
 800520c:	18ba      	adds	r2, r7, r2
 800520e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d000      	beq.n	8005220 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800521e:	e06d      	b.n	80052fc <HAL_PCD_EP_DB_Transmit+0x38c>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2250      	movs	r2, #80	@ 0x50
 800522c:	5a9b      	ldrh	r3, [r3, r2]
 800522e:	b29b      	uxth	r3, r3
 8005230:	001a      	movs	r2, r3
 8005232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005234:	189b      	adds	r3, r3, r2
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	00da      	lsls	r2, r3, #3
 800523e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005240:	18d3      	adds	r3, r2, r3
 8005242:	4a29      	ldr	r2, [pc, #164]	@ (80052e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005244:	4694      	mov	ip, r2
 8005246:	4463      	add	r3, ip
 8005248:	63bb      	str	r3, [r7, #56]	@ 0x38
 800524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	059b      	lsls	r3, r3, #22
 8005252:	0d9b      	lsrs	r3, r3, #22
 8005254:	b29a      	uxth	r2, r3
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	238c      	movs	r3, #140	@ 0x8c
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d108      	bne.n	8005276 <HAL_PCD_EP_DB_Transmit+0x306>
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	4a20      	ldr	r2, [pc, #128]	@ (80052ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	b29a      	uxth	r2, r3
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	e061      	b.n	800533a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005276:	228c      	movs	r2, #140	@ 0x8c
 8005278:	18bb      	adds	r3, r7, r2
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b3e      	cmp	r3, #62	@ 0x3e
 800527e:	d817      	bhi.n	80052b0 <HAL_PCD_EP_DB_Transmit+0x340>
 8005280:	18bb      	adds	r3, r7, r2
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005288:	18bb      	adds	r3, r7, r2
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2201      	movs	r2, #1
 800528e:	4013      	ands	r3, r2
 8005290:	d002      	beq.n	8005298 <HAL_PCD_EP_DB_Transmit+0x328>
 8005292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005294:	3301      	adds	r3, #1
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29a      	uxth	r2, r3
 800529e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	4313      	orrs	r3, r2
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e044      	b.n	800533a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80052b0:	228c      	movs	r2, #140	@ 0x8c
 80052b2:	18bb      	adds	r3, r7, r2
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ba:	18bb      	adds	r3, r7, r2
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	221f      	movs	r2, #31
 80052c0:	4013      	ands	r3, r2
 80052c2:	d102      	bne.n	80052ca <HAL_PCD_EP_DB_Transmit+0x35a>
 80052c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052c6:	3b01      	subs	r3, #1
 80052c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	029b      	lsls	r3, r3, #10
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4313      	orrs	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	4a03      	ldr	r2, [pc, #12]	@ (80052ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e028      	b.n	800533a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80052e8:	00000402 	.word	0x00000402
 80052ec:	ffff8000 	.word	0xffff8000
 80052f0:	00000406 	.word	0x00000406
 80052f4:	ffff8f8f 	.word	0xffff8f8f
 80052f8:	ffffc080 	.word	0xffffc080
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	785b      	ldrb	r3, [r3, #1]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d11a      	bne.n	800533a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	647b      	str	r3, [r7, #68]	@ 0x44
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2250      	movs	r2, #80	@ 0x50
 8005310:	5a9b      	ldrh	r3, [r3, r2]
 8005312:	b29b      	uxth	r3, r3
 8005314:	001a      	movs	r2, r3
 8005316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005318:	189b      	adds	r3, r3, r2
 800531a:	647b      	str	r3, [r7, #68]	@ 0x44
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	00da      	lsls	r2, r3, #3
 8005322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005324:	18d3      	adds	r3, r2, r3
 8005326:	4ad9      	ldr	r2, [pc, #868]	@ (800568c <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005328:	4694      	mov	ip, r2
 800532a:	4463      	add	r3, ip
 800532c:	643b      	str	r3, [r7, #64]	@ 0x40
 800532e:	238c      	movs	r3, #140	@ 0x8c
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	b29a      	uxth	r2, r3
 8005336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005338:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6959      	ldr	r1, [r3, #20]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	891a      	ldrh	r2, [r3, #8]
 8005346:	238c      	movs	r3, #140	@ 0x8c
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f004 f857 	bl	8009400 <USB_WritePMA>
 8005352:	e1e9      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2250      	movs	r2, #80	@ 0x50
 800535a:	5a9b      	ldrh	r3, [r3, r2]
 800535c:	b29b      	uxth	r3, r3
 800535e:	001a      	movs	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	18d2      	adds	r2, r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	18d3      	adds	r3, r2, r3
 800536e:	4ac8      	ldr	r2, [pc, #800]	@ (8005690 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005370:	4694      	mov	ip, r2
 8005372:	4463      	add	r3, ip
 8005374:	881a      	ldrh	r2, [r3, #0]
 8005376:	2188      	movs	r1, #136	@ 0x88
 8005378:	187b      	adds	r3, r7, r1
 800537a:	0592      	lsls	r2, r2, #22
 800537c:	0d92      	lsrs	r2, r2, #22
 800537e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	187b      	adds	r3, r7, r1
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d307      	bcc.n	800539c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	699a      	ldr	r2, [r3, #24]
 8005390:	187b      	adds	r3, r7, r1
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	1ad2      	subs	r2, r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	619a      	str	r2, [r3, #24]
 800539a:	e002      	b.n	80053a2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d000      	beq.n	80053ac <HAL_PCD_EP_DB_Transmit+0x43c>
 80053aa:	e0bb      	b.n	8005524 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d125      	bne.n	8005400 <HAL_PCD_EP_DB_Transmit+0x490>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2250      	movs	r2, #80	@ 0x50
 80053c0:	5a9b      	ldrh	r3, [r3, r2]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	001a      	movs	r2, r3
 80053c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053c8:	189b      	adds	r3, r3, r2
 80053ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	00da      	lsls	r2, r3, #3
 80053d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053d4:	18d3      	adds	r3, r2, r3
 80053d6:	4aad      	ldr	r2, [pc, #692]	@ (800568c <HAL_PCD_EP_DB_Transmit+0x71c>)
 80053d8:	4694      	mov	ip, r2
 80053da:	4463      	add	r3, ip
 80053dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	059b      	lsls	r3, r3, #22
 80053e6:	0d9b      	lsrs	r3, r3, #22
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4aa7      	ldr	r2, [pc, #668]	@ (8005694 <HAL_PCD_EP_DB_Transmit+0x724>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	e01b      	b.n	8005438 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d117      	bne.n	8005438 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	667b      	str	r3, [r7, #100]	@ 0x64
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2250      	movs	r2, #80	@ 0x50
 8005414:	5a9b      	ldrh	r3, [r3, r2]
 8005416:	b29b      	uxth	r3, r3
 8005418:	001a      	movs	r2, r3
 800541a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800541c:	189b      	adds	r3, r3, r2
 800541e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	00da      	lsls	r2, r3, #3
 8005426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005428:	18d3      	adds	r3, r2, r3
 800542a:	4a98      	ldr	r2, [pc, #608]	@ (800568c <HAL_PCD_EP_DB_Transmit+0x71c>)
 800542c:	4694      	mov	ip, r2
 800542e:	4463      	add	r3, ip
 8005430:	663b      	str	r3, [r7, #96]	@ 0x60
 8005432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005434:	2200      	movs	r2, #0
 8005436:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	677b      	str	r3, [r7, #116]	@ 0x74
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d12b      	bne.n	800549e <HAL_PCD_EP_DB_Transmit+0x52e>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2250      	movs	r2, #80	@ 0x50
 8005452:	5a9b      	ldrh	r3, [r3, r2]
 8005454:	b29b      	uxth	r3, r3
 8005456:	001a      	movs	r2, r3
 8005458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800545a:	189b      	adds	r3, r3, r2
 800545c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	00da      	lsls	r2, r3, #3
 8005464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005466:	18d3      	adds	r3, r2, r3
 8005468:	4a89      	ldr	r2, [pc, #548]	@ (8005690 <HAL_PCD_EP_DB_Transmit+0x720>)
 800546a:	4694      	mov	ip, r2
 800546c:	4463      	add	r3, ip
 800546e:	2184      	movs	r1, #132	@ 0x84
 8005470:	187a      	adds	r2, r7, r1
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	187b      	adds	r3, r7, r1
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	059b      	lsls	r3, r3, #22
 800547e:	0d9b      	lsrs	r3, r3, #22
 8005480:	b29a      	uxth	r2, r3
 8005482:	187b      	adds	r3, r7, r1
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	187b      	adds	r3, r7, r1
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	4a80      	ldr	r2, [pc, #512]	@ (8005694 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005492:	4313      	orrs	r3, r2
 8005494:	b29a      	uxth	r2, r3
 8005496:	187b      	adds	r3, r7, r1
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	e018      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x560>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d114      	bne.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x560>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2250      	movs	r2, #80	@ 0x50
 80054ac:	5a9b      	ldrh	r3, [r3, r2]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	001a      	movs	r2, r3
 80054b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	00da      	lsls	r2, r3, #3
 80054be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054c0:	18d3      	adds	r3, r2, r3
 80054c2:	4a73      	ldr	r2, [pc, #460]	@ (8005690 <HAL_PCD_EP_DB_Transmit+0x720>)
 80054c4:	4694      	mov	ip, r2
 80054c6:	4463      	add	r3, ip
 80054c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80054ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054cc:	2200      	movs	r2, #0
 80054ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	781a      	ldrb	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	0011      	movs	r1, r2
 80054d8:	0018      	movs	r0, r3
 80054da:	f005 ffb7 	bl	800b44c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054de:	1dbb      	adds	r3, r7, #6
 80054e0:	881a      	ldrh	r2, [r3, #0]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	01db      	lsls	r3, r3, #7
 80054e6:	4013      	ands	r3, r2
 80054e8:	d000      	beq.n	80054ec <HAL_PCD_EP_DB_Transmit+0x57c>
 80054ea:	e11d      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	001a      	movs	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	18d3      	adds	r3, r2, r3
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	2082      	movs	r0, #130	@ 0x82
 8005500:	183b      	adds	r3, r7, r0
 8005502:	4965      	ldr	r1, [pc, #404]	@ (8005698 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005504:	400a      	ands	r2, r1
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	001a      	movs	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	18d3      	adds	r3, r2, r3
 8005516:	183a      	adds	r2, r7, r0
 8005518:	8812      	ldrh	r2, [r2, #0]
 800551a:	4960      	ldr	r1, [pc, #384]	@ (800569c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800551c:	430a      	orrs	r2, r1
 800551e:	b292      	uxth	r2, r2
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	e101      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005524:	1dbb      	adds	r3, r7, #6
 8005526:	881a      	ldrh	r2, [r3, #0]
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	01db      	lsls	r3, r3, #7
 800552c:	4013      	ands	r3, r2
 800552e:	d11a      	bne.n	8005566 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	001a      	movs	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	18d3      	adds	r3, r2, r3
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29a      	uxth	r2, r3
 8005542:	204e      	movs	r0, #78	@ 0x4e
 8005544:	183b      	adds	r3, r7, r0
 8005546:	4954      	ldr	r1, [pc, #336]	@ (8005698 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005548:	400a      	ands	r2, r1
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	001a      	movs	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	183a      	adds	r2, r7, r0
 800555c:	8812      	ldrh	r2, [r2, #0]
 800555e:	494f      	ldr	r1, [pc, #316]	@ (800569c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005560:	430a      	orrs	r2, r1
 8005562:	b292      	uxth	r2, r2
 8005564:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2224      	movs	r2, #36	@ 0x24
 800556a:	5c9b      	ldrb	r3, [r3, r2]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d000      	beq.n	8005572 <HAL_PCD_EP_DB_Transmit+0x602>
 8005570:	e0da      	b.n	8005728 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	695a      	ldr	r2, [r3, #20]
 8005576:	2188      	movs	r1, #136	@ 0x88
 8005578:	187b      	adds	r3, r7, r1
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	18d2      	adds	r2, r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	69da      	ldr	r2, [r3, #28]
 8005586:	187b      	adds	r3, r7, r1
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	18d2      	adds	r2, r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	429a      	cmp	r2, r3
 800559a:	d30c      	bcc.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	218c      	movs	r1, #140	@ 0x8c
 80055a2:	187a      	adds	r2, r7, r1
 80055a4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	6a1a      	ldr	r2, [r3, #32]
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	621a      	str	r2, [r3, #32]
 80055b4:	e01a      	b.n	80055ec <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80055be:	2388      	movs	r3, #136	@ 0x88
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	228c      	movs	r2, #140	@ 0x8c
 80055c6:	18ba      	adds	r2, r7, r2
 80055c8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2224      	movs	r2, #36	@ 0x24
 80055ce:	2100      	movs	r1, #0
 80055d0:	5499      	strb	r1, [r3, r2]
 80055d2:	e00b      	b.n	80055ec <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	228c      	movs	r2, #140	@ 0x8c
 80055da:	18ba      	adds	r2, r7, r2
 80055dc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2200      	movs	r2, #0
 80055e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2224      	movs	r2, #36	@ 0x24
 80055e8:	2100      	movs	r1, #0
 80055ea:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d000      	beq.n	80055fc <HAL_PCD_EP_DB_Transmit+0x68c>
 80055fa:	e06d      	b.n	80056d8 <HAL_PCD_EP_DB_Transmit+0x768>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2250      	movs	r2, #80	@ 0x50
 8005608:	5a9b      	ldrh	r3, [r3, r2]
 800560a:	b29b      	uxth	r3, r3
 800560c:	001a      	movs	r2, r3
 800560e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005610:	189b      	adds	r3, r3, r2
 8005612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	00da      	lsls	r2, r3, #3
 800561a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800561c:	18d3      	adds	r3, r2, r3
 800561e:	4a1c      	ldr	r2, [pc, #112]	@ (8005690 <HAL_PCD_EP_DB_Transmit+0x720>)
 8005620:	4694      	mov	ip, r2
 8005622:	4463      	add	r3, ip
 8005624:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	059b      	lsls	r3, r3, #22
 800562e:	0d9b      	lsrs	r3, r3, #22
 8005630:	b29a      	uxth	r2, r3
 8005632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	238c      	movs	r3, #140	@ 0x8c
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d108      	bne.n	8005652 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005648:	4313      	orrs	r3, r2
 800564a:	b29a      	uxth	r2, r3
 800564c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	e05e      	b.n	8005710 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005652:	228c      	movs	r2, #140	@ 0x8c
 8005654:	18bb      	adds	r3, r7, r2
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b3e      	cmp	r3, #62	@ 0x3e
 800565a:	d821      	bhi.n	80056a0 <HAL_PCD_EP_DB_Transmit+0x730>
 800565c:	18bb      	adds	r3, r7, r2
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005664:	18bb      	adds	r3, r7, r2
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2201      	movs	r2, #1
 800566a:	4013      	ands	r3, r2
 800566c:	d002      	beq.n	8005674 <HAL_PCD_EP_DB_Transmit+0x704>
 800566e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005670:	3301      	adds	r3, #1
 8005672:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005674:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29a      	uxth	r2, r3
 800567a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800567c:	b29b      	uxth	r3, r3
 800567e:	029b      	lsls	r3, r3, #10
 8005680:	b29b      	uxth	r3, r3
 8005682:	4313      	orrs	r3, r2
 8005684:	b29a      	uxth	r2, r3
 8005686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	e041      	b.n	8005710 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800568c:	00000402 	.word	0x00000402
 8005690:	00000406 	.word	0x00000406
 8005694:	ffff8000 	.word	0xffff8000
 8005698:	ffff8f8f 	.word	0xffff8f8f
 800569c:	ffffc080 	.word	0xffffc080
 80056a0:	228c      	movs	r2, #140	@ 0x8c
 80056a2:	18bb      	adds	r3, r7, r2
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056aa:	18bb      	adds	r3, r7, r2
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	221f      	movs	r2, #31
 80056b0:	4013      	ands	r3, r2
 80056b2:	d102      	bne.n	80056ba <HAL_PCD_EP_DB_Transmit+0x74a>
 80056b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056b6:	3b01      	subs	r3, #1
 80056b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005780 <HAL_PCD_EP_DB_Transmit+0x810>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e01b      	b.n	8005710 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d117      	bne.n	8005710 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2250      	movs	r2, #80	@ 0x50
 80056e6:	5a9b      	ldrh	r3, [r3, r2]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	001a      	movs	r2, r3
 80056ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ee:	189b      	adds	r3, r3, r2
 80056f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	00da      	lsls	r2, r3, #3
 80056f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fa:	18d3      	adds	r3, r2, r3
 80056fc:	4a21      	ldr	r2, [pc, #132]	@ (8005784 <HAL_PCD_EP_DB_Transmit+0x814>)
 80056fe:	4694      	mov	ip, r2
 8005700:	4463      	add	r3, ip
 8005702:	653b      	str	r3, [r7, #80]	@ 0x50
 8005704:	238c      	movs	r3, #140	@ 0x8c
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	b29a      	uxth	r2, r3
 800570c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800570e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6959      	ldr	r1, [r3, #20]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	895a      	ldrh	r2, [r3, #10]
 800571c:	238c      	movs	r3, #140	@ 0x8c
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f003 fe6c 	bl	8009400 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	001a      	movs	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	18d3      	adds	r3, r2, r3
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29a      	uxth	r2, r3
 800573a:	2014      	movs	r0, #20
 800573c:	183b      	adds	r3, r7, r0
 800573e:	4912      	ldr	r1, [pc, #72]	@ (8005788 <HAL_PCD_EP_DB_Transmit+0x818>)
 8005740:	400a      	ands	r2, r1
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	183b      	adds	r3, r7, r0
 8005746:	183a      	adds	r2, r7, r0
 8005748:	8812      	ldrh	r2, [r2, #0]
 800574a:	2110      	movs	r1, #16
 800574c:	404a      	eors	r2, r1
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	183b      	adds	r3, r7, r0
 8005752:	183a      	adds	r2, r7, r0
 8005754:	8812      	ldrh	r2, [r2, #0]
 8005756:	2120      	movs	r1, #32
 8005758:	404a      	eors	r2, r1
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	001a      	movs	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	18d3      	adds	r3, r2, r3
 800576a:	183a      	adds	r2, r7, r0
 800576c:	8812      	ldrh	r2, [r2, #0]
 800576e:	4907      	ldr	r1, [pc, #28]	@ (800578c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8005770:	430a      	orrs	r2, r1
 8005772:	b292      	uxth	r2, r2
 8005774:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b024      	add	sp, #144	@ 0x90
 800577e:	bd80      	pop	{r7, pc}
 8005780:	ffff8000 	.word	0xffff8000
 8005784:	00000406 	.word	0x00000406
 8005788:	ffff8fbf 	.word	0xffff8fbf
 800578c:	ffff8080 	.word	0xffff8080

08005790 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	0008      	movs	r0, r1
 800579a:	0011      	movs	r1, r2
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	240a      	movs	r4, #10
 80057a0:	193b      	adds	r3, r7, r4
 80057a2:	1c02      	adds	r2, r0, #0
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	2308      	movs	r3, #8
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	1c0a      	adds	r2, r1, #0
 80057ac:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80057ae:	0021      	movs	r1, r4
 80057b0:	187b      	adds	r3, r7, r1
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	2280      	movs	r2, #128	@ 0x80
 80057b6:	4013      	ands	r3, r2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057be:	187b      	adds	r3, r7, r1
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	2207      	movs	r2, #7
 80057c4:	401a      	ands	r2, r3
 80057c6:	0013      	movs	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	3310      	adds	r3, #16
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	18d3      	adds	r3, r2, r3
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e00b      	b.n	80057f0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057d8:	230a      	movs	r3, #10
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	881a      	ldrh	r2, [r3, #0]
 80057de:	0013      	movs	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	189b      	adds	r3, r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	3351      	adds	r3, #81	@ 0x51
 80057e8:	33ff      	adds	r3, #255	@ 0xff
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	18d3      	adds	r3, r2, r3
 80057ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80057f0:	2308      	movs	r3, #8
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d107      	bne.n	800580a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2200      	movs	r2, #0
 80057fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	b29a      	uxth	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	80da      	strh	r2, [r3, #6]
 8005808:	e00b      	b.n	8005822 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2201      	movs	r2, #1
 800580e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	b29a      	uxth	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	b29a      	uxth	r2, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	0018      	movs	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	b007      	add	sp, #28
 800582a:	bd90      	pop	{r4, r7, pc}

0800582c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	23b4      	movs	r3, #180	@ 0xb4
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	2101      	movs	r1, #1
 8005842:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	23b2      	movs	r3, #178	@ 0xb2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	2100      	movs	r1, #0
 800584c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2254      	movs	r2, #84	@ 0x54
 8005852:	5a9b      	ldrh	r3, [r3, r2]
 8005854:	b29b      	uxth	r3, r3
 8005856:	2201      	movs	r2, #1
 8005858:	4313      	orrs	r3, r2
 800585a:	b299      	uxth	r1, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2254      	movs	r2, #84	@ 0x54
 8005860:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2254      	movs	r2, #84	@ 0x54
 8005866:	5a9b      	ldrh	r3, [r3, r2]
 8005868:	b29b      	uxth	r3, r3
 800586a:	2202      	movs	r2, #2
 800586c:	4313      	orrs	r3, r2
 800586e:	b299      	uxth	r1, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2254      	movs	r2, #84	@ 0x54
 8005874:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	b004      	add	sp, #16
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	000a      	movs	r2, r1
 800588a:	1cfb      	adds	r3, r7, #3
 800588c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	b002      	add	sp, #8
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f000 fb76 	bl	8005f98 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2201      	movs	r2, #1
 80058b2:	4013      	ands	r3, r2
 80058b4:	d100      	bne.n	80058b8 <HAL_RCC_OscConfig+0x20>
 80058b6:	e08e      	b.n	80059d6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80058b8:	4bc5      	ldr	r3, [pc, #788]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	220c      	movs	r2, #12
 80058be:	4013      	ands	r3, r2
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d00e      	beq.n	80058e2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058c4:	4bc2      	ldr	r3, [pc, #776]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	220c      	movs	r2, #12
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d117      	bne.n	8005900 <HAL_RCC_OscConfig+0x68>
 80058d0:	4bbf      	ldr	r3, [pc, #764]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	23c0      	movs	r3, #192	@ 0xc0
 80058d6:	025b      	lsls	r3, r3, #9
 80058d8:	401a      	ands	r2, r3
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	025b      	lsls	r3, r3, #9
 80058de:	429a      	cmp	r2, r3
 80058e0:	d10e      	bne.n	8005900 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e2:	4bbb      	ldr	r3, [pc, #748]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	2380      	movs	r3, #128	@ 0x80
 80058e8:	029b      	lsls	r3, r3, #10
 80058ea:	4013      	ands	r3, r2
 80058ec:	d100      	bne.n	80058f0 <HAL_RCC_OscConfig+0x58>
 80058ee:	e071      	b.n	80059d4 <HAL_RCC_OscConfig+0x13c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d000      	beq.n	80058fa <HAL_RCC_OscConfig+0x62>
 80058f8:	e06c      	b.n	80059d4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f000 fb4c 	bl	8005f98 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_RCC_OscConfig+0x80>
 8005908:	4bb1      	ldr	r3, [pc, #708]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4bb0      	ldr	r3, [pc, #704]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 800590e:	2180      	movs	r1, #128	@ 0x80
 8005910:	0249      	lsls	r1, r1, #9
 8005912:	430a      	orrs	r2, r1
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e02f      	b.n	8005978 <HAL_RCC_OscConfig+0xe0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10c      	bne.n	800593a <HAL_RCC_OscConfig+0xa2>
 8005920:	4bab      	ldr	r3, [pc, #684]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4baa      	ldr	r3, [pc, #680]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005926:	49ab      	ldr	r1, [pc, #684]	@ (8005bd4 <HAL_RCC_OscConfig+0x33c>)
 8005928:	400a      	ands	r2, r1
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	4ba8      	ldr	r3, [pc, #672]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4ba7      	ldr	r3, [pc, #668]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005932:	49a9      	ldr	r1, [pc, #676]	@ (8005bd8 <HAL_RCC_OscConfig+0x340>)
 8005934:	400a      	ands	r2, r1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e01e      	b.n	8005978 <HAL_RCC_OscConfig+0xe0>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b05      	cmp	r3, #5
 8005940:	d10e      	bne.n	8005960 <HAL_RCC_OscConfig+0xc8>
 8005942:	4ba3      	ldr	r3, [pc, #652]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4ba2      	ldr	r3, [pc, #648]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005948:	2180      	movs	r1, #128	@ 0x80
 800594a:	02c9      	lsls	r1, r1, #11
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	4b9f      	ldr	r3, [pc, #636]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005956:	2180      	movs	r1, #128	@ 0x80
 8005958:	0249      	lsls	r1, r1, #9
 800595a:	430a      	orrs	r2, r1
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e00b      	b.n	8005978 <HAL_RCC_OscConfig+0xe0>
 8005960:	4b9b      	ldr	r3, [pc, #620]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4b9a      	ldr	r3, [pc, #616]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005966:	499b      	ldr	r1, [pc, #620]	@ (8005bd4 <HAL_RCC_OscConfig+0x33c>)
 8005968:	400a      	ands	r2, r1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	4b98      	ldr	r3, [pc, #608]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b97      	ldr	r3, [pc, #604]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005972:	4999      	ldr	r1, [pc, #612]	@ (8005bd8 <HAL_RCC_OscConfig+0x340>)
 8005974:	400a      	ands	r2, r1
 8005976:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d014      	beq.n	80059aa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fd fbee 	bl	8003160 <HAL_GetTick>
 8005984:	0003      	movs	r3, r0
 8005986:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800598a:	f7fd fbe9 	bl	8003160 <HAL_GetTick>
 800598e:	0002      	movs	r2, r0
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b64      	cmp	r3, #100	@ 0x64
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e2fd      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599c:	4b8c      	ldr	r3, [pc, #560]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	2380      	movs	r3, #128	@ 0x80
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	4013      	ands	r3, r2
 80059a6:	d0f0      	beq.n	800598a <HAL_RCC_OscConfig+0xf2>
 80059a8:	e015      	b.n	80059d6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059aa:	f7fd fbd9 	bl	8003160 <HAL_GetTick>
 80059ae:	0003      	movs	r3, r0
 80059b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fd fbd4 	bl	8003160 <HAL_GetTick>
 80059b8:	0002      	movs	r2, r0
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	@ 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e2e8      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c6:	4b82      	ldr	r3, [pc, #520]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	2380      	movs	r3, #128	@ 0x80
 80059cc:	029b      	lsls	r3, r3, #10
 80059ce:	4013      	ands	r3, r2
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x11c>
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2202      	movs	r2, #2
 80059dc:	4013      	ands	r3, r2
 80059de:	d100      	bne.n	80059e2 <HAL_RCC_OscConfig+0x14a>
 80059e0:	e06c      	b.n	8005abc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80059e2:	4b7b      	ldr	r3, [pc, #492]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	220c      	movs	r2, #12
 80059e8:	4013      	ands	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80059ec:	4b78      	ldr	r3, [pc, #480]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	220c      	movs	r2, #12
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d11f      	bne.n	8005a38 <HAL_RCC_OscConfig+0x1a0>
 80059f8:	4b75      	ldr	r3, [pc, #468]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	23c0      	movs	r3, #192	@ 0xc0
 80059fe:	025b      	lsls	r3, r3, #9
 8005a00:	401a      	ands	r2, r3
 8005a02:	2380      	movs	r3, #128	@ 0x80
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d116      	bne.n	8005a38 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a0a:	4b71      	ldr	r3, [pc, #452]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	4013      	ands	r3, r2
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_OscConfig+0x188>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e2bb      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a20:	4b6b      	ldr	r3, [pc, #428]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	22f8      	movs	r2, #248	@ 0xf8
 8005a26:	4393      	bics	r3, r2
 8005a28:	0019      	movs	r1, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	00da      	lsls	r2, r3, #3
 8005a30:	4b67      	ldr	r3, [pc, #412]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a36:	e041      	b.n	8005abc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d024      	beq.n	8005a8a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a40:	4b63      	ldr	r3, [pc, #396]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4b62      	ldr	r3, [pc, #392]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a46:	2101      	movs	r1, #1
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4c:	f7fd fb88 	bl	8003160 <HAL_GetTick>
 8005a50:	0003      	movs	r3, r0
 8005a52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a56:	f7fd fb83 	bl	8003160 <HAL_GetTick>
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e297      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a68:	4b59      	ldr	r3, [pc, #356]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d0f1      	beq.n	8005a56 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a72:	4b57      	ldr	r3, [pc, #348]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	22f8      	movs	r2, #248	@ 0xf8
 8005a78:	4393      	bics	r3, r2
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	00da      	lsls	r2, r3, #3
 8005a82:	4b53      	ldr	r3, [pc, #332]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a84:	430a      	orrs	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e018      	b.n	8005abc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a8a:	4b51      	ldr	r3, [pc, #324]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b50      	ldr	r3, [pc, #320]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a90:	2101      	movs	r1, #1
 8005a92:	438a      	bics	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a96:	f7fd fb63 	bl	8003160 <HAL_GetTick>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aa0:	f7fd fb5e 	bl	8003160 <HAL_GetTick>
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e272      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab2:	4b47      	ldr	r3, [pc, #284]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d1f1      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d036      	beq.n	8005b34 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d019      	beq.n	8005b02 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ace:	4b40      	ldr	r3, [pc, #256]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ada:	f7fd fb41 	bl	8003160 <HAL_GetTick>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ae4:	f7fd fb3c 	bl	8003160 <HAL_GetTick>
 8005ae8:	0002      	movs	r2, r0
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e250      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af6:	4b36      	ldr	r3, [pc, #216]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	2202      	movs	r2, #2
 8005afc:	4013      	ands	r3, r2
 8005afe:	d0f1      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x24c>
 8005b00:	e018      	b.n	8005b34 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b02:	4b33      	ldr	r3, [pc, #204]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b06:	4b32      	ldr	r3, [pc, #200]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005b08:	2101      	movs	r1, #1
 8005b0a:	438a      	bics	r2, r1
 8005b0c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0e:	f7fd fb27 	bl	8003160 <HAL_GetTick>
 8005b12:	0003      	movs	r3, r0
 8005b14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b18:	f7fd fb22 	bl	8003160 <HAL_GetTick>
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e236      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2a:	4b29      	ldr	r3, [pc, #164]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	2202      	movs	r2, #2
 8005b30:	4013      	ands	r3, r2
 8005b32:	d1f1      	bne.n	8005b18 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d100      	bne.n	8005b40 <HAL_RCC_OscConfig+0x2a8>
 8005b3e:	e0b5      	b.n	8005cac <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b40:	201f      	movs	r0, #31
 8005b42:	183b      	adds	r3, r7, r0
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b48:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	055b      	lsls	r3, r3, #21
 8005b50:	4013      	ands	r3, r2
 8005b52:	d110      	bne.n	8005b76 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b54:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005b5a:	2180      	movs	r1, #128	@ 0x80
 8005b5c:	0549      	lsls	r1, r1, #21
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	61da      	str	r2, [r3, #28]
 8005b62:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	2380      	movs	r3, #128	@ 0x80
 8005b68:	055b      	lsls	r3, r3, #21
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b70:	183b      	adds	r3, r7, r0
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b76:	4b19      	ldr	r3, [pc, #100]	@ (8005bdc <HAL_RCC_OscConfig+0x344>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	2380      	movs	r3, #128	@ 0x80
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d11a      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b82:	4b16      	ldr	r3, [pc, #88]	@ (8005bdc <HAL_RCC_OscConfig+0x344>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <HAL_RCC_OscConfig+0x344>)
 8005b88:	2180      	movs	r1, #128	@ 0x80
 8005b8a:	0049      	lsls	r1, r1, #1
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b90:	f7fd fae6 	bl	8003160 <HAL_GetTick>
 8005b94:	0003      	movs	r3, r0
 8005b96:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b9a:	f7fd fae1 	bl	8003160 <HAL_GetTick>
 8005b9e:	0002      	movs	r2, r0
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b64      	cmp	r3, #100	@ 0x64
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e1f5      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <HAL_RCC_OscConfig+0x344>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	@ 0x80
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d10f      	bne.n	8005be0 <HAL_RCC_OscConfig+0x348>
 8005bc0:	4b03      	ldr	r3, [pc, #12]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	4b02      	ldr	r3, [pc, #8]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	621a      	str	r2, [r3, #32]
 8005bcc:	e036      	b.n	8005c3c <HAL_RCC_OscConfig+0x3a4>
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	fffeffff 	.word	0xfffeffff
 8005bd8:	fffbffff 	.word	0xfffbffff
 8005bdc:	40007000 	.word	0x40007000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10c      	bne.n	8005c02 <HAL_RCC_OscConfig+0x36a>
 8005be8:	4bca      	ldr	r3, [pc, #808]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005bea:	6a1a      	ldr	r2, [r3, #32]
 8005bec:	4bc9      	ldr	r3, [pc, #804]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005bee:	2101      	movs	r1, #1
 8005bf0:	438a      	bics	r2, r1
 8005bf2:	621a      	str	r2, [r3, #32]
 8005bf4:	4bc7      	ldr	r3, [pc, #796]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005bf6:	6a1a      	ldr	r2, [r3, #32]
 8005bf8:	4bc6      	ldr	r3, [pc, #792]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	438a      	bics	r2, r1
 8005bfe:	621a      	str	r2, [r3, #32]
 8005c00:	e01c      	b.n	8005c3c <HAL_RCC_OscConfig+0x3a4>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x38c>
 8005c0a:	4bc2      	ldr	r3, [pc, #776]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c0c:	6a1a      	ldr	r2, [r3, #32]
 8005c0e:	4bc1      	ldr	r3, [pc, #772]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c10:	2104      	movs	r1, #4
 8005c12:	430a      	orrs	r2, r1
 8005c14:	621a      	str	r2, [r3, #32]
 8005c16:	4bbf      	ldr	r3, [pc, #764]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c18:	6a1a      	ldr	r2, [r3, #32]
 8005c1a:	4bbe      	ldr	r3, [pc, #760]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	621a      	str	r2, [r3, #32]
 8005c22:	e00b      	b.n	8005c3c <HAL_RCC_OscConfig+0x3a4>
 8005c24:	4bbb      	ldr	r3, [pc, #748]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c26:	6a1a      	ldr	r2, [r3, #32]
 8005c28:	4bba      	ldr	r3, [pc, #744]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	438a      	bics	r2, r1
 8005c2e:	621a      	str	r2, [r3, #32]
 8005c30:	4bb8      	ldr	r3, [pc, #736]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c32:	6a1a      	ldr	r2, [r3, #32]
 8005c34:	4bb7      	ldr	r3, [pc, #732]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c36:	2104      	movs	r1, #4
 8005c38:	438a      	bics	r2, r1
 8005c3a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d014      	beq.n	8005c6e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c44:	f7fd fa8c 	bl	8003160 <HAL_GetTick>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4c:	e009      	b.n	8005c62 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f7fd fa87 	bl	8003160 <HAL_GetTick>
 8005c52:	0002      	movs	r2, r0
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	4aaf      	ldr	r2, [pc, #700]	@ (8005f18 <HAL_RCC_OscConfig+0x680>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e19a      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c62:	4bac      	ldr	r3, [pc, #688]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	2202      	movs	r2, #2
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x3b6>
 8005c6c:	e013      	b.n	8005c96 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6e:	f7fd fa77 	bl	8003160 <HAL_GetTick>
 8005c72:	0003      	movs	r3, r0
 8005c74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c76:	e009      	b.n	8005c8c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c78:	f7fd fa72 	bl	8003160 <HAL_GetTick>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	4aa5      	ldr	r2, [pc, #660]	@ (8005f18 <HAL_RCC_OscConfig+0x680>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e185      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	2202      	movs	r2, #2
 8005c92:	4013      	ands	r3, r2
 8005c94:	d1f0      	bne.n	8005c78 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c96:	231f      	movs	r3, #31
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca0:	4b9c      	ldr	r3, [pc, #624]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	4b9b      	ldr	r3, [pc, #620]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005ca6:	499d      	ldr	r1, [pc, #628]	@ (8005f1c <HAL_RCC_OscConfig+0x684>)
 8005ca8:	400a      	ands	r2, r1
 8005caa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d063      	beq.n	8005d7e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d12a      	bne.n	8005d14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005cbe:	4b95      	ldr	r3, [pc, #596]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cc2:	4b94      	ldr	r3, [pc, #592]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005cc4:	2104      	movs	r1, #4
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005cca:	4b92      	ldr	r3, [pc, #584]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cce:	4b91      	ldr	r3, [pc, #580]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd6:	f7fd fa43 	bl	8003160 <HAL_GetTick>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005ce0:	f7fd fa3e 	bl	8003160 <HAL_GetTick>
 8005ce4:	0002      	movs	r2, r0
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e152      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005cf2:	4b88      	ldr	r3, [pc, #544]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d0f1      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005cfc:	4b85      	ldr	r3, [pc, #532]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d00:	22f8      	movs	r2, #248	@ 0xf8
 8005d02:	4393      	bics	r3, r2
 8005d04:	0019      	movs	r1, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	00da      	lsls	r2, r3, #3
 8005d0c:	4b81      	ldr	r3, [pc, #516]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d12:	e034      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	3305      	adds	r3, #5
 8005d1a:	d111      	bne.n	8005d40 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005d1c:	4b7d      	ldr	r3, [pc, #500]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d20:	4b7c      	ldr	r3, [pc, #496]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d22:	2104      	movs	r1, #4
 8005d24:	438a      	bics	r2, r1
 8005d26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005d28:	4b7a      	ldr	r3, [pc, #488]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2c:	22f8      	movs	r2, #248	@ 0xf8
 8005d2e:	4393      	bics	r3, r2
 8005d30:	0019      	movs	r1, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	00da      	lsls	r2, r3, #3
 8005d38:	4b76      	ldr	r3, [pc, #472]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d3e:	e01e      	b.n	8005d7e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005d40:	4b74      	ldr	r3, [pc, #464]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d44:	4b73      	ldr	r3, [pc, #460]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d46:	2104      	movs	r1, #4
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005d4c:	4b71      	ldr	r3, [pc, #452]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d50:	4b70      	ldr	r3, [pc, #448]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d52:	2101      	movs	r1, #1
 8005d54:	438a      	bics	r2, r1
 8005d56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d58:	f7fd fa02 	bl	8003160 <HAL_GetTick>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005d62:	f7fd f9fd 	bl	8003160 <HAL_GetTick>
 8005d66:	0002      	movs	r2, r0
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e111      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005d74:	4b67      	ldr	r3, [pc, #412]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d78:	2202      	movs	r2, #2
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d1f1      	bne.n	8005d62 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2220      	movs	r2, #32
 8005d84:	4013      	ands	r3, r2
 8005d86:	d05c      	beq.n	8005e42 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005d88:	4b62      	ldr	r3, [pc, #392]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	220c      	movs	r2, #12
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d00e      	beq.n	8005db2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005d94:	4b5f      	ldr	r3, [pc, #380]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	220c      	movs	r2, #12
 8005d9a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d114      	bne.n	8005dca <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005da0:	4b5c      	ldr	r3, [pc, #368]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	23c0      	movs	r3, #192	@ 0xc0
 8005da6:	025b      	lsls	r3, r3, #9
 8005da8:	401a      	ands	r2, r3
 8005daa:	23c0      	movs	r3, #192	@ 0xc0
 8005dac:	025b      	lsls	r3, r3, #9
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d10b      	bne.n	8005dca <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005db2:	4b58      	ldr	r3, [pc, #352]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005db6:	2380      	movs	r3, #128	@ 0x80
 8005db8:	029b      	lsls	r3, r3, #10
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d040      	beq.n	8005e40 <HAL_RCC_OscConfig+0x5a8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d03c      	beq.n	8005e40 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e0e6      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01b      	beq.n	8005e0a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005dd2:	4b50      	ldr	r3, [pc, #320]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005dd8:	2180      	movs	r1, #128	@ 0x80
 8005dda:	0249      	lsls	r1, r1, #9
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fd f9be 	bl	8003160 <HAL_GetTick>
 8005de4:	0003      	movs	r3, r0
 8005de6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dea:	f7fd f9b9 	bl	8003160 <HAL_GetTick>
 8005dee:	0002      	movs	r2, r0
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e0cd      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005dfc:	4b45      	ldr	r3, [pc, #276]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e00:	2380      	movs	r3, #128	@ 0x80
 8005e02:	029b      	lsls	r3, r3, #10
 8005e04:	4013      	ands	r3, r2
 8005e06:	d0f0      	beq.n	8005dea <HAL_RCC_OscConfig+0x552>
 8005e08:	e01b      	b.n	8005e42 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005e0a:	4b42      	ldr	r3, [pc, #264]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e0e:	4b41      	ldr	r3, [pc, #260]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005e10:	4943      	ldr	r1, [pc, #268]	@ (8005f20 <HAL_RCC_OscConfig+0x688>)
 8005e12:	400a      	ands	r2, r1
 8005e14:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e16:	f7fd f9a3 	bl	8003160 <HAL_GetTick>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e20:	f7fd f99e 	bl	8003160 <HAL_GetTick>
 8005e24:	0002      	movs	r2, r0
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e0b2      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005e32:	4b38      	ldr	r3, [pc, #224]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e36:	2380      	movs	r3, #128	@ 0x80
 8005e38:	029b      	lsls	r3, r3, #10
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d1f0      	bne.n	8005e20 <HAL_RCC_OscConfig+0x588>
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005e40:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d100      	bne.n	8005e4c <HAL_RCC_OscConfig+0x5b4>
 8005e4a:	e0a4      	b.n	8005f96 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e4c:	4b31      	ldr	r3, [pc, #196]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	220c      	movs	r2, #12
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d100      	bne.n	8005e5a <HAL_RCC_OscConfig+0x5c2>
 8005e58:	e078      	b.n	8005f4c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d14c      	bne.n	8005efc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e62:	4b2c      	ldr	r3, [pc, #176]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b2b      	ldr	r3, [pc, #172]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005e68:	492e      	ldr	r1, [pc, #184]	@ (8005f24 <HAL_RCC_OscConfig+0x68c>)
 8005e6a:	400a      	ands	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6e:	f7fd f977 	bl	8003160 <HAL_GetTick>
 8005e72:	0003      	movs	r3, r0
 8005e74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e78:	f7fd f972 	bl	8003160 <HAL_GetTick>
 8005e7c:	0002      	movs	r2, r0
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e086      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e8a:	4b22      	ldr	r3, [pc, #136]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	2380      	movs	r3, #128	@ 0x80
 8005e90:	049b      	lsls	r3, r3, #18
 8005e92:	4013      	ands	r3, r2
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e96:	4b1f      	ldr	r3, [pc, #124]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9a:	220f      	movs	r2, #15
 8005e9c:	4393      	bics	r3, r2
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	4a1e      	ldr	r2, [pc, #120]	@ (8005f28 <HAL_RCC_OscConfig+0x690>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	4b15      	ldr	r3, [pc, #84]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec4:	4b13      	ldr	r3, [pc, #76]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b12      	ldr	r3, [pc, #72]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005eca:	2180      	movs	r1, #128	@ 0x80
 8005ecc:	0449      	lsls	r1, r1, #17
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed2:	f7fd f945 	bl	8003160 <HAL_GetTick>
 8005ed6:	0003      	movs	r3, r0
 8005ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fd f940 	bl	8003160 <HAL_GetTick>
 8005ee0:	0002      	movs	r2, r0
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e054      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eee:	4b09      	ldr	r3, [pc, #36]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	2380      	movs	r3, #128	@ 0x80
 8005ef4:	049b      	lsls	r3, r3, #18
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x644>
 8005efa:	e04c      	b.n	8005f96 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <HAL_RCC_OscConfig+0x67c>)
 8005f02:	4908      	ldr	r1, [pc, #32]	@ (8005f24 <HAL_RCC_OscConfig+0x68c>)
 8005f04:	400a      	ands	r2, r1
 8005f06:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f08:	f7fd f92a 	bl	8003160 <HAL_GetTick>
 8005f0c:	0003      	movs	r3, r0
 8005f0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f10:	e015      	b.n	8005f3e <HAL_RCC_OscConfig+0x6a6>
 8005f12:	46c0      	nop			@ (mov r8, r8)
 8005f14:	40021000 	.word	0x40021000
 8005f18:	00001388 	.word	0x00001388
 8005f1c:	efffffff 	.word	0xefffffff
 8005f20:	fffeffff 	.word	0xfffeffff
 8005f24:	feffffff 	.word	0xfeffffff
 8005f28:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f2c:	f7fd f918 	bl	8003160 <HAL_GetTick>
 8005f30:	0002      	movs	r2, r0
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e02c      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f3e:	4b18      	ldr	r3, [pc, #96]	@ (8005fa0 <HAL_RCC_OscConfig+0x708>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	2380      	movs	r3, #128	@ 0x80
 8005f44:	049b      	lsls	r3, r3, #18
 8005f46:	4013      	ands	r3, r2
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x694>
 8005f4a:	e024      	b.n	8005f96 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e01f      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005f58:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <HAL_RCC_OscConfig+0x708>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005f5e:	4b10      	ldr	r3, [pc, #64]	@ (8005fa0 <HAL_RCC_OscConfig+0x708>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	23c0      	movs	r3, #192	@ 0xc0
 8005f68:	025b      	lsls	r3, r3, #9
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d10e      	bne.n	8005f92 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	220f      	movs	r2, #15
 8005f78:	401a      	ands	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d107      	bne.n	8005f92 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	23f0      	movs	r3, #240	@ 0xf0
 8005f86:	039b      	lsls	r3, r3, #14
 8005f88:	401a      	ands	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d001      	beq.n	8005f96 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b008      	add	sp, #32
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40021000 	.word	0x40021000

08005fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0bf      	b.n	8006138 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b61      	ldr	r3, [pc, #388]	@ (8006140 <HAL_RCC_ClockConfig+0x19c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d911      	bls.n	8005fea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b5e      	ldr	r3, [pc, #376]	@ (8006140 <HAL_RCC_ClockConfig+0x19c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4393      	bics	r3, r2
 8005fce:	0019      	movs	r1, r3
 8005fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8006140 <HAL_RCC_ClockConfig+0x19c>)
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd8:	4b59      	ldr	r3, [pc, #356]	@ (8006140 <HAL_RCC_ClockConfig+0x19c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	4013      	ands	r3, r2
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d001      	beq.n	8005fea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0a6      	b.n	8006138 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d015      	beq.n	8006020 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d006      	beq.n	800600c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ffe:	4b51      	ldr	r3, [pc, #324]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	4b50      	ldr	r3, [pc, #320]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006004:	21e0      	movs	r1, #224	@ 0xe0
 8006006:	00c9      	lsls	r1, r1, #3
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800600c:	4b4d      	ldr	r3, [pc, #308]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	22f0      	movs	r2, #240	@ 0xf0
 8006012:	4393      	bics	r3, r2
 8006014:	0019      	movs	r1, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	4b4a      	ldr	r3, [pc, #296]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2201      	movs	r2, #1
 8006026:	4013      	ands	r3, r2
 8006028:	d04c      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d107      	bne.n	8006042 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006032:	4b44      	ldr	r3, [pc, #272]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	2380      	movs	r3, #128	@ 0x80
 8006038:	029b      	lsls	r3, r3, #10
 800603a:	4013      	ands	r3, r2
 800603c:	d120      	bne.n	8006080 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e07a      	b.n	8006138 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d107      	bne.n	800605a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604a:	4b3e      	ldr	r3, [pc, #248]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	2380      	movs	r3, #128	@ 0x80
 8006050:	049b      	lsls	r3, r3, #18
 8006052:	4013      	ands	r3, r2
 8006054:	d114      	bne.n	8006080 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e06e      	b.n	8006138 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b03      	cmp	r3, #3
 8006060:	d107      	bne.n	8006072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006062:	4b38      	ldr	r3, [pc, #224]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006066:	2380      	movs	r3, #128	@ 0x80
 8006068:	029b      	lsls	r3, r3, #10
 800606a:	4013      	ands	r3, r2
 800606c:	d108      	bne.n	8006080 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e062      	b.n	8006138 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006072:	4b34      	ldr	r3, [pc, #208]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2202      	movs	r2, #2
 8006078:	4013      	ands	r3, r2
 800607a:	d101      	bne.n	8006080 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e05b      	b.n	8006138 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006080:	4b30      	ldr	r3, [pc, #192]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2203      	movs	r2, #3
 8006086:	4393      	bics	r3, r2
 8006088:	0019      	movs	r1, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	4b2d      	ldr	r3, [pc, #180]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006094:	f7fd f864 	bl	8003160 <HAL_GetTick>
 8006098:	0003      	movs	r3, r0
 800609a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609c:	e009      	b.n	80060b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800609e:	f7fd f85f 	bl	8003160 <HAL_GetTick>
 80060a2:	0002      	movs	r2, r0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	4a27      	ldr	r2, [pc, #156]	@ (8006148 <HAL_RCC_ClockConfig+0x1a4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e042      	b.n	8006138 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	4b24      	ldr	r3, [pc, #144]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	220c      	movs	r2, #12
 80060b8:	401a      	ands	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d1ec      	bne.n	800609e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006140 <HAL_RCC_ClockConfig+0x19c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2201      	movs	r2, #1
 80060ca:	4013      	ands	r3, r2
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d211      	bcs.n	80060f6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <HAL_RCC_ClockConfig+0x19c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2201      	movs	r2, #1
 80060d8:	4393      	bics	r3, r2
 80060da:	0019      	movs	r1, r3
 80060dc:	4b18      	ldr	r3, [pc, #96]	@ (8006140 <HAL_RCC_ClockConfig+0x19c>)
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e4:	4b16      	ldr	r3, [pc, #88]	@ (8006140 <HAL_RCC_ClockConfig+0x19c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	4013      	ands	r3, r2
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d001      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e020      	b.n	8006138 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2204      	movs	r2, #4
 80060fc:	4013      	ands	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006100:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a11      	ldr	r2, [pc, #68]	@ (800614c <HAL_RCC_ClockConfig+0x1a8>)
 8006106:	4013      	ands	r3, r2
 8006108:	0019      	movs	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006114:	f000 f820 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 8006118:	0001      	movs	r1, r0
 800611a:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <HAL_RCC_ClockConfig+0x1a0>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	220f      	movs	r2, #15
 8006122:	4013      	ands	r3, r2
 8006124:	4a0a      	ldr	r2, [pc, #40]	@ (8006150 <HAL_RCC_ClockConfig+0x1ac>)
 8006126:	5cd3      	ldrb	r3, [r2, r3]
 8006128:	000a      	movs	r2, r1
 800612a:	40da      	lsrs	r2, r3
 800612c:	4b09      	ldr	r3, [pc, #36]	@ (8006154 <HAL_RCC_ClockConfig+0x1b0>)
 800612e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006130:	2003      	movs	r0, #3
 8006132:	f7fc ffcf 	bl	80030d4 <HAL_InitTick>
  
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	0018      	movs	r0, r3
 800613a:	46bd      	mov	sp, r7
 800613c:	b004      	add	sp, #16
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40022000 	.word	0x40022000
 8006144:	40021000 	.word	0x40021000
 8006148:	00001388 	.word	0x00001388
 800614c:	fffff8ff 	.word	0xfffff8ff
 8006150:	0800d8b4 	.word	0x0800d8b4
 8006154:	20000040 	.word	0x20000040

08006158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	2300      	movs	r3, #0
 800616c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006172:	4b2d      	ldr	r3, [pc, #180]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	220c      	movs	r2, #12
 800617c:	4013      	ands	r3, r2
 800617e:	2b0c      	cmp	r3, #12
 8006180:	d046      	beq.n	8006210 <HAL_RCC_GetSysClockFreq+0xb8>
 8006182:	d848      	bhi.n	8006216 <HAL_RCC_GetSysClockFreq+0xbe>
 8006184:	2b04      	cmp	r3, #4
 8006186:	d002      	beq.n	800618e <HAL_RCC_GetSysClockFreq+0x36>
 8006188:	2b08      	cmp	r3, #8
 800618a:	d003      	beq.n	8006194 <HAL_RCC_GetSysClockFreq+0x3c>
 800618c:	e043      	b.n	8006216 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800618e:	4b27      	ldr	r3, [pc, #156]	@ (800622c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006190:	613b      	str	r3, [r7, #16]
      break;
 8006192:	e043      	b.n	800621c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	0c9b      	lsrs	r3, r3, #18
 8006198:	220f      	movs	r2, #15
 800619a:	4013      	ands	r3, r2
 800619c:	4a24      	ldr	r2, [pc, #144]	@ (8006230 <HAL_RCC_GetSysClockFreq+0xd8>)
 800619e:	5cd3      	ldrb	r3, [r2, r3]
 80061a0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80061a2:	4b21      	ldr	r3, [pc, #132]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xd0>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a6:	220f      	movs	r2, #15
 80061a8:	4013      	ands	r3, r2
 80061aa:	4a22      	ldr	r2, [pc, #136]	@ (8006234 <HAL_RCC_GetSysClockFreq+0xdc>)
 80061ac:	5cd3      	ldrb	r3, [r2, r3]
 80061ae:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	23c0      	movs	r3, #192	@ 0xc0
 80061b4:	025b      	lsls	r3, r3, #9
 80061b6:	401a      	ands	r2, r3
 80061b8:	2380      	movs	r3, #128	@ 0x80
 80061ba:	025b      	lsls	r3, r3, #9
 80061bc:	429a      	cmp	r2, r3
 80061be:	d109      	bne.n	80061d4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	481a      	ldr	r0, [pc, #104]	@ (800622c <HAL_RCC_GetSysClockFreq+0xd4>)
 80061c4:	f7f9 ffaa 	bl	800011c <__udivsi3>
 80061c8:	0003      	movs	r3, r0
 80061ca:	001a      	movs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4353      	muls	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	e01a      	b.n	800620a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	23c0      	movs	r3, #192	@ 0xc0
 80061d8:	025b      	lsls	r3, r3, #9
 80061da:	401a      	ands	r2, r3
 80061dc:	23c0      	movs	r3, #192	@ 0xc0
 80061de:	025b      	lsls	r3, r3, #9
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d109      	bne.n	80061f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	4814      	ldr	r0, [pc, #80]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xe0>)
 80061e8:	f7f9 ff98 	bl	800011c <__udivsi3>
 80061ec:	0003      	movs	r3, r0
 80061ee:	001a      	movs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4353      	muls	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	e008      	b.n	800620a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	480c      	ldr	r0, [pc, #48]	@ (800622c <HAL_RCC_GetSysClockFreq+0xd4>)
 80061fc:	f7f9 ff8e 	bl	800011c <__udivsi3>
 8006200:	0003      	movs	r3, r0
 8006202:	001a      	movs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4353      	muls	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	613b      	str	r3, [r7, #16]
      break;
 800620e:	e005      	b.n	800621c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006210:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006212:	613b      	str	r3, [r7, #16]
      break;
 8006214:	e002      	b.n	800621c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006216:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006218:	613b      	str	r3, [r7, #16]
      break;
 800621a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800621c:	693b      	ldr	r3, [r7, #16]
}
 800621e:	0018      	movs	r0, r3
 8006220:	46bd      	mov	sp, r7
 8006222:	b006      	add	sp, #24
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			@ (mov r8, r8)
 8006228:	40021000 	.word	0x40021000
 800622c:	007a1200 	.word	0x007a1200
 8006230:	0800d8cc 	.word	0x0800d8cc
 8006234:	0800d8dc 	.word	0x0800d8dc
 8006238:	02dc6c00 	.word	0x02dc6c00

0800623c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006240:	4b02      	ldr	r3, [pc, #8]	@ (800624c <HAL_RCC_GetHCLKFreq+0x10>)
 8006242:	681b      	ldr	r3, [r3, #0]
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	20000040 	.word	0x20000040

08006250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006254:	f7ff fff2 	bl	800623c <HAL_RCC_GetHCLKFreq>
 8006258:	0001      	movs	r1, r0
 800625a:	4b06      	ldr	r3, [pc, #24]	@ (8006274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	2207      	movs	r2, #7
 8006262:	4013      	ands	r3, r2
 8006264:	4a04      	ldr	r2, [pc, #16]	@ (8006278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006266:	5cd3      	ldrb	r3, [r2, r3]
 8006268:	40d9      	lsrs	r1, r3
 800626a:	000b      	movs	r3, r1
}    
 800626c:	0018      	movs	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	40021000 	.word	0x40021000
 8006278:	0800d8c4 	.word	0x0800d8c4

0800627c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	2380      	movs	r3, #128	@ 0x80
 8006292:	025b      	lsls	r3, r3, #9
 8006294:	4013      	ands	r3, r2
 8006296:	d100      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006298:	e08e      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800629a:	2017      	movs	r0, #23
 800629c:	183b      	adds	r3, r7, r0
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062a2:	4b6e      	ldr	r3, [pc, #440]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	2380      	movs	r3, #128	@ 0x80
 80062a8:	055b      	lsls	r3, r3, #21
 80062aa:	4013      	ands	r3, r2
 80062ac:	d110      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062ae:	4b6b      	ldr	r3, [pc, #428]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	4b6a      	ldr	r3, [pc, #424]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062b4:	2180      	movs	r1, #128	@ 0x80
 80062b6:	0549      	lsls	r1, r1, #21
 80062b8:	430a      	orrs	r2, r1
 80062ba:	61da      	str	r2, [r3, #28]
 80062bc:	4b67      	ldr	r3, [pc, #412]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	2380      	movs	r3, #128	@ 0x80
 80062c2:	055b      	lsls	r3, r3, #21
 80062c4:	4013      	ands	r3, r2
 80062c6:	60bb      	str	r3, [r7, #8]
 80062c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ca:	183b      	adds	r3, r7, r0
 80062cc:	2201      	movs	r2, #1
 80062ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d0:	4b63      	ldr	r3, [pc, #396]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	2380      	movs	r3, #128	@ 0x80
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	4013      	ands	r3, r2
 80062da:	d11a      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062dc:	4b60      	ldr	r3, [pc, #384]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b5f      	ldr	r3, [pc, #380]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80062e2:	2180      	movs	r1, #128	@ 0x80
 80062e4:	0049      	lsls	r1, r1, #1
 80062e6:	430a      	orrs	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ea:	f7fc ff39 	bl	8003160 <HAL_GetTick>
 80062ee:	0003      	movs	r3, r0
 80062f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f2:	e008      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f4:	f7fc ff34 	bl	8003160 <HAL_GetTick>
 80062f8:	0002      	movs	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b64      	cmp	r3, #100	@ 0x64
 8006300:	d901      	bls.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e0a6      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006306:	4b56      	ldr	r3, [pc, #344]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	2380      	movs	r3, #128	@ 0x80
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4013      	ands	r3, r2
 8006310:	d0f0      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006312:	4b52      	ldr	r3, [pc, #328]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006314:	6a1a      	ldr	r2, [r3, #32]
 8006316:	23c0      	movs	r3, #192	@ 0xc0
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4013      	ands	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d034      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	23c0      	movs	r3, #192	@ 0xc0
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4013      	ands	r3, r2
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	429a      	cmp	r2, r3
 8006332:	d02c      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006334:	4b49      	ldr	r3, [pc, #292]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	4a4a      	ldr	r2, [pc, #296]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800633a:	4013      	ands	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800633e:	4b47      	ldr	r3, [pc, #284]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	4b46      	ldr	r3, [pc, #280]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006344:	2180      	movs	r1, #128	@ 0x80
 8006346:	0249      	lsls	r1, r1, #9
 8006348:	430a      	orrs	r2, r1
 800634a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800634c:	4b43      	ldr	r3, [pc, #268]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800634e:	6a1a      	ldr	r2, [r3, #32]
 8006350:	4b42      	ldr	r3, [pc, #264]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006352:	4945      	ldr	r1, [pc, #276]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006354:	400a      	ands	r2, r1
 8006356:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006358:	4b40      	ldr	r3, [pc, #256]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	4013      	ands	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006366:	f7fc fefb 	bl	8003160 <HAL_GetTick>
 800636a:	0003      	movs	r3, r0
 800636c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636e:	e009      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006370:	f7fc fef6 	bl	8003160 <HAL_GetTick>
 8006374:	0002      	movs	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	4a3c      	ldr	r2, [pc, #240]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e067      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006384:	4b35      	ldr	r3, [pc, #212]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	2202      	movs	r2, #2
 800638a:	4013      	ands	r3, r2
 800638c:	d0f0      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800638e:	4b33      	ldr	r3, [pc, #204]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	4a34      	ldr	r2, [pc, #208]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006394:	4013      	ands	r3, r2
 8006396:	0019      	movs	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4b2f      	ldr	r3, [pc, #188]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800639e:	430a      	orrs	r2, r1
 80063a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063a2:	2317      	movs	r3, #23
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d105      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ac:	4b2b      	ldr	r3, [pc, #172]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	4b2a      	ldr	r3, [pc, #168]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063b2:	492f      	ldr	r1, [pc, #188]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80063b4:	400a      	ands	r2, r1
 80063b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2201      	movs	r2, #1
 80063be:	4013      	ands	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063c2:	4b26      	ldr	r3, [pc, #152]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c6:	2203      	movs	r2, #3
 80063c8:	4393      	bics	r3, r2
 80063ca:	0019      	movs	r1, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	4b22      	ldr	r3, [pc, #136]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063d2:	430a      	orrs	r2, r1
 80063d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2202      	movs	r2, #2
 80063dc:	4013      	ands	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063e0:	4b1e      	ldr	r3, [pc, #120]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e4:	4a23      	ldr	r2, [pc, #140]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	0019      	movs	r1, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	4b1b      	ldr	r3, [pc, #108]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063f0:	430a      	orrs	r2, r1
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2220      	movs	r2, #32
 80063fa:	4013      	ands	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063fe:	4b17      	ldr	r3, [pc, #92]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006402:	2210      	movs	r2, #16
 8006404:	4393      	bics	r3, r2
 8006406:	0019      	movs	r1, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	4b13      	ldr	r3, [pc, #76]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800640e:	430a      	orrs	r2, r1
 8006410:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	2380      	movs	r3, #128	@ 0x80
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	4013      	ands	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800641e:	4b0f      	ldr	r3, [pc, #60]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	2280      	movs	r2, #128	@ 0x80
 8006424:	4393      	bics	r3, r2
 8006426:	0019      	movs	r1, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699a      	ldr	r2, [r3, #24]
 800642c:	4b0b      	ldr	r3, [pc, #44]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800642e:	430a      	orrs	r2, r1
 8006430:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	2380      	movs	r3, #128	@ 0x80
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4013      	ands	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800643e:	4b07      	ldr	r3, [pc, #28]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006442:	2240      	movs	r2, #64	@ 0x40
 8006444:	4393      	bics	r3, r2
 8006446:	0019      	movs	r1, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695a      	ldr	r2, [r3, #20]
 800644c:	4b03      	ldr	r3, [pc, #12]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800644e:	430a      	orrs	r2, r1
 8006450:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b006      	add	sp, #24
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40021000 	.word	0x40021000
 8006460:	40007000 	.word	0x40007000
 8006464:	fffffcff 	.word	0xfffffcff
 8006468:	fffeffff 	.word	0xfffeffff
 800646c:	00001388 	.word	0x00001388
 8006470:	efffffff 	.word	0xefffffff
 8006474:	fffcffff 	.word	0xfffcffff

08006478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e0a8      	b.n	80065dc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	2382      	movs	r3, #130	@ 0x82
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	429a      	cmp	r2, r3
 800649c:	d009      	beq.n	80064b2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	61da      	str	r2, [r3, #28]
 80064a4:	e005      	b.n	80064b2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	225d      	movs	r2, #93	@ 0x5d
 80064bc:	5c9b      	ldrb	r3, [r3, r2]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	225c      	movs	r2, #92	@ 0x5c
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0018      	movs	r0, r3
 80064d0:	f7fc fc5c 	bl	8002d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	225d      	movs	r2, #93	@ 0x5d
 80064d8:	2102      	movs	r1, #2
 80064da:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2140      	movs	r1, #64	@ 0x40
 80064e8:	438a      	bics	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	23e0      	movs	r3, #224	@ 0xe0
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d902      	bls.n	80064fe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e002      	b.n	8006504 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064fe:	2380      	movs	r3, #128	@ 0x80
 8006500:	015b      	lsls	r3, r3, #5
 8006502:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	23f0      	movs	r3, #240	@ 0xf0
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	429a      	cmp	r2, r3
 800650e:	d008      	beq.n	8006522 <HAL_SPI_Init+0xaa>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	23e0      	movs	r3, #224	@ 0xe0
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	429a      	cmp	r2, r3
 800651a:	d002      	beq.n	8006522 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	2382      	movs	r3, #130	@ 0x82
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	401a      	ands	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6899      	ldr	r1, [r3, #8]
 8006530:	2384      	movs	r3, #132	@ 0x84
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	400b      	ands	r3, r1
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2102      	movs	r1, #2
 800653e:	400b      	ands	r3, r1
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2101      	movs	r1, #1
 8006548:	400b      	ands	r3, r1
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6999      	ldr	r1, [r3, #24]
 8006550:	2380      	movs	r3, #128	@ 0x80
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	400b      	ands	r3, r1
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	2138      	movs	r1, #56	@ 0x38
 800655e:	400b      	ands	r3, r1
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	2180      	movs	r1, #128	@ 0x80
 8006568:	400b      	ands	r3, r1
 800656a:	431a      	orrs	r2, r3
 800656c:	0011      	movs	r1, r2
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	019b      	lsls	r3, r3, #6
 8006576:	401a      	ands	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	0c1b      	lsrs	r3, r3, #16
 8006586:	2204      	movs	r2, #4
 8006588:	401a      	ands	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	2110      	movs	r1, #16
 8006590:	400b      	ands	r3, r1
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006598:	2108      	movs	r1, #8
 800659a:	400b      	ands	r3, r1
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68d9      	ldr	r1, [r3, #12]
 80065a2:	23f0      	movs	r3, #240	@ 0xf0
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	400b      	ands	r3, r1
 80065a8:	431a      	orrs	r2, r3
 80065aa:	0011      	movs	r1, r2
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	2380      	movs	r3, #128	@ 0x80
 80065b0:	015b      	lsls	r3, r3, #5
 80065b2:	401a      	ands	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69da      	ldr	r2, [r3, #28]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4907      	ldr	r1, [pc, #28]	@ (80065e4 <HAL_SPI_Init+0x16c>)
 80065c8:	400a      	ands	r2, r1
 80065ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	225d      	movs	r2, #93	@ 0x5d
 80065d6:	2101      	movs	r1, #1
 80065d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	0018      	movs	r0, r3
 80065de:	46bd      	mov	sp, r7
 80065e0:	b004      	add	sp, #16
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	fffff7ff 	.word	0xfffff7ff

080065e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	1dbb      	adds	r3, r7, #6
 80065f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065f8:	231f      	movs	r3, #31
 80065fa:	18fb      	adds	r3, r7, r3
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	225c      	movs	r2, #92	@ 0x5c
 8006604:	5c9b      	ldrb	r3, [r3, r2]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_SPI_Transmit+0x26>
 800660a:	2302      	movs	r3, #2
 800660c:	e147      	b.n	800689e <HAL_SPI_Transmit+0x2b6>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	225c      	movs	r2, #92	@ 0x5c
 8006612:	2101      	movs	r1, #1
 8006614:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006616:	f7fc fda3 	bl	8003160 <HAL_GetTick>
 800661a:	0003      	movs	r3, r0
 800661c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800661e:	2316      	movs	r3, #22
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	1dba      	adds	r2, r7, #6
 8006624:	8812      	ldrh	r2, [r2, #0]
 8006626:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	225d      	movs	r2, #93	@ 0x5d
 800662c:	5c9b      	ldrb	r3, [r3, r2]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d004      	beq.n	800663e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006634:	231f      	movs	r3, #31
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	2202      	movs	r2, #2
 800663a:	701a      	strb	r2, [r3, #0]
    goto error;
 800663c:	e128      	b.n	8006890 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <HAL_SPI_Transmit+0x64>
 8006644:	1dbb      	adds	r3, r7, #6
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800664c:	231f      	movs	r3, #31
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
    goto error;
 8006654:	e11c      	b.n	8006890 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	225d      	movs	r2, #93	@ 0x5d
 800665a:	2103      	movs	r1, #3
 800665c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1dba      	adds	r2, r7, #6
 800666e:	8812      	ldrh	r2, [r2, #0]
 8006670:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1dba      	adds	r2, r7, #6
 8006676:	8812      	ldrh	r2, [r2, #0]
 8006678:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2244      	movs	r2, #68	@ 0x44
 8006684:	2100      	movs	r1, #0
 8006686:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2246      	movs	r2, #70	@ 0x46
 800668c:	2100      	movs	r1, #0
 800668e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d110      	bne.n	80066ca <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2140      	movs	r1, #64	@ 0x40
 80066b4:	438a      	bics	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2180      	movs	r1, #128	@ 0x80
 80066c4:	01c9      	lsls	r1, r1, #7
 80066c6:	430a      	orrs	r2, r1
 80066c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2240      	movs	r2, #64	@ 0x40
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b40      	cmp	r3, #64	@ 0x40
 80066d6:	d007      	beq.n	80066e8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2140      	movs	r1, #64	@ 0x40
 80066e4:	430a      	orrs	r2, r1
 80066e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	23e0      	movs	r3, #224	@ 0xe0
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d952      	bls.n	800679a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <HAL_SPI_Transmit+0x11e>
 80066fc:	2316      	movs	r3, #22
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d143      	bne.n	800678e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	881a      	ldrh	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	1c9a      	adds	r2, r3, #2
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800672a:	e030      	b.n	800678e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2202      	movs	r2, #2
 8006734:	4013      	ands	r3, r2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d112      	bne.n	8006760 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	881a      	ldrh	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674a:	1c9a      	adds	r2, r3, #2
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800675e:	e016      	b.n	800678e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006760:	f7fc fcfe 	bl	8003160 <HAL_GetTick>
 8006764:	0002      	movs	r2, r0
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d802      	bhi.n	8006776 <HAL_SPI_Transmit+0x18e>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	d102      	bne.n	800677c <HAL_SPI_Transmit+0x194>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d108      	bne.n	800678e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800677c:	231f      	movs	r3, #31
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	2203      	movs	r2, #3
 8006782:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	225d      	movs	r2, #93	@ 0x5d
 8006788:	2101      	movs	r1, #1
 800678a:	5499      	strb	r1, [r3, r2]
          goto error;
 800678c:	e080      	b.n	8006890 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1c9      	bne.n	800672c <HAL_SPI_Transmit+0x144>
 8006798:	e053      	b.n	8006842 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d004      	beq.n	80067ac <HAL_SPI_Transmit+0x1c4>
 80067a2:	2316      	movs	r3, #22
 80067a4:	18fb      	adds	r3, r7, r3
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d145      	bne.n	8006838 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	330c      	adds	r3, #12
 80067b6:	7812      	ldrb	r2, [r2, #0]
 80067b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80067d2:	e031      	b.n	8006838 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2202      	movs	r2, #2
 80067dc:	4013      	ands	r3, r2
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d113      	bne.n	800680a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006808:	e016      	b.n	8006838 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800680a:	f7fc fca9 	bl	8003160 <HAL_GetTick>
 800680e:	0002      	movs	r2, r0
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d802      	bhi.n	8006820 <HAL_SPI_Transmit+0x238>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	d102      	bne.n	8006826 <HAL_SPI_Transmit+0x23e>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d108      	bne.n	8006838 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006826:	231f      	movs	r3, #31
 8006828:	18fb      	adds	r3, r7, r3
 800682a:	2203      	movs	r2, #3
 800682c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	225d      	movs	r2, #93	@ 0x5d
 8006832:	2101      	movs	r1, #1
 8006834:	5499      	strb	r1, [r3, r2]
          goto error;
 8006836:	e02b      	b.n	8006890 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1c8      	bne.n	80067d4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	0018      	movs	r0, r3
 800684a:	f000 f969 	bl	8006b20 <SPI_EndRxTxTransaction>
 800684e:	1e03      	subs	r3, r0, #0
 8006850:	d002      	beq.n	8006858 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2220      	movs	r2, #32
 8006856:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800687e:	231f      	movs	r3, #31
 8006880:	18fb      	adds	r3, r7, r3
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e003      	b.n	8006890 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	225d      	movs	r2, #93	@ 0x5d
 800688c:	2101      	movs	r1, #1
 800688e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	225c      	movs	r2, #92	@ 0x5c
 8006894:	2100      	movs	r1, #0
 8006896:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006898:	231f      	movs	r3, #31
 800689a:	18fb      	adds	r3, r7, r3
 800689c:	781b      	ldrb	r3, [r3, #0]
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b008      	add	sp, #32
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	225d      	movs	r2, #93	@ 0x5d
 80068b2:	5c9b      	ldrb	r3, [r3, r2]
 80068b4:	b2db      	uxtb	r3, r3
}
 80068b6:	0018      	movs	r0, r3
 80068b8:	46bd      	mov	sp, r7
 80068ba:	b002      	add	sp, #8
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	1dfb      	adds	r3, r7, #7
 80068ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068d0:	f7fc fc46 	bl	8003160 <HAL_GetTick>
 80068d4:	0002      	movs	r2, r0
 80068d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	18d3      	adds	r3, r2, r3
 80068de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068e0:	f7fc fc3e 	bl	8003160 <HAL_GetTick>
 80068e4:	0003      	movs	r3, r0
 80068e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068e8:	4b3a      	ldr	r3, [pc, #232]	@ (80069d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	015b      	lsls	r3, r3, #5
 80068ee:	0d1b      	lsrs	r3, r3, #20
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	4353      	muls	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068f6:	e058      	b.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	d055      	beq.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068fe:	f7fc fc2f 	bl	8003160 <HAL_GetTick>
 8006902:	0002      	movs	r2, r0
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	429a      	cmp	r2, r3
 800690c:	d902      	bls.n	8006914 <SPI_WaitFlagStateUntilTimeout+0x54>
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d142      	bne.n	800699a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	21e0      	movs	r1, #224	@ 0xe0
 8006920:	438a      	bics	r2, r1
 8006922:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	2382      	movs	r3, #130	@ 0x82
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	429a      	cmp	r2, r3
 800692e:	d113      	bne.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	2380      	movs	r3, #128	@ 0x80
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	429a      	cmp	r2, r3
 800693a:	d005      	beq.n	8006948 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	2380      	movs	r3, #128	@ 0x80
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	429a      	cmp	r2, r3
 8006946:	d107      	bne.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2140      	movs	r1, #64	@ 0x40
 8006954:	438a      	bics	r2, r1
 8006956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800695c:	2380      	movs	r3, #128	@ 0x80
 800695e:	019b      	lsls	r3, r3, #6
 8006960:	429a      	cmp	r2, r3
 8006962:	d110      	bne.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	491a      	ldr	r1, [pc, #104]	@ (80069d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006970:	400a      	ands	r2, r1
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2180      	movs	r1, #128	@ 0x80
 8006980:	0189      	lsls	r1, r1, #6
 8006982:	430a      	orrs	r2, r1
 8006984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	225d      	movs	r2, #93	@ 0x5d
 800698a:	2101      	movs	r1, #1
 800698c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	225c      	movs	r2, #92	@ 0x5c
 8006992:	2100      	movs	r1, #0
 8006994:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e017      	b.n	80069ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	4013      	ands	r3, r2
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	425a      	negs	r2, r3
 80069ba:	4153      	adcs	r3, r2
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	001a      	movs	r2, r3
 80069c0:	1dfb      	adds	r3, r7, #7
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d197      	bne.n	80068f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	0018      	movs	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b008      	add	sp, #32
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	46c0      	nop			@ (mov r8, r8)
 80069d4:	20000040 	.word	0x20000040
 80069d8:	ffffdfff 	.word	0xffffdfff

080069dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08a      	sub	sp, #40	@ 0x28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069ea:	2317      	movs	r3, #23
 80069ec:	18fb      	adds	r3, r7, r3
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069f2:	f7fc fbb5 	bl	8003160 <HAL_GetTick>
 80069f6:	0002      	movs	r2, r0
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	18d3      	adds	r3, r2, r3
 8006a00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006a02:	f7fc fbad 	bl	8003160 <HAL_GetTick>
 8006a06:	0003      	movs	r3, r0
 8006a08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a12:	4b41      	ldr	r3, [pc, #260]	@ (8006b18 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	0013      	movs	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	00da      	lsls	r2, r3, #3
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	0d1b      	lsrs	r3, r3, #20
 8006a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a24:	4353      	muls	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a28:	e068      	b.n	8006afc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	23c0      	movs	r3, #192	@ 0xc0
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d10a      	bne.n	8006a4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d107      	bne.n	8006a4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	2117      	movs	r1, #23
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	d055      	beq.n	8006afc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a50:	f7fc fb86 	bl	8003160 <HAL_GetTick>
 8006a54:	0002      	movs	r2, r0
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d902      	bls.n	8006a66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d142      	bne.n	8006aec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	21e0      	movs	r1, #224	@ 0xe0
 8006a72:	438a      	bics	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	2382      	movs	r3, #130	@ 0x82
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d113      	bne.n	8006aaa <SPI_WaitFifoStateUntilTimeout+0xce>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	2380      	movs	r3, #128	@ 0x80
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d005      	beq.n	8006a9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	2380      	movs	r3, #128	@ 0x80
 8006a94:	00db      	lsls	r3, r3, #3
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d107      	bne.n	8006aaa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2140      	movs	r1, #64	@ 0x40
 8006aa6:	438a      	bics	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aae:	2380      	movs	r3, #128	@ 0x80
 8006ab0:	019b      	lsls	r3, r3, #6
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d110      	bne.n	8006ad8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4916      	ldr	r1, [pc, #88]	@ (8006b1c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2180      	movs	r1, #128	@ 0x80
 8006ad2:	0189      	lsls	r1, r1, #6
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	225d      	movs	r2, #93	@ 0x5d
 8006adc:	2101      	movs	r1, #1
 8006ade:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	225c      	movs	r2, #92	@ 0x5c
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e010      	b.n	8006b0e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	4013      	ands	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d18e      	bne.n	8006a2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	0018      	movs	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	b00a      	add	sp, #40	@ 0x28
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	46c0      	nop			@ (mov r8, r8)
 8006b18:	20000040 	.word	0x20000040
 8006b1c:	ffffdfff 	.word	0xffffdfff

08006b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	23c0      	movs	r3, #192	@ 0xc0
 8006b30:	0159      	lsls	r1, r3, #5
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	0013      	movs	r3, r2
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f7ff ff4e 	bl	80069dc <SPI_WaitFifoStateUntilTimeout>
 8006b40:	1e03      	subs	r3, r0, #0
 8006b42:	d007      	beq.n	8006b54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b48:	2220      	movs	r2, #32
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e027      	b.n	8006ba4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	0013      	movs	r3, r2
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2180      	movs	r1, #128	@ 0x80
 8006b62:	f7ff fead 	bl	80068c0 <SPI_WaitFlagStateUntilTimeout>
 8006b66:	1e03      	subs	r3, r0, #0
 8006b68:	d007      	beq.n	8006b7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b6e:	2220      	movs	r2, #32
 8006b70:	431a      	orrs	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e014      	b.n	8006ba4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	23c0      	movs	r3, #192	@ 0xc0
 8006b7e:	00d9      	lsls	r1, r3, #3
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	0013      	movs	r3, r2
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f7ff ff27 	bl	80069dc <SPI_WaitFifoStateUntilTimeout>
 8006b8e:	1e03      	subs	r3, r0, #0
 8006b90:	d007      	beq.n	8006ba2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b96:	2220      	movs	r2, #32
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e000      	b.n	8006ba4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b004      	add	sp, #16
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e044      	b.n	8006c48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d107      	bne.n	8006bd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2278      	movs	r2, #120	@ 0x78
 8006bca:	2100      	movs	r1, #0
 8006bcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f7fc f97d 	bl	8002ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2224      	movs	r2, #36	@ 0x24
 8006bda:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2101      	movs	r1, #1
 8006be8:	438a      	bics	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f000 f9b4 	bl	8006f64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f000 f828 	bl	8006c54 <UART_SetConfig>
 8006c04:	0003      	movs	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e01c      	b.n	8006c48 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	490d      	ldr	r1, [pc, #52]	@ (8006c50 <HAL_UART_Init+0xa4>)
 8006c1a:	400a      	ands	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	212a      	movs	r1, #42	@ 0x2a
 8006c2a:	438a      	bics	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2101      	movs	r1, #1
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0018      	movs	r0, r3
 8006c42:	f000 fa43 	bl	80070cc <UART_CheckIdleState>
 8006c46:	0003      	movs	r3, r0
}
 8006c48:	0018      	movs	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b002      	add	sp, #8
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	ffffb7ff 	.word	0xffffb7ff

08006c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c5c:	231e      	movs	r3, #30
 8006c5e:	18fb      	adds	r3, r7, r3
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4aaf      	ldr	r2, [pc, #700]	@ (8006f40 <UART_SetConfig+0x2ec>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	0019      	movs	r1, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4aaa      	ldr	r2, [pc, #680]	@ (8006f44 <UART_SetConfig+0x2f0>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	0019      	movs	r1, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	4aa1      	ldr	r2, [pc, #644]	@ (8006f48 <UART_SetConfig+0x2f4>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a9d      	ldr	r2, [pc, #628]	@ (8006f4c <UART_SetConfig+0x2f8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d127      	bne.n	8006d2a <UART_SetConfig+0xd6>
 8006cda:	4b9d      	ldr	r3, [pc, #628]	@ (8006f50 <UART_SetConfig+0x2fc>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cde:	2203      	movs	r2, #3
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d00d      	beq.n	8006d02 <UART_SetConfig+0xae>
 8006ce6:	d81b      	bhi.n	8006d20 <UART_SetConfig+0xcc>
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d014      	beq.n	8006d16 <UART_SetConfig+0xc2>
 8006cec:	d818      	bhi.n	8006d20 <UART_SetConfig+0xcc>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <UART_SetConfig+0xa4>
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d00a      	beq.n	8006d0c <UART_SetConfig+0xb8>
 8006cf6:	e013      	b.n	8006d20 <UART_SetConfig+0xcc>
 8006cf8:	231f      	movs	r3, #31
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	e065      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d02:	231f      	movs	r3, #31
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	2202      	movs	r2, #2
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	e060      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d0c:	231f      	movs	r3, #31
 8006d0e:	18fb      	adds	r3, r7, r3
 8006d10:	2204      	movs	r2, #4
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e05b      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d16:	231f      	movs	r3, #31
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e056      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d20:	231f      	movs	r3, #31
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	2210      	movs	r2, #16
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e051      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a89      	ldr	r2, [pc, #548]	@ (8006f54 <UART_SetConfig+0x300>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d134      	bne.n	8006d9e <UART_SetConfig+0x14a>
 8006d34:	4b86      	ldr	r3, [pc, #536]	@ (8006f50 <UART_SetConfig+0x2fc>)
 8006d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d38:	23c0      	movs	r3, #192	@ 0xc0
 8006d3a:	029b      	lsls	r3, r3, #10
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	22c0      	movs	r2, #192	@ 0xc0
 8006d40:	0292      	lsls	r2, r2, #10
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d017      	beq.n	8006d76 <UART_SetConfig+0x122>
 8006d46:	22c0      	movs	r2, #192	@ 0xc0
 8006d48:	0292      	lsls	r2, r2, #10
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d822      	bhi.n	8006d94 <UART_SetConfig+0x140>
 8006d4e:	2280      	movs	r2, #128	@ 0x80
 8006d50:	0292      	lsls	r2, r2, #10
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d019      	beq.n	8006d8a <UART_SetConfig+0x136>
 8006d56:	2280      	movs	r2, #128	@ 0x80
 8006d58:	0292      	lsls	r2, r2, #10
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d81a      	bhi.n	8006d94 <UART_SetConfig+0x140>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <UART_SetConfig+0x118>
 8006d62:	2280      	movs	r2, #128	@ 0x80
 8006d64:	0252      	lsls	r2, r2, #9
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00a      	beq.n	8006d80 <UART_SetConfig+0x12c>
 8006d6a:	e013      	b.n	8006d94 <UART_SetConfig+0x140>
 8006d6c:	231f      	movs	r3, #31
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	e02b      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d76:	231f      	movs	r3, #31
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e026      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d80:	231f      	movs	r3, #31
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	2204      	movs	r2, #4
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	e021      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d8a:	231f      	movs	r3, #31
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	2208      	movs	r2, #8
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e01c      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d94:	231f      	movs	r3, #31
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	2210      	movs	r2, #16
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e017      	b.n	8006dce <UART_SetConfig+0x17a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a6d      	ldr	r2, [pc, #436]	@ (8006f58 <UART_SetConfig+0x304>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d104      	bne.n	8006db2 <UART_SetConfig+0x15e>
 8006da8:	231f      	movs	r3, #31
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	e00d      	b.n	8006dce <UART_SetConfig+0x17a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a69      	ldr	r2, [pc, #420]	@ (8006f5c <UART_SetConfig+0x308>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d104      	bne.n	8006dc6 <UART_SetConfig+0x172>
 8006dbc:	231f      	movs	r3, #31
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e003      	b.n	8006dce <UART_SetConfig+0x17a>
 8006dc6:	231f      	movs	r3, #31
 8006dc8:	18fb      	adds	r3, r7, r3
 8006dca:	2210      	movs	r2, #16
 8006dcc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	2380      	movs	r3, #128	@ 0x80
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d15c      	bne.n	8006e94 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8006dda:	231f      	movs	r3, #31
 8006ddc:	18fb      	adds	r3, r7, r3
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d015      	beq.n	8006e10 <UART_SetConfig+0x1bc>
 8006de4:	dc18      	bgt.n	8006e18 <UART_SetConfig+0x1c4>
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d00d      	beq.n	8006e06 <UART_SetConfig+0x1b2>
 8006dea:	dc15      	bgt.n	8006e18 <UART_SetConfig+0x1c4>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <UART_SetConfig+0x1a2>
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d005      	beq.n	8006e00 <UART_SetConfig+0x1ac>
 8006df4:	e010      	b.n	8006e18 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006df6:	f7ff fa2b 	bl	8006250 <HAL_RCC_GetPCLK1Freq>
 8006dfa:	0003      	movs	r3, r0
 8006dfc:	61bb      	str	r3, [r7, #24]
        break;
 8006dfe:	e012      	b.n	8006e26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e00:	4b57      	ldr	r3, [pc, #348]	@ (8006f60 <UART_SetConfig+0x30c>)
 8006e02:	61bb      	str	r3, [r7, #24]
        break;
 8006e04:	e00f      	b.n	8006e26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e06:	f7ff f9a7 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	61bb      	str	r3, [r7, #24]
        break;
 8006e0e:	e00a      	b.n	8006e26 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e10:	2380      	movs	r3, #128	@ 0x80
 8006e12:	021b      	lsls	r3, r3, #8
 8006e14:	61bb      	str	r3, [r7, #24]
        break;
 8006e16:	e006      	b.n	8006e26 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e1c:	231e      	movs	r3, #30
 8006e1e:	18fb      	adds	r3, r7, r3
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
        break;
 8006e24:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d100      	bne.n	8006e2e <UART_SetConfig+0x1da>
 8006e2c:	e07a      	b.n	8006f24 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	005a      	lsls	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	085b      	lsrs	r3, r3, #1
 8006e38:	18d2      	adds	r2, r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	0019      	movs	r1, r3
 8006e40:	0010      	movs	r0, r2
 8006e42:	f7f9 f96b 	bl	800011c <__udivsi3>
 8006e46:	0003      	movs	r3, r0
 8006e48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b0f      	cmp	r3, #15
 8006e4e:	d91c      	bls.n	8006e8a <UART_SetConfig+0x236>
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	2380      	movs	r3, #128	@ 0x80
 8006e54:	025b      	lsls	r3, r3, #9
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d217      	bcs.n	8006e8a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	200e      	movs	r0, #14
 8006e60:	183b      	adds	r3, r7, r0
 8006e62:	210f      	movs	r1, #15
 8006e64:	438a      	bics	r2, r1
 8006e66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2207      	movs	r2, #7
 8006e70:	4013      	ands	r3, r2
 8006e72:	b299      	uxth	r1, r3
 8006e74:	183b      	adds	r3, r7, r0
 8006e76:	183a      	adds	r2, r7, r0
 8006e78:	8812      	ldrh	r2, [r2, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	183a      	adds	r2, r7, r0
 8006e84:	8812      	ldrh	r2, [r2, #0]
 8006e86:	60da      	str	r2, [r3, #12]
 8006e88:	e04c      	b.n	8006f24 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e8a:	231e      	movs	r3, #30
 8006e8c:	18fb      	adds	r3, r7, r3
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e047      	b.n	8006f24 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e94:	231f      	movs	r3, #31
 8006e96:	18fb      	adds	r3, r7, r3
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d015      	beq.n	8006eca <UART_SetConfig+0x276>
 8006e9e:	dc18      	bgt.n	8006ed2 <UART_SetConfig+0x27e>
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d00d      	beq.n	8006ec0 <UART_SetConfig+0x26c>
 8006ea4:	dc15      	bgt.n	8006ed2 <UART_SetConfig+0x27e>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <UART_SetConfig+0x25c>
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d005      	beq.n	8006eba <UART_SetConfig+0x266>
 8006eae:	e010      	b.n	8006ed2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb0:	f7ff f9ce 	bl	8006250 <HAL_RCC_GetPCLK1Freq>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	61bb      	str	r3, [r7, #24]
        break;
 8006eb8:	e012      	b.n	8006ee0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eba:	4b29      	ldr	r3, [pc, #164]	@ (8006f60 <UART_SetConfig+0x30c>)
 8006ebc:	61bb      	str	r3, [r7, #24]
        break;
 8006ebe:	e00f      	b.n	8006ee0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ec0:	f7ff f94a 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 8006ec4:	0003      	movs	r3, r0
 8006ec6:	61bb      	str	r3, [r7, #24]
        break;
 8006ec8:	e00a      	b.n	8006ee0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eca:	2380      	movs	r3, #128	@ 0x80
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	61bb      	str	r3, [r7, #24]
        break;
 8006ed0:	e006      	b.n	8006ee0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ed6:	231e      	movs	r3, #30
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	2201      	movs	r2, #1
 8006edc:	701a      	strb	r2, [r3, #0]
        break;
 8006ede:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01e      	beq.n	8006f24 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	085a      	lsrs	r2, r3, #1
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	18d2      	adds	r2, r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	0019      	movs	r1, r3
 8006ef6:	0010      	movs	r0, r2
 8006ef8:	f7f9 f910 	bl	800011c <__udivsi3>
 8006efc:	0003      	movs	r3, r0
 8006efe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	d90a      	bls.n	8006f1c <UART_SetConfig+0x2c8>
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	2380      	movs	r3, #128	@ 0x80
 8006f0a:	025b      	lsls	r3, r3, #9
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d205      	bcs.n	8006f1c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	e003      	b.n	8006f24 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f1c:	231e      	movs	r3, #30
 8006f1e:	18fb      	adds	r3, r7, r3
 8006f20:	2201      	movs	r2, #1
 8006f22:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006f30:	231e      	movs	r3, #30
 8006f32:	18fb      	adds	r3, r7, r3
 8006f34:	781b      	ldrb	r3, [r3, #0]
}
 8006f36:	0018      	movs	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b008      	add	sp, #32
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	46c0      	nop			@ (mov r8, r8)
 8006f40:	efff69f3 	.word	0xefff69f3
 8006f44:	ffffcfff 	.word	0xffffcfff
 8006f48:	fffff4ff 	.word	0xfffff4ff
 8006f4c:	40013800 	.word	0x40013800
 8006f50:	40021000 	.word	0x40021000
 8006f54:	40004400 	.word	0x40004400
 8006f58:	40004800 	.word	0x40004800
 8006f5c:	40004c00 	.word	0x40004c00
 8006f60:	007a1200 	.word	0x007a1200

08006f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	2208      	movs	r2, #8
 8006f72:	4013      	ands	r3, r2
 8006f74:	d00b      	beq.n	8006f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80070a8 <UART_AdvFeatureConfig+0x144>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	0019      	movs	r1, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	2201      	movs	r2, #1
 8006f94:	4013      	ands	r3, r2
 8006f96:	d00b      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	4a43      	ldr	r2, [pc, #268]	@ (80070ac <UART_AdvFeatureConfig+0x148>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	0019      	movs	r1, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d00b      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a3b      	ldr	r2, [pc, #236]	@ (80070b0 <UART_AdvFeatureConfig+0x14c>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4a34      	ldr	r2, [pc, #208]	@ (80070b4 <UART_AdvFeatureConfig+0x150>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	2210      	movs	r2, #16
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d00b      	beq.n	8007016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4a2c      	ldr	r2, [pc, #176]	@ (80070b8 <UART_AdvFeatureConfig+0x154>)
 8007006:	4013      	ands	r3, r2
 8007008:	0019      	movs	r1, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701a:	2220      	movs	r2, #32
 800701c:	4013      	ands	r3, r2
 800701e:	d00b      	beq.n	8007038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4a25      	ldr	r2, [pc, #148]	@ (80070bc <UART_AdvFeatureConfig+0x158>)
 8007028:	4013      	ands	r3, r2
 800702a:	0019      	movs	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703c:	2240      	movs	r2, #64	@ 0x40
 800703e:	4013      	ands	r3, r2
 8007040:	d01d      	beq.n	800707e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a1d      	ldr	r2, [pc, #116]	@ (80070c0 <UART_AdvFeatureConfig+0x15c>)
 800704a:	4013      	ands	r3, r2
 800704c:	0019      	movs	r1, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800705e:	2380      	movs	r3, #128	@ 0x80
 8007060:	035b      	lsls	r3, r3, #13
 8007062:	429a      	cmp	r2, r3
 8007064:	d10b      	bne.n	800707e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a15      	ldr	r2, [pc, #84]	@ (80070c4 <UART_AdvFeatureConfig+0x160>)
 800706e:	4013      	ands	r3, r2
 8007070:	0019      	movs	r1, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007082:	2280      	movs	r2, #128	@ 0x80
 8007084:	4013      	ands	r3, r2
 8007086:	d00b      	beq.n	80070a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	4a0e      	ldr	r2, [pc, #56]	@ (80070c8 <UART_AdvFeatureConfig+0x164>)
 8007090:	4013      	ands	r3, r2
 8007092:	0019      	movs	r1, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	605a      	str	r2, [r3, #4]
  }
}
 80070a0:	46c0      	nop			@ (mov r8, r8)
 80070a2:	46bd      	mov	sp, r7
 80070a4:	b002      	add	sp, #8
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	ffff7fff 	.word	0xffff7fff
 80070ac:	fffdffff 	.word	0xfffdffff
 80070b0:	fffeffff 	.word	0xfffeffff
 80070b4:	fffbffff 	.word	0xfffbffff
 80070b8:	ffffefff 	.word	0xffffefff
 80070bc:	ffffdfff 	.word	0xffffdfff
 80070c0:	ffefffff 	.word	0xffefffff
 80070c4:	ff9fffff 	.word	0xff9fffff
 80070c8:	fff7ffff 	.word	0xfff7ffff

080070cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b092      	sub	sp, #72	@ 0x48
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2284      	movs	r2, #132	@ 0x84
 80070d8:	2100      	movs	r1, #0
 80070da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070dc:	f7fc f840 	bl	8003160 <HAL_GetTick>
 80070e0:	0003      	movs	r3, r0
 80070e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2208      	movs	r2, #8
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d12c      	bne.n	800714c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f4:	2280      	movs	r2, #128	@ 0x80
 80070f6:	0391      	lsls	r1, r2, #14
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4a46      	ldr	r2, [pc, #280]	@ (8007214 <UART_CheckIdleState+0x148>)
 80070fc:	9200      	str	r2, [sp, #0]
 80070fe:	2200      	movs	r2, #0
 8007100:	f000 f88c 	bl	800721c <UART_WaitOnFlagUntilTimeout>
 8007104:	1e03      	subs	r3, r0, #0
 8007106:	d021      	beq.n	800714c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007108:	f3ef 8310 	mrs	r3, PRIMASK
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007110:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007112:	2301      	movs	r3, #1
 8007114:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007118:	f383 8810 	msr	PRIMASK, r3
}
 800711c:	46c0      	nop			@ (mov r8, r8)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2180      	movs	r1, #128	@ 0x80
 800712a:	438a      	bics	r2, r1
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2278      	movs	r2, #120	@ 0x78
 8007144:	2100      	movs	r1, #0
 8007146:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e05f      	b.n	800720c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2204      	movs	r2, #4
 8007154:	4013      	ands	r3, r2
 8007156:	2b04      	cmp	r3, #4
 8007158:	d146      	bne.n	80071e8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800715a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800715c:	2280      	movs	r2, #128	@ 0x80
 800715e:	03d1      	lsls	r1, r2, #15
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4a2c      	ldr	r2, [pc, #176]	@ (8007214 <UART_CheckIdleState+0x148>)
 8007164:	9200      	str	r2, [sp, #0]
 8007166:	2200      	movs	r2, #0
 8007168:	f000 f858 	bl	800721c <UART_WaitOnFlagUntilTimeout>
 800716c:	1e03      	subs	r3, r0, #0
 800716e:	d03b      	beq.n	80071e8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007170:	f3ef 8310 	mrs	r3, PRIMASK
 8007174:	60fb      	str	r3, [r7, #12]
  return(result);
 8007176:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007178:	637b      	str	r3, [r7, #52]	@ 0x34
 800717a:	2301      	movs	r3, #1
 800717c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f383 8810 	msr	PRIMASK, r3
}
 8007184:	46c0      	nop			@ (mov r8, r8)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4921      	ldr	r1, [pc, #132]	@ (8007218 <UART_CheckIdleState+0x14c>)
 8007192:	400a      	ands	r2, r1
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007198:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f383 8810 	msr	PRIMASK, r3
}
 80071a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071a2:	f3ef 8310 	mrs	r3, PRIMASK
 80071a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80071a8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ac:	2301      	movs	r3, #1
 80071ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f383 8810 	msr	PRIMASK, r3
}
 80071b6:	46c0      	nop			@ (mov r8, r8)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2101      	movs	r1, #1
 80071c4:	438a      	bics	r2, r1
 80071c6:	609a      	str	r2, [r3, #8]
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	f383 8810 	msr	PRIMASK, r3
}
 80071d2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2280      	movs	r2, #128	@ 0x80
 80071d8:	2120      	movs	r1, #32
 80071da:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2278      	movs	r2, #120	@ 0x78
 80071e0:	2100      	movs	r1, #0
 80071e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e011      	b.n	800720c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2280      	movs	r2, #128	@ 0x80
 80071f2:	2120      	movs	r1, #32
 80071f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2278      	movs	r2, #120	@ 0x78
 8007206:	2100      	movs	r1, #0
 8007208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	0018      	movs	r0, r3
 800720e:	46bd      	mov	sp, r7
 8007210:	b010      	add	sp, #64	@ 0x40
 8007212:	bd80      	pop	{r7, pc}
 8007214:	01ffffff 	.word	0x01ffffff
 8007218:	fffffedf 	.word	0xfffffedf

0800721c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	1dfb      	adds	r3, r7, #7
 800722a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800722c:	e051      	b.n	80072d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	3301      	adds	r3, #1
 8007232:	d04e      	beq.n	80072d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007234:	f7fb ff94 	bl	8003160 <HAL_GetTick>
 8007238:	0002      	movs	r2, r0
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	429a      	cmp	r2, r3
 8007242:	d302      	bcc.n	800724a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e051      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2204      	movs	r2, #4
 8007256:	4013      	ands	r3, r2
 8007258:	d03b      	beq.n	80072d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b80      	cmp	r3, #128	@ 0x80
 800725e:	d038      	beq.n	80072d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b40      	cmp	r3, #64	@ 0x40
 8007264:	d035      	beq.n	80072d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	2208      	movs	r2, #8
 800726e:	4013      	ands	r3, r2
 8007270:	2b08      	cmp	r3, #8
 8007272:	d111      	bne.n	8007298 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2208      	movs	r2, #8
 800727a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	0018      	movs	r0, r3
 8007280:	f000 f83c 	bl	80072fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2284      	movs	r2, #132	@ 0x84
 8007288:	2108      	movs	r1, #8
 800728a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2278      	movs	r2, #120	@ 0x78
 8007290:	2100      	movs	r1, #0
 8007292:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e02c      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	2380      	movs	r3, #128	@ 0x80
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	401a      	ands	r2, r3
 80072a4:	2380      	movs	r3, #128	@ 0x80
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d112      	bne.n	80072d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2280      	movs	r2, #128	@ 0x80
 80072b2:	0112      	lsls	r2, r2, #4
 80072b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	0018      	movs	r0, r3
 80072ba:	f000 f81f 	bl	80072fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2284      	movs	r2, #132	@ 0x84
 80072c2:	2120      	movs	r1, #32
 80072c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2278      	movs	r2, #120	@ 0x78
 80072ca:	2100      	movs	r1, #0
 80072cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e00f      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	4013      	ands	r3, r2
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	425a      	negs	r2, r3
 80072e2:	4153      	adcs	r3, r2
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	001a      	movs	r2, r3
 80072e8:	1dfb      	adds	r3, r7, #7
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d09e      	beq.n	800722e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	0018      	movs	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b004      	add	sp, #16
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	@ 0x38
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007304:	f3ef 8310 	mrs	r3, PRIMASK
 8007308:	617b      	str	r3, [r7, #20]
  return(result);
 800730a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730c:	637b      	str	r3, [r7, #52]	@ 0x34
 800730e:	2301      	movs	r3, #1
 8007310:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	f383 8810 	msr	PRIMASK, r3
}
 8007318:	46c0      	nop			@ (mov r8, r8)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4926      	ldr	r1, [pc, #152]	@ (80073c0 <UART_EndRxTransfer+0xc4>)
 8007326:	400a      	ands	r2, r1
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800732c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f383 8810 	msr	PRIMASK, r3
}
 8007334:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007336:	f3ef 8310 	mrs	r3, PRIMASK
 800733a:	623b      	str	r3, [r7, #32]
  return(result);
 800733c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007340:	2301      	movs	r3, #1
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	f383 8810 	msr	PRIMASK, r3
}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2101      	movs	r1, #1
 8007358:	438a      	bics	r2, r1
 800735a:	609a      	str	r2, [r3, #8]
 800735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	f383 8810 	msr	PRIMASK, r3
}
 8007366:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736c:	2b01      	cmp	r3, #1
 800736e:	d118      	bne.n	80073a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007370:	f3ef 8310 	mrs	r3, PRIMASK
 8007374:	60bb      	str	r3, [r7, #8]
  return(result);
 8007376:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800737a:	2301      	movs	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f383 8810 	msr	PRIMASK, r3
}
 8007384:	46c0      	nop			@ (mov r8, r8)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2110      	movs	r1, #16
 8007392:	438a      	bics	r2, r1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f383 8810 	msr	PRIMASK, r3
}
 80073a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2280      	movs	r2, #128	@ 0x80
 80073a6:	2120      	movs	r1, #32
 80073a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b00e      	add	sp, #56	@ 0x38
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	fffffedf 	.word	0xfffffedf

080073c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2244      	movs	r2, #68	@ 0x44
 80073d0:	2100      	movs	r1, #0
 80073d2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073d4:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <USB_EnableGlobalInt+0x28>)
 80073d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	b299      	uxth	r1, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2240      	movs	r2, #64	@ 0x40
 80073e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	0018      	movs	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	b004      	add	sp, #16
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	0000bf80 	.word	0x0000bf80

080073f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073f8:	4b09      	ldr	r3, [pc, #36]	@ (8007420 <USB_DisableGlobalInt+0x30>)
 80073fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2240      	movs	r2, #64	@ 0x40
 8007400:	5a9b      	ldrh	r3, [r3, r2]
 8007402:	b29b      	uxth	r3, r3
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	b292      	uxth	r2, r2
 8007408:	43d2      	mvns	r2, r2
 800740a:	b292      	uxth	r2, r2
 800740c:	4013      	ands	r3, r2
 800740e:	b299      	uxth	r1, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2240      	movs	r2, #64	@ 0x40
 8007414:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	b004      	add	sp, #16
 800741e:	bd80      	pop	{r7, pc}
 8007420:	0000bf80 	.word	0x0000bf80

08007424 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	1d3b      	adds	r3, r7, #4
 800742e:	6019      	str	r1, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2240      	movs	r2, #64	@ 0x40
 8007436:	2101      	movs	r1, #1
 8007438:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2240      	movs	r2, #64	@ 0x40
 800743e:	2100      	movs	r1, #0
 8007440:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2244      	movs	r2, #68	@ 0x44
 8007446:	2100      	movs	r1, #0
 8007448:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2250      	movs	r2, #80	@ 0x50
 800744e:	2100      	movs	r1, #0
 8007450:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	0018      	movs	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	b004      	add	sp, #16
 800745a:	bd80      	pop	{r7, pc}

0800745c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b09c      	sub	sp, #112	@ 0x70
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007466:	236f      	movs	r3, #111	@ 0x6f
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	18d3      	adds	r3, r2, r3
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29a      	uxth	r2, r3
 800747c:	236c      	movs	r3, #108	@ 0x6c
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	49a1      	ldr	r1, [pc, #644]	@ (8007708 <USB_ActivateEndpoint+0x2ac>)
 8007482:	400a      	ands	r2, r1
 8007484:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	78db      	ldrb	r3, [r3, #3]
 800748a:	2b03      	cmp	r3, #3
 800748c:	d017      	beq.n	80074be <USB_ActivateEndpoint+0x62>
 800748e:	dc28      	bgt.n	80074e2 <USB_ActivateEndpoint+0x86>
 8007490:	2b02      	cmp	r3, #2
 8007492:	d00e      	beq.n	80074b2 <USB_ActivateEndpoint+0x56>
 8007494:	dc25      	bgt.n	80074e2 <USB_ActivateEndpoint+0x86>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <USB_ActivateEndpoint+0x44>
 800749a:	2b01      	cmp	r3, #1
 800749c:	d018      	beq.n	80074d0 <USB_ActivateEndpoint+0x74>
 800749e:	e020      	b.n	80074e2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80074a0:	226c      	movs	r2, #108	@ 0x6c
 80074a2:	18bb      	adds	r3, r7, r2
 80074a4:	18ba      	adds	r2, r7, r2
 80074a6:	8812      	ldrh	r2, [r2, #0]
 80074a8:	2180      	movs	r1, #128	@ 0x80
 80074aa:	0089      	lsls	r1, r1, #2
 80074ac:	430a      	orrs	r2, r1
 80074ae:	801a      	strh	r2, [r3, #0]
      break;
 80074b0:	e01c      	b.n	80074ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80074b2:	226c      	movs	r2, #108	@ 0x6c
 80074b4:	18bb      	adds	r3, r7, r2
 80074b6:	18ba      	adds	r2, r7, r2
 80074b8:	8812      	ldrh	r2, [r2, #0]
 80074ba:	801a      	strh	r2, [r3, #0]
      break;
 80074bc:	e016      	b.n	80074ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80074be:	226c      	movs	r2, #108	@ 0x6c
 80074c0:	18bb      	adds	r3, r7, r2
 80074c2:	18ba      	adds	r2, r7, r2
 80074c4:	8812      	ldrh	r2, [r2, #0]
 80074c6:	21c0      	movs	r1, #192	@ 0xc0
 80074c8:	00c9      	lsls	r1, r1, #3
 80074ca:	430a      	orrs	r2, r1
 80074cc:	801a      	strh	r2, [r3, #0]
      break;
 80074ce:	e00d      	b.n	80074ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80074d0:	226c      	movs	r2, #108	@ 0x6c
 80074d2:	18bb      	adds	r3, r7, r2
 80074d4:	18ba      	adds	r2, r7, r2
 80074d6:	8812      	ldrh	r2, [r2, #0]
 80074d8:	2180      	movs	r1, #128	@ 0x80
 80074da:	00c9      	lsls	r1, r1, #3
 80074dc:	430a      	orrs	r2, r1
 80074de:	801a      	strh	r2, [r3, #0]
      break;
 80074e0:	e004      	b.n	80074ec <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80074e2:	236f      	movs	r3, #111	@ 0x6f
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	2201      	movs	r2, #1
 80074e8:	701a      	strb	r2, [r3, #0]
      break;
 80074ea:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	18d3      	adds	r3, r2, r3
 80074f6:	226c      	movs	r2, #108	@ 0x6c
 80074f8:	18ba      	adds	r2, r7, r2
 80074fa:	8812      	ldrh	r2, [r2, #0]
 80074fc:	4983      	ldr	r1, [pc, #524]	@ (800770c <USB_ActivateEndpoint+0x2b0>)
 80074fe:	430a      	orrs	r2, r1
 8007500:	b292      	uxth	r2, r2
 8007502:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	18d3      	adds	r3, r2, r3
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	b21b      	sxth	r3, r3
 8007514:	4a7e      	ldr	r2, [pc, #504]	@ (8007710 <USB_ActivateEndpoint+0x2b4>)
 8007516:	4013      	ands	r3, r2
 8007518:	b21a      	sxth	r2, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b21b      	sxth	r3, r3
 8007520:	4313      	orrs	r3, r2
 8007522:	b21a      	sxth	r2, r3
 8007524:	2166      	movs	r1, #102	@ 0x66
 8007526:	187b      	adds	r3, r7, r1
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	18d3      	adds	r3, r2, r3
 8007534:	187a      	adds	r2, r7, r1
 8007536:	8812      	ldrh	r2, [r2, #0]
 8007538:	4974      	ldr	r1, [pc, #464]	@ (800770c <USB_ActivateEndpoint+0x2b0>)
 800753a:	430a      	orrs	r2, r1
 800753c:	b292      	uxth	r2, r2
 800753e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	7b1b      	ldrb	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d000      	beq.n	800754a <USB_ActivateEndpoint+0xee>
 8007548:	e177      	b.n	800783a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d100      	bne.n	8007554 <USB_ActivateEndpoint+0xf8>
 8007552:	e07a      	b.n	800764a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	61bb      	str	r3, [r7, #24]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2250      	movs	r2, #80	@ 0x50
 800755c:	5a9b      	ldrh	r3, [r3, r2]
 800755e:	b29b      	uxth	r3, r3
 8007560:	001a      	movs	r2, r3
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	189b      	adds	r3, r3, r2
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	00da      	lsls	r2, r3, #3
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	18d3      	adds	r3, r2, r3
 8007572:	2280      	movs	r2, #128	@ 0x80
 8007574:	00d2      	lsls	r2, r2, #3
 8007576:	4694      	mov	ip, r2
 8007578:	4463      	add	r3, ip
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	88db      	ldrh	r3, [r3, #6]
 8007580:	085b      	lsrs	r3, r3, #1
 8007582:	b29b      	uxth	r3, r3
 8007584:	18db      	adds	r3, r3, r3
 8007586:	b29a      	uxth	r2, r3
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	18d2      	adds	r2, r2, r3
 8007596:	2112      	movs	r1, #18
 8007598:	187b      	adds	r3, r7, r1
 800759a:	8812      	ldrh	r2, [r2, #0]
 800759c:	801a      	strh	r2, [r3, #0]
 800759e:	187b      	adds	r3, r7, r1
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	2240      	movs	r2, #64	@ 0x40
 80075a4:	4013      	ands	r3, r2
 80075a6:	d016      	beq.n	80075d6 <USB_ActivateEndpoint+0x17a>
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	18d3      	adds	r3, r2, r3
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	2010      	movs	r0, #16
 80075b8:	183b      	adds	r3, r7, r0
 80075ba:	4955      	ldr	r1, [pc, #340]	@ (8007710 <USB_ActivateEndpoint+0x2b4>)
 80075bc:	400a      	ands	r2, r1
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	18d3      	adds	r3, r2, r3
 80075ca:	183a      	adds	r2, r7, r0
 80075cc:	8812      	ldrh	r2, [r2, #0]
 80075ce:	4951      	ldr	r1, [pc, #324]	@ (8007714 <USB_ActivateEndpoint+0x2b8>)
 80075d0:	430a      	orrs	r2, r1
 80075d2:	b292      	uxth	r2, r2
 80075d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	78db      	ldrb	r3, [r3, #3]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d01d      	beq.n	800761a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	18d3      	adds	r3, r2, r3
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	200c      	movs	r0, #12
 80075ee:	183b      	adds	r3, r7, r0
 80075f0:	4949      	ldr	r1, [pc, #292]	@ (8007718 <USB_ActivateEndpoint+0x2bc>)
 80075f2:	400a      	ands	r2, r1
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	183b      	adds	r3, r7, r0
 80075f8:	183a      	adds	r2, r7, r0
 80075fa:	8812      	ldrh	r2, [r2, #0]
 80075fc:	2120      	movs	r1, #32
 80075fe:	404a      	eors	r2, r1
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	18d3      	adds	r3, r2, r3
 800760c:	183a      	adds	r2, r7, r0
 800760e:	8812      	ldrh	r2, [r2, #0]
 8007610:	493e      	ldr	r1, [pc, #248]	@ (800770c <USB_ActivateEndpoint+0x2b0>)
 8007612:	430a      	orrs	r2, r1
 8007614:	b292      	uxth	r2, r2
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	e2b5      	b.n	8007b86 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	18d3      	adds	r3, r2, r3
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29a      	uxth	r2, r3
 8007628:	200e      	movs	r0, #14
 800762a:	183b      	adds	r3, r7, r0
 800762c:	493a      	ldr	r1, [pc, #232]	@ (8007718 <USB_ActivateEndpoint+0x2bc>)
 800762e:	400a      	ands	r2, r1
 8007630:	801a      	strh	r2, [r3, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	18d3      	adds	r3, r2, r3
 800763c:	183a      	adds	r2, r7, r0
 800763e:	8812      	ldrh	r2, [r2, #0]
 8007640:	4932      	ldr	r1, [pc, #200]	@ (800770c <USB_ActivateEndpoint+0x2b0>)
 8007642:	430a      	orrs	r2, r1
 8007644:	b292      	uxth	r2, r2
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	e29d      	b.n	8007b86 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	633b      	str	r3, [r7, #48]	@ 0x30
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2250      	movs	r2, #80	@ 0x50
 8007652:	5a9b      	ldrh	r3, [r3, r2]
 8007654:	b29b      	uxth	r3, r3
 8007656:	001a      	movs	r2, r3
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	189b      	adds	r3, r3, r2
 800765c:	633b      	str	r3, [r7, #48]	@ 0x30
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	00da      	lsls	r2, r3, #3
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	18d3      	adds	r3, r2, r3
 8007668:	4a2c      	ldr	r2, [pc, #176]	@ (800771c <USB_ActivateEndpoint+0x2c0>)
 800766a:	4694      	mov	ip, r2
 800766c:	4463      	add	r3, ip
 800766e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	88db      	ldrh	r3, [r3, #6]
 8007674:	085b      	lsrs	r3, r3, #1
 8007676:	b29b      	uxth	r3, r3
 8007678:	18db      	adds	r3, r3, r3
 800767a:	b29a      	uxth	r2, r3
 800767c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2250      	movs	r2, #80	@ 0x50
 8007688:	5a9b      	ldrh	r3, [r3, r2]
 800768a:	b29b      	uxth	r3, r3
 800768c:	001a      	movs	r2, r3
 800768e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007690:	189b      	adds	r3, r3, r2
 8007692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	00da      	lsls	r2, r3, #3
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	18d3      	adds	r3, r2, r3
 800769e:	4a20      	ldr	r2, [pc, #128]	@ (8007720 <USB_ActivateEndpoint+0x2c4>)
 80076a0:	4694      	mov	ip, r2
 80076a2:	4463      	add	r3, ip
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	059b      	lsls	r3, r3, #22
 80076ae:	0d9b      	lsrs	r3, r3, #22
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d108      	bne.n	80076d0 <USB_ActivateEndpoint+0x274>
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	4a17      	ldr	r2, [pc, #92]	@ (8007724 <USB_ActivateEndpoint+0x2c8>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	e045      	b.n	800775c <USB_ActivateEndpoint+0x300>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80076d6:	d827      	bhi.n	8007728 <USB_ActivateEndpoint+0x2cc>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	085b      	lsrs	r3, r3, #1
 80076de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2201      	movs	r2, #1
 80076e6:	4013      	ands	r3, r2
 80076e8:	d002      	beq.n	80076f0 <USB_ActivateEndpoint+0x294>
 80076ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076ec:	3301      	adds	r3, #1
 80076ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	029b      	lsls	r3, r3, #10
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	4313      	orrs	r3, r2
 8007700:	b29a      	uxth	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	801a      	strh	r2, [r3, #0]
 8007706:	e029      	b.n	800775c <USB_ActivateEndpoint+0x300>
 8007708:	ffff898f 	.word	0xffff898f
 800770c:	ffff8080 	.word	0xffff8080
 8007710:	ffff8f8f 	.word	0xffff8f8f
 8007714:	ffff80c0 	.word	0xffff80c0
 8007718:	ffff8fbf 	.word	0xffff8fbf
 800771c:	00000404 	.word	0x00000404
 8007720:	00000406 	.word	0x00000406
 8007724:	ffff8000 	.word	0xffff8000
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	221f      	movs	r2, #31
 8007736:	4013      	ands	r3, r2
 8007738:	d102      	bne.n	8007740 <USB_ActivateEndpoint+0x2e4>
 800773a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800773c:	3b01      	subs	r3, #1
 800773e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29a      	uxth	r2, r3
 8007746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007748:	b29b      	uxth	r3, r3
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	b29b      	uxth	r3, r3
 800774e:	4313      	orrs	r3, r2
 8007750:	b29b      	uxth	r3, r3
 8007752:	4ab5      	ldr	r2, [pc, #724]	@ (8007a28 <USB_ActivateEndpoint+0x5cc>)
 8007754:	4313      	orrs	r3, r2
 8007756:	b29a      	uxth	r2, r3
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	18d2      	adds	r2, r2, r3
 8007766:	2122      	movs	r1, #34	@ 0x22
 8007768:	187b      	adds	r3, r7, r1
 800776a:	8812      	ldrh	r2, [r2, #0]
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	187b      	adds	r3, r7, r1
 8007770:	881a      	ldrh	r2, [r3, #0]
 8007772:	2380      	movs	r3, #128	@ 0x80
 8007774:	01db      	lsls	r3, r3, #7
 8007776:	4013      	ands	r3, r2
 8007778:	d016      	beq.n	80077a8 <USB_ActivateEndpoint+0x34c>
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	18d3      	adds	r3, r2, r3
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29a      	uxth	r2, r3
 8007788:	2020      	movs	r0, #32
 800778a:	183b      	adds	r3, r7, r0
 800778c:	49a7      	ldr	r1, [pc, #668]	@ (8007a2c <USB_ActivateEndpoint+0x5d0>)
 800778e:	400a      	ands	r2, r1
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	18d3      	adds	r3, r2, r3
 800779c:	183a      	adds	r2, r7, r0
 800779e:	8812      	ldrh	r2, [r2, #0]
 80077a0:	49a3      	ldr	r1, [pc, #652]	@ (8007a30 <USB_ActivateEndpoint+0x5d4>)
 80077a2:	430a      	orrs	r2, r1
 80077a4:	b292      	uxth	r2, r2
 80077a6:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d125      	bne.n	80077fc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	18d3      	adds	r3, r2, r3
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29a      	uxth	r2, r3
 80077be:	201c      	movs	r0, #28
 80077c0:	183b      	adds	r3, r7, r0
 80077c2:	499c      	ldr	r1, [pc, #624]	@ (8007a34 <USB_ActivateEndpoint+0x5d8>)
 80077c4:	400a      	ands	r2, r1
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	183b      	adds	r3, r7, r0
 80077ca:	183a      	adds	r2, r7, r0
 80077cc:	8812      	ldrh	r2, [r2, #0]
 80077ce:	2180      	movs	r1, #128	@ 0x80
 80077d0:	0149      	lsls	r1, r1, #5
 80077d2:	404a      	eors	r2, r1
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	183b      	adds	r3, r7, r0
 80077d8:	183a      	adds	r2, r7, r0
 80077da:	8812      	ldrh	r2, [r2, #0]
 80077dc:	2180      	movs	r1, #128	@ 0x80
 80077de:	0189      	lsls	r1, r1, #6
 80077e0:	404a      	eors	r2, r1
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	18d3      	adds	r3, r2, r3
 80077ee:	183a      	adds	r2, r7, r0
 80077f0:	8812      	ldrh	r2, [r2, #0]
 80077f2:	4991      	ldr	r1, [pc, #580]	@ (8007a38 <USB_ActivateEndpoint+0x5dc>)
 80077f4:	430a      	orrs	r2, r1
 80077f6:	b292      	uxth	r2, r2
 80077f8:	801a      	strh	r2, [r3, #0]
 80077fa:	e1c4      	b.n	8007b86 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	18d3      	adds	r3, r2, r3
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29a      	uxth	r2, r3
 800780a:	201e      	movs	r0, #30
 800780c:	183b      	adds	r3, r7, r0
 800780e:	4989      	ldr	r1, [pc, #548]	@ (8007a34 <USB_ActivateEndpoint+0x5d8>)
 8007810:	400a      	ands	r2, r1
 8007812:	801a      	strh	r2, [r3, #0]
 8007814:	183b      	adds	r3, r7, r0
 8007816:	183a      	adds	r2, r7, r0
 8007818:	8812      	ldrh	r2, [r2, #0]
 800781a:	2180      	movs	r1, #128	@ 0x80
 800781c:	0189      	lsls	r1, r1, #6
 800781e:	404a      	eors	r2, r1
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	18d3      	adds	r3, r2, r3
 800782c:	183a      	adds	r2, r7, r0
 800782e:	8812      	ldrh	r2, [r2, #0]
 8007830:	4981      	ldr	r1, [pc, #516]	@ (8007a38 <USB_ActivateEndpoint+0x5dc>)
 8007832:	430a      	orrs	r2, r1
 8007834:	b292      	uxth	r2, r2
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	e1a5      	b.n	8007b86 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	78db      	ldrb	r3, [r3, #3]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d117      	bne.n	8007872 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	18d3      	adds	r3, r2, r3
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29a      	uxth	r2, r3
 8007850:	2062      	movs	r0, #98	@ 0x62
 8007852:	183b      	adds	r3, r7, r0
 8007854:	4975      	ldr	r1, [pc, #468]	@ (8007a2c <USB_ActivateEndpoint+0x5d0>)
 8007856:	400a      	ands	r2, r1
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	18d3      	adds	r3, r2, r3
 8007864:	183a      	adds	r2, r7, r0
 8007866:	8812      	ldrh	r2, [r2, #0]
 8007868:	4974      	ldr	r1, [pc, #464]	@ (8007a3c <USB_ActivateEndpoint+0x5e0>)
 800786a:	430a      	orrs	r2, r1
 800786c:	b292      	uxth	r2, r2
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e016      	b.n	80078a0 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	18d3      	adds	r3, r2, r3
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29a      	uxth	r2, r3
 8007880:	2064      	movs	r0, #100	@ 0x64
 8007882:	183b      	adds	r3, r7, r0
 8007884:	496e      	ldr	r1, [pc, #440]	@ (8007a40 <USB_ActivateEndpoint+0x5e4>)
 8007886:	400a      	ands	r2, r1
 8007888:	801a      	strh	r2, [r3, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	18d3      	adds	r3, r2, r3
 8007894:	183a      	adds	r2, r7, r0
 8007896:	8812      	ldrh	r2, [r2, #0]
 8007898:	4967      	ldr	r1, [pc, #412]	@ (8007a38 <USB_ActivateEndpoint+0x5dc>)
 800789a:	430a      	orrs	r2, r1
 800789c:	b292      	uxth	r2, r2
 800789e:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2250      	movs	r2, #80	@ 0x50
 80078a8:	5a9b      	ldrh	r3, [r3, r2]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	001a      	movs	r2, r3
 80078ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078b0:	189b      	adds	r3, r3, r2
 80078b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	00da      	lsls	r2, r3, #3
 80078ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078bc:	18d3      	adds	r3, r2, r3
 80078be:	2280      	movs	r2, #128	@ 0x80
 80078c0:	00d2      	lsls	r2, r2, #3
 80078c2:	4694      	mov	ip, r2
 80078c4:	4463      	add	r3, ip
 80078c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	891b      	ldrh	r3, [r3, #8]
 80078cc:	085b      	lsrs	r3, r3, #1
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	18db      	adds	r3, r3, r3
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078d6:	801a      	strh	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	657b      	str	r3, [r7, #84]	@ 0x54
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2250      	movs	r2, #80	@ 0x50
 80078e0:	5a9b      	ldrh	r3, [r3, r2]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	001a      	movs	r2, r3
 80078e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e8:	189b      	adds	r3, r3, r2
 80078ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	00da      	lsls	r2, r3, #3
 80078f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078f4:	18d3      	adds	r3, r2, r3
 80078f6:	4a53      	ldr	r2, [pc, #332]	@ (8007a44 <USB_ActivateEndpoint+0x5e8>)
 80078f8:	4694      	mov	ip, r2
 80078fa:	4463      	add	r3, ip
 80078fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	895b      	ldrh	r3, [r3, #10]
 8007902:	085b      	lsrs	r3, r3, #1
 8007904:	b29b      	uxth	r3, r3
 8007906:	18db      	adds	r3, r3, r3
 8007908:	b29a      	uxth	r2, r3
 800790a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800790c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d000      	beq.n	8007918 <USB_ActivateEndpoint+0x4bc>
 8007916:	e09b      	b.n	8007a50 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	18d2      	adds	r2, r2, r3
 8007922:	2140      	movs	r1, #64	@ 0x40
 8007924:	187b      	adds	r3, r7, r1
 8007926:	8812      	ldrh	r2, [r2, #0]
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	187b      	adds	r3, r7, r1
 800792c:	881a      	ldrh	r2, [r3, #0]
 800792e:	2380      	movs	r3, #128	@ 0x80
 8007930:	01db      	lsls	r3, r3, #7
 8007932:	4013      	ands	r3, r2
 8007934:	d016      	beq.n	8007964 <USB_ActivateEndpoint+0x508>
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	18d3      	adds	r3, r2, r3
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29a      	uxth	r2, r3
 8007944:	203e      	movs	r0, #62	@ 0x3e
 8007946:	183b      	adds	r3, r7, r0
 8007948:	4938      	ldr	r1, [pc, #224]	@ (8007a2c <USB_ActivateEndpoint+0x5d0>)
 800794a:	400a      	ands	r2, r1
 800794c:	801a      	strh	r2, [r3, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	18d3      	adds	r3, r2, r3
 8007958:	183a      	adds	r2, r7, r0
 800795a:	8812      	ldrh	r2, [r2, #0]
 800795c:	4934      	ldr	r1, [pc, #208]	@ (8007a30 <USB_ActivateEndpoint+0x5d4>)
 800795e:	430a      	orrs	r2, r1
 8007960:	b292      	uxth	r2, r2
 8007962:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	18d2      	adds	r2, r2, r3
 800796e:	213c      	movs	r1, #60	@ 0x3c
 8007970:	187b      	adds	r3, r7, r1
 8007972:	8812      	ldrh	r2, [r2, #0]
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	187b      	adds	r3, r7, r1
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	2240      	movs	r2, #64	@ 0x40
 800797c:	4013      	ands	r3, r2
 800797e:	d016      	beq.n	80079ae <USB_ActivateEndpoint+0x552>
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	18d3      	adds	r3, r2, r3
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29a      	uxth	r2, r3
 800798e:	203a      	movs	r0, #58	@ 0x3a
 8007990:	183b      	adds	r3, r7, r0
 8007992:	4926      	ldr	r1, [pc, #152]	@ (8007a2c <USB_ActivateEndpoint+0x5d0>)
 8007994:	400a      	ands	r2, r1
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	18d3      	adds	r3, r2, r3
 80079a2:	183a      	adds	r2, r7, r0
 80079a4:	8812      	ldrh	r2, [r2, #0]
 80079a6:	4928      	ldr	r1, [pc, #160]	@ (8007a48 <USB_ActivateEndpoint+0x5ec>)
 80079a8:	430a      	orrs	r2, r1
 80079aa:	b292      	uxth	r2, r2
 80079ac:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	18d3      	adds	r3, r2, r3
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	2038      	movs	r0, #56	@ 0x38
 80079be:	183b      	adds	r3, r7, r0
 80079c0:	491c      	ldr	r1, [pc, #112]	@ (8007a34 <USB_ActivateEndpoint+0x5d8>)
 80079c2:	400a      	ands	r2, r1
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	183b      	adds	r3, r7, r0
 80079c8:	183a      	adds	r2, r7, r0
 80079ca:	8812      	ldrh	r2, [r2, #0]
 80079cc:	2180      	movs	r1, #128	@ 0x80
 80079ce:	0149      	lsls	r1, r1, #5
 80079d0:	404a      	eors	r2, r1
 80079d2:	801a      	strh	r2, [r3, #0]
 80079d4:	183b      	adds	r3, r7, r0
 80079d6:	183a      	adds	r2, r7, r0
 80079d8:	8812      	ldrh	r2, [r2, #0]
 80079da:	2180      	movs	r1, #128	@ 0x80
 80079dc:	0189      	lsls	r1, r1, #6
 80079de:	404a      	eors	r2, r1
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	18d3      	adds	r3, r2, r3
 80079ec:	183a      	adds	r2, r7, r0
 80079ee:	8812      	ldrh	r2, [r2, #0]
 80079f0:	4911      	ldr	r1, [pc, #68]	@ (8007a38 <USB_ActivateEndpoint+0x5dc>)
 80079f2:	430a      	orrs	r2, r1
 80079f4:	b292      	uxth	r2, r2
 80079f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	18d3      	adds	r3, r2, r3
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	2036      	movs	r0, #54	@ 0x36
 8007a08:	183b      	adds	r3, r7, r0
 8007a0a:	4910      	ldr	r1, [pc, #64]	@ (8007a4c <USB_ActivateEndpoint+0x5f0>)
 8007a0c:	400a      	ands	r2, r1
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	18d3      	adds	r3, r2, r3
 8007a1a:	183a      	adds	r2, r7, r0
 8007a1c:	8812      	ldrh	r2, [r2, #0]
 8007a1e:	4906      	ldr	r1, [pc, #24]	@ (8007a38 <USB_ActivateEndpoint+0x5dc>)
 8007a20:	430a      	orrs	r2, r1
 8007a22:	b292      	uxth	r2, r2
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e0ae      	b.n	8007b86 <USB_ActivateEndpoint+0x72a>
 8007a28:	ffff8000 	.word	0xffff8000
 8007a2c:	ffff8f8f 	.word	0xffff8f8f
 8007a30:	ffffc080 	.word	0xffffc080
 8007a34:	ffffbf8f 	.word	0xffffbf8f
 8007a38:	ffff8080 	.word	0xffff8080
 8007a3c:	ffff8180 	.word	0xffff8180
 8007a40:	ffff8e8f 	.word	0xffff8e8f
 8007a44:	00000404 	.word	0x00000404
 8007a48:	ffff80c0 	.word	0xffff80c0
 8007a4c:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	18d2      	adds	r2, r2, r3
 8007a5a:	214e      	movs	r1, #78	@ 0x4e
 8007a5c:	187b      	adds	r3, r7, r1
 8007a5e:	8812      	ldrh	r2, [r2, #0]
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	187b      	adds	r3, r7, r1
 8007a64:	881a      	ldrh	r2, [r3, #0]
 8007a66:	2380      	movs	r3, #128	@ 0x80
 8007a68:	01db      	lsls	r3, r3, #7
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	d016      	beq.n	8007a9c <USB_ActivateEndpoint+0x640>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	18d3      	adds	r3, r2, r3
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	204c      	movs	r0, #76	@ 0x4c
 8007a7e:	183b      	adds	r3, r7, r0
 8007a80:	4944      	ldr	r1, [pc, #272]	@ (8007b94 <USB_ActivateEndpoint+0x738>)
 8007a82:	400a      	ands	r2, r1
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	18d3      	adds	r3, r2, r3
 8007a90:	183a      	adds	r2, r7, r0
 8007a92:	8812      	ldrh	r2, [r2, #0]
 8007a94:	4940      	ldr	r1, [pc, #256]	@ (8007b98 <USB_ActivateEndpoint+0x73c>)
 8007a96:	430a      	orrs	r2, r1
 8007a98:	b292      	uxth	r2, r2
 8007a9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	18d2      	adds	r2, r2, r3
 8007aa6:	214a      	movs	r1, #74	@ 0x4a
 8007aa8:	187b      	adds	r3, r7, r1
 8007aaa:	8812      	ldrh	r2, [r2, #0]
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	187b      	adds	r3, r7, r1
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	2240      	movs	r2, #64	@ 0x40
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d016      	beq.n	8007ae6 <USB_ActivateEndpoint+0x68a>
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	18d3      	adds	r3, r2, r3
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	2048      	movs	r0, #72	@ 0x48
 8007ac8:	183b      	adds	r3, r7, r0
 8007aca:	4932      	ldr	r1, [pc, #200]	@ (8007b94 <USB_ActivateEndpoint+0x738>)
 8007acc:	400a      	ands	r2, r1
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	18d3      	adds	r3, r2, r3
 8007ada:	183a      	adds	r2, r7, r0
 8007adc:	8812      	ldrh	r2, [r2, #0]
 8007ade:	492f      	ldr	r1, [pc, #188]	@ (8007b9c <USB_ActivateEndpoint+0x740>)
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	b292      	uxth	r2, r2
 8007ae4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	78db      	ldrb	r3, [r3, #3]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d01d      	beq.n	8007b2a <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	18d3      	adds	r3, r2, r3
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	2044      	movs	r0, #68	@ 0x44
 8007afe:	183b      	adds	r3, r7, r0
 8007b00:	4927      	ldr	r1, [pc, #156]	@ (8007ba0 <USB_ActivateEndpoint+0x744>)
 8007b02:	400a      	ands	r2, r1
 8007b04:	801a      	strh	r2, [r3, #0]
 8007b06:	183b      	adds	r3, r7, r0
 8007b08:	183a      	adds	r2, r7, r0
 8007b0a:	8812      	ldrh	r2, [r2, #0]
 8007b0c:	2120      	movs	r1, #32
 8007b0e:	404a      	eors	r2, r1
 8007b10:	801a      	strh	r2, [r3, #0]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	18d3      	adds	r3, r2, r3
 8007b1c:	183a      	adds	r2, r7, r0
 8007b1e:	8812      	ldrh	r2, [r2, #0]
 8007b20:	4920      	ldr	r1, [pc, #128]	@ (8007ba4 <USB_ActivateEndpoint+0x748>)
 8007b22:	430a      	orrs	r2, r1
 8007b24:	b292      	uxth	r2, r2
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	e016      	b.n	8007b58 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	18d3      	adds	r3, r2, r3
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	2046      	movs	r0, #70	@ 0x46
 8007b3a:	183b      	adds	r3, r7, r0
 8007b3c:	4918      	ldr	r1, [pc, #96]	@ (8007ba0 <USB_ActivateEndpoint+0x744>)
 8007b3e:	400a      	ands	r2, r1
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	18d3      	adds	r3, r2, r3
 8007b4c:	183a      	adds	r2, r7, r0
 8007b4e:	8812      	ldrh	r2, [r2, #0]
 8007b50:	4914      	ldr	r1, [pc, #80]	@ (8007ba4 <USB_ActivateEndpoint+0x748>)
 8007b52:	430a      	orrs	r2, r1
 8007b54:	b292      	uxth	r2, r2
 8007b56:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	18d3      	adds	r3, r2, r3
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	2042      	movs	r0, #66	@ 0x42
 8007b68:	183b      	adds	r3, r7, r0
 8007b6a:	490f      	ldr	r1, [pc, #60]	@ (8007ba8 <USB_ActivateEndpoint+0x74c>)
 8007b6c:	400a      	ands	r2, r1
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	18d3      	adds	r3, r2, r3
 8007b7a:	183a      	adds	r2, r7, r0
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	4909      	ldr	r1, [pc, #36]	@ (8007ba4 <USB_ActivateEndpoint+0x748>)
 8007b80:	430a      	orrs	r2, r1
 8007b82:	b292      	uxth	r2, r2
 8007b84:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007b86:	236f      	movs	r3, #111	@ 0x6f
 8007b88:	18fb      	adds	r3, r7, r3
 8007b8a:	781b      	ldrb	r3, [r3, #0]
}
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b01c      	add	sp, #112	@ 0x70
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	ffff8f8f 	.word	0xffff8f8f
 8007b98:	ffffc080 	.word	0xffffc080
 8007b9c:	ffff80c0 	.word	0xffff80c0
 8007ba0:	ffff8fbf 	.word	0xffff8fbf
 8007ba4:	ffff8080 	.word	0xffff8080
 8007ba8:	ffffbf8f 	.word	0xffffbf8f

08007bac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08c      	sub	sp, #48	@ 0x30
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	7b1b      	ldrb	r3, [r3, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d000      	beq.n	8007bc0 <USB_DeactivateEndpoint+0x14>
 8007bbe:	e07e      	b.n	8007cbe <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d03c      	beq.n	8007c42 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	18d2      	adds	r2, r2, r3
 8007bd2:	210c      	movs	r1, #12
 8007bd4:	187b      	adds	r3, r7, r1
 8007bd6:	8812      	ldrh	r2, [r2, #0]
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	187b      	adds	r3, r7, r1
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	2240      	movs	r2, #64	@ 0x40
 8007be0:	4013      	ands	r3, r2
 8007be2:	d016      	beq.n	8007c12 <USB_DeactivateEndpoint+0x66>
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	18d3      	adds	r3, r2, r3
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	200a      	movs	r0, #10
 8007bf4:	183b      	adds	r3, r7, r0
 8007bf6:	49c7      	ldr	r1, [pc, #796]	@ (8007f14 <USB_DeactivateEndpoint+0x368>)
 8007bf8:	400a      	ands	r2, r1
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	18d3      	adds	r3, r2, r3
 8007c06:	183a      	adds	r2, r7, r0
 8007c08:	8812      	ldrh	r2, [r2, #0]
 8007c0a:	49c3      	ldr	r1, [pc, #780]	@ (8007f18 <USB_DeactivateEndpoint+0x36c>)
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	18d3      	adds	r3, r2, r3
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	2008      	movs	r0, #8
 8007c22:	183b      	adds	r3, r7, r0
 8007c24:	49bd      	ldr	r1, [pc, #756]	@ (8007f1c <USB_DeactivateEndpoint+0x370>)
 8007c26:	400a      	ands	r2, r1
 8007c28:	801a      	strh	r2, [r3, #0]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	18d3      	adds	r3, r2, r3
 8007c34:	183a      	adds	r2, r7, r0
 8007c36:	8812      	ldrh	r2, [r2, #0]
 8007c38:	49b9      	ldr	r1, [pc, #740]	@ (8007f20 <USB_DeactivateEndpoint+0x374>)
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	b292      	uxth	r2, r2
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	e163      	b.n	8007f0a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	18d2      	adds	r2, r2, r3
 8007c4c:	2112      	movs	r1, #18
 8007c4e:	187b      	adds	r3, r7, r1
 8007c50:	8812      	ldrh	r2, [r2, #0]
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	187b      	adds	r3, r7, r1
 8007c56:	881a      	ldrh	r2, [r3, #0]
 8007c58:	2380      	movs	r3, #128	@ 0x80
 8007c5a:	01db      	lsls	r3, r3, #7
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	d016      	beq.n	8007c8e <USB_DeactivateEndpoint+0xe2>
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	18d3      	adds	r3, r2, r3
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	2010      	movs	r0, #16
 8007c70:	183b      	adds	r3, r7, r0
 8007c72:	49a8      	ldr	r1, [pc, #672]	@ (8007f14 <USB_DeactivateEndpoint+0x368>)
 8007c74:	400a      	ands	r2, r1
 8007c76:	801a      	strh	r2, [r3, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	18d3      	adds	r3, r2, r3
 8007c82:	183a      	adds	r2, r7, r0
 8007c84:	8812      	ldrh	r2, [r2, #0]
 8007c86:	49a7      	ldr	r1, [pc, #668]	@ (8007f24 <USB_DeactivateEndpoint+0x378>)
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	b292      	uxth	r2, r2
 8007c8c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	18d3      	adds	r3, r2, r3
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	200e      	movs	r0, #14
 8007c9e:	183b      	adds	r3, r7, r0
 8007ca0:	49a1      	ldr	r1, [pc, #644]	@ (8007f28 <USB_DeactivateEndpoint+0x37c>)
 8007ca2:	400a      	ands	r2, r1
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	18d3      	adds	r3, r2, r3
 8007cb0:	183a      	adds	r2, r7, r0
 8007cb2:	8812      	ldrh	r2, [r2, #0]
 8007cb4:	499a      	ldr	r1, [pc, #616]	@ (8007f20 <USB_DeactivateEndpoint+0x374>)
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	b292      	uxth	r2, r2
 8007cba:	801a      	strh	r2, [r3, #0]
 8007cbc:	e125      	b.n	8007f0a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d000      	beq.n	8007cc8 <USB_DeactivateEndpoint+0x11c>
 8007cc6:	e090      	b.n	8007dea <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	18d2      	adds	r2, r2, r3
 8007cd2:	2120      	movs	r1, #32
 8007cd4:	187b      	adds	r3, r7, r1
 8007cd6:	8812      	ldrh	r2, [r2, #0]
 8007cd8:	801a      	strh	r2, [r3, #0]
 8007cda:	187b      	adds	r3, r7, r1
 8007cdc:	881a      	ldrh	r2, [r3, #0]
 8007cde:	2380      	movs	r3, #128	@ 0x80
 8007ce0:	01db      	lsls	r3, r3, #7
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	d016      	beq.n	8007d14 <USB_DeactivateEndpoint+0x168>
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	18d3      	adds	r3, r2, r3
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	201e      	movs	r0, #30
 8007cf6:	183b      	adds	r3, r7, r0
 8007cf8:	4986      	ldr	r1, [pc, #536]	@ (8007f14 <USB_DeactivateEndpoint+0x368>)
 8007cfa:	400a      	ands	r2, r1
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	18d3      	adds	r3, r2, r3
 8007d08:	183a      	adds	r2, r7, r0
 8007d0a:	8812      	ldrh	r2, [r2, #0]
 8007d0c:	4985      	ldr	r1, [pc, #532]	@ (8007f24 <USB_DeactivateEndpoint+0x378>)
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	b292      	uxth	r2, r2
 8007d12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	18d2      	adds	r2, r2, r3
 8007d1e:	211c      	movs	r1, #28
 8007d20:	187b      	adds	r3, r7, r1
 8007d22:	8812      	ldrh	r2, [r2, #0]
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	187b      	adds	r3, r7, r1
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	2240      	movs	r2, #64	@ 0x40
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d016      	beq.n	8007d5e <USB_DeactivateEndpoint+0x1b2>
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	18d3      	adds	r3, r2, r3
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	201a      	movs	r0, #26
 8007d40:	183b      	adds	r3, r7, r0
 8007d42:	4974      	ldr	r1, [pc, #464]	@ (8007f14 <USB_DeactivateEndpoint+0x368>)
 8007d44:	400a      	ands	r2, r1
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	18d3      	adds	r3, r2, r3
 8007d52:	183a      	adds	r2, r7, r0
 8007d54:	8812      	ldrh	r2, [r2, #0]
 8007d56:	4970      	ldr	r1, [pc, #448]	@ (8007f18 <USB_DeactivateEndpoint+0x36c>)
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	18d3      	adds	r3, r2, r3
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	2018      	movs	r0, #24
 8007d6e:	183b      	adds	r3, r7, r0
 8007d70:	4968      	ldr	r1, [pc, #416]	@ (8007f14 <USB_DeactivateEndpoint+0x368>)
 8007d72:	400a      	ands	r2, r1
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	18d3      	adds	r3, r2, r3
 8007d80:	183a      	adds	r2, r7, r0
 8007d82:	8812      	ldrh	r2, [r2, #0]
 8007d84:	4964      	ldr	r1, [pc, #400]	@ (8007f18 <USB_DeactivateEndpoint+0x36c>)
 8007d86:	430a      	orrs	r2, r1
 8007d88:	b292      	uxth	r2, r2
 8007d8a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	18d3      	adds	r3, r2, r3
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	2016      	movs	r0, #22
 8007d9c:	183b      	adds	r3, r7, r0
 8007d9e:	4962      	ldr	r1, [pc, #392]	@ (8007f28 <USB_DeactivateEndpoint+0x37c>)
 8007da0:	400a      	ands	r2, r1
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	18d3      	adds	r3, r2, r3
 8007dae:	183a      	adds	r2, r7, r0
 8007db0:	8812      	ldrh	r2, [r2, #0]
 8007db2:	495b      	ldr	r1, [pc, #364]	@ (8007f20 <USB_DeactivateEndpoint+0x374>)
 8007db4:	430a      	orrs	r2, r1
 8007db6:	b292      	uxth	r2, r2
 8007db8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	18d3      	adds	r3, r2, r3
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	2014      	movs	r0, #20
 8007dca:	183b      	adds	r3, r7, r0
 8007dcc:	4953      	ldr	r1, [pc, #332]	@ (8007f1c <USB_DeactivateEndpoint+0x370>)
 8007dce:	400a      	ands	r2, r1
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	18d3      	adds	r3, r2, r3
 8007ddc:	183a      	adds	r2, r7, r0
 8007dde:	8812      	ldrh	r2, [r2, #0]
 8007de0:	494f      	ldr	r1, [pc, #316]	@ (8007f20 <USB_DeactivateEndpoint+0x374>)
 8007de2:	430a      	orrs	r2, r1
 8007de4:	b292      	uxth	r2, r2
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	e08f      	b.n	8007f0a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	18d2      	adds	r2, r2, r3
 8007df4:	212e      	movs	r1, #46	@ 0x2e
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	8812      	ldrh	r2, [r2, #0]
 8007dfa:	801a      	strh	r2, [r3, #0]
 8007dfc:	187b      	adds	r3, r7, r1
 8007dfe:	881a      	ldrh	r2, [r3, #0]
 8007e00:	2380      	movs	r3, #128	@ 0x80
 8007e02:	01db      	lsls	r3, r3, #7
 8007e04:	4013      	ands	r3, r2
 8007e06:	d016      	beq.n	8007e36 <USB_DeactivateEndpoint+0x28a>
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	18d3      	adds	r3, r2, r3
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	202c      	movs	r0, #44	@ 0x2c
 8007e18:	183b      	adds	r3, r7, r0
 8007e1a:	493e      	ldr	r1, [pc, #248]	@ (8007f14 <USB_DeactivateEndpoint+0x368>)
 8007e1c:	400a      	ands	r2, r1
 8007e1e:	801a      	strh	r2, [r3, #0]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	18d3      	adds	r3, r2, r3
 8007e2a:	183a      	adds	r2, r7, r0
 8007e2c:	8812      	ldrh	r2, [r2, #0]
 8007e2e:	493d      	ldr	r1, [pc, #244]	@ (8007f24 <USB_DeactivateEndpoint+0x378>)
 8007e30:	430a      	orrs	r2, r1
 8007e32:	b292      	uxth	r2, r2
 8007e34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	18d2      	adds	r2, r2, r3
 8007e40:	212a      	movs	r1, #42	@ 0x2a
 8007e42:	187b      	adds	r3, r7, r1
 8007e44:	8812      	ldrh	r2, [r2, #0]
 8007e46:	801a      	strh	r2, [r3, #0]
 8007e48:	187b      	adds	r3, r7, r1
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	2240      	movs	r2, #64	@ 0x40
 8007e4e:	4013      	ands	r3, r2
 8007e50:	d016      	beq.n	8007e80 <USB_DeactivateEndpoint+0x2d4>
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	18d3      	adds	r3, r2, r3
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	2028      	movs	r0, #40	@ 0x28
 8007e62:	183b      	adds	r3, r7, r0
 8007e64:	492b      	ldr	r1, [pc, #172]	@ (8007f14 <USB_DeactivateEndpoint+0x368>)
 8007e66:	400a      	ands	r2, r1
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	18d3      	adds	r3, r2, r3
 8007e74:	183a      	adds	r2, r7, r0
 8007e76:	8812      	ldrh	r2, [r2, #0]
 8007e78:	4927      	ldr	r1, [pc, #156]	@ (8007f18 <USB_DeactivateEndpoint+0x36c>)
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	b292      	uxth	r2, r2
 8007e7e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	18d3      	adds	r3, r2, r3
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	2026      	movs	r0, #38	@ 0x26
 8007e90:	183b      	adds	r3, r7, r0
 8007e92:	4920      	ldr	r1, [pc, #128]	@ (8007f14 <USB_DeactivateEndpoint+0x368>)
 8007e94:	400a      	ands	r2, r1
 8007e96:	801a      	strh	r2, [r3, #0]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	18d3      	adds	r3, r2, r3
 8007ea2:	183a      	adds	r2, r7, r0
 8007ea4:	8812      	ldrh	r2, [r2, #0]
 8007ea6:	491f      	ldr	r1, [pc, #124]	@ (8007f24 <USB_DeactivateEndpoint+0x378>)
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	b292      	uxth	r2, r2
 8007eac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	18d3      	adds	r3, r2, r3
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	2024      	movs	r0, #36	@ 0x24
 8007ebe:	183b      	adds	r3, r7, r0
 8007ec0:	4916      	ldr	r1, [pc, #88]	@ (8007f1c <USB_DeactivateEndpoint+0x370>)
 8007ec2:	400a      	ands	r2, r1
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	18d3      	adds	r3, r2, r3
 8007ed0:	183a      	adds	r2, r7, r0
 8007ed2:	8812      	ldrh	r2, [r2, #0]
 8007ed4:	4912      	ldr	r1, [pc, #72]	@ (8007f20 <USB_DeactivateEndpoint+0x374>)
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	b292      	uxth	r2, r2
 8007eda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	18d3      	adds	r3, r2, r3
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	2022      	movs	r0, #34	@ 0x22
 8007eec:	183b      	adds	r3, r7, r0
 8007eee:	490e      	ldr	r1, [pc, #56]	@ (8007f28 <USB_DeactivateEndpoint+0x37c>)
 8007ef0:	400a      	ands	r2, r1
 8007ef2:	801a      	strh	r2, [r3, #0]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	18d3      	adds	r3, r2, r3
 8007efe:	183a      	adds	r2, r7, r0
 8007f00:	8812      	ldrh	r2, [r2, #0]
 8007f02:	4907      	ldr	r1, [pc, #28]	@ (8007f20 <USB_DeactivateEndpoint+0x374>)
 8007f04:	430a      	orrs	r2, r1
 8007f06:	b292      	uxth	r2, r2
 8007f08:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	b00c      	add	sp, #48	@ 0x30
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	ffff8f8f 	.word	0xffff8f8f
 8007f18:	ffff80c0 	.word	0xffff80c0
 8007f1c:	ffff8fbf 	.word	0xffff8fbf
 8007f20:	ffff8080 	.word	0xffff8080
 8007f24:	ffffc080 	.word	0xffffc080
 8007f28:	ffffbf8f 	.word	0xffffbf8f

08007f2c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b0c3      	sub	sp, #268	@ 0x10c
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	785b      	ldrb	r3, [r3, #1]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d001      	beq.n	8007f42 <USB_EPStartXfer+0x16>
 8007f3e:	f000 fd2d 	bl	800899c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d905      	bls.n	8007f5a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	1d7a      	adds	r2, r7, #5
 8007f54:	32ff      	adds	r2, #255	@ 0xff
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	e004      	b.n	8007f64 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	1d7a      	adds	r2, r7, #5
 8007f60:	32ff      	adds	r2, #255	@ 0xff
 8007f62:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	7b1b      	ldrb	r3, [r3, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d125      	bne.n	8007fb8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	6959      	ldr	r1, [r3, #20]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	88da      	ldrh	r2, [r3, #6]
 8007f74:	1d7b      	adds	r3, r7, #5
 8007f76:	33ff      	adds	r3, #255	@ 0xff
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 fa3f 	bl	8009400 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2250      	movs	r2, #80	@ 0x50
 8007f8a:	5a9b      	ldrh	r3, [r3, r2]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	001a      	movs	r2, r3
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	189b      	adds	r3, r3, r2
 8007f94:	613b      	str	r3, [r7, #16]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	00da      	lsls	r2, r3, #3
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	18d3      	adds	r3, r2, r3
 8007fa0:	4ad7      	ldr	r2, [pc, #860]	@ (8008300 <USB_EPStartXfer+0x3d4>)
 8007fa2:	4694      	mov	ip, r2
 8007fa4:	4463      	add	r3, ip
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	1d7b      	adds	r3, r7, #5
 8007faa:	33ff      	adds	r3, #255	@ 0xff
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	f000 fccd 	bl	8008952 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	78db      	ldrb	r3, [r3, #3]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d000      	beq.n	8007fc2 <USB_EPStartXfer+0x96>
 8007fc0:	e362      	b.n	8008688 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6a1a      	ldr	r2, [r3, #32]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d800      	bhi.n	8007fd0 <USB_EPStartXfer+0xa4>
 8007fce:	e309      	b.n	80085e4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	18d3      	adds	r3, r2, r3
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	2056      	movs	r0, #86	@ 0x56
 8007fe0:	183b      	adds	r3, r7, r0
 8007fe2:	49c8      	ldr	r1, [pc, #800]	@ (8008304 <USB_EPStartXfer+0x3d8>)
 8007fe4:	400a      	ands	r2, r1
 8007fe6:	801a      	strh	r2, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	18d3      	adds	r3, r2, r3
 8007ff2:	183a      	adds	r2, r7, r0
 8007ff4:	8812      	ldrh	r2, [r2, #0]
 8007ff6:	49c4      	ldr	r1, [pc, #784]	@ (8008308 <USB_EPStartXfer+0x3dc>)
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	b292      	uxth	r2, r2
 8007ffc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	6a1a      	ldr	r2, [r3, #32]
 8008002:	1d7b      	adds	r3, r7, #5
 8008004:	33ff      	adds	r3, #255	@ 0xff
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	1ad2      	subs	r2, r2, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	18d3      	adds	r3, r2, r3
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	001a      	movs	r2, r3
 800801e:	2340      	movs	r3, #64	@ 0x40
 8008020:	4013      	ands	r3, r2
 8008022:	d100      	bne.n	8008026 <USB_EPStartXfer+0xfa>
 8008024:	e176      	b.n	8008314 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	633b      	str	r3, [r7, #48]	@ 0x30
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d000      	beq.n	8008034 <USB_EPStartXfer+0x108>
 8008032:	e074      	b.n	800811e <USB_EPStartXfer+0x1f2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2250      	movs	r2, #80	@ 0x50
 800803c:	5a9b      	ldrh	r3, [r3, r2]
 800803e:	b29b      	uxth	r3, r3
 8008040:	001a      	movs	r2, r3
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008044:	189b      	adds	r3, r3, r2
 8008046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	00da      	lsls	r2, r3, #3
 800804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008050:	18d3      	adds	r3, r2, r3
 8008052:	4aae      	ldr	r2, [pc, #696]	@ (800830c <USB_EPStartXfer+0x3e0>)
 8008054:	4694      	mov	ip, r2
 8008056:	4463      	add	r3, ip
 8008058:	627b      	str	r3, [r7, #36]	@ 0x24
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	059b      	lsls	r3, r3, #22
 8008062:	0d9b      	lsrs	r3, r3, #22
 8008064:	b29a      	uxth	r2, r3
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	1d7b      	adds	r3, r7, #5
 800806c:	33ff      	adds	r3, #255	@ 0xff
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d108      	bne.n	8008086 <USB_EPStartXfer+0x15a>
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	4aa5      	ldr	r2, [pc, #660]	@ (8008310 <USB_EPStartXfer+0x3e4>)
 800807c:	4313      	orrs	r3, r2
 800807e:	b29a      	uxth	r2, r3
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e066      	b.n	8008154 <USB_EPStartXfer+0x228>
 8008086:	1d7b      	adds	r3, r7, #5
 8008088:	33ff      	adds	r3, #255	@ 0xff
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b3e      	cmp	r3, #62	@ 0x3e
 800808e:	d821      	bhi.n	80080d4 <USB_EPStartXfer+0x1a8>
 8008090:	1d7b      	adds	r3, r7, #5
 8008092:	33ff      	adds	r3, #255	@ 0xff
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	1c7a      	adds	r2, r7, #1
 800809a:	32ff      	adds	r2, #255	@ 0xff
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	1d7b      	adds	r3, r7, #5
 80080a0:	33ff      	adds	r3, #255	@ 0xff
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2201      	movs	r2, #1
 80080a6:	4013      	ands	r3, r2
 80080a8:	d006      	beq.n	80080b8 <USB_EPStartXfer+0x18c>
 80080aa:	1c7b      	adds	r3, r7, #1
 80080ac:	33ff      	adds	r3, #255	@ 0xff
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	1c7a      	adds	r2, r7, #1
 80080b4:	32ff      	adds	r2, #255	@ 0xff
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29a      	uxth	r2, r3
 80080be:	1c7b      	adds	r3, r7, #1
 80080c0:	33ff      	adds	r3, #255	@ 0xff
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	029b      	lsls	r3, r3, #10
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	4313      	orrs	r3, r2
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e03f      	b.n	8008154 <USB_EPStartXfer+0x228>
 80080d4:	1d7b      	adds	r3, r7, #5
 80080d6:	33ff      	adds	r3, #255	@ 0xff
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	1c7a      	adds	r2, r7, #1
 80080de:	32ff      	adds	r2, #255	@ 0xff
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	1d7b      	adds	r3, r7, #5
 80080e4:	33ff      	adds	r3, #255	@ 0xff
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	221f      	movs	r2, #31
 80080ea:	4013      	ands	r3, r2
 80080ec:	d106      	bne.n	80080fc <USB_EPStartXfer+0x1d0>
 80080ee:	1c7b      	adds	r3, r7, #1
 80080f0:	33ff      	adds	r3, #255	@ 0xff
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	1c7a      	adds	r2, r7, #1
 80080f8:	32ff      	adds	r2, #255	@ 0xff
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	b29a      	uxth	r2, r3
 8008102:	1c7b      	adds	r3, r7, #1
 8008104:	33ff      	adds	r3, #255	@ 0xff
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	029b      	lsls	r3, r3, #10
 800810c:	b29b      	uxth	r3, r3
 800810e:	4313      	orrs	r3, r2
 8008110:	b29b      	uxth	r3, r3
 8008112:	4a7f      	ldr	r2, [pc, #508]	@ (8008310 <USB_EPStartXfer+0x3e4>)
 8008114:	4313      	orrs	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e01a      	b.n	8008154 <USB_EPStartXfer+0x228>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d116      	bne.n	8008154 <USB_EPStartXfer+0x228>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2250      	movs	r2, #80	@ 0x50
 800812a:	5a9b      	ldrh	r3, [r3, r2]
 800812c:	b29b      	uxth	r3, r3
 800812e:	001a      	movs	r2, r3
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	189b      	adds	r3, r3, r2
 8008134:	633b      	str	r3, [r7, #48]	@ 0x30
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	00da      	lsls	r2, r3, #3
 800813c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813e:	18d3      	adds	r3, r2, r3
 8008140:	4a72      	ldr	r2, [pc, #456]	@ (800830c <USB_EPStartXfer+0x3e0>)
 8008142:	4694      	mov	ip, r2
 8008144:	4463      	add	r3, ip
 8008146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008148:	1d7b      	adds	r3, r7, #5
 800814a:	33ff      	adds	r3, #255	@ 0xff
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	b29a      	uxth	r2, r3
 8008150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008152:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008154:	2076      	movs	r0, #118	@ 0x76
 8008156:	183b      	adds	r3, r7, r0
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	8952      	ldrh	r2, [r2, #10]
 800815c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6959      	ldr	r1, [r3, #20]
 8008162:	1d7b      	adds	r3, r7, #5
 8008164:	33ff      	adds	r3, #255	@ 0xff
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	b29c      	uxth	r4, r3
 800816a:	183b      	adds	r3, r7, r0
 800816c:	881a      	ldrh	r2, [r3, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	0023      	movs	r3, r4
 8008172:	f001 f945 	bl	8009400 <USB_WritePMA>
            ep->xfer_buff += len;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	695a      	ldr	r2, [r3, #20]
 800817a:	1d7b      	adds	r3, r7, #5
 800817c:	33ff      	adds	r3, #255	@ 0xff
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	18d2      	adds	r2, r2, r3
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6a1a      	ldr	r2, [r3, #32]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	429a      	cmp	r2, r3
 8008190:	d908      	bls.n	80081a4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	6a1a      	ldr	r2, [r3, #32]
 8008196:	1d7b      	adds	r3, r7, #5
 8008198:	33ff      	adds	r3, #255	@ 0xff
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	1ad2      	subs	r2, r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	621a      	str	r2, [r3, #32]
 80081a2:	e007      	b.n	80081b4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	1d7a      	adds	r2, r7, #5
 80081aa:	32ff      	adds	r2, #255	@ 0xff
 80081ac:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2200      	movs	r2, #0
 80081b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d000      	beq.n	80081be <USB_EPStartXfer+0x292>
 80081bc:	e070      	b.n	80082a0 <USB_EPStartXfer+0x374>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2250      	movs	r2, #80	@ 0x50
 80081c6:	5a9b      	ldrh	r3, [r3, r2]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	001a      	movs	r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	189b      	adds	r3, r3, r2
 80081d0:	61bb      	str	r3, [r7, #24]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	00da      	lsls	r2, r3, #3
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	18d3      	adds	r3, r2, r3
 80081dc:	4a48      	ldr	r2, [pc, #288]	@ (8008300 <USB_EPStartXfer+0x3d4>)
 80081de:	4694      	mov	ip, r2
 80081e0:	4463      	add	r3, ip
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	059b      	lsls	r3, r3, #22
 80081ec:	0d9b      	lsrs	r3, r3, #22
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	1d7b      	adds	r3, r7, #5
 80081f6:	33ff      	adds	r3, #255	@ 0xff
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d108      	bne.n	8008210 <USB_EPStartXfer+0x2e4>
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	4a42      	ldr	r2, [pc, #264]	@ (8008310 <USB_EPStartXfer+0x3e4>)
 8008206:	4313      	orrs	r3, r2
 8008208:	b29a      	uxth	r2, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	e064      	b.n	80082da <USB_EPStartXfer+0x3ae>
 8008210:	1d7b      	adds	r3, r7, #5
 8008212:	33ff      	adds	r3, #255	@ 0xff
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b3e      	cmp	r3, #62	@ 0x3e
 8008218:	d81f      	bhi.n	800825a <USB_EPStartXfer+0x32e>
 800821a:	1d7b      	adds	r3, r7, #5
 800821c:	33ff      	adds	r3, #255	@ 0xff
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	21fc      	movs	r1, #252	@ 0xfc
 8008224:	187a      	adds	r2, r7, r1
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	1d7b      	adds	r3, r7, #5
 800822a:	33ff      	adds	r3, #255	@ 0xff
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2201      	movs	r2, #1
 8008230:	4013      	ands	r3, r2
 8008232:	d004      	beq.n	800823e <USB_EPStartXfer+0x312>
 8008234:	187b      	adds	r3, r7, r1
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3301      	adds	r3, #1
 800823a:	187a      	adds	r2, r7, r1
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29a      	uxth	r2, r3
 8008244:	23fc      	movs	r3, #252	@ 0xfc
 8008246:	18fb      	adds	r3, r7, r3
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	029b      	lsls	r3, r3, #10
 800824e:	b29b      	uxth	r3, r3
 8008250:	4313      	orrs	r3, r2
 8008252:	b29a      	uxth	r2, r3
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e03f      	b.n	80082da <USB_EPStartXfer+0x3ae>
 800825a:	1d7b      	adds	r3, r7, #5
 800825c:	33ff      	adds	r3, #255	@ 0xff
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	21fc      	movs	r1, #252	@ 0xfc
 8008264:	187a      	adds	r2, r7, r1
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	1d7b      	adds	r3, r7, #5
 800826a:	33ff      	adds	r3, #255	@ 0xff
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	221f      	movs	r2, #31
 8008270:	4013      	ands	r3, r2
 8008272:	d104      	bne.n	800827e <USB_EPStartXfer+0x352>
 8008274:	187b      	adds	r3, r7, r1
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3b01      	subs	r3, #1
 800827a:	187a      	adds	r2, r7, r1
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29a      	uxth	r2, r3
 8008284:	23fc      	movs	r3, #252	@ 0xfc
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	029b      	lsls	r3, r3, #10
 800828e:	b29b      	uxth	r3, r3
 8008290:	4313      	orrs	r3, r2
 8008292:	b29b      	uxth	r3, r3
 8008294:	4a1e      	ldr	r2, [pc, #120]	@ (8008310 <USB_EPStartXfer+0x3e4>)
 8008296:	4313      	orrs	r3, r2
 8008298:	b29a      	uxth	r2, r3
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	e01c      	b.n	80082da <USB_EPStartXfer+0x3ae>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d118      	bne.n	80082da <USB_EPStartXfer+0x3ae>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	623b      	str	r3, [r7, #32]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2250      	movs	r2, #80	@ 0x50
 80082b0:	5a9b      	ldrh	r3, [r3, r2]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	001a      	movs	r2, r3
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	189b      	adds	r3, r3, r2
 80082ba:	623b      	str	r3, [r7, #32]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	00da      	lsls	r2, r3, #3
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	18d3      	adds	r3, r2, r3
 80082c6:	4a0e      	ldr	r2, [pc, #56]	@ (8008300 <USB_EPStartXfer+0x3d4>)
 80082c8:	4694      	mov	ip, r2
 80082ca:	4463      	add	r3, ip
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	1d7b      	adds	r3, r7, #5
 80082d0:	33ff      	adds	r3, #255	@ 0xff
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80082da:	2076      	movs	r0, #118	@ 0x76
 80082dc:	183b      	adds	r3, r7, r0
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	8912      	ldrh	r2, [r2, #8]
 80082e2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	6959      	ldr	r1, [r3, #20]
 80082e8:	1d7b      	adds	r3, r7, #5
 80082ea:	33ff      	adds	r3, #255	@ 0xff
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	b29c      	uxth	r4, r3
 80082f0:	183b      	adds	r3, r7, r0
 80082f2:	881a      	ldrh	r2, [r3, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	0023      	movs	r3, r4
 80082f8:	f001 f882 	bl	8009400 <USB_WritePMA>
 80082fc:	e329      	b.n	8008952 <USB_EPStartXfer+0xa26>
 80082fe:	46c0      	nop			@ (mov r8, r8)
 8008300:	00000402 	.word	0x00000402
 8008304:	ffff8f8f 	.word	0xffff8f8f
 8008308:	ffff8180 	.word	0xffff8180
 800830c:	00000406 	.word	0x00000406
 8008310:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d000      	beq.n	800831e <USB_EPStartXfer+0x3f2>
 800831c:	e070      	b.n	8008400 <USB_EPStartXfer+0x4d4>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2250      	movs	r2, #80	@ 0x50
 8008326:	5a9b      	ldrh	r3, [r3, r2]
 8008328:	b29b      	uxth	r3, r3
 800832a:	001a      	movs	r2, r3
 800832c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800832e:	189b      	adds	r3, r3, r2
 8008330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	00da      	lsls	r2, r3, #3
 8008338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800833a:	18d3      	adds	r3, r2, r3
 800833c:	4acd      	ldr	r2, [pc, #820]	@ (8008674 <USB_EPStartXfer+0x748>)
 800833e:	4694      	mov	ip, r2
 8008340:	4463      	add	r3, ip
 8008342:	647b      	str	r3, [r7, #68]	@ 0x44
 8008344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	059b      	lsls	r3, r3, #22
 800834c:	0d9b      	lsrs	r3, r3, #22
 800834e:	b29a      	uxth	r2, r3
 8008350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	1d7b      	adds	r3, r7, #5
 8008356:	33ff      	adds	r3, #255	@ 0xff
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d108      	bne.n	8008370 <USB_EPStartXfer+0x444>
 800835e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	4ac4      	ldr	r2, [pc, #784]	@ (8008678 <USB_EPStartXfer+0x74c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	b29a      	uxth	r2, r3
 800836a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	e064      	b.n	800843a <USB_EPStartXfer+0x50e>
 8008370:	1d7b      	adds	r3, r7, #5
 8008372:	33ff      	adds	r3, #255	@ 0xff
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b3e      	cmp	r3, #62	@ 0x3e
 8008378:	d81f      	bhi.n	80083ba <USB_EPStartXfer+0x48e>
 800837a:	1d7b      	adds	r3, r7, #5
 800837c:	33ff      	adds	r3, #255	@ 0xff
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	085b      	lsrs	r3, r3, #1
 8008382:	21f8      	movs	r1, #248	@ 0xf8
 8008384:	187a      	adds	r2, r7, r1
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	1d7b      	adds	r3, r7, #5
 800838a:	33ff      	adds	r3, #255	@ 0xff
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2201      	movs	r2, #1
 8008390:	4013      	ands	r3, r2
 8008392:	d004      	beq.n	800839e <USB_EPStartXfer+0x472>
 8008394:	187b      	adds	r3, r7, r1
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3301      	adds	r3, #1
 800839a:	187a      	adds	r2, r7, r1
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	23f8      	movs	r3, #248	@ 0xf8
 80083a6:	18fb      	adds	r3, r7, r3
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	029b      	lsls	r3, r3, #10
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	4313      	orrs	r3, r2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	e03f      	b.n	800843a <USB_EPStartXfer+0x50e>
 80083ba:	1d7b      	adds	r3, r7, #5
 80083bc:	33ff      	adds	r3, #255	@ 0xff
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	21f8      	movs	r1, #248	@ 0xf8
 80083c4:	187a      	adds	r2, r7, r1
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	1d7b      	adds	r3, r7, #5
 80083ca:	33ff      	adds	r3, #255	@ 0xff
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	221f      	movs	r2, #31
 80083d0:	4013      	ands	r3, r2
 80083d2:	d104      	bne.n	80083de <USB_EPStartXfer+0x4b2>
 80083d4:	187b      	adds	r3, r7, r1
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3b01      	subs	r3, #1
 80083da:	187a      	adds	r2, r7, r1
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	23f8      	movs	r3, #248	@ 0xf8
 80083e6:	18fb      	adds	r3, r7, r3
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	029b      	lsls	r3, r3, #10
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4313      	orrs	r3, r2
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	4aa0      	ldr	r2, [pc, #640]	@ (8008678 <USB_EPStartXfer+0x74c>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083fc:	801a      	strh	r2, [r3, #0]
 80083fe:	e01c      	b.n	800843a <USB_EPStartXfer+0x50e>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d118      	bne.n	800843a <USB_EPStartXfer+0x50e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	653b      	str	r3, [r7, #80]	@ 0x50
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2250      	movs	r2, #80	@ 0x50
 8008410:	5a9b      	ldrh	r3, [r3, r2]
 8008412:	b29b      	uxth	r3, r3
 8008414:	001a      	movs	r2, r3
 8008416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008418:	189b      	adds	r3, r3, r2
 800841a:	653b      	str	r3, [r7, #80]	@ 0x50
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	00da      	lsls	r2, r3, #3
 8008422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008424:	18d3      	adds	r3, r2, r3
 8008426:	4a93      	ldr	r2, [pc, #588]	@ (8008674 <USB_EPStartXfer+0x748>)
 8008428:	4694      	mov	ip, r2
 800842a:	4463      	add	r3, ip
 800842c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800842e:	1d7b      	adds	r3, r7, #5
 8008430:	33ff      	adds	r3, #255	@ 0xff
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	b29a      	uxth	r2, r3
 8008436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800843a:	2076      	movs	r0, #118	@ 0x76
 800843c:	183b      	adds	r3, r7, r0
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	8912      	ldrh	r2, [r2, #8]
 8008442:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6959      	ldr	r1, [r3, #20]
 8008448:	1d7b      	adds	r3, r7, #5
 800844a:	33ff      	adds	r3, #255	@ 0xff
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	b29c      	uxth	r4, r3
 8008450:	183b      	adds	r3, r7, r0
 8008452:	881a      	ldrh	r2, [r3, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	0023      	movs	r3, r4
 8008458:	f000 ffd2 	bl	8009400 <USB_WritePMA>
            ep->xfer_buff += len;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	1d7b      	adds	r3, r7, #5
 8008462:	33ff      	adds	r3, #255	@ 0xff
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	18d2      	adds	r2, r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	6a1a      	ldr	r2, [r3, #32]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d908      	bls.n	800848a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	6a1a      	ldr	r2, [r3, #32]
 800847c:	1d7b      	adds	r3, r7, #5
 800847e:	33ff      	adds	r3, #255	@ 0xff
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	1ad2      	subs	r2, r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	621a      	str	r2, [r3, #32]
 8008488:	e007      	b.n	800849a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	1d7a      	adds	r2, r7, #5
 8008490:	32ff      	adds	r2, #255	@ 0xff
 8008492:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2200      	movs	r2, #0
 8008498:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	643b      	str	r3, [r7, #64]	@ 0x40
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d000      	beq.n	80084a8 <USB_EPStartXfer+0x57c>
 80084a6:	e070      	b.n	800858a <USB_EPStartXfer+0x65e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2250      	movs	r2, #80	@ 0x50
 80084b0:	5a9b      	ldrh	r3, [r3, r2]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	001a      	movs	r2, r3
 80084b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b8:	189b      	adds	r3, r3, r2
 80084ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	00da      	lsls	r2, r3, #3
 80084c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c4:	18d3      	adds	r3, r2, r3
 80084c6:	4a6d      	ldr	r2, [pc, #436]	@ (800867c <USB_EPStartXfer+0x750>)
 80084c8:	4694      	mov	ip, r2
 80084ca:	4463      	add	r3, ip
 80084cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	059b      	lsls	r3, r3, #22
 80084d6:	0d9b      	lsrs	r3, r3, #22
 80084d8:	b29a      	uxth	r2, r3
 80084da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	1d7b      	adds	r3, r7, #5
 80084e0:	33ff      	adds	r3, #255	@ 0xff
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d108      	bne.n	80084fa <USB_EPStartXfer+0x5ce>
 80084e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4a62      	ldr	r2, [pc, #392]	@ (8008678 <USB_EPStartXfer+0x74c>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	e062      	b.n	80085c0 <USB_EPStartXfer+0x694>
 80084fa:	1d7b      	adds	r3, r7, #5
 80084fc:	33ff      	adds	r3, #255	@ 0xff
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b3e      	cmp	r3, #62	@ 0x3e
 8008502:	d81f      	bhi.n	8008544 <USB_EPStartXfer+0x618>
 8008504:	1d7b      	adds	r3, r7, #5
 8008506:	33ff      	adds	r3, #255	@ 0xff
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	085b      	lsrs	r3, r3, #1
 800850c:	21f4      	movs	r1, #244	@ 0xf4
 800850e:	187a      	adds	r2, r7, r1
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	1d7b      	adds	r3, r7, #5
 8008514:	33ff      	adds	r3, #255	@ 0xff
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2201      	movs	r2, #1
 800851a:	4013      	ands	r3, r2
 800851c:	d004      	beq.n	8008528 <USB_EPStartXfer+0x5fc>
 800851e:	187b      	adds	r3, r7, r1
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	187a      	adds	r2, r7, r1
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29a      	uxth	r2, r3
 800852e:	23f4      	movs	r3, #244	@ 0xf4
 8008530:	18fb      	adds	r3, r7, r3
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	029b      	lsls	r3, r3, #10
 8008538:	b29b      	uxth	r3, r3
 800853a:	4313      	orrs	r3, r2
 800853c:	b29a      	uxth	r2, r3
 800853e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008540:	801a      	strh	r2, [r3, #0]
 8008542:	e03d      	b.n	80085c0 <USB_EPStartXfer+0x694>
 8008544:	1d7b      	adds	r3, r7, #5
 8008546:	33ff      	adds	r3, #255	@ 0xff
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	21f4      	movs	r1, #244	@ 0xf4
 800854e:	187a      	adds	r2, r7, r1
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	1d7b      	adds	r3, r7, #5
 8008554:	33ff      	adds	r3, #255	@ 0xff
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	221f      	movs	r2, #31
 800855a:	4013      	ands	r3, r2
 800855c:	d104      	bne.n	8008568 <USB_EPStartXfer+0x63c>
 800855e:	187b      	adds	r3, r7, r1
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3b01      	subs	r3, #1
 8008564:	187a      	adds	r2, r7, r1
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29a      	uxth	r2, r3
 800856e:	23f4      	movs	r3, #244	@ 0xf4
 8008570:	18fb      	adds	r3, r7, r3
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	029b      	lsls	r3, r3, #10
 8008578:	b29b      	uxth	r3, r3
 800857a:	4313      	orrs	r3, r2
 800857c:	b29b      	uxth	r3, r3
 800857e:	4a3e      	ldr	r2, [pc, #248]	@ (8008678 <USB_EPStartXfer+0x74c>)
 8008580:	4313      	orrs	r3, r2
 8008582:	b29a      	uxth	r2, r3
 8008584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e01a      	b.n	80085c0 <USB_EPStartXfer+0x694>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d116      	bne.n	80085c0 <USB_EPStartXfer+0x694>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2250      	movs	r2, #80	@ 0x50
 8008596:	5a9b      	ldrh	r3, [r3, r2]
 8008598:	b29b      	uxth	r3, r3
 800859a:	001a      	movs	r2, r3
 800859c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	00da      	lsls	r2, r3, #3
 80085a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085aa:	18d3      	adds	r3, r2, r3
 80085ac:	4a33      	ldr	r2, [pc, #204]	@ (800867c <USB_EPStartXfer+0x750>)
 80085ae:	4694      	mov	ip, r2
 80085b0:	4463      	add	r3, ip
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085b4:	1d7b      	adds	r3, r7, #5
 80085b6:	33ff      	adds	r3, #255	@ 0xff
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085c0:	2076      	movs	r0, #118	@ 0x76
 80085c2:	183b      	adds	r3, r7, r0
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	8952      	ldrh	r2, [r2, #10]
 80085c8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6959      	ldr	r1, [r3, #20]
 80085ce:	1d7b      	adds	r3, r7, #5
 80085d0:	33ff      	adds	r3, #255	@ 0xff
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	b29c      	uxth	r4, r3
 80085d6:	183b      	adds	r3, r7, r0
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	0023      	movs	r3, r4
 80085de:	f000 ff0f 	bl	8009400 <USB_WritePMA>
 80085e2:	e1b6      	b.n	8008952 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	1d7a      	adds	r2, r7, #5
 80085ea:	32ff      	adds	r2, #255	@ 0xff
 80085ec:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	18d3      	adds	r3, r2, r3
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	2062      	movs	r0, #98	@ 0x62
 80085fe:	183b      	adds	r3, r7, r0
 8008600:	491f      	ldr	r1, [pc, #124]	@ (8008680 <USB_EPStartXfer+0x754>)
 8008602:	400a      	ands	r2, r1
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	18d3      	adds	r3, r2, r3
 8008610:	183a      	adds	r2, r7, r0
 8008612:	8812      	ldrh	r2, [r2, #0]
 8008614:	491b      	ldr	r1, [pc, #108]	@ (8008684 <USB_EPStartXfer+0x758>)
 8008616:	430a      	orrs	r2, r1
 8008618:	b292      	uxth	r2, r2
 800861a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2250      	movs	r2, #80	@ 0x50
 8008624:	5a9b      	ldrh	r3, [r3, r2]
 8008626:	b29b      	uxth	r3, r3
 8008628:	001a      	movs	r2, r3
 800862a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800862c:	189b      	adds	r3, r3, r2
 800862e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	00da      	lsls	r2, r3, #3
 8008636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008638:	18d3      	adds	r3, r2, r3
 800863a:	4a0e      	ldr	r2, [pc, #56]	@ (8008674 <USB_EPStartXfer+0x748>)
 800863c:	4694      	mov	ip, r2
 800863e:	4463      	add	r3, ip
 8008640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008642:	1d7b      	adds	r3, r7, #5
 8008644:	33ff      	adds	r3, #255	@ 0xff
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	b29a      	uxth	r2, r3
 800864a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800864c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800864e:	2076      	movs	r0, #118	@ 0x76
 8008650:	183b      	adds	r3, r7, r0
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	8912      	ldrh	r2, [r2, #8]
 8008656:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	6959      	ldr	r1, [r3, #20]
 800865c:	1d7b      	adds	r3, r7, #5
 800865e:	33ff      	adds	r3, #255	@ 0xff
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	b29c      	uxth	r4, r3
 8008664:	183b      	adds	r3, r7, r0
 8008666:	881a      	ldrh	r2, [r3, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	0023      	movs	r3, r4
 800866c:	f000 fec8 	bl	8009400 <USB_WritePMA>
 8008670:	e16f      	b.n	8008952 <USB_EPStartXfer+0xa26>
 8008672:	46c0      	nop			@ (mov r8, r8)
 8008674:	00000402 	.word	0x00000402
 8008678:	ffff8000 	.word	0xffff8000
 800867c:	00000406 	.word	0x00000406
 8008680:	ffff8e8f 	.word	0xffff8e8f
 8008684:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	6a1a      	ldr	r2, [r3, #32]
 800868c:	1d7b      	adds	r3, r7, #5
 800868e:	33ff      	adds	r3, #255	@ 0xff
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	18d3      	adds	r3, r2, r3
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	001a      	movs	r2, r3
 80086a8:	2340      	movs	r3, #64	@ 0x40
 80086aa:	4013      	ands	r3, r2
 80086ac:	d100      	bne.n	80086b0 <USB_EPStartXfer+0x784>
 80086ae:	e0a4      	b.n	80087fa <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	785b      	ldrb	r3, [r3, #1]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d000      	beq.n	80086be <USB_EPStartXfer+0x792>
 80086bc:	e070      	b.n	80087a0 <USB_EPStartXfer+0x874>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2250      	movs	r2, #80	@ 0x50
 80086c6:	5a9b      	ldrh	r3, [r3, r2]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	001a      	movs	r2, r3
 80086cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	00da      	lsls	r2, r3, #3
 80086d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086da:	18d3      	adds	r3, r2, r3
 80086dc:	4ada      	ldr	r2, [pc, #872]	@ (8008a48 <USB_EPStartXfer+0xb1c>)
 80086de:	4694      	mov	ip, r2
 80086e0:	4463      	add	r3, ip
 80086e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80086e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	059b      	lsls	r3, r3, #22
 80086ec:	0d9b      	lsrs	r3, r3, #22
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	1d7b      	adds	r3, r7, #5
 80086f6:	33ff      	adds	r3, #255	@ 0xff
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d108      	bne.n	8008710 <USB_EPStartXfer+0x7e4>
 80086fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	4ad1      	ldr	r2, [pc, #836]	@ (8008a4c <USB_EPStartXfer+0xb20>)
 8008706:	4313      	orrs	r3, r2
 8008708:	b29a      	uxth	r2, r3
 800870a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	e062      	b.n	80087d6 <USB_EPStartXfer+0x8aa>
 8008710:	1d7b      	adds	r3, r7, #5
 8008712:	33ff      	adds	r3, #255	@ 0xff
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b3e      	cmp	r3, #62	@ 0x3e
 8008718:	d81f      	bhi.n	800875a <USB_EPStartXfer+0x82e>
 800871a:	1d7b      	adds	r3, r7, #5
 800871c:	33ff      	adds	r3, #255	@ 0xff
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	21f0      	movs	r1, #240	@ 0xf0
 8008724:	187a      	adds	r2, r7, r1
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	1d7b      	adds	r3, r7, #5
 800872a:	33ff      	adds	r3, #255	@ 0xff
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2201      	movs	r2, #1
 8008730:	4013      	ands	r3, r2
 8008732:	d004      	beq.n	800873e <USB_EPStartXfer+0x812>
 8008734:	187b      	adds	r3, r7, r1
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3301      	adds	r3, #1
 800873a:	187a      	adds	r2, r7, r1
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	b29a      	uxth	r2, r3
 8008744:	23f0      	movs	r3, #240	@ 0xf0
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	029b      	lsls	r3, r3, #10
 800874e:	b29b      	uxth	r3, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008756:	801a      	strh	r2, [r3, #0]
 8008758:	e03d      	b.n	80087d6 <USB_EPStartXfer+0x8aa>
 800875a:	1d7b      	adds	r3, r7, #5
 800875c:	33ff      	adds	r3, #255	@ 0xff
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	21f0      	movs	r1, #240	@ 0xf0
 8008764:	187a      	adds	r2, r7, r1
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	1d7b      	adds	r3, r7, #5
 800876a:	33ff      	adds	r3, #255	@ 0xff
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	221f      	movs	r2, #31
 8008770:	4013      	ands	r3, r2
 8008772:	d104      	bne.n	800877e <USB_EPStartXfer+0x852>
 8008774:	187b      	adds	r3, r7, r1
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3b01      	subs	r3, #1
 800877a:	187a      	adds	r2, r7, r1
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29a      	uxth	r2, r3
 8008784:	23f0      	movs	r3, #240	@ 0xf0
 8008786:	18fb      	adds	r3, r7, r3
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	029b      	lsls	r3, r3, #10
 800878e:	b29b      	uxth	r3, r3
 8008790:	4313      	orrs	r3, r2
 8008792:	b29b      	uxth	r3, r3
 8008794:	4aad      	ldr	r2, [pc, #692]	@ (8008a4c <USB_EPStartXfer+0xb20>)
 8008796:	4313      	orrs	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800879c:	801a      	strh	r2, [r3, #0]
 800879e:	e01a      	b.n	80087d6 <USB_EPStartXfer+0x8aa>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d116      	bne.n	80087d6 <USB_EPStartXfer+0x8aa>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2250      	movs	r2, #80	@ 0x50
 80087ac:	5a9b      	ldrh	r3, [r3, r2]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	001a      	movs	r2, r3
 80087b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087b4:	189b      	adds	r3, r3, r2
 80087b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	00da      	lsls	r2, r3, #3
 80087be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087c0:	18d3      	adds	r3, r2, r3
 80087c2:	4aa1      	ldr	r2, [pc, #644]	@ (8008a48 <USB_EPStartXfer+0xb1c>)
 80087c4:	4694      	mov	ip, r2
 80087c6:	4463      	add	r3, ip
 80087c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087ca:	1d7b      	adds	r3, r7, #5
 80087cc:	33ff      	adds	r3, #255	@ 0xff
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80087d6:	2076      	movs	r0, #118	@ 0x76
 80087d8:	183b      	adds	r3, r7, r0
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	8952      	ldrh	r2, [r2, #10]
 80087de:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6959      	ldr	r1, [r3, #20]
 80087e4:	1d7b      	adds	r3, r7, #5
 80087e6:	33ff      	adds	r3, #255	@ 0xff
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	b29c      	uxth	r4, r3
 80087ec:	183b      	adds	r3, r7, r0
 80087ee:	881a      	ldrh	r2, [r3, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	0023      	movs	r3, r4
 80087f4:	f000 fe04 	bl	8009400 <USB_WritePMA>
 80087f8:	e0ab      	b.n	8008952 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	785b      	ldrb	r3, [r3, #1]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d000      	beq.n	8008804 <USB_EPStartXfer+0x8d8>
 8008802:	e070      	b.n	80088e6 <USB_EPStartXfer+0x9ba>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2250      	movs	r2, #80	@ 0x50
 800880c:	5a9b      	ldrh	r3, [r3, r2]
 800880e:	b29b      	uxth	r3, r3
 8008810:	001a      	movs	r2, r3
 8008812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008814:	189b      	adds	r3, r3, r2
 8008816:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	00da      	lsls	r2, r3, #3
 800881e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008820:	18d3      	adds	r3, r2, r3
 8008822:	4a8b      	ldr	r2, [pc, #556]	@ (8008a50 <USB_EPStartXfer+0xb24>)
 8008824:	4694      	mov	ip, r2
 8008826:	4463      	add	r3, ip
 8008828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800882a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29b      	uxth	r3, r3
 8008830:	059b      	lsls	r3, r3, #22
 8008832:	0d9b      	lsrs	r3, r3, #22
 8008834:	b29a      	uxth	r2, r3
 8008836:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008838:	801a      	strh	r2, [r3, #0]
 800883a:	1d7b      	adds	r3, r7, #5
 800883c:	33ff      	adds	r3, #255	@ 0xff
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <USB_EPStartXfer+0x92a>
 8008844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	4a80      	ldr	r2, [pc, #512]	@ (8008a4c <USB_EPStartXfer+0xb20>)
 800884c:	4313      	orrs	r3, r2
 800884e:	b29a      	uxth	r2, r3
 8008850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008852:	801a      	strh	r2, [r3, #0]
 8008854:	e06c      	b.n	8008930 <USB_EPStartXfer+0xa04>
 8008856:	1d7b      	adds	r3, r7, #5
 8008858:	33ff      	adds	r3, #255	@ 0xff
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b3e      	cmp	r3, #62	@ 0x3e
 800885e:	d81f      	bhi.n	80088a0 <USB_EPStartXfer+0x974>
 8008860:	1d7b      	adds	r3, r7, #5
 8008862:	33ff      	adds	r3, #255	@ 0xff
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	085b      	lsrs	r3, r3, #1
 8008868:	21ec      	movs	r1, #236	@ 0xec
 800886a:	187a      	adds	r2, r7, r1
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	1d7b      	adds	r3, r7, #5
 8008870:	33ff      	adds	r3, #255	@ 0xff
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2201      	movs	r2, #1
 8008876:	4013      	ands	r3, r2
 8008878:	d004      	beq.n	8008884 <USB_EPStartXfer+0x958>
 800887a:	187b      	adds	r3, r7, r1
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3301      	adds	r3, #1
 8008880:	187a      	adds	r2, r7, r1
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29a      	uxth	r2, r3
 800888a:	23ec      	movs	r3, #236	@ 0xec
 800888c:	18fb      	adds	r3, r7, r3
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	b29b      	uxth	r3, r3
 8008892:	029b      	lsls	r3, r3, #10
 8008894:	b29b      	uxth	r3, r3
 8008896:	4313      	orrs	r3, r2
 8008898:	b29a      	uxth	r2, r3
 800889a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	e047      	b.n	8008930 <USB_EPStartXfer+0xa04>
 80088a0:	1d7b      	adds	r3, r7, #5
 80088a2:	33ff      	adds	r3, #255	@ 0xff
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	095b      	lsrs	r3, r3, #5
 80088a8:	21ec      	movs	r1, #236	@ 0xec
 80088aa:	187a      	adds	r2, r7, r1
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	1d7b      	adds	r3, r7, #5
 80088b0:	33ff      	adds	r3, #255	@ 0xff
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	221f      	movs	r2, #31
 80088b6:	4013      	ands	r3, r2
 80088b8:	d104      	bne.n	80088c4 <USB_EPStartXfer+0x998>
 80088ba:	187b      	adds	r3, r7, r1
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3b01      	subs	r3, #1
 80088c0:	187a      	adds	r2, r7, r1
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	23ec      	movs	r3, #236	@ 0xec
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	029b      	lsls	r3, r3, #10
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	4313      	orrs	r3, r2
 80088d8:	b29b      	uxth	r3, r3
 80088da:	4a5c      	ldr	r2, [pc, #368]	@ (8008a4c <USB_EPStartXfer+0xb20>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088e2:	801a      	strh	r2, [r3, #0]
 80088e4:	e024      	b.n	8008930 <USB_EPStartXfer+0xa04>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d120      	bne.n	8008930 <USB_EPStartXfer+0xa04>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2184      	movs	r1, #132	@ 0x84
 80088f2:	187a      	adds	r2, r7, r1
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2250      	movs	r2, #80	@ 0x50
 80088fa:	5a9b      	ldrh	r3, [r3, r2]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	001a      	movs	r2, r3
 8008900:	187b      	adds	r3, r7, r1
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	189b      	adds	r3, r3, r2
 8008906:	187a      	adds	r2, r7, r1
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	00da      	lsls	r2, r3, #3
 8008910:	187b      	adds	r3, r7, r1
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	18d3      	adds	r3, r2, r3
 8008916:	4a4e      	ldr	r2, [pc, #312]	@ (8008a50 <USB_EPStartXfer+0xb24>)
 8008918:	4694      	mov	ip, r2
 800891a:	4463      	add	r3, ip
 800891c:	2180      	movs	r1, #128	@ 0x80
 800891e:	187a      	adds	r2, r7, r1
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	1d7b      	adds	r3, r7, #5
 8008924:	33ff      	adds	r3, #255	@ 0xff
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	b29a      	uxth	r2, r3
 800892a:	187b      	adds	r3, r7, r1
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008930:	2076      	movs	r0, #118	@ 0x76
 8008932:	183b      	adds	r3, r7, r0
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	8912      	ldrh	r2, [r2, #8]
 8008938:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	6959      	ldr	r1, [r3, #20]
 800893e:	1d7b      	adds	r3, r7, #5
 8008940:	33ff      	adds	r3, #255	@ 0xff
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	b29c      	uxth	r4, r3
 8008946:	183b      	adds	r3, r7, r0
 8008948:	881a      	ldrh	r2, [r3, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	0023      	movs	r3, r4
 800894e:	f000 fd57 	bl	8009400 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	18d3      	adds	r3, r2, r3
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b29a      	uxth	r2, r3
 8008960:	200a      	movs	r0, #10
 8008962:	183b      	adds	r3, r7, r0
 8008964:	493b      	ldr	r1, [pc, #236]	@ (8008a54 <USB_EPStartXfer+0xb28>)
 8008966:	400a      	ands	r2, r1
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	183b      	adds	r3, r7, r0
 800896c:	183a      	adds	r2, r7, r0
 800896e:	8812      	ldrh	r2, [r2, #0]
 8008970:	2110      	movs	r1, #16
 8008972:	404a      	eors	r2, r1
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	183b      	adds	r3, r7, r0
 8008978:	183a      	adds	r2, r7, r0
 800897a:	8812      	ldrh	r2, [r2, #0]
 800897c:	2120      	movs	r1, #32
 800897e:	404a      	eors	r2, r1
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	18d3      	adds	r3, r2, r3
 800898c:	183a      	adds	r2, r7, r0
 800898e:	8812      	ldrh	r2, [r2, #0]
 8008990:	4931      	ldr	r1, [pc, #196]	@ (8008a58 <USB_EPStartXfer+0xb2c>)
 8008992:	430a      	orrs	r2, r1
 8008994:	b292      	uxth	r2, r2
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	f000 fbe9 	bl	800916e <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	7b1b      	ldrb	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d000      	beq.n	80089a6 <USB_EPStartXfer+0xa7a>
 80089a4:	e0a8      	b.n	8008af8 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d90d      	bls.n	80089ce <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	1d7a      	adds	r2, r7, #5
 80089b8:	32ff      	adds	r2, #255	@ 0xff
 80089ba:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	699a      	ldr	r2, [r3, #24]
 80089c0:	1d7b      	adds	r3, r7, #5
 80089c2:	33ff      	adds	r3, #255	@ 0xff
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	1ad2      	subs	r2, r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	619a      	str	r2, [r3, #24]
 80089cc:	e007      	b.n	80089de <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	1d7a      	adds	r2, r7, #5
 80089d4:	32ff      	adds	r2, #255	@ 0xff
 80089d6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2200      	movs	r2, #0
 80089dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2190      	movs	r1, #144	@ 0x90
 80089e2:	187a      	adds	r2, r7, r1
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2250      	movs	r2, #80	@ 0x50
 80089ea:	5a9b      	ldrh	r3, [r3, r2]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	001a      	movs	r2, r3
 80089f0:	187b      	adds	r3, r7, r1
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	189b      	adds	r3, r3, r2
 80089f6:	187a      	adds	r2, r7, r1
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	00da      	lsls	r2, r3, #3
 8008a00:	187b      	adds	r3, r7, r1
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	18d3      	adds	r3, r2, r3
 8008a06:	4a10      	ldr	r2, [pc, #64]	@ (8008a48 <USB_EPStartXfer+0xb1c>)
 8008a08:	4694      	mov	ip, r2
 8008a0a:	4463      	add	r3, ip
 8008a0c:	218c      	movs	r1, #140	@ 0x8c
 8008a0e:	187a      	adds	r2, r7, r1
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	187b      	adds	r3, r7, r1
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	059b      	lsls	r3, r3, #22
 8008a1c:	0d9b      	lsrs	r3, r3, #22
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	187b      	adds	r3, r7, r1
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	801a      	strh	r2, [r3, #0]
 8008a26:	1d7b      	adds	r3, r7, #5
 8008a28:	33ff      	adds	r3, #255	@ 0xff
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d115      	bne.n	8008a5c <USB_EPStartXfer+0xb30>
 8008a30:	187b      	adds	r3, r7, r1
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	4a04      	ldr	r2, [pc, #16]	@ (8008a4c <USB_EPStartXfer+0xb20>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	187b      	adds	r3, r7, r1
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	e36e      	b.n	8009124 <USB_EPStartXfer+0x11f8>
 8008a46:	46c0      	nop			@ (mov r8, r8)
 8008a48:	00000406 	.word	0x00000406
 8008a4c:	ffff8000 	.word	0xffff8000
 8008a50:	00000402 	.word	0x00000402
 8008a54:	ffff8fbf 	.word	0xffff8fbf
 8008a58:	ffff8080 	.word	0xffff8080
 8008a5c:	1d7b      	adds	r3, r7, #5
 8008a5e:	33ff      	adds	r3, #255	@ 0xff
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a64:	d822      	bhi.n	8008aac <USB_EPStartXfer+0xb80>
 8008a66:	1d7b      	adds	r3, r7, #5
 8008a68:	33ff      	adds	r3, #255	@ 0xff
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	21e8      	movs	r1, #232	@ 0xe8
 8008a70:	187a      	adds	r2, r7, r1
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	1d7b      	adds	r3, r7, #5
 8008a76:	33ff      	adds	r3, #255	@ 0xff
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d004      	beq.n	8008a8a <USB_EPStartXfer+0xb5e>
 8008a80:	187b      	adds	r3, r7, r1
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	187a      	adds	r2, r7, r1
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	218c      	movs	r1, #140	@ 0x8c
 8008a8c:	187b      	adds	r3, r7, r1
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	23e8      	movs	r3, #232	@ 0xe8
 8008a96:	18fb      	adds	r3, r7, r3
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	029b      	lsls	r3, r3, #10
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	187b      	adds	r3, r7, r1
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	801a      	strh	r2, [r3, #0]
 8008aaa:	e33b      	b.n	8009124 <USB_EPStartXfer+0x11f8>
 8008aac:	1d7b      	adds	r3, r7, #5
 8008aae:	33ff      	adds	r3, #255	@ 0xff
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	095b      	lsrs	r3, r3, #5
 8008ab4:	21e8      	movs	r1, #232	@ 0xe8
 8008ab6:	187a      	adds	r2, r7, r1
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	1d7b      	adds	r3, r7, #5
 8008abc:	33ff      	adds	r3, #255	@ 0xff
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	221f      	movs	r2, #31
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	d104      	bne.n	8008ad0 <USB_EPStartXfer+0xba4>
 8008ac6:	187b      	adds	r3, r7, r1
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	187a      	adds	r2, r7, r1
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	218c      	movs	r1, #140	@ 0x8c
 8008ad2:	187b      	adds	r3, r7, r1
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	23e8      	movs	r3, #232	@ 0xe8
 8008adc:	18fb      	adds	r3, r7, r3
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	029b      	lsls	r3, r3, #10
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	4ad7      	ldr	r2, [pc, #860]	@ (8008e48 <USB_EPStartXfer+0xf1c>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	187b      	adds	r3, r7, r1
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	801a      	strh	r2, [r3, #0]
 8008af6:	e315      	b.n	8009124 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	78db      	ldrb	r3, [r3, #3]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d000      	beq.n	8008b02 <USB_EPStartXfer+0xbd6>
 8008b00:	e189      	b.n	8008e16 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d000      	beq.n	8008b0c <USB_EPStartXfer+0xbe0>
 8008b0a:	e07b      	b.n	8008c04 <USB_EPStartXfer+0xcd8>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	21ac      	movs	r1, #172	@ 0xac
 8008b10:	187a      	adds	r2, r7, r1
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2250      	movs	r2, #80	@ 0x50
 8008b18:	5a9b      	ldrh	r3, [r3, r2]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	001a      	movs	r2, r3
 8008b1e:	187b      	adds	r3, r7, r1
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	189b      	adds	r3, r3, r2
 8008b24:	187a      	adds	r2, r7, r1
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	00da      	lsls	r2, r3, #3
 8008b2e:	187b      	adds	r3, r7, r1
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	18d3      	adds	r3, r2, r3
 8008b34:	4ac5      	ldr	r2, [pc, #788]	@ (8008e4c <USB_EPStartXfer+0xf20>)
 8008b36:	4694      	mov	ip, r2
 8008b38:	4463      	add	r3, ip
 8008b3a:	21a8      	movs	r1, #168	@ 0xa8
 8008b3c:	187a      	adds	r2, r7, r1
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	187b      	adds	r3, r7, r1
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	059b      	lsls	r3, r3, #22
 8008b4a:	0d9b      	lsrs	r3, r3, #22
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	187b      	adds	r3, r7, r1
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	801a      	strh	r2, [r3, #0]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <USB_EPStartXfer+0xc46>
 8008b5c:	187b      	adds	r3, r7, r1
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4ab8      	ldr	r2, [pc, #736]	@ (8008e48 <USB_EPStartXfer+0xf1c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	187b      	adds	r3, r7, r1
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	801a      	strh	r2, [r3, #0]
 8008b70:	e06c      	b.n	8008c4c <USB_EPStartXfer+0xd20>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b78:	d820      	bhi.n	8008bbc <USB_EPStartXfer+0xc90>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	085b      	lsrs	r3, r3, #1
 8008b80:	21e4      	movs	r1, #228	@ 0xe4
 8008b82:	187a      	adds	r2, r7, r1
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	d004      	beq.n	8008b9a <USB_EPStartXfer+0xc6e>
 8008b90:	187b      	adds	r3, r7, r1
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3301      	adds	r3, #1
 8008b96:	187a      	adds	r2, r7, r1
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	21a8      	movs	r1, #168	@ 0xa8
 8008b9c:	187b      	adds	r3, r7, r1
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	23e4      	movs	r3, #228	@ 0xe4
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	029b      	lsls	r3, r3, #10
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	187b      	adds	r3, r7, r1
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	e047      	b.n	8008c4c <USB_EPStartXfer+0xd20>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	21e4      	movs	r1, #228	@ 0xe4
 8008bc4:	187a      	adds	r2, r7, r1
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	221f      	movs	r2, #31
 8008bce:	4013      	ands	r3, r2
 8008bd0:	d104      	bne.n	8008bdc <USB_EPStartXfer+0xcb0>
 8008bd2:	187b      	adds	r3, r7, r1
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	187a      	adds	r2, r7, r1
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	21a8      	movs	r1, #168	@ 0xa8
 8008bde:	187b      	adds	r3, r7, r1
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	23e4      	movs	r3, #228	@ 0xe4
 8008be8:	18fb      	adds	r3, r7, r3
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	029b      	lsls	r3, r3, #10
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	4a94      	ldr	r2, [pc, #592]	@ (8008e48 <USB_EPStartXfer+0xf1c>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	187b      	adds	r3, r7, r1
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	e023      	b.n	8008c4c <USB_EPStartXfer+0xd20>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d11f      	bne.n	8008c4c <USB_EPStartXfer+0xd20>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	21b4      	movs	r1, #180	@ 0xb4
 8008c10:	187a      	adds	r2, r7, r1
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2250      	movs	r2, #80	@ 0x50
 8008c18:	5a9b      	ldrh	r3, [r3, r2]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	001a      	movs	r2, r3
 8008c1e:	187b      	adds	r3, r7, r1
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	189b      	adds	r3, r3, r2
 8008c24:	187a      	adds	r2, r7, r1
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	00da      	lsls	r2, r3, #3
 8008c2e:	187b      	adds	r3, r7, r1
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	18d3      	adds	r3, r2, r3
 8008c34:	4a85      	ldr	r2, [pc, #532]	@ (8008e4c <USB_EPStartXfer+0xf20>)
 8008c36:	4694      	mov	ip, r2
 8008c38:	4463      	add	r3, ip
 8008c3a:	21b0      	movs	r1, #176	@ 0xb0
 8008c3c:	187a      	adds	r2, r7, r1
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	187b      	adds	r3, r7, r1
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	22a4      	movs	r2, #164	@ 0xa4
 8008c50:	18ba      	adds	r2, r7, r2
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	785b      	ldrb	r3, [r3, #1]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d000      	beq.n	8008c5e <USB_EPStartXfer+0xd32>
 8008c5c:	e07b      	b.n	8008d56 <USB_EPStartXfer+0xe2a>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	219c      	movs	r1, #156	@ 0x9c
 8008c62:	187a      	adds	r2, r7, r1
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2250      	movs	r2, #80	@ 0x50
 8008c6a:	5a9b      	ldrh	r3, [r3, r2]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	001a      	movs	r2, r3
 8008c70:	187b      	adds	r3, r7, r1
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	189b      	adds	r3, r3, r2
 8008c76:	187a      	adds	r2, r7, r1
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	00da      	lsls	r2, r3, #3
 8008c80:	187b      	adds	r3, r7, r1
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	18d3      	adds	r3, r2, r3
 8008c86:	4a72      	ldr	r2, [pc, #456]	@ (8008e50 <USB_EPStartXfer+0xf24>)
 8008c88:	4694      	mov	ip, r2
 8008c8a:	4463      	add	r3, ip
 8008c8c:	2198      	movs	r1, #152	@ 0x98
 8008c8e:	187a      	adds	r2, r7, r1
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	187b      	adds	r3, r7, r1
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	059b      	lsls	r3, r3, #22
 8008c9c:	0d9b      	lsrs	r3, r3, #22
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	187b      	adds	r3, r7, r1
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <USB_EPStartXfer+0xd98>
 8008cae:	187b      	adds	r3, r7, r1
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	4a64      	ldr	r2, [pc, #400]	@ (8008e48 <USB_EPStartXfer+0xf1c>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	187b      	adds	r3, r7, r1
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	801a      	strh	r2, [r3, #0]
 8008cc2:	e069      	b.n	8008d98 <USB_EPStartXfer+0xe6c>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cca:	d820      	bhi.n	8008d0e <USB_EPStartXfer+0xde2>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	085b      	lsrs	r3, r3, #1
 8008cd2:	21e0      	movs	r1, #224	@ 0xe0
 8008cd4:	187a      	adds	r2, r7, r1
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	4013      	ands	r3, r2
 8008ce0:	d004      	beq.n	8008cec <USB_EPStartXfer+0xdc0>
 8008ce2:	187b      	adds	r3, r7, r1
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	187a      	adds	r2, r7, r1
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	2198      	movs	r1, #152	@ 0x98
 8008cee:	187b      	adds	r3, r7, r1
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	23e0      	movs	r3, #224	@ 0xe0
 8008cf8:	18fb      	adds	r3, r7, r3
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	029b      	lsls	r3, r3, #10
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	187b      	adds	r3, r7, r1
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	e044      	b.n	8008d98 <USB_EPStartXfer+0xe6c>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	21e0      	movs	r1, #224	@ 0xe0
 8008d16:	187a      	adds	r2, r7, r1
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	221f      	movs	r2, #31
 8008d20:	4013      	ands	r3, r2
 8008d22:	d104      	bne.n	8008d2e <USB_EPStartXfer+0xe02>
 8008d24:	187b      	adds	r3, r7, r1
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	187a      	adds	r2, r7, r1
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	2198      	movs	r1, #152	@ 0x98
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	23e0      	movs	r3, #224	@ 0xe0
 8008d3a:	18fb      	adds	r3, r7, r3
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	029b      	lsls	r3, r3, #10
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	4313      	orrs	r3, r2
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	4a3f      	ldr	r2, [pc, #252]	@ (8008e48 <USB_EPStartXfer+0xf1c>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	187b      	adds	r3, r7, r1
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	801a      	strh	r2, [r3, #0]
 8008d54:	e020      	b.n	8008d98 <USB_EPStartXfer+0xe6c>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d11c      	bne.n	8008d98 <USB_EPStartXfer+0xe6c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2250      	movs	r2, #80	@ 0x50
 8008d62:	5a9b      	ldrh	r3, [r3, r2]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	001a      	movs	r2, r3
 8008d68:	21a4      	movs	r1, #164	@ 0xa4
 8008d6a:	187b      	adds	r3, r7, r1
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	189b      	adds	r3, r3, r2
 8008d70:	187a      	adds	r2, r7, r1
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	00da      	lsls	r2, r3, #3
 8008d7a:	187b      	adds	r3, r7, r1
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	18d3      	adds	r3, r2, r3
 8008d80:	4a33      	ldr	r2, [pc, #204]	@ (8008e50 <USB_EPStartXfer+0xf24>)
 8008d82:	4694      	mov	ip, r2
 8008d84:	4463      	add	r3, ip
 8008d86:	21a0      	movs	r1, #160	@ 0xa0
 8008d88:	187a      	adds	r2, r7, r1
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	187b      	adds	r3, r7, r1
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d100      	bne.n	8008da2 <USB_EPStartXfer+0xe76>
 8008da0:	e1c0      	b.n	8009124 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	18d2      	adds	r2, r2, r3
 8008dac:	2196      	movs	r1, #150	@ 0x96
 8008dae:	187b      	adds	r3, r7, r1
 8008db0:	8812      	ldrh	r2, [r2, #0]
 8008db2:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008db4:	187b      	adds	r3, r7, r1
 8008db6:	881a      	ldrh	r2, [r3, #0]
 8008db8:	2380      	movs	r3, #128	@ 0x80
 8008dba:	01db      	lsls	r3, r3, #7
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	d004      	beq.n	8008dca <USB_EPStartXfer+0xe9e>
 8008dc0:	187b      	adds	r3, r7, r1
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	2240      	movs	r2, #64	@ 0x40
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	d10d      	bne.n	8008de6 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008dca:	2196      	movs	r1, #150	@ 0x96
 8008dcc:	187b      	adds	r3, r7, r1
 8008dce:	881a      	ldrh	r2, [r3, #0]
 8008dd0:	2380      	movs	r3, #128	@ 0x80
 8008dd2:	01db      	lsls	r3, r3, #7
 8008dd4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008dd6:	d000      	beq.n	8008dda <USB_EPStartXfer+0xeae>
 8008dd8:	e1a4      	b.n	8009124 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008dda:	187b      	adds	r3, r7, r1
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	2240      	movs	r2, #64	@ 0x40
 8008de0:	4013      	ands	r3, r2
 8008de2:	d000      	beq.n	8008de6 <USB_EPStartXfer+0xeba>
 8008de4:	e19e      	b.n	8009124 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	18d3      	adds	r3, r2, r3
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	2094      	movs	r0, #148	@ 0x94
 8008df6:	183b      	adds	r3, r7, r0
 8008df8:	4916      	ldr	r1, [pc, #88]	@ (8008e54 <USB_EPStartXfer+0xf28>)
 8008dfa:	400a      	ands	r2, r1
 8008dfc:	801a      	strh	r2, [r3, #0]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	18d3      	adds	r3, r2, r3
 8008e08:	183a      	adds	r2, r7, r0
 8008e0a:	8812      	ldrh	r2, [r2, #0]
 8008e0c:	4912      	ldr	r1, [pc, #72]	@ (8008e58 <USB_EPStartXfer+0xf2c>)
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	b292      	uxth	r2, r2
 8008e12:	801a      	strh	r2, [r3, #0]
 8008e14:	e186      	b.n	8009124 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	78db      	ldrb	r3, [r3, #3]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d000      	beq.n	8008e20 <USB_EPStartXfer+0xef4>
 8008e1e:	e17f      	b.n	8009120 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	699a      	ldr	r2, [r3, #24]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d917      	bls.n	8008e5c <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	1d7a      	adds	r2, r7, #5
 8008e32:	32ff      	adds	r2, #255	@ 0xff
 8008e34:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	699a      	ldr	r2, [r3, #24]
 8008e3a:	1d7b      	adds	r3, r7, #5
 8008e3c:	33ff      	adds	r3, #255	@ 0xff
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	1ad2      	subs	r2, r2, r3
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	619a      	str	r2, [r3, #24]
 8008e46:	e011      	b.n	8008e6c <USB_EPStartXfer+0xf40>
 8008e48:	ffff8000 	.word	0xffff8000
 8008e4c:	00000402 	.word	0x00000402
 8008e50:	00000406 	.word	0x00000406
 8008e54:	ffff8f8f 	.word	0xffff8f8f
 8008e58:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	1d7a      	adds	r2, r7, #5
 8008e62:	32ff      	adds	r2, #255	@ 0xff
 8008e64:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	785b      	ldrb	r3, [r3, #1]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d000      	beq.n	8008e76 <USB_EPStartXfer+0xf4a>
 8008e74:	e081      	b.n	8008f7a <USB_EPStartXfer+0x104e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	21cc      	movs	r1, #204	@ 0xcc
 8008e7a:	187a      	adds	r2, r7, r1
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2250      	movs	r2, #80	@ 0x50
 8008e82:	5a9b      	ldrh	r3, [r3, r2]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	001a      	movs	r2, r3
 8008e88:	187b      	adds	r3, r7, r1
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	189b      	adds	r3, r3, r2
 8008e8e:	187a      	adds	r2, r7, r1
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	00da      	lsls	r2, r3, #3
 8008e98:	187b      	adds	r3, r7, r1
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	18d3      	adds	r3, r2, r3
 8008e9e:	4ab6      	ldr	r2, [pc, #728]	@ (8009178 <USB_EPStartXfer+0x124c>)
 8008ea0:	4694      	mov	ip, r2
 8008ea2:	4463      	add	r3, ip
 8008ea4:	21c8      	movs	r1, #200	@ 0xc8
 8008ea6:	187a      	adds	r2, r7, r1
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	187b      	adds	r3, r7, r1
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	059b      	lsls	r3, r3, #22
 8008eb4:	0d9b      	lsrs	r3, r3, #22
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	187b      	adds	r3, r7, r1
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	1d7b      	adds	r3, r7, #5
 8008ec0:	33ff      	adds	r3, #255	@ 0xff
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <USB_EPStartXfer+0xfb2>
 8008ec8:	187b      	adds	r3, r7, r1
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	4aaa      	ldr	r2, [pc, #680]	@ (800917c <USB_EPStartXfer+0x1250>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	187b      	adds	r3, r7, r1
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	801a      	strh	r2, [r3, #0]
 8008edc:	e072      	b.n	8008fc4 <USB_EPStartXfer+0x1098>
 8008ede:	1d7b      	adds	r3, r7, #5
 8008ee0:	33ff      	adds	r3, #255	@ 0xff
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ee6:	d822      	bhi.n	8008f2e <USB_EPStartXfer+0x1002>
 8008ee8:	1d7b      	adds	r3, r7, #5
 8008eea:	33ff      	adds	r3, #255	@ 0xff
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	21dc      	movs	r1, #220	@ 0xdc
 8008ef2:	187a      	adds	r2, r7, r1
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	1d7b      	adds	r3, r7, #5
 8008ef8:	33ff      	adds	r3, #255	@ 0xff
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2201      	movs	r2, #1
 8008efe:	4013      	ands	r3, r2
 8008f00:	d004      	beq.n	8008f0c <USB_EPStartXfer+0xfe0>
 8008f02:	187b      	adds	r3, r7, r1
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3301      	adds	r3, #1
 8008f08:	187a      	adds	r2, r7, r1
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	21c8      	movs	r1, #200	@ 0xc8
 8008f0e:	187b      	adds	r3, r7, r1
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	23dc      	movs	r3, #220	@ 0xdc
 8008f18:	18fb      	adds	r3, r7, r3
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	029b      	lsls	r3, r3, #10
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	4313      	orrs	r3, r2
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	187b      	adds	r3, r7, r1
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	801a      	strh	r2, [r3, #0]
 8008f2c:	e04a      	b.n	8008fc4 <USB_EPStartXfer+0x1098>
 8008f2e:	1d7b      	adds	r3, r7, #5
 8008f30:	33ff      	adds	r3, #255	@ 0xff
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	21dc      	movs	r1, #220	@ 0xdc
 8008f38:	187a      	adds	r2, r7, r1
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	1d7b      	adds	r3, r7, #5
 8008f3e:	33ff      	adds	r3, #255	@ 0xff
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	221f      	movs	r2, #31
 8008f44:	4013      	ands	r3, r2
 8008f46:	d104      	bne.n	8008f52 <USB_EPStartXfer+0x1026>
 8008f48:	187b      	adds	r3, r7, r1
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	187a      	adds	r2, r7, r1
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	21c8      	movs	r1, #200	@ 0xc8
 8008f54:	187b      	adds	r3, r7, r1
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	23dc      	movs	r3, #220	@ 0xdc
 8008f5e:	18fb      	adds	r3, r7, r3
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	029b      	lsls	r3, r3, #10
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4a83      	ldr	r2, [pc, #524]	@ (800917c <USB_EPStartXfer+0x1250>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	187b      	adds	r3, r7, r1
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	801a      	strh	r2, [r3, #0]
 8008f78:	e024      	b.n	8008fc4 <USB_EPStartXfer+0x1098>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d120      	bne.n	8008fc4 <USB_EPStartXfer+0x1098>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	21d4      	movs	r1, #212	@ 0xd4
 8008f86:	187a      	adds	r2, r7, r1
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2250      	movs	r2, #80	@ 0x50
 8008f8e:	5a9b      	ldrh	r3, [r3, r2]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	001a      	movs	r2, r3
 8008f94:	187b      	adds	r3, r7, r1
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	189b      	adds	r3, r3, r2
 8008f9a:	187a      	adds	r2, r7, r1
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	00da      	lsls	r2, r3, #3
 8008fa4:	187b      	adds	r3, r7, r1
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	18d3      	adds	r3, r2, r3
 8008faa:	4a73      	ldr	r2, [pc, #460]	@ (8009178 <USB_EPStartXfer+0x124c>)
 8008fac:	4694      	mov	ip, r2
 8008fae:	4463      	add	r3, ip
 8008fb0:	21d0      	movs	r1, #208	@ 0xd0
 8008fb2:	187a      	adds	r2, r7, r1
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	1d7b      	adds	r3, r7, #5
 8008fb8:	33ff      	adds	r3, #255	@ 0xff
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	187b      	adds	r3, r7, r1
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	801a      	strh	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	22c4      	movs	r2, #196	@ 0xc4
 8008fc8:	18ba      	adds	r2, r7, r2
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	785b      	ldrb	r3, [r3, #1]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d000      	beq.n	8008fd6 <USB_EPStartXfer+0x10aa>
 8008fd4:	e081      	b.n	80090da <USB_EPStartXfer+0x11ae>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	21bc      	movs	r1, #188	@ 0xbc
 8008fda:	187a      	adds	r2, r7, r1
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2250      	movs	r2, #80	@ 0x50
 8008fe2:	5a9b      	ldrh	r3, [r3, r2]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	001a      	movs	r2, r3
 8008fe8:	187b      	adds	r3, r7, r1
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	189b      	adds	r3, r3, r2
 8008fee:	187a      	adds	r2, r7, r1
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	00da      	lsls	r2, r3, #3
 8008ff8:	187b      	adds	r3, r7, r1
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	18d3      	adds	r3, r2, r3
 8008ffe:	4a60      	ldr	r2, [pc, #384]	@ (8009180 <USB_EPStartXfer+0x1254>)
 8009000:	4694      	mov	ip, r2
 8009002:	4463      	add	r3, ip
 8009004:	21b8      	movs	r1, #184	@ 0xb8
 8009006:	187a      	adds	r2, r7, r1
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	187b      	adds	r3, r7, r1
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	059b      	lsls	r3, r3, #22
 8009014:	0d9b      	lsrs	r3, r3, #22
 8009016:	b29a      	uxth	r2, r3
 8009018:	187b      	adds	r3, r7, r1
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	801a      	strh	r2, [r3, #0]
 800901e:	1d7b      	adds	r3, r7, #5
 8009020:	33ff      	adds	r3, #255	@ 0xff
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10a      	bne.n	800903e <USB_EPStartXfer+0x1112>
 8009028:	187b      	adds	r3, r7, r1
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	b29b      	uxth	r3, r3
 8009030:	4a52      	ldr	r2, [pc, #328]	@ (800917c <USB_EPStartXfer+0x1250>)
 8009032:	4313      	orrs	r3, r2
 8009034:	b29a      	uxth	r2, r3
 8009036:	187b      	adds	r3, r7, r1
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	801a      	strh	r2, [r3, #0]
 800903c:	e072      	b.n	8009124 <USB_EPStartXfer+0x11f8>
 800903e:	1d7b      	adds	r3, r7, #5
 8009040:	33ff      	adds	r3, #255	@ 0xff
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b3e      	cmp	r3, #62	@ 0x3e
 8009046:	d822      	bhi.n	800908e <USB_EPStartXfer+0x1162>
 8009048:	1d7b      	adds	r3, r7, #5
 800904a:	33ff      	adds	r3, #255	@ 0xff
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	085b      	lsrs	r3, r3, #1
 8009050:	21d8      	movs	r1, #216	@ 0xd8
 8009052:	187a      	adds	r2, r7, r1
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	1d7b      	adds	r3, r7, #5
 8009058:	33ff      	adds	r3, #255	@ 0xff
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2201      	movs	r2, #1
 800905e:	4013      	ands	r3, r2
 8009060:	d004      	beq.n	800906c <USB_EPStartXfer+0x1140>
 8009062:	187b      	adds	r3, r7, r1
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3301      	adds	r3, #1
 8009068:	187a      	adds	r2, r7, r1
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	21b8      	movs	r1, #184	@ 0xb8
 800906e:	187b      	adds	r3, r7, r1
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29a      	uxth	r2, r3
 8009076:	23d8      	movs	r3, #216	@ 0xd8
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	029b      	lsls	r3, r3, #10
 8009080:	b29b      	uxth	r3, r3
 8009082:	4313      	orrs	r3, r2
 8009084:	b29a      	uxth	r2, r3
 8009086:	187b      	adds	r3, r7, r1
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	e04a      	b.n	8009124 <USB_EPStartXfer+0x11f8>
 800908e:	1d7b      	adds	r3, r7, #5
 8009090:	33ff      	adds	r3, #255	@ 0xff
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	21d8      	movs	r1, #216	@ 0xd8
 8009098:	187a      	adds	r2, r7, r1
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	1d7b      	adds	r3, r7, #5
 800909e:	33ff      	adds	r3, #255	@ 0xff
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	221f      	movs	r2, #31
 80090a4:	4013      	ands	r3, r2
 80090a6:	d104      	bne.n	80090b2 <USB_EPStartXfer+0x1186>
 80090a8:	187b      	adds	r3, r7, r1
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	187a      	adds	r2, r7, r1
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	21b8      	movs	r1, #184	@ 0xb8
 80090b4:	187b      	adds	r3, r7, r1
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	23d8      	movs	r3, #216	@ 0xd8
 80090be:	18fb      	adds	r3, r7, r3
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	029b      	lsls	r3, r3, #10
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	4313      	orrs	r3, r2
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	4a2b      	ldr	r2, [pc, #172]	@ (800917c <USB_EPStartXfer+0x1250>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	187b      	adds	r3, r7, r1
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	e024      	b.n	8009124 <USB_EPStartXfer+0x11f8>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d120      	bne.n	8009124 <USB_EPStartXfer+0x11f8>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2250      	movs	r2, #80	@ 0x50
 80090e6:	5a9b      	ldrh	r3, [r3, r2]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	001a      	movs	r2, r3
 80090ec:	21c4      	movs	r1, #196	@ 0xc4
 80090ee:	187b      	adds	r3, r7, r1
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	189b      	adds	r3, r3, r2
 80090f4:	187a      	adds	r2, r7, r1
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	00da      	lsls	r2, r3, #3
 80090fe:	187b      	adds	r3, r7, r1
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	18d3      	adds	r3, r2, r3
 8009104:	4a1e      	ldr	r2, [pc, #120]	@ (8009180 <USB_EPStartXfer+0x1254>)
 8009106:	4694      	mov	ip, r2
 8009108:	4463      	add	r3, ip
 800910a:	21c0      	movs	r1, #192	@ 0xc0
 800910c:	187a      	adds	r2, r7, r1
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	1d7b      	adds	r3, r7, #5
 8009112:	33ff      	adds	r3, #255	@ 0xff
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	b29a      	uxth	r2, r3
 8009118:	187b      	adds	r3, r7, r1
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	801a      	strh	r2, [r3, #0]
 800911e:	e001      	b.n	8009124 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e025      	b.n	8009170 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	18d3      	adds	r3, r2, r3
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	b29a      	uxth	r2, r3
 8009132:	208a      	movs	r0, #138	@ 0x8a
 8009134:	183b      	adds	r3, r7, r0
 8009136:	4913      	ldr	r1, [pc, #76]	@ (8009184 <USB_EPStartXfer+0x1258>)
 8009138:	400a      	ands	r2, r1
 800913a:	801a      	strh	r2, [r3, #0]
 800913c:	183b      	adds	r3, r7, r0
 800913e:	183a      	adds	r2, r7, r0
 8009140:	8812      	ldrh	r2, [r2, #0]
 8009142:	2180      	movs	r1, #128	@ 0x80
 8009144:	0149      	lsls	r1, r1, #5
 8009146:	404a      	eors	r2, r1
 8009148:	801a      	strh	r2, [r3, #0]
 800914a:	183b      	adds	r3, r7, r0
 800914c:	183a      	adds	r2, r7, r0
 800914e:	8812      	ldrh	r2, [r2, #0]
 8009150:	2180      	movs	r1, #128	@ 0x80
 8009152:	0189      	lsls	r1, r1, #6
 8009154:	404a      	eors	r2, r1
 8009156:	801a      	strh	r2, [r3, #0]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	18d3      	adds	r3, r2, r3
 8009162:	183a      	adds	r2, r7, r0
 8009164:	8812      	ldrh	r2, [r2, #0]
 8009166:	4908      	ldr	r1, [pc, #32]	@ (8009188 <USB_EPStartXfer+0x125c>)
 8009168:	430a      	orrs	r2, r1
 800916a:	b292      	uxth	r2, r2
 800916c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	0018      	movs	r0, r3
 8009172:	46bd      	mov	sp, r7
 8009174:	b043      	add	sp, #268	@ 0x10c
 8009176:	bd90      	pop	{r4, r7, pc}
 8009178:	00000402 	.word	0x00000402
 800917c:	ffff8000 	.word	0xffff8000
 8009180:	00000406 	.word	0x00000406
 8009184:	ffffbf8f 	.word	0xffffbf8f
 8009188:	ffff8080 	.word	0xffff8080

0800918c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01d      	beq.n	80091da <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	18d3      	adds	r3, r2, r3
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	200c      	movs	r0, #12
 80091ae:	183b      	adds	r3, r7, r0
 80091b0:	491b      	ldr	r1, [pc, #108]	@ (8009220 <USB_EPSetStall+0x94>)
 80091b2:	400a      	ands	r2, r1
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	183b      	adds	r3, r7, r0
 80091b8:	183a      	adds	r2, r7, r0
 80091ba:	8812      	ldrh	r2, [r2, #0]
 80091bc:	2110      	movs	r1, #16
 80091be:	404a      	eors	r2, r1
 80091c0:	801a      	strh	r2, [r3, #0]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	18d3      	adds	r3, r2, r3
 80091cc:	183a      	adds	r2, r7, r0
 80091ce:	8812      	ldrh	r2, [r2, #0]
 80091d0:	4914      	ldr	r1, [pc, #80]	@ (8009224 <USB_EPSetStall+0x98>)
 80091d2:	430a      	orrs	r2, r1
 80091d4:	b292      	uxth	r2, r2
 80091d6:	801a      	strh	r2, [r3, #0]
 80091d8:	e01d      	b.n	8009216 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	18d3      	adds	r3, r2, r3
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	200e      	movs	r0, #14
 80091ea:	183b      	adds	r3, r7, r0
 80091ec:	490e      	ldr	r1, [pc, #56]	@ (8009228 <USB_EPSetStall+0x9c>)
 80091ee:	400a      	ands	r2, r1
 80091f0:	801a      	strh	r2, [r3, #0]
 80091f2:	183b      	adds	r3, r7, r0
 80091f4:	183a      	adds	r2, r7, r0
 80091f6:	8812      	ldrh	r2, [r2, #0]
 80091f8:	2180      	movs	r1, #128	@ 0x80
 80091fa:	0149      	lsls	r1, r1, #5
 80091fc:	404a      	eors	r2, r1
 80091fe:	801a      	strh	r2, [r3, #0]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	18d3      	adds	r3, r2, r3
 800920a:	183a      	adds	r2, r7, r0
 800920c:	8812      	ldrh	r2, [r2, #0]
 800920e:	4905      	ldr	r1, [pc, #20]	@ (8009224 <USB_EPSetStall+0x98>)
 8009210:	430a      	orrs	r2, r1
 8009212:	b292      	uxth	r2, r2
 8009214:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	0018      	movs	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	b004      	add	sp, #16
 800921e:	bd80      	pop	{r7, pc}
 8009220:	ffff8fbf 	.word	0xffff8fbf
 8009224:	ffff8080 	.word	0xffff8080
 8009228:	ffffbf8f 	.word	0xffffbf8f

0800922c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	7b1b      	ldrb	r3, [r3, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d000      	beq.n	8009240 <USB_EPClearStall+0x14>
 800923e:	e095      	b.n	800936c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d046      	beq.n	80092d6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	18d2      	adds	r2, r2, r3
 8009252:	2110      	movs	r1, #16
 8009254:	187b      	adds	r3, r7, r1
 8009256:	8812      	ldrh	r2, [r2, #0]
 8009258:	801a      	strh	r2, [r3, #0]
 800925a:	187b      	adds	r3, r7, r1
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	2240      	movs	r2, #64	@ 0x40
 8009260:	4013      	ands	r3, r2
 8009262:	d016      	beq.n	8009292 <USB_EPClearStall+0x66>
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	18d3      	adds	r3, r2, r3
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29a      	uxth	r2, r3
 8009272:	200e      	movs	r0, #14
 8009274:	183b      	adds	r3, r7, r0
 8009276:	4940      	ldr	r1, [pc, #256]	@ (8009378 <USB_EPClearStall+0x14c>)
 8009278:	400a      	ands	r2, r1
 800927a:	801a      	strh	r2, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	18d3      	adds	r3, r2, r3
 8009286:	183a      	adds	r2, r7, r0
 8009288:	8812      	ldrh	r2, [r2, #0]
 800928a:	493c      	ldr	r1, [pc, #240]	@ (800937c <USB_EPClearStall+0x150>)
 800928c:	430a      	orrs	r2, r1
 800928e:	b292      	uxth	r2, r2
 8009290:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	78db      	ldrb	r3, [r3, #3]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d068      	beq.n	800936c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	18d3      	adds	r3, r2, r3
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	200c      	movs	r0, #12
 80092aa:	183b      	adds	r3, r7, r0
 80092ac:	4934      	ldr	r1, [pc, #208]	@ (8009380 <USB_EPClearStall+0x154>)
 80092ae:	400a      	ands	r2, r1
 80092b0:	801a      	strh	r2, [r3, #0]
 80092b2:	183b      	adds	r3, r7, r0
 80092b4:	183a      	adds	r2, r7, r0
 80092b6:	8812      	ldrh	r2, [r2, #0]
 80092b8:	2120      	movs	r1, #32
 80092ba:	404a      	eors	r2, r1
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	18d3      	adds	r3, r2, r3
 80092c8:	183a      	adds	r2, r7, r0
 80092ca:	8812      	ldrh	r2, [r2, #0]
 80092cc:	492d      	ldr	r1, [pc, #180]	@ (8009384 <USB_EPClearStall+0x158>)
 80092ce:	430a      	orrs	r2, r1
 80092d0:	b292      	uxth	r2, r2
 80092d2:	801a      	strh	r2, [r3, #0]
 80092d4:	e04a      	b.n	800936c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	18d2      	adds	r2, r2, r3
 80092e0:	2116      	movs	r1, #22
 80092e2:	187b      	adds	r3, r7, r1
 80092e4:	8812      	ldrh	r2, [r2, #0]
 80092e6:	801a      	strh	r2, [r3, #0]
 80092e8:	187b      	adds	r3, r7, r1
 80092ea:	881a      	ldrh	r2, [r3, #0]
 80092ec:	2380      	movs	r3, #128	@ 0x80
 80092ee:	01db      	lsls	r3, r3, #7
 80092f0:	4013      	ands	r3, r2
 80092f2:	d016      	beq.n	8009322 <USB_EPClearStall+0xf6>
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	18d3      	adds	r3, r2, r3
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	b29a      	uxth	r2, r3
 8009302:	2014      	movs	r0, #20
 8009304:	183b      	adds	r3, r7, r0
 8009306:	491c      	ldr	r1, [pc, #112]	@ (8009378 <USB_EPClearStall+0x14c>)
 8009308:	400a      	ands	r2, r1
 800930a:	801a      	strh	r2, [r3, #0]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	18d3      	adds	r3, r2, r3
 8009316:	183a      	adds	r2, r7, r0
 8009318:	8812      	ldrh	r2, [r2, #0]
 800931a:	491b      	ldr	r1, [pc, #108]	@ (8009388 <USB_EPClearStall+0x15c>)
 800931c:	430a      	orrs	r2, r1
 800931e:	b292      	uxth	r2, r2
 8009320:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	18d3      	adds	r3, r2, r3
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	b29a      	uxth	r2, r3
 8009330:	2012      	movs	r0, #18
 8009332:	183b      	adds	r3, r7, r0
 8009334:	4915      	ldr	r1, [pc, #84]	@ (800938c <USB_EPClearStall+0x160>)
 8009336:	400a      	ands	r2, r1
 8009338:	801a      	strh	r2, [r3, #0]
 800933a:	183b      	adds	r3, r7, r0
 800933c:	183a      	adds	r2, r7, r0
 800933e:	8812      	ldrh	r2, [r2, #0]
 8009340:	2180      	movs	r1, #128	@ 0x80
 8009342:	0149      	lsls	r1, r1, #5
 8009344:	404a      	eors	r2, r1
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	183b      	adds	r3, r7, r0
 800934a:	183a      	adds	r2, r7, r0
 800934c:	8812      	ldrh	r2, [r2, #0]
 800934e:	2180      	movs	r1, #128	@ 0x80
 8009350:	0189      	lsls	r1, r1, #6
 8009352:	404a      	eors	r2, r1
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	18d3      	adds	r3, r2, r3
 8009360:	183a      	adds	r2, r7, r0
 8009362:	8812      	ldrh	r2, [r2, #0]
 8009364:	4907      	ldr	r1, [pc, #28]	@ (8009384 <USB_EPClearStall+0x158>)
 8009366:	430a      	orrs	r2, r1
 8009368:	b292      	uxth	r2, r2
 800936a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	0018      	movs	r0, r3
 8009370:	46bd      	mov	sp, r7
 8009372:	b006      	add	sp, #24
 8009374:	bd80      	pop	{r7, pc}
 8009376:	46c0      	nop			@ (mov r8, r8)
 8009378:	ffff8f8f 	.word	0xffff8f8f
 800937c:	ffff80c0 	.word	0xffff80c0
 8009380:	ffff8fbf 	.word	0xffff8fbf
 8009384:	ffff8080 	.word	0xffff8080
 8009388:	ffffc080 	.word	0xffffc080
 800938c:	ffffbf8f 	.word	0xffffbf8f

08009390 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	000a      	movs	r2, r1
 800939a:	1cfb      	adds	r3, r7, #3
 800939c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800939e:	1cfb      	adds	r3, r7, #3
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d103      	bne.n	80093ae <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	224c      	movs	r2, #76	@ 0x4c
 80093aa:	2180      	movs	r1, #128	@ 0x80
 80093ac:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	0018      	movs	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	b002      	add	sp, #8
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2258      	movs	r2, #88	@ 0x58
 80093c4:	5a9b      	ldrh	r3, [r3, r2]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	4a05      	ldr	r2, [pc, #20]	@ (80093e0 <USB_DevConnect+0x28>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	b299      	uxth	r1, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2258      	movs	r2, #88	@ 0x58
 80093d2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	0018      	movs	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	b002      	add	sp, #8
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	46c0      	nop			@ (mov r8, r8)
 80093e0:	ffff8000 	.word	0xffff8000

080093e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2244      	movs	r2, #68	@ 0x44
 80093f0:	5a9b      	ldrh	r3, [r3, r2]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80093f6:	68fb      	ldr	r3, [r7, #12]
}
 80093f8:	0018      	movs	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	b004      	add	sp, #16
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08a      	sub	sp, #40	@ 0x28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	0019      	movs	r1, r3
 800940c:	1dbb      	adds	r3, r7, #6
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	1d3b      	adds	r3, r7, #4
 8009412:	1c0a      	adds	r2, r1, #0
 8009414:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009416:	1d3b      	adds	r3, r7, #4
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009428:	1dbb      	adds	r3, r7, #6
 800942a:	881a      	ldrh	r2, [r3, #0]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	18d3      	adds	r3, r2, r3
 8009430:	2280      	movs	r2, #128	@ 0x80
 8009432:	00d2      	lsls	r2, r2, #3
 8009434:	4694      	mov	ip, r2
 8009436:	4463      	add	r3, ip
 8009438:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	627b      	str	r3, [r7, #36]	@ 0x24
 800943e:	e021      	b.n	8009484 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	781a      	ldrb	r2, [r3, #0]
 8009444:	2112      	movs	r1, #18
 8009446:	187b      	adds	r3, r7, r1
 8009448:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	3301      	adds	r3, #1
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b21b      	sxth	r3, r3
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	b21a      	sxth	r2, r3
 8009456:	187b      	adds	r3, r7, r1
 8009458:	2000      	movs	r0, #0
 800945a:	5e1b      	ldrsh	r3, [r3, r0]
 800945c:	4313      	orrs	r3, r2
 800945e:	b21a      	sxth	r2, r3
 8009460:	187b      	adds	r3, r7, r1
 8009462:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	187a      	adds	r2, r7, r1
 8009468:	8812      	ldrh	r2, [r2, #0]
 800946a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	3302      	adds	r3, #2
 8009470:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	3301      	adds	r3, #1
 8009476:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	3301      	adds	r3, #1
 800947c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800947e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009480:	3b01      	subs	r3, #1
 8009482:	627b      	str	r3, [r7, #36]	@ 0x24
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1da      	bne.n	8009440 <USB_WritePMA+0x40>
  }
}
 800948a:	46c0      	nop			@ (mov r8, r8)
 800948c:	46c0      	nop			@ (mov r8, r8)
 800948e:	46bd      	mov	sp, r7
 8009490:	b00a      	add	sp, #40	@ 0x28
 8009492:	bd80      	pop	{r7, pc}

08009494 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b08a      	sub	sp, #40	@ 0x28
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	0019      	movs	r1, r3
 80094a0:	1dbb      	adds	r3, r7, #6
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	1d3b      	adds	r3, r7, #4
 80094a6:	1c0a      	adds	r2, r1, #0
 80094a8:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80094aa:	1d3b      	adds	r3, r7, #4
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80094bc:	1dbb      	adds	r3, r7, #6
 80094be:	881a      	ldrh	r2, [r3, #0]
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	18d3      	adds	r3, r2, r3
 80094c4:	2280      	movs	r2, #128	@ 0x80
 80094c6:	00d2      	lsls	r2, r2, #3
 80094c8:	4694      	mov	ip, r2
 80094ca:	4463      	add	r3, ip
 80094cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80094d2:	e018      	b.n	8009506 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	3302      	adds	r3, #2
 80094e0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	3301      	adds	r3, #1
 80094ee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	0a1b      	lsrs	r3, r3, #8
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	3301      	adds	r3, #1
 80094fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009502:	3b01      	subs	r3, #1
 8009504:	627b      	str	r3, [r7, #36]	@ 0x24
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e3      	bne.n	80094d4 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800950c:	1d3b      	adds	r3, r7, #4
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	2201      	movs	r2, #1
 8009512:	4013      	ands	r3, r2
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d007      	beq.n	800952a <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	b2da      	uxtb	r2, r3
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	701a      	strb	r2, [r3, #0]
  }
}
 800952a:	46c0      	nop			@ (mov r8, r8)
 800952c:	46bd      	mov	sp, r7
 800952e:	b00a      	add	sp, #40	@ 0x28
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	000a      	movs	r2, r1
 800953c:	1cfb      	adds	r3, r7, #3
 800953e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009540:	230f      	movs	r3, #15
 8009542:	18fb      	adds	r3, r7, r3
 8009544:	2200      	movs	r2, #0
 8009546:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	7c1b      	ldrb	r3, [r3, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d116      	bne.n	800957e <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009550:	2380      	movs	r3, #128	@ 0x80
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	2181      	movs	r1, #129	@ 0x81
 800955a:	f002 f88c 	bl	800b676 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009564:	2380      	movs	r3, #128	@ 0x80
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	2101      	movs	r1, #1
 800956e:	f002 f882 	bl	800b676 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	23b6      	movs	r3, #182	@ 0xb6
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	2101      	movs	r1, #1
 800957a:	50d1      	str	r1, [r2, r3]
 800957c:	e013      	b.n	80095a6 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	2340      	movs	r3, #64	@ 0x40
 8009582:	2202      	movs	r2, #2
 8009584:	2181      	movs	r1, #129	@ 0x81
 8009586:	f002 f876 	bl	800b676 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	2340      	movs	r3, #64	@ 0x40
 8009594:	2202      	movs	r2, #2
 8009596:	2101      	movs	r1, #1
 8009598:	f002 f86d 	bl	800b676 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	23b6      	movs	r3, #182	@ 0xb6
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	2101      	movs	r1, #1
 80095a4:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	2308      	movs	r3, #8
 80095aa:	2203      	movs	r2, #3
 80095ac:	2182      	movs	r1, #130	@ 0x82
 80095ae:	f002 f862 	bl	800b676 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80095b8:	2387      	movs	r3, #135	@ 0x87
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	0018      	movs	r0, r3
 80095be:	f002 f9f1 	bl	800b9a4 <USBD_static_malloc>
 80095c2:	0001      	movs	r1, r0
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	23ae      	movs	r3, #174	@ 0xae
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	23ae      	movs	r3, #174	@ 0xae
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	58d3      	ldr	r3, [r2, r3]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d104      	bne.n	80095e2 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80095d8:	230f      	movs	r3, #15
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
 80095e0:	e02c      	b.n	800963c <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	23ae      	movs	r3, #174	@ 0xae
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	58d3      	ldr	r3, [r2, r3]
 80095ea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	23af      	movs	r3, #175	@ 0xaf
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	58d3      	ldr	r3, [r2, r3]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	2385      	movs	r3, #133	@ 0x85
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	2100      	movs	r1, #0
 8009600:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	2386      	movs	r3, #134	@ 0x86
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	2100      	movs	r1, #0
 800960a:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7c1b      	ldrb	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	2381      	movs	r3, #129	@ 0x81
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	58d2      	ldr	r2, [r2, r3]
 800961c:	2380      	movs	r3, #128	@ 0x80
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	2101      	movs	r1, #1
 8009624:	f002 f971 	bl	800b90a <USBD_LL_PrepareReceive>
 8009628:	e008      	b.n	800963c <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	2381      	movs	r3, #129	@ 0x81
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	58d2      	ldr	r2, [r2, r3]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	2340      	movs	r3, #64	@ 0x40
 8009636:	2101      	movs	r1, #1
 8009638:	f002 f967 	bl	800b90a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800963c:	230f      	movs	r3, #15
 800963e:	18fb      	adds	r3, r7, r3
 8009640:	781b      	ldrb	r3, [r3, #0]
}
 8009642:	0018      	movs	r0, r3
 8009644:	46bd      	mov	sp, r7
 8009646:	b004      	add	sp, #16
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	000a      	movs	r2, r1
 8009654:	1cfb      	adds	r3, r7, #3
 8009656:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009658:	230f      	movs	r3, #15
 800965a:	18fb      	adds	r3, r7, r3
 800965c:	2200      	movs	r2, #0
 800965e:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2181      	movs	r1, #129	@ 0x81
 8009664:	0018      	movs	r0, r3
 8009666:	f002 f83d 	bl	800b6e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2101      	movs	r1, #1
 8009674:	0018      	movs	r0, r3
 8009676:	f002 f835 	bl	800b6e4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	23b6      	movs	r3, #182	@ 0xb6
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	2100      	movs	r1, #0
 8009682:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2182      	movs	r1, #130	@ 0x82
 8009688:	0018      	movs	r0, r3
 800968a:	f002 f82b 	bl	800b6e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	23ae      	movs	r3, #174	@ 0xae
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	58d3      	ldr	r3, [r2, r3]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d011      	beq.n	80096c4 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	23af      	movs	r3, #175	@ 0xaf
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	58d3      	ldr	r3, [r2, r3]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	23ae      	movs	r3, #174	@ 0xae
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	58d3      	ldr	r3, [r2, r3]
 80096b4:	0018      	movs	r0, r3
 80096b6:	f002 f981 	bl	800b9bc <USBD_static_free>
    pdev->pClassData = NULL;
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	23ae      	movs	r3, #174	@ 0xae
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	2100      	movs	r1, #0
 80096c2:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80096c4:	230f      	movs	r3, #15
 80096c6:	18fb      	adds	r3, r7, r3
 80096c8:	781b      	ldrb	r3, [r3, #0]
}
 80096ca:	0018      	movs	r0, r3
 80096cc:	46bd      	mov	sp, r7
 80096ce:	b004      	add	sp, #16
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	23ae      	movs	r3, #174	@ 0xae
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	58d3      	ldr	r3, [r2, r3]
 80096e6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80096e8:	230f      	movs	r3, #15
 80096ea:	18fb      	adds	r3, r7, r3
 80096ec:	2200      	movs	r2, #0
 80096ee:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80096f0:	230c      	movs	r3, #12
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	2200      	movs	r2, #0
 80096f6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80096f8:	2317      	movs	r3, #23
 80096fa:	18fb      	adds	r3, r7, r3
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	001a      	movs	r2, r3
 8009706:	2360      	movs	r3, #96	@ 0x60
 8009708:	4013      	ands	r3, r2
 800970a:	d03d      	beq.n	8009788 <USBD_CDC_Setup+0xb4>
 800970c:	2b20      	cmp	r3, #32
 800970e:	d000      	beq.n	8009712 <USBD_CDC_Setup+0x3e>
 8009710:	e094      	b.n	800983c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	88db      	ldrh	r3, [r3, #6]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d02b      	beq.n	8009772 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b25b      	sxtb	r3, r3
 8009720:	2b00      	cmp	r3, #0
 8009722:	da12      	bge.n	800974a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	23af      	movs	r3, #175	@ 0xaf
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	58d3      	ldr	r3, [r2, r3]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009732:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	88d2      	ldrh	r2, [r2, #6]
 8009738:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800973a:	6939      	ldr	r1, [r7, #16]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	88da      	ldrh	r2, [r3, #6]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	0018      	movs	r0, r3
 8009744:	f001 fbaf 	bl	800aea6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009748:	e083      	b.n	8009852 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	7859      	ldrb	r1, [r3, #1]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	2380      	movs	r3, #128	@ 0x80
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	88db      	ldrh	r3, [r3, #6]
 800975a:	b2d9      	uxtb	r1, r3
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	4a40      	ldr	r2, [pc, #256]	@ (8009860 <USBD_CDC_Setup+0x18c>)
 8009760:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009762:	6939      	ldr	r1, [r7, #16]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	88da      	ldrh	r2, [r3, #6]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	0018      	movs	r0, r3
 800976c:	f001 fbce 	bl	800af0c <USBD_CtlPrepareRx>
      break;
 8009770:	e06f      	b.n	8009852 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	23af      	movs	r3, #175	@ 0xaf
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	58d3      	ldr	r3, [r2, r3]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	7850      	ldrb	r0, [r2, #1]
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	2200      	movs	r2, #0
 8009784:	4798      	blx	r3
      break;
 8009786:	e064      	b.n	8009852 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	785b      	ldrb	r3, [r3, #1]
 800978c:	2b0b      	cmp	r3, #11
 800978e:	d037      	beq.n	8009800 <USBD_CDC_Setup+0x12c>
 8009790:	dc47      	bgt.n	8009822 <USBD_CDC_Setup+0x14e>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d002      	beq.n	800979c <USBD_CDC_Setup+0xc8>
 8009796:	2b0a      	cmp	r3, #10
 8009798:	d019      	beq.n	80097ce <USBD_CDC_Setup+0xfa>
 800979a:	e042      	b.n	8009822 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	23a7      	movs	r3, #167	@ 0xa7
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	5cd3      	ldrb	r3, [r2, r3]
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d107      	bne.n	80097b8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80097a8:	230c      	movs	r3, #12
 80097aa:	18f9      	adds	r1, r7, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	0018      	movs	r0, r3
 80097b2:	f001 fb78 	bl	800aea6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097b6:	e040      	b.n	800983a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	0011      	movs	r1, r2
 80097be:	0018      	movs	r0, r3
 80097c0:	f001 faf3 	bl	800adaa <USBD_CtlError>
            ret = USBD_FAIL;
 80097c4:	2317      	movs	r3, #23
 80097c6:	18fb      	adds	r3, r7, r3
 80097c8:	2202      	movs	r2, #2
 80097ca:	701a      	strb	r2, [r3, #0]
          break;
 80097cc:	e035      	b.n	800983a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	23a7      	movs	r3, #167	@ 0xa7
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	5cd3      	ldrb	r3, [r2, r3]
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d107      	bne.n	80097ea <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80097da:	230f      	movs	r3, #15
 80097dc:	18f9      	adds	r1, r7, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	0018      	movs	r0, r3
 80097e4:	f001 fb5f 	bl	800aea6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097e8:	e027      	b.n	800983a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	0011      	movs	r1, r2
 80097f0:	0018      	movs	r0, r3
 80097f2:	f001 fada 	bl	800adaa <USBD_CtlError>
            ret = USBD_FAIL;
 80097f6:	2317      	movs	r3, #23
 80097f8:	18fb      	adds	r3, r7, r3
 80097fa:	2202      	movs	r2, #2
 80097fc:	701a      	strb	r2, [r3, #0]
          break;
 80097fe:	e01c      	b.n	800983a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	23a7      	movs	r3, #167	@ 0xa7
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	5cd3      	ldrb	r3, [r2, r3]
 8009808:	2b03      	cmp	r3, #3
 800980a:	d015      	beq.n	8009838 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	0011      	movs	r1, r2
 8009812:	0018      	movs	r0, r3
 8009814:	f001 fac9 	bl	800adaa <USBD_CtlError>
            ret = USBD_FAIL;
 8009818:	2317      	movs	r3, #23
 800981a:	18fb      	adds	r3, r7, r3
 800981c:	2202      	movs	r2, #2
 800981e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8009820:	e00a      	b.n	8009838 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	0011      	movs	r1, r2
 8009828:	0018      	movs	r0, r3
 800982a:	f001 fabe 	bl	800adaa <USBD_CtlError>
          ret = USBD_FAIL;
 800982e:	2317      	movs	r3, #23
 8009830:	18fb      	adds	r3, r7, r3
 8009832:	2202      	movs	r2, #2
 8009834:	701a      	strb	r2, [r3, #0]
          break;
 8009836:	e000      	b.n	800983a <USBD_CDC_Setup+0x166>
          break;
 8009838:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800983a:	e00a      	b.n	8009852 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	0011      	movs	r1, r2
 8009842:	0018      	movs	r0, r3
 8009844:	f001 fab1 	bl	800adaa <USBD_CtlError>
      ret = USBD_FAIL;
 8009848:	2317      	movs	r3, #23
 800984a:	18fb      	adds	r3, r7, r3
 800984c:	2202      	movs	r2, #2
 800984e:	701a      	strb	r2, [r3, #0]
      break;
 8009850:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009852:	2317      	movs	r3, #23
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	781b      	ldrb	r3, [r3, #0]
}
 8009858:	0018      	movs	r0, r3
 800985a:	46bd      	mov	sp, r7
 800985c:	b006      	add	sp, #24
 800985e:	bd80      	pop	{r7, pc}
 8009860:	00000201 	.word	0x00000201

08009864 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	000a      	movs	r2, r1
 800986e:	1cfb      	adds	r3, r7, #3
 8009870:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	23ae      	movs	r3, #174	@ 0xae
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	58d3      	ldr	r3, [r2, r3]
 800987a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	23b0      	movs	r3, #176	@ 0xb0
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	58d3      	ldr	r3, [r2, r3]
 8009884:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	23ae      	movs	r3, #174	@ 0xae
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	58d3      	ldr	r3, [r2, r3]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d03e      	beq.n	8009910 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009892:	1cfb      	adds	r3, r7, #3
 8009894:	781a      	ldrb	r2, [r3, #0]
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	0013      	movs	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	189b      	adds	r3, r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	18cb      	adds	r3, r1, r3
 80098a2:	331c      	adds	r3, #28
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d02b      	beq.n	8009902 <USBD_CDC_DataIn+0x9e>
 80098aa:	1cfb      	adds	r3, r7, #3
 80098ac:	781a      	ldrb	r2, [r3, #0]
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	0013      	movs	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	189b      	adds	r3, r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	18cb      	adds	r3, r1, r3
 80098ba:	331c      	adds	r3, #28
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	1cfb      	adds	r3, r7, #3
 80098c0:	781a      	ldrb	r2, [r3, #0]
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	0013      	movs	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	189b      	adds	r3, r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	18cb      	adds	r3, r1, r3
 80098ce:	3320      	adds	r3, #32
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	0019      	movs	r1, r3
 80098d4:	f7f6 fca8 	bl	8000228 <__aeabi_uidivmod>
 80098d8:	1e0b      	subs	r3, r1, #0
 80098da:	d112      	bne.n	8009902 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80098dc:	1cfb      	adds	r3, r7, #3
 80098de:	781a      	ldrb	r2, [r3, #0]
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	0013      	movs	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	189b      	adds	r3, r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	18cb      	adds	r3, r1, r3
 80098ec:	331c      	adds	r3, #28
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80098f2:	1cfb      	adds	r3, r7, #3
 80098f4:	7819      	ldrb	r1, [r3, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	2300      	movs	r3, #0
 80098fa:	2200      	movs	r2, #0
 80098fc:	f001 ffce 	bl	800b89c <USBD_LL_Transmit>
 8009900:	e004      	b.n	800990c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	2385      	movs	r3, #133	@ 0x85
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	2100      	movs	r1, #0
 800990a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	e000      	b.n	8009912 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8009910:	2302      	movs	r3, #2
  }
}
 8009912:	0018      	movs	r0, r3
 8009914:	46bd      	mov	sp, r7
 8009916:	b004      	add	sp, #16
 8009918:	bd80      	pop	{r7, pc}

0800991a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	000a      	movs	r2, r1
 8009924:	1cfb      	adds	r3, r7, #3
 8009926:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	23ae      	movs	r3, #174	@ 0xae
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	58d3      	ldr	r3, [r2, r3]
 8009930:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009932:	1cfb      	adds	r3, r7, #3
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	0011      	movs	r1, r2
 800993a:	0018      	movs	r0, r3
 800993c:	f002 f81c 	bl	800b978 <USBD_LL_GetRxDataSize>
 8009940:	0001      	movs	r1, r0
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	2383      	movs	r3, #131	@ 0x83
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	23ae      	movs	r3, #174	@ 0xae
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	58d3      	ldr	r3, [r2, r3]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d011      	beq.n	800997a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	23af      	movs	r3, #175	@ 0xaf
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	58d3      	ldr	r3, [r2, r3]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	68f9      	ldr	r1, [r7, #12]
 8009962:	2381      	movs	r3, #129	@ 0x81
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	58c8      	ldr	r0, [r1, r3]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2183      	movs	r1, #131	@ 0x83
 800996c:	0089      	lsls	r1, r1, #2
 800996e:	468c      	mov	ip, r1
 8009970:	4463      	add	r3, ip
 8009972:	0019      	movs	r1, r3
 8009974:	4790      	blx	r2

    return USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	e000      	b.n	800997c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800997a:	2302      	movs	r3, #2
  }
}
 800997c:	0018      	movs	r0, r3
 800997e:	46bd      	mov	sp, r7
 8009980:	b004      	add	sp, #16
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009984:	b590      	push	{r4, r7, lr}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	23ae      	movs	r3, #174	@ 0xae
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	58d3      	ldr	r3, [r2, r3]
 8009994:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	23af      	movs	r3, #175	@ 0xaf
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	58d3      	ldr	r3, [r2, r3]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d018      	beq.n	80099d4 <USBD_CDC_EP0_RxReady+0x50>
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	2380      	movs	r3, #128	@ 0x80
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	5cd3      	ldrb	r3, [r2, r3]
 80099aa:	2bff      	cmp	r3, #255	@ 0xff
 80099ac:	d012      	beq.n	80099d4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	23af      	movs	r3, #175	@ 0xaf
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	58d3      	ldr	r3, [r2, r3]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	68f9      	ldr	r1, [r7, #12]
 80099ba:	2280      	movs	r2, #128	@ 0x80
 80099bc:	0092      	lsls	r2, r2, #2
 80099be:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80099c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	4c06      	ldr	r4, [pc, #24]	@ (80099e0 <USBD_CDC_EP0_RxReady+0x5c>)
 80099c6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	2380      	movs	r3, #128	@ 0x80
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	21ff      	movs	r1, #255	@ 0xff
 80099d2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	0018      	movs	r0, r3
 80099d8:	46bd      	mov	sp, r7
 80099da:	b005      	add	sp, #20
 80099dc:	bd90      	pop	{r4, r7, pc}
 80099de:	46c0      	nop			@ (mov r8, r8)
 80099e0:	00000201 	.word	0x00000201

080099e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2243      	movs	r2, #67	@ 0x43
 80099f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80099f2:	4b02      	ldr	r3, [pc, #8]	@ (80099fc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80099f4:	0018      	movs	r0, r3
 80099f6:	46bd      	mov	sp, r7
 80099f8:	b002      	add	sp, #8
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	200000d4 	.word	0x200000d4

08009a00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2243      	movs	r2, #67	@ 0x43
 8009a0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009a0e:	4b02      	ldr	r3, [pc, #8]	@ (8009a18 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009a10:	0018      	movs	r0, r3
 8009a12:	46bd      	mov	sp, r7
 8009a14:	b002      	add	sp, #8
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20000090 	.word	0x20000090

08009a1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2243      	movs	r2, #67	@ 0x43
 8009a28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009a2a:	4b02      	ldr	r3, [pc, #8]	@ (8009a34 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	b002      	add	sp, #8
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20000118 	.word	0x20000118

08009a38 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	220a      	movs	r2, #10
 8009a44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009a46:	4b02      	ldr	r3, [pc, #8]	@ (8009a50 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8009a48:	0018      	movs	r0, r3
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	b002      	add	sp, #8
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	2000004c 	.word	0x2000004c

08009a54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009a5e:	200f      	movs	r0, #15
 8009a60:	183b      	adds	r3, r7, r0
 8009a62:	2202      	movs	r2, #2
 8009a64:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	23af      	movs	r3, #175	@ 0xaf
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8009a76:	183b      	adds	r3, r7, r0
 8009a78:	2200      	movs	r2, #0
 8009a7a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009a7c:	230f      	movs	r3, #15
 8009a7e:	18fb      	adds	r3, r7, r3
 8009a80:	781b      	ldrb	r3, [r3, #0]
}
 8009a82:	0018      	movs	r0, r3
 8009a84:	46bd      	mov	sp, r7
 8009a86:	b004      	add	sp, #16
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b086      	sub	sp, #24
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	60f8      	str	r0, [r7, #12]
 8009a92:	60b9      	str	r1, [r7, #8]
 8009a94:	1dbb      	adds	r3, r7, #6
 8009a96:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	23ae      	movs	r3, #174	@ 0xae
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	58d3      	ldr	r3, [r2, r3]
 8009aa0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	2382      	movs	r3, #130	@ 0x82
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	68b9      	ldr	r1, [r7, #8]
 8009aaa:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8009aac:	1dbb      	adds	r3, r7, #6
 8009aae:	8819      	ldrh	r1, [r3, #0]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	2384      	movs	r3, #132	@ 0x84
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	0018      	movs	r0, r3
 8009abc:	46bd      	mov	sp, r7
 8009abe:	b006      	add	sp, #24
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	23ae      	movs	r3, #174	@ 0xae
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	58d3      	ldr	r3, [r2, r3]
 8009ad4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	2381      	movs	r3, #129	@ 0x81
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	0018      	movs	r0, r3
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	b004      	add	sp, #16
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	23ae      	movs	r3, #174	@ 0xae
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	58d3      	ldr	r3, [r2, r3]
 8009afa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	23ae      	movs	r3, #174	@ 0xae
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	58d3      	ldr	r3, [r2, r3]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d022      	beq.n	8009b4e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	2385      	movs	r3, #133	@ 0x85
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	58d3      	ldr	r3, [r2, r3]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d11a      	bne.n	8009b4a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	2385      	movs	r3, #133	@ 0x85
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	2384      	movs	r3, #132	@ 0x84
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	58d2      	ldr	r2, [r2, r3]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	2382      	movs	r3, #130	@ 0x82
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	2384      	movs	r3, #132	@ 0x84
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	000a      	movs	r2, r1
 8009b40:	2181      	movs	r1, #129	@ 0x81
 8009b42:	f001 feab 	bl	800b89c <USBD_LL_Transmit>

      return USBD_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	e002      	b.n	8009b50 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e000      	b.n	8009b50 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8009b4e:	2302      	movs	r3, #2
  }
}
 8009b50:	0018      	movs	r0, r3
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b004      	add	sp, #16
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	23ae      	movs	r3, #174	@ 0xae
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	58d3      	ldr	r3, [r2, r3]
 8009b68:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	23ae      	movs	r3, #174	@ 0xae
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	58d3      	ldr	r3, [r2, r3]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d019      	beq.n	8009baa <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	7c1b      	ldrb	r3, [r3, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	2381      	movs	r3, #129	@ 0x81
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	58d2      	ldr	r2, [r2, r3]
 8009b86:	2380      	movs	r3, #128	@ 0x80
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	f001 febc 	bl	800b90a <USBD_LL_PrepareReceive>
 8009b92:	e008      	b.n	8009ba6 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	2381      	movs	r3, #129	@ 0x81
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	58d2      	ldr	r2, [r2, r3]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	2340      	movs	r3, #64	@ 0x40
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	f001 feb2 	bl	800b90a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e000      	b.n	8009bac <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8009baa:	2302      	movs	r3, #2
  }
}
 8009bac:	0018      	movs	r0, r3
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	b004      	add	sp, #16
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	1dfb      	adds	r3, r7, #7
 8009bc0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e020      	b.n	8009c0e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	23ad      	movs	r3, #173	@ 0xad
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	58d3      	ldr	r3, [r2, r3]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d004      	beq.n	8009be2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	23ad      	movs	r3, #173	@ 0xad
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	2100      	movs	r1, #0
 8009be0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d004      	beq.n	8009bf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	23ac      	movs	r3, #172	@ 0xac
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	23a7      	movs	r3, #167	@ 0xa7
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	1dfa      	adds	r2, r7, #7
 8009c00:	7812      	ldrb	r2, [r2, #0]
 8009c02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	0018      	movs	r0, r3
 8009c08:	f001 fcac 	bl	800b564 <USBD_LL_Init>

  return USBD_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	0018      	movs	r0, r3
 8009c10:	46bd      	mov	sp, r7
 8009c12:	b004      	add	sp, #16
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009c20:	200f      	movs	r0, #15
 8009c22:	183b      	adds	r3, r7, r0
 8009c24:	2200      	movs	r2, #0
 8009c26:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	23ad      	movs	r3, #173	@ 0xad
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009c38:	183b      	adds	r3, r7, r0
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	701a      	strb	r2, [r3, #0]
 8009c3e:	e003      	b.n	8009c48 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009c40:	230f      	movs	r3, #15
 8009c42:	18fb      	adds	r3, r7, r3
 8009c44:	2202      	movs	r2, #2
 8009c46:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009c48:	230f      	movs	r3, #15
 8009c4a:	18fb      	adds	r3, r7, r3
 8009c4c:	781b      	ldrb	r3, [r3, #0]
}
 8009c4e:	0018      	movs	r0, r3
 8009c50:	46bd      	mov	sp, r7
 8009c52:	b004      	add	sp, #16
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	0018      	movs	r0, r3
 8009c62:	f001 fce3 	bl	800b62c <USBD_LL_Start>

  return USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	0018      	movs	r0, r3
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	b002      	add	sp, #8
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	0018      	movs	r0, r3
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	b002      	add	sp, #8
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c82:	b590      	push	{r4, r7, lr}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	000a      	movs	r2, r1
 8009c8c:	1cfb      	adds	r3, r7, #3
 8009c8e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c90:	240f      	movs	r4, #15
 8009c92:	193b      	adds	r3, r7, r4
 8009c94:	2202      	movs	r2, #2
 8009c96:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	23ad      	movs	r3, #173	@ 0xad
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	58d3      	ldr	r3, [r2, r3]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00e      	beq.n	8009cc2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	23ad      	movs	r3, #173	@ 0xad
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	58d3      	ldr	r3, [r2, r3]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	1cfa      	adds	r2, r7, #3
 8009cb0:	7811      	ldrb	r1, [r2, #0]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	0010      	movs	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	1e03      	subs	r3, r0, #0
 8009cba:	d102      	bne.n	8009cc2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8009cbc:	193b      	adds	r3, r7, r4
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009cc2:	230f      	movs	r3, #15
 8009cc4:	18fb      	adds	r3, r7, r3
 8009cc6:	781b      	ldrb	r3, [r3, #0]
}
 8009cc8:	0018      	movs	r0, r3
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	b005      	add	sp, #20
 8009cce:	bd90      	pop	{r4, r7, pc}

08009cd0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	000a      	movs	r2, r1
 8009cda:	1cfb      	adds	r3, r7, #3
 8009cdc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	23ad      	movs	r3, #173	@ 0xad
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	58d3      	ldr	r3, [r2, r3]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	1cfa      	adds	r2, r7, #3
 8009cea:	7811      	ldrb	r1, [r2, #0]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	0010      	movs	r0, r2
 8009cf0:	4798      	blx	r3

  return USBD_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	b002      	add	sp, #8
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	22aa      	movs	r2, #170	@ 0xaa
 8009d0a:	0092      	lsls	r2, r2, #2
 8009d0c:	4694      	mov	ip, r2
 8009d0e:	4463      	add	r3, ip
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	0011      	movs	r1, r2
 8009d14:	0018      	movs	r0, r3
 8009d16:	f001 f810 	bl	800ad3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	23a5      	movs	r3, #165	@ 0xa5
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	2101      	movs	r1, #1
 8009d22:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a23      	ldr	r2, [pc, #140]	@ (8009db4 <USBD_LL_SetupStage+0xb8>)
 8009d28:	5a9b      	ldrh	r3, [r3, r2]
 8009d2a:	0019      	movs	r1, r3
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	23a6      	movs	r3, #166	@ 0xa6
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	23aa      	movs	r3, #170	@ 0xaa
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	5cd3      	ldrb	r3, [r2, r3]
 8009d3c:	001a      	movs	r2, r3
 8009d3e:	231f      	movs	r3, #31
 8009d40:	4013      	ands	r3, r2
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d019      	beq.n	8009d7a <USBD_LL_SetupStage+0x7e>
 8009d46:	d822      	bhi.n	8009d8e <USBD_LL_SetupStage+0x92>
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <USBD_LL_SetupStage+0x56>
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d00a      	beq.n	8009d66 <USBD_LL_SetupStage+0x6a>
 8009d50:	e01d      	b.n	8009d8e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	22aa      	movs	r2, #170	@ 0xaa
 8009d56:	0092      	lsls	r2, r2, #2
 8009d58:	189a      	adds	r2, r3, r2
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	0011      	movs	r1, r2
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f000 fa10 	bl	800a184 <USBD_StdDevReq>
      break;
 8009d64:	e020      	b.n	8009da8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	22aa      	movs	r2, #170	@ 0xaa
 8009d6a:	0092      	lsls	r2, r2, #2
 8009d6c:	189a      	adds	r2, r3, r2
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	0011      	movs	r1, r2
 8009d72:	0018      	movs	r0, r3
 8009d74:	f000 fa78 	bl	800a268 <USBD_StdItfReq>
      break;
 8009d78:	e016      	b.n	8009da8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	22aa      	movs	r2, #170	@ 0xaa
 8009d7e:	0092      	lsls	r2, r2, #2
 8009d80:	189a      	adds	r2, r3, r2
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	0011      	movs	r1, r2
 8009d86:	0018      	movs	r0, r3
 8009d88:	f000 fac5 	bl	800a316 <USBD_StdEPReq>
      break;
 8009d8c:	e00c      	b.n	8009da8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	23aa      	movs	r3, #170	@ 0xaa
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	5cd3      	ldrb	r3, [r2, r3]
 8009d96:	227f      	movs	r2, #127	@ 0x7f
 8009d98:	4393      	bics	r3, r2
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	0011      	movs	r1, r2
 8009da0:	0018      	movs	r0, r3
 8009da2:	f001 fcca 	bl	800b73a <USBD_LL_StallEP>
      break;
 8009da6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	0018      	movs	r0, r3
 8009dac:	46bd      	mov	sp, r7
 8009dae:	b002      	add	sp, #8
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	46c0      	nop			@ (mov r8, r8)
 8009db4:	000002ae 	.word	0x000002ae

08009db8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	200b      	movs	r0, #11
 8009dc4:	183b      	adds	r3, r7, r0
 8009dc6:	1c0a      	adds	r2, r1, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009dca:	183b      	adds	r3, r7, r0
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d154      	bne.n	8009e7c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3355      	adds	r3, #85	@ 0x55
 8009dd6:	33ff      	adds	r3, #255	@ 0xff
 8009dd8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	23a5      	movs	r3, #165	@ 0xa5
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	58d3      	ldr	r3, [r2, r3]
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d139      	bne.n	8009e5a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	68da      	ldr	r2, [r3, #12]
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d919      	bls.n	8009e26 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	68da      	ldr	r2, [r3, #12]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	1ad2      	subs	r2, r2, r3
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d203      	bcs.n	8009e14 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	e002      	b.n	8009e1a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	001a      	movs	r2, r3
 8009e20:	f001 f898 	bl	800af54 <USBD_CtlContinueRx>
 8009e24:	e045      	b.n	8009eb2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	23ad      	movs	r3, #173	@ 0xad
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	58d3      	ldr	r3, [r2, r3]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00d      	beq.n	8009e50 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	23a7      	movs	r3, #167	@ 0xa7
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d107      	bne.n	8009e50 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	23ad      	movs	r3, #173	@ 0xad
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	58d3      	ldr	r3, [r2, r3]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	0010      	movs	r0, r2
 8009e4e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	0018      	movs	r0, r3
 8009e54:	f001 f891 	bl	800af7a <USBD_CtlSendStatus>
 8009e58:	e02b      	b.n	8009eb2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	23a5      	movs	r3, #165	@ 0xa5
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	58d3      	ldr	r3, [r2, r3]
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	d125      	bne.n	8009eb2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	23a5      	movs	r3, #165	@ 0xa5
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2100      	movs	r1, #0
 8009e74:	0018      	movs	r0, r3
 8009e76:	f001 fc60 	bl	800b73a <USBD_LL_StallEP>
 8009e7a:	e01a      	b.n	8009eb2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	23ad      	movs	r3, #173	@ 0xad
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	58d3      	ldr	r3, [r2, r3]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d011      	beq.n	8009eae <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	23a7      	movs	r3, #167	@ 0xa7
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d10b      	bne.n	8009eae <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	23ad      	movs	r3, #173	@ 0xad
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	58d3      	ldr	r3, [r2, r3]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	220b      	movs	r2, #11
 8009ea2:	18ba      	adds	r2, r7, r2
 8009ea4:	7811      	ldrb	r1, [r2, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	0010      	movs	r0, r2
 8009eaa:	4798      	blx	r3
 8009eac:	e001      	b.n	8009eb2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e000      	b.n	8009eb4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	b006      	add	sp, #24
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	607a      	str	r2, [r7, #4]
 8009ec6:	200b      	movs	r0, #11
 8009ec8:	183b      	adds	r3, r7, r0
 8009eca:	1c0a      	adds	r2, r1, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009ece:	183b      	adds	r3, r7, r0
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d000      	beq.n	8009ed8 <USBD_LL_DataInStage+0x1c>
 8009ed6:	e08e      	b.n	8009ff6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3314      	adds	r3, #20
 8009edc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	23a5      	movs	r3, #165	@ 0xa5
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	58d3      	ldr	r3, [r2, r3]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d164      	bne.n	8009fb4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	68da      	ldr	r2, [r3, #12]
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d915      	bls.n	8009f22 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	6879      	ldr	r1, [r7, #4]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	0018      	movs	r0, r3
 8009f10:	f000 ffe9 	bl	800aee6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	2300      	movs	r3, #0
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	f001 fcf5 	bl	800b90a <USBD_LL_PrepareReceive>
 8009f20:	e059      	b.n	8009fd6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	689a      	ldr	r2, [r3, #8]
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	0019      	movs	r1, r3
 8009f2c:	0010      	movs	r0, r2
 8009f2e:	f7f6 f97b 	bl	8000228 <__aeabi_uidivmod>
 8009f32:	1e0b      	subs	r3, r1, #0
 8009f34:	d11f      	bne.n	8009f76 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d319      	bcc.n	8009f76 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	689a      	ldr	r2, [r3, #8]
 8009f46:	68f9      	ldr	r1, [r7, #12]
 8009f48:	23a6      	movs	r3, #166	@ 0xa6
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d211      	bcs.n	8009f76 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	2100      	movs	r1, #0
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f000 ffc4 	bl	800aee6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	23a6      	movs	r3, #166	@ 0xa6
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	2100      	movs	r1, #0
 8009f66:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2100      	movs	r1, #0
 8009f70:	f001 fccb 	bl	800b90a <USBD_LL_PrepareReceive>
 8009f74:	e02f      	b.n	8009fd6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	23ad      	movs	r3, #173	@ 0xad
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	58d3      	ldr	r3, [r2, r3]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00d      	beq.n	8009fa0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	23a7      	movs	r3, #167	@ 0xa7
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d107      	bne.n	8009fa0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	23ad      	movs	r3, #173	@ 0xad
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	58d3      	ldr	r3, [r2, r3]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	0010      	movs	r0, r2
 8009f9e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2180      	movs	r1, #128	@ 0x80
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f001 fbc8 	bl	800b73a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	0018      	movs	r0, r3
 8009fae:	f000 fff8 	bl	800afa2 <USBD_CtlReceiveStatus>
 8009fb2:	e010      	b.n	8009fd6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	23a5      	movs	r3, #165	@ 0xa5
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	58d3      	ldr	r3, [r2, r3]
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	d005      	beq.n	8009fcc <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	23a5      	movs	r3, #165	@ 0xa5
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d104      	bne.n	8009fd6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2180      	movs	r1, #128	@ 0x80
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f001 fbb2 	bl	800b73a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	23a8      	movs	r3, #168	@ 0xa8
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	5cd3      	ldrb	r3, [r2, r3]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d124      	bne.n	800a02c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f7ff fe43 	bl	8009c70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	23a8      	movs	r3, #168	@ 0xa8
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	54d1      	strb	r1, [r2, r3]
 8009ff4:	e01a      	b.n	800a02c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	23ad      	movs	r3, #173	@ 0xad
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	58d3      	ldr	r3, [r2, r3]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d011      	beq.n	800a028 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	23a7      	movs	r3, #167	@ 0xa7
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d10b      	bne.n	800a028 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	23ad      	movs	r3, #173	@ 0xad
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	58d3      	ldr	r3, [r2, r3]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	220b      	movs	r2, #11
 800a01c:	18ba      	adds	r2, r7, r2
 800a01e:	7811      	ldrb	r1, [r2, #0]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	0010      	movs	r0, r2
 800a024:	4798      	blx	r3
 800a026:	e001      	b.n	800a02c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a028:	2302      	movs	r3, #2
 800a02a:	e000      	b.n	800a02e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	0018      	movs	r0, r3
 800a030:	46bd      	mov	sp, r7
 800a032:	b006      	add	sp, #24
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	2340      	movs	r3, #64	@ 0x40
 800a042:	2200      	movs	r2, #0
 800a044:	2100      	movs	r1, #0
 800a046:	f001 fb16 	bl	800b676 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	23ac      	movs	r3, #172	@ 0xac
 800a04e:	005b      	lsls	r3, r3, #1
 800a050:	2101      	movs	r1, #1
 800a052:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	23b2      	movs	r3, #178	@ 0xb2
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	2140      	movs	r1, #64	@ 0x40
 800a05c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	2340      	movs	r3, #64	@ 0x40
 800a062:	2200      	movs	r2, #0
 800a064:	2180      	movs	r1, #128	@ 0x80
 800a066:	f001 fb06 	bl	800b676 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2240      	movs	r2, #64	@ 0x40
 800a074:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	23a7      	movs	r3, #167	@ 0xa7
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	2101      	movs	r1, #1
 800a07e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	23a5      	movs	r3, #165	@ 0xa5
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	2100      	movs	r1, #0
 800a088:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	23a9      	movs	r3, #169	@ 0xa9
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	2100      	movs	r1, #0
 800a098:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	23ae      	movs	r3, #174	@ 0xae
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	58d3      	ldr	r3, [r2, r3]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00a      	beq.n	800a0bc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	23ad      	movs	r3, #173	@ 0xad
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	58d3      	ldr	r3, [r2, r3]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	b2d9      	uxtb	r1, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	4790      	blx	r2
  }

  return USBD_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	0018      	movs	r0, r3
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	b002      	add	sp, #8
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	000a      	movs	r2, r1
 800a0d0:	1cfb      	adds	r3, r7, #3
 800a0d2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	1cfa      	adds	r2, r7, #3
 800a0d8:	7812      	ldrb	r2, [r2, #0]
 800a0da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	0018      	movs	r0, r3
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	b002      	add	sp, #8
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	23a7      	movs	r3, #167	@ 0xa7
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	5cd1      	ldrb	r1, [r2, r3]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a06      	ldr	r2, [pc, #24]	@ (800a114 <USBD_LL_Suspend+0x2c>)
 800a0fc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	23a7      	movs	r3, #167	@ 0xa7
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	2104      	movs	r1, #4
 800a106:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	0018      	movs	r0, r3
 800a10c:	46bd      	mov	sp, r7
 800a10e:	b002      	add	sp, #8
 800a110:	bd80      	pop	{r7, pc}
 800a112:	46c0      	nop			@ (mov r8, r8)
 800a114:	0000029d 	.word	0x0000029d

0800a118 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	23a7      	movs	r3, #167	@ 0xa7
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	5cd3      	ldrb	r3, [r2, r3]
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d106      	bne.n	800a13a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a05      	ldr	r2, [pc, #20]	@ (800a144 <USBD_LL_Resume+0x2c>)
 800a130:	5c99      	ldrb	r1, [r3, r2]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	23a7      	movs	r3, #167	@ 0xa7
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	0018      	movs	r0, r3
 800a13e:	46bd      	mov	sp, r7
 800a140:	b002      	add	sp, #8
 800a142:	bd80      	pop	{r7, pc}
 800a144:	0000029d 	.word	0x0000029d

0800a148 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	23a7      	movs	r3, #167	@ 0xa7
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	5cd3      	ldrb	r3, [r2, r3]
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d10e      	bne.n	800a17a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	23ad      	movs	r3, #173	@ 0xad
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	58d3      	ldr	r3, [r2, r3]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d007      	beq.n	800a17a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	23ad      	movs	r3, #173	@ 0xad
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	58d3      	ldr	r3, [r2, r3]
 800a172:	69db      	ldr	r3, [r3, #28]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	0010      	movs	r0, r2
 800a178:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	0018      	movs	r0, r3
 800a17e:	46bd      	mov	sp, r7
 800a180:	b002      	add	sp, #8
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18e:	230f      	movs	r3, #15
 800a190:	18fb      	adds	r3, r7, r3
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	001a      	movs	r2, r3
 800a19c:	2360      	movs	r3, #96	@ 0x60
 800a19e:	4013      	ands	r3, r2
 800a1a0:	2b40      	cmp	r3, #64	@ 0x40
 800a1a2:	d004      	beq.n	800a1ae <USBD_StdDevReq+0x2a>
 800a1a4:	d84f      	bhi.n	800a246 <USBD_StdDevReq+0xc2>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00b      	beq.n	800a1c2 <USBD_StdDevReq+0x3e>
 800a1aa:	2b20      	cmp	r3, #32
 800a1ac:	d14b      	bne.n	800a246 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	23ad      	movs	r3, #173	@ 0xad
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	58d3      	ldr	r3, [r2, r3]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	0010      	movs	r0, r2
 800a1be:	4798      	blx	r3
      break;
 800a1c0:	e048      	b.n	800a254 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	785b      	ldrb	r3, [r3, #1]
 800a1c6:	2b09      	cmp	r3, #9
 800a1c8:	d835      	bhi.n	800a236 <USBD_StdDevReq+0xb2>
 800a1ca:	009a      	lsls	r2, r3, #2
 800a1cc:	4b25      	ldr	r3, [pc, #148]	@ (800a264 <USBD_StdDevReq+0xe0>)
 800a1ce:	18d3      	adds	r3, r2, r3
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	0011      	movs	r1, r2
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f000 fa52 	bl	800a684 <USBD_GetDescriptor>
          break;
 800a1e0:	e030      	b.n	800a244 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	0011      	movs	r1, r2
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f000 fbfd 	bl	800a9e8 <USBD_SetAddress>
          break;
 800a1ee:	e029      	b.n	800a244 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	0011      	movs	r1, r2
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	f000 fc4a 	bl	800aa90 <USBD_SetConfig>
          break;
 800a1fc:	e022      	b.n	800a244 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0011      	movs	r1, r2
 800a204:	0018      	movs	r0, r3
 800a206:	f000 fce7 	bl	800abd8 <USBD_GetConfig>
          break;
 800a20a:	e01b      	b.n	800a244 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	0011      	movs	r1, r2
 800a212:	0018      	movs	r0, r3
 800a214:	f000 fd1b 	bl	800ac4e <USBD_GetStatus>
          break;
 800a218:	e014      	b.n	800a244 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	0011      	movs	r1, r2
 800a220:	0018      	movs	r0, r3
 800a222:	f000 fd4e 	bl	800acc2 <USBD_SetFeature>
          break;
 800a226:	e00d      	b.n	800a244 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	0011      	movs	r1, r2
 800a22e:	0018      	movs	r0, r3
 800a230:	f000 fd5d 	bl	800acee <USBD_ClrFeature>
          break;
 800a234:	e006      	b.n	800a244 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	0011      	movs	r1, r2
 800a23c:	0018      	movs	r0, r3
 800a23e:	f000 fdb4 	bl	800adaa <USBD_CtlError>
          break;
 800a242:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a244:	e006      	b.n	800a254 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	0011      	movs	r1, r2
 800a24c:	0018      	movs	r0, r3
 800a24e:	f000 fdac 	bl	800adaa <USBD_CtlError>
      break;
 800a252:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a254:	230f      	movs	r3, #15
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	781b      	ldrb	r3, [r3, #0]
}
 800a25a:	0018      	movs	r0, r3
 800a25c:	46bd      	mov	sp, r7
 800a25e:	b004      	add	sp, #16
 800a260:	bd80      	pop	{r7, pc}
 800a262:	46c0      	nop			@ (mov r8, r8)
 800a264:	0800d8ec 	.word	0x0800d8ec

0800a268 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a268:	b5b0      	push	{r4, r5, r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a272:	230f      	movs	r3, #15
 800a274:	18fb      	adds	r3, r7, r3
 800a276:	2200      	movs	r2, #0
 800a278:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	001a      	movs	r2, r3
 800a280:	2360      	movs	r3, #96	@ 0x60
 800a282:	4013      	ands	r3, r2
 800a284:	2b40      	cmp	r3, #64	@ 0x40
 800a286:	d004      	beq.n	800a292 <USBD_StdItfReq+0x2a>
 800a288:	d839      	bhi.n	800a2fe <USBD_StdItfReq+0x96>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <USBD_StdItfReq+0x2a>
 800a28e:	2b20      	cmp	r3, #32
 800a290:	d135      	bne.n	800a2fe <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	23a7      	movs	r3, #167	@ 0xa7
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	5cd3      	ldrb	r3, [r2, r3]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d825      	bhi.n	800a2ec <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	889b      	ldrh	r3, [r3, #4]
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d819      	bhi.n	800a2de <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	23ad      	movs	r3, #173	@ 0xad
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	58d3      	ldr	r3, [r2, r3]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	250f      	movs	r5, #15
 800a2b6:	197c      	adds	r4, r7, r5
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	0010      	movs	r0, r2
 800a2be:	4798      	blx	r3
 800a2c0:	0003      	movs	r3, r0
 800a2c2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	88db      	ldrh	r3, [r3, #6]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d116      	bne.n	800a2fa <USBD_StdItfReq+0x92>
 800a2cc:	197b      	adds	r3, r7, r5
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d112      	bne.n	800a2fa <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	f000 fe4f 	bl	800af7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a2dc:	e00d      	b.n	800a2fa <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	0011      	movs	r1, r2
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f000 fd60 	bl	800adaa <USBD_CtlError>
          break;
 800a2ea:	e006      	b.n	800a2fa <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	0011      	movs	r1, r2
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f000 fd59 	bl	800adaa <USBD_CtlError>
          break;
 800a2f8:	e000      	b.n	800a2fc <USBD_StdItfReq+0x94>
          break;
 800a2fa:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a2fc:	e006      	b.n	800a30c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	0011      	movs	r1, r2
 800a304:	0018      	movs	r0, r3
 800a306:	f000 fd50 	bl	800adaa <USBD_CtlError>
      break;
 800a30a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	0018      	movs	r0, r3
 800a310:	46bd      	mov	sp, r7
 800a312:	b004      	add	sp, #16
 800a314:	bdb0      	pop	{r4, r5, r7, pc}

0800a316 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a316:	b5b0      	push	{r4, r5, r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a320:	230f      	movs	r3, #15
 800a322:	18fb      	adds	r3, r7, r3
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	889a      	ldrh	r2, [r3, #4]
 800a32c:	230e      	movs	r3, #14
 800a32e:	18fb      	adds	r3, r7, r3
 800a330:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	001a      	movs	r2, r3
 800a338:	2360      	movs	r3, #96	@ 0x60
 800a33a:	4013      	ands	r3, r2
 800a33c:	2b40      	cmp	r3, #64	@ 0x40
 800a33e:	d006      	beq.n	800a34e <USBD_StdEPReq+0x38>
 800a340:	d900      	bls.n	800a344 <USBD_StdEPReq+0x2e>
 800a342:	e190      	b.n	800a666 <USBD_StdEPReq+0x350>
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00c      	beq.n	800a362 <USBD_StdEPReq+0x4c>
 800a348:	2b20      	cmp	r3, #32
 800a34a:	d000      	beq.n	800a34e <USBD_StdEPReq+0x38>
 800a34c:	e18b      	b.n	800a666 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	23ad      	movs	r3, #173	@ 0xad
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	58d3      	ldr	r3, [r2, r3]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	0010      	movs	r0, r2
 800a35e:	4798      	blx	r3
      break;
 800a360:	e188      	b.n	800a674 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	001a      	movs	r2, r3
 800a368:	2360      	movs	r3, #96	@ 0x60
 800a36a:	4013      	ands	r3, r2
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d10f      	bne.n	800a390 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	23ad      	movs	r3, #173	@ 0xad
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	58d3      	ldr	r3, [r2, r3]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	250f      	movs	r5, #15
 800a37c:	197c      	adds	r4, r7, r5
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	0010      	movs	r0, r2
 800a384:	4798      	blx	r3
 800a386:	0003      	movs	r3, r0
 800a388:	7023      	strb	r3, [r4, #0]

        return ret;
 800a38a:	197b      	adds	r3, r7, r5
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	e174      	b.n	800a67a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	2b03      	cmp	r3, #3
 800a396:	d007      	beq.n	800a3a8 <USBD_StdEPReq+0x92>
 800a398:	dd00      	ble.n	800a39c <USBD_StdEPReq+0x86>
 800a39a:	e15c      	b.n	800a656 <USBD_StdEPReq+0x340>
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d100      	bne.n	800a3a2 <USBD_StdEPReq+0x8c>
 800a3a0:	e092      	b.n	800a4c8 <USBD_StdEPReq+0x1b2>
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d04b      	beq.n	800a43e <USBD_StdEPReq+0x128>
 800a3a6:	e156      	b.n	800a656 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	23a7      	movs	r3, #167	@ 0xa7
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	5cd3      	ldrb	r3, [r2, r3]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d002      	beq.n	800a3ba <USBD_StdEPReq+0xa4>
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d01d      	beq.n	800a3f4 <USBD_StdEPReq+0xde>
 800a3b8:	e039      	b.n	800a42e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3ba:	220e      	movs	r2, #14
 800a3bc:	18bb      	adds	r3, r7, r2
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d010      	beq.n	800a3e6 <USBD_StdEPReq+0xd0>
 800a3c4:	18bb      	adds	r3, r7, r2
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b80      	cmp	r3, #128	@ 0x80
 800a3ca:	d00c      	beq.n	800a3e6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a3cc:	18bb      	adds	r3, r7, r2
 800a3ce:	781a      	ldrb	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	0011      	movs	r1, r2
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	f001 f9b0 	bl	800b73a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2180      	movs	r1, #128	@ 0x80
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f001 f9ab 	bl	800b73a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3e4:	e02a      	b.n	800a43c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	0011      	movs	r1, r2
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f000 fcdc 	bl	800adaa <USBD_CtlError>
              break;
 800a3f2:	e023      	b.n	800a43c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	885b      	ldrh	r3, [r3, #2]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d113      	bne.n	800a424 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a3fc:	220e      	movs	r2, #14
 800a3fe:	18bb      	adds	r3, r7, r2
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00e      	beq.n	800a424 <USBD_StdEPReq+0x10e>
 800a406:	18bb      	adds	r3, r7, r2
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	2b80      	cmp	r3, #128	@ 0x80
 800a40c:	d00a      	beq.n	800a424 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	88db      	ldrh	r3, [r3, #6]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a416:	18bb      	adds	r3, r7, r2
 800a418:	781a      	ldrb	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	0011      	movs	r1, r2
 800a41e:	0018      	movs	r0, r3
 800a420:	f001 f98b 	bl	800b73a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	0018      	movs	r0, r3
 800a428:	f000 fda7 	bl	800af7a <USBD_CtlSendStatus>

              break;
 800a42c:	e006      	b.n	800a43c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	0011      	movs	r1, r2
 800a434:	0018      	movs	r0, r3
 800a436:	f000 fcb8 	bl	800adaa <USBD_CtlError>
              break;
 800a43a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a43c:	e112      	b.n	800a664 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	23a7      	movs	r3, #167	@ 0xa7
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	5cd3      	ldrb	r3, [r2, r3]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d002      	beq.n	800a450 <USBD_StdEPReq+0x13a>
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d01d      	beq.n	800a48a <USBD_StdEPReq+0x174>
 800a44e:	e032      	b.n	800a4b6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a450:	220e      	movs	r2, #14
 800a452:	18bb      	adds	r3, r7, r2
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d010      	beq.n	800a47c <USBD_StdEPReq+0x166>
 800a45a:	18bb      	adds	r3, r7, r2
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b80      	cmp	r3, #128	@ 0x80
 800a460:	d00c      	beq.n	800a47c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a462:	18bb      	adds	r3, r7, r2
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	0011      	movs	r1, r2
 800a46a:	0018      	movs	r0, r3
 800a46c:	f001 f965 	bl	800b73a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2180      	movs	r1, #128	@ 0x80
 800a474:	0018      	movs	r0, r3
 800a476:	f001 f960 	bl	800b73a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a47a:	e024      	b.n	800a4c6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	0011      	movs	r1, r2
 800a482:	0018      	movs	r0, r3
 800a484:	f000 fc91 	bl	800adaa <USBD_CtlError>
              break;
 800a488:	e01d      	b.n	800a4c6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	885b      	ldrh	r3, [r3, #2]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d118      	bne.n	800a4c4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a492:	210e      	movs	r1, #14
 800a494:	187b      	adds	r3, r7, r1
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	227f      	movs	r2, #127	@ 0x7f
 800a49a:	4013      	ands	r3, r2
 800a49c:	d006      	beq.n	800a4ac <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a49e:	187b      	adds	r3, r7, r1
 800a4a0:	781a      	ldrb	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	0011      	movs	r1, r2
 800a4a6:	0018      	movs	r0, r3
 800a4a8:	f001 f972 	bl	800b790 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	f000 fd63 	bl	800af7a <USBD_CtlSendStatus>
              }
              break;
 800a4b4:	e006      	b.n	800a4c4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	0011      	movs	r1, r2
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f000 fc74 	bl	800adaa <USBD_CtlError>
              break;
 800a4c2:	e000      	b.n	800a4c6 <USBD_StdEPReq+0x1b0>
              break;
 800a4c4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a4c6:	e0cd      	b.n	800a664 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	23a7      	movs	r3, #167	@ 0xa7
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	5cd3      	ldrb	r3, [r2, r3]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d002      	beq.n	800a4da <USBD_StdEPReq+0x1c4>
 800a4d4:	2b03      	cmp	r3, #3
 800a4d6:	d03c      	beq.n	800a552 <USBD_StdEPReq+0x23c>
 800a4d8:	e0b5      	b.n	800a646 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4da:	220e      	movs	r2, #14
 800a4dc:	18bb      	adds	r3, r7, r2
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00a      	beq.n	800a4fa <USBD_StdEPReq+0x1e4>
 800a4e4:	18bb      	adds	r3, r7, r2
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b80      	cmp	r3, #128	@ 0x80
 800a4ea:	d006      	beq.n	800a4fa <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	0011      	movs	r1, r2
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f000 fc59 	bl	800adaa <USBD_CtlError>
                break;
 800a4f8:	e0ac      	b.n	800a654 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4fa:	220e      	movs	r2, #14
 800a4fc:	18bb      	adds	r3, r7, r2
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	b25b      	sxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	da0c      	bge.n	800a520 <USBD_StdEPReq+0x20a>
 800a506:	18bb      	adds	r3, r7, r2
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	227f      	movs	r2, #127	@ 0x7f
 800a50c:	401a      	ands	r2, r3
 800a50e:	0013      	movs	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	189b      	adds	r3, r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	3310      	adds	r3, #16
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	18d3      	adds	r3, r2, r3
 800a51c:	3304      	adds	r3, #4
 800a51e:	e00d      	b.n	800a53c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a520:	230e      	movs	r3, #14
 800a522:	18fb      	adds	r3, r7, r3
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	227f      	movs	r2, #127	@ 0x7f
 800a528:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a52a:	0013      	movs	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	189b      	adds	r3, r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	3351      	adds	r3, #81	@ 0x51
 800a534:	33ff      	adds	r3, #255	@ 0xff
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	18d3      	adds	r3, r2, r3
 800a53a:	3304      	adds	r3, #4
 800a53c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	2200      	movs	r2, #0
 800a542:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a544:	68b9      	ldr	r1, [r7, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2202      	movs	r2, #2
 800a54a:	0018      	movs	r0, r3
 800a54c:	f000 fcab 	bl	800aea6 <USBD_CtlSendData>
              break;
 800a550:	e080      	b.n	800a654 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a552:	220e      	movs	r2, #14
 800a554:	18bb      	adds	r3, r7, r2
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	da14      	bge.n	800a588 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a55e:	18bb      	adds	r3, r7, r2
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	220f      	movs	r2, #15
 800a564:	401a      	ands	r2, r3
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	0013      	movs	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	189b      	adds	r3, r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	18cb      	adds	r3, r1, r3
 800a572:	3318      	adds	r3, #24
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d11e      	bne.n	800a5b8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	0011      	movs	r1, r2
 800a580:	0018      	movs	r0, r3
 800a582:	f000 fc12 	bl	800adaa <USBD_CtlError>
                  break;
 800a586:	e065      	b.n	800a654 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a588:	230e      	movs	r3, #14
 800a58a:	18fb      	adds	r3, r7, r3
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	220f      	movs	r2, #15
 800a590:	401a      	ands	r2, r3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	23ac      	movs	r3, #172	@ 0xac
 800a596:	0059      	lsls	r1, r3, #1
 800a598:	0013      	movs	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	189b      	adds	r3, r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	18c3      	adds	r3, r0, r3
 800a5a2:	185b      	adds	r3, r3, r1
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	0011      	movs	r1, r2
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f000 fbfa 	bl	800adaa <USBD_CtlError>
                  break;
 800a5b6:	e04d      	b.n	800a654 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5b8:	220e      	movs	r2, #14
 800a5ba:	18bb      	adds	r3, r7, r2
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	b25b      	sxtb	r3, r3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	da0c      	bge.n	800a5de <USBD_StdEPReq+0x2c8>
 800a5c4:	18bb      	adds	r3, r7, r2
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	227f      	movs	r2, #127	@ 0x7f
 800a5ca:	401a      	ands	r2, r3
 800a5cc:	0013      	movs	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	189b      	adds	r3, r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	3310      	adds	r3, #16
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	18d3      	adds	r3, r2, r3
 800a5da:	3304      	adds	r3, #4
 800a5dc:	e00d      	b.n	800a5fa <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5de:	230e      	movs	r3, #14
 800a5e0:	18fb      	adds	r3, r7, r3
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	227f      	movs	r2, #127	@ 0x7f
 800a5e6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5e8:	0013      	movs	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	189b      	adds	r3, r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	3351      	adds	r3, #81	@ 0x51
 800a5f2:	33ff      	adds	r3, #255	@ 0xff
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	18d3      	adds	r3, r2, r3
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5fc:	220e      	movs	r2, #14
 800a5fe:	18bb      	adds	r3, r7, r2
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <USBD_StdEPReq+0x2f8>
 800a606:	18bb      	adds	r3, r7, r2
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	2b80      	cmp	r3, #128	@ 0x80
 800a60c:	d103      	bne.n	800a616 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2200      	movs	r2, #0
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	e010      	b.n	800a638 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a616:	230e      	movs	r3, #14
 800a618:	18fb      	adds	r3, r7, r3
 800a61a:	781a      	ldrb	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	0011      	movs	r1, r2
 800a620:	0018      	movs	r0, r3
 800a622:	f001 f8e0 	bl	800b7e6 <USBD_LL_IsStallEP>
 800a626:	1e03      	subs	r3, r0, #0
 800a628:	d003      	beq.n	800a632 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2201      	movs	r2, #1
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	e002      	b.n	800a638 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2200      	movs	r2, #0
 800a636:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2202      	movs	r2, #2
 800a63e:	0018      	movs	r0, r3
 800a640:	f000 fc31 	bl	800aea6 <USBD_CtlSendData>
              break;
 800a644:	e006      	b.n	800a654 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	0011      	movs	r1, r2
 800a64c:	0018      	movs	r0, r3
 800a64e:	f000 fbac 	bl	800adaa <USBD_CtlError>
              break;
 800a652:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a654:	e006      	b.n	800a664 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	0011      	movs	r1, r2
 800a65c:	0018      	movs	r0, r3
 800a65e:	f000 fba4 	bl	800adaa <USBD_CtlError>
          break;
 800a662:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a664:	e006      	b.n	800a674 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	0011      	movs	r1, r2
 800a66c:	0018      	movs	r0, r3
 800a66e:	f000 fb9c 	bl	800adaa <USBD_CtlError>
      break;
 800a672:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a674:	230f      	movs	r3, #15
 800a676:	18fb      	adds	r3, r7, r3
 800a678:	781b      	ldrb	r3, [r3, #0]
}
 800a67a:	0018      	movs	r0, r3
 800a67c:	46bd      	mov	sp, r7
 800a67e:	b004      	add	sp, #16
 800a680:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a684 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a68e:	2308      	movs	r3, #8
 800a690:	18fb      	adds	r3, r7, r3
 800a692:	2200      	movs	r2, #0
 800a694:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a69a:	230b      	movs	r3, #11
 800a69c:	18fb      	adds	r3, r7, r3
 800a69e:	2200      	movs	r2, #0
 800a6a0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	885b      	ldrh	r3, [r3, #2]
 800a6a6:	0a1b      	lsrs	r3, r3, #8
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	2b07      	cmp	r3, #7
 800a6ac:	d900      	bls.n	800a6b0 <USBD_GetDescriptor+0x2c>
 800a6ae:	e159      	b.n	800a964 <USBD_GetDescriptor+0x2e0>
 800a6b0:	009a      	lsls	r2, r3, #2
 800a6b2:	4bcb      	ldr	r3, [pc, #812]	@ (800a9e0 <USBD_GetDescriptor+0x35c>)
 800a6b4:	18d3      	adds	r3, r2, r3
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	23ac      	movs	r3, #172	@ 0xac
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	58d3      	ldr	r3, [r2, r3]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	7c12      	ldrb	r2, [r2, #16]
 800a6c8:	2108      	movs	r1, #8
 800a6ca:	1879      	adds	r1, r7, r1
 800a6cc:	0010      	movs	r0, r2
 800a6ce:	4798      	blx	r3
 800a6d0:	0003      	movs	r3, r0
 800a6d2:	60fb      	str	r3, [r7, #12]
      break;
 800a6d4:	e153      	b.n	800a97e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	7c1b      	ldrb	r3, [r3, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10f      	bne.n	800a6fe <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	23ad      	movs	r3, #173	@ 0xad
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	58d3      	ldr	r3, [r2, r3]
 800a6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e8:	2208      	movs	r2, #8
 800a6ea:	18ba      	adds	r2, r7, r2
 800a6ec:	0010      	movs	r0, r2
 800a6ee:	4798      	blx	r3
 800a6f0:	0003      	movs	r3, r0
 800a6f2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6fc:	e13f      	b.n	800a97e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	23ad      	movs	r3, #173	@ 0xad
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	58d3      	ldr	r3, [r2, r3]
 800a706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a708:	2208      	movs	r2, #8
 800a70a:	18ba      	adds	r2, r7, r2
 800a70c:	0010      	movs	r0, r2
 800a70e:	4798      	blx	r3
 800a710:	0003      	movs	r3, r0
 800a712:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	3301      	adds	r3, #1
 800a718:	2202      	movs	r2, #2
 800a71a:	701a      	strb	r2, [r3, #0]
      break;
 800a71c:	e12f      	b.n	800a97e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b05      	cmp	r3, #5
 800a726:	d900      	bls.n	800a72a <USBD_GetDescriptor+0xa6>
 800a728:	e0d0      	b.n	800a8cc <USBD_GetDescriptor+0x248>
 800a72a:	009a      	lsls	r2, r3, #2
 800a72c:	4bad      	ldr	r3, [pc, #692]	@ (800a9e4 <USBD_GetDescriptor+0x360>)
 800a72e:	18d3      	adds	r3, r2, r3
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	23ac      	movs	r3, #172	@ 0xac
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	58d3      	ldr	r3, [r2, r3]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00d      	beq.n	800a75e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	23ac      	movs	r3, #172	@ 0xac
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	58d3      	ldr	r3, [r2, r3]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	7c12      	ldrb	r2, [r2, #16]
 800a750:	2108      	movs	r1, #8
 800a752:	1879      	adds	r1, r7, r1
 800a754:	0010      	movs	r0, r2
 800a756:	4798      	blx	r3
 800a758:	0003      	movs	r3, r0
 800a75a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a75c:	e0c3      	b.n	800a8e6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	0011      	movs	r1, r2
 800a764:	0018      	movs	r0, r3
 800a766:	f000 fb20 	bl	800adaa <USBD_CtlError>
            err++;
 800a76a:	210b      	movs	r1, #11
 800a76c:	187b      	adds	r3, r7, r1
 800a76e:	781a      	ldrb	r2, [r3, #0]
 800a770:	187b      	adds	r3, r7, r1
 800a772:	3201      	adds	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
          break;
 800a776:	e0b6      	b.n	800a8e6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	23ac      	movs	r3, #172	@ 0xac
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	58d3      	ldr	r3, [r2, r3]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00d      	beq.n	800a7a2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	23ac      	movs	r3, #172	@ 0xac
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	58d3      	ldr	r3, [r2, r3]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	7c12      	ldrb	r2, [r2, #16]
 800a794:	2108      	movs	r1, #8
 800a796:	1879      	adds	r1, r7, r1
 800a798:	0010      	movs	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	0003      	movs	r3, r0
 800a79e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7a0:	e0a1      	b.n	800a8e6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	0011      	movs	r1, r2
 800a7a8:	0018      	movs	r0, r3
 800a7aa:	f000 fafe 	bl	800adaa <USBD_CtlError>
            err++;
 800a7ae:	210b      	movs	r1, #11
 800a7b0:	187b      	adds	r3, r7, r1
 800a7b2:	781a      	ldrb	r2, [r3, #0]
 800a7b4:	187b      	adds	r3, r7, r1
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	701a      	strb	r2, [r3, #0]
          break;
 800a7ba:	e094      	b.n	800a8e6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	23ac      	movs	r3, #172	@ 0xac
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	58d3      	ldr	r3, [r2, r3]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00d      	beq.n	800a7e6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	23ac      	movs	r3, #172	@ 0xac
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	58d3      	ldr	r3, [r2, r3]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	7c12      	ldrb	r2, [r2, #16]
 800a7d8:	2108      	movs	r1, #8
 800a7da:	1879      	adds	r1, r7, r1
 800a7dc:	0010      	movs	r0, r2
 800a7de:	4798      	blx	r3
 800a7e0:	0003      	movs	r3, r0
 800a7e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7e4:	e07f      	b.n	800a8e6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	0011      	movs	r1, r2
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	f000 fadc 	bl	800adaa <USBD_CtlError>
            err++;
 800a7f2:	210b      	movs	r1, #11
 800a7f4:	187b      	adds	r3, r7, r1
 800a7f6:	781a      	ldrb	r2, [r3, #0]
 800a7f8:	187b      	adds	r3, r7, r1
 800a7fa:	3201      	adds	r2, #1
 800a7fc:	701a      	strb	r2, [r3, #0]
          break;
 800a7fe:	e072      	b.n	800a8e6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	23ac      	movs	r3, #172	@ 0xac
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	58d3      	ldr	r3, [r2, r3]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00d      	beq.n	800a82a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	23ac      	movs	r3, #172	@ 0xac
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	58d3      	ldr	r3, [r2, r3]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	7c12      	ldrb	r2, [r2, #16]
 800a81c:	2108      	movs	r1, #8
 800a81e:	1879      	adds	r1, r7, r1
 800a820:	0010      	movs	r0, r2
 800a822:	4798      	blx	r3
 800a824:	0003      	movs	r3, r0
 800a826:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a828:	e05d      	b.n	800a8e6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	0011      	movs	r1, r2
 800a830:	0018      	movs	r0, r3
 800a832:	f000 faba 	bl	800adaa <USBD_CtlError>
            err++;
 800a836:	210b      	movs	r1, #11
 800a838:	187b      	adds	r3, r7, r1
 800a83a:	781a      	ldrb	r2, [r3, #0]
 800a83c:	187b      	adds	r3, r7, r1
 800a83e:	3201      	adds	r2, #1
 800a840:	701a      	strb	r2, [r3, #0]
          break;
 800a842:	e050      	b.n	800a8e6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	23ac      	movs	r3, #172	@ 0xac
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	58d3      	ldr	r3, [r2, r3]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00d      	beq.n	800a86e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	23ac      	movs	r3, #172	@ 0xac
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	58d3      	ldr	r3, [r2, r3]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	7c12      	ldrb	r2, [r2, #16]
 800a860:	2108      	movs	r1, #8
 800a862:	1879      	adds	r1, r7, r1
 800a864:	0010      	movs	r0, r2
 800a866:	4798      	blx	r3
 800a868:	0003      	movs	r3, r0
 800a86a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a86c:	e03b      	b.n	800a8e6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	0011      	movs	r1, r2
 800a874:	0018      	movs	r0, r3
 800a876:	f000 fa98 	bl	800adaa <USBD_CtlError>
            err++;
 800a87a:	210b      	movs	r1, #11
 800a87c:	187b      	adds	r3, r7, r1
 800a87e:	781a      	ldrb	r2, [r3, #0]
 800a880:	187b      	adds	r3, r7, r1
 800a882:	3201      	adds	r2, #1
 800a884:	701a      	strb	r2, [r3, #0]
          break;
 800a886:	e02e      	b.n	800a8e6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	23ac      	movs	r3, #172	@ 0xac
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	58d3      	ldr	r3, [r2, r3]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00d      	beq.n	800a8b2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	23ac      	movs	r3, #172	@ 0xac
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	58d3      	ldr	r3, [r2, r3]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	7c12      	ldrb	r2, [r2, #16]
 800a8a4:	2108      	movs	r1, #8
 800a8a6:	1879      	adds	r1, r7, r1
 800a8a8:	0010      	movs	r0, r2
 800a8aa:	4798      	blx	r3
 800a8ac:	0003      	movs	r3, r0
 800a8ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8b0:	e019      	b.n	800a8e6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	0011      	movs	r1, r2
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	f000 fa76 	bl	800adaa <USBD_CtlError>
            err++;
 800a8be:	210b      	movs	r1, #11
 800a8c0:	187b      	adds	r3, r7, r1
 800a8c2:	781a      	ldrb	r2, [r3, #0]
 800a8c4:	187b      	adds	r3, r7, r1
 800a8c6:	3201      	adds	r2, #1
 800a8c8:	701a      	strb	r2, [r3, #0]
          break;
 800a8ca:	e00c      	b.n	800a8e6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	0011      	movs	r1, r2
 800a8d2:	0018      	movs	r0, r3
 800a8d4:	f000 fa69 	bl	800adaa <USBD_CtlError>
          err++;
 800a8d8:	210b      	movs	r1, #11
 800a8da:	187b      	adds	r3, r7, r1
 800a8dc:	781a      	ldrb	r2, [r3, #0]
 800a8de:	187b      	adds	r3, r7, r1
 800a8e0:	3201      	adds	r2, #1
 800a8e2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a8e4:	e04b      	b.n	800a97e <USBD_GetDescriptor+0x2fa>
 800a8e6:	e04a      	b.n	800a97e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	7c1b      	ldrb	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10b      	bne.n	800a908 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	23ad      	movs	r3, #173	@ 0xad
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	58d3      	ldr	r3, [r2, r3]
 800a8f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8fa:	2208      	movs	r2, #8
 800a8fc:	18ba      	adds	r2, r7, r2
 800a8fe:	0010      	movs	r0, r2
 800a900:	4798      	blx	r3
 800a902:	0003      	movs	r3, r0
 800a904:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a906:	e03a      	b.n	800a97e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	0011      	movs	r1, r2
 800a90e:	0018      	movs	r0, r3
 800a910:	f000 fa4b 	bl	800adaa <USBD_CtlError>
        err++;
 800a914:	210b      	movs	r1, #11
 800a916:	187b      	adds	r3, r7, r1
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	187b      	adds	r3, r7, r1
 800a91c:	3201      	adds	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
      break;
 800a920:	e02d      	b.n	800a97e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	7c1b      	ldrb	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10f      	bne.n	800a94a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	23ad      	movs	r3, #173	@ 0xad
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	58d3      	ldr	r3, [r2, r3]
 800a932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a934:	2208      	movs	r2, #8
 800a936:	18ba      	adds	r2, r7, r2
 800a938:	0010      	movs	r0, r2
 800a93a:	4798      	blx	r3
 800a93c:	0003      	movs	r3, r0
 800a93e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	3301      	adds	r3, #1
 800a944:	2207      	movs	r2, #7
 800a946:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a948:	e019      	b.n	800a97e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	0011      	movs	r1, r2
 800a950:	0018      	movs	r0, r3
 800a952:	f000 fa2a 	bl	800adaa <USBD_CtlError>
        err++;
 800a956:	210b      	movs	r1, #11
 800a958:	187b      	adds	r3, r7, r1
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	187b      	adds	r3, r7, r1
 800a95e:	3201      	adds	r2, #1
 800a960:	701a      	strb	r2, [r3, #0]
      break;
 800a962:	e00c      	b.n	800a97e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	0011      	movs	r1, r2
 800a96a:	0018      	movs	r0, r3
 800a96c:	f000 fa1d 	bl	800adaa <USBD_CtlError>
      err++;
 800a970:	210b      	movs	r1, #11
 800a972:	187b      	adds	r3, r7, r1
 800a974:	781a      	ldrb	r2, [r3, #0]
 800a976:	187b      	adds	r3, r7, r1
 800a978:	3201      	adds	r2, #1
 800a97a:	701a      	strb	r2, [r3, #0]
      break;
 800a97c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800a97e:	230b      	movs	r3, #11
 800a980:	18fb      	adds	r3, r7, r3
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d127      	bne.n	800a9d8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a988:	2108      	movs	r1, #8
 800a98a:	187b      	adds	r3, r7, r1
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d019      	beq.n	800a9c6 <USBD_GetDescriptor+0x342>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	88db      	ldrh	r3, [r3, #6]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d015      	beq.n	800a9c6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	88da      	ldrh	r2, [r3, #6]
 800a99e:	187b      	adds	r3, r7, r1
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	1c18      	adds	r0, r3, #0
 800a9a4:	1c11      	adds	r1, r2, #0
 800a9a6:	b28a      	uxth	r2, r1
 800a9a8:	b283      	uxth	r3, r0
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d900      	bls.n	800a9b0 <USBD_GetDescriptor+0x32c>
 800a9ae:	1c01      	adds	r1, r0, #0
 800a9b0:	b28a      	uxth	r2, r1
 800a9b2:	2108      	movs	r1, #8
 800a9b4:	187b      	adds	r3, r7, r1
 800a9b6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9b8:	187b      	adds	r3, r7, r1
 800a9ba:	881a      	ldrh	r2, [r3, #0]
 800a9bc:	68f9      	ldr	r1, [r7, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	0018      	movs	r0, r3
 800a9c2:	f000 fa70 	bl	800aea6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	88db      	ldrh	r3, [r3, #6]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d105      	bne.n	800a9da <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	f000 fad2 	bl	800af7a <USBD_CtlSendStatus>
 800a9d6:	e000      	b.n	800a9da <USBD_GetDescriptor+0x356>
    return;
 800a9d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	b004      	add	sp, #16
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	0800d914 	.word	0x0800d914
 800a9e4:	0800d934 	.word	0x0800d934

0800a9e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a9e8:	b590      	push	{r4, r7, lr}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	889b      	ldrh	r3, [r3, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d13d      	bne.n	800aa76 <USBD_SetAddress+0x8e>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	88db      	ldrh	r3, [r3, #6]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d139      	bne.n	800aa76 <USBD_SetAddress+0x8e>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	885b      	ldrh	r3, [r3, #2]
 800aa06:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa08:	d835      	bhi.n	800aa76 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	885b      	ldrh	r3, [r3, #2]
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	230f      	movs	r3, #15
 800aa12:	18fb      	adds	r3, r7, r3
 800aa14:	217f      	movs	r1, #127	@ 0x7f
 800aa16:	400a      	ands	r2, r1
 800aa18:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	23a7      	movs	r3, #167	@ 0xa7
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	5cd3      	ldrb	r3, [r2, r3]
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d106      	bne.n	800aa34 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	0011      	movs	r1, r2
 800aa2c:	0018      	movs	r0, r3
 800aa2e:	f000 f9bc 	bl	800adaa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa32:	e027      	b.n	800aa84 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	240f      	movs	r4, #15
 800aa38:	193a      	adds	r2, r7, r4
 800aa3a:	4914      	ldr	r1, [pc, #80]	@ (800aa8c <USBD_SetAddress+0xa4>)
 800aa3c:	7812      	ldrb	r2, [r2, #0]
 800aa3e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa40:	193b      	adds	r3, r7, r4
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	0011      	movs	r1, r2
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f000 fefc 	bl	800b846 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	0018      	movs	r0, r3
 800aa52:	f000 fa92 	bl	800af7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa56:	193b      	adds	r3, r7, r4
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d005      	beq.n	800aa6a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	23a7      	movs	r3, #167	@ 0xa7
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	2102      	movs	r1, #2
 800aa66:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa68:	e00c      	b.n	800aa84 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	23a7      	movs	r3, #167	@ 0xa7
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	2101      	movs	r1, #1
 800aa72:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa74:	e006      	b.n	800aa84 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	0011      	movs	r1, r2
 800aa7c:	0018      	movs	r0, r3
 800aa7e:	f000 f994 	bl	800adaa <USBD_CtlError>
  }
}
 800aa82:	46c0      	nop			@ (mov r8, r8)
 800aa84:	46c0      	nop			@ (mov r8, r8)
 800aa86:	46bd      	mov	sp, r7
 800aa88:	b005      	add	sp, #20
 800aa8a:	bd90      	pop	{r4, r7, pc}
 800aa8c:	0000029e 	.word	0x0000029e

0800aa90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	885b      	ldrh	r3, [r3, #2]
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	4b4c      	ldr	r3, [pc, #304]	@ (800abd4 <USBD_SetConfig+0x144>)
 800aaa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aaa4:	4b4b      	ldr	r3, [pc, #300]	@ (800abd4 <USBD_SetConfig+0x144>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d906      	bls.n	800aaba <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	0011      	movs	r1, r2
 800aab2:	0018      	movs	r0, r3
 800aab4:	f000 f979 	bl	800adaa <USBD_CtlError>
 800aab8:	e088      	b.n	800abcc <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	23a7      	movs	r3, #167	@ 0xa7
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	5cd3      	ldrb	r3, [r2, r3]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d002      	beq.n	800aacc <USBD_SetConfig+0x3c>
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	d029      	beq.n	800ab1e <USBD_SetConfig+0x8e>
 800aaca:	e071      	b.n	800abb0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aacc:	4b41      	ldr	r3, [pc, #260]	@ (800abd4 <USBD_SetConfig+0x144>)
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d01f      	beq.n	800ab14 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800aad4:	4b3f      	ldr	r3, [pc, #252]	@ (800abd4 <USBD_SetConfig+0x144>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	001a      	movs	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	23a7      	movs	r3, #167	@ 0xa7
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	2103      	movs	r1, #3
 800aae6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aae8:	4b3a      	ldr	r3, [pc, #232]	@ (800abd4 <USBD_SetConfig+0x144>)
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	0011      	movs	r1, r2
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	f7ff f8c6 	bl	8009c82 <USBD_SetClassConfig>
 800aaf6:	0003      	movs	r3, r0
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d106      	bne.n	800ab0a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	0011      	movs	r1, r2
 800ab02:	0018      	movs	r0, r3
 800ab04:	f000 f951 	bl	800adaa <USBD_CtlError>
            return;
 800ab08:	e060      	b.n	800abcc <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	0018      	movs	r0, r3
 800ab0e:	f000 fa34 	bl	800af7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ab12:	e05b      	b.n	800abcc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	0018      	movs	r0, r3
 800ab18:	f000 fa2f 	bl	800af7a <USBD_CtlSendStatus>
        break;
 800ab1c:	e056      	b.n	800abcc <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ab1e:	4b2d      	ldr	r3, [pc, #180]	@ (800abd4 <USBD_SetConfig+0x144>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d115      	bne.n	800ab52 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	23a7      	movs	r3, #167	@ 0xa7
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	2102      	movs	r1, #2
 800ab2e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800ab30:	4b28      	ldr	r3, [pc, #160]	@ (800abd4 <USBD_SetConfig+0x144>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	001a      	movs	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ab3a:	4b26      	ldr	r3, [pc, #152]	@ (800abd4 <USBD_SetConfig+0x144>)
 800ab3c:	781a      	ldrb	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	0011      	movs	r1, r2
 800ab42:	0018      	movs	r0, r3
 800ab44:	f7ff f8c4 	bl	8009cd0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	0018      	movs	r0, r3
 800ab4c:	f000 fa15 	bl	800af7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ab50:	e03c      	b.n	800abcc <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800ab52:	4b20      	ldr	r3, [pc, #128]	@ (800abd4 <USBD_SetConfig+0x144>)
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	001a      	movs	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d022      	beq.n	800aba6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	0011      	movs	r1, r2
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	f7ff f8b0 	bl	8009cd0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ab70:	4b18      	ldr	r3, [pc, #96]	@ (800abd4 <USBD_SetConfig+0x144>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	001a      	movs	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab7a:	4b16      	ldr	r3, [pc, #88]	@ (800abd4 <USBD_SetConfig+0x144>)
 800ab7c:	781a      	ldrb	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	0011      	movs	r1, r2
 800ab82:	0018      	movs	r0, r3
 800ab84:	f7ff f87d 	bl	8009c82 <USBD_SetClassConfig>
 800ab88:	0003      	movs	r3, r0
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d106      	bne.n	800ab9c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	0011      	movs	r1, r2
 800ab94:	0018      	movs	r0, r3
 800ab96:	f000 f908 	bl	800adaa <USBD_CtlError>
            return;
 800ab9a:	e017      	b.n	800abcc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	0018      	movs	r0, r3
 800aba0:	f000 f9eb 	bl	800af7a <USBD_CtlSendStatus>
        break;
 800aba4:	e012      	b.n	800abcc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	0018      	movs	r0, r3
 800abaa:	f000 f9e6 	bl	800af7a <USBD_CtlSendStatus>
        break;
 800abae:	e00d      	b.n	800abcc <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	0011      	movs	r1, r2
 800abb6:	0018      	movs	r0, r3
 800abb8:	f000 f8f7 	bl	800adaa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800abbc:	4b05      	ldr	r3, [pc, #20]	@ (800abd4 <USBD_SetConfig+0x144>)
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	0011      	movs	r1, r2
 800abc4:	0018      	movs	r0, r3
 800abc6:	f7ff f883 	bl	8009cd0 <USBD_ClrClassConfig>
        break;
 800abca:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800abcc:	46bd      	mov	sp, r7
 800abce:	b002      	add	sp, #8
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	46c0      	nop			@ (mov r8, r8)
 800abd4:	20000420 	.word	0x20000420

0800abd8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	88db      	ldrh	r3, [r3, #6]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d006      	beq.n	800abf8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	0011      	movs	r1, r2
 800abf0:	0018      	movs	r0, r3
 800abf2:	f000 f8da 	bl	800adaa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abf6:	e026      	b.n	800ac46 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	23a7      	movs	r3, #167	@ 0xa7
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	5cd3      	ldrb	r3, [r2, r3]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	dc02      	bgt.n	800ac0a <USBD_GetConfig+0x32>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	dc03      	bgt.n	800ac10 <USBD_GetConfig+0x38>
 800ac08:	e016      	b.n	800ac38 <USBD_GetConfig+0x60>
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d00c      	beq.n	800ac28 <USBD_GetConfig+0x50>
 800ac0e:	e013      	b.n	800ac38 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	0019      	movs	r1, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	0018      	movs	r0, r3
 800ac22:	f000 f940 	bl	800aea6 <USBD_CtlSendData>
        break;
 800ac26:	e00e      	b.n	800ac46 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	1d19      	adds	r1, r3, #4
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	0018      	movs	r0, r3
 800ac32:	f000 f938 	bl	800aea6 <USBD_CtlSendData>
        break;
 800ac36:	e006      	b.n	800ac46 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	0011      	movs	r1, r2
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f000 f8b3 	bl	800adaa <USBD_CtlError>
        break;
 800ac44:	46c0      	nop			@ (mov r8, r8)
}
 800ac46:	46c0      	nop			@ (mov r8, r8)
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	b002      	add	sp, #8
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	23a7      	movs	r3, #167	@ 0xa7
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	5cd3      	ldrb	r3, [r2, r3]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d822      	bhi.n	800acac <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	88db      	ldrh	r3, [r3, #6]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d006      	beq.n	800ac7c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	0011      	movs	r1, r2
 800ac74:	0018      	movs	r0, r3
 800ac76:	f000 f898 	bl	800adaa <USBD_CtlError>
        break;
 800ac7a:	e01e      	b.n	800acba <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	23a9      	movs	r3, #169	@ 0xa9
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	58d3      	ldr	r3, [r2, r3]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d005      	beq.n	800ac9a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	2202      	movs	r2, #2
 800ac94:	431a      	orrs	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	0019      	movs	r1, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2202      	movs	r2, #2
 800aca4:	0018      	movs	r0, r3
 800aca6:	f000 f8fe 	bl	800aea6 <USBD_CtlSendData>
      break;
 800acaa:	e006      	b.n	800acba <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	0011      	movs	r1, r2
 800acb2:	0018      	movs	r0, r3
 800acb4:	f000 f879 	bl	800adaa <USBD_CtlError>
      break;
 800acb8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800acba:	46c0      	nop			@ (mov r8, r8)
 800acbc:	46bd      	mov	sp, r7
 800acbe:	b002      	add	sp, #8
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b082      	sub	sp, #8
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	885b      	ldrh	r3, [r3, #2]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d108      	bne.n	800ace6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	23a9      	movs	r3, #169	@ 0xa9
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	2101      	movs	r1, #1
 800acdc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	0018      	movs	r0, r3
 800ace2:	f000 f94a 	bl	800af7a <USBD_CtlSendStatus>
  }
}
 800ace6:	46c0      	nop			@ (mov r8, r8)
 800ace8:	46bd      	mov	sp, r7
 800acea:	b002      	add	sp, #8
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	23a7      	movs	r3, #167	@ 0xa7
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	5cd3      	ldrb	r3, [r2, r3]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d80d      	bhi.n	800ad22 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d110      	bne.n	800ad30 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	23a9      	movs	r3, #169	@ 0xa9
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	2100      	movs	r1, #0
 800ad16:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f000 f92d 	bl	800af7a <USBD_CtlSendStatus>
      }
      break;
 800ad20:	e006      	b.n	800ad30 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	0011      	movs	r1, r2
 800ad28:	0018      	movs	r0, r3
 800ad2a:	f000 f83e 	bl	800adaa <USBD_CtlError>
      break;
 800ad2e:	e000      	b.n	800ad32 <USBD_ClrFeature+0x44>
      break;
 800ad30:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ad32:	46c0      	nop			@ (mov r8, r8)
 800ad34:	46bd      	mov	sp, r7
 800ad36:	b002      	add	sp, #8
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	781a      	ldrb	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	785a      	ldrb	r2, [r3, #1]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	3302      	adds	r3, #2
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	001a      	movs	r2, r3
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	3303      	adds	r3, #3
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	18d3      	adds	r3, r2, r3
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	3304      	adds	r3, #4
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	001a      	movs	r2, r3
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	3305      	adds	r3, #5
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	18d3      	adds	r3, r2, r3
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	3306      	adds	r3, #6
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	001a      	movs	r2, r3
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	3307      	adds	r3, #7
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	18d3      	adds	r3, r2, r3
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	80da      	strh	r2, [r3, #6]

}
 800ada2:	46c0      	nop			@ (mov r8, r8)
 800ada4:	46bd      	mov	sp, r7
 800ada6:	b002      	add	sp, #8
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2180      	movs	r1, #128	@ 0x80
 800adb8:	0018      	movs	r0, r3
 800adba:	f000 fcbe 	bl	800b73a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2100      	movs	r1, #0
 800adc2:	0018      	movs	r0, r3
 800adc4:	f000 fcb9 	bl	800b73a <USBD_LL_StallEP>
}
 800adc8:	46c0      	nop			@ (mov r8, r8)
 800adca:	46bd      	mov	sp, r7
 800adcc:	b002      	add	sp, #8
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800add0:	b590      	push	{r4, r7, lr}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800addc:	2417      	movs	r4, #23
 800adde:	193b      	adds	r3, r7, r4
 800ade0:	2200      	movs	r2, #0
 800ade2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d03c      	beq.n	800ae64 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	0018      	movs	r0, r3
 800adee:	f000 f83d 	bl	800ae6c <USBD_GetLen>
 800adf2:	0003      	movs	r3, r0
 800adf4:	3301      	adds	r3, #1
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	18db      	adds	r3, r3, r3
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ae00:	193b      	adds	r3, r7, r4
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	193a      	adds	r2, r7, r4
 800ae06:	1c59      	adds	r1, r3, #1
 800ae08:	7011      	strb	r1, [r2, #0]
 800ae0a:	001a      	movs	r2, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	7812      	ldrb	r2, [r2, #0]
 800ae14:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ae16:	193b      	adds	r3, r7, r4
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	193a      	adds	r2, r7, r4
 800ae1c:	1c59      	adds	r1, r3, #1
 800ae1e:	7011      	strb	r1, [r2, #0]
 800ae20:	001a      	movs	r2, r3
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	189b      	adds	r3, r3, r2
 800ae26:	2203      	movs	r2, #3
 800ae28:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ae2a:	e017      	b.n	800ae5c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	60fa      	str	r2, [r7, #12]
 800ae32:	2417      	movs	r4, #23
 800ae34:	193a      	adds	r2, r7, r4
 800ae36:	7812      	ldrb	r2, [r2, #0]
 800ae38:	1939      	adds	r1, r7, r4
 800ae3a:	1c50      	adds	r0, r2, #1
 800ae3c:	7008      	strb	r0, [r1, #0]
 800ae3e:	0011      	movs	r1, r2
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	1852      	adds	r2, r2, r1
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ae48:	193b      	adds	r3, r7, r4
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	193a      	adds	r2, r7, r4
 800ae4e:	1c59      	adds	r1, r3, #1
 800ae50:	7011      	strb	r1, [r2, #0]
 800ae52:	001a      	movs	r2, r3
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	189b      	adds	r3, r3, r2
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e3      	bne.n	800ae2c <USBD_GetString+0x5c>
    }
  }
}
 800ae64:	46c0      	nop			@ (mov r8, r8)
 800ae66:	46bd      	mov	sp, r7
 800ae68:	b007      	add	sp, #28
 800ae6a:	bd90      	pop	{r4, r7, pc}

0800ae6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae74:	230f      	movs	r3, #15
 800ae76:	18fb      	adds	r3, r7, r3
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800ae7c:	e008      	b.n	800ae90 <USBD_GetLen+0x24>
  {
    len++;
 800ae7e:	210f      	movs	r1, #15
 800ae80:	187b      	adds	r3, r7, r1
 800ae82:	781a      	ldrb	r2, [r3, #0]
 800ae84:	187b      	adds	r3, r7, r1
 800ae86:	3201      	adds	r2, #1
 800ae88:	701a      	strb	r2, [r3, #0]
    buf++;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1f2      	bne.n	800ae7e <USBD_GetLen+0x12>
  }

  return len;
 800ae98:	230f      	movs	r3, #15
 800ae9a:	18fb      	adds	r3, r7, r3
 800ae9c:	781b      	ldrb	r3, [r3, #0]
}
 800ae9e:	0018      	movs	r0, r3
 800aea0:	46bd      	mov	sp, r7
 800aea2:	b004      	add	sp, #16
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	1dbb      	adds	r3, r7, #6
 800aeb2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	23a5      	movs	r3, #165	@ 0xa5
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	2102      	movs	r1, #2
 800aebc:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800aebe:	1dbb      	adds	r3, r7, #6
 800aec0:	881a      	ldrh	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800aec6:	1dbb      	adds	r3, r7, #6
 800aec8:	881a      	ldrh	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aece:	1dbb      	adds	r3, r7, #6
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	2100      	movs	r1, #0
 800aed8:	f000 fce0 	bl	800b89c <USBD_LL_Transmit>

  return USBD_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	0018      	movs	r0, r3
 800aee0:	46bd      	mov	sp, r7
 800aee2:	b004      	add	sp, #16
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	60f8      	str	r0, [r7, #12]
 800aeee:	60b9      	str	r1, [r7, #8]
 800aef0:	1dbb      	adds	r3, r7, #6
 800aef2:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aef4:	1dbb      	adds	r3, r7, #6
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	2100      	movs	r1, #0
 800aefe:	f000 fccd 	bl	800b89c <USBD_LL_Transmit>

  return USBD_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	0018      	movs	r0, r3
 800af06:	46bd      	mov	sp, r7
 800af08:	b004      	add	sp, #16
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	1dbb      	adds	r3, r7, #6
 800af18:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	23a5      	movs	r3, #165	@ 0xa5
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	2103      	movs	r1, #3
 800af22:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800af24:	1dbb      	adds	r3, r7, #6
 800af26:	8819      	ldrh	r1, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	23ae      	movs	r3, #174	@ 0xae
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800af30:	1dbb      	adds	r3, r7, #6
 800af32:	8819      	ldrh	r1, [r3, #0]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	23b0      	movs	r3, #176	@ 0xb0
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af3c:	1dbb      	adds	r3, r7, #6
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	2100      	movs	r1, #0
 800af46:	f000 fce0 	bl	800b90a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	0018      	movs	r0, r3
 800af4e:	46bd      	mov	sp, r7
 800af50:	b004      	add	sp, #16
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	1dbb      	adds	r3, r7, #6
 800af60:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af62:	1dbb      	adds	r3, r7, #6
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	2100      	movs	r1, #0
 800af6c:	f000 fccd 	bl	800b90a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	0018      	movs	r0, r3
 800af74:	46bd      	mov	sp, r7
 800af76:	b004      	add	sp, #16
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	23a5      	movs	r3, #165	@ 0xa5
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	2104      	movs	r1, #4
 800af8a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	2300      	movs	r3, #0
 800af90:	2200      	movs	r2, #0
 800af92:	2100      	movs	r1, #0
 800af94:	f000 fc82 	bl	800b89c <USBD_LL_Transmit>

  return USBD_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	0018      	movs	r0, r3
 800af9c:	46bd      	mov	sp, r7
 800af9e:	b002      	add	sp, #8
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b082      	sub	sp, #8
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	23a5      	movs	r3, #165	@ 0xa5
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	2105      	movs	r1, #5
 800afb2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	2300      	movs	r3, #0
 800afb8:	2200      	movs	r2, #0
 800afba:	2100      	movs	r1, #0
 800afbc:	f000 fca5 	bl	800b90a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	0018      	movs	r0, r3
 800afc4:	46bd      	mov	sp, r7
 800afc6:	b002      	add	sp, #8
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800afd0:	4914      	ldr	r1, [pc, #80]	@ (800b024 <MX_USB_DEVICE_Init+0x58>)
 800afd2:	4b15      	ldr	r3, [pc, #84]	@ (800b028 <MX_USB_DEVICE_Init+0x5c>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	0018      	movs	r0, r3
 800afd8:	f7fe fdec 	bl	8009bb4 <USBD_Init>
 800afdc:	1e03      	subs	r3, r0, #0
 800afde:	d001      	beq.n	800afe4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800afe0:	f7f7 fe5c 	bl	8002c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800afe4:	4a11      	ldr	r2, [pc, #68]	@ (800b02c <MX_USB_DEVICE_Init+0x60>)
 800afe6:	4b10      	ldr	r3, [pc, #64]	@ (800b028 <MX_USB_DEVICE_Init+0x5c>)
 800afe8:	0011      	movs	r1, r2
 800afea:	0018      	movs	r0, r3
 800afec:	f7fe fe13 	bl	8009c16 <USBD_RegisterClass>
 800aff0:	1e03      	subs	r3, r0, #0
 800aff2:	d001      	beq.n	800aff8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800aff4:	f7f7 fe52 	bl	8002c9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aff8:	4a0d      	ldr	r2, [pc, #52]	@ (800b030 <MX_USB_DEVICE_Init+0x64>)
 800affa:	4b0b      	ldr	r3, [pc, #44]	@ (800b028 <MX_USB_DEVICE_Init+0x5c>)
 800affc:	0011      	movs	r1, r2
 800affe:	0018      	movs	r0, r3
 800b000:	f7fe fd28 	bl	8009a54 <USBD_CDC_RegisterInterface>
 800b004:	1e03      	subs	r3, r0, #0
 800b006:	d001      	beq.n	800b00c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800b008:	f7f7 fe48 	bl	8002c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b00c:	4b06      	ldr	r3, [pc, #24]	@ (800b028 <MX_USB_DEVICE_Init+0x5c>)
 800b00e:	0018      	movs	r0, r3
 800b010:	f7fe fe21 	bl	8009c56 <USBD_Start>
 800b014:	1e03      	subs	r3, r0, #0
 800b016:	d001      	beq.n	800b01c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800b018:	f7f7 fe40 	bl	8002c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b01c:	46c0      	nop			@ (mov r8, r8)
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	46c0      	nop			@ (mov r8, r8)
 800b024:	2000016c 	.word	0x2000016c
 800b028:	20000424 	.word	0x20000424
 800b02c:	20000058 	.word	0x20000058
 800b030:	2000015c 	.word	0x2000015c

0800b034 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b038:	4907      	ldr	r1, [pc, #28]	@ (800b058 <CDC_Init_FS+0x24>)
 800b03a:	4b08      	ldr	r3, [pc, #32]	@ (800b05c <CDC_Init_FS+0x28>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	0018      	movs	r0, r3
 800b040:	f7fe fd23 	bl	8009a8a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b044:	4a06      	ldr	r2, [pc, #24]	@ (800b060 <CDC_Init_FS+0x2c>)
 800b046:	4b05      	ldr	r3, [pc, #20]	@ (800b05c <CDC_Init_FS+0x28>)
 800b048:	0011      	movs	r1, r2
 800b04a:	0018      	movs	r0, r3
 800b04c:	f7fe fd39 	bl	8009ac2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b050:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b052:	0018      	movs	r0, r3
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20000ae8 	.word	0x20000ae8
 800b05c:	20000424 	.word	0x20000424
 800b060:	200006e8 	.word	0x200006e8

0800b064 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b068:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b06a:	0018      	movs	r0, r3
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6039      	str	r1, [r7, #0]
 800b078:	0011      	movs	r1, r2
 800b07a:	1dfb      	adds	r3, r7, #7
 800b07c:	1c02      	adds	r2, r0, #0
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	1d3b      	adds	r3, r7, #4
 800b082:	1c0a      	adds	r2, r1, #0
 800b084:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b086:	1dfb      	adds	r3, r7, #7
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b23      	cmp	r3, #35	@ 0x23
 800b08c:	d804      	bhi.n	800b098 <CDC_Control_FS+0x28>
 800b08e:	009a      	lsls	r2, r3, #2
 800b090:	4b04      	ldr	r3, [pc, #16]	@ (800b0a4 <CDC_Control_FS+0x34>)
 800b092:	18d3      	adds	r3, r2, r3
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b098:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800b09a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b09c:	0018      	movs	r0, r3
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	b002      	add	sp, #8
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	0800d94c 	.word	0x0800d94c

0800b0a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	4b06      	ldr	r3, [pc, #24]	@ (800b0d0 <CDC_Receive_FS+0x28>)
 800b0b6:	0011      	movs	r1, r2
 800b0b8:	0018      	movs	r0, r3
 800b0ba:	f7fe fd02 	bl	8009ac2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b0be:	4b04      	ldr	r3, [pc, #16]	@ (800b0d0 <CDC_Receive_FS+0x28>)
 800b0c0:	0018      	movs	r0, r3
 800b0c2:	f7fe fd49 	bl	8009b58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b0c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0c8:	0018      	movs	r0, r3
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	b002      	add	sp, #8
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20000424 	.word	0x20000424

0800b0d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b0d4:	b5b0      	push	{r4, r5, r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	000a      	movs	r2, r1
 800b0de:	1cbb      	adds	r3, r7, #2
 800b0e0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800b0e2:	230f      	movs	r3, #15
 800b0e4:	18fb      	adds	r3, r7, r3
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b0ea:	4a11      	ldr	r2, [pc, #68]	@ (800b130 <CDC_Transmit_FS+0x5c>)
 800b0ec:	23ae      	movs	r3, #174	@ 0xae
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	58d3      	ldr	r3, [r2, r3]
 800b0f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	2385      	movs	r3, #133	@ 0x85
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	58d3      	ldr	r3, [r2, r3]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800b100:	2301      	movs	r3, #1
 800b102:	e010      	b.n	800b126 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b104:	1cbb      	adds	r3, r7, #2
 800b106:	881a      	ldrh	r2, [r3, #0]
 800b108:	6879      	ldr	r1, [r7, #4]
 800b10a:	4b09      	ldr	r3, [pc, #36]	@ (800b130 <CDC_Transmit_FS+0x5c>)
 800b10c:	0018      	movs	r0, r3
 800b10e:	f7fe fcbc 	bl	8009a8a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b112:	250f      	movs	r5, #15
 800b114:	197c      	adds	r4, r7, r5
 800b116:	4b06      	ldr	r3, [pc, #24]	@ (800b130 <CDC_Transmit_FS+0x5c>)
 800b118:	0018      	movs	r0, r3
 800b11a:	f7fe fce6 	bl	8009aea <USBD_CDC_TransmitPacket>
 800b11e:	0003      	movs	r3, r0
 800b120:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b122:	197b      	adds	r3, r7, r5
 800b124:	781b      	ldrb	r3, [r3, #0]
}
 800b126:	0018      	movs	r0, r3
 800b128:	46bd      	mov	sp, r7
 800b12a:	b004      	add	sp, #16
 800b12c:	bdb0      	pop	{r4, r5, r7, pc}
 800b12e:	46c0      	nop			@ (mov r8, r8)
 800b130:	20000424 	.word	0x20000424

0800b134 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	0002      	movs	r2, r0
 800b13c:	6039      	str	r1, [r7, #0]
 800b13e:	1dfb      	adds	r3, r7, #7
 800b140:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2212      	movs	r2, #18
 800b146:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b148:	4b02      	ldr	r3, [pc, #8]	@ (800b154 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b14a:	0018      	movs	r0, r3
 800b14c:	46bd      	mov	sp, r7
 800b14e:	b002      	add	sp, #8
 800b150:	bd80      	pop	{r7, pc}
 800b152:	46c0      	nop			@ (mov r8, r8)
 800b154:	20000188 	.word	0x20000188

0800b158 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	0002      	movs	r2, r0
 800b160:	6039      	str	r1, [r7, #0]
 800b162:	1dfb      	adds	r3, r7, #7
 800b164:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2204      	movs	r2, #4
 800b16a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b16c:	4b02      	ldr	r3, [pc, #8]	@ (800b178 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b16e:	0018      	movs	r0, r3
 800b170:	46bd      	mov	sp, r7
 800b172:	b002      	add	sp, #8
 800b174:	bd80      	pop	{r7, pc}
 800b176:	46c0      	nop			@ (mov r8, r8)
 800b178:	2000019c 	.word	0x2000019c

0800b17c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	0002      	movs	r2, r0
 800b184:	6039      	str	r1, [r7, #0]
 800b186:	1dfb      	adds	r3, r7, #7
 800b188:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b18a:	1dfb      	adds	r3, r7, #7
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	4908      	ldr	r1, [pc, #32]	@ (800b1b8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b196:	4b09      	ldr	r3, [pc, #36]	@ (800b1bc <USBD_FS_ProductStrDescriptor+0x40>)
 800b198:	0018      	movs	r0, r3
 800b19a:	f7ff fe19 	bl	800add0 <USBD_GetString>
 800b19e:	e005      	b.n	800b1ac <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	4905      	ldr	r1, [pc, #20]	@ (800b1b8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b1a4:	4b05      	ldr	r3, [pc, #20]	@ (800b1bc <USBD_FS_ProductStrDescriptor+0x40>)
 800b1a6:	0018      	movs	r0, r3
 800b1a8:	f7ff fe12 	bl	800add0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1ac:	4b02      	ldr	r3, [pc, #8]	@ (800b1b8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	b002      	add	sp, #8
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	46c0      	nop			@ (mov r8, r8)
 800b1b8:	20000ee8 	.word	0x20000ee8
 800b1bc:	0800d82c 	.word	0x0800d82c

0800b1c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	0002      	movs	r2, r0
 800b1c8:	6039      	str	r1, [r7, #0]
 800b1ca:	1dfb      	adds	r3, r7, #7
 800b1cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	4904      	ldr	r1, [pc, #16]	@ (800b1e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b1d2:	4b05      	ldr	r3, [pc, #20]	@ (800b1e8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	f7ff fdfb 	bl	800add0 <USBD_GetString>
  return USBD_StrDesc;
 800b1da:	4b02      	ldr	r3, [pc, #8]	@ (800b1e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b1dc:	0018      	movs	r0, r3
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	b002      	add	sp, #8
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	20000ee8 	.word	0x20000ee8
 800b1e8:	0800d844 	.word	0x0800d844

0800b1ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	0002      	movs	r2, r0
 800b1f4:	6039      	str	r1, [r7, #0]
 800b1f6:	1dfb      	adds	r3, r7, #7
 800b1f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	221a      	movs	r2, #26
 800b1fe:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b200:	f000 f84c 	bl	800b29c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b204:	4b02      	ldr	r3, [pc, #8]	@ (800b210 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b206:	0018      	movs	r0, r3
 800b208:	46bd      	mov	sp, r7
 800b20a:	b002      	add	sp, #8
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	46c0      	nop			@ (mov r8, r8)
 800b210:	200001a0 	.word	0x200001a0

0800b214 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	0002      	movs	r2, r0
 800b21c:	6039      	str	r1, [r7, #0]
 800b21e:	1dfb      	adds	r3, r7, #7
 800b220:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b222:	1dfb      	adds	r3, r7, #7
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d106      	bne.n	800b238 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	4908      	ldr	r1, [pc, #32]	@ (800b250 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b22e:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b230:	0018      	movs	r0, r3
 800b232:	f7ff fdcd 	bl	800add0 <USBD_GetString>
 800b236:	e005      	b.n	800b244 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	4905      	ldr	r1, [pc, #20]	@ (800b250 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b23c:	4b05      	ldr	r3, [pc, #20]	@ (800b254 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b23e:	0018      	movs	r0, r3
 800b240:	f7ff fdc6 	bl	800add0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b244:	4b02      	ldr	r3, [pc, #8]	@ (800b250 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b246:	0018      	movs	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	b002      	add	sp, #8
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	46c0      	nop			@ (mov r8, r8)
 800b250:	20000ee8 	.word	0x20000ee8
 800b254:	0800d858 	.word	0x0800d858

0800b258 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	0002      	movs	r2, r0
 800b260:	6039      	str	r1, [r7, #0]
 800b262:	1dfb      	adds	r3, r7, #7
 800b264:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b266:	1dfb      	adds	r3, r7, #7
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d106      	bne.n	800b27c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	4908      	ldr	r1, [pc, #32]	@ (800b294 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b272:	4b09      	ldr	r3, [pc, #36]	@ (800b298 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b274:	0018      	movs	r0, r3
 800b276:	f7ff fdab 	bl	800add0 <USBD_GetString>
 800b27a:	e005      	b.n	800b288 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	4905      	ldr	r1, [pc, #20]	@ (800b294 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b280:	4b05      	ldr	r3, [pc, #20]	@ (800b298 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b282:	0018      	movs	r0, r3
 800b284:	f7ff fda4 	bl	800add0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b288:	4b02      	ldr	r3, [pc, #8]	@ (800b294 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b28a:	0018      	movs	r0, r3
 800b28c:	46bd      	mov	sp, r7
 800b28e:	b002      	add	sp, #8
 800b290:	bd80      	pop	{r7, pc}
 800b292:	46c0      	nop			@ (mov r8, r8)
 800b294:	20000ee8 	.word	0x20000ee8
 800b298:	0800d864 	.word	0x0800d864

0800b29c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b2a2:	4b10      	ldr	r3, [pc, #64]	@ (800b2e4 <Get_SerialNum+0x48>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b2a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e8 <Get_SerialNum+0x4c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b2ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b2ec <Get_SerialNum+0x50>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	18d3      	adds	r3, r2, r3
 800b2ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00b      	beq.n	800b2da <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b2c2:	490b      	ldr	r1, [pc, #44]	@ (800b2f0 <Get_SerialNum+0x54>)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2208      	movs	r2, #8
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	f000 f815 	bl	800b2f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b2ce:	4909      	ldr	r1, [pc, #36]	@ (800b2f4 <Get_SerialNum+0x58>)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2204      	movs	r2, #4
 800b2d4:	0018      	movs	r0, r3
 800b2d6:	f000 f80f 	bl	800b2f8 <IntToUnicode>
  }
}
 800b2da:	46c0      	nop			@ (mov r8, r8)
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	b004      	add	sp, #16
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	46c0      	nop			@ (mov r8, r8)
 800b2e4:	1ffff7ac 	.word	0x1ffff7ac
 800b2e8:	1ffff7b0 	.word	0x1ffff7b0
 800b2ec:	1ffff7b4 	.word	0x1ffff7b4
 800b2f0:	200001a2 	.word	0x200001a2
 800b2f4:	200001b2 	.word	0x200001b2

0800b2f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	1dfb      	adds	r3, r7, #7
 800b304:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b306:	2117      	movs	r1, #23
 800b308:	187b      	adds	r3, r7, r1
 800b30a:	2200      	movs	r2, #0
 800b30c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b30e:	187b      	adds	r3, r7, r1
 800b310:	2200      	movs	r2, #0
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	e02f      	b.n	800b376 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	0f1b      	lsrs	r3, r3, #28
 800b31a:	2b09      	cmp	r3, #9
 800b31c:	d80d      	bhi.n	800b33a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	0f1b      	lsrs	r3, r3, #28
 800b322:	b2da      	uxtb	r2, r3
 800b324:	2317      	movs	r3, #23
 800b326:	18fb      	adds	r3, r7, r3
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	0019      	movs	r1, r3
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	185b      	adds	r3, r3, r1
 800b332:	3230      	adds	r2, #48	@ 0x30
 800b334:	b2d2      	uxtb	r2, r2
 800b336:	701a      	strb	r2, [r3, #0]
 800b338:	e00c      	b.n	800b354 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	0f1b      	lsrs	r3, r3, #28
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	2317      	movs	r3, #23
 800b342:	18fb      	adds	r3, r7, r3
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	0019      	movs	r1, r3
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	185b      	adds	r3, r3, r1
 800b34e:	3237      	adds	r2, #55	@ 0x37
 800b350:	b2d2      	uxtb	r2, r2
 800b352:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b35a:	2117      	movs	r1, #23
 800b35c:	187b      	adds	r3, r7, r1
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	005b      	lsls	r3, r3, #1
 800b362:	3301      	adds	r3, #1
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	18d3      	adds	r3, r2, r3
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b36c:	187b      	adds	r3, r7, r1
 800b36e:	781a      	ldrb	r2, [r3, #0]
 800b370:	187b      	adds	r3, r7, r1
 800b372:	3201      	adds	r2, #1
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	2317      	movs	r3, #23
 800b378:	18fa      	adds	r2, r7, r3
 800b37a:	1dfb      	adds	r3, r7, #7
 800b37c:	7812      	ldrb	r2, [r2, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	429a      	cmp	r2, r3
 800b382:	d3c8      	bcc.n	800b316 <IntToUnicode+0x1e>
  }
}
 800b384:	46c0      	nop			@ (mov r8, r8)
 800b386:	46c0      	nop			@ (mov r8, r8)
 800b388:	46bd      	mov	sp, r7
 800b38a:	b006      	add	sp, #24
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a0e      	ldr	r2, [pc, #56]	@ (800b3d8 <HAL_PCD_MspInit+0x48>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d115      	bne.n	800b3ce <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b3dc <HAL_PCD_MspInit+0x4c>)
 800b3a4:	69da      	ldr	r2, [r3, #28]
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3dc <HAL_PCD_MspInit+0x4c>)
 800b3a8:	2180      	movs	r1, #128	@ 0x80
 800b3aa:	0409      	lsls	r1, r1, #16
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	61da      	str	r2, [r3, #28]
 800b3b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3dc <HAL_PCD_MspInit+0x4c>)
 800b3b2:	69da      	ldr	r2, [r3, #28]
 800b3b4:	2380      	movs	r3, #128	@ 0x80
 800b3b6:	041b      	lsls	r3, r3, #16
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	201f      	movs	r0, #31
 800b3c4:	f7f8 fa16 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b3c8:	201f      	movs	r0, #31
 800b3ca:	f7f8 fa28 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b3ce:	46c0      	nop			@ (mov r8, r8)
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	b004      	add	sp, #16
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	46c0      	nop			@ (mov r8, r8)
 800b3d8:	40005c00 	.word	0x40005c00
 800b3dc:	40021000 	.word	0x40021000

0800b3e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	23b6      	movs	r3, #182	@ 0xb6
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	58d2      	ldr	r2, [r2, r3]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	21a6      	movs	r1, #166	@ 0xa6
 800b3f4:	0089      	lsls	r1, r1, #2
 800b3f6:	468c      	mov	ip, r1
 800b3f8:	4463      	add	r3, ip
 800b3fa:	0019      	movs	r1, r3
 800b3fc:	0010      	movs	r0, r2
 800b3fe:	f7fe fc7d 	bl	8009cfc <USBD_LL_SetupStage>
}
 800b402:	46c0      	nop			@ (mov r8, r8)
 800b404:	46bd      	mov	sp, r7
 800b406:	b002      	add	sp, #8
 800b408:	bd80      	pop	{r7, pc}

0800b40a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b40a:	b590      	push	{r4, r7, lr}
 800b40c:	b083      	sub	sp, #12
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	000a      	movs	r2, r1
 800b414:	1cfb      	adds	r3, r7, #3
 800b416:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	23b6      	movs	r3, #182	@ 0xb6
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	58d4      	ldr	r4, [r2, r3]
 800b420:	1cfb      	adds	r3, r7, #3
 800b422:	781a      	ldrb	r2, [r3, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	23b2      	movs	r3, #178	@ 0xb2
 800b428:	0059      	lsls	r1, r3, #1
 800b42a:	0013      	movs	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	189b      	adds	r3, r3, r2
 800b430:	00db      	lsls	r3, r3, #3
 800b432:	18c3      	adds	r3, r0, r3
 800b434:	185b      	adds	r3, r3, r1
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	1cfb      	adds	r3, r7, #3
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	0019      	movs	r1, r3
 800b43e:	0020      	movs	r0, r4
 800b440:	f7fe fcba 	bl	8009db8 <USBD_LL_DataOutStage>
}
 800b444:	46c0      	nop			@ (mov r8, r8)
 800b446:	46bd      	mov	sp, r7
 800b448:	b003      	add	sp, #12
 800b44a:	bd90      	pop	{r4, r7, pc}

0800b44c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	000a      	movs	r2, r1
 800b456:	1cfb      	adds	r3, r7, #3
 800b458:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	23b6      	movs	r3, #182	@ 0xb6
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	58d0      	ldr	r0, [r2, r3]
 800b462:	1cfb      	adds	r3, r7, #3
 800b464:	781a      	ldrb	r2, [r3, #0]
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	0013      	movs	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	189b      	adds	r3, r3, r2
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	18cb      	adds	r3, r1, r3
 800b472:	3324      	adds	r3, #36	@ 0x24
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	1cfb      	adds	r3, r7, #3
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	0019      	movs	r1, r3
 800b47c:	f7fe fd1e 	bl	8009ebc <USBD_LL_DataInStage>
}
 800b480:	46c0      	nop			@ (mov r8, r8)
 800b482:	46bd      	mov	sp, r7
 800b484:	b002      	add	sp, #8
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	23b6      	movs	r3, #182	@ 0xb6
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	58d3      	ldr	r3, [r2, r3]
 800b498:	0018      	movs	r0, r3
 800b49a:	f7fe fe55 	bl	800a148 <USBD_LL_SOF>
}
 800b49e:	46c0      	nop			@ (mov r8, r8)
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	b002      	add	sp, #8
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b4ae:	230f      	movs	r3, #15
 800b4b0:	18fb      	adds	r3, r7, r3
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	795b      	ldrb	r3, [r3, #5]
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d001      	beq.n	800b4c2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b4be:	f7f7 fbed 	bl	8002c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	23b6      	movs	r3, #182	@ 0xb6
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	58d2      	ldr	r2, [r2, r3]
 800b4ca:	230f      	movs	r3, #15
 800b4cc:	18fb      	adds	r3, r7, r3
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	0019      	movs	r1, r3
 800b4d2:	0010      	movs	r0, r2
 800b4d4:	f7fe fdf7 	bl	800a0c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	23b6      	movs	r3, #182	@ 0xb6
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	58d3      	ldr	r3, [r2, r3]
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f7fe fda8 	bl	800a036 <USBD_LL_Reset>
}
 800b4e6:	46c0      	nop			@ (mov r8, r8)
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	b004      	add	sp, #16
 800b4ec:	bd80      	pop	{r7, pc}
	...

0800b4f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	23b6      	movs	r3, #182	@ 0xb6
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	58d3      	ldr	r3, [r2, r3]
 800b500:	0018      	movs	r0, r3
 800b502:	f7fe fdf1 	bl	800a0e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	7a5b      	ldrb	r3, [r3, #9]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d005      	beq.n	800b51a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b50e:	4b05      	ldr	r3, [pc, #20]	@ (800b524 <HAL_PCD_SuspendCallback+0x34>)
 800b510:	691a      	ldr	r2, [r3, #16]
 800b512:	4b04      	ldr	r3, [pc, #16]	@ (800b524 <HAL_PCD_SuspendCallback+0x34>)
 800b514:	2106      	movs	r1, #6
 800b516:	430a      	orrs	r2, r1
 800b518:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b51a:	46c0      	nop			@ (mov r8, r8)
 800b51c:	46bd      	mov	sp, r7
 800b51e:	b002      	add	sp, #8
 800b520:	bd80      	pop	{r7, pc}
 800b522:	46c0      	nop			@ (mov r8, r8)
 800b524:	e000ed00 	.word	0xe000ed00

0800b528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7a5b      	ldrb	r3, [r3, #9]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d007      	beq.n	800b548 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b538:	4b09      	ldr	r3, [pc, #36]	@ (800b560 <HAL_PCD_ResumeCallback+0x38>)
 800b53a:	691a      	ldr	r2, [r3, #16]
 800b53c:	4b08      	ldr	r3, [pc, #32]	@ (800b560 <HAL_PCD_ResumeCallback+0x38>)
 800b53e:	2106      	movs	r1, #6
 800b540:	438a      	bics	r2, r1
 800b542:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b544:	f000 fa42 	bl	800b9cc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	23b6      	movs	r3, #182	@ 0xb6
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	58d3      	ldr	r3, [r2, r3]
 800b550:	0018      	movs	r0, r3
 800b552:	f7fe fde1 	bl	800a118 <USBD_LL_Resume>
}
 800b556:	46c0      	nop			@ (mov r8, r8)
 800b558:	46bd      	mov	sp, r7
 800b55a:	b002      	add	sp, #8
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	46c0      	nop			@ (mov r8, r8)
 800b560:	e000ed00 	.word	0xe000ed00

0800b564 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b56c:	4a2d      	ldr	r2, [pc, #180]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b56e:	23b6      	movs	r3, #182	@ 0xb6
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	23b0      	movs	r3, #176	@ 0xb0
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4929      	ldr	r1, [pc, #164]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b57e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b580:	4b28      	ldr	r3, [pc, #160]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b582:	4a29      	ldr	r2, [pc, #164]	@ (800b628 <USBD_LL_Init+0xc4>)
 800b584:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b586:	4b27      	ldr	r3, [pc, #156]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b588:	2208      	movs	r2, #8
 800b58a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b58c:	4b25      	ldr	r3, [pc, #148]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b58e:	2202      	movs	r2, #2
 800b590:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b592:	4b24      	ldr	r3, [pc, #144]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b594:	2202      	movs	r2, #2
 800b596:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b598:	4b22      	ldr	r3, [pc, #136]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b59e:	4b21      	ldr	r3, [pc, #132]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b5a4:	4b1f      	ldr	r3, [pc, #124]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b5aa:	4b1e      	ldr	r3, [pc, #120]	@ (800b624 <USBD_LL_Init+0xc0>)
 800b5ac:	0018      	movs	r0, r3
 800b5ae:	f7f8 fb31 	bl	8003c14 <HAL_PCD_Init>
 800b5b2:	1e03      	subs	r3, r0, #0
 800b5b4:	d001      	beq.n	800b5ba <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b5b6:	f7f7 fb71 	bl	8002c9c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	23b0      	movs	r3, #176	@ 0xb0
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	58d0      	ldr	r0, [r2, r3]
 800b5c2:	2318      	movs	r3, #24
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	f7fa f8e2 	bl	8005790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	23b0      	movs	r3, #176	@ 0xb0
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	58d0      	ldr	r0, [r2, r3]
 800b5d4:	2358      	movs	r3, #88	@ 0x58
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2180      	movs	r1, #128	@ 0x80
 800b5da:	f7fa f8d9 	bl	8005790 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	23b0      	movs	r3, #176	@ 0xb0
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	58d0      	ldr	r0, [r2, r3]
 800b5e6:	23c0      	movs	r3, #192	@ 0xc0
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2181      	movs	r1, #129	@ 0x81
 800b5ec:	f7fa f8d0 	bl	8005790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	23b0      	movs	r3, #176	@ 0xb0
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	58d0      	ldr	r0, [r2, r3]
 800b5f8:	2388      	movs	r3, #136	@ 0x88
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2101      	movs	r1, #1
 800b600:	f7fa f8c6 	bl	8005790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	23b0      	movs	r3, #176	@ 0xb0
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	58d0      	ldr	r0, [r2, r3]
 800b60c:	2380      	movs	r3, #128	@ 0x80
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	2200      	movs	r2, #0
 800b612:	2182      	movs	r1, #130	@ 0x82
 800b614:	f7fa f8bc 	bl	8005790 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	0018      	movs	r0, r3
 800b61c:	46bd      	mov	sp, r7
 800b61e:	b002      	add	sp, #8
 800b620:	bd80      	pop	{r7, pc}
 800b622:	46c0      	nop			@ (mov r8, r8)
 800b624:	200010e8 	.word	0x200010e8
 800b628:	40005c00 	.word	0x40005c00

0800b62c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b634:	210f      	movs	r1, #15
 800b636:	187b      	adds	r3, r7, r1
 800b638:	2200      	movs	r2, #0
 800b63a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b63c:	260e      	movs	r6, #14
 800b63e:	19bb      	adds	r3, r7, r6
 800b640:	2200      	movs	r2, #0
 800b642:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	23b0      	movs	r3, #176	@ 0xb0
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	58d3      	ldr	r3, [r2, r3]
 800b64c:	000d      	movs	r5, r1
 800b64e:	187c      	adds	r4, r7, r1
 800b650:	0018      	movs	r0, r3
 800b652:	f7f8 fbd3 	bl	8003dfc <HAL_PCD_Start>
 800b656:	0003      	movs	r3, r0
 800b658:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b65a:	19bc      	adds	r4, r7, r6
 800b65c:	197b      	adds	r3, r7, r5
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	0018      	movs	r0, r3
 800b662:	f000 f9ba 	bl	800b9da <USBD_Get_USB_Status>
 800b666:	0003      	movs	r3, r0
 800b668:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b66a:	19bb      	adds	r3, r7, r6
 800b66c:	781b      	ldrb	r3, [r3, #0]
}
 800b66e:	0018      	movs	r0, r3
 800b670:	46bd      	mov	sp, r7
 800b672:	b005      	add	sp, #20
 800b674:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b676 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b676:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b678:	b085      	sub	sp, #20
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	000c      	movs	r4, r1
 800b680:	0010      	movs	r0, r2
 800b682:	0019      	movs	r1, r3
 800b684:	1cfb      	adds	r3, r7, #3
 800b686:	1c22      	adds	r2, r4, #0
 800b688:	701a      	strb	r2, [r3, #0]
 800b68a:	1cbb      	adds	r3, r7, #2
 800b68c:	1c02      	adds	r2, r0, #0
 800b68e:	701a      	strb	r2, [r3, #0]
 800b690:	003b      	movs	r3, r7
 800b692:	1c0a      	adds	r2, r1, #0
 800b694:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b696:	260f      	movs	r6, #15
 800b698:	19bb      	adds	r3, r7, r6
 800b69a:	2200      	movs	r2, #0
 800b69c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b69e:	250e      	movs	r5, #14
 800b6a0:	197b      	adds	r3, r7, r5
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	23b0      	movs	r3, #176	@ 0xb0
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	58d0      	ldr	r0, [r2, r3]
 800b6ae:	19bc      	adds	r4, r7, r6
 800b6b0:	1cbb      	adds	r3, r7, #2
 800b6b2:	781d      	ldrb	r5, [r3, #0]
 800b6b4:	003b      	movs	r3, r7
 800b6b6:	881a      	ldrh	r2, [r3, #0]
 800b6b8:	1cfb      	adds	r3, r7, #3
 800b6ba:	7819      	ldrb	r1, [r3, #0]
 800b6bc:	002b      	movs	r3, r5
 800b6be:	f7f8 fd31 	bl	8004124 <HAL_PCD_EP_Open>
 800b6c2:	0003      	movs	r3, r0
 800b6c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6c6:	250e      	movs	r5, #14
 800b6c8:	197c      	adds	r4, r7, r5
 800b6ca:	19bb      	adds	r3, r7, r6
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	f000 f983 	bl	800b9da <USBD_Get_USB_Status>
 800b6d4:	0003      	movs	r3, r0
 800b6d6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b6d8:	197b      	adds	r3, r7, r5
 800b6da:	781b      	ldrb	r3, [r3, #0]
}
 800b6dc:	0018      	movs	r0, r3
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	b005      	add	sp, #20
 800b6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6e4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	000a      	movs	r2, r1
 800b6ee:	1cfb      	adds	r3, r7, #3
 800b6f0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f2:	210f      	movs	r1, #15
 800b6f4:	187b      	adds	r3, r7, r1
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fa:	260e      	movs	r6, #14
 800b6fc:	19bb      	adds	r3, r7, r6
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	23b0      	movs	r3, #176	@ 0xb0
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	58d2      	ldr	r2, [r2, r3]
 800b70a:	000d      	movs	r5, r1
 800b70c:	187c      	adds	r4, r7, r1
 800b70e:	1cfb      	adds	r3, r7, #3
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	0019      	movs	r1, r3
 800b714:	0010      	movs	r0, r2
 800b716:	f7f8 fd74 	bl	8004202 <HAL_PCD_EP_Close>
 800b71a:	0003      	movs	r3, r0
 800b71c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b71e:	19bc      	adds	r4, r7, r6
 800b720:	197b      	adds	r3, r7, r5
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	0018      	movs	r0, r3
 800b726:	f000 f958 	bl	800b9da <USBD_Get_USB_Status>
 800b72a:	0003      	movs	r3, r0
 800b72c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b72e:	19bb      	adds	r3, r7, r6
 800b730:	781b      	ldrb	r3, [r3, #0]
}
 800b732:	0018      	movs	r0, r3
 800b734:	46bd      	mov	sp, r7
 800b736:	b005      	add	sp, #20
 800b738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b73a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b73a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b73c:	b085      	sub	sp, #20
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	000a      	movs	r2, r1
 800b744:	1cfb      	adds	r3, r7, #3
 800b746:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b748:	210f      	movs	r1, #15
 800b74a:	187b      	adds	r3, r7, r1
 800b74c:	2200      	movs	r2, #0
 800b74e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b750:	260e      	movs	r6, #14
 800b752:	19bb      	adds	r3, r7, r6
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	23b0      	movs	r3, #176	@ 0xb0
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	58d2      	ldr	r2, [r2, r3]
 800b760:	000d      	movs	r5, r1
 800b762:	187c      	adds	r4, r7, r1
 800b764:	1cfb      	adds	r3, r7, #3
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	0019      	movs	r1, r3
 800b76a:	0010      	movs	r0, r2
 800b76c:	f7f8 fe26 	bl	80043bc <HAL_PCD_EP_SetStall>
 800b770:	0003      	movs	r3, r0
 800b772:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b774:	19bc      	adds	r4, r7, r6
 800b776:	197b      	adds	r3, r7, r5
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	0018      	movs	r0, r3
 800b77c:	f000 f92d 	bl	800b9da <USBD_Get_USB_Status>
 800b780:	0003      	movs	r3, r0
 800b782:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b784:	19bb      	adds	r3, r7, r6
 800b786:	781b      	ldrb	r3, [r3, #0]
}
 800b788:	0018      	movs	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	b005      	add	sp, #20
 800b78e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b790 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	000a      	movs	r2, r1
 800b79a:	1cfb      	adds	r3, r7, #3
 800b79c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b79e:	210f      	movs	r1, #15
 800b7a0:	187b      	adds	r3, r7, r1
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7a6:	260e      	movs	r6, #14
 800b7a8:	19bb      	adds	r3, r7, r6
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	23b0      	movs	r3, #176	@ 0xb0
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	58d2      	ldr	r2, [r2, r3]
 800b7b6:	000d      	movs	r5, r1
 800b7b8:	187c      	adds	r4, r7, r1
 800b7ba:	1cfb      	adds	r3, r7, #3
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	0019      	movs	r1, r3
 800b7c0:	0010      	movs	r0, r2
 800b7c2:	f7f8 fe57 	bl	8004474 <HAL_PCD_EP_ClrStall>
 800b7c6:	0003      	movs	r3, r0
 800b7c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ca:	19bc      	adds	r4, r7, r6
 800b7cc:	197b      	adds	r3, r7, r5
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	f000 f902 	bl	800b9da <USBD_Get_USB_Status>
 800b7d6:	0003      	movs	r3, r0
 800b7d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b7da:	19bb      	adds	r3, r7, r6
 800b7dc:	781b      	ldrb	r3, [r3, #0]
}
 800b7de:	0018      	movs	r0, r3
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	b005      	add	sp, #20
 800b7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7e6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	000a      	movs	r2, r1
 800b7f0:	1cfb      	adds	r3, r7, #3
 800b7f2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	23b0      	movs	r3, #176	@ 0xb0
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	58d3      	ldr	r3, [r2, r3]
 800b7fc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7fe:	1cfb      	adds	r3, r7, #3
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	b25b      	sxtb	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	da0c      	bge.n	800b822 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b808:	1cfb      	adds	r3, r7, #3
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	227f      	movs	r2, #127	@ 0x7f
 800b80e:	401a      	ands	r2, r3
 800b810:	68f9      	ldr	r1, [r7, #12]
 800b812:	0013      	movs	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	189b      	adds	r3, r3, r2
 800b818:	00db      	lsls	r3, r3, #3
 800b81a:	18cb      	adds	r3, r1, r3
 800b81c:	3312      	adds	r3, #18
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	e00d      	b.n	800b83e <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b822:	1cfb      	adds	r3, r7, #3
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	227f      	movs	r2, #127	@ 0x7f
 800b828:	401a      	ands	r2, r3
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	23a9      	movs	r3, #169	@ 0xa9
 800b82e:	0059      	lsls	r1, r3, #1
 800b830:	0013      	movs	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	189b      	adds	r3, r3, r2
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	18c3      	adds	r3, r0, r3
 800b83a:	185b      	adds	r3, r3, r1
 800b83c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b83e:	0018      	movs	r0, r3
 800b840:	46bd      	mov	sp, r7
 800b842:	b004      	add	sp, #16
 800b844:	bd80      	pop	{r7, pc}

0800b846 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b846:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b848:	b085      	sub	sp, #20
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	000a      	movs	r2, r1
 800b850:	1cfb      	adds	r3, r7, #3
 800b852:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b854:	210f      	movs	r1, #15
 800b856:	187b      	adds	r3, r7, r1
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b85c:	260e      	movs	r6, #14
 800b85e:	19bb      	adds	r3, r7, r6
 800b860:	2200      	movs	r2, #0
 800b862:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	23b0      	movs	r3, #176	@ 0xb0
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	58d2      	ldr	r2, [r2, r3]
 800b86c:	000d      	movs	r5, r1
 800b86e:	187c      	adds	r4, r7, r1
 800b870:	1cfb      	adds	r3, r7, #3
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	0019      	movs	r1, r3
 800b876:	0010      	movs	r0, r2
 800b878:	f7f8 fc2a 	bl	80040d0 <HAL_PCD_SetAddress>
 800b87c:	0003      	movs	r3, r0
 800b87e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b880:	19bc      	adds	r4, r7, r6
 800b882:	197b      	adds	r3, r7, r5
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	0018      	movs	r0, r3
 800b888:	f000 f8a7 	bl	800b9da <USBD_Get_USB_Status>
 800b88c:	0003      	movs	r3, r0
 800b88e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b890:	19bb      	adds	r3, r7, r6
 800b892:	781b      	ldrb	r3, [r3, #0]
}
 800b894:	0018      	movs	r0, r3
 800b896:	46bd      	mov	sp, r7
 800b898:	b005      	add	sp, #20
 800b89a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b89c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	0008      	movs	r0, r1
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	0019      	movs	r1, r3
 800b8aa:	230b      	movs	r3, #11
 800b8ac:	18fb      	adds	r3, r7, r3
 800b8ae:	1c02      	adds	r2, r0, #0
 800b8b0:	701a      	strb	r2, [r3, #0]
 800b8b2:	2408      	movs	r4, #8
 800b8b4:	193b      	adds	r3, r7, r4
 800b8b6:	1c0a      	adds	r2, r1, #0
 800b8b8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ba:	2117      	movs	r1, #23
 800b8bc:	187b      	adds	r3, r7, r1
 800b8be:	2200      	movs	r2, #0
 800b8c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8c2:	2516      	movs	r5, #22
 800b8c4:	197b      	adds	r3, r7, r5
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	23b0      	movs	r3, #176	@ 0xb0
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	58d0      	ldr	r0, [r2, r3]
 800b8d2:	193b      	adds	r3, r7, r4
 800b8d4:	881d      	ldrh	r5, [r3, #0]
 800b8d6:	000e      	movs	r6, r1
 800b8d8:	187c      	adds	r4, r7, r1
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	230b      	movs	r3, #11
 800b8de:	18fb      	adds	r3, r7, r3
 800b8e0:	7819      	ldrb	r1, [r3, #0]
 800b8e2:	002b      	movs	r3, r5
 800b8e4:	f7f8 fd2e 	bl	8004344 <HAL_PCD_EP_Transmit>
 800b8e8:	0003      	movs	r3, r0
 800b8ea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ec:	2516      	movs	r5, #22
 800b8ee:	197c      	adds	r4, r7, r5
 800b8f0:	19bb      	adds	r3, r7, r6
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	0018      	movs	r0, r3
 800b8f6:	f000 f870 	bl	800b9da <USBD_Get_USB_Status>
 800b8fa:	0003      	movs	r3, r0
 800b8fc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b8fe:	197b      	adds	r3, r7, r5
 800b900:	781b      	ldrb	r3, [r3, #0]
}
 800b902:	0018      	movs	r0, r3
 800b904:	46bd      	mov	sp, r7
 800b906:	b007      	add	sp, #28
 800b908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b90a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b90a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b90c:	b087      	sub	sp, #28
 800b90e:	af00      	add	r7, sp, #0
 800b910:	60f8      	str	r0, [r7, #12]
 800b912:	0008      	movs	r0, r1
 800b914:	607a      	str	r2, [r7, #4]
 800b916:	0019      	movs	r1, r3
 800b918:	230b      	movs	r3, #11
 800b91a:	18fb      	adds	r3, r7, r3
 800b91c:	1c02      	adds	r2, r0, #0
 800b91e:	701a      	strb	r2, [r3, #0]
 800b920:	2408      	movs	r4, #8
 800b922:	193b      	adds	r3, r7, r4
 800b924:	1c0a      	adds	r2, r1, #0
 800b926:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b928:	2117      	movs	r1, #23
 800b92a:	187b      	adds	r3, r7, r1
 800b92c:	2200      	movs	r2, #0
 800b92e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b930:	2516      	movs	r5, #22
 800b932:	197b      	adds	r3, r7, r5
 800b934:	2200      	movs	r2, #0
 800b936:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	23b0      	movs	r3, #176	@ 0xb0
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	58d0      	ldr	r0, [r2, r3]
 800b940:	193b      	adds	r3, r7, r4
 800b942:	881d      	ldrh	r5, [r3, #0]
 800b944:	000e      	movs	r6, r1
 800b946:	187c      	adds	r4, r7, r1
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	230b      	movs	r3, #11
 800b94c:	18fb      	adds	r3, r7, r3
 800b94e:	7819      	ldrb	r1, [r3, #0]
 800b950:	002b      	movs	r3, r5
 800b952:	f7f8 fca7 	bl	80042a4 <HAL_PCD_EP_Receive>
 800b956:	0003      	movs	r3, r0
 800b958:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b95a:	2516      	movs	r5, #22
 800b95c:	197c      	adds	r4, r7, r5
 800b95e:	19bb      	adds	r3, r7, r6
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	0018      	movs	r0, r3
 800b964:	f000 f839 	bl	800b9da <USBD_Get_USB_Status>
 800b968:	0003      	movs	r3, r0
 800b96a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b96c:	197b      	adds	r3, r7, r5
 800b96e:	781b      	ldrb	r3, [r3, #0]
}
 800b970:	0018      	movs	r0, r3
 800b972:	46bd      	mov	sp, r7
 800b974:	b007      	add	sp, #28
 800b976:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b978 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	000a      	movs	r2, r1
 800b982:	1cfb      	adds	r3, r7, #3
 800b984:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	23b0      	movs	r3, #176	@ 0xb0
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	58d2      	ldr	r2, [r2, r3]
 800b98e:	1cfb      	adds	r3, r7, #3
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	0019      	movs	r1, r3
 800b994:	0010      	movs	r0, r2
 800b996:	f7f8 fcbc 	bl	8004312 <HAL_PCD_EP_GetRxCount>
 800b99a:	0003      	movs	r3, r0
}
 800b99c:	0018      	movs	r0, r3
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	b002      	add	sp, #8
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9ac:	4b02      	ldr	r3, [pc, #8]	@ (800b9b8 <USBD_static_malloc+0x14>)
}
 800b9ae:	0018      	movs	r0, r3
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	b002      	add	sp, #8
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	46c0      	nop			@ (mov r8, r8)
 800b9b8:	200013c4 	.word	0x200013c4

0800b9bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]

}
 800b9c4:	46c0      	nop			@ (mov r8, r8)
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	b002      	add	sp, #8
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b9d0:	f7f6 ff24 	bl	800281c <SystemClock_Config>
}
 800b9d4:	46c0      	nop			@ (mov r8, r8)
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	0002      	movs	r2, r0
 800b9e2:	1dfb      	adds	r3, r7, #7
 800b9e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e6:	230f      	movs	r3, #15
 800b9e8:	18fb      	adds	r3, r7, r3
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b9ee:	1dfb      	adds	r3, r7, #7
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d017      	beq.n	800ba26 <USBD_Get_USB_Status+0x4c>
 800b9f6:	dc1b      	bgt.n	800ba30 <USBD_Get_USB_Status+0x56>
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d00f      	beq.n	800ba1c <USBD_Get_USB_Status+0x42>
 800b9fc:	dc18      	bgt.n	800ba30 <USBD_Get_USB_Status+0x56>
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d002      	beq.n	800ba08 <USBD_Get_USB_Status+0x2e>
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d005      	beq.n	800ba12 <USBD_Get_USB_Status+0x38>
 800ba06:	e013      	b.n	800ba30 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba08:	230f      	movs	r3, #15
 800ba0a:	18fb      	adds	r3, r7, r3
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	701a      	strb	r2, [r3, #0]
    break;
 800ba10:	e013      	b.n	800ba3a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba12:	230f      	movs	r3, #15
 800ba14:	18fb      	adds	r3, r7, r3
 800ba16:	2202      	movs	r2, #2
 800ba18:	701a      	strb	r2, [r3, #0]
    break;
 800ba1a:	e00e      	b.n	800ba3a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba1c:	230f      	movs	r3, #15
 800ba1e:	18fb      	adds	r3, r7, r3
 800ba20:	2201      	movs	r2, #1
 800ba22:	701a      	strb	r2, [r3, #0]
    break;
 800ba24:	e009      	b.n	800ba3a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba26:	230f      	movs	r3, #15
 800ba28:	18fb      	adds	r3, r7, r3
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	701a      	strb	r2, [r3, #0]
    break;
 800ba2e:	e004      	b.n	800ba3a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800ba30:	230f      	movs	r3, #15
 800ba32:	18fb      	adds	r3, r7, r3
 800ba34:	2202      	movs	r2, #2
 800ba36:	701a      	strb	r2, [r3, #0]
    break;
 800ba38:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800ba3a:	230f      	movs	r3, #15
 800ba3c:	18fb      	adds	r3, r7, r3
 800ba3e:	781b      	ldrb	r3, [r3, #0]
}
 800ba40:	0018      	movs	r0, r3
 800ba42:	46bd      	mov	sp, r7
 800ba44:	b004      	add	sp, #16
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800ba48:	b5b0      	push	{r4, r5, r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800ba50:	2316      	movs	r3, #22
 800ba52:	18fb      	adds	r3, r7, r3
 800ba54:	2200      	movs	r2, #0
 800ba56:	801a      	strh	r2, [r3, #0]
    uint32 ldo_tune = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800ba5c:	4ba0      	ldr	r3, [pc, #640]	@ (800bce0 <dwt_initialise+0x298>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2200      	movs	r2, #0
 800ba62:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800ba64:	4b9e      	ldr	r3, [pc, #632]	@ (800bce0 <dwt_initialise+0x298>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800ba6c:	4b9c      	ldr	r3, [pc, #624]	@ (800bce0 <dwt_initialise+0x298>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2200      	movs	r2, #0
 800ba72:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800ba74:	4b9a      	ldr	r3, [pc, #616]	@ (800bce0 <dwt_initialise+0x298>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 800ba7c:	4b98      	ldr	r3, [pc, #608]	@ (800bce0 <dwt_initialise+0x298>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2200      	movs	r2, #0
 800ba82:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 800ba84:	4b96      	ldr	r3, [pc, #600]	@ (800bce0 <dwt_initialise+0x298>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 800ba8c:	4b94      	ldr	r3, [pc, #592]	@ (800bce0 <dwt_initialise+0x298>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2200      	movs	r2, #0
 800ba92:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800ba94:	f000 f92c 	bl	800bcf0 <dwt_readdevid>
 800ba98:	0003      	movs	r3, r0
 800ba9a:	4a92      	ldr	r2, [pc, #584]	@ (800bce4 <dwt_initialise+0x29c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d002      	beq.n	800baa6 <dwt_initialise+0x5e>
    {
        return DWT_ERROR ;
 800baa0:	2301      	movs	r3, #1
 800baa2:	425b      	negs	r3, r3
 800baa4:	e118      	b.n	800bcd8 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2202      	movs	r2, #2
 800baaa:	4013      	ands	r3, r2
 800baac:	d101      	bne.n	800bab2 <dwt_initialise+0x6a>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800baae:	f000 ffbb 	bl	800ca28 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2202      	movs	r2, #2
 800bab6:	4013      	ands	r3, r2
 800bab8:	d003      	beq.n	800bac2 <dwt_initialise+0x7a>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	22f8      	movs	r2, #248	@ 0xf8
 800babe:	4013      	ands	r3, r2
 800bac0:	d102      	bne.n	800bac8 <dwt_initialise+0x80>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800bac2:	2000      	movs	r0, #0
 800bac4:	f000 fd9c 	bl	800c600 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800bac8:	2204      	movs	r2, #4
 800baca:	2100      	movs	r1, #0
 800bacc:	2024      	movs	r0, #36	@ 0x24
 800bace:	f000 fc7f 	bl	800c3d0 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2202      	movs	r2, #2
 800bad6:	4013      	ands	r3, r2
 800bad8:	d118      	bne.n	800bb0c <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800bada:	2004      	movs	r0, #4
 800badc:	f000 fcd2 	bl	800c484 <_dwt_otpread>
 800bae0:	0003      	movs	r3, r0
 800bae2:	613b      	str	r3, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	22ff      	movs	r2, #255	@ 0xff
 800bae8:	4013      	ands	r3, r2
 800baea:	d021      	beq.n	800bb30 <dwt_initialise+0xe8>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800baec:	2202      	movs	r2, #2
 800baee:	2112      	movs	r1, #18
 800baf0:	202d      	movs	r0, #45	@ 0x2d
 800baf2:	f000 fc6d 	bl	800c3d0 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800baf6:	4b7a      	ldr	r3, [pc, #488]	@ (800bce0 <dwt_initialise+0x298>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	8ada      	ldrh	r2, [r3, #22]
 800bafc:	4b78      	ldr	r3, [pc, #480]	@ (800bce0 <dwt_initialise+0x298>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2180      	movs	r1, #128	@ 0x80
 800bb02:	0149      	lsls	r1, r1, #5
 800bb04:	430a      	orrs	r2, r1
 800bb06:	b292      	uxth	r2, r2
 800bb08:	82da      	strh	r2, [r3, #22]
 800bb0a:	e011      	b.n	800bb30 <dwt_initialise+0xe8>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800bb0c:	2130      	movs	r1, #48	@ 0x30
 800bb0e:	2028      	movs	r0, #40	@ 0x28
 800bb10:	f000 fc00 	bl	800c314 <dwt_read32bitoffsetreg>
 800bb14:	0003      	movs	r3, r0
 800bb16:	4a74      	ldr	r2, [pc, #464]	@ (800bce8 <dwt_initialise+0x2a0>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d009      	beq.n	800bb30 <dwt_initialise+0xe8>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800bb1c:	4b70      	ldr	r3, [pc, #448]	@ (800bce0 <dwt_initialise+0x298>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	8ada      	ldrh	r2, [r3, #22]
 800bb22:	4b6f      	ldr	r3, [pc, #444]	@ (800bce0 <dwt_initialise+0x298>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2180      	movs	r1, #128	@ 0x80
 800bb28:	0149      	lsls	r1, r1, #5
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	b292      	uxth	r2, r2
 800bb2e:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2202      	movs	r2, #2
 800bb34:	4013      	ands	r3, r2
 800bb36:	d007      	beq.n	800bb48 <dwt_initialise+0x100>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	d013      	beq.n	800bb68 <dwt_initialise+0x120>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2208      	movs	r2, #8
 800bb44:	4013      	ands	r3, r2
 800bb46:	d00f      	beq.n	800bb68 <dwt_initialise+0x120>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800bb48:	201e      	movs	r0, #30
 800bb4a:	f000 fc9b 	bl	800c484 <_dwt_otpread>
 800bb4e:	0002      	movs	r2, r0
 800bb50:	2116      	movs	r1, #22
 800bb52:	187b      	adds	r3, r7, r1
 800bb54:	801a      	strh	r2, [r3, #0]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800bb56:	187b      	adds	r3, r7, r1
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	0a1b      	lsrs	r3, r3, #8
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	4b60      	ldr	r3, [pc, #384]	@ (800bce0 <dwt_initialise+0x298>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	b2d2      	uxtb	r2, r2
 800bb64:	72da      	strb	r2, [r3, #11]
 800bb66:	e003      	b.n	800bb70 <dwt_initialise+0x128>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800bb68:	4b5d      	ldr	r3, [pc, #372]	@ (800bce0 <dwt_initialise+0x298>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2202      	movs	r2, #2
 800bb74:	4013      	ands	r3, r2
 800bb76:	d10f      	bne.n	800bb98 <dwt_initialise+0x150>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800bb78:	2116      	movs	r1, #22
 800bb7a:	187b      	adds	r3, r7, r1
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	221f      	movs	r2, #31
 800bb80:	4013      	ands	r3, r2
 800bb82:	d102      	bne.n	800bb8a <dwt_initialise+0x142>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800bb84:	187b      	adds	r3, r7, r1
 800bb86:	2210      	movs	r2, #16
 800bb88:	801a      	strh	r2, [r3, #0]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800bb8a:	2316      	movs	r3, #22
 800bb8c:	18fb      	adds	r3, r7, r3
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	0018      	movs	r0, r3
 800bb94:	f000 ff6e 	bl	800ca74 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2210      	movs	r2, #16
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	d007      	beq.n	800bbb0 <dwt_initialise+0x168>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800bba0:	4b4f      	ldr	r3, [pc, #316]	@ (800bce0 <dwt_initialise+0x298>)
 800bba2:	681c      	ldr	r4, [r3, #0]
 800bba4:	2006      	movs	r0, #6
 800bba6:	f000 fc6d 	bl	800c484 <_dwt_otpread>
 800bbaa:	0003      	movs	r3, r0
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	e003      	b.n	800bbb8 <dwt_initialise+0x170>
    }
    else
    {
        pdw1000local->partID = 0;
 800bbb0:	4b4b      	ldr	r3, [pc, #300]	@ (800bce0 <dwt_initialise+0x298>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2220      	movs	r2, #32
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	d007      	beq.n	800bbd0 <dwt_initialise+0x188>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800bbc0:	4b47      	ldr	r3, [pc, #284]	@ (800bce0 <dwt_initialise+0x298>)
 800bbc2:	681c      	ldr	r4, [r3, #0]
 800bbc4:	2007      	movs	r0, #7
 800bbc6:	f000 fc5d 	bl	800c484 <_dwt_otpread>
 800bbca:	0003      	movs	r3, r0
 800bbcc:	6063      	str	r3, [r4, #4]
 800bbce:	e003      	b.n	800bbd8 <dwt_initialise+0x190>
    }
    else
    {
        pdw1000local->lotID = 0;
 800bbd0:	4b43      	ldr	r3, [pc, #268]	@ (800bce0 <dwt_initialise+0x298>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2240      	movs	r2, #64	@ 0x40
 800bbdc:	4013      	ands	r3, r2
 800bbde:	d008      	beq.n	800bbf2 <dwt_initialise+0x1aa>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800bbe0:	2008      	movs	r0, #8
 800bbe2:	f000 fc4f 	bl	800c484 <_dwt_otpread>
 800bbe6:	0002      	movs	r2, r0
 800bbe8:	4b3d      	ldr	r3, [pc, #244]	@ (800bce0 <dwt_initialise+0x298>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	721a      	strb	r2, [r3, #8]
 800bbf0:	e003      	b.n	800bbfa <dwt_initialise+0x1b2>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800bbf2:	4b3b      	ldr	r3, [pc, #236]	@ (800bce0 <dwt_initialise+0x298>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2280      	movs	r2, #128	@ 0x80
 800bbfe:	4013      	ands	r3, r2
 800bc00:	d008      	beq.n	800bc14 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800bc02:	2009      	movs	r0, #9
 800bc04:	f000 fc3e 	bl	800c484 <_dwt_otpread>
 800bc08:	0002      	movs	r2, r0
 800bc0a:	4b35      	ldr	r3, [pc, #212]	@ (800bce0 <dwt_initialise+0x298>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	b2d2      	uxtb	r2, r2
 800bc10:	725a      	strb	r2, [r3, #9]
 800bc12:	e003      	b.n	800bc1c <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800bc14:	4b32      	ldr	r3, [pc, #200]	@ (800bce0 <dwt_initialise+0x298>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	4013      	ands	r3, r2
 800bc22:	d127      	bne.n	800bc74 <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	4013      	ands	r3, r2
 800bc2a:	d00c      	beq.n	800bc46 <dwt_initialise+0x1fe>
        {
            _dwt_loaducodefromrom();
 800bc2c:	f000 fc82 	bl	800c534 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800bc30:	4b2b      	ldr	r3, [pc, #172]	@ (800bce0 <dwt_initialise+0x298>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	8ada      	ldrh	r2, [r3, #22]
 800bc36:	4b2a      	ldr	r3, [pc, #168]	@ (800bce0 <dwt_initialise+0x298>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2180      	movs	r1, #128	@ 0x80
 800bc3c:	0109      	lsls	r1, r1, #4
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	b292      	uxth	r2, r2
 800bc42:	82da      	strh	r2, [r3, #22]
 800bc44:	e024      	b.n	800bc90 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800bc46:	250e      	movs	r5, #14
 800bc48:	197c      	adds	r4, r7, r5
 800bc4a:	2105      	movs	r1, #5
 800bc4c:	2036      	movs	r0, #54	@ 0x36
 800bc4e:	f000 fb88 	bl	800c362 <dwt_read16bitoffsetreg>
 800bc52:	0003      	movs	r3, r0
 800bc54:	8023      	strh	r3, [r4, #0]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800bc56:	0028      	movs	r0, r5
 800bc58:	183b      	adds	r3, r7, r0
 800bc5a:	183a      	adds	r2, r7, r0
 800bc5c:	8812      	ldrh	r2, [r2, #0]
 800bc5e:	4923      	ldr	r1, [pc, #140]	@ (800bcec <dwt_initialise+0x2a4>)
 800bc60:	400a      	ands	r2, r1
 800bc62:	801a      	strh	r2, [r3, #0]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800bc64:	183b      	adds	r3, r7, r0
 800bc66:	881b      	ldrh	r3, [r3, #0]
 800bc68:	001a      	movs	r2, r3
 800bc6a:	2105      	movs	r1, #5
 800bc6c:	2036      	movs	r0, #54	@ 0x36
 800bc6e:	f000 fbc2 	bl	800c3f6 <dwt_write16bitoffsetreg>
 800bc72:	e00d      	b.n	800bc90 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2204      	movs	r2, #4
 800bc78:	4013      	ands	r3, r2
 800bc7a:	d109      	bne.n	800bc90 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800bc7c:	4b18      	ldr	r3, [pc, #96]	@ (800bce0 <dwt_initialise+0x298>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	8ada      	ldrh	r2, [r3, #22]
 800bc82:	4b17      	ldr	r3, [pc, #92]	@ (800bce0 <dwt_initialise+0x298>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2180      	movs	r1, #128	@ 0x80
 800bc88:	0109      	lsls	r1, r1, #4
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	b292      	uxth	r2, r2
 800bc8e:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800bc90:	2001      	movs	r0, #1
 800bc92:	f000 fcb5 	bl	800c600 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800bc96:	2200      	movs	r2, #0
 800bc98:	210a      	movs	r1, #10
 800bc9a:	202c      	movs	r0, #44	@ 0x2c
 800bc9c:	f000 fb98 	bl	800c3d0 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800bca0:	4b0f      	ldr	r3, [pc, #60]	@ (800bce0 <dwt_initialise+0x298>)
 800bca2:	681c      	ldr	r4, [r3, #0]
 800bca4:	2100      	movs	r1, #0
 800bca6:	2004      	movs	r0, #4
 800bca8:	f000 fb34 	bl	800c314 <dwt_read32bitoffsetreg>
 800bcac:	0003      	movs	r3, r0
 800bcae:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800bcb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bce0 <dwt_initialise+0x298>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	0c1b      	lsrs	r3, r3, #16
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	4b09      	ldr	r3, [pc, #36]	@ (800bce0 <dwt_initialise+0x298>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2103      	movs	r1, #3
 800bcc0:	400a      	ands	r2, r1
 800bcc2:	b2d2      	uxtb	r2, r2
 800bcc4:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800bcc6:	4b06      	ldr	r3, [pc, #24]	@ (800bce0 <dwt_initialise+0x298>)
 800bcc8:	681c      	ldr	r4, [r3, #0]
 800bcca:	2100      	movs	r1, #0
 800bccc:	2008      	movs	r0, #8
 800bcce:	f000 fb21 	bl	800c314 <dwt_read32bitoffsetreg>
 800bcd2:	0003      	movs	r3, r0
 800bcd4:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800bcd6:	2300      	movs	r3, #0

} // end dwt_initialise()
 800bcd8:	0018      	movs	r0, r3
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	b006      	add	sp, #24
 800bcde:	bdb0      	pop	{r4, r5, r7, pc}
 800bce0:	200001bc 	.word	0x200001bc
 800bce4:	deca0130 	.word	0xdeca0130
 800bce8:	88888888 	.word	0x88888888
 800bcec:	fffffdff 	.word	0xfffffdff

0800bcf0 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	f000 fb0c 	bl	800c314 <dwt_read32bitoffsetreg>
 800bcfc:	0003      	movs	r3, r0
}
 800bcfe:	0018      	movs	r0, r3
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800bd04:	b5b0      	push	{r4, r5, r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800bd0c:	2317      	movs	r3, #23
 800bd0e:	18fb      	adds	r3, r7, r3
 800bd10:	2200      	movs	r2, #0
 800bd12:	701a      	strb	r2, [r3, #0]
    uint8 useDWnsSFD = 0;
 800bd14:	2316      	movs	r3, #22
 800bd16:	18fb      	adds	r3, r7, r3
 800bd18:	2200      	movs	r2, #0
 800bd1a:	701a      	strb	r2, [r3, #0]
    uint8 chan = config->chan ;
 800bd1c:	2013      	movs	r0, #19
 800bd1e:	183b      	adds	r3, r7, r0
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	7812      	ldrb	r2, [r2, #0]
 800bd24:	701a      	strb	r2, [r3, #0]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	795b      	ldrb	r3, [r3, #5]
 800bd2a:	0019      	movs	r1, r3
 800bd2c:	2314      	movs	r3, #20
 800bd2e:	18fb      	adds	r3, r7, r3
 800bd30:	4ab6      	ldr	r2, [pc, #728]	@ (800c00c <dwt_configure+0x308>)
 800bd32:	0049      	lsls	r1, r1, #1
 800bd34:	5a8a      	ldrh	r2, [r1, r2]
 800bd36:	801a      	strh	r2, [r3, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	785a      	ldrb	r2, [r3, #1]
 800bd3c:	2312      	movs	r3, #18
 800bd3e:	18fb      	adds	r3, r7, r3
 800bd40:	3a01      	subs	r2, #1
 800bd42:	701a      	strb	r2, [r3, #0]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800bd44:	183b      	adds	r3, r7, r0
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d003      	beq.n	800bd54 <dwt_configure+0x50>
 800bd4c:	183b      	adds	r3, r7, r0
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b07      	cmp	r3, #7
 800bd52:	d101      	bne.n	800bd58 <dwt_configure+0x54>
 800bd54:	2201      	movs	r2, #1
 800bd56:	e000      	b.n	800bd5a <dwt_configure+0x56>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2311      	movs	r3, #17
 800bd5c:	18fb      	adds	r3, r7, r3
 800bd5e:	701a      	strb	r2, [r3, #0]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	79db      	ldrb	r3, [r3, #7]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10f      	bne.n	800bd88 <dwt_configure+0x84>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800bd68:	4ba9      	ldr	r3, [pc, #676]	@ (800c010 <dwt_configure+0x30c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	691a      	ldr	r2, [r3, #16]
 800bd6e:	4ba8      	ldr	r3, [pc, #672]	@ (800c010 <dwt_configure+0x30c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2180      	movs	r1, #128	@ 0x80
 800bd74:	03c9      	lsls	r1, r1, #15
 800bd76:	430a      	orrs	r2, r1
 800bd78:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800bd7a:	2214      	movs	r2, #20
 800bd7c:	18bb      	adds	r3, r7, r2
 800bd7e:	18ba      	adds	r2, r7, r2
 800bd80:	8812      	ldrh	r2, [r2, #0]
 800bd82:	08d2      	lsrs	r2, r2, #3
 800bd84:	801a      	strh	r2, [r3, #0]
 800bd86:	e007      	b.n	800bd98 <dwt_configure+0x94>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800bd88:	4ba1      	ldr	r3, [pc, #644]	@ (800c010 <dwt_configure+0x30c>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	691a      	ldr	r2, [r3, #16]
 800bd8e:	4ba0      	ldr	r3, [pc, #640]	@ (800c010 <dwt_configure+0x30c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	49a0      	ldr	r1, [pc, #640]	@ (800c014 <dwt_configure+0x310>)
 800bd94:	400a      	ands	r2, r1
 800bd96:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800bd98:	4b9d      	ldr	r3, [pc, #628]	@ (800c010 <dwt_configure+0x30c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	7a12      	ldrb	r2, [r2, #8]
 800bda0:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800bda2:	4b9b      	ldr	r3, [pc, #620]	@ (800c010 <dwt_configure+0x30c>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	691a      	ldr	r2, [r3, #16]
 800bda8:	4b99      	ldr	r3, [pc, #612]	@ (800c010 <dwt_configure+0x30c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	499a      	ldr	r1, [pc, #616]	@ (800c018 <dwt_configure+0x314>)
 800bdae:	400a      	ands	r2, r1
 800bdb0:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800bdb2:	4b97      	ldr	r3, [pc, #604]	@ (800c010 <dwt_configure+0x30c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	6919      	ldr	r1, [r3, #16]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	7a1b      	ldrb	r3, [r3, #8]
 800bdbc:	041a      	lsls	r2, r3, #16
 800bdbe:	23c0      	movs	r3, #192	@ 0xc0
 800bdc0:	029b      	lsls	r3, r3, #10
 800bdc2:	401a      	ands	r2, r3
 800bdc4:	4b92      	ldr	r3, [pc, #584]	@ (800c010 <dwt_configure+0x30c>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800bdcc:	4b90      	ldr	r3, [pc, #576]	@ (800c010 <dwt_configure+0x30c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	001a      	movs	r2, r3
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	2004      	movs	r0, #4
 800bdd8:	f000 fb2d 	bl	800c436 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800bddc:	2314      	movs	r3, #20
 800bdde:	18fb      	adds	r3, r7, r3
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	498e      	ldr	r1, [pc, #568]	@ (800c01c <dwt_configure+0x318>)
 800bde4:	001a      	movs	r2, r3
 800bde6:	202e      	movs	r0, #46	@ 0x2e
 800bde8:	f000 fb05 	bl	800c3f6 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800bdec:	2512      	movs	r5, #18
 800bdee:	197b      	adds	r3, r7, r5
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	f000 fb78 	bl	800c4e8 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800bdf8:	2413      	movs	r4, #19
 800bdfa:	193b      	adds	r3, r7, r4
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	4a88      	ldr	r2, [pc, #544]	@ (800c020 <dwt_configure+0x31c>)
 800be00:	5cd3      	ldrb	r3, [r2, r3]
 800be02:	001a      	movs	r2, r3
 800be04:	4b87      	ldr	r3, [pc, #540]	@ (800c024 <dwt_configure+0x320>)
 800be06:	0092      	lsls	r2, r2, #2
 800be08:	58d3      	ldr	r3, [r2, r3]
 800be0a:	001a      	movs	r2, r3
 800be0c:	2107      	movs	r1, #7
 800be0e:	202b      	movs	r0, #43	@ 0x2b
 800be10:	f000 fb11 	bl	800c436 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800be14:	193b      	adds	r3, r7, r4
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	4a81      	ldr	r2, [pc, #516]	@ (800c020 <dwt_configure+0x31c>)
 800be1a:	5cd3      	ldrb	r3, [r2, r3]
 800be1c:	001a      	movs	r2, r3
 800be1e:	4b82      	ldr	r3, [pc, #520]	@ (800c028 <dwt_configure+0x324>)
 800be20:	5c9b      	ldrb	r3, [r3, r2]
 800be22:	001a      	movs	r2, r3
 800be24:	210b      	movs	r1, #11
 800be26:	202b      	movs	r0, #43	@ 0x2b
 800be28:	f000 fad2 	bl	800c3d0 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800be2c:	2311      	movs	r3, #17
 800be2e:	18fb      	adds	r3, r7, r3
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	4a7e      	ldr	r2, [pc, #504]	@ (800c02c <dwt_configure+0x328>)
 800be34:	5cd3      	ldrb	r3, [r2, r3]
 800be36:	001a      	movs	r2, r3
 800be38:	210b      	movs	r1, #11
 800be3a:	2028      	movs	r0, #40	@ 0x28
 800be3c:	f000 fac8 	bl	800c3d0 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800be40:	193b      	adds	r3, r7, r4
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	4a76      	ldr	r2, [pc, #472]	@ (800c020 <dwt_configure+0x31c>)
 800be46:	5cd3      	ldrb	r3, [r2, r3]
 800be48:	001a      	movs	r2, r3
 800be4a:	4b79      	ldr	r3, [pc, #484]	@ (800c030 <dwt_configure+0x32c>)
 800be4c:	0092      	lsls	r2, r2, #2
 800be4e:	58d3      	ldr	r3, [r2, r3]
 800be50:	001a      	movs	r2, r3
 800be52:	210c      	movs	r1, #12
 800be54:	2028      	movs	r0, #40	@ 0x28
 800be56:	f000 faee 	bl	800c436 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	79db      	ldrb	r3, [r3, #7]
 800be5e:	001a      	movs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	799b      	ldrb	r3, [r3, #6]
 800be64:	0019      	movs	r1, r3
 800be66:	4b73      	ldr	r3, [pc, #460]	@ (800c034 <dwt_configure+0x330>)
 800be68:	0052      	lsls	r2, r2, #1
 800be6a:	1852      	adds	r2, r2, r1
 800be6c:	0052      	lsls	r2, r2, #1
 800be6e:	5ad3      	ldrh	r3, [r2, r3]
 800be70:	001a      	movs	r2, r3
 800be72:	2102      	movs	r1, #2
 800be74:	2027      	movs	r0, #39	@ 0x27
 800be76:	f000 fabe 	bl	800c3f6 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800be7a:	197b      	adds	r3, r7, r5
 800be7c:	781a      	ldrb	r2, [r3, #0]
 800be7e:	4b6e      	ldr	r3, [pc, #440]	@ (800c038 <dwt_configure+0x334>)
 800be80:	0052      	lsls	r2, r2, #1
 800be82:	5ad3      	ldrh	r3, [r2, r3]
 800be84:	001a      	movs	r2, r3
 800be86:	2104      	movs	r1, #4
 800be88:	2027      	movs	r0, #39	@ 0x27
 800be8a:	f000 fab4 	bl	800c3f6 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	79db      	ldrb	r3, [r3, #7]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d105      	bne.n	800bea2 <dwt_configure+0x19e>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800be96:	2264      	movs	r2, #100	@ 0x64
 800be98:	2106      	movs	r1, #6
 800be9a:	2027      	movs	r0, #39	@ 0x27
 800be9c:	f000 faab 	bl	800c3f6 <dwt_write16bitoffsetreg>
 800bea0:	e018      	b.n	800bed4 <dwt_configure+0x1d0>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	789b      	ldrb	r3, [r3, #2]
 800bea6:	2b04      	cmp	r3, #4
 800bea8:	d10a      	bne.n	800bec0 <dwt_configure+0x1bc>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800beaa:	2210      	movs	r2, #16
 800beac:	2106      	movs	r1, #6
 800beae:	2027      	movs	r0, #39	@ 0x27
 800beb0:	f000 faa1 	bl	800c3f6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800beb4:	2210      	movs	r2, #16
 800beb6:	2126      	movs	r1, #38	@ 0x26
 800beb8:	2027      	movs	r0, #39	@ 0x27
 800beba:	f000 fa89 	bl	800c3d0 <dwt_write8bitoffsetreg>
 800bebe:	e009      	b.n	800bed4 <dwt_configure+0x1d0>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800bec0:	2220      	movs	r2, #32
 800bec2:	2106      	movs	r1, #6
 800bec4:	2027      	movs	r0, #39	@ 0x27
 800bec6:	f000 fa96 	bl	800c3f6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800beca:	2228      	movs	r2, #40	@ 0x28
 800becc:	2126      	movs	r1, #38	@ 0x26
 800bece:	2027      	movs	r0, #39	@ 0x27
 800bed0:	f000 fa7e 	bl	800c3d0 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800bed4:	2312      	movs	r3, #18
 800bed6:	18fb      	adds	r3, r7, r3
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	78db      	ldrb	r3, [r3, #3]
 800bede:	0019      	movs	r1, r3
 800bee0:	4b56      	ldr	r3, [pc, #344]	@ (800c03c <dwt_configure+0x338>)
 800bee2:	0092      	lsls	r2, r2, #2
 800bee4:	1852      	adds	r2, r2, r1
 800bee6:	0092      	lsls	r2, r2, #2
 800bee8:	58d3      	ldr	r3, [r2, r3]
 800beea:	001a      	movs	r2, r3
 800beec:	2108      	movs	r1, #8
 800beee:	2027      	movs	r0, #39	@ 0x27
 800bef0:	f000 faa1 	bl	800c436 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	895b      	ldrh	r3, [r3, #10]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <dwt_configure+0x1fe>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a50      	ldr	r2, [pc, #320]	@ (800c040 <dwt_configure+0x33c>)
 800bf00:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	895b      	ldrh	r3, [r3, #10]
 800bf06:	001a      	movs	r2, r3
 800bf08:	2120      	movs	r1, #32
 800bf0a:	2027      	movs	r0, #39	@ 0x27
 800bf0c:	f000 fa73 	bl	800c3f6 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800bf10:	4b4c      	ldr	r3, [pc, #304]	@ (800c044 <dwt_configure+0x340>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	001a      	movs	r2, r3
 800bf16:	210c      	movs	r1, #12
 800bf18:	2023      	movs	r0, #35	@ 0x23
 800bf1a:	f000 fa8c 	bl	800c436 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800bf1e:	2312      	movs	r3, #18
 800bf20:	18fb      	adds	r3, r7, r3
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	4a47      	ldr	r2, [pc, #284]	@ (800c044 <dwt_configure+0x340>)
 800bf26:	005b      	lsls	r3, r3, #1
 800bf28:	18d3      	adds	r3, r2, r3
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	001a      	movs	r2, r3
 800bf30:	2104      	movs	r1, #4
 800bf32:	2023      	movs	r0, #35	@ 0x23
 800bf34:	f000 fa5f 	bl	800c3f6 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	799b      	ldrb	r3, [r3, #6]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d011      	beq.n	800bf64 <dwt_configure+0x260>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	79db      	ldrb	r3, [r3, #7]
 800bf44:	001a      	movs	r2, r3
 800bf46:	4b40      	ldr	r3, [pc, #256]	@ (800c048 <dwt_configure+0x344>)
 800bf48:	5c9b      	ldrb	r3, [r3, r2]
 800bf4a:	001a      	movs	r2, r3
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	2021      	movs	r0, #33	@ 0x21
 800bf50:	f000 fa3e 	bl	800c3d0 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800bf54:	2317      	movs	r3, #23
 800bf56:	18fb      	adds	r3, r7, r3
 800bf58:	2203      	movs	r2, #3
 800bf5a:	701a      	strb	r2, [r3, #0]
        useDWnsSFD = 1 ;
 800bf5c:	2316      	movs	r3, #22
 800bf5e:	18fb      	adds	r3, r7, r3
 800bf60:	2201      	movs	r2, #1
 800bf62:	701a      	strb	r2, [r3, #0]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bf64:	2113      	movs	r1, #19
 800bf66:	187b      	adds	r3, r7, r1
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	220f      	movs	r2, #15
 800bf6c:	401a      	ands	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800bf6e:	187b      	adds	r3, r7, r1
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	011b      	lsls	r3, r3, #4
 800bf74:	21ff      	movs	r1, #255	@ 0xff
 800bf76:	400b      	ands	r3, r1
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bf78:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	785b      	ldrb	r3, [r3, #1]
 800bf7e:	0499      	lsls	r1, r3, #18
 800bf80:	23c0      	movs	r3, #192	@ 0xc0
 800bf82:	031b      	lsls	r3, r3, #12
 800bf84:	400b      	ands	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800bf86:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800bf88:	2317      	movs	r3, #23
 800bf8a:	18fb      	adds	r3, r7, r3
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	0519      	lsls	r1, r3, #20
 800bf90:	23c0      	movs	r3, #192	@ 0xc0
 800bf92:	039b      	lsls	r3, r3, #14
 800bf94:	400b      	ands	r3, r1
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800bf96:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800bf98:	2316      	movs	r3, #22
 800bf9a:	18fb      	adds	r3, r7, r3
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	0459      	lsls	r1, r3, #17
 800bfa0:	2380      	movs	r3, #128	@ 0x80
 800bfa2:	029b      	lsls	r3, r3, #10
 800bfa4:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800bfa6:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	791b      	ldrb	r3, [r3, #4]
 800bfac:	0599      	lsls	r1, r3, #22
 800bfae:	23f8      	movs	r3, #248	@ 0xf8
 800bfb0:	04db      	lsls	r3, r3, #19
 800bfb2:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800bfb4:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	795b      	ldrb	r3, [r3, #5]
 800bfba:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	001a      	movs	r2, r3
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	201f      	movs	r0, #31
 800bfc8:	f000 fa35 	bl	800c436 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	789a      	ldrb	r2, [r3, #2]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	785b      	ldrb	r3, [r3, #1]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	0419      	lsls	r1, r3, #16
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	79db      	ldrb	r3, [r3, #7]
 800bfde:	035a      	lsls	r2, r3, #13
 800bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800c010 <dwt_configure+0x30c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	430a      	orrs	r2, r1
 800bfe6:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800bfe8:	4b09      	ldr	r3, [pc, #36]	@ (800c010 <dwt_configure+0x30c>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	001a      	movs	r2, r3
 800bff0:	2100      	movs	r1, #0
 800bff2:	2008      	movs	r0, #8
 800bff4:	f000 fa1f 	bl	800c436 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800bff8:	2242      	movs	r2, #66	@ 0x42
 800bffa:	2100      	movs	r1, #0
 800bffc:	200d      	movs	r0, #13
 800bffe:	f000 f9e7 	bl	800c3d0 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800c002:	46c0      	nop			@ (mov r8, r8)
 800c004:	46bd      	mov	sp, r7
 800c006:	b006      	add	sp, #24
 800c008:	bdb0      	pop	{r4, r5, r7, pc}
 800c00a:	46c0      	nop			@ (mov r8, r8)
 800c00c:	0800da98 	.word	0x0800da98
 800c010:	200001bc 	.word	0x200001bc
 800c014:	ffbfffff 	.word	0xffbfffff
 800c018:	fffcffff 	.word	0xfffcffff
 800c01c:	00002804 	.word	0x00002804
 800c020:	0800da18 	.word	0x0800da18
 800c024:	0800da38 	.word	0x0800da38
 800c028:	0800da50 	.word	0x0800da50
 800c02c:	0800da58 	.word	0x0800da58
 800c030:	0800da20 	.word	0x0800da20
 800c034:	0800da68 	.word	0x0800da68
 800c038:	0800da74 	.word	0x0800da74
 800c03c:	0800da78 	.word	0x0800da78
 800c040:	00001041 	.word	0x00001041
 800c044:	0800da5c 	.word	0x0800da5c
 800c048:	0800da64 	.word	0x0800da64

0800c04c <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	0002      	movs	r2, r0
 800c054:	1dbb      	adds	r3, r7, #6
 800c056:	801a      	strh	r2, [r3, #0]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800c058:	1dbb      	adds	r3, r7, #6
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	4904      	ldr	r1, [pc, #16]	@ (800c070 <dwt_setrxantennadelay+0x24>)
 800c05e:	001a      	movs	r2, r3
 800c060:	202e      	movs	r0, #46	@ 0x2e
 800c062:	f000 f9c8 	bl	800c3f6 <dwt_write16bitoffsetreg>
}
 800c066:	46c0      	nop			@ (mov r8, r8)
 800c068:	46bd      	mov	sp, r7
 800c06a:	b002      	add	sp, #8
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	46c0      	nop			@ (mov r8, r8)
 800c070:	00001804 	.word	0x00001804

0800c074 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	0002      	movs	r2, r0
 800c07c:	1dbb      	adds	r3, r7, #6
 800c07e:	801a      	strh	r2, [r3, #0]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800c080:	1dbb      	adds	r3, r7, #6
 800c082:	881b      	ldrh	r3, [r3, #0]
 800c084:	001a      	movs	r2, r3
 800c086:	2100      	movs	r1, #0
 800c088:	2018      	movs	r0, #24
 800c08a:	f000 f9b4 	bl	800c3f6 <dwt_write16bitoffsetreg>
}
 800c08e:	46c0      	nop			@ (mov r8, r8)
 800c090:	46bd      	mov	sp, r7
 800c092:	b002      	add	sp, #8
 800c094:	bd80      	pop	{r7, pc}

0800c096 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b082      	sub	sp, #8
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6039      	str	r1, [r7, #0]
 800c09e:	0011      	movs	r1, r2
 800c0a0:	1dbb      	adds	r3, r7, #6
 800c0a2:	1c02      	adds	r2, r0, #0
 800c0a4:	801a      	strh	r2, [r3, #0]
 800c0a6:	1d3b      	adds	r3, r7, #4
 800c0a8:	1c0a      	adds	r2, r1, #0
 800c0aa:	801a      	strh	r2, [r3, #0]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800c0ac:	1d3b      	adds	r3, r7, #4
 800c0ae:	881a      	ldrh	r2, [r3, #0]
 800c0b0:	1dbb      	adds	r3, r7, #6
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	18d2      	adds	r2, r2, r3
 800c0b6:	2380      	movs	r3, #128	@ 0x80
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	dc0d      	bgt.n	800c0da <dwt_writetxdata+0x44>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800c0be:	1dbb      	adds	r3, r7, #6
 800c0c0:	881b      	ldrh	r3, [r3, #0]
 800c0c2:	3b02      	subs	r3, #2
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	1d3b      	adds	r3, r7, #4
 800c0ca:	8819      	ldrh	r1, [r3, #0]
 800c0cc:	0013      	movs	r3, r2
 800c0ce:	0002      	movs	r2, r0
 800c0d0:	2009      	movs	r0, #9
 800c0d2:	f000 f862 	bl	800c19a <dwt_writetodevice>
        return DWT_SUCCESS;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e001      	b.n	800c0de <dwt_writetxdata+0x48>
    }
    else
    {
        return DWT_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	425b      	negs	r3, r3
    }
} // end dwt_writetxdata()
 800c0de:	0018      	movs	r0, r3
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	b002      	add	sp, #8
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	603a      	str	r2, [r7, #0]
 800c0f0:	1dbb      	adds	r3, r7, #6
 800c0f2:	1c02      	adds	r2, r0, #0
 800c0f4:	801a      	strh	r2, [r3, #0]
 800c0f6:	1d3b      	adds	r3, r7, #4
 800c0f8:	1c0a      	adds	r2, r1, #0
 800c0fa:	801a      	strh	r2, [r3, #0]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800c0fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c12c <dwt_writetxfctrl+0x44>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68da      	ldr	r2, [r3, #12]
 800c102:	1dbb      	adds	r3, r7, #6
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	431a      	orrs	r2, r3
 800c108:	1d3b      	adds	r3, r7, #4
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	059b      	lsls	r3, r3, #22
 800c10e:	431a      	orrs	r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	03db      	lsls	r3, r3, #15
 800c114:	4313      	orrs	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	001a      	movs	r2, r3
 800c11c:	2100      	movs	r1, #0
 800c11e:	2008      	movs	r0, #8
 800c120:	f000 f989 	bl	800c436 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800c124:	46c0      	nop			@ (mov r8, r8)
 800c126:	46bd      	mov	sp, r7
 800c128:	b004      	add	sp, #16
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	200001bc 	.word	0x200001bc

0800c130 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	0008      	movs	r0, r1
 800c13a:	0011      	movs	r1, r2
 800c13c:	1cbb      	adds	r3, r7, #2
 800c13e:	1c02      	adds	r2, r0, #0
 800c140:	801a      	strh	r2, [r3, #0]
 800c142:	003b      	movs	r3, r7
 800c144:	1c0a      	adds	r2, r1, #0
 800c146:	801a      	strh	r2, [r3, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800c148:	1cbb      	adds	r3, r7, #2
 800c14a:	881a      	ldrh	r2, [r3, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	003b      	movs	r3, r7
 800c150:	8819      	ldrh	r1, [r3, #0]
 800c152:	0003      	movs	r3, r0
 800c154:	2011      	movs	r0, #17
 800c156:	f000 f881 	bl	800c25c <dwt_readfromdevice>
}
 800c15a:	46c0      	nop			@ (mov r8, r8)
 800c15c:	46bd      	mov	sp, r7
 800c15e:	b002      	add	sp, #8
 800c160:	bd80      	pop	{r7, pc}

0800c162 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2205      	movs	r2, #5
 800c16e:	2100      	movs	r1, #0
 800c170:	2017      	movs	r0, #23
 800c172:	f000 f873 	bl	800c25c <dwt_readfromdevice>
}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	46bd      	mov	sp, r7
 800c17a:	b002      	add	sp, #8
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2205      	movs	r2, #5
 800c18a:	2100      	movs	r1, #0
 800c18c:	2015      	movs	r0, #21
 800c18e:	f000 f865 	bl	800c25c <dwt_readfromdevice>
}
 800c192:	46c0      	nop			@ (mov r8, r8)
 800c194:	46bd      	mov	sp, r7
 800c196:	b002      	add	sp, #8
 800c198:	bd80      	pop	{r7, pc}

0800c19a <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800c19a:	b590      	push	{r4, r7, lr}
 800c19c:	b087      	sub	sp, #28
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	60ba      	str	r2, [r7, #8]
 800c1a2:	607b      	str	r3, [r7, #4]
 800c1a4:	240e      	movs	r4, #14
 800c1a6:	193b      	adds	r3, r7, r4
 800c1a8:	1c02      	adds	r2, r0, #0
 800c1aa:	801a      	strh	r2, [r3, #0]
 800c1ac:	200c      	movs	r0, #12
 800c1ae:	183b      	adds	r3, r7, r0
 800c1b0:	1c0a      	adds	r2, r1, #0
 800c1b2:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800c1b8:	183b      	adds	r3, r7, r0
 800c1ba:	881b      	ldrh	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10d      	bne.n	800c1dc <dwt_writetodevice+0x42>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800c1c0:	193b      	adds	r3, r7, r4
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	1c59      	adds	r1, r3, #1
 800c1ca:	6179      	str	r1, [r7, #20]
 800c1cc:	2180      	movs	r1, #128	@ 0x80
 800c1ce:	4249      	negs	r1, r1
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	b2d1      	uxtb	r1, r2
 800c1d4:	2210      	movs	r2, #16
 800c1d6:	18ba      	adds	r2, r7, r2
 800c1d8:	54d1      	strb	r1, [r2, r3]
 800c1da:	e033      	b.n	800c244 <dwt_writetodevice+0xaa>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800c1dc:	230e      	movs	r3, #14
 800c1de:	18fb      	adds	r3, r7, r3
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	1c59      	adds	r1, r3, #1
 800c1e8:	6179      	str	r1, [r7, #20]
 800c1ea:	2140      	movs	r1, #64	@ 0x40
 800c1ec:	4249      	negs	r1, r1
 800c1ee:	430a      	orrs	r2, r1
 800c1f0:	b2d1      	uxtb	r1, r2
 800c1f2:	2010      	movs	r0, #16
 800c1f4:	183a      	adds	r2, r7, r0
 800c1f6:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800c1f8:	210c      	movs	r1, #12
 800c1fa:	187b      	adds	r3, r7, r1
 800c1fc:	881b      	ldrh	r3, [r3, #0]
 800c1fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800c200:	d808      	bhi.n	800c214 <dwt_writetodevice+0x7a>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	1c5a      	adds	r2, r3, #1
 800c206:	617a      	str	r2, [r7, #20]
 800c208:	187a      	adds	r2, r7, r1
 800c20a:	8812      	ldrh	r2, [r2, #0]
 800c20c:	b2d1      	uxtb	r1, r2
 800c20e:	183a      	adds	r2, r7, r0
 800c210:	54d1      	strb	r1, [r2, r3]
 800c212:	e017      	b.n	800c244 <dwt_writetodevice+0xaa>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800c214:	200c      	movs	r0, #12
 800c216:	183b      	adds	r3, r7, r0
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	1c59      	adds	r1, r3, #1
 800c220:	6179      	str	r1, [r7, #20]
 800c222:	2180      	movs	r1, #128	@ 0x80
 800c224:	4249      	negs	r1, r1
 800c226:	430a      	orrs	r2, r1
 800c228:	b2d1      	uxtb	r1, r2
 800c22a:	2410      	movs	r4, #16
 800c22c:	193a      	adds	r2, r7, r4
 800c22e:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800c230:	183b      	adds	r3, r7, r0
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	09db      	lsrs	r3, r3, #7
 800c236:	b299      	uxth	r1, r3
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	1c5a      	adds	r2, r3, #1
 800c23c:	617a      	str	r2, [r7, #20]
 800c23e:	b2c9      	uxtb	r1, r1
 800c240:	193a      	adds	r2, r7, r4
 800c242:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	b298      	uxth	r0, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	2110      	movs	r1, #16
 800c24e:	1879      	adds	r1, r7, r1
 800c250:	f000 fc58 	bl	800cb04 <writetospi>
} // end dwt_writetodevice()
 800c254:	46c0      	nop			@ (mov r8, r8)
 800c256:	46bd      	mov	sp, r7
 800c258:	b007      	add	sp, #28
 800c25a:	bd90      	pop	{r4, r7, pc}

0800c25c <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800c25c:	b590      	push	{r4, r7, lr}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60ba      	str	r2, [r7, #8]
 800c264:	607b      	str	r3, [r7, #4]
 800c266:	240e      	movs	r4, #14
 800c268:	193b      	adds	r3, r7, r4
 800c26a:	1c02      	adds	r2, r0, #0
 800c26c:	801a      	strh	r2, [r3, #0]
 800c26e:	200c      	movs	r0, #12
 800c270:	183b      	adds	r3, r7, r0
 800c272:	1c0a      	adds	r2, r1, #0
 800c274:	801a      	strh	r2, [r3, #0]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800c276:	2300      	movs	r3, #0
 800c278:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800c27a:	183b      	adds	r3, r7, r0
 800c27c:	881b      	ldrh	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d109      	bne.n	800c296 <dwt_readfromdevice+0x3a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	617a      	str	r2, [r7, #20]
 800c288:	193a      	adds	r2, r7, r4
 800c28a:	8812      	ldrh	r2, [r2, #0]
 800c28c:	b2d1      	uxtb	r1, r2
 800c28e:	2210      	movs	r2, #16
 800c290:	18ba      	adds	r2, r7, r2
 800c292:	54d1      	strb	r1, [r2, r3]
 800c294:	e032      	b.n	800c2fc <dwt_readfromdevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800c296:	230e      	movs	r3, #14
 800c298:	18fb      	adds	r3, r7, r3
 800c29a:	881b      	ldrh	r3, [r3, #0]
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	1c59      	adds	r1, r3, #1
 800c2a2:	6179      	str	r1, [r7, #20]
 800c2a4:	2140      	movs	r1, #64	@ 0x40
 800c2a6:	430a      	orrs	r2, r1
 800c2a8:	b2d1      	uxtb	r1, r2
 800c2aa:	2010      	movs	r0, #16
 800c2ac:	183a      	adds	r2, r7, r0
 800c2ae:	54d1      	strb	r1, [r2, r3]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800c2b0:	210c      	movs	r1, #12
 800c2b2:	187b      	adds	r3, r7, r1
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2b8:	d808      	bhi.n	800c2cc <dwt_readfromdevice+0x70>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	617a      	str	r2, [r7, #20]
 800c2c0:	187a      	adds	r2, r7, r1
 800c2c2:	8812      	ldrh	r2, [r2, #0]
 800c2c4:	b2d1      	uxtb	r1, r2
 800c2c6:	183a      	adds	r2, r7, r0
 800c2c8:	54d1      	strb	r1, [r2, r3]
 800c2ca:	e017      	b.n	800c2fc <dwt_readfromdevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800c2cc:	200c      	movs	r0, #12
 800c2ce:	183b      	adds	r3, r7, r0
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	1c59      	adds	r1, r3, #1
 800c2d8:	6179      	str	r1, [r7, #20]
 800c2da:	2180      	movs	r1, #128	@ 0x80
 800c2dc:	4249      	negs	r1, r1
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	b2d1      	uxtb	r1, r2
 800c2e2:	2410      	movs	r4, #16
 800c2e4:	193a      	adds	r2, r7, r4
 800c2e6:	54d1      	strb	r1, [r2, r3]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800c2e8:	183b      	adds	r3, r7, r0
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	09db      	lsrs	r3, r3, #7
 800c2ee:	b299      	uxth	r1, r3
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	1c5a      	adds	r2, r3, #1
 800c2f4:	617a      	str	r2, [r7, #20]
 800c2f6:	b2c9      	uxtb	r1, r1
 800c2f8:	193a      	adds	r2, r7, r4
 800c2fa:	54d1      	strb	r1, [r2, r3]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	b298      	uxth	r0, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	2110      	movs	r1, #16
 800c306:	1879      	adds	r1, r7, r1
 800c308:	f000 fc34 	bl	800cb74 <readfromspi>
} // end dwt_readfromdevice()
 800c30c:	46c0      	nop			@ (mov r8, r8)
 800c30e:	46bd      	mov	sp, r7
 800c310:	b007      	add	sp, #28
 800c312:	bd90      	pop	{r4, r7, pc}

0800c314 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800c31e:	2300      	movs	r3, #0
 800c320:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	b298      	uxth	r0, r3
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	b299      	uxth	r1, r3
 800c32a:	230c      	movs	r3, #12
 800c32c:	18fb      	adds	r3, r7, r3
 800c32e:	2204      	movs	r2, #4
 800c330:	f7ff ff94 	bl	800c25c <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800c334:	2303      	movs	r3, #3
 800c336:	613b      	str	r3, [r7, #16]
 800c338:	e00b      	b.n	800c352 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	021b      	lsls	r3, r3, #8
 800c33e:	220c      	movs	r2, #12
 800c340:	18b9      	adds	r1, r7, r2
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	188a      	adds	r2, r1, r2
 800c346:	7812      	ldrb	r2, [r2, #0]
 800c348:	189b      	adds	r3, r3, r2
 800c34a:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	3b01      	subs	r3, #1
 800c350:	613b      	str	r3, [r7, #16]
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	2b00      	cmp	r3, #0
 800c356:	daf0      	bge.n	800c33a <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800c358:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800c35a:	0018      	movs	r0, r3
 800c35c:	46bd      	mov	sp, r7
 800c35e:	b006      	add	sp, #24
 800c360:	bd80      	pop	{r7, pc}

0800c362 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800c362:	b5b0      	push	{r4, r5, r7, lr}
 800c364:	b084      	sub	sp, #16
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800c36c:	240e      	movs	r4, #14
 800c36e:	193b      	adds	r3, r7, r4
 800c370:	2200      	movs	r2, #0
 800c372:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	b298      	uxth	r0, r3
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	b299      	uxth	r1, r3
 800c37c:	250c      	movs	r5, #12
 800c37e:	197b      	adds	r3, r7, r5
 800c380:	2202      	movs	r2, #2
 800c382:	f7ff ff6b 	bl	800c25c <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800c386:	0029      	movs	r1, r5
 800c388:	187b      	adds	r3, r7, r1
 800c38a:	785b      	ldrb	r3, [r3, #1]
 800c38c:	021b      	lsls	r3, r3, #8
 800c38e:	b29a      	uxth	r2, r3
 800c390:	187b      	adds	r3, r7, r1
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	0019      	movs	r1, r3
 800c396:	193b      	adds	r3, r7, r4
 800c398:	1852      	adds	r2, r2, r1
 800c39a:	801a      	strh	r2, [r3, #0]
    return regval ;
 800c39c:	193b      	adds	r3, r7, r4
 800c39e:	881b      	ldrh	r3, [r3, #0]

} // end dwt_read16bitoffsetreg()
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	b004      	add	sp, #16
 800c3a6:	bdb0      	pop	{r4, r5, r7, pc}

0800c3a8 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800c3a8:	b590      	push	{r4, r7, lr}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	b298      	uxth	r0, r3
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	b299      	uxth	r1, r3
 800c3ba:	240f      	movs	r4, #15
 800c3bc:	193b      	adds	r3, r7, r4
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f7ff ff4c 	bl	800c25c <dwt_readfromdevice>

    return regval ;
 800c3c4:	193b      	adds	r3, r7, r4
 800c3c6:	781b      	ldrb	r3, [r3, #0]
}
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	b005      	add	sp, #20
 800c3ce:	bd90      	pop	{r4, r7, pc}

0800c3d0 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	1dfb      	adds	r3, r7, #7
 800c3dc:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	b298      	uxth	r0, r3
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	b299      	uxth	r1, r3
 800c3e6:	1dfb      	adds	r3, r7, #7
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f7ff fed6 	bl	800c19a <dwt_writetodevice>
}
 800c3ee:	46c0      	nop			@ (mov r8, r8)
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	b004      	add	sp, #16
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800c3f6:	b590      	push	{r4, r7, lr}
 800c3f8:	b087      	sub	sp, #28
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	60f8      	str	r0, [r7, #12]
 800c3fe:	60b9      	str	r1, [r7, #8]
 800c400:	1dbb      	adds	r3, r7, #6
 800c402:	801a      	strh	r2, [r3, #0]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800c404:	1dbb      	adds	r3, r7, #6
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	2414      	movs	r4, #20
 800c40c:	193b      	adds	r3, r7, r4
 800c40e:	701a      	strb	r2, [r3, #0]
    buffer[1] = regval >> 8 ;
 800c410:	1dbb      	adds	r3, r7, #6
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	0a1b      	lsrs	r3, r3, #8
 800c416:	b29b      	uxth	r3, r3
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	193b      	adds	r3, r7, r4
 800c41c:	705a      	strb	r2, [r3, #1]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	b298      	uxth	r0, r3
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	b299      	uxth	r1, r3
 800c426:	193b      	adds	r3, r7, r4
 800c428:	2202      	movs	r2, #2
 800c42a:	f7ff feb6 	bl	800c19a <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800c42e:	46c0      	nop			@ (mov r8, r8)
 800c430:	46bd      	mov	sp, r7
 800c432:	b007      	add	sp, #28
 800c434:	bd90      	pop	{r4, r7, pc}

0800c436 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b086      	sub	sp, #24
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800c442:	2300      	movs	r3, #0
 800c444:	617b      	str	r3, [r7, #20]
 800c446:	e00d      	b.n	800c464 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	b2d9      	uxtb	r1, r3
 800c44c:	2310      	movs	r3, #16
 800c44e:	18fa      	adds	r2, r7, r3
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	18d3      	adds	r3, r2, r3
 800c454:	1c0a      	adds	r2, r1, #0
 800c456:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	0a1b      	lsrs	r3, r3, #8
 800c45c:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	3301      	adds	r3, #1
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2b03      	cmp	r3, #3
 800c468:	ddee      	ble.n	800c448 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	b298      	uxth	r0, r3
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	b299      	uxth	r1, r3
 800c472:	2310      	movs	r3, #16
 800c474:	18fb      	adds	r3, r7, r3
 800c476:	2204      	movs	r2, #4
 800c478:	f7ff fe8f 	bl	800c19a <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800c47c:	46c0      	nop			@ (mov r8, r8)
 800c47e:	46bd      	mov	sp, r7
 800c480:	b006      	add	sp, #24
 800c482:	bd80      	pop	{r7, pc}

0800c484 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	0002      	movs	r2, r0
 800c48c:	1dbb      	adds	r3, r7, #6
 800c48e:	801a      	strh	r2, [r3, #0]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800c490:	1dbb      	adds	r3, r7, #6
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	001a      	movs	r2, r3
 800c496:	2104      	movs	r1, #4
 800c498:	202d      	movs	r0, #45	@ 0x2d
 800c49a:	f7ff ffac 	bl	800c3f6 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800c49e:	2203      	movs	r2, #3
 800c4a0:	2106      	movs	r1, #6
 800c4a2:	202d      	movs	r0, #45	@ 0x2d
 800c4a4:	f7ff ff94 	bl	800c3d0 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2106      	movs	r1, #6
 800c4ac:	202d      	movs	r0, #45	@ 0x2d
 800c4ae:	f7ff ff8f 	bl	800c3d0 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800c4b2:	210a      	movs	r1, #10
 800c4b4:	202d      	movs	r0, #45	@ 0x2d
 800c4b6:	f7ff ff2d 	bl	800c314 <dwt_read32bitoffsetreg>
 800c4ba:	0003      	movs	r3, r0
 800c4bc:	60fb      	str	r3, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800c4be:	68fb      	ldr	r3, [r7, #12]
}
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	b004      	add	sp, #16
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2102      	movs	r1, #2
 800c4d0:	202c      	movs	r0, #44	@ 0x2c
 800c4d2:	f7ff ff7d 	bl	800c3d0 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	2102      	movs	r1, #2
 800c4da:	202c      	movs	r0, #44	@ 0x2c
 800c4dc:	f7ff ff78 	bl	800c3d0 <dwt_write8bitoffsetreg>
}
 800c4e0:	46c0      	nop			@ (mov r8, r8)
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c524 <_dwt_configlde+0x3c>)
 800c4f2:	226d      	movs	r2, #109	@ 0x6d
 800c4f4:	0019      	movs	r1, r3
 800c4f6:	202e      	movs	r0, #46	@ 0x2e
 800c4f8:	f7ff ff6a 	bl	800c3d0 <dwt_write8bitoffsetreg>

    if(prfIndex)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d006      	beq.n	800c510 <_dwt_configlde+0x28>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800c502:	4a09      	ldr	r2, [pc, #36]	@ (800c528 <_dwt_configlde+0x40>)
 800c504:	4b09      	ldr	r3, [pc, #36]	@ (800c52c <_dwt_configlde+0x44>)
 800c506:	0019      	movs	r1, r3
 800c508:	202e      	movs	r0, #46	@ 0x2e
 800c50a:	f7ff ff74 	bl	800c3f6 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800c50e:	e005      	b.n	800c51c <_dwt_configlde+0x34>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800c510:	4a07      	ldr	r2, [pc, #28]	@ (800c530 <_dwt_configlde+0x48>)
 800c512:	4b06      	ldr	r3, [pc, #24]	@ (800c52c <_dwt_configlde+0x44>)
 800c514:	0019      	movs	r1, r3
 800c516:	202e      	movs	r0, #46	@ 0x2e
 800c518:	f7ff ff6d 	bl	800c3f6 <dwt_write16bitoffsetreg>
}
 800c51c:	46c0      	nop			@ (mov r8, r8)
 800c51e:	46bd      	mov	sp, r7
 800c520:	b002      	add	sp, #8
 800c522:	bd80      	pop	{r7, pc}
 800c524:	00000806 	.word	0x00000806
 800c528:	00000607 	.word	0x00000607
 800c52c:	00001806 	.word	0x00001806
 800c530:	00001607 	.word	0x00001607

0800c534 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800c538:	200e      	movs	r0, #14
 800c53a:	f000 f861 	bl	800c600 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800c53e:	2380      	movs	r3, #128	@ 0x80
 800c540:	021b      	lsls	r3, r3, #8
 800c542:	001a      	movs	r2, r3
 800c544:	2106      	movs	r1, #6
 800c546:	202d      	movs	r0, #45	@ 0x2d
 800c548:	f7ff ff55 	bl	800c3f6 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800c54c:	2001      	movs	r0, #1
 800c54e:	f000 facc 	bl	800caea <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800c552:	2001      	movs	r0, #1
 800c554:	f000 f854 	bl	800c600 <_dwt_enableclocks>
}
 800c558:	46c0      	nop			@ (mov r8, r8)
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
	...

0800c560 <dwt_setdblrxbuffmode>:
 * output parameters
 *
 * no return value
 */
void dwt_setdblrxbuffmode(int enable)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
    if(enable)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00c      	beq.n	800c588 <dwt_setdblrxbuffmode+0x28>
    {
        // Enable double RX buffer mode
        pdw1000local->sysCFGreg &= ~SYS_CFG_DIS_DRXB;
 800c56e:	4b13      	ldr	r3, [pc, #76]	@ (800c5bc <dwt_setdblrxbuffmode+0x5c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	691a      	ldr	r2, [r3, #16]
 800c574:	4b11      	ldr	r3, [pc, #68]	@ (800c5bc <dwt_setdblrxbuffmode+0x5c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4911      	ldr	r1, [pc, #68]	@ (800c5c0 <dwt_setdblrxbuffmode+0x60>)
 800c57a:	400a      	ands	r2, r1
 800c57c:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 1;
 800c57e:	4b0f      	ldr	r3, [pc, #60]	@ (800c5bc <dwt_setdblrxbuffmode+0x5c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2201      	movs	r2, #1
 800c584:	751a      	strb	r2, [r3, #20]
 800c586:	e00c      	b.n	800c5a2 <dwt_setdblrxbuffmode+0x42>
    }
    else
    {
        // Disable double RX buffer mode
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_DRXB;
 800c588:	4b0c      	ldr	r3, [pc, #48]	@ (800c5bc <dwt_setdblrxbuffmode+0x5c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	691a      	ldr	r2, [r3, #16]
 800c58e:	4b0b      	ldr	r3, [pc, #44]	@ (800c5bc <dwt_setdblrxbuffmode+0x5c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2180      	movs	r1, #128	@ 0x80
 800c594:	0149      	lsls	r1, r1, #5
 800c596:	430a      	orrs	r2, r1
 800c598:	611a      	str	r2, [r3, #16]
        pdw1000local->dblbuffon = 0;
 800c59a:	4b08      	ldr	r3, [pc, #32]	@ (800c5bc <dwt_setdblrxbuffmode+0x5c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	751a      	strb	r2, [r3, #20]
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800c5a2:	4b06      	ldr	r3, [pc, #24]	@ (800c5bc <dwt_setdblrxbuffmode+0x5c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	001a      	movs	r2, r3
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	2004      	movs	r0, #4
 800c5ae:	f7ff ff42 	bl	800c436 <dwt_write32bitoffsetreg>
}
 800c5b2:	46c0      	nop			@ (mov r8, r8)
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	b002      	add	sp, #8
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	46c0      	nop			@ (mov r8, r8)
 800c5bc:	200001bc 	.word	0x200001bc
 800c5c0:	ffffefff 	.word	0xffffefff

0800c5c4 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	201a      	movs	r0, #26
 800c5d0:	f7ff fea0 	bl	800c314 <dwt_read32bitoffsetreg>
 800c5d4:	0003      	movs	r3, r0
 800c5d6:	60fb      	str	r3, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	0d1b      	lsrs	r3, r3, #20
 800c5dc:	051b      	lsls	r3, r3, #20
 800c5de:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	031b      	lsls	r3, r3, #12
 800c5e4:	0b1b      	lsrs	r3, r3, #12
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	001a      	movs	r2, r3
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	201a      	movs	r0, #26
 800c5f4:	f7ff ff1f 	bl	800c436 <dwt_write32bitoffsetreg>
}
 800c5f8:	46c0      	nop			@ (mov r8, r8)
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	b004      	add	sp, #16
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800c600:	b590      	push	{r4, r7, lr}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800c608:	230c      	movs	r3, #12
 800c60a:	18fb      	adds	r3, r7, r3
 800c60c:	2202      	movs	r2, #2
 800c60e:	2100      	movs	r1, #0
 800c610:	2036      	movs	r0, #54	@ 0x36
 800c612:	f7ff fe23 	bl	800c25c <dwt_readfromdevice>
    switch(clocks)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b0e      	cmp	r3, #14
 800c61a:	d900      	bls.n	800c61e <_dwt_enableclocks+0x1e>
 800c61c:	e07b      	b.n	800c716 <_dwt_enableclocks+0x116>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	009a      	lsls	r2, r3, #2
 800c622:	4b46      	ldr	r3, [pc, #280]	@ (800c73c <_dwt_enableclocks+0x13c>)
 800c624:	18d3      	adds	r3, r2, r3
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 800c62a:	210c      	movs	r1, #12
 800c62c:	187b      	adds	r3, r7, r1
 800c62e:	2200      	movs	r2, #0
 800c630:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 800c632:	187b      	adds	r3, r7, r1
 800c634:	785b      	ldrb	r3, [r3, #1]
 800c636:	2201      	movs	r2, #1
 800c638:	4393      	bics	r3, r2
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	187b      	adds	r3, r7, r1
 800c63e:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c640:	e06a      	b.n	800c718 <_dwt_enableclocks+0x118>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800c642:	210c      	movs	r1, #12
 800c644:	187b      	adds	r3, r7, r1
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	b25b      	sxtb	r3, r3
 800c64a:	2203      	movs	r2, #3
 800c64c:	4393      	bics	r3, r2
 800c64e:	b25b      	sxtb	r3, r3
 800c650:	2201      	movs	r2, #1
 800c652:	4313      	orrs	r3, r2
 800c654:	b25b      	sxtb	r3, r3
 800c656:	b2da      	uxtb	r2, r3
 800c658:	187b      	adds	r3, r7, r1
 800c65a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c65c:	e05c      	b.n	800c718 <_dwt_enableclocks+0x118>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800c65e:	210c      	movs	r1, #12
 800c660:	187b      	adds	r3, r7, r1
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	b25b      	sxtb	r3, r3
 800c666:	2203      	movs	r2, #3
 800c668:	4393      	bics	r3, r2
 800c66a:	b25b      	sxtb	r3, r3
 800c66c:	2202      	movs	r2, #2
 800c66e:	4313      	orrs	r3, r2
 800c670:	b25b      	sxtb	r3, r3
 800c672:	b2da      	uxtb	r2, r3
 800c674:	187b      	adds	r3, r7, r1
 800c676:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c678:	e04e      	b.n	800c718 <_dwt_enableclocks+0x118>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800c67a:	210c      	movs	r1, #12
 800c67c:	187b      	adds	r3, r7, r1
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	b25b      	sxtb	r3, r3
 800c682:	224c      	movs	r2, #76	@ 0x4c
 800c684:	4393      	bics	r3, r2
 800c686:	b25b      	sxtb	r3, r3
 800c688:	2248      	movs	r2, #72	@ 0x48
 800c68a:	4313      	orrs	r3, r2
 800c68c:	b25b      	sxtb	r3, r3
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	187b      	adds	r3, r7, r1
 800c692:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x80 | reg[1];
 800c694:	187b      	adds	r3, r7, r1
 800c696:	785b      	ldrb	r3, [r3, #1]
 800c698:	2280      	movs	r2, #128	@ 0x80
 800c69a:	4252      	negs	r2, r2
 800c69c:	4313      	orrs	r3, r2
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	187b      	adds	r3, r7, r1
 800c6a2:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c6a4:	e038      	b.n	800c718 <_dwt_enableclocks+0x118>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 800c6a6:	210c      	movs	r1, #12
 800c6a8:	187b      	adds	r3, r7, r1
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	224c      	movs	r2, #76	@ 0x4c
 800c6ae:	4393      	bics	r3, r2
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	187b      	adds	r3, r7, r1
 800c6b4:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 800c6b6:	187b      	adds	r3, r7, r1
 800c6b8:	785b      	ldrb	r3, [r3, #1]
 800c6ba:	227f      	movs	r2, #127	@ 0x7f
 800c6bc:	4013      	ands	r3, r2
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	187b      	adds	r3, r7, r1
 800c6c2:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c6c4:	e028      	b.n	800c718 <_dwt_enableclocks+0x118>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800c6c6:	210c      	movs	r1, #12
 800c6c8:	187b      	adds	r3, r7, r1
 800c6ca:	785b      	ldrb	r3, [r3, #1]
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	187b      	adds	r3, r7, r1
 800c6d4:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c6d6:	e01f      	b.n	800c718 <_dwt_enableclocks+0x118>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800c6d8:	210c      	movs	r1, #12
 800c6da:	187b      	adds	r3, r7, r1
 800c6dc:	785b      	ldrb	r3, [r3, #1]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	4393      	bics	r3, r2
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	187b      	adds	r3, r7, r1
 800c6e6:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c6e8:	e016      	b.n	800c718 <_dwt_enableclocks+0x118>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800c6ea:	210c      	movs	r1, #12
 800c6ec:	187b      	adds	r3, r7, r1
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	b25b      	sxtb	r3, r3
 800c6f2:	2230      	movs	r2, #48	@ 0x30
 800c6f4:	4393      	bics	r3, r2
 800c6f6:	b25b      	sxtb	r3, r3
 800c6f8:	2220      	movs	r2, #32
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	b25b      	sxtb	r3, r3
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	187b      	adds	r3, r7, r1
 800c702:	701a      	strb	r2, [r3, #0]
        }
        break;
 800c704:	e008      	b.n	800c718 <_dwt_enableclocks+0x118>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800c706:	210c      	movs	r1, #12
 800c708:	187b      	adds	r3, r7, r1
 800c70a:	2201      	movs	r2, #1
 800c70c:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800c70e:	187b      	adds	r3, r7, r1
 800c710:	2203      	movs	r2, #3
 800c712:	705a      	strb	r2, [r3, #1]
        }
        break;
 800c714:	e000      	b.n	800c718 <_dwt_enableclocks+0x118>
        default:
        break;
 800c716:	46c0      	nop			@ (mov r8, r8)
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800c718:	240c      	movs	r4, #12
 800c71a:	193b      	adds	r3, r7, r4
 800c71c:	2201      	movs	r2, #1
 800c71e:	2100      	movs	r1, #0
 800c720:	2036      	movs	r0, #54	@ 0x36
 800c722:	f7ff fd3a 	bl	800c19a <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800c726:	193b      	adds	r3, r7, r4
 800c728:	3301      	adds	r3, #1
 800c72a:	2201      	movs	r2, #1
 800c72c:	2101      	movs	r1, #1
 800c72e:	2036      	movs	r0, #54	@ 0x36
 800c730:	f7ff fd33 	bl	800c19a <dwt_writetodevice>

} // end _dwt_enableclocks()
 800c734:	46c0      	nop			@ (mov r8, r8)
 800c736:	46bd      	mov	sp, r7
 800c738:	b005      	add	sp, #20
 800c73a:	bd90      	pop	{r4, r7, pc}
 800c73c:	0800d9dc 	.word	0x0800d9dc

0800c740 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800c740:	b580      	push	{r7, lr}
 800c742:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800c744:	2000      	movs	r0, #0
 800c746:	f7ff ff5b 	bl	800c600 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800c74a:	2200      	movs	r2, #0
 800c74c:	2104      	movs	r1, #4
 800c74e:	2036      	movs	r0, #54	@ 0x36
 800c750:	f7ff fe51 	bl	800c3f6 <dwt_write16bitoffsetreg>
}
 800c754:	46c0      	nop			@ (mov r8, r8)
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	001a      	movs	r2, r3
 800c766:	2101      	movs	r1, #1
 800c768:	200a      	movs	r0, #10
 800c76a:	f7ff fe64 	bl	800c436 <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 800c76e:	46c0      	nop			@ (mov r8, r8)
 800c770:	46bd      	mov	sp, r7
 800c772:	b002      	add	sp, #8
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800c778:	b5b0      	push	{r4, r5, r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	0002      	movs	r2, r0
 800c780:	1dfb      	adds	r3, r7, #7
 800c782:	701a      	strb	r2, [r3, #0]
    int retval = DWT_SUCCESS ;
 800c784:	2300      	movs	r3, #0
 800c786:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800c788:	210b      	movs	r1, #11
 800c78a:	187b      	adds	r3, r7, r1
 800c78c:	2200      	movs	r2, #0
 800c78e:	701a      	strb	r2, [r3, #0]
    uint16 checkTxOK = 0 ;
 800c790:	2308      	movs	r3, #8
 800c792:	18fb      	adds	r3, r7, r3
 800c794:	2200      	movs	r2, #0
 800c796:	801a      	strh	r2, [r3, #0]

    if(mode & DWT_RESPONSE_EXPECTED)
 800c798:	1dfb      	adds	r3, r7, #7
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	2202      	movs	r2, #2
 800c79e:	4013      	ands	r3, r2
 800c7a0:	d006      	beq.n	800c7b0 <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800c7a2:	187b      	adds	r3, r7, r1
 800c7a4:	2280      	movs	r2, #128	@ 0x80
 800c7a6:	701a      	strb	r2, [r3, #0]
        pdw1000local->wait4resp = 1;
 800c7a8:	4b21      	ldr	r3, [pc, #132]	@ (800c830 <dwt_starttx+0xb8>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800c7b0:	1dfb      	adds	r3, r7, #7
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	d027      	beq.n	800c80a <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800c7ba:	200b      	movs	r0, #11
 800c7bc:	183b      	adds	r3, r7, r0
 800c7be:	183a      	adds	r2, r7, r0
 800c7c0:	7812      	ldrb	r2, [r2, #0]
 800c7c2:	2106      	movs	r1, #6
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c7c8:	183b      	adds	r3, r7, r0
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	001a      	movs	r2, r3
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	200d      	movs	r0, #13
 800c7d2:	f7ff fdfd 	bl	800c3d0 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800c7d6:	2508      	movs	r5, #8
 800c7d8:	197c      	adds	r4, r7, r5
 800c7da:	2103      	movs	r1, #3
 800c7dc:	200f      	movs	r0, #15
 800c7de:	f7ff fdc0 	bl	800c362 <dwt_read16bitoffsetreg>
 800c7e2:	0003      	movs	r3, r0
 800c7e4:	8023      	strh	r3, [r4, #0]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800c7e6:	197b      	adds	r3, r7, r5
 800c7e8:	881a      	ldrh	r2, [r3, #0]
 800c7ea:	2381      	movs	r3, #129	@ 0x81
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	d102      	bne.n	800c7f8 <dwt_starttx+0x80>
        {
            retval = DWT_SUCCESS ; // All okay
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	60fb      	str	r3, [r7, #12]
 800c7f6:	e016      	b.n	800c826 <dwt_starttx+0xae>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800c7f8:	2240      	movs	r2, #64	@ 0x40
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	200d      	movs	r0, #13
 800c7fe:	f7ff fde7 	bl	800c3d0 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800c802:	2301      	movs	r3, #1
 800c804:	425b      	negs	r3, r3
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	e00d      	b.n	800c826 <dwt_starttx+0xae>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 800c80a:	200b      	movs	r0, #11
 800c80c:	183b      	adds	r3, r7, r0
 800c80e:	183a      	adds	r2, r7, r0
 800c810:	7812      	ldrb	r2, [r2, #0]
 800c812:	2102      	movs	r1, #2
 800c814:	430a      	orrs	r2, r1
 800c816:	701a      	strb	r2, [r3, #0]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c818:	183b      	adds	r3, r7, r0
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	001a      	movs	r2, r3
 800c81e:	2100      	movs	r1, #0
 800c820:	200d      	movs	r0, #13
 800c822:	f7ff fdd5 	bl	800c3d0 <dwt_write8bitoffsetreg>
    }

    return retval;
 800c826:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800c828:	0018      	movs	r0, r3
 800c82a:	46bd      	mov	sp, r7
 800c82c:	b004      	add	sp, #16
 800c82e:	bdb0      	pop	{r4, r5, r7, pc}
 800c830:	200001bc 	.word	0x200001bc

0800c834 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800c83a:	2100      	movs	r1, #0
 800c83c:	200e      	movs	r0, #14
 800c83e:	f7ff fd69 	bl	800c314 <dwt_read32bitoffsetreg>
 800c842:	0003      	movs	r3, r0
 800c844:	607b      	str	r3, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800c846:	f000 f932 	bl	800caae <decamutexon>
 800c84a:	0003      	movs	r3, r0
 800c84c:	603b      	str	r3, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800c84e:	2200      	movs	r2, #0
 800c850:	2100      	movs	r1, #0
 800c852:	200e      	movs	r0, #14
 800c854:	f7ff fdef 	bl	800c436 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800c858:	2240      	movs	r2, #64	@ 0x40
 800c85a:	2100      	movs	r1, #0
 800c85c:	200d      	movs	r0, #13
 800c85e:	f7ff fdb7 	bl	800c3d0 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800c862:	4b0d      	ldr	r3, [pc, #52]	@ (800c898 <dwt_forcetrxoff+0x64>)
 800c864:	001a      	movs	r2, r3
 800c866:	2100      	movs	r1, #0
 800c868:	200f      	movs	r0, #15
 800c86a:	f7ff fde4 	bl	800c436 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 800c86e:	f000 f817 	bl	800c8a0 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	001a      	movs	r2, r3
 800c876:	2100      	movs	r1, #0
 800c878:	200e      	movs	r0, #14
 800c87a:	f7ff fddc 	bl	800c436 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	0018      	movs	r0, r3
 800c882:	f000 f925 	bl	800cad0 <decamutexoff>
    pdw1000local->wait4resp = 0;
 800c886:	4b05      	ldr	r3, [pc, #20]	@ (800c89c <dwt_forcetrxoff+0x68>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2200      	movs	r2, #0
 800c88c:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800c88e:	46c0      	nop			@ (mov r8, r8)
 800c890:	46bd      	mov	sp, r7
 800c892:	b002      	add	sp, #8
 800c894:	bd80      	pop	{r7, pc}
 800c896:	46c0      	nop			@ (mov r8, r8)
 800c898:	2427fff8 	.word	0x2427fff8
 800c89c:	200001bc 	.word	0x200001bc

0800c8a0 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800c8a0:	b590      	push	{r4, r7, lr}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800c8a6:	1dfc      	adds	r4, r7, #7
 800c8a8:	2103      	movs	r1, #3
 800c8aa:	200f      	movs	r0, #15
 800c8ac:	f7ff fd7c 	bl	800c3a8 <dwt_read8bitoffsetreg>
 800c8b0:	0003      	movs	r3, r0
 800c8b2:	7023      	strb	r3, [r4, #0]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800c8b4:	1dfb      	adds	r3, r7, #7
 800c8b6:	781a      	ldrb	r2, [r3, #0]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 800c8b8:	1dfb      	adds	r3, r7, #7
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800c8be:	4053      	eors	r3, r2
 800c8c0:	2280      	movs	r2, #128	@ 0x80
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	d004      	beq.n	800c8d0 <dwt_syncrxbufptrs+0x30>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	2103      	movs	r1, #3
 800c8ca:	200d      	movs	r0, #13
 800c8cc:	f7ff fd80 	bl	800c3d0 <dwt_write8bitoffsetreg>
    }
}
 800c8d0:	46c0      	nop			@ (mov r8, r8)
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	b003      	add	sp, #12
 800c8d6:	bd90      	pop	{r4, r7, pc}

0800c8d8 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 800c8d8:	b5b0      	push	{r4, r5, r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2204      	movs	r2, #4
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	d101      	bne.n	800c8ec <dwt_rxenable+0x14>
    {
        dwt_syncrxbufptrs();
 800c8e8:	f7ff ffda 	bl	800c8a0 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800c8ec:	210e      	movs	r1, #14
 800c8ee:	187b      	adds	r3, r7, r1
 800c8f0:	2280      	movs	r2, #128	@ 0x80
 800c8f2:	0052      	lsls	r2, r2, #1
 800c8f4:	801a      	strh	r2, [r3, #0]

    if (mode & DWT_START_RX_DELAYED)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	d006      	beq.n	800c90c <dwt_rxenable+0x34>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800c8fe:	187b      	adds	r3, r7, r1
 800c900:	187a      	adds	r2, r7, r1
 800c902:	8812      	ldrh	r2, [r2, #0]
 800c904:	2180      	movs	r1, #128	@ 0x80
 800c906:	0089      	lsls	r1, r1, #2
 800c908:	430a      	orrs	r2, r1
 800c90a:	801a      	strh	r2, [r3, #0]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800c90c:	230e      	movs	r3, #14
 800c90e:	18fb      	adds	r3, r7, r3
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	001a      	movs	r2, r3
 800c914:	2100      	movs	r1, #0
 800c916:	200d      	movs	r0, #13
 800c918:	f7ff fd6d 	bl	800c3f6 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	4013      	ands	r3, r2
 800c922:	d01c      	beq.n	800c95e <dwt_rxenable+0x86>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800c924:	250d      	movs	r5, #13
 800c926:	197c      	adds	r4, r7, r5
 800c928:	2103      	movs	r1, #3
 800c92a:	200f      	movs	r0, #15
 800c92c:	f7ff fd3c 	bl	800c3a8 <dwt_read8bitoffsetreg>
 800c930:	0003      	movs	r3, r0
 800c932:	7023      	strb	r3, [r4, #0]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800c934:	197b      	adds	r3, r7, r5
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2208      	movs	r2, #8
 800c93a:	4013      	ands	r3, r2
 800c93c:	d00f      	beq.n	800c95e <dwt_rxenable+0x86>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 800c93e:	f7ff ff79 	bl	800c834 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2202      	movs	r2, #2
 800c946:	4013      	ands	r3, r2
 800c948:	d106      	bne.n	800c958 <dwt_rxenable+0x80>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 800c94a:	2380      	movs	r3, #128	@ 0x80
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	001a      	movs	r2, r3
 800c950:	2100      	movs	r1, #0
 800c952:	200d      	movs	r0, #13
 800c954:	f7ff fd4f 	bl	800c3f6 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800c958:	2301      	movs	r3, #1
 800c95a:	425b      	negs	r3, r3
 800c95c:	e000      	b.n	800c960 <dwt_rxenable+0x88>
        }
    }

    return DWT_SUCCESS;
 800c95e:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800c960:	0018      	movs	r0, r3
 800c962:	46bd      	mov	sp, r7
 800c964:	b004      	add	sp, #16
 800c966:	bdb0      	pop	{r4, r5, r7, pc}

0800c968 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800c968:	b5b0      	push	{r4, r5, r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	0002      	movs	r2, r0
 800c970:	1dbb      	adds	r3, r7, #6
 800c972:	801a      	strh	r2, [r3, #0]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800c974:	250f      	movs	r5, #15
 800c976:	197c      	adds	r4, r7, r5
 800c978:	2103      	movs	r1, #3
 800c97a:	2004      	movs	r0, #4
 800c97c:	f7ff fd14 	bl	800c3a8 <dwt_read8bitoffsetreg>
 800c980:	0003      	movs	r3, r0
 800c982:	7023      	strb	r3, [r4, #0]

    if(time > 0)
 800c984:	1dbb      	adds	r3, r7, #6
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d01e      	beq.n	800c9ca <dwt_setrxtimeout+0x62>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800c98c:	1dbb      	adds	r3, r7, #6
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	001a      	movs	r2, r3
 800c992:	2100      	movs	r1, #0
 800c994:	200c      	movs	r0, #12
 800c996:	f7ff fd2e 	bl	800c3f6 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800c99a:	0028      	movs	r0, r5
 800c99c:	183b      	adds	r3, r7, r0
 800c99e:	183a      	adds	r2, r7, r0
 800c9a0:	7812      	ldrb	r2, [r2, #0]
 800c9a2:	2110      	movs	r1, #16
 800c9a4:	430a      	orrs	r2, r1
 800c9a6:	701a      	strb	r2, [r3, #0]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800c9a8:	4b15      	ldr	r3, [pc, #84]	@ (800ca00 <dwt_setrxtimeout+0x98>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	691a      	ldr	r2, [r3, #16]
 800c9ae:	4b14      	ldr	r3, [pc, #80]	@ (800ca00 <dwt_setrxtimeout+0x98>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2180      	movs	r1, #128	@ 0x80
 800c9b4:	0549      	lsls	r1, r1, #21
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800c9ba:	183b      	adds	r3, r7, r0
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	001a      	movs	r2, r3
 800c9c0:	2103      	movs	r1, #3
 800c9c2:	2004      	movs	r0, #4
 800c9c4:	f7ff fd04 	bl	800c3d0 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800c9c8:	e015      	b.n	800c9f6 <dwt_setrxtimeout+0x8e>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800c9ca:	200f      	movs	r0, #15
 800c9cc:	183b      	adds	r3, r7, r0
 800c9ce:	183a      	adds	r2, r7, r0
 800c9d0:	7812      	ldrb	r2, [r2, #0]
 800c9d2:	2110      	movs	r1, #16
 800c9d4:	438a      	bics	r2, r1
 800c9d6:	701a      	strb	r2, [r3, #0]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800c9d8:	4b09      	ldr	r3, [pc, #36]	@ (800ca00 <dwt_setrxtimeout+0x98>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	691a      	ldr	r2, [r3, #16]
 800c9de:	4b08      	ldr	r3, [pc, #32]	@ (800ca00 <dwt_setrxtimeout+0x98>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4908      	ldr	r1, [pc, #32]	@ (800ca04 <dwt_setrxtimeout+0x9c>)
 800c9e4:	400a      	ands	r2, r1
 800c9e6:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800c9e8:	183b      	adds	r3, r7, r0
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	001a      	movs	r2, r3
 800c9ee:	2103      	movs	r1, #3
 800c9f0:	2004      	movs	r0, #4
 800c9f2:	f7ff fced 	bl	800c3d0 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800c9f6:	46c0      	nop			@ (mov r8, r8)
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	b004      	add	sp, #16
 800c9fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c9fe:	46c0      	nop			@ (mov r8, r8)
 800ca00:	200001bc 	.word	0x200001bc
 800ca04:	efffffff 	.word	0xefffffff

0800ca08 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 800ca0c:	22e0      	movs	r2, #224	@ 0xe0
 800ca0e:	2103      	movs	r1, #3
 800ca10:	2036      	movs	r0, #54	@ 0x36
 800ca12:	f7ff fcdd 	bl	800c3d0 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800ca16:	22f0      	movs	r2, #240	@ 0xf0
 800ca18:	2103      	movs	r1, #3
 800ca1a:	2036      	movs	r0, #54	@ 0x36
 800ca1c:	f7ff fcd8 	bl	800c3d0 <dwt_write8bitoffsetreg>
}
 800ca20:	46c0      	nop			@ (mov r8, r8)
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
	...

0800ca28 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800ca2c:	f7ff fe88 	bl	800c740 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800ca30:	2200      	movs	r2, #0
 800ca32:	2100      	movs	r1, #0
 800ca34:	202c      	movs	r0, #44	@ 0x2c
 800ca36:	f7ff fcde 	bl	800c3f6 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2106      	movs	r1, #6
 800ca3e:	202c      	movs	r0, #44	@ 0x2c
 800ca40:	f7ff fcc6 	bl	800c3d0 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800ca44:	f7ff fd40 	bl	800c4c8 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2103      	movs	r1, #3
 800ca4c:	2036      	movs	r0, #54	@ 0x36
 800ca4e:	f7ff fcbf 	bl	800c3d0 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800ca52:	2001      	movs	r0, #1
 800ca54:	f000 f849 	bl	800caea <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800ca58:	22f0      	movs	r2, #240	@ 0xf0
 800ca5a:	2103      	movs	r1, #3
 800ca5c:	2036      	movs	r0, #54	@ 0x36
 800ca5e:	f7ff fcb7 	bl	800c3d0 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800ca62:	4b03      	ldr	r3, [pc, #12]	@ (800ca70 <dwt_softreset+0x48>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2200      	movs	r2, #0
 800ca68:	755a      	strb	r2, [r3, #21]
}
 800ca6a:	46c0      	nop			@ (mov r8, r8)
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	200001bc 	.word	0x200001bc

0800ca74 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	0002      	movs	r2, r0
 800ca7c:	1dfb      	adds	r3, r7, #7
 800ca7e:	701a      	strb	r2, [r3, #0]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800ca80:	1dfb      	adds	r3, r7, #7
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	b25b      	sxtb	r3, r3
 800ca86:	221f      	movs	r2, #31
 800ca88:	4013      	ands	r3, r2
 800ca8a:	b25b      	sxtb	r3, r3
 800ca8c:	2260      	movs	r2, #96	@ 0x60
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	b25a      	sxtb	r2, r3
 800ca92:	210f      	movs	r1, #15
 800ca94:	187b      	adds	r3, r7, r1
 800ca96:	701a      	strb	r2, [r3, #0]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800ca98:	187b      	adds	r3, r7, r1
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	001a      	movs	r2, r3
 800ca9e:	210e      	movs	r1, #14
 800caa0:	202b      	movs	r0, #43	@ 0x2b
 800caa2:	f7ff fc95 	bl	800c3d0 <dwt_write8bitoffsetreg>
}
 800caa6:	46c0      	nop			@ (mov r8, r8)
 800caa8:	46bd      	mov	sp, r7
 800caaa:	b004      	add	sp, #16
 800caac:	bd80      	pop	{r7, pc}

0800caae <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800cab4:	f000 f9e4 	bl	800ce80 <port_GetEXT_IRQStatus>
 800cab8:	0003      	movs	r3, r0
 800caba:	607b      	str	r3, [r7, #4]

	if(s) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800cac2:	f000 f9cd 	bl	800ce60 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800cac6:	687b      	ldr	r3, [r7, #4]
}
 800cac8:	0018      	movs	r0, r3
 800caca:	46bd      	mov	sp, r7
 800cacc:	b002      	add	sp, #8
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d001      	beq.n	800cae2 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800cade:	f000 f9c7 	bl	800ce70 <port_EnableEXT_IRQ>
	}
}
 800cae2:	46c0      	nop			@ (mov r8, r8)
 800cae4:	46bd      	mov	sp, r7
 800cae6:	b002      	add	sp, #8
 800cae8:	bd80      	pop	{r7, pc}

0800caea <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b082      	sub	sp, #8
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	0018      	movs	r0, r3
 800caf6:	f000 f8f2 	bl	800ccde <Sleep>
}
 800cafa:	46c0      	nop			@ (mov r8, r8)
 800cafc:	46bd      	mov	sp, r7
 800cafe:	b002      	add	sp, #8
 800cb00:	bd80      	pop	{r7, pc}
	...

0800cb04 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800cb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb06:	46d6      	mov	lr, sl
 800cb08:	4646      	mov	r6, r8
 800cb0a:	464f      	mov	r7, r9
 800cb0c:	b5c0      	push	{r6, r7, lr}
 800cb0e:	4682      	mov	sl, r0
 800cb10:	4689      	mov	r9, r1
 800cb12:	0015      	movs	r5, r2
 800cb14:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800cb16:	f7ff ffca 	bl	800caae <decamutexon>
 800cb1a:	0006      	movs	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800cb1c:	4c14      	ldr	r4, [pc, #80]	@ (800cb70 <writetospi+0x6c>)
 800cb1e:	0020      	movs	r0, r4
 800cb20:	f7f9 fec1 	bl	80068a6 <HAL_SPI_GetState>
 800cb24:	2801      	cmp	r0, #1
 800cb26:	d1fa      	bne.n	800cb1e <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800cb28:	308f      	adds	r0, #143	@ 0x8f
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	2110      	movs	r1, #16
 800cb2e:	05c0      	lsls	r0, r0, #23
 800cb30:	f7f7 f837 	bl	8003ba2 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800cb34:	2301      	movs	r3, #1
 800cb36:	4652      	mov	r2, sl
 800cb38:	4649      	mov	r1, r9
 800cb3a:	0020      	movs	r0, r4
 800cb3c:	425b      	negs	r3, r3
 800cb3e:	f7f9 fd53 	bl	80065e8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800cb42:	2301      	movs	r3, #1
 800cb44:	4641      	mov	r1, r8
 800cb46:	b2aa      	uxth	r2, r5
 800cb48:	425b      	negs	r3, r3
 800cb4a:	0020      	movs	r0, r4
 800cb4c:	f7f9 fd4c 	bl	80065e8 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800cb50:	2090      	movs	r0, #144	@ 0x90
 800cb52:	2201      	movs	r2, #1
 800cb54:	2110      	movs	r1, #16
 800cb56:	05c0      	lsls	r0, r0, #23
 800cb58:	f7f7 f823 	bl	8003ba2 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800cb5c:	0030      	movs	r0, r6
 800cb5e:	f7ff ffb7 	bl	800cad0 <decamutexoff>

    return 0;
} // end writetospi()
 800cb62:	2000      	movs	r0, #0
 800cb64:	bce0      	pop	{r5, r6, r7}
 800cb66:	46ba      	mov	sl, r7
 800cb68:	46b1      	mov	r9, r6
 800cb6a:	46a8      	mov	r8, r5
 800cb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb6e:	46c0      	nop			@ (mov r8, r8)
 800cb70:	200002c8 	.word	0x200002c8

0800cb74 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800cb74:	b570      	push	{r4, r5, r6, lr}
 800cb76:	46de      	mov	lr, fp
 800cb78:	464d      	mov	r5, r9
 800cb7a:	4644      	mov	r4, r8
 800cb7c:	4656      	mov	r6, sl
 800cb7e:	b570      	push	{r4, r5, r6, lr}
 800cb80:	468b      	mov	fp, r1
 800cb82:	0004      	movs	r4, r0
 800cb84:	4692      	mov	sl, r2
 800cb86:	4698      	mov	r8, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800cb88:	f7ff ff91 	bl	800caae <decamutexon>
 800cb8c:	4681      	mov	r9, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800cb8e:	4d20      	ldr	r5, [pc, #128]	@ (800cc10 <readfromspi+0x9c>)
 800cb90:	0028      	movs	r0, r5
 800cb92:	f7f9 fe88 	bl	80068a6 <HAL_SPI_GetState>
 800cb96:	2801      	cmp	r0, #1
 800cb98:	d1fa      	bne.n	800cb90 <readfromspi+0x1c>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800cb9a:	308f      	adds	r0, #143	@ 0x8f
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2110      	movs	r1, #16
 800cba0:	05c0      	lsls	r0, r0, #23
 800cba2:	f7f6 fffe 	bl	8003ba2 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800cba6:	2c00      	cmp	r4, #0
 800cba8:	d00b      	beq.n	800cbc2 <readfromspi+0x4e>
 800cbaa:	2600      	movs	r6, #0
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800cbac:	465a      	mov	r2, fp
 800cbae:	2301      	movs	r3, #1
 800cbb0:	1991      	adds	r1, r2, r6
 800cbb2:	0028      	movs	r0, r5
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	425b      	negs	r3, r3
    for(i=0; i<headerLength; i++)
 800cbb8:	3601      	adds	r6, #1
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800cbba:	f7f9 fd15 	bl	80065e8 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800cbbe:	42a6      	cmp	r6, r4
 800cbc0:	dbf4      	blt.n	800cbac <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800cbc2:	4653      	mov	r3, sl
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d013      	beq.n	800cbf0 <readfromspi+0x7c>
 800cbc8:	4640      	mov	r0, r8
 800cbca:	18c6      	adds	r6, r0, r3
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800cbcc:	2300      	movs	r3, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800cbce:	2202      	movs	r2, #2
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800cbd0:	469c      	mov	ip, r3
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800cbd2:	2401      	movs	r4, #1
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800cbd4:	6829      	ldr	r1, [r5, #0]
 800cbd6:	688b      	ldr	r3, [r1, #8]
 800cbd8:	421a      	tst	r2, r3
 800cbda:	d0fc      	beq.n	800cbd6 <readfromspi+0x62>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800cbdc:	4663      	mov	r3, ip
 800cbde:	60cb      	str	r3, [r1, #12]
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800cbe0:	688b      	ldr	r3, [r1, #8]
 800cbe2:	421c      	tst	r4, r3
 800cbe4:	d0fc      	beq.n	800cbe0 <readfromspi+0x6c>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 800cbe6:	68cb      	ldr	r3, [r1, #12]
 800cbe8:	7003      	strb	r3, [r0, #0]
    while(readlength-- > 0)
 800cbea:	3001      	adds	r0, #1
 800cbec:	42b0      	cmp	r0, r6
 800cbee:	d1f1      	bne.n	800cbd4 <readfromspi+0x60>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800cbf0:	2090      	movs	r0, #144	@ 0x90
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	2110      	movs	r1, #16
 800cbf6:	05c0      	lsls	r0, r0, #23
 800cbf8:	f7f6 ffd3 	bl	8003ba2 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800cbfc:	4648      	mov	r0, r9
 800cbfe:	f7ff ff67 	bl	800cad0 <decamutexoff>

    return 0;
} // end readfromspi()
 800cc02:	2000      	movs	r0, #0
 800cc04:	bc78      	pop	{r3, r4, r5, r6}
 800cc06:	46b3      	mov	fp, r6
 800cc08:	46aa      	mov	sl, r5
 800cc0a:	46a1      	mov	r9, r4
 800cc0c:	4698      	mov	r8, r3
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}
 800cc10:	200002c8 	.word	0x200002c8

0800cc14 <__NVIC_EnableIRQ>:
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	0002      	movs	r2, r0
 800cc1c:	1dfb      	adds	r3, r7, #7
 800cc1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800cc20:	1dfb      	adds	r3, r7, #7
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc26:	d809      	bhi.n	800cc3c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cc28:	1dfb      	adds	r3, r7, #7
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	001a      	movs	r2, r3
 800cc2e:	231f      	movs	r3, #31
 800cc30:	401a      	ands	r2, r3
 800cc32:	4b04      	ldr	r3, [pc, #16]	@ (800cc44 <__NVIC_EnableIRQ+0x30>)
 800cc34:	2101      	movs	r1, #1
 800cc36:	4091      	lsls	r1, r2
 800cc38:	000a      	movs	r2, r1
 800cc3a:	601a      	str	r2, [r3, #0]
}
 800cc3c:	46c0      	nop			@ (mov r8, r8)
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	b002      	add	sp, #8
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	e000e100 	.word	0xe000e100

0800cc48 <__NVIC_DisableIRQ>:
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	0002      	movs	r2, r0
 800cc50:	1dfb      	adds	r3, r7, #7
 800cc52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800cc54:	1dfb      	adds	r3, r7, #7
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc5a:	d810      	bhi.n	800cc7e <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cc5c:	1dfb      	adds	r3, r7, #7
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	001a      	movs	r2, r3
 800cc62:	231f      	movs	r3, #31
 800cc64:	4013      	ands	r3, r2
 800cc66:	4908      	ldr	r1, [pc, #32]	@ (800cc88 <__NVIC_DisableIRQ+0x40>)
 800cc68:	2201      	movs	r2, #1
 800cc6a:	409a      	lsls	r2, r3
 800cc6c:	0013      	movs	r3, r2
 800cc6e:	2280      	movs	r2, #128	@ 0x80
 800cc70:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cc72:	f3bf 8f4f 	dsb	sy
}
 800cc76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800cc78:	f3bf 8f6f 	isb	sy
}
 800cc7c:	46c0      	nop			@ (mov r8, r8)
}
 800cc7e:	46c0      	nop			@ (mov r8, r8)
 800cc80:	46bd      	mov	sp, r7
 800cc82:	b002      	add	sp, #8
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	46c0      	nop			@ (mov r8, r8)
 800cc88:	e000e100 	.word	0xe000e100

0800cc8c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800cc94:	2300      	movs	r3, #0
 800cc96:	60fb      	str	r3, [r7, #12]
 800cc98:	e014      	b.n	800ccc4 <usleep+0x38>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60bb      	str	r3, [r7, #8]
 800cc9e:	e004      	b.n	800ccaa <usleep+0x1e>
        {
            __NOP();
 800cca0:	46c0      	nop			@ (mov r8, r8)
            __NOP();
 800cca2:	46c0      	nop			@ (mov r8, r8)
        for(j=0;j<2;j++)
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	3301      	adds	r3, #1
 800cca8:	60bb      	str	r3, [r7, #8]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2201      	movs	r2, #1
 800ccae:	0fd8      	lsrs	r0, r3, #31
 800ccb0:	17d1      	asrs	r1, r2, #31
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	4148      	adcs	r0, r1
 800ccb6:	0003      	movs	r3, r0
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1f0      	bne.n	800cca0 <usleep+0x14>
    for(i=0;i<usec;i++)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	419b      	sbcs	r3, r3
 800cccc:	425b      	negs	r3, r3
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1e2      	bne.n	800cc9a <usleep+0xe>
        }
    }
    return 0;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	0018      	movs	r0, r3
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	b004      	add	sp, #16
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	0018      	movs	r0, r3
 800ccea:	f7f6 fa43 	bl	8003174 <HAL_Delay>
}
 800ccee:	46c0      	nop			@ (mov r8, r8)
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	b002      	add	sp, #8
 800ccf4:	bd80      	pop	{r7, pc}
	...

0800ccf8 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800cd00:	4a09      	ldr	r2, [pc, #36]	@ (800cd28 <EXTI_GetITEnStatus+0x30>)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	095b      	lsrs	r3, r3, #5
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	589a      	ldr	r2, [r3, r2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	211f      	movs	r1, #31
 800cd0e:	400b      	ands	r3, r1
 800cd10:	40da      	lsrs	r2, r3
 800cd12:	0013      	movs	r3, r2
 800cd14:	2201      	movs	r2, #1
 800cd16:	4013      	ands	r3, r2
 800cd18:	1e5a      	subs	r2, r3, #1
 800cd1a:	4193      	sbcs	r3, r2
 800cd1c:	b2db      	uxtb	r3, r3
}
 800cd1e:	0018      	movs	r0, r3
 800cd20:	46bd      	mov	sp, r7
 800cd22:	b002      	add	sp, #8
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	46c0      	nop			@ (mov r8, r8)
 800cd28:	e000e100 	.word	0xe000e100

0800cd2c <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 800cd32:	1d3b      	adds	r3, r7, #4
 800cd34:	2204      	movs	r2, #4
 800cd36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800cd38:	1d3b      	adds	r3, r7, #4
 800cd3a:	2211      	movs	r2, #17
 800cd3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd3e:	1d3b      	adds	r3, r7, #4
 800cd40:	2200      	movs	r2, #0
 800cd42:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800cd44:	1d3a      	adds	r2, r7, #4
 800cd46:	2390      	movs	r3, #144	@ 0x90
 800cd48:	05db      	lsls	r3, r3, #23
 800cd4a:	0011      	movs	r1, r2
 800cd4c:	0018      	movs	r0, r3
 800cd4e:	f7f6 fd93 	bl	8003878 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800cd52:	2390      	movs	r3, #144	@ 0x90
 800cd54:	05db      	lsls	r3, r3, #23
 800cd56:	2200      	movs	r2, #0
 800cd58:	2104      	movs	r1, #4
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	f7f6 ff21 	bl	8003ba2 <HAL_GPIO_WritePin>

    usleep(1);
 800cd60:	2001      	movs	r0, #1
 800cd62:	f7ff ff93 	bl	800cc8c <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800cd66:	2000      	movs	r0, #0
 800cd68:	f000 f807 	bl	800cd7a <setup_DW1000RSTnIRQ>



    Sleep(2);
 800cd6c:	2002      	movs	r0, #2
 800cd6e:	f7ff ffb6 	bl	800ccde <Sleep>
}
 800cd72:	46c0      	nop			@ (mov r8, r8)
 800cd74:	46bd      	mov	sp, r7
 800cd76:	b006      	add	sp, #24
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b088      	sub	sp, #32
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d01a      	beq.n	800cdbe <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800cd88:	210c      	movs	r1, #12
 800cd8a:	187b      	adds	r3, r7, r1
 800cd8c:	2204      	movs	r2, #4
 800cd8e:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd90:	187b      	adds	r3, r7, r1
 800cd92:	2288      	movs	r2, #136	@ 0x88
 800cd94:	0352      	lsls	r2, r2, #13
 800cd96:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd98:	187b      	adds	r3, r7, r1
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800cd9e:	187a      	adds	r2, r7, r1
 800cda0:	2390      	movs	r3, #144	@ 0x90
 800cda2:	05db      	lsls	r3, r3, #23
 800cda4:	0011      	movs	r1, r2
 800cda6:	0018      	movs	r0, r3
 800cda8:	f7f6 fd66 	bl	8003878 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 800cdac:	2006      	movs	r0, #6
 800cdae:	f7f6 fd36 	bl	800381e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	2105      	movs	r1, #5
 800cdb6:	2006      	movs	r0, #6
 800cdb8:	f7f6 fd1c 	bl	80037f4 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800cdbc:	e01d      	b.n	800cdfa <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 800cdbe:	2006      	movs	r0, #6
 800cdc0:	f7f6 fd3d 	bl	800383e <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800cdc4:	210c      	movs	r1, #12
 800cdc6:	187b      	adds	r3, r7, r1
 800cdc8:	2204      	movs	r2, #4
 800cdca:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800cdcc:	187b      	adds	r3, r7, r1
 800cdce:	2211      	movs	r2, #17
 800cdd0:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd2:	187b      	adds	r3, r7, r1
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cdd8:	187b      	adds	r3, r7, r1
 800cdda:	2203      	movs	r2, #3
 800cddc:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800cdde:	187a      	adds	r2, r7, r1
 800cde0:	2390      	movs	r3, #144	@ 0x90
 800cde2:	05db      	lsls	r3, r3, #23
 800cde4:	0011      	movs	r1, r2
 800cde6:	0018      	movs	r0, r3
 800cde8:	f7f6 fd46 	bl	8003878 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800cdec:	2390      	movs	r3, #144	@ 0x90
 800cdee:	05db      	lsls	r3, r3, #23
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	2104      	movs	r1, #4
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	f7f6 fed4 	bl	8003ba2 <HAL_GPIO_WritePin>
}
 800cdfa:	46c0      	nop			@ (mov r8, r8)
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	b008      	add	sp, #32
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ce08:	4b04      	ldr	r3, [pc, #16]	@ (800ce1c <port_set_dw1000_slowrate+0x18>)
 800ce0a:	2218      	movs	r2, #24
 800ce0c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800ce0e:	4b03      	ldr	r3, [pc, #12]	@ (800ce1c <port_set_dw1000_slowrate+0x18>)
 800ce10:	0018      	movs	r0, r3
 800ce12:	f7f9 fb31 	bl	8006478 <HAL_SPI_Init>
}
 800ce16:	46c0      	nop			@ (mov r8, r8)
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	200002c8 	.word	0x200002c8

0800ce20 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	0002      	movs	r2, r0
 800ce28:	1dbb      	adds	r3, r7, #6
 800ce2a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800ce2c:	1dbb      	adds	r3, r7, #6
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	2b20      	cmp	r3, #32
 800ce32:	d101      	bne.n	800ce38 <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800ce34:	f000 f804 	bl	800ce40 <process_deca_irq>
    }
}
 800ce38:	46c0      	nop			@ (mov r8, r8)
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	b002      	add	sp, #8
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800ce44:	e002      	b.n	800ce4c <process_deca_irq+0xc>
    {

        port_deca_isr();
 800ce46:	4b05      	ldr	r3, [pc, #20]	@ (800ce5c <process_deca_irq+0x1c>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800ce4c:	f000 f822 	bl	800ce94 <port_CheckEXT_IRQ>
 800ce50:	1e03      	subs	r3, r0, #0
 800ce52:	d1f8      	bne.n	800ce46 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800ce54:	46c0      	nop			@ (mov r8, r8)
 800ce56:	46c0      	nop			@ (mov r8, r8)
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	2000161c 	.word	0x2000161c

0800ce60 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800ce64:	2007      	movs	r0, #7
 800ce66:	f7ff feef 	bl	800cc48 <__NVIC_DisableIRQ>
}
 800ce6a:	46c0      	nop			@ (mov r8, r8)
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800ce74:	2007      	movs	r0, #7
 800ce76:	f7ff fecd 	bl	800cc14 <__NVIC_EnableIRQ>
}
 800ce7a:	46c0      	nop			@ (mov r8, r8)
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800ce84:	2007      	movs	r0, #7
 800ce86:	f7ff ff37 	bl	800ccf8 <EXTI_GetITEnStatus>
 800ce8a:	0003      	movs	r3, r0
}
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
	...

0800ce94 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800ce98:	4b04      	ldr	r3, [pc, #16]	@ (800ceac <port_CheckEXT_IRQ+0x18>)
 800ce9a:	2120      	movs	r1, #32
 800ce9c:	0018      	movs	r0, r3
 800ce9e:	f7f6 fe63 	bl	8003b68 <HAL_GPIO_ReadPin>
 800cea2:	0003      	movs	r3, r0
}
 800cea4:	0018      	movs	r0, r3
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	46c0      	nop			@ (mov r8, r8)
 800ceac:	48000400 	.word	0x48000400

0800ceb0 <siprintf>:
 800ceb0:	b40e      	push	{r1, r2, r3}
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	2400      	movs	r4, #0
 800ceb6:	490c      	ldr	r1, [pc, #48]	@ (800cee8 <siprintf+0x38>)
 800ceb8:	b09d      	sub	sp, #116	@ 0x74
 800ceba:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cebc:	9002      	str	r0, [sp, #8]
 800cebe:	9006      	str	r0, [sp, #24]
 800cec0:	9107      	str	r1, [sp, #28]
 800cec2:	9104      	str	r1, [sp, #16]
 800cec4:	4809      	ldr	r0, [pc, #36]	@ (800ceec <siprintf+0x3c>)
 800cec6:	490a      	ldr	r1, [pc, #40]	@ (800cef0 <siprintf+0x40>)
 800cec8:	cb04      	ldmia	r3!, {r2}
 800ceca:	9105      	str	r1, [sp, #20]
 800cecc:	6800      	ldr	r0, [r0, #0]
 800cece:	a902      	add	r1, sp, #8
 800ced0:	9301      	str	r3, [sp, #4]
 800ced2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ced4:	f000 f9ac 	bl	800d230 <_svfiprintf_r>
 800ced8:	9b02      	ldr	r3, [sp, #8]
 800ceda:	701c      	strb	r4, [r3, #0]
 800cedc:	b01d      	add	sp, #116	@ 0x74
 800cede:	bc10      	pop	{r4}
 800cee0:	bc08      	pop	{r3}
 800cee2:	b003      	add	sp, #12
 800cee4:	4718      	bx	r3
 800cee6:	46c0      	nop			@ (mov r8, r8)
 800cee8:	7fffffff 	.word	0x7fffffff
 800ceec:	200001c0 	.word	0x200001c0
 800cef0:	ffff0208 	.word	0xffff0208

0800cef4 <memcmp>:
 800cef4:	b530      	push	{r4, r5, lr}
 800cef6:	2400      	movs	r4, #0
 800cef8:	3901      	subs	r1, #1
 800cefa:	42a2      	cmp	r2, r4
 800cefc:	d101      	bne.n	800cf02 <memcmp+0xe>
 800cefe:	2000      	movs	r0, #0
 800cf00:	e005      	b.n	800cf0e <memcmp+0x1a>
 800cf02:	5d03      	ldrb	r3, [r0, r4]
 800cf04:	3401      	adds	r4, #1
 800cf06:	5d0d      	ldrb	r5, [r1, r4]
 800cf08:	42ab      	cmp	r3, r5
 800cf0a:	d0f6      	beq.n	800cefa <memcmp+0x6>
 800cf0c:	1b58      	subs	r0, r3, r5
 800cf0e:	bd30      	pop	{r4, r5, pc}

0800cf10 <memset>:
 800cf10:	0003      	movs	r3, r0
 800cf12:	1882      	adds	r2, r0, r2
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d100      	bne.n	800cf1a <memset+0xa>
 800cf18:	4770      	bx	lr
 800cf1a:	7019      	strb	r1, [r3, #0]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	e7f9      	b.n	800cf14 <memset+0x4>

0800cf20 <__errno>:
 800cf20:	4b01      	ldr	r3, [pc, #4]	@ (800cf28 <__errno+0x8>)
 800cf22:	6818      	ldr	r0, [r3, #0]
 800cf24:	4770      	bx	lr
 800cf26:	46c0      	nop			@ (mov r8, r8)
 800cf28:	200001c0 	.word	0x200001c0

0800cf2c <__libc_init_array>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	2600      	movs	r6, #0
 800cf30:	4c0c      	ldr	r4, [pc, #48]	@ (800cf64 <__libc_init_array+0x38>)
 800cf32:	4d0d      	ldr	r5, [pc, #52]	@ (800cf68 <__libc_init_array+0x3c>)
 800cf34:	1b64      	subs	r4, r4, r5
 800cf36:	10a4      	asrs	r4, r4, #2
 800cf38:	42a6      	cmp	r6, r4
 800cf3a:	d109      	bne.n	800cf50 <__libc_init_array+0x24>
 800cf3c:	2600      	movs	r6, #0
 800cf3e:	f000 fc61 	bl	800d804 <_init>
 800cf42:	4c0a      	ldr	r4, [pc, #40]	@ (800cf6c <__libc_init_array+0x40>)
 800cf44:	4d0a      	ldr	r5, [pc, #40]	@ (800cf70 <__libc_init_array+0x44>)
 800cf46:	1b64      	subs	r4, r4, r5
 800cf48:	10a4      	asrs	r4, r4, #2
 800cf4a:	42a6      	cmp	r6, r4
 800cf4c:	d105      	bne.n	800cf5a <__libc_init_array+0x2e>
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}
 800cf50:	00b3      	lsls	r3, r6, #2
 800cf52:	58eb      	ldr	r3, [r5, r3]
 800cf54:	4798      	blx	r3
 800cf56:	3601      	adds	r6, #1
 800cf58:	e7ee      	b.n	800cf38 <__libc_init_array+0xc>
 800cf5a:	00b3      	lsls	r3, r6, #2
 800cf5c:	58eb      	ldr	r3, [r5, r3]
 800cf5e:	4798      	blx	r3
 800cf60:	3601      	adds	r6, #1
 800cf62:	e7f2      	b.n	800cf4a <__libc_init_array+0x1e>
 800cf64:	0800db00 	.word	0x0800db00
 800cf68:	0800db00 	.word	0x0800db00
 800cf6c:	0800db04 	.word	0x0800db04
 800cf70:	0800db00 	.word	0x0800db00

0800cf74 <__retarget_lock_acquire_recursive>:
 800cf74:	4770      	bx	lr

0800cf76 <__retarget_lock_release_recursive>:
 800cf76:	4770      	bx	lr

0800cf78 <_free_r>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	0005      	movs	r5, r0
 800cf7c:	1e0c      	subs	r4, r1, #0
 800cf7e:	d010      	beq.n	800cfa2 <_free_r+0x2a>
 800cf80:	3c04      	subs	r4, #4
 800cf82:	6823      	ldr	r3, [r4, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	da00      	bge.n	800cf8a <_free_r+0x12>
 800cf88:	18e4      	adds	r4, r4, r3
 800cf8a:	0028      	movs	r0, r5
 800cf8c:	f000 f8e0 	bl	800d150 <__malloc_lock>
 800cf90:	4a1d      	ldr	r2, [pc, #116]	@ (800d008 <_free_r+0x90>)
 800cf92:	6813      	ldr	r3, [r2, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d105      	bne.n	800cfa4 <_free_r+0x2c>
 800cf98:	6063      	str	r3, [r4, #4]
 800cf9a:	6014      	str	r4, [r2, #0]
 800cf9c:	0028      	movs	r0, r5
 800cf9e:	f000 f8df 	bl	800d160 <__malloc_unlock>
 800cfa2:	bd70      	pop	{r4, r5, r6, pc}
 800cfa4:	42a3      	cmp	r3, r4
 800cfa6:	d908      	bls.n	800cfba <_free_r+0x42>
 800cfa8:	6820      	ldr	r0, [r4, #0]
 800cfaa:	1821      	adds	r1, r4, r0
 800cfac:	428b      	cmp	r3, r1
 800cfae:	d1f3      	bne.n	800cf98 <_free_r+0x20>
 800cfb0:	6819      	ldr	r1, [r3, #0]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	1809      	adds	r1, r1, r0
 800cfb6:	6021      	str	r1, [r4, #0]
 800cfb8:	e7ee      	b.n	800cf98 <_free_r+0x20>
 800cfba:	001a      	movs	r2, r3
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <_free_r+0x4e>
 800cfc2:	42a3      	cmp	r3, r4
 800cfc4:	d9f9      	bls.n	800cfba <_free_r+0x42>
 800cfc6:	6811      	ldr	r1, [r2, #0]
 800cfc8:	1850      	adds	r0, r2, r1
 800cfca:	42a0      	cmp	r0, r4
 800cfcc:	d10b      	bne.n	800cfe6 <_free_r+0x6e>
 800cfce:	6820      	ldr	r0, [r4, #0]
 800cfd0:	1809      	adds	r1, r1, r0
 800cfd2:	1850      	adds	r0, r2, r1
 800cfd4:	6011      	str	r1, [r2, #0]
 800cfd6:	4283      	cmp	r3, r0
 800cfd8:	d1e0      	bne.n	800cf9c <_free_r+0x24>
 800cfda:	6818      	ldr	r0, [r3, #0]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	1841      	adds	r1, r0, r1
 800cfe0:	6011      	str	r1, [r2, #0]
 800cfe2:	6053      	str	r3, [r2, #4]
 800cfe4:	e7da      	b.n	800cf9c <_free_r+0x24>
 800cfe6:	42a0      	cmp	r0, r4
 800cfe8:	d902      	bls.n	800cff0 <_free_r+0x78>
 800cfea:	230c      	movs	r3, #12
 800cfec:	602b      	str	r3, [r5, #0]
 800cfee:	e7d5      	b.n	800cf9c <_free_r+0x24>
 800cff0:	6820      	ldr	r0, [r4, #0]
 800cff2:	1821      	adds	r1, r4, r0
 800cff4:	428b      	cmp	r3, r1
 800cff6:	d103      	bne.n	800d000 <_free_r+0x88>
 800cff8:	6819      	ldr	r1, [r3, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	1809      	adds	r1, r1, r0
 800cffe:	6021      	str	r1, [r4, #0]
 800d000:	6063      	str	r3, [r4, #4]
 800d002:	6054      	str	r4, [r2, #4]
 800d004:	e7ca      	b.n	800cf9c <_free_r+0x24>
 800d006:	46c0      	nop			@ (mov r8, r8)
 800d008:	20001764 	.word	0x20001764

0800d00c <sbrk_aligned>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	4e0f      	ldr	r6, [pc, #60]	@ (800d04c <sbrk_aligned+0x40>)
 800d010:	000d      	movs	r5, r1
 800d012:	6831      	ldr	r1, [r6, #0]
 800d014:	0004      	movs	r4, r0
 800d016:	2900      	cmp	r1, #0
 800d018:	d102      	bne.n	800d020 <sbrk_aligned+0x14>
 800d01a:	f000 fb95 	bl	800d748 <_sbrk_r>
 800d01e:	6030      	str	r0, [r6, #0]
 800d020:	0029      	movs	r1, r5
 800d022:	0020      	movs	r0, r4
 800d024:	f000 fb90 	bl	800d748 <_sbrk_r>
 800d028:	1c43      	adds	r3, r0, #1
 800d02a:	d103      	bne.n	800d034 <sbrk_aligned+0x28>
 800d02c:	2501      	movs	r5, #1
 800d02e:	426d      	negs	r5, r5
 800d030:	0028      	movs	r0, r5
 800d032:	bd70      	pop	{r4, r5, r6, pc}
 800d034:	2303      	movs	r3, #3
 800d036:	1cc5      	adds	r5, r0, #3
 800d038:	439d      	bics	r5, r3
 800d03a:	42a8      	cmp	r0, r5
 800d03c:	d0f8      	beq.n	800d030 <sbrk_aligned+0x24>
 800d03e:	1a29      	subs	r1, r5, r0
 800d040:	0020      	movs	r0, r4
 800d042:	f000 fb81 	bl	800d748 <_sbrk_r>
 800d046:	3001      	adds	r0, #1
 800d048:	d1f2      	bne.n	800d030 <sbrk_aligned+0x24>
 800d04a:	e7ef      	b.n	800d02c <sbrk_aligned+0x20>
 800d04c:	20001760 	.word	0x20001760

0800d050 <_malloc_r>:
 800d050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d052:	2203      	movs	r2, #3
 800d054:	1ccb      	adds	r3, r1, #3
 800d056:	4393      	bics	r3, r2
 800d058:	3308      	adds	r3, #8
 800d05a:	0005      	movs	r5, r0
 800d05c:	001f      	movs	r7, r3
 800d05e:	2b0c      	cmp	r3, #12
 800d060:	d234      	bcs.n	800d0cc <_malloc_r+0x7c>
 800d062:	270c      	movs	r7, #12
 800d064:	42b9      	cmp	r1, r7
 800d066:	d833      	bhi.n	800d0d0 <_malloc_r+0x80>
 800d068:	0028      	movs	r0, r5
 800d06a:	f000 f871 	bl	800d150 <__malloc_lock>
 800d06e:	4e37      	ldr	r6, [pc, #220]	@ (800d14c <_malloc_r+0xfc>)
 800d070:	6833      	ldr	r3, [r6, #0]
 800d072:	001c      	movs	r4, r3
 800d074:	2c00      	cmp	r4, #0
 800d076:	d12f      	bne.n	800d0d8 <_malloc_r+0x88>
 800d078:	0039      	movs	r1, r7
 800d07a:	0028      	movs	r0, r5
 800d07c:	f7ff ffc6 	bl	800d00c <sbrk_aligned>
 800d080:	0004      	movs	r4, r0
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	d15f      	bne.n	800d146 <_malloc_r+0xf6>
 800d086:	6834      	ldr	r4, [r6, #0]
 800d088:	9400      	str	r4, [sp, #0]
 800d08a:	9b00      	ldr	r3, [sp, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d14a      	bne.n	800d126 <_malloc_r+0xd6>
 800d090:	2c00      	cmp	r4, #0
 800d092:	d052      	beq.n	800d13a <_malloc_r+0xea>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	0028      	movs	r0, r5
 800d098:	18e3      	adds	r3, r4, r3
 800d09a:	9900      	ldr	r1, [sp, #0]
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	f000 fb53 	bl	800d748 <_sbrk_r>
 800d0a2:	9b01      	ldr	r3, [sp, #4]
 800d0a4:	4283      	cmp	r3, r0
 800d0a6:	d148      	bne.n	800d13a <_malloc_r+0xea>
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	0028      	movs	r0, r5
 800d0ac:	1aff      	subs	r7, r7, r3
 800d0ae:	0039      	movs	r1, r7
 800d0b0:	f7ff ffac 	bl	800d00c <sbrk_aligned>
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	d040      	beq.n	800d13a <_malloc_r+0xea>
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	19db      	adds	r3, r3, r7
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	6833      	ldr	r3, [r6, #0]
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	d133      	bne.n	800d12e <_malloc_r+0xde>
 800d0c6:	9b00      	ldr	r3, [sp, #0]
 800d0c8:	6033      	str	r3, [r6, #0]
 800d0ca:	e019      	b.n	800d100 <_malloc_r+0xb0>
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	dac9      	bge.n	800d064 <_malloc_r+0x14>
 800d0d0:	230c      	movs	r3, #12
 800d0d2:	602b      	str	r3, [r5, #0]
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0d8:	6821      	ldr	r1, [r4, #0]
 800d0da:	1bc9      	subs	r1, r1, r7
 800d0dc:	d420      	bmi.n	800d120 <_malloc_r+0xd0>
 800d0de:	290b      	cmp	r1, #11
 800d0e0:	d90a      	bls.n	800d0f8 <_malloc_r+0xa8>
 800d0e2:	19e2      	adds	r2, r4, r7
 800d0e4:	6027      	str	r7, [r4, #0]
 800d0e6:	42a3      	cmp	r3, r4
 800d0e8:	d104      	bne.n	800d0f4 <_malloc_r+0xa4>
 800d0ea:	6032      	str	r2, [r6, #0]
 800d0ec:	6863      	ldr	r3, [r4, #4]
 800d0ee:	6011      	str	r1, [r2, #0]
 800d0f0:	6053      	str	r3, [r2, #4]
 800d0f2:	e005      	b.n	800d100 <_malloc_r+0xb0>
 800d0f4:	605a      	str	r2, [r3, #4]
 800d0f6:	e7f9      	b.n	800d0ec <_malloc_r+0x9c>
 800d0f8:	6862      	ldr	r2, [r4, #4]
 800d0fa:	42a3      	cmp	r3, r4
 800d0fc:	d10e      	bne.n	800d11c <_malloc_r+0xcc>
 800d0fe:	6032      	str	r2, [r6, #0]
 800d100:	0028      	movs	r0, r5
 800d102:	f000 f82d 	bl	800d160 <__malloc_unlock>
 800d106:	0020      	movs	r0, r4
 800d108:	2207      	movs	r2, #7
 800d10a:	300b      	adds	r0, #11
 800d10c:	1d23      	adds	r3, r4, #4
 800d10e:	4390      	bics	r0, r2
 800d110:	1ac2      	subs	r2, r0, r3
 800d112:	4298      	cmp	r0, r3
 800d114:	d0df      	beq.n	800d0d6 <_malloc_r+0x86>
 800d116:	1a1b      	subs	r3, r3, r0
 800d118:	50a3      	str	r3, [r4, r2]
 800d11a:	e7dc      	b.n	800d0d6 <_malloc_r+0x86>
 800d11c:	605a      	str	r2, [r3, #4]
 800d11e:	e7ef      	b.n	800d100 <_malloc_r+0xb0>
 800d120:	0023      	movs	r3, r4
 800d122:	6864      	ldr	r4, [r4, #4]
 800d124:	e7a6      	b.n	800d074 <_malloc_r+0x24>
 800d126:	9c00      	ldr	r4, [sp, #0]
 800d128:	6863      	ldr	r3, [r4, #4]
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	e7ad      	b.n	800d08a <_malloc_r+0x3a>
 800d12e:	001a      	movs	r2, r3
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	42a3      	cmp	r3, r4
 800d134:	d1fb      	bne.n	800d12e <_malloc_r+0xde>
 800d136:	2300      	movs	r3, #0
 800d138:	e7da      	b.n	800d0f0 <_malloc_r+0xa0>
 800d13a:	230c      	movs	r3, #12
 800d13c:	0028      	movs	r0, r5
 800d13e:	602b      	str	r3, [r5, #0]
 800d140:	f000 f80e 	bl	800d160 <__malloc_unlock>
 800d144:	e7c6      	b.n	800d0d4 <_malloc_r+0x84>
 800d146:	6007      	str	r7, [r0, #0]
 800d148:	e7da      	b.n	800d100 <_malloc_r+0xb0>
 800d14a:	46c0      	nop			@ (mov r8, r8)
 800d14c:	20001764 	.word	0x20001764

0800d150 <__malloc_lock>:
 800d150:	b510      	push	{r4, lr}
 800d152:	4802      	ldr	r0, [pc, #8]	@ (800d15c <__malloc_lock+0xc>)
 800d154:	f7ff ff0e 	bl	800cf74 <__retarget_lock_acquire_recursive>
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	46c0      	nop			@ (mov r8, r8)
 800d15c:	2000175c 	.word	0x2000175c

0800d160 <__malloc_unlock>:
 800d160:	b510      	push	{r4, lr}
 800d162:	4802      	ldr	r0, [pc, #8]	@ (800d16c <__malloc_unlock+0xc>)
 800d164:	f7ff ff07 	bl	800cf76 <__retarget_lock_release_recursive>
 800d168:	bd10      	pop	{r4, pc}
 800d16a:	46c0      	nop			@ (mov r8, r8)
 800d16c:	2000175c 	.word	0x2000175c

0800d170 <__ssputs_r>:
 800d170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d172:	688e      	ldr	r6, [r1, #8]
 800d174:	b085      	sub	sp, #20
 800d176:	001f      	movs	r7, r3
 800d178:	000c      	movs	r4, r1
 800d17a:	680b      	ldr	r3, [r1, #0]
 800d17c:	9002      	str	r0, [sp, #8]
 800d17e:	9203      	str	r2, [sp, #12]
 800d180:	42be      	cmp	r6, r7
 800d182:	d830      	bhi.n	800d1e6 <__ssputs_r+0x76>
 800d184:	210c      	movs	r1, #12
 800d186:	5e62      	ldrsh	r2, [r4, r1]
 800d188:	2190      	movs	r1, #144	@ 0x90
 800d18a:	00c9      	lsls	r1, r1, #3
 800d18c:	420a      	tst	r2, r1
 800d18e:	d028      	beq.n	800d1e2 <__ssputs_r+0x72>
 800d190:	2003      	movs	r0, #3
 800d192:	6921      	ldr	r1, [r4, #16]
 800d194:	1a5b      	subs	r3, r3, r1
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	6963      	ldr	r3, [r4, #20]
 800d19a:	4343      	muls	r3, r0
 800d19c:	9801      	ldr	r0, [sp, #4]
 800d19e:	0fdd      	lsrs	r5, r3, #31
 800d1a0:	18ed      	adds	r5, r5, r3
 800d1a2:	1c7b      	adds	r3, r7, #1
 800d1a4:	181b      	adds	r3, r3, r0
 800d1a6:	106d      	asrs	r5, r5, #1
 800d1a8:	42ab      	cmp	r3, r5
 800d1aa:	d900      	bls.n	800d1ae <__ssputs_r+0x3e>
 800d1ac:	001d      	movs	r5, r3
 800d1ae:	0552      	lsls	r2, r2, #21
 800d1b0:	d528      	bpl.n	800d204 <__ssputs_r+0x94>
 800d1b2:	0029      	movs	r1, r5
 800d1b4:	9802      	ldr	r0, [sp, #8]
 800d1b6:	f7ff ff4b 	bl	800d050 <_malloc_r>
 800d1ba:	1e06      	subs	r6, r0, #0
 800d1bc:	d02c      	beq.n	800d218 <__ssputs_r+0xa8>
 800d1be:	9a01      	ldr	r2, [sp, #4]
 800d1c0:	6921      	ldr	r1, [r4, #16]
 800d1c2:	f000 fade 	bl	800d782 <memcpy>
 800d1c6:	89a2      	ldrh	r2, [r4, #12]
 800d1c8:	4b18      	ldr	r3, [pc, #96]	@ (800d22c <__ssputs_r+0xbc>)
 800d1ca:	401a      	ands	r2, r3
 800d1cc:	2380      	movs	r3, #128	@ 0x80
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	81a3      	strh	r3, [r4, #12]
 800d1d2:	9b01      	ldr	r3, [sp, #4]
 800d1d4:	6126      	str	r6, [r4, #16]
 800d1d6:	18f6      	adds	r6, r6, r3
 800d1d8:	6026      	str	r6, [r4, #0]
 800d1da:	003e      	movs	r6, r7
 800d1dc:	6165      	str	r5, [r4, #20]
 800d1de:	1aed      	subs	r5, r5, r3
 800d1e0:	60a5      	str	r5, [r4, #8]
 800d1e2:	42be      	cmp	r6, r7
 800d1e4:	d900      	bls.n	800d1e8 <__ssputs_r+0x78>
 800d1e6:	003e      	movs	r6, r7
 800d1e8:	0032      	movs	r2, r6
 800d1ea:	9903      	ldr	r1, [sp, #12]
 800d1ec:	6820      	ldr	r0, [r4, #0]
 800d1ee:	f000 fa99 	bl	800d724 <memmove>
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	68a3      	ldr	r3, [r4, #8]
 800d1f6:	1b9b      	subs	r3, r3, r6
 800d1f8:	60a3      	str	r3, [r4, #8]
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	199b      	adds	r3, r3, r6
 800d1fe:	6023      	str	r3, [r4, #0]
 800d200:	b005      	add	sp, #20
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	002a      	movs	r2, r5
 800d206:	9802      	ldr	r0, [sp, #8]
 800d208:	f000 fac4 	bl	800d794 <_realloc_r>
 800d20c:	1e06      	subs	r6, r0, #0
 800d20e:	d1e0      	bne.n	800d1d2 <__ssputs_r+0x62>
 800d210:	6921      	ldr	r1, [r4, #16]
 800d212:	9802      	ldr	r0, [sp, #8]
 800d214:	f7ff feb0 	bl	800cf78 <_free_r>
 800d218:	230c      	movs	r3, #12
 800d21a:	2001      	movs	r0, #1
 800d21c:	9a02      	ldr	r2, [sp, #8]
 800d21e:	4240      	negs	r0, r0
 800d220:	6013      	str	r3, [r2, #0]
 800d222:	89a2      	ldrh	r2, [r4, #12]
 800d224:	3334      	adds	r3, #52	@ 0x34
 800d226:	4313      	orrs	r3, r2
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	e7e9      	b.n	800d200 <__ssputs_r+0x90>
 800d22c:	fffffb7f 	.word	0xfffffb7f

0800d230 <_svfiprintf_r>:
 800d230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d232:	b0a1      	sub	sp, #132	@ 0x84
 800d234:	9003      	str	r0, [sp, #12]
 800d236:	001d      	movs	r5, r3
 800d238:	898b      	ldrh	r3, [r1, #12]
 800d23a:	000f      	movs	r7, r1
 800d23c:	0016      	movs	r6, r2
 800d23e:	061b      	lsls	r3, r3, #24
 800d240:	d511      	bpl.n	800d266 <_svfiprintf_r+0x36>
 800d242:	690b      	ldr	r3, [r1, #16]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10e      	bne.n	800d266 <_svfiprintf_r+0x36>
 800d248:	2140      	movs	r1, #64	@ 0x40
 800d24a:	f7ff ff01 	bl	800d050 <_malloc_r>
 800d24e:	6038      	str	r0, [r7, #0]
 800d250:	6138      	str	r0, [r7, #16]
 800d252:	2800      	cmp	r0, #0
 800d254:	d105      	bne.n	800d262 <_svfiprintf_r+0x32>
 800d256:	230c      	movs	r3, #12
 800d258:	9a03      	ldr	r2, [sp, #12]
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	2001      	movs	r0, #1
 800d25e:	4240      	negs	r0, r0
 800d260:	e0cf      	b.n	800d402 <_svfiprintf_r+0x1d2>
 800d262:	2340      	movs	r3, #64	@ 0x40
 800d264:	617b      	str	r3, [r7, #20]
 800d266:	2300      	movs	r3, #0
 800d268:	ac08      	add	r4, sp, #32
 800d26a:	6163      	str	r3, [r4, #20]
 800d26c:	3320      	adds	r3, #32
 800d26e:	7663      	strb	r3, [r4, #25]
 800d270:	3310      	adds	r3, #16
 800d272:	76a3      	strb	r3, [r4, #26]
 800d274:	9507      	str	r5, [sp, #28]
 800d276:	0035      	movs	r5, r6
 800d278:	782b      	ldrb	r3, [r5, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d001      	beq.n	800d282 <_svfiprintf_r+0x52>
 800d27e:	2b25      	cmp	r3, #37	@ 0x25
 800d280:	d148      	bne.n	800d314 <_svfiprintf_r+0xe4>
 800d282:	1bab      	subs	r3, r5, r6
 800d284:	9305      	str	r3, [sp, #20]
 800d286:	42b5      	cmp	r5, r6
 800d288:	d00b      	beq.n	800d2a2 <_svfiprintf_r+0x72>
 800d28a:	0032      	movs	r2, r6
 800d28c:	0039      	movs	r1, r7
 800d28e:	9803      	ldr	r0, [sp, #12]
 800d290:	f7ff ff6e 	bl	800d170 <__ssputs_r>
 800d294:	3001      	adds	r0, #1
 800d296:	d100      	bne.n	800d29a <_svfiprintf_r+0x6a>
 800d298:	e0ae      	b.n	800d3f8 <_svfiprintf_r+0x1c8>
 800d29a:	6963      	ldr	r3, [r4, #20]
 800d29c:	9a05      	ldr	r2, [sp, #20]
 800d29e:	189b      	adds	r3, r3, r2
 800d2a0:	6163      	str	r3, [r4, #20]
 800d2a2:	782b      	ldrb	r3, [r5, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d100      	bne.n	800d2aa <_svfiprintf_r+0x7a>
 800d2a8:	e0a6      	b.n	800d3f8 <_svfiprintf_r+0x1c8>
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	4252      	negs	r2, r2
 800d2b0:	6062      	str	r2, [r4, #4]
 800d2b2:	a904      	add	r1, sp, #16
 800d2b4:	3254      	adds	r2, #84	@ 0x54
 800d2b6:	1852      	adds	r2, r2, r1
 800d2b8:	1c6e      	adds	r6, r5, #1
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	60e3      	str	r3, [r4, #12]
 800d2be:	60a3      	str	r3, [r4, #8]
 800d2c0:	7013      	strb	r3, [r2, #0]
 800d2c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d2c4:	4b54      	ldr	r3, [pc, #336]	@ (800d418 <_svfiprintf_r+0x1e8>)
 800d2c6:	2205      	movs	r2, #5
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	7831      	ldrb	r1, [r6, #0]
 800d2cc:	9305      	str	r3, [sp, #20]
 800d2ce:	f000 fa4d 	bl	800d76c <memchr>
 800d2d2:	1c75      	adds	r5, r6, #1
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	d11f      	bne.n	800d318 <_svfiprintf_r+0xe8>
 800d2d8:	6822      	ldr	r2, [r4, #0]
 800d2da:	06d3      	lsls	r3, r2, #27
 800d2dc:	d504      	bpl.n	800d2e8 <_svfiprintf_r+0xb8>
 800d2de:	2353      	movs	r3, #83	@ 0x53
 800d2e0:	a904      	add	r1, sp, #16
 800d2e2:	185b      	adds	r3, r3, r1
 800d2e4:	2120      	movs	r1, #32
 800d2e6:	7019      	strb	r1, [r3, #0]
 800d2e8:	0713      	lsls	r3, r2, #28
 800d2ea:	d504      	bpl.n	800d2f6 <_svfiprintf_r+0xc6>
 800d2ec:	2353      	movs	r3, #83	@ 0x53
 800d2ee:	a904      	add	r1, sp, #16
 800d2f0:	185b      	adds	r3, r3, r1
 800d2f2:	212b      	movs	r1, #43	@ 0x2b
 800d2f4:	7019      	strb	r1, [r3, #0]
 800d2f6:	7833      	ldrb	r3, [r6, #0]
 800d2f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2fa:	d016      	beq.n	800d32a <_svfiprintf_r+0xfa>
 800d2fc:	0035      	movs	r5, r6
 800d2fe:	2100      	movs	r1, #0
 800d300:	200a      	movs	r0, #10
 800d302:	68e3      	ldr	r3, [r4, #12]
 800d304:	782a      	ldrb	r2, [r5, #0]
 800d306:	1c6e      	adds	r6, r5, #1
 800d308:	3a30      	subs	r2, #48	@ 0x30
 800d30a:	2a09      	cmp	r2, #9
 800d30c:	d950      	bls.n	800d3b0 <_svfiprintf_r+0x180>
 800d30e:	2900      	cmp	r1, #0
 800d310:	d111      	bne.n	800d336 <_svfiprintf_r+0x106>
 800d312:	e017      	b.n	800d344 <_svfiprintf_r+0x114>
 800d314:	3501      	adds	r5, #1
 800d316:	e7af      	b.n	800d278 <_svfiprintf_r+0x48>
 800d318:	9b05      	ldr	r3, [sp, #20]
 800d31a:	6822      	ldr	r2, [r4, #0]
 800d31c:	1ac0      	subs	r0, r0, r3
 800d31e:	2301      	movs	r3, #1
 800d320:	4083      	lsls	r3, r0
 800d322:	4313      	orrs	r3, r2
 800d324:	002e      	movs	r6, r5
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	e7cc      	b.n	800d2c4 <_svfiprintf_r+0x94>
 800d32a:	9b07      	ldr	r3, [sp, #28]
 800d32c:	1d19      	adds	r1, r3, #4
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	9107      	str	r1, [sp, #28]
 800d332:	2b00      	cmp	r3, #0
 800d334:	db01      	blt.n	800d33a <_svfiprintf_r+0x10a>
 800d336:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d338:	e004      	b.n	800d344 <_svfiprintf_r+0x114>
 800d33a:	425b      	negs	r3, r3
 800d33c:	60e3      	str	r3, [r4, #12]
 800d33e:	2302      	movs	r3, #2
 800d340:	4313      	orrs	r3, r2
 800d342:	6023      	str	r3, [r4, #0]
 800d344:	782b      	ldrb	r3, [r5, #0]
 800d346:	2b2e      	cmp	r3, #46	@ 0x2e
 800d348:	d10c      	bne.n	800d364 <_svfiprintf_r+0x134>
 800d34a:	786b      	ldrb	r3, [r5, #1]
 800d34c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d34e:	d134      	bne.n	800d3ba <_svfiprintf_r+0x18a>
 800d350:	9b07      	ldr	r3, [sp, #28]
 800d352:	3502      	adds	r5, #2
 800d354:	1d1a      	adds	r2, r3, #4
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	9207      	str	r2, [sp, #28]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	da01      	bge.n	800d362 <_svfiprintf_r+0x132>
 800d35e:	2301      	movs	r3, #1
 800d360:	425b      	negs	r3, r3
 800d362:	9309      	str	r3, [sp, #36]	@ 0x24
 800d364:	4e2d      	ldr	r6, [pc, #180]	@ (800d41c <_svfiprintf_r+0x1ec>)
 800d366:	2203      	movs	r2, #3
 800d368:	0030      	movs	r0, r6
 800d36a:	7829      	ldrb	r1, [r5, #0]
 800d36c:	f000 f9fe 	bl	800d76c <memchr>
 800d370:	2800      	cmp	r0, #0
 800d372:	d006      	beq.n	800d382 <_svfiprintf_r+0x152>
 800d374:	2340      	movs	r3, #64	@ 0x40
 800d376:	1b80      	subs	r0, r0, r6
 800d378:	4083      	lsls	r3, r0
 800d37a:	6822      	ldr	r2, [r4, #0]
 800d37c:	3501      	adds	r5, #1
 800d37e:	4313      	orrs	r3, r2
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	7829      	ldrb	r1, [r5, #0]
 800d384:	2206      	movs	r2, #6
 800d386:	4826      	ldr	r0, [pc, #152]	@ (800d420 <_svfiprintf_r+0x1f0>)
 800d388:	1c6e      	adds	r6, r5, #1
 800d38a:	7621      	strb	r1, [r4, #24]
 800d38c:	f000 f9ee 	bl	800d76c <memchr>
 800d390:	2800      	cmp	r0, #0
 800d392:	d038      	beq.n	800d406 <_svfiprintf_r+0x1d6>
 800d394:	4b23      	ldr	r3, [pc, #140]	@ (800d424 <_svfiprintf_r+0x1f4>)
 800d396:	2b00      	cmp	r3, #0
 800d398:	d122      	bne.n	800d3e0 <_svfiprintf_r+0x1b0>
 800d39a:	2207      	movs	r2, #7
 800d39c:	9b07      	ldr	r3, [sp, #28]
 800d39e:	3307      	adds	r3, #7
 800d3a0:	4393      	bics	r3, r2
 800d3a2:	3308      	adds	r3, #8
 800d3a4:	9307      	str	r3, [sp, #28]
 800d3a6:	6963      	ldr	r3, [r4, #20]
 800d3a8:	9a04      	ldr	r2, [sp, #16]
 800d3aa:	189b      	adds	r3, r3, r2
 800d3ac:	6163      	str	r3, [r4, #20]
 800d3ae:	e762      	b.n	800d276 <_svfiprintf_r+0x46>
 800d3b0:	4343      	muls	r3, r0
 800d3b2:	0035      	movs	r5, r6
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	189b      	adds	r3, r3, r2
 800d3b8:	e7a4      	b.n	800d304 <_svfiprintf_r+0xd4>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	200a      	movs	r0, #10
 800d3be:	0019      	movs	r1, r3
 800d3c0:	3501      	adds	r5, #1
 800d3c2:	6063      	str	r3, [r4, #4]
 800d3c4:	782a      	ldrb	r2, [r5, #0]
 800d3c6:	1c6e      	adds	r6, r5, #1
 800d3c8:	3a30      	subs	r2, #48	@ 0x30
 800d3ca:	2a09      	cmp	r2, #9
 800d3cc:	d903      	bls.n	800d3d6 <_svfiprintf_r+0x1a6>
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d0c8      	beq.n	800d364 <_svfiprintf_r+0x134>
 800d3d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d3d4:	e7c6      	b.n	800d364 <_svfiprintf_r+0x134>
 800d3d6:	4341      	muls	r1, r0
 800d3d8:	0035      	movs	r5, r6
 800d3da:	2301      	movs	r3, #1
 800d3dc:	1889      	adds	r1, r1, r2
 800d3de:	e7f1      	b.n	800d3c4 <_svfiprintf_r+0x194>
 800d3e0:	aa07      	add	r2, sp, #28
 800d3e2:	9200      	str	r2, [sp, #0]
 800d3e4:	0021      	movs	r1, r4
 800d3e6:	003a      	movs	r2, r7
 800d3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d428 <_svfiprintf_r+0x1f8>)
 800d3ea:	9803      	ldr	r0, [sp, #12]
 800d3ec:	e000      	b.n	800d3f0 <_svfiprintf_r+0x1c0>
 800d3ee:	bf00      	nop
 800d3f0:	9004      	str	r0, [sp, #16]
 800d3f2:	9b04      	ldr	r3, [sp, #16]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	d1d6      	bne.n	800d3a6 <_svfiprintf_r+0x176>
 800d3f8:	89bb      	ldrh	r3, [r7, #12]
 800d3fa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d3fc:	065b      	lsls	r3, r3, #25
 800d3fe:	d500      	bpl.n	800d402 <_svfiprintf_r+0x1d2>
 800d400:	e72c      	b.n	800d25c <_svfiprintf_r+0x2c>
 800d402:	b021      	add	sp, #132	@ 0x84
 800d404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d406:	aa07      	add	r2, sp, #28
 800d408:	9200      	str	r2, [sp, #0]
 800d40a:	0021      	movs	r1, r4
 800d40c:	003a      	movs	r2, r7
 800d40e:	4b06      	ldr	r3, [pc, #24]	@ (800d428 <_svfiprintf_r+0x1f8>)
 800d410:	9803      	ldr	r0, [sp, #12]
 800d412:	f000 f87b 	bl	800d50c <_printf_i>
 800d416:	e7eb      	b.n	800d3f0 <_svfiprintf_r+0x1c0>
 800d418:	0800daca 	.word	0x0800daca
 800d41c:	0800dad0 	.word	0x0800dad0
 800d420:	0800dad4 	.word	0x0800dad4
 800d424:	00000000 	.word	0x00000000
 800d428:	0800d171 	.word	0x0800d171

0800d42c <_printf_common>:
 800d42c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d42e:	0016      	movs	r6, r2
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	688a      	ldr	r2, [r1, #8]
 800d434:	690b      	ldr	r3, [r1, #16]
 800d436:	000c      	movs	r4, r1
 800d438:	9000      	str	r0, [sp, #0]
 800d43a:	4293      	cmp	r3, r2
 800d43c:	da00      	bge.n	800d440 <_printf_common+0x14>
 800d43e:	0013      	movs	r3, r2
 800d440:	0022      	movs	r2, r4
 800d442:	6033      	str	r3, [r6, #0]
 800d444:	3243      	adds	r2, #67	@ 0x43
 800d446:	7812      	ldrb	r2, [r2, #0]
 800d448:	2a00      	cmp	r2, #0
 800d44a:	d001      	beq.n	800d450 <_printf_common+0x24>
 800d44c:	3301      	adds	r3, #1
 800d44e:	6033      	str	r3, [r6, #0]
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	069b      	lsls	r3, r3, #26
 800d454:	d502      	bpl.n	800d45c <_printf_common+0x30>
 800d456:	6833      	ldr	r3, [r6, #0]
 800d458:	3302      	adds	r3, #2
 800d45a:	6033      	str	r3, [r6, #0]
 800d45c:	6822      	ldr	r2, [r4, #0]
 800d45e:	2306      	movs	r3, #6
 800d460:	0015      	movs	r5, r2
 800d462:	401d      	ands	r5, r3
 800d464:	421a      	tst	r2, r3
 800d466:	d027      	beq.n	800d4b8 <_printf_common+0x8c>
 800d468:	0023      	movs	r3, r4
 800d46a:	3343      	adds	r3, #67	@ 0x43
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	1e5a      	subs	r2, r3, #1
 800d470:	4193      	sbcs	r3, r2
 800d472:	6822      	ldr	r2, [r4, #0]
 800d474:	0692      	lsls	r2, r2, #26
 800d476:	d430      	bmi.n	800d4da <_printf_common+0xae>
 800d478:	0022      	movs	r2, r4
 800d47a:	9901      	ldr	r1, [sp, #4]
 800d47c:	9800      	ldr	r0, [sp, #0]
 800d47e:	9d08      	ldr	r5, [sp, #32]
 800d480:	3243      	adds	r2, #67	@ 0x43
 800d482:	47a8      	blx	r5
 800d484:	3001      	adds	r0, #1
 800d486:	d025      	beq.n	800d4d4 <_printf_common+0xa8>
 800d488:	2206      	movs	r2, #6
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	2500      	movs	r5, #0
 800d48e:	4013      	ands	r3, r2
 800d490:	2b04      	cmp	r3, #4
 800d492:	d105      	bne.n	800d4a0 <_printf_common+0x74>
 800d494:	6833      	ldr	r3, [r6, #0]
 800d496:	68e5      	ldr	r5, [r4, #12]
 800d498:	1aed      	subs	r5, r5, r3
 800d49a:	43eb      	mvns	r3, r5
 800d49c:	17db      	asrs	r3, r3, #31
 800d49e:	401d      	ands	r5, r3
 800d4a0:	68a3      	ldr	r3, [r4, #8]
 800d4a2:	6922      	ldr	r2, [r4, #16]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	dd01      	ble.n	800d4ac <_printf_common+0x80>
 800d4a8:	1a9b      	subs	r3, r3, r2
 800d4aa:	18ed      	adds	r5, r5, r3
 800d4ac:	2600      	movs	r6, #0
 800d4ae:	42b5      	cmp	r5, r6
 800d4b0:	d120      	bne.n	800d4f4 <_printf_common+0xc8>
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	e010      	b.n	800d4d8 <_printf_common+0xac>
 800d4b6:	3501      	adds	r5, #1
 800d4b8:	68e3      	ldr	r3, [r4, #12]
 800d4ba:	6832      	ldr	r2, [r6, #0]
 800d4bc:	1a9b      	subs	r3, r3, r2
 800d4be:	42ab      	cmp	r3, r5
 800d4c0:	ddd2      	ble.n	800d468 <_printf_common+0x3c>
 800d4c2:	0022      	movs	r2, r4
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	9901      	ldr	r1, [sp, #4]
 800d4c8:	9800      	ldr	r0, [sp, #0]
 800d4ca:	9f08      	ldr	r7, [sp, #32]
 800d4cc:	3219      	adds	r2, #25
 800d4ce:	47b8      	blx	r7
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	d1f0      	bne.n	800d4b6 <_printf_common+0x8a>
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	4240      	negs	r0, r0
 800d4d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4da:	2030      	movs	r0, #48	@ 0x30
 800d4dc:	18e1      	adds	r1, r4, r3
 800d4de:	3143      	adds	r1, #67	@ 0x43
 800d4e0:	7008      	strb	r0, [r1, #0]
 800d4e2:	0021      	movs	r1, r4
 800d4e4:	1c5a      	adds	r2, r3, #1
 800d4e6:	3145      	adds	r1, #69	@ 0x45
 800d4e8:	7809      	ldrb	r1, [r1, #0]
 800d4ea:	18a2      	adds	r2, r4, r2
 800d4ec:	3243      	adds	r2, #67	@ 0x43
 800d4ee:	3302      	adds	r3, #2
 800d4f0:	7011      	strb	r1, [r2, #0]
 800d4f2:	e7c1      	b.n	800d478 <_printf_common+0x4c>
 800d4f4:	0022      	movs	r2, r4
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	9901      	ldr	r1, [sp, #4]
 800d4fa:	9800      	ldr	r0, [sp, #0]
 800d4fc:	9f08      	ldr	r7, [sp, #32]
 800d4fe:	321a      	adds	r2, #26
 800d500:	47b8      	blx	r7
 800d502:	3001      	adds	r0, #1
 800d504:	d0e6      	beq.n	800d4d4 <_printf_common+0xa8>
 800d506:	3601      	adds	r6, #1
 800d508:	e7d1      	b.n	800d4ae <_printf_common+0x82>
	...

0800d50c <_printf_i>:
 800d50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d50e:	b08b      	sub	sp, #44	@ 0x2c
 800d510:	9206      	str	r2, [sp, #24]
 800d512:	000a      	movs	r2, r1
 800d514:	3243      	adds	r2, #67	@ 0x43
 800d516:	9307      	str	r3, [sp, #28]
 800d518:	9005      	str	r0, [sp, #20]
 800d51a:	9203      	str	r2, [sp, #12]
 800d51c:	7e0a      	ldrb	r2, [r1, #24]
 800d51e:	000c      	movs	r4, r1
 800d520:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d522:	2a78      	cmp	r2, #120	@ 0x78
 800d524:	d809      	bhi.n	800d53a <_printf_i+0x2e>
 800d526:	2a62      	cmp	r2, #98	@ 0x62
 800d528:	d80b      	bhi.n	800d542 <_printf_i+0x36>
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	d100      	bne.n	800d530 <_printf_i+0x24>
 800d52e:	e0ba      	b.n	800d6a6 <_printf_i+0x19a>
 800d530:	497a      	ldr	r1, [pc, #488]	@ (800d71c <_printf_i+0x210>)
 800d532:	9104      	str	r1, [sp, #16]
 800d534:	2a58      	cmp	r2, #88	@ 0x58
 800d536:	d100      	bne.n	800d53a <_printf_i+0x2e>
 800d538:	e08e      	b.n	800d658 <_printf_i+0x14c>
 800d53a:	0025      	movs	r5, r4
 800d53c:	3542      	adds	r5, #66	@ 0x42
 800d53e:	702a      	strb	r2, [r5, #0]
 800d540:	e022      	b.n	800d588 <_printf_i+0x7c>
 800d542:	0010      	movs	r0, r2
 800d544:	3863      	subs	r0, #99	@ 0x63
 800d546:	2815      	cmp	r0, #21
 800d548:	d8f7      	bhi.n	800d53a <_printf_i+0x2e>
 800d54a:	f7f2 fddd 	bl	8000108 <__gnu_thumb1_case_shi>
 800d54e:	0016      	.short	0x0016
 800d550:	fff6001f 	.word	0xfff6001f
 800d554:	fff6fff6 	.word	0xfff6fff6
 800d558:	001ffff6 	.word	0x001ffff6
 800d55c:	fff6fff6 	.word	0xfff6fff6
 800d560:	fff6fff6 	.word	0xfff6fff6
 800d564:	0036009f 	.word	0x0036009f
 800d568:	fff6007e 	.word	0xfff6007e
 800d56c:	00b0fff6 	.word	0x00b0fff6
 800d570:	0036fff6 	.word	0x0036fff6
 800d574:	fff6fff6 	.word	0xfff6fff6
 800d578:	0082      	.short	0x0082
 800d57a:	0025      	movs	r5, r4
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	3542      	adds	r5, #66	@ 0x42
 800d580:	1d11      	adds	r1, r2, #4
 800d582:	6019      	str	r1, [r3, #0]
 800d584:	6813      	ldr	r3, [r2, #0]
 800d586:	702b      	strb	r3, [r5, #0]
 800d588:	2301      	movs	r3, #1
 800d58a:	e09e      	b.n	800d6ca <_printf_i+0x1be>
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	6809      	ldr	r1, [r1, #0]
 800d590:	1d02      	adds	r2, r0, #4
 800d592:	060d      	lsls	r5, r1, #24
 800d594:	d50b      	bpl.n	800d5ae <_printf_i+0xa2>
 800d596:	6806      	ldr	r6, [r0, #0]
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	2e00      	cmp	r6, #0
 800d59c:	da03      	bge.n	800d5a6 <_printf_i+0x9a>
 800d59e:	232d      	movs	r3, #45	@ 0x2d
 800d5a0:	9a03      	ldr	r2, [sp, #12]
 800d5a2:	4276      	negs	r6, r6
 800d5a4:	7013      	strb	r3, [r2, #0]
 800d5a6:	4b5d      	ldr	r3, [pc, #372]	@ (800d71c <_printf_i+0x210>)
 800d5a8:	270a      	movs	r7, #10
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	e018      	b.n	800d5e0 <_printf_i+0xd4>
 800d5ae:	6806      	ldr	r6, [r0, #0]
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	0649      	lsls	r1, r1, #25
 800d5b4:	d5f1      	bpl.n	800d59a <_printf_i+0x8e>
 800d5b6:	b236      	sxth	r6, r6
 800d5b8:	e7ef      	b.n	800d59a <_printf_i+0x8e>
 800d5ba:	6808      	ldr	r0, [r1, #0]
 800d5bc:	6819      	ldr	r1, [r3, #0]
 800d5be:	c940      	ldmia	r1!, {r6}
 800d5c0:	0605      	lsls	r5, r0, #24
 800d5c2:	d402      	bmi.n	800d5ca <_printf_i+0xbe>
 800d5c4:	0640      	lsls	r0, r0, #25
 800d5c6:	d500      	bpl.n	800d5ca <_printf_i+0xbe>
 800d5c8:	b2b6      	uxth	r6, r6
 800d5ca:	6019      	str	r1, [r3, #0]
 800d5cc:	4b53      	ldr	r3, [pc, #332]	@ (800d71c <_printf_i+0x210>)
 800d5ce:	270a      	movs	r7, #10
 800d5d0:	9304      	str	r3, [sp, #16]
 800d5d2:	2a6f      	cmp	r2, #111	@ 0x6f
 800d5d4:	d100      	bne.n	800d5d8 <_printf_i+0xcc>
 800d5d6:	3f02      	subs	r7, #2
 800d5d8:	0023      	movs	r3, r4
 800d5da:	2200      	movs	r2, #0
 800d5dc:	3343      	adds	r3, #67	@ 0x43
 800d5de:	701a      	strb	r2, [r3, #0]
 800d5e0:	6863      	ldr	r3, [r4, #4]
 800d5e2:	60a3      	str	r3, [r4, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	db06      	blt.n	800d5f6 <_printf_i+0xea>
 800d5e8:	2104      	movs	r1, #4
 800d5ea:	6822      	ldr	r2, [r4, #0]
 800d5ec:	9d03      	ldr	r5, [sp, #12]
 800d5ee:	438a      	bics	r2, r1
 800d5f0:	6022      	str	r2, [r4, #0]
 800d5f2:	4333      	orrs	r3, r6
 800d5f4:	d00c      	beq.n	800d610 <_printf_i+0x104>
 800d5f6:	9d03      	ldr	r5, [sp, #12]
 800d5f8:	0030      	movs	r0, r6
 800d5fa:	0039      	movs	r1, r7
 800d5fc:	f7f2 fe14 	bl	8000228 <__aeabi_uidivmod>
 800d600:	9b04      	ldr	r3, [sp, #16]
 800d602:	3d01      	subs	r5, #1
 800d604:	5c5b      	ldrb	r3, [r3, r1]
 800d606:	702b      	strb	r3, [r5, #0]
 800d608:	0033      	movs	r3, r6
 800d60a:	0006      	movs	r6, r0
 800d60c:	429f      	cmp	r7, r3
 800d60e:	d9f3      	bls.n	800d5f8 <_printf_i+0xec>
 800d610:	2f08      	cmp	r7, #8
 800d612:	d109      	bne.n	800d628 <_printf_i+0x11c>
 800d614:	6823      	ldr	r3, [r4, #0]
 800d616:	07db      	lsls	r3, r3, #31
 800d618:	d506      	bpl.n	800d628 <_printf_i+0x11c>
 800d61a:	6862      	ldr	r2, [r4, #4]
 800d61c:	6923      	ldr	r3, [r4, #16]
 800d61e:	429a      	cmp	r2, r3
 800d620:	dc02      	bgt.n	800d628 <_printf_i+0x11c>
 800d622:	2330      	movs	r3, #48	@ 0x30
 800d624:	3d01      	subs	r5, #1
 800d626:	702b      	strb	r3, [r5, #0]
 800d628:	9b03      	ldr	r3, [sp, #12]
 800d62a:	1b5b      	subs	r3, r3, r5
 800d62c:	6123      	str	r3, [r4, #16]
 800d62e:	9b07      	ldr	r3, [sp, #28]
 800d630:	0021      	movs	r1, r4
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	9805      	ldr	r0, [sp, #20]
 800d636:	9b06      	ldr	r3, [sp, #24]
 800d638:	aa09      	add	r2, sp, #36	@ 0x24
 800d63a:	f7ff fef7 	bl	800d42c <_printf_common>
 800d63e:	3001      	adds	r0, #1
 800d640:	d148      	bne.n	800d6d4 <_printf_i+0x1c8>
 800d642:	2001      	movs	r0, #1
 800d644:	4240      	negs	r0, r0
 800d646:	b00b      	add	sp, #44	@ 0x2c
 800d648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d64a:	2220      	movs	r2, #32
 800d64c:	6809      	ldr	r1, [r1, #0]
 800d64e:	430a      	orrs	r2, r1
 800d650:	6022      	str	r2, [r4, #0]
 800d652:	2278      	movs	r2, #120	@ 0x78
 800d654:	4932      	ldr	r1, [pc, #200]	@ (800d720 <_printf_i+0x214>)
 800d656:	9104      	str	r1, [sp, #16]
 800d658:	0021      	movs	r1, r4
 800d65a:	3145      	adds	r1, #69	@ 0x45
 800d65c:	700a      	strb	r2, [r1, #0]
 800d65e:	6819      	ldr	r1, [r3, #0]
 800d660:	6822      	ldr	r2, [r4, #0]
 800d662:	c940      	ldmia	r1!, {r6}
 800d664:	0610      	lsls	r0, r2, #24
 800d666:	d402      	bmi.n	800d66e <_printf_i+0x162>
 800d668:	0650      	lsls	r0, r2, #25
 800d66a:	d500      	bpl.n	800d66e <_printf_i+0x162>
 800d66c:	b2b6      	uxth	r6, r6
 800d66e:	6019      	str	r1, [r3, #0]
 800d670:	07d3      	lsls	r3, r2, #31
 800d672:	d502      	bpl.n	800d67a <_printf_i+0x16e>
 800d674:	2320      	movs	r3, #32
 800d676:	4313      	orrs	r3, r2
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	2e00      	cmp	r6, #0
 800d67c:	d001      	beq.n	800d682 <_printf_i+0x176>
 800d67e:	2710      	movs	r7, #16
 800d680:	e7aa      	b.n	800d5d8 <_printf_i+0xcc>
 800d682:	2220      	movs	r2, #32
 800d684:	6823      	ldr	r3, [r4, #0]
 800d686:	4393      	bics	r3, r2
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	e7f8      	b.n	800d67e <_printf_i+0x172>
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	680d      	ldr	r5, [r1, #0]
 800d690:	1d10      	adds	r0, r2, #4
 800d692:	6949      	ldr	r1, [r1, #20]
 800d694:	6018      	str	r0, [r3, #0]
 800d696:	6813      	ldr	r3, [r2, #0]
 800d698:	062e      	lsls	r6, r5, #24
 800d69a:	d501      	bpl.n	800d6a0 <_printf_i+0x194>
 800d69c:	6019      	str	r1, [r3, #0]
 800d69e:	e002      	b.n	800d6a6 <_printf_i+0x19a>
 800d6a0:	066d      	lsls	r5, r5, #25
 800d6a2:	d5fb      	bpl.n	800d69c <_printf_i+0x190>
 800d6a4:	8019      	strh	r1, [r3, #0]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	9d03      	ldr	r5, [sp, #12]
 800d6aa:	6123      	str	r3, [r4, #16]
 800d6ac:	e7bf      	b.n	800d62e <_printf_i+0x122>
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	1d11      	adds	r1, r2, #4
 800d6b2:	6019      	str	r1, [r3, #0]
 800d6b4:	6815      	ldr	r5, [r2, #0]
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	0028      	movs	r0, r5
 800d6ba:	6862      	ldr	r2, [r4, #4]
 800d6bc:	f000 f856 	bl	800d76c <memchr>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d001      	beq.n	800d6c8 <_printf_i+0x1bc>
 800d6c4:	1b40      	subs	r0, r0, r5
 800d6c6:	6060      	str	r0, [r4, #4]
 800d6c8:	6863      	ldr	r3, [r4, #4]
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	9a03      	ldr	r2, [sp, #12]
 800d6d0:	7013      	strb	r3, [r2, #0]
 800d6d2:	e7ac      	b.n	800d62e <_printf_i+0x122>
 800d6d4:	002a      	movs	r2, r5
 800d6d6:	6923      	ldr	r3, [r4, #16]
 800d6d8:	9906      	ldr	r1, [sp, #24]
 800d6da:	9805      	ldr	r0, [sp, #20]
 800d6dc:	9d07      	ldr	r5, [sp, #28]
 800d6de:	47a8      	blx	r5
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	d0ae      	beq.n	800d642 <_printf_i+0x136>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	079b      	lsls	r3, r3, #30
 800d6e8:	d415      	bmi.n	800d716 <_printf_i+0x20a>
 800d6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ec:	68e0      	ldr	r0, [r4, #12]
 800d6ee:	4298      	cmp	r0, r3
 800d6f0:	daa9      	bge.n	800d646 <_printf_i+0x13a>
 800d6f2:	0018      	movs	r0, r3
 800d6f4:	e7a7      	b.n	800d646 <_printf_i+0x13a>
 800d6f6:	0022      	movs	r2, r4
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	9906      	ldr	r1, [sp, #24]
 800d6fc:	9805      	ldr	r0, [sp, #20]
 800d6fe:	9e07      	ldr	r6, [sp, #28]
 800d700:	3219      	adds	r2, #25
 800d702:	47b0      	blx	r6
 800d704:	3001      	adds	r0, #1
 800d706:	d09c      	beq.n	800d642 <_printf_i+0x136>
 800d708:	3501      	adds	r5, #1
 800d70a:	68e3      	ldr	r3, [r4, #12]
 800d70c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d70e:	1a9b      	subs	r3, r3, r2
 800d710:	42ab      	cmp	r3, r5
 800d712:	dcf0      	bgt.n	800d6f6 <_printf_i+0x1ea>
 800d714:	e7e9      	b.n	800d6ea <_printf_i+0x1de>
 800d716:	2500      	movs	r5, #0
 800d718:	e7f7      	b.n	800d70a <_printf_i+0x1fe>
 800d71a:	46c0      	nop			@ (mov r8, r8)
 800d71c:	0800dadb 	.word	0x0800dadb
 800d720:	0800daec 	.word	0x0800daec

0800d724 <memmove>:
 800d724:	b510      	push	{r4, lr}
 800d726:	4288      	cmp	r0, r1
 800d728:	d902      	bls.n	800d730 <memmove+0xc>
 800d72a:	188b      	adds	r3, r1, r2
 800d72c:	4298      	cmp	r0, r3
 800d72e:	d308      	bcc.n	800d742 <memmove+0x1e>
 800d730:	2300      	movs	r3, #0
 800d732:	429a      	cmp	r2, r3
 800d734:	d007      	beq.n	800d746 <memmove+0x22>
 800d736:	5ccc      	ldrb	r4, [r1, r3]
 800d738:	54c4      	strb	r4, [r0, r3]
 800d73a:	3301      	adds	r3, #1
 800d73c:	e7f9      	b.n	800d732 <memmove+0xe>
 800d73e:	5c8b      	ldrb	r3, [r1, r2]
 800d740:	5483      	strb	r3, [r0, r2]
 800d742:	3a01      	subs	r2, #1
 800d744:	d2fb      	bcs.n	800d73e <memmove+0x1a>
 800d746:	bd10      	pop	{r4, pc}

0800d748 <_sbrk_r>:
 800d748:	2300      	movs	r3, #0
 800d74a:	b570      	push	{r4, r5, r6, lr}
 800d74c:	4d06      	ldr	r5, [pc, #24]	@ (800d768 <_sbrk_r+0x20>)
 800d74e:	0004      	movs	r4, r0
 800d750:	0008      	movs	r0, r1
 800d752:	602b      	str	r3, [r5, #0]
 800d754:	f7f5 fc44 	bl	8002fe0 <_sbrk>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d103      	bne.n	800d764 <_sbrk_r+0x1c>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d000      	beq.n	800d764 <_sbrk_r+0x1c>
 800d762:	6023      	str	r3, [r4, #0]
 800d764:	bd70      	pop	{r4, r5, r6, pc}
 800d766:	46c0      	nop			@ (mov r8, r8)
 800d768:	20001758 	.word	0x20001758

0800d76c <memchr>:
 800d76c:	b2c9      	uxtb	r1, r1
 800d76e:	1882      	adds	r2, r0, r2
 800d770:	4290      	cmp	r0, r2
 800d772:	d101      	bne.n	800d778 <memchr+0xc>
 800d774:	2000      	movs	r0, #0
 800d776:	4770      	bx	lr
 800d778:	7803      	ldrb	r3, [r0, #0]
 800d77a:	428b      	cmp	r3, r1
 800d77c:	d0fb      	beq.n	800d776 <memchr+0xa>
 800d77e:	3001      	adds	r0, #1
 800d780:	e7f6      	b.n	800d770 <memchr+0x4>

0800d782 <memcpy>:
 800d782:	2300      	movs	r3, #0
 800d784:	b510      	push	{r4, lr}
 800d786:	429a      	cmp	r2, r3
 800d788:	d100      	bne.n	800d78c <memcpy+0xa>
 800d78a:	bd10      	pop	{r4, pc}
 800d78c:	5ccc      	ldrb	r4, [r1, r3]
 800d78e:	54c4      	strb	r4, [r0, r3]
 800d790:	3301      	adds	r3, #1
 800d792:	e7f8      	b.n	800d786 <memcpy+0x4>

0800d794 <_realloc_r>:
 800d794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d796:	0006      	movs	r6, r0
 800d798:	000c      	movs	r4, r1
 800d79a:	0015      	movs	r5, r2
 800d79c:	2900      	cmp	r1, #0
 800d79e:	d105      	bne.n	800d7ac <_realloc_r+0x18>
 800d7a0:	0011      	movs	r1, r2
 800d7a2:	f7ff fc55 	bl	800d050 <_malloc_r>
 800d7a6:	0004      	movs	r4, r0
 800d7a8:	0020      	movs	r0, r4
 800d7aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7ac:	2a00      	cmp	r2, #0
 800d7ae:	d103      	bne.n	800d7b8 <_realloc_r+0x24>
 800d7b0:	f7ff fbe2 	bl	800cf78 <_free_r>
 800d7b4:	002c      	movs	r4, r5
 800d7b6:	e7f7      	b.n	800d7a8 <_realloc_r+0x14>
 800d7b8:	f000 f81c 	bl	800d7f4 <_malloc_usable_size_r>
 800d7bc:	0007      	movs	r7, r0
 800d7be:	4285      	cmp	r5, r0
 800d7c0:	d802      	bhi.n	800d7c8 <_realloc_r+0x34>
 800d7c2:	0843      	lsrs	r3, r0, #1
 800d7c4:	42ab      	cmp	r3, r5
 800d7c6:	d3ef      	bcc.n	800d7a8 <_realloc_r+0x14>
 800d7c8:	0029      	movs	r1, r5
 800d7ca:	0030      	movs	r0, r6
 800d7cc:	f7ff fc40 	bl	800d050 <_malloc_r>
 800d7d0:	9001      	str	r0, [sp, #4]
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d101      	bne.n	800d7da <_realloc_r+0x46>
 800d7d6:	9c01      	ldr	r4, [sp, #4]
 800d7d8:	e7e6      	b.n	800d7a8 <_realloc_r+0x14>
 800d7da:	002a      	movs	r2, r5
 800d7dc:	42bd      	cmp	r5, r7
 800d7de:	d900      	bls.n	800d7e2 <_realloc_r+0x4e>
 800d7e0:	003a      	movs	r2, r7
 800d7e2:	0021      	movs	r1, r4
 800d7e4:	9801      	ldr	r0, [sp, #4]
 800d7e6:	f7ff ffcc 	bl	800d782 <memcpy>
 800d7ea:	0021      	movs	r1, r4
 800d7ec:	0030      	movs	r0, r6
 800d7ee:	f7ff fbc3 	bl	800cf78 <_free_r>
 800d7f2:	e7f0      	b.n	800d7d6 <_realloc_r+0x42>

0800d7f4 <_malloc_usable_size_r>:
 800d7f4:	1f0b      	subs	r3, r1, #4
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	1f18      	subs	r0, r3, #4
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	da01      	bge.n	800d802 <_malloc_usable_size_r+0xe>
 800d7fe:	580b      	ldr	r3, [r1, r0]
 800d800:	18c0      	adds	r0, r0, r3
 800d802:	4770      	bx	lr

0800d804 <_init>:
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d806:	46c0      	nop			@ (mov r8, r8)
 800d808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d80a:	bc08      	pop	{r3}
 800d80c:	469e      	mov	lr, r3
 800d80e:	4770      	bx	lr

0800d810 <_fini>:
 800d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d812:	46c0      	nop			@ (mov r8, r8)
 800d814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d816:	bc08      	pop	{r3}
 800d818:	469e      	mov	lr, r3
 800d81a:	4770      	bx	lr
