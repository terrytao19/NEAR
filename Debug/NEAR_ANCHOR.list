
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800fdf8  0800fdf8  00010df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010318  08010318  00012344  2**0
                  CONTENTS
  4 .ARM          00000000  08010318  08010318  00012344  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010318  08010318  00012344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010318  08010318  00011318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801031c  0801031c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  08010320  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c94  20000344  08010664  00012344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd8  08010664  00012fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00012344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c120  00000000  00000000  0001236c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004454  00000000  00000000  0002e48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  000328e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000123f  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006609  00000000  00000000  000352bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6b0  00000000  00000000  0003b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abee5  00000000  00000000  0005af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006474  00000000  00000000  00106ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0010d314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000344 	.word	0x20000344
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800fddc 	.word	0x0800fddc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000348 	.word	0x20000348
 8000104:	0800fddc 	.word	0x0800fddc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff69 	bl	8001314 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fea9 	bl	80011a4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff5b 	bl	8001314 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff51 	bl	8001314 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fed3 	bl	800122c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fec9 	bl	800122c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 fe5e 	bl	8002220 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fd24 	bl	8002220 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fae0 	bl	800024c <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faca 	bl	800024c <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa6d 	bl	800024c <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa60 	bl	800024c <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 f9ef 	bl	8002220 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 f9ce 	bl	8002220 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	0800fe40 	.word	0x0800fe40
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f901 	bl	8002220 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f8ef 	bl	8002220 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 fe44 	bl	8002220 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 fe20 	bl	8002220 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fca9 	bl	8002220 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fc97 	bl	8002220 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fbdf 	bl	8002220 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fa97 	bl	8002220 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_dcmpun>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	46c6      	mov	lr, r8
 80020c4:	031e      	lsls	r6, r3, #12
 80020c6:	0b36      	lsrs	r6, r6, #12
 80020c8:	46b0      	mov	r8, r6
 80020ca:	4e0d      	ldr	r6, [pc, #52]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020cc:	030c      	lsls	r4, r1, #12
 80020ce:	004d      	lsls	r5, r1, #1
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	b500      	push	{lr}
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d6d      	lsrs	r5, r5, #21
 80020d8:	0d7f      	lsrs	r7, r7, #21
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d00b      	beq.n	80020f6 <__aeabi_dcmpun+0x36>
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__aeabi_dcmpun+0x40>)
 80020e0:	2000      	movs	r0, #0
 80020e2:	428f      	cmp	r7, r1
 80020e4:	d104      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020e6:	4646      	mov	r6, r8
 80020e8:	4316      	orrs	r6, r2
 80020ea:	0030      	movs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bc80      	pop	{r7}
 80020f2:	46b8      	mov	r8, r7
 80020f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f6:	4304      	orrs	r4, r0
 80020f8:	2001      	movs	r0, #1
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d1f8      	bne.n	80020f0 <__aeabi_dcmpun+0x30>
 80020fe:	e7ee      	b.n	80020de <__aeabi_dcmpun+0x1e>
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2iz>:
 8002104:	000b      	movs	r3, r1
 8002106:	0002      	movs	r2, r0
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d16      	ldr	r5, [pc, #88]	@ (8002164 <__aeabi_d2iz+0x60>)
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	b082      	sub	sp, #8
 8002110:	0049      	lsls	r1, r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	0b24      	lsrs	r4, r4, #12
 800211a:	0d49      	lsrs	r1, r1, #21
 800211c:	0fde      	lsrs	r6, r3, #31
 800211e:	42a9      	cmp	r1, r5
 8002120:	dd04      	ble.n	800212c <__aeabi_d2iz+0x28>
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <__aeabi_d2iz+0x64>)
 8002124:	4281      	cmp	r1, r0
 8002126:	dd03      	ble.n	8002130 <__aeabi_d2iz+0x2c>
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <__aeabi_d2iz+0x68>)
 800212a:	18f0      	adds	r0, r6, r3
 800212c:	b002      	add	sp, #8
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	0340      	lsls	r0, r0, #13
 8002134:	4320      	orrs	r0, r4
 8002136:	4c0e      	ldr	r4, [pc, #56]	@ (8002170 <__aeabi_d2iz+0x6c>)
 8002138:	1a64      	subs	r4, r4, r1
 800213a:	2c1f      	cmp	r4, #31
 800213c:	dd08      	ble.n	8002150 <__aeabi_d2iz+0x4c>
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <__aeabi_d2iz+0x70>)
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	40d8      	lsrs	r0, r3
 8002144:	0003      	movs	r3, r0
 8002146:	4258      	negs	r0, r3
 8002148:	2e00      	cmp	r6, #0
 800214a:	d1ef      	bne.n	800212c <__aeabi_d2iz+0x28>
 800214c:	0018      	movs	r0, r3
 800214e:	e7ed      	b.n	800212c <__aeabi_d2iz+0x28>
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <__aeabi_d2iz+0x74>)
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	469c      	mov	ip, r3
 8002156:	0003      	movs	r3, r0
 8002158:	4461      	add	r1, ip
 800215a:	408b      	lsls	r3, r1
 800215c:	40e2      	lsrs	r2, r4
 800215e:	4313      	orrs	r3, r2
 8002160:	e7f1      	b.n	8002146 <__aeabi_d2iz+0x42>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	000003fe 	.word	0x000003fe
 8002168:	0000041d 	.word	0x0000041d
 800216c:	7fffffff 	.word	0x7fffffff
 8002170:	00000433 	.word	0x00000433
 8002174:	00000413 	.word	0x00000413
 8002178:	fffffbed 	.word	0xfffffbed

0800217c <__aeabi_i2d>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	2800      	cmp	r0, #0
 8002180:	d016      	beq.n	80021b0 <__aeabi_i2d+0x34>
 8002182:	17c3      	asrs	r3, r0, #31
 8002184:	18c5      	adds	r5, r0, r3
 8002186:	405d      	eors	r5, r3
 8002188:	0fc4      	lsrs	r4, r0, #31
 800218a:	0028      	movs	r0, r5
 800218c:	f000 f848 	bl	8002220 <__clzsi2>
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <__aeabi_i2d+0x58>)
 8002192:	1a1b      	subs	r3, r3, r0
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0d5b      	lsrs	r3, r3, #21
 8002198:	280a      	cmp	r0, #10
 800219a:	dc14      	bgt.n	80021c6 <__aeabi_i2d+0x4a>
 800219c:	0002      	movs	r2, r0
 800219e:	002e      	movs	r6, r5
 80021a0:	3215      	adds	r2, #21
 80021a2:	4096      	lsls	r6, r2
 80021a4:	220b      	movs	r2, #11
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	40d5      	lsrs	r5, r2
 80021aa:	032d      	lsls	r5, r5, #12
 80021ac:	0b2d      	lsrs	r5, r5, #12
 80021ae:	e003      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021b0:	2400      	movs	r4, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	2600      	movs	r6, #0
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	432b      	orrs	r3, r5
 80021bc:	07e4      	lsls	r4, r4, #31
 80021be:	4323      	orrs	r3, r4
 80021c0:	0030      	movs	r0, r6
 80021c2:	0019      	movs	r1, r3
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	380b      	subs	r0, #11
 80021c8:	4085      	lsls	r5, r0
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	2600      	movs	r6, #0
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	e7f2      	b.n	80021b8 <__aeabi_i2d+0x3c>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	0000041e 	.word	0x0000041e

080021d8 <__aeabi_ui2d>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	1e04      	subs	r4, r0, #0
 80021dc:	d010      	beq.n	8002200 <__aeabi_ui2d+0x28>
 80021de:	f000 f81f 	bl	8002220 <__clzsi2>
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <__aeabi_ui2d+0x44>)
 80021e4:	1a1b      	subs	r3, r3, r0
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	280a      	cmp	r0, #10
 80021ec:	dc0f      	bgt.n	800220e <__aeabi_ui2d+0x36>
 80021ee:	220b      	movs	r2, #11
 80021f0:	0021      	movs	r1, r4
 80021f2:	1a12      	subs	r2, r2, r0
 80021f4:	40d1      	lsrs	r1, r2
 80021f6:	3015      	adds	r0, #21
 80021f8:	030a      	lsls	r2, r1, #12
 80021fa:	4084      	lsls	r4, r0
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	e001      	b.n	8002204 <__aeabi_ui2d+0x2c>
 8002200:	2300      	movs	r3, #0
 8002202:	2200      	movs	r2, #0
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4313      	orrs	r3, r2
 8002208:	0020      	movs	r0, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd10      	pop	{r4, pc}
 800220e:	0022      	movs	r2, r4
 8002210:	380b      	subs	r0, #11
 8002212:	4082      	lsls	r2, r0
 8002214:	0312      	lsls	r2, r2, #12
 8002216:	2400      	movs	r4, #0
 8002218:	0b12      	lsrs	r2, r2, #12
 800221a:	e7f3      	b.n	8002204 <__aeabi_ui2d+0x2c>
 800221c:	0000041e 	.word	0x0000041e

08002220 <__clzsi2>:
 8002220:	211c      	movs	r1, #28
 8002222:	2301      	movs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	4298      	cmp	r0, r3
 8002228:	d301      	bcc.n	800222e <__clzsi2+0xe>
 800222a:	0c00      	lsrs	r0, r0, #16
 800222c:	3910      	subs	r1, #16
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	4298      	cmp	r0, r3
 8002232:	d301      	bcc.n	8002238 <__clzsi2+0x18>
 8002234:	0a00      	lsrs	r0, r0, #8
 8002236:	3908      	subs	r1, #8
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	4298      	cmp	r0, r3
 800223c:	d301      	bcc.n	8002242 <__clzsi2+0x22>
 800223e:	0900      	lsrs	r0, r0, #4
 8002240:	3904      	subs	r1, #4
 8002242:	a202      	add	r2, pc, #8	@ (adr r2, 800224c <__clzsi2+0x2c>)
 8002244:	5c10      	ldrb	r0, [r2, r0]
 8002246:	1840      	adds	r0, r0, r1
 8002248:	4770      	bx	lr
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	02020304 	.word	0x02020304
 8002250:	01010101 	.word	0x01010101
	...

0800225c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002260:	f000 fe40 	bl	8002ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002264:	f000 f81c 	bl	80022a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002268:	f000 fa0a 	bl	8002680 <MX_GPIO_Init>
  MX_DMA_Init();
 800226c:	f000 f9ea 	bl	8002644 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002270:	f000 f9b4 	bl	80025dc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002274:	f000 f8e0 	bl	8002438 <MX_SPI1_Init>
  MX_ADC_Init();
 8002278:	f000 f882 	bl	8002380 <MX_ADC_Init>
  MX_SPI2_Init();
 800227c:	f000 f91a 	bl	80024b4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002280:	f00a fa52 	bl	800c728 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002284:	f000 f954 	bl	8002530 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <main+0x40>)
 800228a:	0018      	movs	r0, r3
 800228c:	f004 fc2a 	bl	8006ae4 <HAL_TIM_Base_Start_IT>

  setup_DW1000RSTnIRQ(0);
 8002290:	2000      	movs	r0, #0
 8002292:	f00a fff5 	bl	800d280 <setup_DW1000RSTnIRQ>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	e7fd      	b.n	8002296 <main+0x3a>
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	20000468 	.word	0x20000468

080022a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b099      	sub	sp, #100	@ 0x64
 80022a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a6:	242c      	movs	r4, #44	@ 0x2c
 80022a8:	193b      	adds	r3, r7, r4
 80022aa:	0018      	movs	r0, r3
 80022ac:	2334      	movs	r3, #52	@ 0x34
 80022ae:	001a      	movs	r2, r3
 80022b0:	2100      	movs	r1, #0
 80022b2:	f00b fdc9 	bl	800de48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b6:	231c      	movs	r3, #28
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	0018      	movs	r0, r3
 80022bc:	2310      	movs	r3, #16
 80022be:	001a      	movs	r2, r3
 80022c0:	2100      	movs	r1, #0
 80022c2:	f00b fdc1 	bl	800de48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c6:	003b      	movs	r3, r7
 80022c8:	0018      	movs	r0, r3
 80022ca:	231c      	movs	r3, #28
 80022cc:	001a      	movs	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f00b fdba 	bl	800de48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80022d4:	0021      	movs	r1, r4
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	2232      	movs	r2, #50	@ 0x32
 80022da:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	2201      	movs	r2, #1
 80022e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	2201      	movs	r2, #1
 80022e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2201      	movs	r2, #1
 80022ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	2210      	movs	r2, #16
 80022f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	2210      	movs	r2, #16
 80022f8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	2202      	movs	r2, #2
 80022fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002300:	187b      	adds	r3, r7, r1
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	0212      	lsls	r2, r2, #8
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002308:	187b      	adds	r3, r7, r1
 800230a:	22e0      	movs	r2, #224	@ 0xe0
 800230c:	0352      	lsls	r2, r2, #13
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002310:	187b      	adds	r3, r7, r1
 8002312:	2201      	movs	r2, #1
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002316:	187b      	adds	r3, r7, r1
 8002318:	0018      	movs	r0, r3
 800231a:	f003 fceb 	bl	8005cf4 <HAL_RCC_OscConfig>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d001      	beq.n	8002326 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002322:	f000 fa75 	bl	8002810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002326:	211c      	movs	r1, #28
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2207      	movs	r2, #7
 800232c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2202      	movs	r2, #2
 8002332:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800233a:	187b      	adds	r3, r7, r1
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002340:	187b      	adds	r3, r7, r1
 8002342:	2101      	movs	r1, #1
 8002344:	0018      	movs	r0, r3
 8002346:	f004 f85b 	bl	8006400 <HAL_RCC_ClockConfig>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d001      	beq.n	8002352 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800234e:	f000 fa5f 	bl	8002810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002352:	003b      	movs	r3, r7
 8002354:	4a09      	ldr	r2, [pc, #36]	@ (800237c <SystemClock_Config+0xdc>)
 8002356:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002358:	003b      	movs	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800235e:	003b      	movs	r3, r7
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	003b      	movs	r3, r7
 8002366:	0018      	movs	r0, r3
 8002368:	f004 f9b6 	bl	80066d8 <HAL_RCCEx_PeriphCLKConfig>
 800236c:	1e03      	subs	r3, r0, #0
 800236e:	d001      	beq.n	8002374 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002370:	f000 fa4e 	bl	8002810 <Error_Handler>
  }
}
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b019      	add	sp, #100	@ 0x64
 800237a:	bd90      	pop	{r4, r7, pc}
 800237c:	00020001 	.word	0x00020001

08002380 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	0018      	movs	r0, r3
 800238a:	230c      	movs	r3, #12
 800238c:	001a      	movs	r2, r3
 800238e:	2100      	movs	r1, #0
 8002390:	f00b fd5a 	bl	800de48 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002394:	4b26      	ldr	r3, [pc, #152]	@ (8002430 <MX_ADC_Init+0xb0>)
 8002396:	4a27      	ldr	r2, [pc, #156]	@ (8002434 <MX_ADC_Init+0xb4>)
 8002398:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800239a:	4b25      	ldr	r3, [pc, #148]	@ (8002430 <MX_ADC_Init+0xb0>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80023a0:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a6:	4b22      	ldr	r3, [pc, #136]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80023ac:	4b20      	ldr	r3, [pc, #128]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023b4:	2204      	movs	r2, #4
 80023b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80023b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80023be:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80023ca:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023d0:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023d2:	22c2      	movs	r2, #194	@ 0xc2
 80023d4:	32ff      	adds	r2, #255	@ 0xff
 80023d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023d8:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80023de:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023e0:	2224      	movs	r2, #36	@ 0x24
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80023ec:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <MX_ADC_Init+0xb0>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fddc 	bl	8002fac <HAL_ADC_Init>
 80023f4:	1e03      	subs	r3, r0, #0
 80023f6:	d001      	beq.n	80023fc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80023f8:	f000 fa0a 	bl	8002810 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2208      	movs	r2, #8
 8002400:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2280      	movs	r2, #128	@ 0x80
 8002406:	0152      	lsls	r2, r2, #5
 8002408:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	0552      	lsls	r2, r2, #21
 8002410:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002412:	1d3a      	adds	r2, r7, #4
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <MX_ADC_Init+0xb0>)
 8002416:	0011      	movs	r1, r2
 8002418:	0018      	movs	r0, r3
 800241a:	f000 ff07 	bl	800322c <HAL_ADC_ConfigChannel>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d001      	beq.n	8002426 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002422:	f000 f9f5 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b004      	add	sp, #16
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	20000360 	.word	0x20000360
 8002434:	40012400 	.word	0x40012400

08002438 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800243c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <MX_SPI1_Init+0x74>)
 800243e:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <MX_SPI1_Init+0x78>)
 8002440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002442:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002444:	2282      	movs	r2, #130	@ 0x82
 8002446:	0052      	lsls	r2, r2, #1
 8002448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244a:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <MX_SPI1_Init+0x74>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002450:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002452:	22e0      	movs	r2, #224	@ 0xe0
 8002454:	00d2      	lsls	r2, r2, #3
 8002456:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <MX_SPI1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800245e:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800246c:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <MX_SPI1_Init+0x74>)
 800246e:	2208      	movs	r2, #8
 8002470:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002472:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <MX_SPI1_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002480:	2200      	movs	r2, #0
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002486:	2207      	movs	r2, #7
 8002488:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800248a:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <MX_SPI1_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002492:	2208      	movs	r2, #8
 8002494:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002496:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <MX_SPI1_Init+0x74>)
 8002498:	0018      	movs	r0, r3
 800249a:	f004 fa1b 	bl	80068d4 <HAL_SPI_Init>
 800249e:	1e03      	subs	r3, r0, #0
 80024a0:	d001      	beq.n	80024a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024a2:	f000 f9b5 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200003a0 	.word	0x200003a0
 80024b0:	40013000 	.word	0x40013000

080024b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024ba:	4a1c      	ldr	r2, [pc, #112]	@ (800252c <MX_SPI2_Init+0x78>)
 80024bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024c0:	2282      	movs	r2, #130	@ 0x82
 80024c2:	0052      	lsls	r2, r2, #1
 80024c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024c6:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024ce:	22c0      	movs	r2, #192	@ 0xc0
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024da:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024dc:	2200      	movs	r2, #0
 80024de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	02d2      	lsls	r2, r2, #11
 80024e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <MX_SPI2_Init+0x74>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002500:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <MX_SPI2_Init+0x74>)
 8002502:	2207      	movs	r2, #7
 8002504:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002506:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <MX_SPI2_Init+0x74>)
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <MX_SPI2_Init+0x74>)
 800250e:	2208      	movs	r2, #8
 8002510:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002512:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <MX_SPI2_Init+0x74>)
 8002514:	0018      	movs	r0, r3
 8002516:	f004 f9dd 	bl	80068d4 <HAL_SPI_Init>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d001      	beq.n	8002522 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800251e:	f000 f977 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000404 	.word	0x20000404
 800252c:	40003800 	.word	0x40003800

08002530 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002536:	2308      	movs	r3, #8
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	0018      	movs	r0, r3
 800253c:	2310      	movs	r3, #16
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f00b fc81 	bl	800de48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002546:	003b      	movs	r3, r7
 8002548:	0018      	movs	r0, r3
 800254a:	2308      	movs	r3, #8
 800254c:	001a      	movs	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f00b fc7a 	bl	800de48 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002554:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 8002556:	4a20      	ldr	r2, [pc, #128]	@ (80025d8 <MX_TIM3_Init+0xa8>)
 8002558:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 800255a:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 800255c:	22f4      	movs	r2, #244	@ 0xf4
 800255e:	32ff      	adds	r2, #255	@ 0xff
 8002560:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 8002568:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 800256a:	2268      	movs	r2, #104	@ 0x68
 800256c:	32ff      	adds	r2, #255	@ 0xff
 800256e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002570:	4b18      	ldr	r3, [pc, #96]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002576:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800257c:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 800257e:	0018      	movs	r0, r3
 8002580:	f004 fa60 	bl	8006a44 <HAL_TIM_Base_Init>
 8002584:	1e03      	subs	r3, r0, #0
 8002586:	d001      	beq.n	800258c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002588:	f000 f942 	bl	8002810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258c:	2108      	movs	r1, #8
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	0152      	lsls	r2, r2, #5
 8002594:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002596:	187a      	adds	r2, r7, r1
 8002598:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f004 fbe1 	bl	8006d64 <HAL_TIM_ConfigClockSource>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80025a6:	f000 f933 	bl	8002810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025aa:	003b      	movs	r3, r7
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b0:	003b      	movs	r3, r7
 80025b2:	2200      	movs	r2, #0
 80025b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b6:	003a      	movs	r2, r7
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f004 fded 	bl	800719c <HAL_TIMEx_MasterConfigSynchronization>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80025c6:	f000 f923 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b006      	add	sp, #24
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	20000468 	.word	0x20000468
 80025d8:	40000400 	.word	0x40000400

080025dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025e0:	4b16      	ldr	r3, [pc, #88]	@ (800263c <MX_USART1_UART_Init+0x60>)
 80025e2:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <MX_USART1_UART_Init+0x64>)
 80025e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <MX_USART1_UART_Init+0x60>)
 80025e8:	2296      	movs	r2, #150	@ 0x96
 80025ea:	0192      	lsls	r2, r2, #6
 80025ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <MX_USART1_UART_Init+0x60>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <MX_USART1_UART_Init+0x60>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <MX_USART1_UART_Init+0x60>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <MX_USART1_UART_Init+0x60>)
 8002602:	220c      	movs	r2, #12
 8002604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <MX_USART1_UART_Init+0x60>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <MX_USART1_UART_Init+0x60>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <MX_USART1_UART_Init+0x60>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002618:	4b08      	ldr	r3, [pc, #32]	@ (800263c <MX_USART1_UART_Init+0x60>)
 800261a:	2208      	movs	r2, #8
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <MX_USART1_UART_Init+0x60>)
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	0212      	lsls	r2, r2, #8
 8002624:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002626:	4b05      	ldr	r3, [pc, #20]	@ (800263c <MX_USART1_UART_Init+0x60>)
 8002628:	0018      	movs	r0, r3
 800262a:	f004 fe25 	bl	8007278 <HAL_UART_Init>
 800262e:	1e03      	subs	r3, r0, #0
 8002630:	d001      	beq.n	8002636 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002632:	f000 f8ed 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200004b0 	.word	0x200004b0
 8002640:	40013800 	.word	0x40013800

08002644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800264a:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <MX_DMA_Init+0x38>)
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <MX_DMA_Init+0x38>)
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <MX_DMA_Init+0x38>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	200a      	movs	r0, #10
 8002668:	f000 ffbc 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800266c:	200a      	movs	r0, #10
 800266e:	f000 ffce 	bl	800360e <HAL_NVIC_EnableIRQ>

}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b002      	add	sp, #8
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	40021000 	.word	0x40021000

08002680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	240c      	movs	r4, #12
 8002688:	193b      	adds	r3, r7, r4
 800268a:	0018      	movs	r0, r3
 800268c:	2314      	movs	r3, #20
 800268e:	001a      	movs	r2, r3
 8002690:	2100      	movs	r1, #0
 8002692:	f00b fbd9 	bl	800de48 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002696:	4b5b      	ldr	r3, [pc, #364]	@ (8002804 <MX_GPIO_Init+0x184>)
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	4b5a      	ldr	r3, [pc, #360]	@ (8002804 <MX_GPIO_Init+0x184>)
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	03c9      	lsls	r1, r1, #15
 80026a0:	430a      	orrs	r2, r1
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	4b57      	ldr	r3, [pc, #348]	@ (8002804 <MX_GPIO_Init+0x184>)
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	03db      	lsls	r3, r3, #15
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	4b54      	ldr	r3, [pc, #336]	@ (8002804 <MX_GPIO_Init+0x184>)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <MX_GPIO_Init+0x184>)
 80026b8:	2180      	movs	r1, #128	@ 0x80
 80026ba:	0289      	lsls	r1, r1, #10
 80026bc:	430a      	orrs	r2, r1
 80026be:	615a      	str	r2, [r3, #20]
 80026c0:	4b50      	ldr	r3, [pc, #320]	@ (8002804 <MX_GPIO_Init+0x184>)
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002804 <MX_GPIO_Init+0x184>)
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002804 <MX_GPIO_Init+0x184>)
 80026d4:	2180      	movs	r1, #128	@ 0x80
 80026d6:	02c9      	lsls	r1, r1, #11
 80026d8:	430a      	orrs	r2, r1
 80026da:	615a      	str	r2, [r3, #20]
 80026dc:	4b49      	ldr	r3, [pc, #292]	@ (8002804 <MX_GPIO_Init+0x184>)
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	02db      	lsls	r3, r3, #11
 80026e4:	4013      	ands	r3, r2
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 80026ea:	2390      	movs	r3, #144	@ 0x90
 80026ec:	05db      	lsls	r3, r3, #23
 80026ee:	2200      	movs	r2, #0
 80026f0:	2111      	movs	r1, #17
 80026f2:	0018      	movs	r0, r3
 80026f4:	f001 fc83 	bl	8003ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 80026f8:	4943      	ldr	r1, [pc, #268]	@ (8002808 <MX_GPIO_Init+0x188>)
 80026fa:	4b44      	ldr	r3, [pc, #272]	@ (800280c <MX_GPIO_Init+0x18c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	0018      	movs	r0, r3
 8002700:	f001 fc7d 	bl	8003ffe <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002704:	193b      	adds	r3, r7, r4
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	193b      	adds	r3, r7, r4
 800270c:	2201      	movs	r2, #1
 800270e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	193b      	adds	r3, r7, r4
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 800271c:	193a      	adds	r2, r7, r4
 800271e:	2390      	movs	r3, #144	@ 0x90
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	0011      	movs	r1, r2
 8002724:	0018      	movs	r0, r3
 8002726:	f001 f9fd 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 800272a:	193b      	adds	r3, r7, r4
 800272c:	2204      	movs	r2, #4
 800272e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002730:	193b      	adds	r3, r7, r4
 8002732:	2288      	movs	r2, #136	@ 0x88
 8002734:	0352      	lsls	r2, r2, #13
 8002736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	193b      	adds	r3, r7, r4
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800273e:	193a      	adds	r2, r7, r4
 8002740:	2390      	movs	r3, #144	@ 0x90
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	0011      	movs	r1, r2
 8002746:	0018      	movs	r0, r3
 8002748:	f001 f9ec 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 800274c:	193b      	adds	r3, r7, r4
 800274e:	2210      	movs	r2, #16
 8002750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	193b      	adds	r3, r7, r4
 8002754:	2201      	movs	r2, #1
 8002756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	193b      	adds	r3, r7, r4
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800275e:	193b      	adds	r3, r7, r4
 8002760:	2203      	movs	r2, #3
 8002762:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8002764:	193a      	adds	r2, r7, r4
 8002766:	2390      	movs	r3, #144	@ 0x90
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f001 f9d9 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002772:	193b      	adds	r3, r7, r4
 8002774:	4a24      	ldr	r2, [pc, #144]	@ (8002808 <MX_GPIO_Init+0x188>)
 8002776:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	193b      	adds	r3, r7, r4
 800277a:	2201      	movs	r2, #1
 800277c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	193b      	adds	r3, r7, r4
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	193b      	adds	r3, r7, r4
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	193b      	adds	r3, r7, r4
 800278c:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <MX_GPIO_Init+0x18c>)
 800278e:	0019      	movs	r1, r3
 8002790:	0010      	movs	r0, r2
 8002792:	f001 f9c7 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002796:	0021      	movs	r1, r4
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2280      	movs	r2, #128	@ 0x80
 800279c:	0192      	lsls	r2, r2, #6
 800279e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a0:	000c      	movs	r4, r1
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	4a16      	ldr	r2, [pc, #88]	@ (800280c <MX_GPIO_Init+0x18c>)
 80027b2:	0019      	movs	r1, r3
 80027b4:	0010      	movs	r0, r2
 80027b6:	f001 f9b5 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80027ba:	0021      	movs	r1, r4
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2220      	movs	r2, #32
 80027c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	2288      	movs	r2, #136	@ 0x88
 80027c6:	0352      	lsls	r2, r2, #13
 80027c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2202      	movs	r2, #2
 80027ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	4a0e      	ldr	r2, [pc, #56]	@ (800280c <MX_GPIO_Init+0x18c>)
 80027d4:	0019      	movs	r1, r3
 80027d6:	0010      	movs	r0, r2
 80027d8:	f001 f9a4 	bl	8003b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80027dc:	2200      	movs	r2, #0
 80027de:	2100      	movs	r1, #0
 80027e0:	2006      	movs	r0, #6
 80027e2:	f000 feff 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80027e6:	2006      	movs	r0, #6
 80027e8:	f000 ff11 	bl	800360e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	2007      	movs	r0, #7
 80027f2:	f000 fef7 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80027f6:	2007      	movs	r0, #7
 80027f8:	f000 ff09 	bl	800360e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b009      	add	sp, #36	@ 0x24
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	00000b44 	.word	0x00000b44
 800280c:	48000400 	.word	0x48000400

08002810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002814:	b672      	cpsid	i
}
 8002816:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	e7fd      	b.n	8002818 <Error_Handler+0x8>

0800281c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <HAL_MspInit+0x54>)
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_MspInit+0x54>)
 8002828:	2101      	movs	r1, #1
 800282a:	430a      	orrs	r2, r1
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_MspInit+0x54>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b0d      	ldr	r3, [pc, #52]	@ (8002870 <HAL_MspInit+0x54>)
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <HAL_MspInit+0x54>)
 8002840:	2180      	movs	r1, #128	@ 0x80
 8002842:	0549      	lsls	r1, r1, #21
 8002844:	430a      	orrs	r2, r1
 8002846:	61da      	str	r2, [r3, #28]
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_MspInit+0x54>)
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	055b      	lsls	r3, r3, #21
 8002850:	4013      	ands	r3, r2
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2004      	movs	r0, #4
 800285c:	f000 fec2 	bl	80035e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002860:	2004      	movs	r0, #4
 8002862:	f000 fed4 	bl	800360e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b08b      	sub	sp, #44	@ 0x2c
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	2414      	movs	r4, #20
 800287e:	193b      	adds	r3, r7, r4
 8002880:	0018      	movs	r0, r3
 8002882:	2314      	movs	r3, #20
 8002884:	001a      	movs	r2, r3
 8002886:	2100      	movs	r1, #0
 8002888:	f00b fade 	bl	800de48 <memset>
  if(hadc->Instance==ADC1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a18      	ldr	r2, [pc, #96]	@ (80028f4 <HAL_ADC_MspInit+0x80>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d12a      	bne.n	80028ec <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002896:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <HAL_ADC_MspInit+0x84>)
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <HAL_ADC_MspInit+0x84>)
 800289c:	2180      	movs	r1, #128	@ 0x80
 800289e:	0089      	lsls	r1, r1, #2
 80028a0:	430a      	orrs	r2, r1
 80028a2:	619a      	str	r2, [r3, #24]
 80028a4:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <HAL_ADC_MspInit+0x84>)
 80028a6:	699a      	ldr	r2, [r3, #24]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_ADC_MspInit+0x84>)
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <HAL_ADC_MspInit+0x84>)
 80028b8:	2180      	movs	r1, #128	@ 0x80
 80028ba:	02c9      	lsls	r1, r1, #11
 80028bc:	430a      	orrs	r2, r1
 80028be:	615a      	str	r2, [r3, #20]
 80028c0:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <HAL_ADC_MspInit+0x84>)
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	02db      	lsls	r3, r3, #11
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	2203      	movs	r2, #3
 80028d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	193b      	adds	r3, r7, r4
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	4a06      	ldr	r2, [pc, #24]	@ (80028fc <HAL_ADC_MspInit+0x88>)
 80028e4:	0019      	movs	r1, r3
 80028e6:	0010      	movs	r0, r2
 80028e8:	f001 f91c 	bl	8003b24 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b00b      	add	sp, #44	@ 0x2c
 80028f2:	bd90      	pop	{r4, r7, pc}
 80028f4:	40012400 	.word	0x40012400
 80028f8:	40021000 	.word	0x40021000
 80028fc:	48000400 	.word	0x48000400

08002900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b08d      	sub	sp, #52	@ 0x34
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	241c      	movs	r4, #28
 800290a:	193b      	adds	r3, r7, r4
 800290c:	0018      	movs	r0, r3
 800290e:	2314      	movs	r3, #20
 8002910:	001a      	movs	r2, r3
 8002912:	2100      	movs	r1, #0
 8002914:	f00b fa98 	bl	800de48 <memset>
  if(hspi->Instance==SPI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a45      	ldr	r2, [pc, #276]	@ (8002a34 <HAL_SPI_MspInit+0x134>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d133      	bne.n	800298a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002922:	4b45      	ldr	r3, [pc, #276]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 8002928:	2180      	movs	r1, #128	@ 0x80
 800292a:	0149      	lsls	r1, r1, #5
 800292c:	430a      	orrs	r2, r1
 800292e:	619a      	str	r2, [r3, #24]
 8002930:	4b41      	ldr	r3, [pc, #260]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 8002932:	699a      	ldr	r2, [r3, #24]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	015b      	lsls	r3, r3, #5
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b3d      	ldr	r3, [pc, #244]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	0289      	lsls	r1, r1, #10
 8002948:	430a      	orrs	r2, r1
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	029b      	lsls	r3, r3, #10
 8002954:	4013      	ands	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 800295a:	0021      	movs	r1, r4
 800295c:	187b      	adds	r3, r7, r1
 800295e:	22e0      	movs	r2, #224	@ 0xe0
 8002960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2202      	movs	r2, #2
 8002966:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800296e:	187b      	adds	r3, r7, r1
 8002970:	2203      	movs	r2, #3
 8002972:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002974:	187b      	adds	r3, r7, r1
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	187a      	adds	r2, r7, r1
 800297c:	2390      	movs	r3, #144	@ 0x90
 800297e:	05db      	lsls	r3, r3, #23
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f001 f8ce 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002988:	e04f      	b.n	8002a2a <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a3c <HAL_SPI_MspInit+0x13c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d14a      	bne.n	8002a2a <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002994:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 800299a:	2180      	movs	r1, #128	@ 0x80
 800299c:	01c9      	lsls	r1, r1, #7
 800299e:	430a      	orrs	r2, r1
 80029a0:	61da      	str	r2, [r3, #28]
 80029a2:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	2380      	movs	r3, #128	@ 0x80
 80029a8:	01db      	lsls	r3, r3, #7
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b0:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 80029b6:	2180      	movs	r1, #128	@ 0x80
 80029b8:	02c9      	lsls	r1, r1, #11
 80029ba:	430a      	orrs	r2, r1
 80029bc:	615a      	str	r2, [r3, #20]
 80029be:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <HAL_SPI_MspInit+0x138>)
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	02db      	lsls	r3, r3, #11
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029cc:	211c      	movs	r1, #28
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	00d2      	lsls	r2, r2, #3
 80029d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	000c      	movs	r4, r1
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	2202      	movs	r2, #2
 80029dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	2203      	movs	r2, #3
 80029e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	2205      	movs	r2, #5
 80029ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <HAL_SPI_MspInit+0x140>)
 80029f4:	0019      	movs	r1, r3
 80029f6:	0010      	movs	r0, r2
 80029f8:	f001 f894 	bl	8003b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80029fc:	0021      	movs	r1, r4
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	22d0      	movs	r2, #208	@ 0xd0
 8002a02:	0212      	lsls	r2, r2, #8
 8002a04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	187b      	adds	r3, r7, r1
 8002a08:	2202      	movs	r2, #2
 8002a0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	2203      	movs	r2, #3
 8002a16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	4a07      	ldr	r2, [pc, #28]	@ (8002a40 <HAL_SPI_MspInit+0x140>)
 8002a22:	0019      	movs	r1, r3
 8002a24:	0010      	movs	r0, r2
 8002a26:	f001 f87d 	bl	8003b24 <HAL_GPIO_Init>
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b00d      	add	sp, #52	@ 0x34
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	40013000 	.word	0x40013000
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40003800 	.word	0x40003800
 8002a40:	48000400 	.word	0x48000400

08002a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0d      	ldr	r2, [pc, #52]	@ (8002a88 <HAL_TIM_Base_MspInit+0x44>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d113      	bne.n	8002a7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <HAL_TIM_Base_MspInit+0x48>)
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <HAL_TIM_Base_MspInit+0x48>)
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	61da      	str	r2, [r3, #28]
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_TIM_Base_MspInit+0x48>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	2010      	movs	r0, #16
 8002a74:	f000 fdb6 	bl	80035e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a78:	2010      	movs	r0, #16
 8002a7a:	f000 fdc8 	bl	800360e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b004      	add	sp, #16
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b08b      	sub	sp, #44	@ 0x2c
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	2414      	movs	r4, #20
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	2314      	movs	r3, #20
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	f00b f9d0 	bl	800de48 <memset>
  if(huart->Instance==USART1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a47      	ldr	r2, [pc, #284]	@ (8002bcc <HAL_UART_MspInit+0x13c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d000      	beq.n	8002ab4 <HAL_UART_MspInit+0x24>
 8002ab2:	e087      	b.n	8002bc4 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab4:	4b46      	ldr	r3, [pc, #280]	@ (8002bd0 <HAL_UART_MspInit+0x140>)
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	4b45      	ldr	r3, [pc, #276]	@ (8002bd0 <HAL_UART_MspInit+0x140>)
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	01c9      	lsls	r1, r1, #7
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	619a      	str	r2, [r3, #24]
 8002ac2:	4b43      	ldr	r3, [pc, #268]	@ (8002bd0 <HAL_UART_MspInit+0x140>)
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	2380      	movs	r3, #128	@ 0x80
 8002ac8:	01db      	lsls	r3, r3, #7
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd0 <HAL_UART_MspInit+0x140>)
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd0 <HAL_UART_MspInit+0x140>)
 8002ad6:	2180      	movs	r1, #128	@ 0x80
 8002ad8:	0289      	lsls	r1, r1, #10
 8002ada:	430a      	orrs	r2, r1
 8002adc:	615a      	str	r2, [r3, #20]
 8002ade:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd0 <HAL_UART_MspInit+0x140>)
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	029b      	lsls	r3, r3, #10
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	22c0      	movs	r2, #192	@ 0xc0
 8002af0:	00d2      	lsls	r2, r2, #3
 8002af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	0021      	movs	r1, r4
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	2202      	movs	r2, #2
 8002afa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	2203      	movs	r2, #3
 8002b06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	187a      	adds	r2, r7, r1
 8002b10:	2390      	movs	r3, #144	@ 0x90
 8002b12:	05db      	lsls	r3, r3, #23
 8002b14:	0011      	movs	r1, r2
 8002b16:	0018      	movs	r0, r3
 8002b18:	f001 f804 	bl	8003b24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd8 <HAL_UART_MspInit+0x148>)
 8002b20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b22:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b28:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2e:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b30:	2280      	movs	r2, #128	@ 0x80
 8002b32:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b34:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3a:	4b26      	ldr	r3, [pc, #152]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b40:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b42:	2220      	movs	r2, #32
 8002b44:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b46:	4b23      	ldr	r3, [pc, #140]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b4c:	4b21      	ldr	r3, [pc, #132]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 fd8a 	bl	8003668 <HAL_DMA_Init>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002b58:	f7ff fe5a 	bl	8002810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b60:	675a      	str	r2, [r3, #116]	@ 0x74
 8002b62:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd4 <HAL_UART_MspInit+0x144>)
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002be0 <HAL_UART_MspInit+0x150>)
 8002b6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b70:	2210      	movs	r2, #16
 8002b72:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b7c:	2280      	movs	r2, #128	@ 0x80
 8002b7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b80:	4b16      	ldr	r3, [pc, #88]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b86:	4b15      	ldr	r3, [pc, #84]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b8e:	2220      	movs	r2, #32
 8002b90:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b92:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b98:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fd64 	bl	8003668 <HAL_DMA_Init>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8002ba4:	f7ff fe34 	bl	8002810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a0c      	ldr	r2, [pc, #48]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002bac:	671a      	str	r2, [r3, #112]	@ 0x70
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_UART_MspInit+0x14c>)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	201b      	movs	r0, #27
 8002bba:	f000 fd13 	bl	80035e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bbe:	201b      	movs	r0, #27
 8002bc0:	f000 fd25 	bl	800360e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002bc4:	46c0      	nop			@ (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b00b      	add	sp, #44	@ 0x2c
 8002bca:	bd90      	pop	{r4, r7, pc}
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	20000568 	.word	0x20000568
 8002bd8:	40020030 	.word	0x40020030
 8002bdc:	200005ac 	.word	0x200005ac
 8002be0:	4002001c 	.word	0x4002001c

08002be4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a10      	ldr	r2, [pc, #64]	@ (8002c34 <HAL_UART_MspDeInit+0x50>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d11a      	bne.n	8002c2c <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_UART_MspDeInit+0x54>)
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <HAL_UART_MspDeInit+0x54>)
 8002bfc:	490f      	ldr	r1, [pc, #60]	@ (8002c3c <HAL_UART_MspDeInit+0x58>)
 8002bfe:	400a      	ands	r2, r1
 8002c00:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002c02:	23c0      	movs	r3, #192	@ 0xc0
 8002c04:	00da      	lsls	r2, r3, #3
 8002c06:	2390      	movs	r3, #144	@ 0x90
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	0011      	movs	r1, r2
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f001 f901 	bl	8003e14 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 fd6e 	bl	80036f8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 fd69 	bl	80036f8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002c26:	201b      	movs	r0, #27
 8002c28:	f000 fd01 	bl	800362e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40013800 	.word	0x40013800
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	ffffbfff 	.word	0xffffbfff

08002c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	e7fd      	b.n	8002c44 <NMI_Handler+0x4>

08002c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	e7fd      	b.n	8002c4c <HardFault_Handler+0x4>

08002c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c68:	f000 f984 	bl	8002f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8002c80:	2004      	movs	r0, #4
 8002c82:	f001 f9d9 	bl	8004038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002c90:	2020      	movs	r0, #32
 8002c92:	f001 f9d1 	bl	8004038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 fe54 	bl	8003950 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <DMA1_Channel2_3_IRQHandler+0x20>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 fe50 	bl	8003950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002cb0:	46c0      	nop			@ (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	200005ac 	.word	0x200005ac
 8002cbc:	20000568 	.word	0x20000568

08002cc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cc4:	4b03      	ldr	r3, [pc, #12]	@ (8002cd4 <TIM3_IRQHandler+0x14>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f003 ff5e 	bl	8006b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	20000468 	.word	0x20000468

08002cd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <USART1_IRQHandler+0x14>)
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f004 fc64 	bl	80075ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ce4:	46c0      	nop			@ (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	200004b0 	.word	0x200004b0

08002cf0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <USB_IRQHandler+0x14>)
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f001 fad4 	bl	80042a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002cfc:	46c0      	nop			@ (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	2000198c 	.word	0x2000198c

08002d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  return 1;
 8002d0c:	2301      	movs	r3, #1
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <_kill>:

int _kill(int pid, int sig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d1e:	f00b f8ed 	bl	800defc <__errno>
 8002d22:	0003      	movs	r3, r0
 8002d24:	2216      	movs	r2, #22
 8002d26:	601a      	str	r2, [r3, #0]
  return -1;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	425b      	negs	r3, r3
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_exit>:

void _exit (int status)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	425a      	negs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0011      	movs	r1, r2
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff ffe5 	bl	8002d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	e7fd      	b.n	8002d4a <_exit+0x16>

08002d4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e00a      	b.n	8002d76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d60:	e000      	b.n	8002d64 <_read+0x16>
 8002d62:	bf00      	nop
 8002d64:	0001      	movs	r1, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	60ba      	str	r2, [r7, #8]
 8002d6c:	b2ca      	uxtb	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3301      	adds	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	dbf0      	blt.n	8002d60 <_read+0x12>
  }

  return len;
 8002d7e:	687b      	ldr	r3, [r7, #4]
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b006      	add	sp, #24
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e009      	b.n	8002dae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	60ba      	str	r2, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	0018      	movs	r0, r3
 8002da4:	e000      	b.n	8002da8 <_write+0x20>
 8002da6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3301      	adds	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	dbf1      	blt.n	8002d9a <_write+0x12>
  }
  return len;
 8002db6:	687b      	ldr	r3, [r7, #4]
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b006      	add	sp, #24
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_close>:

int _close(int file)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	425b      	negs	r3, r3
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2280      	movs	r2, #128	@ 0x80
 8002de2:	0192      	lsls	r2, r2, #6
 8002de4:	605a      	str	r2, [r3, #4]
  return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_isatty>:

int _isatty(int file)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002df8:	2301      	movs	r3, #1
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b004      	add	sp, #16
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e20:	4a14      	ldr	r2, [pc, #80]	@ (8002e74 <_sbrk+0x5c>)
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <_sbrk+0x60>)
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e34:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <_sbrk+0x64>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <_sbrk+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	18d3      	adds	r3, r2, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e48:	f00b f858 	bl	800defc <__errno>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	220c      	movs	r2, #12
 8002e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	425b      	negs	r3, r3
 8002e56:	e009      	b.n	8002e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e58:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	18d2      	adds	r2, r2, r3
 8002e66:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <_sbrk+0x64>)
 8002e68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b006      	add	sp, #24
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20004000 	.word	0x20004000
 8002e78:	00000400 	.word	0x00000400
 8002e7c:	200008b4 	.word	0x200008b4
 8002e80:	20001fd8 	.word	0x20001fd8

08002e84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e90:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e94:	f7ff fff6 	bl	8002e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e98:	480c      	ldr	r0, [pc, #48]	@ (8002ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8002e9a:	490d      	ldr	r1, [pc, #52]	@ (8002ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed4 <LoopForever+0xe>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea0:	e002      	b.n	8002ea8 <LoopCopyDataInit>

08002ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea6:	3304      	adds	r3, #4

08002ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eac:	d3f9      	bcc.n	8002ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8002edc <LoopForever+0x16>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb4:	e001      	b.n	8002eba <LoopFillZerobss>

08002eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb8:	3204      	adds	r2, #4

08002eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ebc:	d3fb      	bcc.n	8002eb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ebe:	f00b f823 	bl	800df08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ec2:	f7ff f9cb 	bl	800225c <main>

08002ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ec6:	e7fe      	b.n	8002ec6 <LoopForever>
  ldr   r0, =_estack
 8002ec8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed0:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8002ed4:	08010320 	.word	0x08010320
  ldr r2, =_sbss
 8002ed8:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8002edc:	20001fd8 	.word	0x20001fd8

08002ee0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC1_COMP_IRQHandler>
	...

08002ee4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee8:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <HAL_Init+0x24>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_Init+0x24>)
 8002eee:	2110      	movs	r1, #16
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef4:	2003      	movs	r0, #3
 8002ef6:	f000 f809 	bl	8002f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002efa:	f7ff fc8f 	bl	800281c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	40022000 	.word	0x40022000

08002f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f14:	4b14      	ldr	r3, [pc, #80]	@ (8002f68 <HAL_InitTick+0x5c>)
 8002f16:	681c      	ldr	r4, [r3, #0]
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <HAL_InitTick+0x60>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	23fa      	movs	r3, #250	@ 0xfa
 8002f20:	0098      	lsls	r0, r3, #2
 8002f22:	f7fd f90d 	bl	8000140 <__udivsi3>
 8002f26:	0003      	movs	r3, r0
 8002f28:	0019      	movs	r1, r3
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	f7fd f908 	bl	8000140 <__udivsi3>
 8002f30:	0003      	movs	r3, r0
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fb8b 	bl	800364e <HAL_SYSTICK_Config>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e00f      	b.n	8002f60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d80b      	bhi.n	8002f5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	425b      	negs	r3, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 fb48 	bl	80035e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_InitTick+0x64>)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b003      	add	sp, #12
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_IncTick+0x1c>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <HAL_IncTick+0x20>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	18d2      	adds	r2, r2, r3
 8002f84:	4b03      	ldr	r3, [pc, #12]	@ (8002f94 <HAL_IncTick+0x20>)
 8002f86:	601a      	str	r2, [r3, #0]
}
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	20000008 	.word	0x20000008
 8002f94:	200008b8 	.word	0x200008b8

08002f98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	@ (8002fa8 <HAL_GetTick+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	200008b8 	.word	0x200008b8

08002fac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e125      	b.n	8003216 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2234      	movs	r2, #52	@ 0x34
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff fc46 	bl	8002874 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	2210      	movs	r2, #16
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d000      	beq.n	8002ff4 <HAL_ADC_Init+0x48>
 8002ff2:	e103      	b.n	80031fc <HAL_ADC_Init+0x250>
 8002ff4:	230f      	movs	r3, #15
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d000      	beq.n	8003000 <HAL_ADC_Init+0x54>
 8002ffe:	e0fd      	b.n	80031fc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2204      	movs	r2, #4
 8003008:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800300a:	d000      	beq.n	800300e <HAL_ADC_Init+0x62>
 800300c:	e0f6      	b.n	80031fc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	4a83      	ldr	r2, [pc, #524]	@ (8003220 <HAL_ADC_Init+0x274>)
 8003014:	4013      	ands	r3, r2
 8003016:	2202      	movs	r2, #2
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2203      	movs	r2, #3
 8003026:	4013      	ands	r3, r2
 8003028:	2b01      	cmp	r3, #1
 800302a:	d112      	bne.n	8003052 <HAL_ADC_Init+0xa6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2201      	movs	r2, #1
 8003034:	4013      	ands	r3, r2
 8003036:	2b01      	cmp	r3, #1
 8003038:	d009      	beq.n	800304e <HAL_ADC_Init+0xa2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	2380      	movs	r3, #128	@ 0x80
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	401a      	ands	r2, r3
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	429a      	cmp	r2, r3
 800304c:	d101      	bne.n	8003052 <HAL_ADC_Init+0xa6>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_ADC_Init+0xa8>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2218      	movs	r2, #24
 8003060:	4393      	bics	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	0899      	lsrs	r1, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4964      	ldr	r1, [pc, #400]	@ (8003224 <HAL_ADC_Init+0x278>)
 8003092:	400a      	ands	r2, r1
 8003094:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7e1b      	ldrb	r3, [r3, #24]
 800309a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7e5b      	ldrb	r3, [r3, #25]
 80030a0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7e9b      	ldrb	r3, [r3, #26]
 80030a8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d002      	beq.n	80030ba <HAL_ADC_Init+0x10e>
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	e000      	b.n	80030bc <HAL_ADC_Init+0x110>
 80030ba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030c2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_Init+0x124>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_Init+0x126>
 80030d0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80030d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2124      	movs	r1, #36	@ 0x24
 80030d8:	5c5b      	ldrb	r3, [r3, r1]
 80030da:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030dc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7edb      	ldrb	r3, [r3, #27]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d115      	bne.n	8003118 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7e9b      	ldrb	r3, [r3, #26]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2280      	movs	r2, #128	@ 0x80
 80030f8:	0252      	lsls	r2, r2, #9
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	e00b      	b.n	8003118 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	2220      	movs	r2, #32
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003110:	2201      	movs	r2, #1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	23c2      	movs	r3, #194	@ 0xc2
 800311e:	33ff      	adds	r3, #255	@ 0xff
 8003120:	429a      	cmp	r2, r3
 8003122:	d007      	beq.n	8003134 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800312c:	4313      	orrs	r3, r2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4313      	orrs	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68d9      	ldr	r1, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	055b      	lsls	r3, r3, #21
 800314c:	429a      	cmp	r2, r3
 800314e:	d01b      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d017      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	2b02      	cmp	r3, #2
 800315e:	d013      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	2b03      	cmp	r3, #3
 8003166:	d00f      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	2b04      	cmp	r3, #4
 800316e:	d00b      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	2b05      	cmp	r3, #5
 8003176:	d007      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	2b06      	cmp	r3, #6
 800317e:	d003      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	2b07      	cmp	r3, #7
 8003186:	d112      	bne.n	80031ae <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2107      	movs	r1, #7
 8003194:	438a      	bics	r2, r1
 8003196:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6959      	ldr	r1, [r3, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	2207      	movs	r2, #7
 80031a4:	401a      	ands	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003228 <HAL_ADC_Init+0x27c>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d10b      	bne.n	80031d6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	2203      	movs	r2, #3
 80031ca:	4393      	bics	r3, r2
 80031cc:	2201      	movs	r2, #1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031d4:	e01c      	b.n	8003210 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031da:	2212      	movs	r2, #18
 80031dc:	4393      	bics	r3, r2
 80031de:	2210      	movs	r2, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ea:	2201      	movs	r2, #1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80031f2:	230f      	movs	r3, #15
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031fa:	e009      	b.n	8003210 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	2210      	movs	r2, #16
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003208:	230f      	movs	r3, #15
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003210:	230f      	movs	r3, #15
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781b      	ldrb	r3, [r3, #0]
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	fffffefd 	.word	0xfffffefd
 8003224:	fffe0219 	.word	0xfffe0219
 8003228:	833fffe7 	.word	0x833fffe7

0800322c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003236:	230f      	movs	r3, #15
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003246:	2380      	movs	r3, #128	@ 0x80
 8003248:	055b      	lsls	r3, r3, #21
 800324a:	429a      	cmp	r2, r3
 800324c:	d011      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x46>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d00d      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x46>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	2b02      	cmp	r3, #2
 800325c:	d009      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x46>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	2b03      	cmp	r3, #3
 8003264:	d005      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x46>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	2b04      	cmp	r3, #4
 800326c:	d001      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x46>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2234      	movs	r2, #52	@ 0x34
 8003276:	5c9b      	ldrb	r3, [r3, r2]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x54>
 800327c:	2302      	movs	r3, #2
 800327e:	e0d0      	b.n	8003422 <HAL_ADC_ConfigChannel+0x1f6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2234      	movs	r2, #52	@ 0x34
 8003284:	2101      	movs	r1, #1
 8003286:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2204      	movs	r2, #4
 8003290:	4013      	ands	r3, r2
 8003292:	d000      	beq.n	8003296 <HAL_ADC_ConfigChannel+0x6a>
 8003294:	e0b4      	b.n	8003400 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a64      	ldr	r2, [pc, #400]	@ (800342c <HAL_ADC_ConfigChannel+0x200>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d100      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x76>
 80032a0:	e082      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	409a      	lsls	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	055b      	lsls	r3, r3, #21
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d037      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d033      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d02f      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d02b      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d027      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d023      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d01f      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	2b07      	cmp	r3, #7
 80032fa:	d01b      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2107      	movs	r1, #7
 8003308:	400b      	ands	r3, r1
 800330a:	429a      	cmp	r2, r3
 800330c:	d012      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2107      	movs	r1, #7
 800331a:	438a      	bics	r2, r1
 800331c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6959      	ldr	r1, [r3, #20]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2207      	movs	r2, #7
 800332a:	401a      	ands	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b10      	cmp	r3, #16
 800333a:	d007      	beq.n	800334c <HAL_ADC_ConfigChannel+0x120>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b11      	cmp	r3, #17
 8003342:	d003      	beq.n	800334c <HAL_ADC_ConfigChannel+0x120>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b12      	cmp	r3, #18
 800334a:	d163      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800334c:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <HAL_ADC_ConfigChannel+0x204>)
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b10      	cmp	r3, #16
 8003356:	d009      	beq.n	800336c <HAL_ADC_ConfigChannel+0x140>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b11      	cmp	r3, #17
 800335e:	d102      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x13a>
 8003360:	2380      	movs	r3, #128	@ 0x80
 8003362:	03db      	lsls	r3, r3, #15
 8003364:	e004      	b.n	8003370 <HAL_ADC_ConfigChannel+0x144>
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	045b      	lsls	r3, r3, #17
 800336a:	e001      	b.n	8003370 <HAL_ADC_ConfigChannel+0x144>
 800336c:	2380      	movs	r3, #128	@ 0x80
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	4a2f      	ldr	r2, [pc, #188]	@ (8003430 <HAL_ADC_ConfigChannel+0x204>)
 8003372:	430b      	orrs	r3, r1
 8003374:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b10      	cmp	r3, #16
 800337c:	d14a      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800337e:	4b2d      	ldr	r3, [pc, #180]	@ (8003434 <HAL_ADC_ConfigChannel+0x208>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	492d      	ldr	r1, [pc, #180]	@ (8003438 <HAL_ADC_ConfigChannel+0x20c>)
 8003384:	0018      	movs	r0, r3
 8003386:	f7fc fedb 	bl	8000140 <__udivsi3>
 800338a:	0003      	movs	r3, r0
 800338c:	001a      	movs	r2, r3
 800338e:	0013      	movs	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	189b      	adds	r3, r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003398:	e002      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f9      	bne.n	800339a <HAL_ADC_ConfigChannel+0x16e>
 80033a6:	e035      	b.n	8003414 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	4099      	lsls	r1, r3
 80033b6:	000b      	movs	r3, r1
 80033b8:	43d9      	mvns	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	400a      	ands	r2, r1
 80033c0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d007      	beq.n	80033da <HAL_ADC_ConfigChannel+0x1ae>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b11      	cmp	r3, #17
 80033d0:	d003      	beq.n	80033da <HAL_ADC_ConfigChannel+0x1ae>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b12      	cmp	r3, #18
 80033d8:	d11c      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_ADC_ConfigChannel+0x204>)
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d007      	beq.n	80033f6 <HAL_ADC_ConfigChannel+0x1ca>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b11      	cmp	r3, #17
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x1c6>
 80033ee:	4b13      	ldr	r3, [pc, #76]	@ (800343c <HAL_ADC_ConfigChannel+0x210>)
 80033f0:	e002      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x1cc>
 80033f2:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_ADC_ConfigChannel+0x214>)
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x1cc>
 80033f6:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_ADC_ConfigChannel+0x218>)
 80033f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003430 <HAL_ADC_ConfigChannel+0x204>)
 80033fa:	400b      	ands	r3, r1
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e009      	b.n	8003414 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	2220      	movs	r2, #32
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800340c:	230f      	movs	r3, #15
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2234      	movs	r2, #52	@ 0x34
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800341c:	230f      	movs	r3, #15
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	781b      	ldrb	r3, [r3, #0]
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	00001001 	.word	0x00001001
 8003430:	40012708 	.word	0x40012708
 8003434:	20000000 	.word	0x20000000
 8003438:	000f4240 	.word	0x000f4240
 800343c:	ffbfffff 	.word	0xffbfffff
 8003440:	feffffff 	.word	0xfeffffff
 8003444:	ff7fffff 	.word	0xff7fffff

08003448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	0002      	movs	r2, r0
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003454:	1dfb      	adds	r3, r7, #7
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b7f      	cmp	r3, #127	@ 0x7f
 800345a:	d809      	bhi.n	8003470 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	001a      	movs	r2, r3
 8003462:	231f      	movs	r3, #31
 8003464:	401a      	ands	r2, r3
 8003466:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <__NVIC_EnableIRQ+0x30>)
 8003468:	2101      	movs	r1, #1
 800346a:	4091      	lsls	r1, r2
 800346c:	000a      	movs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
  }
}
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	0002      	movs	r2, r0
 8003484:	1dfb      	adds	r3, r7, #7
 8003486:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003488:	1dfb      	adds	r3, r7, #7
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b7f      	cmp	r3, #127	@ 0x7f
 800348e:	d810      	bhi.n	80034b2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	001a      	movs	r2, r3
 8003496:	231f      	movs	r3, #31
 8003498:	4013      	ands	r3, r2
 800349a:	4908      	ldr	r1, [pc, #32]	@ (80034bc <__NVIC_DisableIRQ+0x40>)
 800349c:	2201      	movs	r2, #1
 800349e:	409a      	lsls	r2, r3
 80034a0:	0013      	movs	r3, r2
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034a6:	f3bf 8f4f 	dsb	sy
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80034ac:	f3bf 8f6f 	isb	sy
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b002      	add	sp, #8
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	0002      	movs	r2, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	1dfb      	adds	r3, r7, #7
 80034cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034ce:	1dfb      	adds	r3, r7, #7
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80034d4:	d828      	bhi.n	8003528 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003594 <__NVIC_SetPriority+0xd4>)
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	33c0      	adds	r3, #192	@ 0xc0
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	589b      	ldr	r3, [r3, r2]
 80034e6:	1dfa      	adds	r2, r7, #7
 80034e8:	7812      	ldrb	r2, [r2, #0]
 80034ea:	0011      	movs	r1, r2
 80034ec:	2203      	movs	r2, #3
 80034ee:	400a      	ands	r2, r1
 80034f0:	00d2      	lsls	r2, r2, #3
 80034f2:	21ff      	movs	r1, #255	@ 0xff
 80034f4:	4091      	lsls	r1, r2
 80034f6:	000a      	movs	r2, r1
 80034f8:	43d2      	mvns	r2, r2
 80034fa:	401a      	ands	r2, r3
 80034fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	22ff      	movs	r2, #255	@ 0xff
 8003504:	401a      	ands	r2, r3
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	0018      	movs	r0, r3
 800350c:	2303      	movs	r3, #3
 800350e:	4003      	ands	r3, r0
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003514:	481f      	ldr	r0, [pc, #124]	@ (8003594 <__NVIC_SetPriority+0xd4>)
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b25b      	sxtb	r3, r3
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	430a      	orrs	r2, r1
 8003520:	33c0      	adds	r3, #192	@ 0xc0
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003526:	e031      	b.n	800358c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003528:	4a1b      	ldr	r2, [pc, #108]	@ (8003598 <__NVIC_SetPriority+0xd8>)
 800352a:	1dfb      	adds	r3, r7, #7
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	0019      	movs	r1, r3
 8003530:	230f      	movs	r3, #15
 8003532:	400b      	ands	r3, r1
 8003534:	3b08      	subs	r3, #8
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3306      	adds	r3, #6
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	18d3      	adds	r3, r2, r3
 800353e:	3304      	adds	r3, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1dfa      	adds	r2, r7, #7
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	0011      	movs	r1, r2
 8003548:	2203      	movs	r2, #3
 800354a:	400a      	ands	r2, r1
 800354c:	00d2      	lsls	r2, r2, #3
 800354e:	21ff      	movs	r1, #255	@ 0xff
 8003550:	4091      	lsls	r1, r2
 8003552:	000a      	movs	r2, r1
 8003554:	43d2      	mvns	r2, r2
 8003556:	401a      	ands	r2, r3
 8003558:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	019b      	lsls	r3, r3, #6
 800355e:	22ff      	movs	r2, #255	@ 0xff
 8003560:	401a      	ands	r2, r3
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	0018      	movs	r0, r3
 8003568:	2303      	movs	r3, #3
 800356a:	4003      	ands	r3, r0
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003570:	4809      	ldr	r0, [pc, #36]	@ (8003598 <__NVIC_SetPriority+0xd8>)
 8003572:	1dfb      	adds	r3, r7, #7
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	001c      	movs	r4, r3
 8003578:	230f      	movs	r3, #15
 800357a:	4023      	ands	r3, r4
 800357c:	3b08      	subs	r3, #8
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	430a      	orrs	r2, r1
 8003582:	3306      	adds	r3, #6
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	18c3      	adds	r3, r0, r3
 8003588:	3304      	adds	r3, #4
 800358a:	601a      	str	r2, [r3, #0]
}
 800358c:	46c0      	nop			@ (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b003      	add	sp, #12
 8003592:	bd90      	pop	{r4, r7, pc}
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	2380      	movs	r3, #128	@ 0x80
 80035aa:	045b      	lsls	r3, r3, #17
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d301      	bcc.n	80035b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035b0:	2301      	movs	r3, #1
 80035b2:	e010      	b.n	80035d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <SysTick_Config+0x44>)
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	3a01      	subs	r2, #1
 80035ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035bc:	2301      	movs	r3, #1
 80035be:	425b      	negs	r3, r3
 80035c0:	2103      	movs	r1, #3
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7ff ff7c 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c8:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <SysTick_Config+0x44>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ce:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <SysTick_Config+0x44>)
 80035d0:	2207      	movs	r2, #7
 80035d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	e000e010 	.word	0xe000e010

080035e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	210f      	movs	r1, #15
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	1c02      	adds	r2, r0, #0
 80035f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	0011      	movs	r1, r2
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	0002      	movs	r2, r0
 8003616:	1dfb      	adds	r3, r7, #7
 8003618:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b25b      	sxtb	r3, r3
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff ff11 	bl	8003448 <__NVIC_EnableIRQ>
}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b002      	add	sp, #8
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	0002      	movs	r2, r0
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800363a:	1dfb      	adds	r3, r7, #7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b25b      	sxtb	r3, r3
 8003640:	0018      	movs	r0, r3
 8003642:	f7ff ff1b 	bl	800347c <__NVIC_DisableIRQ>
}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b002      	add	sp, #8
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff ff9f 	bl	800359c <SysTick_Config>
 800365e:	0003      	movs	r3, r0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e036      	b.n	80036ec <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2221      	movs	r2, #33	@ 0x21
 8003682:	2102      	movs	r1, #2
 8003684:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_DMA_Init+0x8c>)
 8003692:	4013      	ands	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800369e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 fa0c 	bl	8003aec <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2221      	movs	r2, #33	@ 0x21
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	2100      	movs	r1, #0
 80036e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b004      	add	sp, #16
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	ffffc00f 	.word	0xffffc00f

080036f8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e03b      	b.n	8003782 <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	438a      	bics	r2, r1
 8003718:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f9d5 	bl	8003aec <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	2101      	movs	r1, #1
 800374c:	4091      	lsls	r1, r2
 800374e:	000a      	movs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2221      	movs	r2, #33	@ 0x21
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2317      	movs	r3, #23
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	5c9b      	ldrb	r3, [r3, r2]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_DMA_Start_IT+0x24>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e04f      	b.n	800384e <HAL_DMA_Start_IT+0xc4>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2221      	movs	r2, #33	@ 0x21
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d13a      	bne.n	8003838 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2221      	movs	r2, #33	@ 0x21
 80037c6:	2102      	movs	r1, #2
 80037c8:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2101      	movs	r1, #1
 80037dc:	438a      	bics	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f954 	bl	8003a94 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	210e      	movs	r1, #14
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	e00f      	b.n	8003826 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	210a      	movs	r1, #10
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2104      	movs	r1, #4
 8003822:	438a      	bics	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2101      	movs	r1, #1
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e007      	b.n	8003848 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003840:	2317      	movs	r3, #23
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2202      	movs	r2, #2
 8003846:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003848:	2317      	movs	r3, #23
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b006      	add	sp, #24
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2221      	movs	r2, #33	@ 0x21
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d008      	beq.n	800387c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2204      	movs	r2, #4
 800386e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	2100      	movs	r1, #0
 8003876:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e020      	b.n	80038be <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	210e      	movs	r1, #14
 8003888:	438a      	bics	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2101      	movs	r1, #1
 8003898:	438a      	bics	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	2101      	movs	r1, #1
 80038a6:	4091      	lsls	r1, r2
 80038a8:	000a      	movs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2221      	movs	r2, #33	@ 0x21
 80038b0:	2101      	movs	r1, #1
 80038b2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	210f      	movs	r1, #15
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2221      	movs	r2, #33	@ 0x21
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d006      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2204      	movs	r2, #4
 80038e6:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e028      	b.n	8003942 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	210e      	movs	r1, #14
 80038fc:	438a      	bics	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2101      	movs	r1, #1
 800390c:	438a      	bics	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	2101      	movs	r1, #1
 800391a:	4091      	lsls	r1, r2
 800391c:	000a      	movs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2221      	movs	r2, #33	@ 0x21
 8003924:	2101      	movs	r1, #1
 8003926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003934:	2b00      	cmp	r3, #0
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	0010      	movs	r0, r2
 8003940:	4798      	blx	r3
    }
  }
  return status;
 8003942:	230f      	movs	r3, #15
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	781b      	ldrb	r3, [r3, #0]
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b004      	add	sp, #16
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	2204      	movs	r2, #4
 800396e:	409a      	lsls	r2, r3
 8003970:	0013      	movs	r3, r2
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	d024      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x72>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2204      	movs	r2, #4
 800397c:	4013      	ands	r3, r2
 800397e:	d020      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2220      	movs	r2, #32
 8003988:	4013      	ands	r3, r2
 800398a:	d107      	bne.n	800399c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2104      	movs	r1, #4
 8003998:	438a      	bics	r2, r1
 800399a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	2104      	movs	r1, #4
 80039a6:	4091      	lsls	r1, r2
 80039a8:	000a      	movs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d100      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x66>
 80039b4:	e06a      	b.n	8003a8c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	0010      	movs	r0, r2
 80039be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039c0:	e064      	b.n	8003a8c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2202      	movs	r2, #2
 80039c8:	409a      	lsls	r2, r3
 80039ca:	0013      	movs	r3, r2
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	d02b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xda>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2202      	movs	r2, #2
 80039d6:	4013      	ands	r3, r2
 80039d8:	d027      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2220      	movs	r2, #32
 80039e2:	4013      	ands	r3, r2
 80039e4:	d10b      	bne.n	80039fe <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	210a      	movs	r1, #10
 80039f2:	438a      	bics	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2221      	movs	r2, #33	@ 0x21
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a06:	2102      	movs	r1, #2
 8003a08:	4091      	lsls	r1, r2
 8003a0a:	000a      	movs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	2100      	movs	r1, #0
 8003a14:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d036      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	0010      	movs	r0, r2
 8003a26:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a28:	e030      	b.n	8003a8c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	2208      	movs	r2, #8
 8003a30:	409a      	lsls	r2, r3
 8003a32:	0013      	movs	r3, r2
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	d028      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x13c>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d024      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	210e      	movs	r1, #14
 8003a4e:	438a      	bics	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4091      	lsls	r1, r2
 8003a5e:	000a      	movs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2221      	movs	r2, #33	@ 0x21
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	0010      	movs	r0, r2
 8003a88:	4798      	blx	r3
    }
  }
}
 8003a8a:	e7ff      	b.n	8003a8c <HAL_DMA_IRQHandler+0x13c>
 8003a8c:	46c0      	nop			@ (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4091      	lsls	r1, r2
 8003aae:	000a      	movs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d108      	bne.n	8003ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ad2:	e007      	b.n	8003ae4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b004      	add	sp, #16
 8003aea:	bd80      	pop	{r7, pc}

08003aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <DMA_CalcBaseAndBitshift+0x30>)
 8003afa:	4694      	mov	ip, r2
 8003afc:	4463      	add	r3, ip
 8003afe:	2114      	movs	r1, #20
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7fc fb1d 	bl	8000140 <__udivsi3>
 8003b06:	0003      	movs	r3, r0
 8003b08:	009a      	lsls	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a03      	ldr	r2, [pc, #12]	@ (8003b20 <DMA_CalcBaseAndBitshift+0x34>)
 8003b12:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003b14:	46c0      	nop			@ (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	bffdfff8 	.word	0xbffdfff8
 8003b20:	40020000 	.word	0x40020000

08003b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b32:	e155      	b.n	8003de0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4091      	lsls	r1, r2
 8003b3e:	000a      	movs	r2, r1
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d100      	bne.n	8003b4c <HAL_GPIO_Init+0x28>
 8003b4a:	e146      	b.n	8003dda <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2203      	movs	r2, #3
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d005      	beq.n	8003b64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d130      	bne.n	8003bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	409a      	lsls	r2, r3
 8003b72:	0013      	movs	r3, r2
 8003b74:	43da      	mvns	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	0013      	movs	r3, r2
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	0013      	movs	r3, r2
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	0013      	movs	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d017      	beq.n	8003c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	2203      	movs	r2, #3
 8003bde:	409a      	lsls	r2, r3
 8003be0:	0013      	movs	r3, r2
 8003be2:	43da      	mvns	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	0013      	movs	r3, r2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2203      	movs	r2, #3
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d123      	bne.n	8003c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	08da      	lsrs	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3208      	adds	r2, #8
 8003c16:	0092      	lsls	r2, r2, #2
 8003c18:	58d3      	ldr	r3, [r2, r3]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2207      	movs	r2, #7
 8003c20:	4013      	ands	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	220f      	movs	r2, #15
 8003c26:	409a      	lsls	r2, r3
 8003c28:	0013      	movs	r3, r2
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2107      	movs	r1, #7
 8003c3a:	400b      	ands	r3, r1
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	0092      	lsls	r2, r2, #2
 8003c52:	6939      	ldr	r1, [r7, #16]
 8003c54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	409a      	lsls	r2, r3
 8003c64:	0013      	movs	r3, r2
 8003c66:	43da      	mvns	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2203      	movs	r2, #3
 8003c74:	401a      	ands	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	23c0      	movs	r3, #192	@ 0xc0
 8003c90:	029b      	lsls	r3, r3, #10
 8003c92:	4013      	ands	r3, r2
 8003c94:	d100      	bne.n	8003c98 <HAL_GPIO_Init+0x174>
 8003c96:	e0a0      	b.n	8003dda <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c98:	4b57      	ldr	r3, [pc, #348]	@ (8003df8 <HAL_GPIO_Init+0x2d4>)
 8003c9a:	699a      	ldr	r2, [r3, #24]
 8003c9c:	4b56      	ldr	r3, [pc, #344]	@ (8003df8 <HAL_GPIO_Init+0x2d4>)
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	619a      	str	r2, [r3, #24]
 8003ca4:	4b54      	ldr	r3, [pc, #336]	@ (8003df8 <HAL_GPIO_Init+0x2d4>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cb0:	4a52      	ldr	r2, [pc, #328]	@ (8003dfc <HAL_GPIO_Init+0x2d8>)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	589b      	ldr	r3, [r3, r2]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	220f      	movs	r2, #15
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	0013      	movs	r3, r2
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	2390      	movs	r3, #144	@ 0x90
 8003cd8:	05db      	lsls	r3, r3, #23
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d019      	beq.n	8003d12 <HAL_GPIO_Init+0x1ee>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a47      	ldr	r2, [pc, #284]	@ (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_GPIO_Init+0x1ea>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a46      	ldr	r2, [pc, #280]	@ (8003e04 <HAL_GPIO_Init+0x2e0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00d      	beq.n	8003d0a <HAL_GPIO_Init+0x1e6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a45      	ldr	r2, [pc, #276]	@ (8003e08 <HAL_GPIO_Init+0x2e4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d007      	beq.n	8003d06 <HAL_GPIO_Init+0x1e2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a44      	ldr	r2, [pc, #272]	@ (8003e0c <HAL_GPIO_Init+0x2e8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <HAL_GPIO_Init+0x1de>
 8003cfe:	2304      	movs	r3, #4
 8003d00:	e008      	b.n	8003d14 <HAL_GPIO_Init+0x1f0>
 8003d02:	2305      	movs	r3, #5
 8003d04:	e006      	b.n	8003d14 <HAL_GPIO_Init+0x1f0>
 8003d06:	2303      	movs	r3, #3
 8003d08:	e004      	b.n	8003d14 <HAL_GPIO_Init+0x1f0>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e002      	b.n	8003d14 <HAL_GPIO_Init+0x1f0>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_GPIO_Init+0x1f0>
 8003d12:	2300      	movs	r3, #0
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	2103      	movs	r1, #3
 8003d18:	400a      	ands	r2, r1
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	4093      	lsls	r3, r2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d24:	4935      	ldr	r1, [pc, #212]	@ (8003dfc <HAL_GPIO_Init+0x2d8>)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d32:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	035b      	lsls	r3, r3, #13
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d56:	4b2e      	ldr	r3, [pc, #184]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	039b      	lsls	r3, r3, #14
 8003d74:	4013      	ands	r3, r2
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d80:	4b23      	ldr	r3, [pc, #140]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003d86:	4b22      	ldr	r3, [pc, #136]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	2380      	movs	r3, #128	@ 0x80
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003daa:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003db0:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	43da      	mvns	r2, r3
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	2380      	movs	r3, #128	@ 0x80
 8003dc6:	025b      	lsls	r3, r3, #9
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	40da      	lsrs	r2, r3
 8003de8:	1e13      	subs	r3, r2, #0
 8003dea:	d000      	beq.n	8003dee <HAL_GPIO_Init+0x2ca>
 8003dec:	e6a2      	b.n	8003b34 <HAL_GPIO_Init+0x10>
  } 
}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	46c0      	nop			@ (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b006      	add	sp, #24
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	48000400 	.word	0x48000400
 8003e04:	48000800 	.word	0x48000800
 8003e08:	48000c00 	.word	0x48000c00
 8003e0c:	48001000 	.word	0x48001000
 8003e10:	40010400 	.word	0x40010400

08003e14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e22:	e0b7      	b.n	8003f94 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e24:	2201      	movs	r2, #1
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d100      	bne.n	8003e38 <HAL_GPIO_DeInit+0x24>
 8003e36:	e0aa      	b.n	8003f8e <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003e38:	4a5c      	ldr	r2, [pc, #368]	@ (8003fac <HAL_GPIO_DeInit+0x198>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	589b      	ldr	r3, [r3, r2]
 8003e44:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	409a      	lsls	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	2390      	movs	r3, #144	@ 0x90
 8003e5c:	05db      	lsls	r3, r3, #23
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_DeInit+0x82>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a52      	ldr	r2, [pc, #328]	@ (8003fb0 <HAL_GPIO_DeInit+0x19c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_DeInit+0x7e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a51      	ldr	r2, [pc, #324]	@ (8003fb4 <HAL_GPIO_DeInit+0x1a0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_DeInit+0x7a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a50      	ldr	r2, [pc, #320]	@ (8003fb8 <HAL_GPIO_DeInit+0x1a4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_DeInit+0x76>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003fbc <HAL_GPIO_DeInit+0x1a8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_DeInit+0x72>
 8003e82:	2304      	movs	r3, #4
 8003e84:	e008      	b.n	8003e98 <HAL_GPIO_DeInit+0x84>
 8003e86:	2305      	movs	r3, #5
 8003e88:	e006      	b.n	8003e98 <HAL_GPIO_DeInit+0x84>
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e004      	b.n	8003e98 <HAL_GPIO_DeInit+0x84>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e002      	b.n	8003e98 <HAL_GPIO_DeInit+0x84>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_GPIO_DeInit+0x84>
 8003e96:	2300      	movs	r3, #0
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	4093      	lsls	r3, r2
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d132      	bne.n	8003f0e <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ea8:	4b45      	ldr	r3, [pc, #276]	@ (8003fc0 <HAL_GPIO_DeInit+0x1ac>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	43d9      	mvns	r1, r3
 8003eb0:	4b43      	ldr	r3, [pc, #268]	@ (8003fc0 <HAL_GPIO_DeInit+0x1ac>)
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003eb6:	4b42      	ldr	r3, [pc, #264]	@ (8003fc0 <HAL_GPIO_DeInit+0x1ac>)
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	43d9      	mvns	r1, r3
 8003ebe:	4b40      	ldr	r3, [pc, #256]	@ (8003fc0 <HAL_GPIO_DeInit+0x1ac>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc0 <HAL_GPIO_DeInit+0x1ac>)
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc0 <HAL_GPIO_DeInit+0x1ac>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc0 <HAL_GPIO_DeInit+0x1ac>)
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	43d9      	mvns	r1, r3
 8003eda:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <HAL_GPIO_DeInit+0x1ac>)
 8003edc:	400a      	ands	r2, r1
 8003ede:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	409a      	lsls	r2, r3
 8003eec:	0013      	movs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8003fac <HAL_GPIO_DeInit+0x198>)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	589a      	ldr	r2, [r3, r2]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	43d9      	mvns	r1, r3
 8003f00:	482a      	ldr	r0, [pc, #168]	@ (8003fac <HAL_GPIO_DeInit+0x198>)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	400a      	ands	r2, r1
 8003f08:	3302      	adds	r3, #2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	0052      	lsls	r2, r2, #1
 8003f16:	2103      	movs	r1, #3
 8003f18:	4091      	lsls	r1, r2
 8003f1a:	000a      	movs	r2, r1
 8003f1c:	43d2      	mvns	r2, r2
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	08da      	lsrs	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3208      	adds	r2, #8
 8003f2c:	0092      	lsls	r2, r2, #2
 8003f2e:	58d3      	ldr	r3, [r2, r3]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	2107      	movs	r1, #7
 8003f34:	400a      	ands	r2, r1
 8003f36:	0092      	lsls	r2, r2, #2
 8003f38:	210f      	movs	r1, #15
 8003f3a:	4091      	lsls	r1, r2
 8003f3c:	000a      	movs	r2, r1
 8003f3e:	43d1      	mvns	r1, r2
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	08d2      	lsrs	r2, r2, #3
 8003f44:	4019      	ands	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3208      	adds	r2, #8
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	0052      	lsls	r2, r2, #1
 8003f56:	2103      	movs	r1, #3
 8003f58:	4091      	lsls	r1, r2
 8003f5a:	000a      	movs	r2, r1
 8003f5c:	43d2      	mvns	r2, r2
 8003f5e:	401a      	ands	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4091      	lsls	r1, r2
 8003f6e:	000a      	movs	r2, r1
 8003f70:	43d2      	mvns	r2, r2
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	0052      	lsls	r2, r2, #1
 8003f80:	2103      	movs	r1, #3
 8003f82:	4091      	lsls	r1, r2
 8003f84:	000a      	movs	r2, r1
 8003f86:	43d2      	mvns	r2, r2
 8003f88:	401a      	ands	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]

    }

    position++;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	40da      	lsrs	r2, r3
 8003f9a:	1e13      	subs	r3, r2, #0
 8003f9c:	d000      	beq.n	8003fa0 <HAL_GPIO_DeInit+0x18c>
 8003f9e:	e741      	b.n	8003e24 <HAL_GPIO_DeInit+0x10>
  }
}
 8003fa0:	46c0      	nop			@ (mov r8, r8)
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b006      	add	sp, #24
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	48000400 	.word	0x48000400
 8003fb4:	48000800 	.word	0x48000800
 8003fb8:	48000c00 	.word	0x48000c00
 8003fbc:	48001000 	.word	0x48001000
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	000a      	movs	r2, r1
 8003fce:	1cbb      	adds	r3, r7, #2
 8003fd0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	1cba      	adds	r2, r7, #2
 8003fd8:	8812      	ldrh	r2, [r2, #0]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003fde:	230f      	movs	r3, #15
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e003      	b.n	8003ff0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe8:	230f      	movs	r3, #15
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ff0:	230f      	movs	r3, #15
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	781b      	ldrb	r3, [r3, #0]
  }
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b004      	add	sp, #16
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	0008      	movs	r0, r1
 8004008:	0011      	movs	r1, r2
 800400a:	1cbb      	adds	r3, r7, #2
 800400c:	1c02      	adds	r2, r0, #0
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	1c7b      	adds	r3, r7, #1
 8004012:	1c0a      	adds	r2, r1, #0
 8004014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004016:	1c7b      	adds	r3, r7, #1
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800401e:	1cbb      	adds	r3, r7, #2
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004026:	e003      	b.n	8004030 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004028:	1cbb      	adds	r3, r7, #2
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004030:	46c0      	nop			@ (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	0002      	movs	r2, r0
 8004040:	1dbb      	adds	r3, r7, #6
 8004042:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004044:	4b09      	ldr	r3, [pc, #36]	@ (800406c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	1dba      	adds	r2, r7, #6
 800404a:	8812      	ldrh	r2, [r2, #0]
 800404c:	4013      	ands	r3, r2
 800404e:	d008      	beq.n	8004062 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004050:	4b06      	ldr	r3, [pc, #24]	@ (800406c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004052:	1dba      	adds	r2, r7, #6
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004058:	1dbb      	adds	r3, r7, #6
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	0018      	movs	r0, r3
 800405e:	f009 f953 	bl	800d308 <HAL_GPIO_EXTI_Callback>
  }
}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	b002      	add	sp, #8
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	40010400 	.word	0x40010400

08004070 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0e4      	b.n	800424c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a73      	ldr	r2, [pc, #460]	@ (8004254 <HAL_PCD_Init+0x1e4>)
 8004086:	5c9b      	ldrb	r3, [r3, r2]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	23a4      	movs	r3, #164	@ 0xa4
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	2100      	movs	r1, #0
 8004096:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0018      	movs	r0, r3
 800409c:	f008 fd94 	bl	800cbc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004254 <HAL_PCD_Init+0x1e4>)
 80040a4:	2103      	movs	r1, #3
 80040a6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f004 fd4f 	bl	8008b50 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b2:	230f      	movs	r3, #15
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e047      	b.n	800414c <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040bc:	200f      	movs	r0, #15
 80040be:	183b      	adds	r3, r7, r0
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	0013      	movs	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	18cb      	adds	r3, r1, r3
 80040ce:	3311      	adds	r3, #17
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040d4:	183b      	adds	r3, r7, r0
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	0013      	movs	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	18cb      	adds	r3, r1, r3
 80040e4:	3310      	adds	r3, #16
 80040e6:	183a      	adds	r2, r7, r0
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040ec:	183b      	adds	r3, r7, r0
 80040ee:	781a      	ldrb	r2, [r3, #0]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	0013      	movs	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	18cb      	adds	r3, r1, r3
 80040fc:	3313      	adds	r3, #19
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004102:	183b      	adds	r3, r7, r0
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	0013      	movs	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	189b      	adds	r3, r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	18cb      	adds	r3, r1, r3
 8004112:	3320      	adds	r3, #32
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004118:	183b      	adds	r3, r7, r0
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	0013      	movs	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	189b      	adds	r3, r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	18cb      	adds	r3, r1, r3
 8004128:	3324      	adds	r3, #36	@ 0x24
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800412e:	183b      	adds	r3, r7, r0
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	0013      	movs	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	189b      	adds	r3, r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	2200      	movs	r2, #0
 8004140:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004142:	183b      	adds	r3, r7, r0
 8004144:	781a      	ldrb	r2, [r3, #0]
 8004146:	183b      	adds	r3, r7, r0
 8004148:	3201      	adds	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	791b      	ldrb	r3, [r3, #4]
 8004150:	210f      	movs	r1, #15
 8004152:	187a      	adds	r2, r7, r1
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d3b0      	bcc.n	80040bc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415a:	187b      	adds	r3, r7, r1
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e056      	b.n	8004210 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004162:	240f      	movs	r4, #15
 8004164:	193b      	adds	r3, r7, r4
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	2352      	movs	r3, #82	@ 0x52
 800416c:	33ff      	adds	r3, #255	@ 0xff
 800416e:	0019      	movs	r1, r3
 8004170:	0013      	movs	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	189b      	adds	r3, r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	18c3      	adds	r3, r0, r3
 800417a:	185b      	adds	r3, r3, r1
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004180:	193b      	adds	r3, r7, r4
 8004182:	781a      	ldrb	r2, [r3, #0]
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	23a8      	movs	r3, #168	@ 0xa8
 8004188:	0059      	lsls	r1, r3, #1
 800418a:	0013      	movs	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	189b      	adds	r3, r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	18c3      	adds	r3, r0, r3
 8004194:	185b      	adds	r3, r3, r1
 8004196:	193a      	adds	r2, r7, r4
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800419c:	193b      	adds	r3, r7, r4
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	2354      	movs	r3, #84	@ 0x54
 80041a4:	33ff      	adds	r3, #255	@ 0xff
 80041a6:	0019      	movs	r1, r3
 80041a8:	0013      	movs	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	189b      	adds	r3, r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	18c3      	adds	r3, r0, r3
 80041b2:	185b      	adds	r3, r3, r1
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041b8:	193b      	adds	r3, r7, r4
 80041ba:	781a      	ldrb	r2, [r3, #0]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	23b0      	movs	r3, #176	@ 0xb0
 80041c0:	0059      	lsls	r1, r3, #1
 80041c2:	0013      	movs	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	18c3      	adds	r3, r0, r3
 80041cc:	185b      	adds	r3, r3, r1
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041d2:	193b      	adds	r3, r7, r4
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	23b2      	movs	r3, #178	@ 0xb2
 80041da:	0059      	lsls	r1, r3, #1
 80041dc:	0013      	movs	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	18c3      	adds	r3, r0, r3
 80041e6:	185b      	adds	r3, r3, r1
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	23b4      	movs	r3, #180	@ 0xb4
 80041f4:	0059      	lsls	r1, r3, #1
 80041f6:	0013      	movs	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	18c3      	adds	r3, r0, r3
 8004200:	185b      	adds	r3, r3, r1
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004206:	193b      	adds	r3, r7, r4
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	193b      	adds	r3, r7, r4
 800420c:	3201      	adds	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	791b      	ldrb	r3, [r3, #4]
 8004214:	220f      	movs	r2, #15
 8004216:	18ba      	adds	r2, r7, r2
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3a1      	bcc.n	8004162 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	f004 fcac 	bl	8008b84 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a07      	ldr	r2, [pc, #28]	@ (8004254 <HAL_PCD_Init+0x1e4>)
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	7a9b      	ldrb	r3, [r3, #10]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d103      	bne.n	800424a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0018      	movs	r0, r3
 8004246:	f001 fd1f 	bl	8005c88 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b005      	add	sp, #20
 8004252:	bd90      	pop	{r4, r7, pc}
 8004254:	00000291 	.word	0x00000291

08004258 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	23a4      	movs	r3, #164	@ 0xa4
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	5cd3      	ldrb	r3, [r2, r3]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_PCD_Start+0x18>
 800426c:	2302      	movs	r3, #2
 800426e:	e014      	b.n	800429a <HAL_PCD_Start+0x42>
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	23a4      	movs	r3, #164	@ 0xa4
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	2101      	movs	r1, #1
 8004278:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	0018      	movs	r0, r3
 8004280:	f004 fc50 	bl	8008b24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	0018      	movs	r0, r3
 800428a:	f006 fc45 	bl	800ab18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	23a4      	movs	r3, #164	@ 0xa4
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	2100      	movs	r1, #0
 8004296:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f006 fc47 	bl	800ab44 <USB_ReadInterrupts>
 80042b6:	0003      	movs	r3, r0
 80042b8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	2380      	movs	r3, #128	@ 0x80
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	4013      	ands	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fb60 	bl	800498c <PCD_EP_ISR_Handler>

    return;
 80042cc:	e11d      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	2380      	movs	r3, #128	@ 0x80
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4013      	ands	r3, r2
 80042d6:	d015      	beq.n	8004304 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2244      	movs	r2, #68	@ 0x44
 80042de:	5a9b      	ldrh	r3, [r3, r2]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	498a      	ldr	r1, [pc, #552]	@ (8004510 <HAL_PCD_IRQHandler+0x26c>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	b291      	uxth	r1, r2
 80042ec:	2244      	movs	r2, #68	@ 0x44
 80042ee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f008 fcf3 	bl	800ccde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2100      	movs	r1, #0
 80042fc:	0018      	movs	r0, r3
 80042fe:	f000 f915 	bl	800452c <HAL_PCD_SetAddress>

    return;
 8004302:	e102      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	2380      	movs	r3, #128	@ 0x80
 8004308:	01db      	lsls	r3, r3, #7
 800430a:	4013      	ands	r3, r2
 800430c:	d00c      	beq.n	8004328 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2244      	movs	r2, #68	@ 0x44
 8004314:	5a9b      	ldrh	r3, [r3, r2]
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	497d      	ldr	r1, [pc, #500]	@ (8004514 <HAL_PCD_IRQHandler+0x270>)
 800431e:	400a      	ands	r2, r1
 8004320:	b291      	uxth	r1, r2
 8004322:	2244      	movs	r2, #68	@ 0x44
 8004324:	5299      	strh	r1, [r3, r2]

    return;
 8004326:	e0f0      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	019b      	lsls	r3, r3, #6
 800432e:	4013      	ands	r3, r2
 8004330:	d00c      	beq.n	800434c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2244      	movs	r2, #68	@ 0x44
 8004338:	5a9b      	ldrh	r3, [r3, r2]
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4975      	ldr	r1, [pc, #468]	@ (8004518 <HAL_PCD_IRQHandler+0x274>)
 8004342:	400a      	ands	r2, r1
 8004344:	b291      	uxth	r1, r2
 8004346:	2244      	movs	r2, #68	@ 0x44
 8004348:	5299      	strh	r1, [r3, r2]

    return;
 800434a:	e0de      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	2380      	movs	r3, #128	@ 0x80
 8004350:	015b      	lsls	r3, r3, #5
 8004352:	4013      	ands	r3, r2
 8004354:	d038      	beq.n	80043c8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2240      	movs	r2, #64	@ 0x40
 800435c:	5a9b      	ldrh	r3, [r3, r2]
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2104      	movs	r1, #4
 8004366:	438a      	bics	r2, r1
 8004368:	b291      	uxth	r1, r2
 800436a:	2240      	movs	r2, #64	@ 0x40
 800436c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2240      	movs	r2, #64	@ 0x40
 8004374:	5a9b      	ldrh	r3, [r3, r2]
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2108      	movs	r1, #8
 800437e:	438a      	bics	r2, r1
 8004380:	b291      	uxth	r1, r2
 8004382:	2240      	movs	r2, #64	@ 0x40
 8004384:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	23b2      	movs	r3, #178	@ 0xb2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	5cd3      	ldrb	r3, [r2, r3]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d109      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	23b2      	movs	r3, #178	@ 0xb2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	2100      	movs	r1, #0
 800439a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2100      	movs	r1, #0
 80043a0:	0018      	movs	r0, r3
 80043a2:	f001 fc9b 	bl	8005cdc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f008 fcd9 	bl	800cd60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2244      	movs	r2, #68	@ 0x44
 80043b4:	5a9b      	ldrh	r3, [r3, r2]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4957      	ldr	r1, [pc, #348]	@ (800451c <HAL_PCD_IRQHandler+0x278>)
 80043be:	400a      	ands	r2, r1
 80043c0:	b291      	uxth	r1, r2
 80043c2:	2244      	movs	r2, #68	@ 0x44
 80043c4:	5299      	strh	r1, [r3, r2]

    return;
 80043c6:	e0a0      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	2380      	movs	r3, #128	@ 0x80
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	4013      	ands	r3, r2
 80043d0:	d028      	beq.n	8004424 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2240      	movs	r2, #64	@ 0x40
 80043d8:	5a9b      	ldrh	r3, [r3, r2]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2108      	movs	r1, #8
 80043e2:	430a      	orrs	r2, r1
 80043e4:	b291      	uxth	r1, r2
 80043e6:	2240      	movs	r2, #64	@ 0x40
 80043e8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2244      	movs	r2, #68	@ 0x44
 80043f0:	5a9b      	ldrh	r3, [r3, r2]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4949      	ldr	r1, [pc, #292]	@ (8004520 <HAL_PCD_IRQHandler+0x27c>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	b291      	uxth	r1, r2
 80043fe:	2244      	movs	r2, #68	@ 0x44
 8004400:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2240      	movs	r2, #64	@ 0x40
 8004408:	5a9b      	ldrh	r3, [r3, r2]
 800440a:	b29a      	uxth	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2104      	movs	r1, #4
 8004412:	430a      	orrs	r2, r1
 8004414:	b291      	uxth	r1, r2
 8004416:	2240      	movs	r2, #64	@ 0x40
 8004418:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0018      	movs	r0, r3
 800441e:	f008 fc83 	bl	800cd28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004422:	e072      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2280      	movs	r2, #128	@ 0x80
 8004428:	4013      	ands	r3, r2
 800442a:	d046      	beq.n	80044ba <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2244      	movs	r2, #68	@ 0x44
 8004432:	5a9b      	ldrh	r3, [r3, r2]
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2180      	movs	r1, #128	@ 0x80
 800443c:	438a      	bics	r2, r1
 800443e:	b291      	uxth	r1, r2
 8004440:	2244      	movs	r2, #68	@ 0x44
 8004442:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	23b2      	movs	r3, #178	@ 0xb2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d12f      	bne.n	80044b0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2240      	movs	r2, #64	@ 0x40
 8004456:	5a9b      	ldrh	r3, [r3, r2]
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2104      	movs	r1, #4
 8004460:	430a      	orrs	r2, r1
 8004462:	b291      	uxth	r1, r2
 8004464:	2240      	movs	r2, #64	@ 0x40
 8004466:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2240      	movs	r2, #64	@ 0x40
 800446e:	5a9b      	ldrh	r3, [r3, r2]
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2108      	movs	r1, #8
 8004478:	430a      	orrs	r2, r1
 800447a:	b291      	uxth	r1, r2
 800447c:	2240      	movs	r2, #64	@ 0x40
 800447e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	23b2      	movs	r3, #178	@ 0xb2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	2101      	movs	r1, #1
 8004488:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2254      	movs	r2, #84	@ 0x54
 8004490:	5a9b      	ldrh	r3, [r3, r2]
 8004492:	b29b      	uxth	r3, r3
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	223c      	movs	r2, #60	@ 0x3c
 8004498:	4013      	ands	r3, r2
 800449a:	0019      	movs	r1, r3
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	23b3      	movs	r3, #179	@ 0xb3
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2101      	movs	r1, #1
 80044a8:	0018      	movs	r0, r3
 80044aa:	f001 fc17 	bl	8005cdc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80044ae:	e02c      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f008 fc38 	bl	800cd28 <HAL_PCD_SuspendCallback>
    return;
 80044b8:	e027      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4013      	ands	r3, r2
 80044c2:	d010      	beq.n	80044e6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2244      	movs	r2, #68	@ 0x44
 80044ca:	5a9b      	ldrh	r3, [r3, r2]
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4914      	ldr	r1, [pc, #80]	@ (8004524 <HAL_PCD_IRQHandler+0x280>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	b291      	uxth	r1, r2
 80044d8:	2244      	movs	r2, #68	@ 0x44
 80044da:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	0018      	movs	r0, r3
 80044e0:	f008 fbee 	bl	800ccc0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80044e4:	e011      	b.n	800450a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	2380      	movs	r3, #128	@ 0x80
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4013      	ands	r3, r2
 80044ee:	d00c      	beq.n	800450a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2244      	movs	r2, #68	@ 0x44
 80044f6:	5a9b      	ldrh	r3, [r3, r2]
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	490a      	ldr	r1, [pc, #40]	@ (8004528 <HAL_PCD_IRQHandler+0x284>)
 8004500:	400a      	ands	r2, r1
 8004502:	b291      	uxth	r1, r2
 8004504:	2244      	movs	r2, #68	@ 0x44
 8004506:	5299      	strh	r1, [r3, r2]

    return;
 8004508:	46c0      	nop			@ (mov r8, r8)
  }
}
 800450a:	46bd      	mov	sp, r7
 800450c:	b004      	add	sp, #16
 800450e:	bd80      	pop	{r7, pc}
 8004510:	fffffbff 	.word	0xfffffbff
 8004514:	ffffbfff 	.word	0xffffbfff
 8004518:	ffffdfff 	.word	0xffffdfff
 800451c:	ffffefff 	.word	0xffffefff
 8004520:	fffff7ff 	.word	0xfffff7ff
 8004524:	fffffdff 	.word	0xfffffdff
 8004528:	fffffeff 	.word	0xfffffeff

0800452c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	000a      	movs	r2, r1
 8004536:	1cfb      	adds	r3, r7, #3
 8004538:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	23a4      	movs	r3, #164	@ 0xa4
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	5cd3      	ldrb	r3, [r2, r3]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_PCD_SetAddress+0x1e>
 8004546:	2302      	movs	r3, #2
 8004548:	e016      	b.n	8004578 <HAL_PCD_SetAddress+0x4c>
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	23a4      	movs	r3, #164	@ 0xa4
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	2101      	movs	r1, #1
 8004552:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	1cfa      	adds	r2, r7, #3
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	1cfb      	adds	r3, r7, #3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	0019      	movs	r1, r3
 8004566:	0010      	movs	r0, r2
 8004568:	f006 fac2 	bl	800aaf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	23a4      	movs	r3, #164	@ 0xa4
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	2100      	movs	r1, #0
 8004574:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	0018      	movs	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	000c      	movs	r4, r1
 800458a:	0010      	movs	r0, r2
 800458c:	0019      	movs	r1, r3
 800458e:	1cfb      	adds	r3, r7, #3
 8004590:	1c22      	adds	r2, r4, #0
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	003b      	movs	r3, r7
 8004596:	1c02      	adds	r2, r0, #0
 8004598:	801a      	strh	r2, [r3, #0]
 800459a:	1cbb      	adds	r3, r7, #2
 800459c:	1c0a      	adds	r2, r1, #0
 800459e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045a0:	230b      	movs	r3, #11
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045a8:	1cfb      	adds	r3, r7, #3
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	da0f      	bge.n	80045d2 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b2:	1cfb      	adds	r3, r7, #3
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2207      	movs	r2, #7
 80045b8:	401a      	ands	r2, r3
 80045ba:	0013      	movs	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	3310      	adds	r3, #16
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	18d3      	adds	r3, r2, r3
 80045c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	705a      	strb	r2, [r3, #1]
 80045d0:	e00f      	b.n	80045f2 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d2:	1cfb      	adds	r3, r7, #3
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2207      	movs	r2, #7
 80045d8:	401a      	ands	r2, r3
 80045da:	0013      	movs	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	189b      	adds	r3, r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	3351      	adds	r3, #81	@ 0x51
 80045e4:	33ff      	adds	r3, #255	@ 0xff
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	18d3      	adds	r3, r2, r3
 80045ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045f2:	1cfb      	adds	r3, r7, #3
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2207      	movs	r2, #7
 80045f8:	4013      	ands	r3, r2
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004600:	003b      	movs	r3, r7
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1cba      	adds	r2, r7, #2
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004610:	1cbb      	adds	r3, r7, #2
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d102      	bne.n	800461e <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	23a4      	movs	r3, #164	@ 0xa4
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	5cd3      	ldrb	r3, [r2, r3]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_PCD_EP_Open+0xae>
 800462a:	2302      	movs	r3, #2
 800462c:	e013      	b.n	8004656 <HAL_PCD_EP_Open+0xd6>
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	23a4      	movs	r3, #164	@ 0xa4
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	2101      	movs	r1, #1
 8004636:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f004 fabb 	bl	8008bbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	23a4      	movs	r3, #164	@ 0xa4
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	2100      	movs	r1, #0
 800464e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004650:	230b      	movs	r3, #11
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	781b      	ldrb	r3, [r3, #0]
}
 8004656:	0018      	movs	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	b005      	add	sp, #20
 800465c:	bd90      	pop	{r4, r7, pc}

0800465e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	000a      	movs	r2, r1
 8004668:	1cfb      	adds	r3, r7, #3
 800466a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800466c:	1cfb      	adds	r3, r7, #3
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b25b      	sxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	da0f      	bge.n	8004696 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004676:	1cfb      	adds	r3, r7, #3
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2207      	movs	r2, #7
 800467c:	401a      	ands	r2, r3
 800467e:	0013      	movs	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	189b      	adds	r3, r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	3310      	adds	r3, #16
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	18d3      	adds	r3, r2, r3
 800468c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	705a      	strb	r2, [r3, #1]
 8004694:	e00f      	b.n	80046b6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004696:	1cfb      	adds	r3, r7, #3
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2207      	movs	r2, #7
 800469c:	401a      	ands	r2, r3
 800469e:	0013      	movs	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	3351      	adds	r3, #81	@ 0x51
 80046a8:	33ff      	adds	r3, #255	@ 0xff
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	18d3      	adds	r3, r2, r3
 80046ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046b6:	1cfb      	adds	r3, r7, #3
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2207      	movs	r2, #7
 80046bc:	4013      	ands	r3, r2
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	23a4      	movs	r3, #164	@ 0xa4
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	5cd3      	ldrb	r3, [r2, r3]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_PCD_EP_Close+0x76>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e011      	b.n	80046f8 <HAL_PCD_EP_Close+0x9a>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	23a4      	movs	r3, #164	@ 0xa4
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	2101      	movs	r1, #1
 80046dc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	0011      	movs	r1, r2
 80046e6:	0018      	movs	r0, r3
 80046e8:	f004 fe10 	bl	800930c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	23a4      	movs	r3, #164	@ 0xa4
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	2100      	movs	r1, #0
 80046f4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b004      	add	sp, #16
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	200b      	movs	r0, #11
 800470e:	183b      	adds	r3, r7, r0
 8004710:	1c0a      	adds	r2, r1, #0
 8004712:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004714:	0001      	movs	r1, r0
 8004716:	187b      	adds	r3, r7, r1
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2207      	movs	r2, #7
 800471c:	401a      	ands	r2, r3
 800471e:	0013      	movs	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	189b      	adds	r3, r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	3351      	adds	r3, #81	@ 0x51
 8004728:	33ff      	adds	r3, #255	@ 0xff
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	18d3      	adds	r3, r2, r3
 800472e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2200      	movs	r2, #0
 8004740:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004748:	187b      	adds	r3, r7, r1
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2207      	movs	r2, #7
 800474e:	4013      	ands	r3, r2
 8004750:	b2da      	uxtb	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	0011      	movs	r1, r2
 800475e:	0018      	movs	r0, r3
 8004760:	f004 ff94 	bl	800968c <USB_EPStartXfer>

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b006      	add	sp, #24
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	000a      	movs	r2, r1
 8004778:	1cfb      	adds	r3, r7, #3
 800477a:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800477c:	1cfb      	adds	r3, r7, #3
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2207      	movs	r2, #7
 8004782:	401a      	ands	r2, r3
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	23b6      	movs	r3, #182	@ 0xb6
 8004788:	0059      	lsls	r1, r3, #1
 800478a:	0013      	movs	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	189b      	adds	r3, r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	18c3      	adds	r3, r0, r3
 8004794:	185b      	adds	r3, r3, r1
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b002      	add	sp, #8
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	200b      	movs	r0, #11
 80047ae:	183b      	adds	r3, r7, r0
 80047b0:	1c0a      	adds	r2, r1, #0
 80047b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b4:	183b      	adds	r3, r7, r0
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2207      	movs	r2, #7
 80047ba:	401a      	ands	r2, r3
 80047bc:	0013      	movs	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	3310      	adds	r3, #16
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	18d3      	adds	r3, r2, r3
 80047ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2224      	movs	r2, #36	@ 0x24
 80047dc:	2101      	movs	r1, #1
 80047de:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2201      	movs	r2, #1
 80047f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f2:	183b      	adds	r3, r7, r0
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2207      	movs	r2, #7
 80047f8:	4013      	ands	r3, r2
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	0011      	movs	r1, r2
 8004808:	0018      	movs	r0, r3
 800480a:	f004 ff3f 	bl	800968c <USB_EPStartXfer>

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b006      	add	sp, #24
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	000a      	movs	r2, r1
 8004822:	1cfb      	adds	r3, r7, #3
 8004824:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004826:	1cfb      	adds	r3, r7, #3
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2207      	movs	r2, #7
 800482c:	4013      	ands	r3, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	7912      	ldrb	r2, [r2, #4]
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e046      	b.n	80048c8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800483a:	1cfb      	adds	r3, r7, #3
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b25b      	sxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	da0f      	bge.n	8004864 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004844:	1cfb      	adds	r3, r7, #3
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2207      	movs	r2, #7
 800484a:	401a      	ands	r2, r3
 800484c:	0013      	movs	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	189b      	adds	r3, r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	3310      	adds	r3, #16
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	18d3      	adds	r3, r2, r3
 800485a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	705a      	strb	r2, [r3, #1]
 8004862:	e00d      	b.n	8004880 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004864:	1cfb      	adds	r3, r7, #3
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	0013      	movs	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	189b      	adds	r3, r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	3351      	adds	r3, #81	@ 0x51
 8004872:	33ff      	adds	r3, #255	@ 0xff
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	18d3      	adds	r3, r2, r3
 8004878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004886:	1cfb      	adds	r3, r7, #3
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2207      	movs	r2, #7
 800488c:	4013      	ands	r3, r2
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	23a4      	movs	r3, #164	@ 0xa4
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	5cd3      	ldrb	r3, [r2, r3]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_PCD_EP_SetStall+0x8c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e011      	b.n	80048c8 <HAL_PCD_EP_SetStall+0xb0>
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	23a4      	movs	r3, #164	@ 0xa4
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	2101      	movs	r1, #1
 80048ac:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	0011      	movs	r1, r2
 80048b6:	0018      	movs	r0, r3
 80048b8:	f006 f818 	bl	800a8ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	23a4      	movs	r3, #164	@ 0xa4
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	2100      	movs	r1, #0
 80048c4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b004      	add	sp, #16
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	000a      	movs	r2, r1
 80048da:	1cfb      	adds	r3, r7, #3
 80048dc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048de:	1cfb      	adds	r3, r7, #3
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	220f      	movs	r2, #15
 80048e4:	4013      	ands	r3, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	7912      	ldrb	r2, [r2, #4]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e048      	b.n	8004984 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048f2:	1cfb      	adds	r3, r7, #3
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	da0f      	bge.n	800491c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048fc:	1cfb      	adds	r3, r7, #3
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2207      	movs	r2, #7
 8004902:	401a      	ands	r2, r3
 8004904:	0013      	movs	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	189b      	adds	r3, r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	3310      	adds	r3, #16
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	18d3      	adds	r3, r2, r3
 8004912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	705a      	strb	r2, [r3, #1]
 800491a:	e00f      	b.n	800493c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800491c:	1cfb      	adds	r3, r7, #3
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2207      	movs	r2, #7
 8004922:	401a      	ands	r2, r3
 8004924:	0013      	movs	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	189b      	adds	r3, r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	3351      	adds	r3, #81	@ 0x51
 800492e:	33ff      	adds	r3, #255	@ 0xff
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	18d3      	adds	r3, r2, r3
 8004934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004942:	1cfb      	adds	r3, r7, #3
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2207      	movs	r2, #7
 8004948:	4013      	ands	r3, r2
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	23a4      	movs	r3, #164	@ 0xa4
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	5cd3      	ldrb	r3, [r2, r3]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_PCD_EP_ClrStall+0x90>
 800495c:	2302      	movs	r3, #2
 800495e:	e011      	b.n	8004984 <HAL_PCD_EP_ClrStall+0xb4>
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	23a4      	movs	r3, #164	@ 0xa4
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	2101      	movs	r1, #1
 8004968:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f006 f80a 	bl	800a98c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	23a4      	movs	r3, #164	@ 0xa4
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	2100      	movs	r1, #0
 8004980:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b004      	add	sp, #16
 800498a:	bd80      	pop	{r7, pc}

0800498c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800498c:	b5b0      	push	{r4, r5, r7, lr}
 800498e:	b096      	sub	sp, #88	@ 0x58
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004994:	f000 fbea 	bl	800516c <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	2048      	movs	r0, #72	@ 0x48
 800499e:	183b      	adds	r3, r7, r0
 80049a0:	2144      	movs	r1, #68	@ 0x44
 80049a2:	5a52      	ldrh	r2, [r2, r1]
 80049a4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049a6:	183b      	adds	r3, r7, r0
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	244f      	movs	r4, #79	@ 0x4f
 80049ae:	193b      	adds	r3, r7, r4
 80049b0:	210f      	movs	r1, #15
 80049b2:	400a      	ands	r2, r1
 80049b4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80049b6:	193b      	adds	r3, r7, r4
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d000      	beq.n	80049c0 <PCD_EP_ISR_Handler+0x34>
 80049be:	e18d      	b.n	8004cdc <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049c0:	183b      	adds	r3, r7, r0
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	2210      	movs	r2, #16
 80049c6:	4013      	ands	r3, r2
 80049c8:	d152      	bne.n	8004a70 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	200e      	movs	r0, #14
 80049d4:	183b      	adds	r3, r7, r0
 80049d6:	49ba      	ldr	r1, [pc, #744]	@ (8004cc0 <PCD_EP_ISR_Handler+0x334>)
 80049d8:	400a      	ands	r2, r1
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	183a      	adds	r2, r7, r0
 80049e2:	8812      	ldrh	r2, [r2, #0]
 80049e4:	49b7      	ldr	r1, [pc, #732]	@ (8004cc4 <PCD_EP_ISR_Handler+0x338>)
 80049e6:	430a      	orrs	r2, r1
 80049e8:	b292      	uxth	r2, r2
 80049ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3310      	adds	r3, #16
 80049f0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2250      	movs	r2, #80	@ 0x50
 80049f8:	5a9b      	ldrh	r3, [r3, r2]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	001a      	movs	r2, r3
 80049fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	18d2      	adds	r2, r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	18d3      	adds	r3, r2, r3
 8004a0c:	4aae      	ldr	r2, [pc, #696]	@ (8004cc8 <PCD_EP_ISR_Handler+0x33c>)
 8004a0e:	4694      	mov	ip, r2
 8004a10:	4463      	add	r3, ip
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	059b      	lsls	r3, r3, #22
 8004a16:	0d9a      	lsrs	r2, r3, #22
 8004a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	18d2      	adds	r2, r2, r3
 8004a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a28:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f008 f928 	bl	800cc84 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	7b1b      	ldrb	r3, [r3, #12]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <PCD_EP_ISR_Handler+0xb6>
 8004a3e:	f000 fb95 	bl	800516c <PCD_EP_ISR_Handler+0x7e0>
 8004a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <PCD_EP_ISR_Handler+0xc2>
 8004a4a:	f000 fb8f 	bl	800516c <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7b1b      	ldrb	r3, [r3, #12]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2280      	movs	r2, #128	@ 0x80
 8004a56:	4252      	negs	r2, r2
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0011      	movs	r1, r2
 8004a62:	224c      	movs	r2, #76	@ 0x4c
 8004a64:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	731a      	strb	r2, [r3, #12]
 8004a6c:	f000 fb7e 	bl	800516c <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3351      	adds	r3, #81	@ 0x51
 8004a74:	33ff      	adds	r3, #255	@ 0xff
 8004a76:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	214c      	movs	r1, #76	@ 0x4c
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	8812      	ldrh	r2, [r2, #0]
 8004a82:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	881a      	ldrh	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	@ 0x80
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d037      	beq.n	8004b00 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2250      	movs	r2, #80	@ 0x50
 8004a96:	5a9b      	ldrh	r3, [r3, r2]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	18d2      	adds	r2, r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	18d3      	adds	r3, r2, r3
 8004aaa:	4a88      	ldr	r2, [pc, #544]	@ (8004ccc <PCD_EP_ISR_Handler+0x340>)
 8004aac:	4694      	mov	ip, r2
 8004aae:	4463      	add	r3, ip
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	059b      	lsls	r3, r3, #22
 8004ab4:	0d9a      	lsrs	r2, r3, #22
 8004ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	22a6      	movs	r2, #166	@ 0xa6
 8004ac2:	0092      	lsls	r2, r2, #2
 8004ac4:	1899      	adds	r1, r3, r2
 8004ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004acc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f006 f88f 	bl	800abf2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	2010      	movs	r0, #16
 8004ade:	183b      	adds	r3, r7, r0
 8004ae0:	497b      	ldr	r1, [pc, #492]	@ (8004cd0 <PCD_EP_ISR_Handler+0x344>)
 8004ae2:	400a      	ands	r2, r1
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	183a      	adds	r2, r7, r0
 8004aec:	8812      	ldrh	r2, [r2, #0]
 8004aee:	2180      	movs	r1, #128	@ 0x80
 8004af0:	430a      	orrs	r2, r1
 8004af2:	b292      	uxth	r2, r2
 8004af4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f008 f88d 	bl	800cc18 <HAL_PCD_SetupStageCallback>
 8004afe:	e335      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b00:	234c      	movs	r3, #76	@ 0x4c
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	5e9b      	ldrsh	r3, [r3, r2]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	db00      	blt.n	8004b0e <PCD_EP_ISR_Handler+0x182>
 8004b0c:	e32e      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	201e      	movs	r0, #30
 8004b18:	183b      	adds	r3, r7, r0
 8004b1a:	496d      	ldr	r1, [pc, #436]	@ (8004cd0 <PCD_EP_ISR_Handler+0x344>)
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	183a      	adds	r2, r7, r0
 8004b26:	8812      	ldrh	r2, [r2, #0]
 8004b28:	2180      	movs	r1, #128	@ 0x80
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2250      	movs	r2, #80	@ 0x50
 8004b36:	5a9b      	ldrh	r3, [r3, r2]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	001a      	movs	r2, r3
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	18d2      	adds	r2, r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	18d3      	adds	r3, r2, r3
 8004b4a:	4a60      	ldr	r2, [pc, #384]	@ (8004ccc <PCD_EP_ISR_Handler+0x340>)
 8004b4c:	4694      	mov	ip, r2
 8004b4e:	4463      	add	r3, ip
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	059b      	lsls	r3, r3, #22
 8004b54:	0d9a      	lsrs	r2, r3, #22
 8004b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b58:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01a      	beq.n	8004b98 <PCD_EP_ISR_Handler+0x20c>
 8004b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d016      	beq.n	8004b98 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b70:	6959      	ldr	r1, [r3, #20]
 8004b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b74:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b78:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f006 f839 	bl	800abf2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	18d2      	adds	r2, r2, r3
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2100      	movs	r1, #0
 8004b92:	0018      	movs	r0, r3
 8004b94:	f008 f855 	bl	800cc42 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	214c      	movs	r1, #76	@ 0x4c
 8004b9e:	187b      	adds	r3, r7, r1
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004ba4:	187b      	adds	r3, r7, r1
 8004ba6:	881a      	ldrh	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	@ 0x80
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	4013      	ands	r3, r2
 8004bae:	d000      	beq.n	8004bb2 <PCD_EP_ISR_Handler+0x226>
 8004bb0:	e2dc      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
 8004bb2:	187b      	adds	r3, r7, r1
 8004bb4:	881a      	ldrh	r2, [r3, #0]
 8004bb6:	23c0      	movs	r3, #192	@ 0xc0
 8004bb8:	019b      	lsls	r3, r3, #6
 8004bba:	401a      	ands	r2, r3
 8004bbc:	23c0      	movs	r3, #192	@ 0xc0
 8004bbe:	019b      	lsls	r3, r3, #6
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d100      	bne.n	8004bc6 <PCD_EP_ISR_Handler+0x23a>
 8004bc4:	e2d2      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2250      	movs	r2, #80	@ 0x50
 8004bd2:	5a9b      	ldrh	r3, [r3, r2]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	4a3a      	ldr	r2, [pc, #232]	@ (8004ccc <PCD_EP_ISR_Handler+0x340>)
 8004be2:	4694      	mov	ip, r2
 8004be4:	4463      	add	r3, ip
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	059b      	lsls	r3, r3, #22
 8004bf0:	0d9b      	lsrs	r3, r3, #22
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d108      	bne.n	8004c12 <PCD_EP_ISR_Handler+0x286>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc4 <PCD_EP_ISR_Handler+0x338>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	e035      	b.n	8004c7e <PCD_EP_ISR_Handler+0x2f2>
 8004c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c18:	d817      	bhi.n	8004c4a <PCD_EP_ISR_Handler+0x2be>
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2201      	movs	r2, #1
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d002      	beq.n	8004c32 <PCD_EP_ISR_Handler+0x2a6>
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c2e:	3301      	adds	r3, #1
 8004c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	029b      	lsls	r3, r3, #10
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	4313      	orrs	r3, r2
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e019      	b.n	8004c7e <PCD_EP_ISR_Handler+0x2f2>
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	221f      	movs	r2, #31
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d102      	bne.n	8004c62 <PCD_EP_ISR_Handler+0x2d6>
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	029b      	lsls	r3, r3, #10
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4a13      	ldr	r2, [pc, #76]	@ (8004cc4 <PCD_EP_ISR_Handler+0x338>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	2012      	movs	r0, #18
 8004c88:	183b      	adds	r3, r7, r0
 8004c8a:	4912      	ldr	r1, [pc, #72]	@ (8004cd4 <PCD_EP_ISR_Handler+0x348>)
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	183b      	adds	r3, r7, r0
 8004c92:	183a      	adds	r2, r7, r0
 8004c94:	8812      	ldrh	r2, [r2, #0]
 8004c96:	2180      	movs	r1, #128	@ 0x80
 8004c98:	0149      	lsls	r1, r1, #5
 8004c9a:	404a      	eors	r2, r1
 8004c9c:	801a      	strh	r2, [r3, #0]
 8004c9e:	183b      	adds	r3, r7, r0
 8004ca0:	183a      	adds	r2, r7, r0
 8004ca2:	8812      	ldrh	r2, [r2, #0]
 8004ca4:	2180      	movs	r1, #128	@ 0x80
 8004ca6:	0189      	lsls	r1, r1, #6
 8004ca8:	404a      	eors	r2, r1
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	183a      	adds	r2, r7, r0
 8004cb2:	8812      	ldrh	r2, [r2, #0]
 8004cb4:	4908      	ldr	r1, [pc, #32]	@ (8004cd8 <PCD_EP_ISR_Handler+0x34c>)
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	e256      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	ffff8f0f 	.word	0xffff8f0f
 8004cc4:	ffff8000 	.word	0xffff8000
 8004cc8:	00000402 	.word	0x00000402
 8004ccc:	00000406 	.word	0x00000406
 8004cd0:	00000f8f 	.word	0x00000f8f
 8004cd4:	ffffbf8f 	.word	0xffffbf8f
 8004cd8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	204f      	movs	r0, #79	@ 0x4f
 8004ce4:	183b      	adds	r3, r7, r0
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	18d2      	adds	r2, r2, r3
 8004cec:	214c      	movs	r1, #76	@ 0x4c
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004cf4:	187b      	adds	r3, r7, r1
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	5e9b      	ldrsh	r3, [r3, r2]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db00      	blt.n	8004d00 <PCD_EP_ISR_Handler+0x374>
 8004cfe:	e0fa      	b.n	8004ef6 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	001a      	movs	r2, r3
 8004d06:	183b      	adds	r3, r7, r0
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	244a      	movs	r4, #74	@ 0x4a
 8004d14:	193b      	adds	r3, r7, r4
 8004d16:	49d1      	ldr	r1, [pc, #836]	@ (800505c <PCD_EP_ISR_Handler+0x6d0>)
 8004d18:	400a      	ands	r2, r1
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	001a      	movs	r2, r3
 8004d22:	183b      	adds	r3, r7, r0
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	18d3      	adds	r3, r2, r3
 8004d2a:	193a      	adds	r2, r7, r4
 8004d2c:	8812      	ldrh	r2, [r2, #0]
 8004d2e:	2180      	movs	r1, #128	@ 0x80
 8004d30:	430a      	orrs	r2, r1
 8004d32:	b292      	uxth	r2, r2
 8004d34:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	781a      	ldrb	r2, [r3, #0]
 8004d3a:	0013      	movs	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	3351      	adds	r3, #81	@ 0x51
 8004d44:	33ff      	adds	r3, #255	@ 0xff
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	18d3      	adds	r3, r2, r3
 8004d4a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d4e:	7b1b      	ldrb	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d125      	bne.n	8004da0 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2250      	movs	r2, #80	@ 0x50
 8004d5a:	5a9b      	ldrh	r3, [r3, r2]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	001a      	movs	r2, r3
 8004d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	18d2      	adds	r2, r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	18d3      	adds	r3, r2, r3
 8004d6e:	4abc      	ldr	r2, [pc, #752]	@ (8005060 <PCD_EP_ISR_Handler+0x6d4>)
 8004d70:	4694      	mov	ip, r2
 8004d72:	4463      	add	r3, ip
 8004d74:	881a      	ldrh	r2, [r3, #0]
 8004d76:	2450      	movs	r4, #80	@ 0x50
 8004d78:	193b      	adds	r3, r7, r4
 8004d7a:	0592      	lsls	r2, r2, #22
 8004d7c:	0d92      	lsrs	r2, r2, #22
 8004d7e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004d80:	193b      	adds	r3, r7, r4
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d100      	bne.n	8004d8a <PCD_EP_ISR_Handler+0x3fe>
 8004d88:	e08d      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d90:	6959      	ldr	r1, [r3, #20]
 8004d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d94:	88da      	ldrh	r2, [r3, #6]
 8004d96:	193b      	adds	r3, r7, r4
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	f005 ff2a 	bl	800abf2 <USB_ReadPMA>
 8004d9e:	e082      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da2:	78db      	ldrb	r3, [r3, #3]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d10c      	bne.n	8004dc2 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004da8:	2350      	movs	r3, #80	@ 0x50
 8004daa:	18fc      	adds	r4, r7, r3
 8004dac:	234c      	movs	r3, #76	@ 0x4c
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	881a      	ldrh	r2, [r3, #0]
 8004db2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 f9ec 	bl	8005194 <HAL_PCD_EP_DB_Receive>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	8023      	strh	r3, [r4, #0]
 8004dc0:	e071      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	18d3      	adds	r3, r2, r3
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	2052      	movs	r0, #82	@ 0x52
 8004dd6:	183b      	adds	r3, r7, r0
 8004dd8:	49a2      	ldr	r1, [pc, #648]	@ (8005064 <PCD_EP_ISR_Handler+0x6d8>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	001a      	movs	r2, r3
 8004de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	18d3      	adds	r3, r2, r3
 8004dec:	183a      	adds	r2, r7, r0
 8004dee:	8812      	ldrh	r2, [r2, #0]
 8004df0:	499d      	ldr	r1, [pc, #628]	@ (8005068 <PCD_EP_ISR_Handler+0x6dc>)
 8004df2:	430a      	orrs	r2, r1
 8004df4:	b292      	uxth	r2, r2
 8004df6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	18d3      	adds	r3, r2, r3
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	01db      	lsls	r3, r3, #7
 8004e10:	4013      	ands	r3, r2
 8004e12:	d024      	beq.n	8004e5e <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2250      	movs	r2, #80	@ 0x50
 8004e1a:	5a9b      	ldrh	r3, [r3, r2]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	001a      	movs	r2, r3
 8004e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	18d2      	adds	r2, r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	18d3      	adds	r3, r2, r3
 8004e2e:	4a8f      	ldr	r2, [pc, #572]	@ (800506c <PCD_EP_ISR_Handler+0x6e0>)
 8004e30:	4694      	mov	ip, r2
 8004e32:	4463      	add	r3, ip
 8004e34:	881a      	ldrh	r2, [r3, #0]
 8004e36:	2450      	movs	r4, #80	@ 0x50
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	0592      	lsls	r2, r2, #22
 8004e3c:	0d92      	lsrs	r2, r2, #22
 8004e3e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004e40:	193b      	adds	r3, r7, r4
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02e      	beq.n	8004ea6 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4e:	6959      	ldr	r1, [r3, #20]
 8004e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e52:	891a      	ldrh	r2, [r3, #8]
 8004e54:	193b      	adds	r3, r7, r4
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	f005 fecb 	bl	800abf2 <USB_ReadPMA>
 8004e5c:	e023      	b.n	8004ea6 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2250      	movs	r2, #80	@ 0x50
 8004e64:	5a9b      	ldrh	r3, [r3, r2]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	001a      	movs	r2, r3
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	18d2      	adds	r2, r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	18d3      	adds	r3, r2, r3
 8004e78:	4a79      	ldr	r2, [pc, #484]	@ (8005060 <PCD_EP_ISR_Handler+0x6d4>)
 8004e7a:	4694      	mov	ip, r2
 8004e7c:	4463      	add	r3, ip
 8004e7e:	881a      	ldrh	r2, [r3, #0]
 8004e80:	2450      	movs	r4, #80	@ 0x50
 8004e82:	193b      	adds	r3, r7, r4
 8004e84:	0592      	lsls	r2, r2, #22
 8004e86:	0d92      	lsrs	r2, r2, #22
 8004e88:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004e8a:	193b      	adds	r3, r7, r4
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e98:	6959      	ldr	r1, [r3, #20]
 8004e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e9c:	895a      	ldrh	r2, [r3, #10]
 8004e9e:	193b      	adds	r3, r7, r4
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	f005 fea6 	bl	800abf2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	2150      	movs	r1, #80	@ 0x50
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	18d2      	adds	r2, r2, r3
 8004eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	187b      	adds	r3, r7, r1
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	18d2      	adds	r2, r2, r3
 8004ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <PCD_EP_ISR_Handler+0x54c>
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d207      	bcs.n	8004ee8 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eda:	781a      	ldrb	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	0011      	movs	r1, r2
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f007 feae 	bl	800cc42 <HAL_PCD_DataOutStageCallback>
 8004ee6:	e006      	b.n	8004ef6 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004eee:	0011      	movs	r1, r2
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f004 fbcb 	bl	800968c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ef6:	244c      	movs	r4, #76	@ 0x4c
 8004ef8:	193b      	adds	r3, r7, r4
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	2280      	movs	r2, #128	@ 0x80
 8004efe:	4013      	ands	r3, r2
 8004f00:	d100      	bne.n	8004f04 <PCD_EP_ISR_Handler+0x578>
 8004f02:	e133      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f04:	204f      	movs	r0, #79	@ 0x4f
 8004f06:	183b      	adds	r3, r7, r0
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	0013      	movs	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	189b      	adds	r3, r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	3310      	adds	r3, #16
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	18d3      	adds	r3, r2, r3
 8004f18:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	001a      	movs	r2, r3
 8004f20:	183b      	adds	r3, r7, r0
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	18d3      	adds	r3, r2, r3
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	2542      	movs	r5, #66	@ 0x42
 8004f2e:	197b      	adds	r3, r7, r5
 8004f30:	494f      	ldr	r1, [pc, #316]	@ (8005070 <PCD_EP_ISR_Handler+0x6e4>)
 8004f32:	400a      	ands	r2, r1
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	183b      	adds	r3, r7, r0
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	18d3      	adds	r3, r2, r3
 8004f44:	197a      	adds	r2, r7, r5
 8004f46:	8812      	ldrh	r2, [r2, #0]
 8004f48:	494a      	ldr	r1, [pc, #296]	@ (8005074 <PCD_EP_ISR_Handler+0x6e8>)
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	b292      	uxth	r2, r2
 8004f4e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f52:	78db      	ldrb	r3, [r3, #3]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d000      	beq.n	8004f5a <PCD_EP_ISR_Handler+0x5ce>
 8004f58:	e0af      	b.n	80050ba <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8004f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f62:	7b1b      	ldrb	r3, [r3, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d100      	bne.n	8004f6a <PCD_EP_ISR_Handler+0x5de>
 8004f68:	e09f      	b.n	80050aa <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	2240      	movs	r2, #64	@ 0x40
 8004f70:	4013      	ands	r3, r2
 8004f72:	d046      	beq.n	8005002 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d125      	bne.n	8004fc8 <PCD_EP_ISR_Handler+0x63c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2250      	movs	r2, #80	@ 0x50
 8004f88:	5a9b      	ldrh	r3, [r3, r2]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	001a      	movs	r2, r3
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	189b      	adds	r3, r3, r2
 8004f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	00da      	lsls	r2, r3, #3
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	18d3      	adds	r3, r2, r3
 8004f9e:	4a33      	ldr	r2, [pc, #204]	@ (800506c <PCD_EP_ISR_Handler+0x6e0>)
 8004fa0:	4694      	mov	ip, r2
 8004fa2:	4463      	add	r3, ip
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	059b      	lsls	r3, r3, #22
 8004fae:	0d9b      	lsrs	r3, r3, #22
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005074 <PCD_EP_ISR_Handler+0x6e8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	801a      	strh	r2, [r3, #0]
 8004fc6:	e070      	b.n	80050aa <PCD_EP_ISR_Handler+0x71e>
 8004fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d16c      	bne.n	80050aa <PCD_EP_ISR_Handler+0x71e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2250      	movs	r2, #80	@ 0x50
 8004fdc:	5a9b      	ldrh	r3, [r3, r2]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	001a      	movs	r2, r3
 8004fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe4:	189b      	adds	r3, r3, r2
 8004fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	00da      	lsls	r2, r3, #3
 8004fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff0:	18d3      	adds	r3, r2, r3
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800506c <PCD_EP_ISR_Handler+0x6e0>)
 8004ff4:	4694      	mov	ip, r2
 8004ff6:	4463      	add	r3, ip
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e053      	b.n	80050aa <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d133      	bne.n	8005078 <PCD_EP_ISR_Handler+0x6ec>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	637b      	str	r3, [r7, #52]	@ 0x34
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2250      	movs	r2, #80	@ 0x50
 800501c:	5a9b      	ldrh	r3, [r3, r2]
 800501e:	b29b      	uxth	r3, r3
 8005020:	001a      	movs	r2, r3
 8005022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005024:	189b      	adds	r3, r3, r2
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
 8005028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	00da      	lsls	r2, r3, #3
 800502e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005030:	18d3      	adds	r3, r2, r3
 8005032:	4a0b      	ldr	r2, [pc, #44]	@ (8005060 <PCD_EP_ISR_Handler+0x6d4>)
 8005034:	4694      	mov	ip, r2
 8005036:	4463      	add	r3, ip
 8005038:	633b      	str	r3, [r7, #48]	@ 0x30
 800503a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	059b      	lsls	r3, r3, #22
 8005042:	0d9b      	lsrs	r3, r3, #22
 8005044:	b29a      	uxth	r2, r3
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	801a      	strh	r2, [r3, #0]
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	4a08      	ldr	r2, [pc, #32]	@ (8005074 <PCD_EP_ISR_Handler+0x6e8>)
 8005052:	4313      	orrs	r3, r2
 8005054:	b29a      	uxth	r2, r3
 8005056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e026      	b.n	80050aa <PCD_EP_ISR_Handler+0x71e>
 800505c:	00000f8f 	.word	0x00000f8f
 8005060:	00000406 	.word	0x00000406
 8005064:	ffff8f8f 	.word	0xffff8f8f
 8005068:	ffff80c0 	.word	0xffff80c0
 800506c:	00000402 	.word	0x00000402
 8005070:	ffff8f0f 	.word	0xffff8f0f
 8005074:	ffff8000 	.word	0xffff8000
 8005078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d114      	bne.n	80050aa <PCD_EP_ISR_Handler+0x71e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2250      	movs	r2, #80	@ 0x50
 8005086:	5a9b      	ldrh	r3, [r3, r2]
 8005088:	b29b      	uxth	r3, r3
 800508a:	001a      	movs	r2, r3
 800508c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508e:	189b      	adds	r3, r3, r2
 8005090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	00da      	lsls	r2, r3, #3
 8005098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509a:	18d3      	adds	r3, r2, r3
 800509c:	4a3b      	ldr	r2, [pc, #236]	@ (800518c <PCD_EP_ISR_Handler+0x800>)
 800509e:	4694      	mov	ip, r2
 80050a0:	4463      	add	r3, ip
 80050a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a6:	2200      	movs	r2, #0
 80050a8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0011      	movs	r1, r2
 80050b2:	0018      	movs	r0, r3
 80050b4:	f007 fde6 	bl	800cc84 <HAL_PCD_DataInStageCallback>
 80050b8:	e058      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80050ba:	234c      	movs	r3, #76	@ 0x4c
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	881a      	ldrh	r2, [r3, #0]
 80050c0:	2380      	movs	r3, #128	@ 0x80
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4013      	ands	r3, r2
 80050c6:	d149      	bne.n	800515c <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2250      	movs	r2, #80	@ 0x50
 80050ce:	5a9b      	ldrh	r3, [r3, r2]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	001a      	movs	r2, r3
 80050d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	18d2      	adds	r2, r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	18d3      	adds	r3, r2, r3
 80050e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005190 <PCD_EP_ISR_Handler+0x804>)
 80050e4:	4694      	mov	ip, r2
 80050e6:	4463      	add	r3, ip
 80050e8:	881a      	ldrh	r2, [r3, #0]
 80050ea:	2140      	movs	r1, #64	@ 0x40
 80050ec:	187b      	adds	r3, r7, r1
 80050ee:	0592      	lsls	r2, r2, #22
 80050f0:	0d92      	lsrs	r2, r2, #22
 80050f2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80050f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d907      	bls.n	8005110 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8005100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	187b      	adds	r3, r7, r1
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	1ad2      	subs	r2, r2, r3
 800510a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800510c:	619a      	str	r2, [r3, #24]
 800510e:	e002      	b.n	8005116 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005112:	2200      	movs	r2, #0
 8005114:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800511e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0011      	movs	r1, r2
 8005126:	0018      	movs	r0, r3
 8005128:	f007 fdac 	bl	800cc84 <HAL_PCD_DataInStageCallback>
 800512c:	e01e      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800512e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005130:	695a      	ldr	r2, [r3, #20]
 8005132:	2140      	movs	r1, #64	@ 0x40
 8005134:	187b      	adds	r3, r7, r1
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	18d2      	adds	r2, r2, r3
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800513e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	187b      	adds	r3, r7, r1
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	18d2      	adds	r2, r2, r3
 8005148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005152:	0011      	movs	r1, r2
 8005154:	0018      	movs	r0, r3
 8005156:	f004 fa99 	bl	800968c <USB_EPStartXfer>
 800515a:	e007      	b.n	800516c <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800515c:	234c      	movs	r3, #76	@ 0x4c
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	881a      	ldrh	r2, [r3, #0]
 8005162:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0018      	movs	r0, r3
 8005168:	f000 f930 	bl	80053cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2244      	movs	r2, #68	@ 0x44
 8005172:	5a9b      	ldrh	r3, [r3, r2]
 8005174:	b29b      	uxth	r3, r3
 8005176:	b21b      	sxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	da01      	bge.n	8005180 <PCD_EP_ISR_Handler+0x7f4>
 800517c:	f7ff fc0c 	bl	8004998 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	0018      	movs	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	b016      	add	sp, #88	@ 0x58
 8005188:	bdb0      	pop	{r4, r5, r7, pc}
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	00000406 	.word	0x00000406
 8005190:	00000402 	.word	0x00000402

08005194 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b089      	sub	sp, #36	@ 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	1dbb      	adds	r3, r7, #6
 80051a0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051a2:	1dbb      	adds	r3, r7, #6
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	01db      	lsls	r3, r3, #7
 80051aa:	4013      	ands	r3, r2
 80051ac:	d100      	bne.n	80051b0 <HAL_PCD_EP_DB_Receive+0x1c>
 80051ae:	e07d      	b.n	80052ac <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2250      	movs	r2, #80	@ 0x50
 80051b6:	5a9b      	ldrh	r3, [r3, r2]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	001a      	movs	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	18d2      	adds	r2, r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	18d3      	adds	r3, r2, r3
 80051ca:	4a7a      	ldr	r2, [pc, #488]	@ (80053b4 <HAL_PCD_EP_DB_Receive+0x220>)
 80051cc:	4694      	mov	ip, r2
 80051ce:	4463      	add	r3, ip
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	211a      	movs	r1, #26
 80051d4:	187b      	adds	r3, r7, r1
 80051d6:	0592      	lsls	r2, r2, #22
 80051d8:	0d92      	lsrs	r2, r2, #22
 80051da:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	187b      	adds	r3, r7, r1
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d307      	bcc.n	80051f8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	1ad2      	subs	r2, r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	619a      	str	r2, [r3, #24]
 80051f6:	e002      	b.n	80051fe <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d121      	bne.n	800524a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	001a      	movs	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	18d3      	adds	r3, r2, r3
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29a      	uxth	r2, r3
 8005218:	2018      	movs	r0, #24
 800521a:	183b      	adds	r3, r7, r0
 800521c:	4966      	ldr	r1, [pc, #408]	@ (80053b8 <HAL_PCD_EP_DB_Receive+0x224>)
 800521e:	400a      	ands	r2, r1
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	183b      	adds	r3, r7, r0
 8005224:	183a      	adds	r2, r7, r0
 8005226:	8812      	ldrh	r2, [r2, #0]
 8005228:	2180      	movs	r1, #128	@ 0x80
 800522a:	0189      	lsls	r1, r1, #6
 800522c:	404a      	eors	r2, r1
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	001a      	movs	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	18d3      	adds	r3, r2, r3
 800523e:	183a      	adds	r2, r7, r0
 8005240:	8812      	ldrh	r2, [r2, #0]
 8005242:	495e      	ldr	r1, [pc, #376]	@ (80053bc <HAL_PCD_EP_DB_Receive+0x228>)
 8005244:	430a      	orrs	r2, r1
 8005246:	b292      	uxth	r2, r2
 8005248:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800524a:	1dbb      	adds	r3, r7, #6
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	2240      	movs	r2, #64	@ 0x40
 8005250:	4013      	ands	r3, r2
 8005252:	d01a      	beq.n	800528a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	001a      	movs	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	18d3      	adds	r3, r2, r3
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29a      	uxth	r2, r3
 8005266:	2016      	movs	r0, #22
 8005268:	183b      	adds	r3, r7, r0
 800526a:	4955      	ldr	r1, [pc, #340]	@ (80053c0 <HAL_PCD_EP_DB_Receive+0x22c>)
 800526c:	400a      	ands	r2, r1
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	001a      	movs	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	18d3      	adds	r3, r2, r3
 800527e:	183a      	adds	r2, r7, r0
 8005280:	8812      	ldrh	r2, [r2, #0]
 8005282:	4950      	ldr	r1, [pc, #320]	@ (80053c4 <HAL_PCD_EP_DB_Receive+0x230>)
 8005284:	430a      	orrs	r2, r1
 8005286:	b292      	uxth	r2, r2
 8005288:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800528a:	241a      	movs	r4, #26
 800528c:	193b      	adds	r3, r7, r4
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d100      	bne.n	8005296 <HAL_PCD_EP_DB_Receive+0x102>
 8005294:	e086      	b.n	80053a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6959      	ldr	r1, [r3, #20]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	891a      	ldrh	r2, [r3, #8]
 80052a2:	193b      	adds	r3, r7, r4
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	f005 fca4 	bl	800abf2 <USB_ReadPMA>
 80052aa:	e07b      	b.n	80053a4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2250      	movs	r2, #80	@ 0x50
 80052b2:	5a9b      	ldrh	r3, [r3, r2]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	001a      	movs	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	18d2      	adds	r2, r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	4a40      	ldr	r2, [pc, #256]	@ (80053c8 <HAL_PCD_EP_DB_Receive+0x234>)
 80052c8:	4694      	mov	ip, r2
 80052ca:	4463      	add	r3, ip
 80052cc:	881a      	ldrh	r2, [r3, #0]
 80052ce:	211a      	movs	r1, #26
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	0592      	lsls	r2, r2, #22
 80052d4:	0d92      	lsrs	r2, r2, #22
 80052d6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d307      	bcc.n	80052f4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	619a      	str	r2, [r3, #24]
 80052f2:	e002      	b.n	80052fa <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d121      	bne.n	8005346 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	001a      	movs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	18d3      	adds	r3, r2, r3
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29a      	uxth	r2, r3
 8005314:	201e      	movs	r0, #30
 8005316:	183b      	adds	r3, r7, r0
 8005318:	4927      	ldr	r1, [pc, #156]	@ (80053b8 <HAL_PCD_EP_DB_Receive+0x224>)
 800531a:	400a      	ands	r2, r1
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	183b      	adds	r3, r7, r0
 8005320:	183a      	adds	r2, r7, r0
 8005322:	8812      	ldrh	r2, [r2, #0]
 8005324:	2180      	movs	r1, #128	@ 0x80
 8005326:	0189      	lsls	r1, r1, #6
 8005328:	404a      	eors	r2, r1
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	001a      	movs	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	18d3      	adds	r3, r2, r3
 800533a:	183a      	adds	r2, r7, r0
 800533c:	8812      	ldrh	r2, [r2, #0]
 800533e:	491f      	ldr	r1, [pc, #124]	@ (80053bc <HAL_PCD_EP_DB_Receive+0x228>)
 8005340:	430a      	orrs	r2, r1
 8005342:	b292      	uxth	r2, r2
 8005344:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005346:	1dbb      	adds	r3, r7, #6
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	2240      	movs	r2, #64	@ 0x40
 800534c:	4013      	ands	r3, r2
 800534e:	d11a      	bne.n	8005386 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	001a      	movs	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	18d3      	adds	r3, r2, r3
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29a      	uxth	r2, r3
 8005362:	201c      	movs	r0, #28
 8005364:	183b      	adds	r3, r7, r0
 8005366:	4916      	ldr	r1, [pc, #88]	@ (80053c0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005368:	400a      	ands	r2, r1
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	001a      	movs	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	18d3      	adds	r3, r2, r3
 800537a:	183a      	adds	r2, r7, r0
 800537c:	8812      	ldrh	r2, [r2, #0]
 800537e:	4911      	ldr	r1, [pc, #68]	@ (80053c4 <HAL_PCD_EP_DB_Receive+0x230>)
 8005380:	430a      	orrs	r2, r1
 8005382:	b292      	uxth	r2, r2
 8005384:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005386:	241a      	movs	r4, #26
 8005388:	193b      	adds	r3, r7, r4
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6959      	ldr	r1, [r3, #20]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	895a      	ldrh	r2, [r3, #10]
 800539c:	193b      	adds	r3, r7, r4
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	f005 fc27 	bl	800abf2 <USB_ReadPMA>
    }
  }

  return count;
 80053a4:	231a      	movs	r3, #26
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	881b      	ldrh	r3, [r3, #0]
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b009      	add	sp, #36	@ 0x24
 80053b0:	bd90      	pop	{r4, r7, pc}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	00000402 	.word	0x00000402
 80053b8:	ffffbf8f 	.word	0xffffbf8f
 80053bc:	ffff8080 	.word	0xffff8080
 80053c0:	ffff8f8f 	.word	0xffff8f8f
 80053c4:	ffff80c0 	.word	0xffff80c0
 80053c8:	00000406 	.word	0x00000406

080053cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b0a4      	sub	sp, #144	@ 0x90
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	1dbb      	adds	r3, r7, #6
 80053d8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053da:	1dbb      	adds	r3, r7, #6
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	2240      	movs	r2, #64	@ 0x40
 80053e0:	4013      	ands	r3, r2
 80053e2:	d100      	bne.n	80053e6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80053e4:	e1e4      	b.n	80057b0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2250      	movs	r2, #80	@ 0x50
 80053ec:	5a9b      	ldrh	r3, [r3, r2]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	001a      	movs	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	18d2      	adds	r2, r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	4ad0      	ldr	r2, [pc, #832]	@ (8005744 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005402:	4694      	mov	ip, r2
 8005404:	4463      	add	r3, ip
 8005406:	881a      	ldrh	r2, [r3, #0]
 8005408:	2188      	movs	r1, #136	@ 0x88
 800540a:	187b      	adds	r3, r7, r1
 800540c:	0592      	lsls	r2, r2, #22
 800540e:	0d92      	lsrs	r2, r2, #22
 8005410:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	187b      	adds	r3, r7, r1
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d907      	bls.n	800542e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	187b      	adds	r3, r7, r1
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	1ad2      	subs	r2, r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	619a      	str	r2, [r3, #24]
 800542c:	e002      	b.n	8005434 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2200      	movs	r2, #0
 8005432:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d000      	beq.n	800543e <HAL_PCD_EP_DB_Transmit+0x72>
 800543c:	e0b5      	b.n	80055aa <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d125      	bne.n	8005492 <HAL_PCD_EP_DB_Transmit+0xc6>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2250      	movs	r2, #80	@ 0x50
 8005452:	5a9b      	ldrh	r3, [r3, r2]
 8005454:	b29b      	uxth	r3, r3
 8005456:	001a      	movs	r2, r3
 8005458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545a:	189b      	adds	r3, r3, r2
 800545c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	00da      	lsls	r2, r3, #3
 8005464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005466:	18d3      	adds	r3, r2, r3
 8005468:	4ab6      	ldr	r2, [pc, #728]	@ (8005744 <HAL_PCD_EP_DB_Transmit+0x378>)
 800546a:	4694      	mov	ip, r2
 800546c:	4463      	add	r3, ip
 800546e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	059b      	lsls	r3, r3, #22
 8005478:	0d9b      	lsrs	r3, r3, #22
 800547a:	b29a      	uxth	r2, r3
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	4ab0      	ldr	r2, [pc, #704]	@ (8005748 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	b29a      	uxth	r2, r3
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	801a      	strh	r2, [r3, #0]
 8005490:	e01b      	b.n	80054ca <HAL_PCD_EP_DB_Transmit+0xfe>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d117      	bne.n	80054ca <HAL_PCD_EP_DB_Transmit+0xfe>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2250      	movs	r2, #80	@ 0x50
 80054a6:	5a9b      	ldrh	r3, [r3, r2]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	001a      	movs	r2, r3
 80054ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	00da      	lsls	r2, r3, #3
 80054b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ba:	18d3      	adds	r3, r2, r3
 80054bc:	4aa1      	ldr	r2, [pc, #644]	@ (8005744 <HAL_PCD_EP_DB_Transmit+0x378>)
 80054be:	4694      	mov	ip, r2
 80054c0:	4463      	add	r3, ip
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c6:	2200      	movs	r2, #0
 80054c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d125      	bne.n	8005524 <HAL_PCD_EP_DB_Transmit+0x158>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2250      	movs	r2, #80	@ 0x50
 80054e4:	5a9b      	ldrh	r3, [r3, r2]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	001a      	movs	r2, r3
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	189b      	adds	r3, r3, r2
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	00da      	lsls	r2, r3, #3
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	18d3      	adds	r3, r2, r3
 80054fa:	4a94      	ldr	r2, [pc, #592]	@ (800574c <HAL_PCD_EP_DB_Transmit+0x380>)
 80054fc:	4694      	mov	ip, r2
 80054fe:	4463      	add	r3, ip
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	059b      	lsls	r3, r3, #22
 800550a:	0d9b      	lsrs	r3, r3, #22
 800550c:	b29a      	uxth	r2, r3
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	4a8b      	ldr	r2, [pc, #556]	@ (8005748 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800551a:	4313      	orrs	r3, r2
 800551c:	b29a      	uxth	r2, r3
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	e018      	b.n	8005556 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d114      	bne.n	8005556 <HAL_PCD_EP_DB_Transmit+0x18a>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2250      	movs	r2, #80	@ 0x50
 8005532:	5a9b      	ldrh	r3, [r3, r2]
 8005534:	b29b      	uxth	r3, r3
 8005536:	001a      	movs	r2, r3
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	189b      	adds	r3, r3, r2
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	00da      	lsls	r2, r3, #3
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	18d3      	adds	r3, r2, r3
 8005548:	4a80      	ldr	r2, [pc, #512]	@ (800574c <HAL_PCD_EP_DB_Transmit+0x380>)
 800554a:	4694      	mov	ip, r2
 800554c:	4463      	add	r3, ip
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2200      	movs	r2, #0
 8005554:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	0011      	movs	r1, r2
 800555e:	0018      	movs	r0, r3
 8005560:	f007 fb90 	bl	800cc84 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005564:	1dbb      	adds	r3, r7, #6
 8005566:	881a      	ldrh	r2, [r3, #0]
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	01db      	lsls	r3, r3, #7
 800556c:	4013      	ands	r3, r2
 800556e:	d100      	bne.n	8005572 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005570:	e308      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	001a      	movs	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	18d3      	adds	r3, r2, r3
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29a      	uxth	r2, r3
 8005584:	2016      	movs	r0, #22
 8005586:	183b      	adds	r3, r7, r0
 8005588:	4971      	ldr	r1, [pc, #452]	@ (8005750 <HAL_PCD_EP_DB_Transmit+0x384>)
 800558a:	400a      	ands	r2, r1
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	001a      	movs	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	18d3      	adds	r3, r2, r3
 800559c:	183a      	adds	r2, r7, r0
 800559e:	8812      	ldrh	r2, [r2, #0]
 80055a0:	496c      	ldr	r1, [pc, #432]	@ (8005754 <HAL_PCD_EP_DB_Transmit+0x388>)
 80055a2:	430a      	orrs	r2, r1
 80055a4:	b292      	uxth	r2, r2
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	e2ec      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055aa:	1dbb      	adds	r3, r7, #6
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	2380      	movs	r3, #128	@ 0x80
 80055b0:	01db      	lsls	r3, r3, #7
 80055b2:	4013      	ands	r3, r2
 80055b4:	d01a      	beq.n	80055ec <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	001a      	movs	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	208a      	movs	r0, #138	@ 0x8a
 80055ca:	183b      	adds	r3, r7, r0
 80055cc:	4960      	ldr	r1, [pc, #384]	@ (8005750 <HAL_PCD_EP_DB_Transmit+0x384>)
 80055ce:	400a      	ands	r2, r1
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	001a      	movs	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	18d3      	adds	r3, r2, r3
 80055e0:	183a      	adds	r2, r7, r0
 80055e2:	8812      	ldrh	r2, [r2, #0]
 80055e4:	495b      	ldr	r1, [pc, #364]	@ (8005754 <HAL_PCD_EP_DB_Transmit+0x388>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	b292      	uxth	r2, r2
 80055ea:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2224      	movs	r2, #36	@ 0x24
 80055f0:	5c9b      	ldrb	r3, [r3, r2]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d000      	beq.n	80055f8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80055f6:	e2c5      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	2188      	movs	r1, #136	@ 0x88
 80055fe:	187b      	adds	r3, r7, r1
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	18d2      	adds	r2, r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	187b      	adds	r3, r7, r1
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	18d2      	adds	r2, r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	d30c      	bcc.n	800563c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	218c      	movs	r1, #140	@ 0x8c
 8005628:	187a      	adds	r2, r7, r1
 800562a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	187b      	adds	r3, r7, r1
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	621a      	str	r2, [r3, #32]
 800563a:	e01a      	b.n	8005672 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005644:	2388      	movs	r3, #136	@ 0x88
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	228c      	movs	r2, #140	@ 0x8c
 800564c:	18ba      	adds	r2, r7, r2
 800564e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2224      	movs	r2, #36	@ 0x24
 8005654:	2100      	movs	r1, #0
 8005656:	5499      	strb	r1, [r3, r2]
 8005658:	e00b      	b.n	8005672 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2224      	movs	r2, #36	@ 0x24
 800565e:	2100      	movs	r1, #0
 8005660:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	228c      	movs	r2, #140	@ 0x8c
 8005668:	18ba      	adds	r2, r7, r2
 800566a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2200      	movs	r2, #0
 8005670:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d000      	beq.n	800567c <HAL_PCD_EP_DB_Transmit+0x2b0>
 800567a:	e06d      	b.n	8005758 <HAL_PCD_EP_DB_Transmit+0x38c>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2250      	movs	r2, #80	@ 0x50
 8005688:	5a9b      	ldrh	r3, [r3, r2]
 800568a:	b29b      	uxth	r3, r3
 800568c:	001a      	movs	r2, r3
 800568e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005690:	189b      	adds	r3, r3, r2
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	00da      	lsls	r2, r3, #3
 800569a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569c:	18d3      	adds	r3, r2, r3
 800569e:	4a29      	ldr	r2, [pc, #164]	@ (8005744 <HAL_PCD_EP_DB_Transmit+0x378>)
 80056a0:	4694      	mov	ip, r2
 80056a2:	4463      	add	r3, ip
 80056a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	059b      	lsls	r3, r3, #22
 80056ae:	0d9b      	lsrs	r3, r3, #22
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	238c      	movs	r3, #140	@ 0x8c
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <HAL_PCD_EP_DB_Transmit+0x306>
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	4a20      	ldr	r2, [pc, #128]	@ (8005748 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	801a      	strh	r2, [r3, #0]
 80056d0:	e061      	b.n	8005796 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80056d2:	228c      	movs	r2, #140	@ 0x8c
 80056d4:	18bb      	adds	r3, r7, r2
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80056da:	d817      	bhi.n	800570c <HAL_PCD_EP_DB_Transmit+0x340>
 80056dc:	18bb      	adds	r3, r7, r2
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056e4:	18bb      	adds	r3, r7, r2
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2201      	movs	r2, #1
 80056ea:	4013      	ands	r3, r2
 80056ec:	d002      	beq.n	80056f4 <HAL_PCD_EP_DB_Transmit+0x328>
 80056ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056f0:	3301      	adds	r3, #1
 80056f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	029b      	lsls	r3, r3, #10
 8005700:	b29b      	uxth	r3, r3
 8005702:	4313      	orrs	r3, r2
 8005704:	b29a      	uxth	r2, r3
 8005706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	e044      	b.n	8005796 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800570c:	228c      	movs	r2, #140	@ 0x8c
 800570e:	18bb      	adds	r3, r7, r2
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005716:	18bb      	adds	r3, r7, r2
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	221f      	movs	r2, #31
 800571c:	4013      	ands	r3, r2
 800571e:	d102      	bne.n	8005726 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005722:	3b01      	subs	r3, #1
 8005724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29a      	uxth	r2, r3
 800572c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800572e:	b29b      	uxth	r3, r3
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	b29b      	uxth	r3, r3
 8005734:	4313      	orrs	r3, r2
 8005736:	b29b      	uxth	r3, r3
 8005738:	4a03      	ldr	r2, [pc, #12]	@ (8005748 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	b29a      	uxth	r2, r3
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e028      	b.n	8005796 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005744:	00000402 	.word	0x00000402
 8005748:	ffff8000 	.word	0xffff8000
 800574c:	00000406 	.word	0x00000406
 8005750:	ffff8f8f 	.word	0xffff8f8f
 8005754:	ffffc080 	.word	0xffffc080
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d11a      	bne.n	8005796 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	647b      	str	r3, [r7, #68]	@ 0x44
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2250      	movs	r2, #80	@ 0x50
 800576c:	5a9b      	ldrh	r3, [r3, r2]
 800576e:	b29b      	uxth	r3, r3
 8005770:	001a      	movs	r2, r3
 8005772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005774:	189b      	adds	r3, r3, r2
 8005776:	647b      	str	r3, [r7, #68]	@ 0x44
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	00da      	lsls	r2, r3, #3
 800577e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005780:	18d3      	adds	r3, r2, r3
 8005782:	4ad9      	ldr	r2, [pc, #868]	@ (8005ae8 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005784:	4694      	mov	ip, r2
 8005786:	4463      	add	r3, ip
 8005788:	643b      	str	r3, [r7, #64]	@ 0x40
 800578a:	238c      	movs	r3, #140	@ 0x8c
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	b29a      	uxth	r2, r3
 8005792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005794:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6959      	ldr	r1, [r3, #20]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	891a      	ldrh	r2, [r3, #8]
 80057a2:	238c      	movs	r3, #140	@ 0x8c
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f005 f9d9 	bl	800ab60 <USB_WritePMA>
 80057ae:	e1e9      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2250      	movs	r2, #80	@ 0x50
 80057b6:	5a9b      	ldrh	r3, [r3, r2]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	001a      	movs	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	18d2      	adds	r2, r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	18d3      	adds	r3, r2, r3
 80057ca:	4ac8      	ldr	r2, [pc, #800]	@ (8005aec <HAL_PCD_EP_DB_Transmit+0x720>)
 80057cc:	4694      	mov	ip, r2
 80057ce:	4463      	add	r3, ip
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	2188      	movs	r1, #136	@ 0x88
 80057d4:	187b      	adds	r3, r7, r1
 80057d6:	0592      	lsls	r2, r2, #22
 80057d8:	0d92      	lsrs	r2, r2, #22
 80057da:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d307      	bcc.n	80057f8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	187b      	adds	r3, r7, r1
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	1ad2      	subs	r2, r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	619a      	str	r2, [r3, #24]
 80057f6:	e002      	b.n	80057fe <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d000      	beq.n	8005808 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005806:	e0bb      	b.n	8005980 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d125      	bne.n	800585c <HAL_PCD_EP_DB_Transmit+0x490>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2250      	movs	r2, #80	@ 0x50
 800581c:	5a9b      	ldrh	r3, [r3, r2]
 800581e:	b29b      	uxth	r3, r3
 8005820:	001a      	movs	r2, r3
 8005822:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005824:	189b      	adds	r3, r3, r2
 8005826:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	00da      	lsls	r2, r3, #3
 800582e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005830:	18d3      	adds	r3, r2, r3
 8005832:	4aad      	ldr	r2, [pc, #692]	@ (8005ae8 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005834:	4694      	mov	ip, r2
 8005836:	4463      	add	r3, ip
 8005838:	67bb      	str	r3, [r7, #120]	@ 0x78
 800583a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	059b      	lsls	r3, r3, #22
 8005842:	0d9b      	lsrs	r3, r3, #22
 8005844:	b29a      	uxth	r2, r3
 8005846:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	4aa7      	ldr	r2, [pc, #668]	@ (8005af0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005852:	4313      	orrs	r3, r2
 8005854:	b29a      	uxth	r2, r3
 8005856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	e01b      	b.n	8005894 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d117      	bne.n	8005894 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	667b      	str	r3, [r7, #100]	@ 0x64
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2250      	movs	r2, #80	@ 0x50
 8005870:	5a9b      	ldrh	r3, [r3, r2]
 8005872:	b29b      	uxth	r3, r3
 8005874:	001a      	movs	r2, r3
 8005876:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005878:	189b      	adds	r3, r3, r2
 800587a:	667b      	str	r3, [r7, #100]	@ 0x64
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	00da      	lsls	r2, r3, #3
 8005882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005884:	18d3      	adds	r3, r2, r3
 8005886:	4a98      	ldr	r2, [pc, #608]	@ (8005ae8 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005888:	4694      	mov	ip, r2
 800588a:	4463      	add	r3, ip
 800588c:	663b      	str	r3, [r7, #96]	@ 0x60
 800588e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005890:	2200      	movs	r2, #0
 8005892:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	677b      	str	r3, [r7, #116]	@ 0x74
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d12b      	bne.n	80058fa <HAL_PCD_EP_DB_Transmit+0x52e>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2250      	movs	r2, #80	@ 0x50
 80058ae:	5a9b      	ldrh	r3, [r3, r2]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	001a      	movs	r2, r3
 80058b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	00da      	lsls	r2, r3, #3
 80058c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058c2:	18d3      	adds	r3, r2, r3
 80058c4:	4a89      	ldr	r2, [pc, #548]	@ (8005aec <HAL_PCD_EP_DB_Transmit+0x720>)
 80058c6:	4694      	mov	ip, r2
 80058c8:	4463      	add	r3, ip
 80058ca:	2184      	movs	r1, #132	@ 0x84
 80058cc:	187a      	adds	r2, r7, r1
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	187b      	adds	r3, r7, r1
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	059b      	lsls	r3, r3, #22
 80058da:	0d9b      	lsrs	r3, r3, #22
 80058dc:	b29a      	uxth	r2, r3
 80058de:	187b      	adds	r3, r7, r1
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	187b      	adds	r3, r7, r1
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	4a80      	ldr	r2, [pc, #512]	@ (8005af0 <HAL_PCD_EP_DB_Transmit+0x724>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	e018      	b.n	800592c <HAL_PCD_EP_DB_Transmit+0x560>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d114      	bne.n	800592c <HAL_PCD_EP_DB_Transmit+0x560>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2250      	movs	r2, #80	@ 0x50
 8005908:	5a9b      	ldrh	r3, [r3, r2]
 800590a:	b29b      	uxth	r3, r3
 800590c:	001a      	movs	r2, r3
 800590e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005910:	189b      	adds	r3, r3, r2
 8005912:	677b      	str	r3, [r7, #116]	@ 0x74
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	00da      	lsls	r2, r3, #3
 800591a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800591c:	18d3      	adds	r3, r2, r3
 800591e:	4a73      	ldr	r2, [pc, #460]	@ (8005aec <HAL_PCD_EP_DB_Transmit+0x720>)
 8005920:	4694      	mov	ip, r2
 8005922:	4463      	add	r3, ip
 8005924:	673b      	str	r3, [r7, #112]	@ 0x70
 8005926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005928:	2200      	movs	r2, #0
 800592a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	0011      	movs	r1, r2
 8005934:	0018      	movs	r0, r3
 8005936:	f007 f9a5 	bl	800cc84 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800593a:	1dbb      	adds	r3, r7, #6
 800593c:	881a      	ldrh	r2, [r3, #0]
 800593e:	2380      	movs	r3, #128	@ 0x80
 8005940:	01db      	lsls	r3, r3, #7
 8005942:	4013      	ands	r3, r2
 8005944:	d000      	beq.n	8005948 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005946:	e11d      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	001a      	movs	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	18d3      	adds	r3, r2, r3
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29a      	uxth	r2, r3
 800595a:	2082      	movs	r0, #130	@ 0x82
 800595c:	183b      	adds	r3, r7, r0
 800595e:	4965      	ldr	r1, [pc, #404]	@ (8005af4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005960:	400a      	ands	r2, r1
 8005962:	801a      	strh	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	001a      	movs	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	18d3      	adds	r3, r2, r3
 8005972:	183a      	adds	r2, r7, r0
 8005974:	8812      	ldrh	r2, [r2, #0]
 8005976:	4960      	ldr	r1, [pc, #384]	@ (8005af8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005978:	430a      	orrs	r2, r1
 800597a:	b292      	uxth	r2, r2
 800597c:	801a      	strh	r2, [r3, #0]
 800597e:	e101      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005980:	1dbb      	adds	r3, r7, #6
 8005982:	881a      	ldrh	r2, [r3, #0]
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	01db      	lsls	r3, r3, #7
 8005988:	4013      	ands	r3, r2
 800598a:	d11a      	bne.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	001a      	movs	r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	18d3      	adds	r3, r2, r3
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29a      	uxth	r2, r3
 800599e:	204e      	movs	r0, #78	@ 0x4e
 80059a0:	183b      	adds	r3, r7, r0
 80059a2:	4954      	ldr	r1, [pc, #336]	@ (8005af4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80059a4:	400a      	ands	r2, r1
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	001a      	movs	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	18d3      	adds	r3, r2, r3
 80059b6:	183a      	adds	r2, r7, r0
 80059b8:	8812      	ldrh	r2, [r2, #0]
 80059ba:	494f      	ldr	r1, [pc, #316]	@ (8005af8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80059bc:	430a      	orrs	r2, r1
 80059be:	b292      	uxth	r2, r2
 80059c0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2224      	movs	r2, #36	@ 0x24
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d000      	beq.n	80059ce <HAL_PCD_EP_DB_Transmit+0x602>
 80059cc:	e0da      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	2188      	movs	r1, #136	@ 0x88
 80059d4:	187b      	adds	r3, r7, r1
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	18d2      	adds	r2, r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	187b      	adds	r3, r7, r1
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	18d2      	adds	r2, r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d30c      	bcc.n	8005a12 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	218c      	movs	r1, #140	@ 0x8c
 80059fe:	187a      	adds	r2, r7, r1
 8005a00:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	6a1a      	ldr	r2, [r3, #32]
 8005a06:	187b      	adds	r3, r7, r1
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	621a      	str	r2, [r3, #32]
 8005a10:	e01a      	b.n	8005a48 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8005a1a:	2388      	movs	r3, #136	@ 0x88
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	228c      	movs	r2, #140	@ 0x8c
 8005a22:	18ba      	adds	r2, r7, r2
 8005a24:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2224      	movs	r2, #36	@ 0x24
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	5499      	strb	r1, [r3, r2]
 8005a2e:	e00b      	b.n	8005a48 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	228c      	movs	r2, #140	@ 0x8c
 8005a36:	18ba      	adds	r2, r7, r2
 8005a38:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2224      	movs	r2, #36	@ 0x24
 8005a44:	2100      	movs	r1, #0
 8005a46:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d000      	beq.n	8005a58 <HAL_PCD_EP_DB_Transmit+0x68c>
 8005a56:	e06d      	b.n	8005b34 <HAL_PCD_EP_DB_Transmit+0x768>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2250      	movs	r2, #80	@ 0x50
 8005a64:	5a9b      	ldrh	r3, [r3, r2]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	001a      	movs	r2, r3
 8005a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	00da      	lsls	r2, r3, #3
 8005a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aec <HAL_PCD_EP_DB_Transmit+0x720>)
 8005a7c:	4694      	mov	ip, r2
 8005a7e:	4463      	add	r3, ip
 8005a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	059b      	lsls	r3, r3, #22
 8005a8a:	0d9b      	lsrs	r3, r3, #22
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	238c      	movs	r3, #140	@ 0x8c
 8005a94:	18fb      	adds	r3, r7, r3
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d108      	bne.n	8005aae <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4a13      	ldr	r2, [pc, #76]	@ (8005af0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e05e      	b.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005aae:	228c      	movs	r2, #140	@ 0x8c
 8005ab0:	18bb      	adds	r3, r7, r2
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ab6:	d821      	bhi.n	8005afc <HAL_PCD_EP_DB_Transmit+0x730>
 8005ab8:	18bb      	adds	r3, r7, r2
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ac0:	18bb      	adds	r3, r7, r2
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d002      	beq.n	8005ad0 <HAL_PCD_EP_DB_Transmit+0x704>
 8005aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005acc:	3301      	adds	r3, #1
 8005ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e041      	b.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005ae8:	00000402 	.word	0x00000402
 8005aec:	00000406 	.word	0x00000406
 8005af0:	ffff8000 	.word	0xffff8000
 8005af4:	ffff8f8f 	.word	0xffff8f8f
 8005af8:	ffffc080 	.word	0xffffc080
 8005afc:	228c      	movs	r2, #140	@ 0x8c
 8005afe:	18bb      	adds	r3, r7, r2
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b06:	18bb      	adds	r3, r7, r2
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	221f      	movs	r2, #31
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d102      	bne.n	8005b16 <HAL_PCD_EP_DB_Transmit+0x74a>
 8005b10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b12:	3b01      	subs	r3, #1
 8005b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	029b      	lsls	r3, r3, #10
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	4313      	orrs	r3, r2
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	4a2c      	ldr	r2, [pc, #176]	@ (8005bdc <HAL_PCD_EP_DB_Transmit+0x810>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	e01b      	b.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d117      	bne.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2250      	movs	r2, #80	@ 0x50
 8005b42:	5a9b      	ldrh	r3, [r3, r2]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	001a      	movs	r2, r3
 8005b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4a:	189b      	adds	r3, r3, r2
 8005b4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	00da      	lsls	r2, r3, #3
 8005b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b56:	18d3      	adds	r3, r2, r3
 8005b58:	4a21      	ldr	r2, [pc, #132]	@ (8005be0 <HAL_PCD_EP_DB_Transmit+0x814>)
 8005b5a:	4694      	mov	ip, r2
 8005b5c:	4463      	add	r3, ip
 8005b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b60:	238c      	movs	r3, #140	@ 0x8c
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b6a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6959      	ldr	r1, [r3, #20]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	895a      	ldrh	r2, [r3, #10]
 8005b78:	238c      	movs	r3, #140	@ 0x8c
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f004 ffee 	bl	800ab60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	001a      	movs	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	18d3      	adds	r3, r2, r3
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	2014      	movs	r0, #20
 8005b98:	183b      	adds	r3, r7, r0
 8005b9a:	4912      	ldr	r1, [pc, #72]	@ (8005be4 <HAL_PCD_EP_DB_Transmit+0x818>)
 8005b9c:	400a      	ands	r2, r1
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	183b      	adds	r3, r7, r0
 8005ba2:	183a      	adds	r2, r7, r0
 8005ba4:	8812      	ldrh	r2, [r2, #0]
 8005ba6:	2110      	movs	r1, #16
 8005ba8:	404a      	eors	r2, r1
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	183b      	adds	r3, r7, r0
 8005bae:	183a      	adds	r2, r7, r0
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	2120      	movs	r1, #32
 8005bb4:	404a      	eors	r2, r1
 8005bb6:	801a      	strh	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	18d3      	adds	r3, r2, r3
 8005bc6:	183a      	adds	r2, r7, r0
 8005bc8:	8812      	ldrh	r2, [r2, #0]
 8005bca:	4907      	ldr	r1, [pc, #28]	@ (8005be8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	b292      	uxth	r2, r2
 8005bd0:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b024      	add	sp, #144	@ 0x90
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	ffff8000 	.word	0xffff8000
 8005be0:	00000406 	.word	0x00000406
 8005be4:	ffff8fbf 	.word	0xffff8fbf
 8005be8:	ffff8080 	.word	0xffff8080

08005bec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	0008      	movs	r0, r1
 8005bf6:	0011      	movs	r1, r2
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	240a      	movs	r4, #10
 8005bfc:	193b      	adds	r3, r7, r4
 8005bfe:	1c02      	adds	r2, r0, #0
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	2308      	movs	r3, #8
 8005c04:	18fb      	adds	r3, r7, r3
 8005c06:	1c0a      	adds	r2, r1, #0
 8005c08:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c0a:	0021      	movs	r1, r4
 8005c0c:	187b      	adds	r3, r7, r1
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	2280      	movs	r2, #128	@ 0x80
 8005c12:	4013      	ands	r3, r2
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c1a:	187b      	adds	r3, r7, r1
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	2207      	movs	r2, #7
 8005c20:	401a      	ands	r2, r3
 8005c22:	0013      	movs	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	3310      	adds	r3, #16
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	18d3      	adds	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e00b      	b.n	8005c4c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c34:	230a      	movs	r3, #10
 8005c36:	18fb      	adds	r3, r7, r3
 8005c38:	881a      	ldrh	r2, [r3, #0]
 8005c3a:	0013      	movs	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	3351      	adds	r3, #81	@ 0x51
 8005c44:	33ff      	adds	r3, #255	@ 0xff
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	18d3      	adds	r3, r2, r3
 8005c4a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d107      	bne.n	8005c66 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	80da      	strh	r2, [r3, #6]
 8005c64:	e00b      	b.n	8005c7e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	0c1b      	lsrs	r3, r3, #16
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b007      	add	sp, #28
 8005c86:	bd90      	pop	{r4, r7, pc}

08005c88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	23b4      	movs	r3, #180	@ 0xb4
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	23b2      	movs	r3, #178	@ 0xb2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2254      	movs	r2, #84	@ 0x54
 8005cae:	5a9b      	ldrh	r3, [r3, r2]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	b299      	uxth	r1, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2254      	movs	r2, #84	@ 0x54
 8005cbc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2254      	movs	r2, #84	@ 0x54
 8005cc2:	5a9b      	ldrh	r3, [r3, r2]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	b299      	uxth	r1, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2254      	movs	r2, #84	@ 0x54
 8005cd0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b004      	add	sp, #16
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	000a      	movs	r2, r1
 8005ce6:	1cfb      	adds	r3, r7, #3
 8005ce8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b002      	add	sp, #8
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d102      	bne.n	8005d08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f000 fb76 	bl	80063f4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d100      	bne.n	8005d14 <HAL_RCC_OscConfig+0x20>
 8005d12:	e08e      	b.n	8005e32 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d14:	4bc5      	ldr	r3, [pc, #788]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	220c      	movs	r2, #12
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d00e      	beq.n	8005d3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d20:	4bc2      	ldr	r3, [pc, #776]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	220c      	movs	r2, #12
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d117      	bne.n	8005d5c <HAL_RCC_OscConfig+0x68>
 8005d2c:	4bbf      	ldr	r3, [pc, #764]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	23c0      	movs	r3, #192	@ 0xc0
 8005d32:	025b      	lsls	r3, r3, #9
 8005d34:	401a      	ands	r2, r3
 8005d36:	2380      	movs	r3, #128	@ 0x80
 8005d38:	025b      	lsls	r3, r3, #9
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d10e      	bne.n	8005d5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3e:	4bbb      	ldr	r3, [pc, #748]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	2380      	movs	r3, #128	@ 0x80
 8005d44:	029b      	lsls	r3, r3, #10
 8005d46:	4013      	ands	r3, r2
 8005d48:	d100      	bne.n	8005d4c <HAL_RCC_OscConfig+0x58>
 8005d4a:	e071      	b.n	8005e30 <HAL_RCC_OscConfig+0x13c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d000      	beq.n	8005d56 <HAL_RCC_OscConfig+0x62>
 8005d54:	e06c      	b.n	8005e30 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f000 fb4c 	bl	80063f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d107      	bne.n	8005d74 <HAL_RCC_OscConfig+0x80>
 8005d64:	4bb1      	ldr	r3, [pc, #708]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4bb0      	ldr	r3, [pc, #704]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d6a:	2180      	movs	r1, #128	@ 0x80
 8005d6c:	0249      	lsls	r1, r1, #9
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	e02f      	b.n	8005dd4 <HAL_RCC_OscConfig+0xe0>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10c      	bne.n	8005d96 <HAL_RCC_OscConfig+0xa2>
 8005d7c:	4bab      	ldr	r3, [pc, #684]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4baa      	ldr	r3, [pc, #680]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d82:	49ab      	ldr	r1, [pc, #684]	@ (8006030 <HAL_RCC_OscConfig+0x33c>)
 8005d84:	400a      	ands	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	4ba8      	ldr	r3, [pc, #672]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4ba7      	ldr	r3, [pc, #668]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005d8e:	49a9      	ldr	r1, [pc, #676]	@ (8006034 <HAL_RCC_OscConfig+0x340>)
 8005d90:	400a      	ands	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e01e      	b.n	8005dd4 <HAL_RCC_OscConfig+0xe0>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	d10e      	bne.n	8005dbc <HAL_RCC_OscConfig+0xc8>
 8005d9e:	4ba3      	ldr	r3, [pc, #652]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4ba2      	ldr	r3, [pc, #648]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005da4:	2180      	movs	r1, #128	@ 0x80
 8005da6:	02c9      	lsls	r1, r1, #11
 8005da8:	430a      	orrs	r2, r1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	4b9f      	ldr	r3, [pc, #636]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b9e      	ldr	r3, [pc, #632]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005db2:	2180      	movs	r1, #128	@ 0x80
 8005db4:	0249      	lsls	r1, r1, #9
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCC_OscConfig+0xe0>
 8005dbc:	4b9b      	ldr	r3, [pc, #620]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4b9a      	ldr	r3, [pc, #616]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005dc2:	499b      	ldr	r1, [pc, #620]	@ (8006030 <HAL_RCC_OscConfig+0x33c>)
 8005dc4:	400a      	ands	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	4b98      	ldr	r3, [pc, #608]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b97      	ldr	r3, [pc, #604]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005dce:	4999      	ldr	r1, [pc, #612]	@ (8006034 <HAL_RCC_OscConfig+0x340>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d014      	beq.n	8005e06 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fd f8dc 	bl	8002f98 <HAL_GetTick>
 8005de0:	0003      	movs	r3, r0
 8005de2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de6:	f7fd f8d7 	bl	8002f98 <HAL_GetTick>
 8005dea:	0002      	movs	r2, r0
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b64      	cmp	r3, #100	@ 0x64
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e2fd      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df8:	4b8c      	ldr	r3, [pc, #560]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2380      	movs	r3, #128	@ 0x80
 8005dfe:	029b      	lsls	r3, r3, #10
 8005e00:	4013      	ands	r3, r2
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0xf2>
 8005e04:	e015      	b.n	8005e32 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fd f8c7 	bl	8002f98 <HAL_GetTick>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e10:	f7fd f8c2 	bl	8002f98 <HAL_GetTick>
 8005e14:	0002      	movs	r2, r0
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	@ 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e2e8      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e22:	4b82      	ldr	r3, [pc, #520]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	2380      	movs	r3, #128	@ 0x80
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x11c>
 8005e2e:	e000      	b.n	8005e32 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e30:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2202      	movs	r2, #2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <HAL_RCC_OscConfig+0x14a>
 8005e3c:	e06c      	b.n	8005f18 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	220c      	movs	r2, #12
 8005e44:	4013      	ands	r3, r2
 8005e46:	d00e      	beq.n	8005e66 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005e48:	4b78      	ldr	r3, [pc, #480]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	220c      	movs	r2, #12
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d11f      	bne.n	8005e94 <HAL_RCC_OscConfig+0x1a0>
 8005e54:	4b75      	ldr	r3, [pc, #468]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	23c0      	movs	r3, #192	@ 0xc0
 8005e5a:	025b      	lsls	r3, r3, #9
 8005e5c:	401a      	ands	r2, r3
 8005e5e:	2380      	movs	r3, #128	@ 0x80
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d116      	bne.n	8005e94 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e66:	4b71      	ldr	r3, [pc, #452]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_OscConfig+0x188>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d001      	beq.n	8005e7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e2bb      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	22f8      	movs	r2, #248	@ 0xf8
 8005e82:	4393      	bics	r3, r2
 8005e84:	0019      	movs	r1, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	00da      	lsls	r2, r3, #3
 8005e8c:	4b67      	ldr	r3, [pc, #412]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e92:	e041      	b.n	8005f18 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d024      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e9c:	4b63      	ldr	r3, [pc, #396]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4b62      	ldr	r3, [pc, #392]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea8:	f7fd f876 	bl	8002f98 <HAL_GetTick>
 8005eac:	0003      	movs	r3, r0
 8005eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb2:	f7fd f871 	bl	8002f98 <HAL_GetTick>
 8005eb6:	0002      	movs	r2, r0
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e297      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec4:	4b59      	ldr	r3, [pc, #356]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d0f1      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ece:	4b57      	ldr	r3, [pc, #348]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	22f8      	movs	r2, #248	@ 0xf8
 8005ed4:	4393      	bics	r3, r2
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	00da      	lsls	r2, r3, #3
 8005ede:	4b53      	ldr	r3, [pc, #332]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e018      	b.n	8005f18 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee6:	4b51      	ldr	r3, [pc, #324]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b50      	ldr	r3, [pc, #320]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005eec:	2101      	movs	r1, #1
 8005eee:	438a      	bics	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef2:	f7fd f851 	bl	8002f98 <HAL_GetTick>
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efc:	f7fd f84c 	bl	8002f98 <HAL_GetTick>
 8005f00:	0002      	movs	r2, r0
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e272      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0e:	4b47      	ldr	r3, [pc, #284]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2202      	movs	r2, #2
 8005f14:	4013      	ands	r3, r2
 8005f16:	d1f1      	bne.n	8005efc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d036      	beq.n	8005f90 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d019      	beq.n	8005f5e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f2a:	4b40      	ldr	r3, [pc, #256]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005f30:	2101      	movs	r1, #1
 8005f32:	430a      	orrs	r2, r1
 8005f34:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f36:	f7fd f82f 	bl	8002f98 <HAL_GetTick>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f40:	f7fd f82a 	bl	8002f98 <HAL_GetTick>
 8005f44:	0002      	movs	r2, r0
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e250      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f52:	4b36      	ldr	r3, [pc, #216]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	2202      	movs	r2, #2
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d0f1      	beq.n	8005f40 <HAL_RCC_OscConfig+0x24c>
 8005f5c:	e018      	b.n	8005f90 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5e:	4b33      	ldr	r3, [pc, #204]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f62:	4b32      	ldr	r3, [pc, #200]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005f64:	2101      	movs	r1, #1
 8005f66:	438a      	bics	r2, r1
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6a:	f7fd f815 	bl	8002f98 <HAL_GetTick>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f74:	f7fd f810 	bl	8002f98 <HAL_GetTick>
 8005f78:	0002      	movs	r2, r0
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e236      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f86:	4b29      	ldr	r3, [pc, #164]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d1f1      	bne.n	8005f74 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2204      	movs	r2, #4
 8005f96:	4013      	ands	r3, r2
 8005f98:	d100      	bne.n	8005f9c <HAL_RCC_OscConfig+0x2a8>
 8005f9a:	e0b5      	b.n	8006108 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f9c:	201f      	movs	r0, #31
 8005f9e:	183b      	adds	r3, r7, r0
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa4:	4b21      	ldr	r3, [pc, #132]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	2380      	movs	r3, #128	@ 0x80
 8005faa:	055b      	lsls	r3, r3, #21
 8005fac:	4013      	ands	r3, r2
 8005fae:	d110      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005fb6:	2180      	movs	r1, #128	@ 0x80
 8005fb8:	0549      	lsls	r1, r1, #21
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	61da      	str	r2, [r3, #28]
 8005fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8005fc0:	69da      	ldr	r2, [r3, #28]
 8005fc2:	2380      	movs	r3, #128	@ 0x80
 8005fc4:	055b      	lsls	r3, r3, #21
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fcc:	183b      	adds	r3, r7, r0
 8005fce:	2201      	movs	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd2:	4b19      	ldr	r3, [pc, #100]	@ (8006038 <HAL_RCC_OscConfig+0x344>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d11a      	bne.n	8006014 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fde:	4b16      	ldr	r3, [pc, #88]	@ (8006038 <HAL_RCC_OscConfig+0x344>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	@ (8006038 <HAL_RCC_OscConfig+0x344>)
 8005fe4:	2180      	movs	r1, #128	@ 0x80
 8005fe6:	0049      	lsls	r1, r1, #1
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fec:	f7fc ffd4 	bl	8002f98 <HAL_GetTick>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff6:	f7fc ffcf 	bl	8002f98 <HAL_GetTick>
 8005ffa:	0002      	movs	r2, r0
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b64      	cmp	r3, #100	@ 0x64
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e1f5      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006008:	4b0b      	ldr	r3, [pc, #44]	@ (8006038 <HAL_RCC_OscConfig+0x344>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	4013      	ands	r3, r2
 8006012:	d0f0      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10f      	bne.n	800603c <HAL_RCC_OscConfig+0x348>
 800601c:	4b03      	ldr	r3, [pc, #12]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 800601e:	6a1a      	ldr	r2, [r3, #32]
 8006020:	4b02      	ldr	r3, [pc, #8]	@ (800602c <HAL_RCC_OscConfig+0x338>)
 8006022:	2101      	movs	r1, #1
 8006024:	430a      	orrs	r2, r1
 8006026:	621a      	str	r2, [r3, #32]
 8006028:	e036      	b.n	8006098 <HAL_RCC_OscConfig+0x3a4>
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	40021000 	.word	0x40021000
 8006030:	fffeffff 	.word	0xfffeffff
 8006034:	fffbffff 	.word	0xfffbffff
 8006038:	40007000 	.word	0x40007000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10c      	bne.n	800605e <HAL_RCC_OscConfig+0x36a>
 8006044:	4bca      	ldr	r3, [pc, #808]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	4bc9      	ldr	r3, [pc, #804]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800604a:	2101      	movs	r1, #1
 800604c:	438a      	bics	r2, r1
 800604e:	621a      	str	r2, [r3, #32]
 8006050:	4bc7      	ldr	r3, [pc, #796]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	4bc6      	ldr	r3, [pc, #792]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006056:	2104      	movs	r1, #4
 8006058:	438a      	bics	r2, r1
 800605a:	621a      	str	r2, [r3, #32]
 800605c:	e01c      	b.n	8006098 <HAL_RCC_OscConfig+0x3a4>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b05      	cmp	r3, #5
 8006064:	d10c      	bne.n	8006080 <HAL_RCC_OscConfig+0x38c>
 8006066:	4bc2      	ldr	r3, [pc, #776]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	4bc1      	ldr	r3, [pc, #772]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800606c:	2104      	movs	r1, #4
 800606e:	430a      	orrs	r2, r1
 8006070:	621a      	str	r2, [r3, #32]
 8006072:	4bbf      	ldr	r3, [pc, #764]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006074:	6a1a      	ldr	r2, [r3, #32]
 8006076:	4bbe      	ldr	r3, [pc, #760]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006078:	2101      	movs	r1, #1
 800607a:	430a      	orrs	r2, r1
 800607c:	621a      	str	r2, [r3, #32]
 800607e:	e00b      	b.n	8006098 <HAL_RCC_OscConfig+0x3a4>
 8006080:	4bbb      	ldr	r3, [pc, #748]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006082:	6a1a      	ldr	r2, [r3, #32]
 8006084:	4bba      	ldr	r3, [pc, #744]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006086:	2101      	movs	r1, #1
 8006088:	438a      	bics	r2, r1
 800608a:	621a      	str	r2, [r3, #32]
 800608c:	4bb8      	ldr	r3, [pc, #736]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	4bb7      	ldr	r3, [pc, #732]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006092:	2104      	movs	r1, #4
 8006094:	438a      	bics	r2, r1
 8006096:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d014      	beq.n	80060ca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a0:	f7fc ff7a 	bl	8002f98 <HAL_GetTick>
 80060a4:	0003      	movs	r3, r0
 80060a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a8:	e009      	b.n	80060be <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fc ff75 	bl	8002f98 <HAL_GetTick>
 80060ae:	0002      	movs	r2, r0
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	4aaf      	ldr	r2, [pc, #700]	@ (8006374 <HAL_RCC_OscConfig+0x680>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e19a      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060be:	4bac      	ldr	r3, [pc, #688]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	2202      	movs	r2, #2
 80060c4:	4013      	ands	r3, r2
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x3b6>
 80060c8:	e013      	b.n	80060f2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ca:	f7fc ff65 	bl	8002f98 <HAL_GetTick>
 80060ce:	0003      	movs	r3, r0
 80060d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d2:	e009      	b.n	80060e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d4:	f7fc ff60 	bl	8002f98 <HAL_GetTick>
 80060d8:	0002      	movs	r2, r0
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	4aa5      	ldr	r2, [pc, #660]	@ (8006374 <HAL_RCC_OscConfig+0x680>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e185      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e8:	4ba1      	ldr	r3, [pc, #644]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	2202      	movs	r2, #2
 80060ee:	4013      	ands	r3, r2
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060f2:	231f      	movs	r3, #31
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d105      	bne.n	8006108 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060fc:	4b9c      	ldr	r3, [pc, #624]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	4b9b      	ldr	r3, [pc, #620]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006102:	499d      	ldr	r1, [pc, #628]	@ (8006378 <HAL_RCC_OscConfig+0x684>)
 8006104:	400a      	ands	r2, r1
 8006106:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2210      	movs	r2, #16
 800610e:	4013      	ands	r3, r2
 8006110:	d063      	beq.n	80061da <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d12a      	bne.n	8006170 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800611a:	4b95      	ldr	r3, [pc, #596]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800611c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800611e:	4b94      	ldr	r3, [pc, #592]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006120:	2104      	movs	r1, #4
 8006122:	430a      	orrs	r2, r1
 8006124:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006126:	4b92      	ldr	r3, [pc, #584]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800612a:	4b91      	ldr	r3, [pc, #580]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800612c:	2101      	movs	r1, #1
 800612e:	430a      	orrs	r2, r1
 8006130:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006132:	f7fc ff31 	bl	8002f98 <HAL_GetTick>
 8006136:	0003      	movs	r3, r0
 8006138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800613c:	f7fc ff2c 	bl	8002f98 <HAL_GetTick>
 8006140:	0002      	movs	r2, r0
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e152      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800614e:	4b88      	ldr	r3, [pc, #544]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006152:	2202      	movs	r2, #2
 8006154:	4013      	ands	r3, r2
 8006156:	d0f1      	beq.n	800613c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006158:	4b85      	ldr	r3, [pc, #532]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800615a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800615c:	22f8      	movs	r2, #248	@ 0xf8
 800615e:	4393      	bics	r3, r2
 8006160:	0019      	movs	r1, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	00da      	lsls	r2, r3, #3
 8006168:	4b81      	ldr	r3, [pc, #516]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800616a:	430a      	orrs	r2, r1
 800616c:	635a      	str	r2, [r3, #52]	@ 0x34
 800616e:	e034      	b.n	80061da <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	3305      	adds	r3, #5
 8006176:	d111      	bne.n	800619c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006178:	4b7d      	ldr	r3, [pc, #500]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800617a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800617c:	4b7c      	ldr	r3, [pc, #496]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800617e:	2104      	movs	r1, #4
 8006180:	438a      	bics	r2, r1
 8006182:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006184:	4b7a      	ldr	r3, [pc, #488]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006188:	22f8      	movs	r2, #248	@ 0xf8
 800618a:	4393      	bics	r3, r2
 800618c:	0019      	movs	r1, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	00da      	lsls	r2, r3, #3
 8006194:	4b76      	ldr	r3, [pc, #472]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006196:	430a      	orrs	r2, r1
 8006198:	635a      	str	r2, [r3, #52]	@ 0x34
 800619a:	e01e      	b.n	80061da <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800619c:	4b74      	ldr	r3, [pc, #464]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800619e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061a0:	4b73      	ldr	r3, [pc, #460]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80061a2:	2104      	movs	r1, #4
 80061a4:	430a      	orrs	r2, r1
 80061a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80061a8:	4b71      	ldr	r3, [pc, #452]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80061aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ac:	4b70      	ldr	r3, [pc, #448]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80061ae:	2101      	movs	r1, #1
 80061b0:	438a      	bics	r2, r1
 80061b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b4:	f7fc fef0 	bl	8002f98 <HAL_GetTick>
 80061b8:	0003      	movs	r3, r0
 80061ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80061be:	f7fc feeb 	bl	8002f98 <HAL_GetTick>
 80061c2:	0002      	movs	r2, r0
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e111      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80061d0:	4b67      	ldr	r3, [pc, #412]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80061d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d4:	2202      	movs	r2, #2
 80061d6:	4013      	ands	r3, r2
 80061d8:	d1f1      	bne.n	80061be <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2220      	movs	r2, #32
 80061e0:	4013      	ands	r3, r2
 80061e2:	d05c      	beq.n	800629e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80061e4:	4b62      	ldr	r3, [pc, #392]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	220c      	movs	r2, #12
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d00e      	beq.n	800620e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80061f0:	4b5f      	ldr	r3, [pc, #380]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	220c      	movs	r2, #12
 80061f6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d114      	bne.n	8006226 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80061fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	23c0      	movs	r3, #192	@ 0xc0
 8006202:	025b      	lsls	r3, r3, #9
 8006204:	401a      	ands	r2, r3
 8006206:	23c0      	movs	r3, #192	@ 0xc0
 8006208:	025b      	lsls	r3, r3, #9
 800620a:	429a      	cmp	r2, r3
 800620c:	d10b      	bne.n	8006226 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800620e:	4b58      	ldr	r3, [pc, #352]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006212:	2380      	movs	r3, #128	@ 0x80
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	4013      	ands	r3, r2
 8006218:	d040      	beq.n	800629c <HAL_RCC_OscConfig+0x5a8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d03c      	beq.n	800629c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0e6      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01b      	beq.n	8006266 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800622e:	4b50      	ldr	r3, [pc, #320]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006232:	4b4f      	ldr	r3, [pc, #316]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006234:	2180      	movs	r1, #128	@ 0x80
 8006236:	0249      	lsls	r1, r1, #9
 8006238:	430a      	orrs	r2, r1
 800623a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fc feac 	bl	8002f98 <HAL_GetTick>
 8006240:	0003      	movs	r3, r0
 8006242:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006246:	f7fc fea7 	bl	8002f98 <HAL_GetTick>
 800624a:	0002      	movs	r2, r0
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e0cd      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006258:	4b45      	ldr	r3, [pc, #276]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800625a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800625c:	2380      	movs	r3, #128	@ 0x80
 800625e:	029b      	lsls	r3, r3, #10
 8006260:	4013      	ands	r3, r2
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x552>
 8006264:	e01b      	b.n	800629e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006266:	4b42      	ldr	r3, [pc, #264]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800626a:	4b41      	ldr	r3, [pc, #260]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800626c:	4943      	ldr	r1, [pc, #268]	@ (800637c <HAL_RCC_OscConfig+0x688>)
 800626e:	400a      	ands	r2, r1
 8006270:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006272:	f7fc fe91 	bl	8002f98 <HAL_GetTick>
 8006276:	0003      	movs	r3, r0
 8006278:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800627c:	f7fc fe8c 	bl	8002f98 <HAL_GetTick>
 8006280:	0002      	movs	r2, r0
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0b2      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800628e:	4b38      	ldr	r3, [pc, #224]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006292:	2380      	movs	r3, #128	@ 0x80
 8006294:	029b      	lsls	r3, r3, #10
 8006296:	4013      	ands	r3, r2
 8006298:	d1f0      	bne.n	800627c <HAL_RCC_OscConfig+0x588>
 800629a:	e000      	b.n	800629e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800629c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d100      	bne.n	80062a8 <HAL_RCC_OscConfig+0x5b4>
 80062a6:	e0a4      	b.n	80063f2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062a8:	4b31      	ldr	r3, [pc, #196]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	220c      	movs	r2, #12
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d100      	bne.n	80062b6 <HAL_RCC_OscConfig+0x5c2>
 80062b4:	e078      	b.n	80063a8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d14c      	bne.n	8006358 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062be:	4b2c      	ldr	r3, [pc, #176]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80062c4:	492e      	ldr	r1, [pc, #184]	@ (8006380 <HAL_RCC_OscConfig+0x68c>)
 80062c6:	400a      	ands	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ca:	f7fc fe65 	bl	8002f98 <HAL_GetTick>
 80062ce:	0003      	movs	r3, r0
 80062d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d4:	f7fc fe60 	bl	8002f98 <HAL_GetTick>
 80062d8:	0002      	movs	r2, r0
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e086      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062e6:	4b22      	ldr	r3, [pc, #136]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	2380      	movs	r3, #128	@ 0x80
 80062ec:	049b      	lsls	r3, r3, #18
 80062ee:	4013      	ands	r3, r2
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f6:	220f      	movs	r2, #15
 80062f8:	4393      	bics	r3, r2
 80062fa:	0019      	movs	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006300:	4b1b      	ldr	r3, [pc, #108]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006302:	430a      	orrs	r2, r1
 8006304:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006306:	4b1a      	ldr	r3, [pc, #104]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4a1e      	ldr	r2, [pc, #120]	@ (8006384 <HAL_RCC_OscConfig+0x690>)
 800630c:	4013      	ands	r3, r2
 800630e:	0019      	movs	r1, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	431a      	orrs	r2, r3
 800631a:	4b15      	ldr	r3, [pc, #84]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006320:	4b13      	ldr	r3, [pc, #76]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4b12      	ldr	r3, [pc, #72]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 8006326:	2180      	movs	r1, #128	@ 0x80
 8006328:	0449      	lsls	r1, r1, #17
 800632a:	430a      	orrs	r2, r1
 800632c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632e:	f7fc fe33 	bl	8002f98 <HAL_GetTick>
 8006332:	0003      	movs	r3, r0
 8006334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006338:	f7fc fe2e 	bl	8002f98 <HAL_GetTick>
 800633c:	0002      	movs	r2, r0
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e054      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800634a:	4b09      	ldr	r3, [pc, #36]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	2380      	movs	r3, #128	@ 0x80
 8006350:	049b      	lsls	r3, r3, #18
 8006352:	4013      	ands	r3, r2
 8006354:	d0f0      	beq.n	8006338 <HAL_RCC_OscConfig+0x644>
 8006356:	e04c      	b.n	80063f2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006358:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b04      	ldr	r3, [pc, #16]	@ (8006370 <HAL_RCC_OscConfig+0x67c>)
 800635e:	4908      	ldr	r1, [pc, #32]	@ (8006380 <HAL_RCC_OscConfig+0x68c>)
 8006360:	400a      	ands	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006364:	f7fc fe18 	bl	8002f98 <HAL_GetTick>
 8006368:	0003      	movs	r3, r0
 800636a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800636c:	e015      	b.n	800639a <HAL_RCC_OscConfig+0x6a6>
 800636e:	46c0      	nop			@ (mov r8, r8)
 8006370:	40021000 	.word	0x40021000
 8006374:	00001388 	.word	0x00001388
 8006378:	efffffff 	.word	0xefffffff
 800637c:	fffeffff 	.word	0xfffeffff
 8006380:	feffffff 	.word	0xfeffffff
 8006384:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006388:	f7fc fe06 	bl	8002f98 <HAL_GetTick>
 800638c:	0002      	movs	r2, r0
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e02c      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800639a:	4b18      	ldr	r3, [pc, #96]	@ (80063fc <HAL_RCC_OscConfig+0x708>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	049b      	lsls	r3, r3, #18
 80063a2:	4013      	ands	r3, r2
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x694>
 80063a6:	e024      	b.n	80063f2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e01f      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80063b4:	4b11      	ldr	r3, [pc, #68]	@ (80063fc <HAL_RCC_OscConfig+0x708>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80063ba:	4b10      	ldr	r3, [pc, #64]	@ (80063fc <HAL_RCC_OscConfig+0x708>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	23c0      	movs	r3, #192	@ 0xc0
 80063c4:	025b      	lsls	r3, r3, #9
 80063c6:	401a      	ands	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d10e      	bne.n	80063ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	220f      	movs	r2, #15
 80063d4:	401a      	ands	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063da:	429a      	cmp	r2, r3
 80063dc:	d107      	bne.n	80063ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	23f0      	movs	r3, #240	@ 0xf0
 80063e2:	039b      	lsls	r3, r3, #14
 80063e4:	401a      	ands	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d001      	beq.n	80063f2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	0018      	movs	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b008      	add	sp, #32
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40021000 	.word	0x40021000

08006400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0bf      	b.n	8006594 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006414:	4b61      	ldr	r3, [pc, #388]	@ (800659c <HAL_RCC_ClockConfig+0x19c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2201      	movs	r2, #1
 800641a:	4013      	ands	r3, r2
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d911      	bls.n	8006446 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006422:	4b5e      	ldr	r3, [pc, #376]	@ (800659c <HAL_RCC_ClockConfig+0x19c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2201      	movs	r2, #1
 8006428:	4393      	bics	r3, r2
 800642a:	0019      	movs	r1, r3
 800642c:	4b5b      	ldr	r3, [pc, #364]	@ (800659c <HAL_RCC_ClockConfig+0x19c>)
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006434:	4b59      	ldr	r3, [pc, #356]	@ (800659c <HAL_RCC_ClockConfig+0x19c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2201      	movs	r2, #1
 800643a:	4013      	ands	r3, r2
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d001      	beq.n	8006446 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e0a6      	b.n	8006594 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2202      	movs	r2, #2
 800644c:	4013      	ands	r3, r2
 800644e:	d015      	beq.n	800647c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2204      	movs	r2, #4
 8006456:	4013      	ands	r3, r2
 8006458:	d006      	beq.n	8006468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800645a:	4b51      	ldr	r3, [pc, #324]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	4b50      	ldr	r3, [pc, #320]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 8006460:	21e0      	movs	r1, #224	@ 0xe0
 8006462:	00c9      	lsls	r1, r1, #3
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006468:	4b4d      	ldr	r3, [pc, #308]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	22f0      	movs	r2, #240	@ 0xf0
 800646e:	4393      	bics	r3, r2
 8006470:	0019      	movs	r1, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	4b4a      	ldr	r3, [pc, #296]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 8006478:	430a      	orrs	r2, r1
 800647a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2201      	movs	r2, #1
 8006482:	4013      	ands	r3, r2
 8006484:	d04c      	beq.n	8006520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d107      	bne.n	800649e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648e:	4b44      	ldr	r3, [pc, #272]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	2380      	movs	r3, #128	@ 0x80
 8006494:	029b      	lsls	r3, r3, #10
 8006496:	4013      	ands	r3, r2
 8006498:	d120      	bne.n	80064dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e07a      	b.n	8006594 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d107      	bne.n	80064b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a6:	4b3e      	ldr	r3, [pc, #248]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	2380      	movs	r3, #128	@ 0x80
 80064ac:	049b      	lsls	r3, r3, #18
 80064ae:	4013      	ands	r3, r2
 80064b0:	d114      	bne.n	80064dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e06e      	b.n	8006594 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d107      	bne.n	80064ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80064be:	4b38      	ldr	r3, [pc, #224]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 80064c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c2:	2380      	movs	r3, #128	@ 0x80
 80064c4:	029b      	lsls	r3, r3, #10
 80064c6:	4013      	ands	r3, r2
 80064c8:	d108      	bne.n	80064dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e062      	b.n	8006594 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ce:	4b34      	ldr	r3, [pc, #208]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2202      	movs	r2, #2
 80064d4:	4013      	ands	r3, r2
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e05b      	b.n	8006594 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064dc:	4b30      	ldr	r3, [pc, #192]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2203      	movs	r2, #3
 80064e2:	4393      	bics	r3, r2
 80064e4:	0019      	movs	r1, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	4b2d      	ldr	r3, [pc, #180]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064f0:	f7fc fd52 	bl	8002f98 <HAL_GetTick>
 80064f4:	0003      	movs	r3, r0
 80064f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f8:	e009      	b.n	800650e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fa:	f7fc fd4d 	bl	8002f98 <HAL_GetTick>
 80064fe:	0002      	movs	r2, r0
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	4a27      	ldr	r2, [pc, #156]	@ (80065a4 <HAL_RCC_ClockConfig+0x1a4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d901      	bls.n	800650e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e042      	b.n	8006594 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650e:	4b24      	ldr	r3, [pc, #144]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	220c      	movs	r2, #12
 8006514:	401a      	ands	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	429a      	cmp	r2, r3
 800651e:	d1ec      	bne.n	80064fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006520:	4b1e      	ldr	r3, [pc, #120]	@ (800659c <HAL_RCC_ClockConfig+0x19c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2201      	movs	r2, #1
 8006526:	4013      	ands	r3, r2
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d211      	bcs.n	8006552 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652e:	4b1b      	ldr	r3, [pc, #108]	@ (800659c <HAL_RCC_ClockConfig+0x19c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2201      	movs	r2, #1
 8006534:	4393      	bics	r3, r2
 8006536:	0019      	movs	r1, r3
 8006538:	4b18      	ldr	r3, [pc, #96]	@ (800659c <HAL_RCC_ClockConfig+0x19c>)
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006540:	4b16      	ldr	r3, [pc, #88]	@ (800659c <HAL_RCC_ClockConfig+0x19c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2201      	movs	r2, #1
 8006546:	4013      	ands	r3, r2
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d001      	beq.n	8006552 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e020      	b.n	8006594 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2204      	movs	r2, #4
 8006558:	4013      	ands	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800655c:	4b10      	ldr	r3, [pc, #64]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4a11      	ldr	r2, [pc, #68]	@ (80065a8 <HAL_RCC_ClockConfig+0x1a8>)
 8006562:	4013      	ands	r3, r2
 8006564:	0019      	movs	r1, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	4b0d      	ldr	r3, [pc, #52]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006570:	f000 f820 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8006574:	0001      	movs	r1, r0
 8006576:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <HAL_RCC_ClockConfig+0x1a0>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	220f      	movs	r2, #15
 800657e:	4013      	ands	r3, r2
 8006580:	4a0a      	ldr	r2, [pc, #40]	@ (80065ac <HAL_RCC_ClockConfig+0x1ac>)
 8006582:	5cd3      	ldrb	r3, [r2, r3]
 8006584:	000a      	movs	r2, r1
 8006586:	40da      	lsrs	r2, r3
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <HAL_RCC_ClockConfig+0x1b0>)
 800658a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800658c:	2003      	movs	r0, #3
 800658e:	f7fc fcbd 	bl	8002f0c <HAL_InitTick>
  
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	0018      	movs	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	b004      	add	sp, #16
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40022000 	.word	0x40022000
 80065a0:	40021000 	.word	0x40021000
 80065a4:	00001388 	.word	0x00001388
 80065a8:	fffff8ff 	.word	0xfffff8ff
 80065ac:	0800fe80 	.word	0x0800fe80
 80065b0:	20000000 	.word	0x20000000

080065b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	2300      	movs	r3, #0
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80065ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006684 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	220c      	movs	r2, #12
 80065d8:	4013      	ands	r3, r2
 80065da:	2b0c      	cmp	r3, #12
 80065dc:	d046      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0xb8>
 80065de:	d848      	bhi.n	8006672 <HAL_RCC_GetSysClockFreq+0xbe>
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d002      	beq.n	80065ea <HAL_RCC_GetSysClockFreq+0x36>
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d003      	beq.n	80065f0 <HAL_RCC_GetSysClockFreq+0x3c>
 80065e8:	e043      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065ea:	4b27      	ldr	r3, [pc, #156]	@ (8006688 <HAL_RCC_GetSysClockFreq+0xd4>)
 80065ec:	613b      	str	r3, [r7, #16]
      break;
 80065ee:	e043      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	0c9b      	lsrs	r3, r3, #18
 80065f4:	220f      	movs	r2, #15
 80065f6:	4013      	ands	r3, r2
 80065f8:	4a24      	ldr	r2, [pc, #144]	@ (800668c <HAL_RCC_GetSysClockFreq+0xd8>)
 80065fa:	5cd3      	ldrb	r3, [r2, r3]
 80065fc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80065fe:	4b21      	ldr	r3, [pc, #132]	@ (8006684 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	220f      	movs	r2, #15
 8006604:	4013      	ands	r3, r2
 8006606:	4a22      	ldr	r2, [pc, #136]	@ (8006690 <HAL_RCC_GetSysClockFreq+0xdc>)
 8006608:	5cd3      	ldrb	r3, [r2, r3]
 800660a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	23c0      	movs	r3, #192	@ 0xc0
 8006610:	025b      	lsls	r3, r3, #9
 8006612:	401a      	ands	r2, r3
 8006614:	2380      	movs	r3, #128	@ 0x80
 8006616:	025b      	lsls	r3, r3, #9
 8006618:	429a      	cmp	r2, r3
 800661a:	d109      	bne.n	8006630 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	481a      	ldr	r0, [pc, #104]	@ (8006688 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006620:	f7f9 fd8e 	bl	8000140 <__udivsi3>
 8006624:	0003      	movs	r3, r0
 8006626:	001a      	movs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4353      	muls	r3, r2
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	e01a      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	23c0      	movs	r3, #192	@ 0xc0
 8006634:	025b      	lsls	r3, r3, #9
 8006636:	401a      	ands	r2, r3
 8006638:	23c0      	movs	r3, #192	@ 0xc0
 800663a:	025b      	lsls	r3, r3, #9
 800663c:	429a      	cmp	r2, r3
 800663e:	d109      	bne.n	8006654 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	4814      	ldr	r0, [pc, #80]	@ (8006694 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006644:	f7f9 fd7c 	bl	8000140 <__udivsi3>
 8006648:	0003      	movs	r3, r0
 800664a:	001a      	movs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4353      	muls	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	e008      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	480c      	ldr	r0, [pc, #48]	@ (8006688 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006658:	f7f9 fd72 	bl	8000140 <__udivsi3>
 800665c:	0003      	movs	r3, r0
 800665e:	001a      	movs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4353      	muls	r3, r2
 8006664:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	613b      	str	r3, [r7, #16]
      break;
 800666a:	e005      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800666c:	4b09      	ldr	r3, [pc, #36]	@ (8006694 <HAL_RCC_GetSysClockFreq+0xe0>)
 800666e:	613b      	str	r3, [r7, #16]
      break;
 8006670:	e002      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006674:	613b      	str	r3, [r7, #16]
      break;
 8006676:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006678:	693b      	ldr	r3, [r7, #16]
}
 800667a:	0018      	movs	r0, r3
 800667c:	46bd      	mov	sp, r7
 800667e:	b006      	add	sp, #24
 8006680:	bd80      	pop	{r7, pc}
 8006682:	46c0      	nop			@ (mov r8, r8)
 8006684:	40021000 	.word	0x40021000
 8006688:	007a1200 	.word	0x007a1200
 800668c:	0800fe98 	.word	0x0800fe98
 8006690:	0800fea8 	.word	0x0800fea8
 8006694:	02dc6c00 	.word	0x02dc6c00

08006698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800669c:	4b02      	ldr	r3, [pc, #8]	@ (80066a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800669e:	681b      	ldr	r3, [r3, #0]
}
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	46c0      	nop			@ (mov r8, r8)
 80066a8:	20000000 	.word	0x20000000

080066ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80066b0:	f7ff fff2 	bl	8006698 <HAL_RCC_GetHCLKFreq>
 80066b4:	0001      	movs	r1, r0
 80066b6:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	0a1b      	lsrs	r3, r3, #8
 80066bc:	2207      	movs	r2, #7
 80066be:	4013      	ands	r3, r2
 80066c0:	4a04      	ldr	r2, [pc, #16]	@ (80066d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066c2:	5cd3      	ldrb	r3, [r2, r3]
 80066c4:	40d9      	lsrs	r1, r3
 80066c6:	000b      	movs	r3, r1
}    
 80066c8:	0018      	movs	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	40021000 	.word	0x40021000
 80066d4:	0800fe90 	.word	0x0800fe90

080066d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	2380      	movs	r3, #128	@ 0x80
 80066ee:	025b      	lsls	r3, r3, #9
 80066f0:	4013      	ands	r3, r2
 80066f2:	d100      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80066f4:	e08e      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80066f6:	2017      	movs	r0, #23
 80066f8:	183b      	adds	r3, r7, r0
 80066fa:	2200      	movs	r2, #0
 80066fc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066fe:	4b6e      	ldr	r3, [pc, #440]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	2380      	movs	r3, #128	@ 0x80
 8006704:	055b      	lsls	r3, r3, #21
 8006706:	4013      	ands	r3, r2
 8006708:	d110      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800670a:	4b6b      	ldr	r3, [pc, #428]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800670c:	69da      	ldr	r2, [r3, #28]
 800670e:	4b6a      	ldr	r3, [pc, #424]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006710:	2180      	movs	r1, #128	@ 0x80
 8006712:	0549      	lsls	r1, r1, #21
 8006714:	430a      	orrs	r2, r1
 8006716:	61da      	str	r2, [r3, #28]
 8006718:	4b67      	ldr	r3, [pc, #412]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	2380      	movs	r3, #128	@ 0x80
 800671e:	055b      	lsls	r3, r3, #21
 8006720:	4013      	ands	r3, r2
 8006722:	60bb      	str	r3, [r7, #8]
 8006724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006726:	183b      	adds	r3, r7, r0
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672c:	4b63      	ldr	r3, [pc, #396]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	2380      	movs	r3, #128	@ 0x80
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	4013      	ands	r3, r2
 8006736:	d11a      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006738:	4b60      	ldr	r3, [pc, #384]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	4b5f      	ldr	r3, [pc, #380]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800673e:	2180      	movs	r1, #128	@ 0x80
 8006740:	0049      	lsls	r1, r1, #1
 8006742:	430a      	orrs	r2, r1
 8006744:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006746:	f7fc fc27 	bl	8002f98 <HAL_GetTick>
 800674a:	0003      	movs	r3, r0
 800674c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674e:	e008      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006750:	f7fc fc22 	bl	8002f98 <HAL_GetTick>
 8006754:	0002      	movs	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	@ 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e0a6      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006762:	4b56      	ldr	r3, [pc, #344]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	2380      	movs	r3, #128	@ 0x80
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	4013      	ands	r3, r2
 800676c:	d0f0      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800676e:	4b52      	ldr	r3, [pc, #328]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006770:	6a1a      	ldr	r2, [r3, #32]
 8006772:	23c0      	movs	r3, #192	@ 0xc0
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4013      	ands	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d034      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	23c0      	movs	r3, #192	@ 0xc0
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4013      	ands	r3, r2
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	429a      	cmp	r2, r3
 800678e:	d02c      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006790:	4b49      	ldr	r3, [pc, #292]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	4a4a      	ldr	r2, [pc, #296]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006796:	4013      	ands	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800679a:	4b47      	ldr	r3, [pc, #284]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800679c:	6a1a      	ldr	r2, [r3, #32]
 800679e:	4b46      	ldr	r3, [pc, #280]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067a0:	2180      	movs	r1, #128	@ 0x80
 80067a2:	0249      	lsls	r1, r1, #9
 80067a4:	430a      	orrs	r2, r1
 80067a6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067a8:	4b43      	ldr	r3, [pc, #268]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067aa:	6a1a      	ldr	r2, [r3, #32]
 80067ac:	4b42      	ldr	r3, [pc, #264]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067ae:	4945      	ldr	r1, [pc, #276]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80067b0:	400a      	ands	r2, r1
 80067b2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067b4:	4b40      	ldr	r3, [pc, #256]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	4013      	ands	r3, r2
 80067c0:	d013      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c2:	f7fc fbe9 	bl	8002f98 <HAL_GetTick>
 80067c6:	0003      	movs	r3, r0
 80067c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ca:	e009      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fc fbe4 	bl	8002f98 <HAL_GetTick>
 80067d0:	0002      	movs	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	4a3c      	ldr	r2, [pc, #240]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e067      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e0:	4b35      	ldr	r3, [pc, #212]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	2202      	movs	r2, #2
 80067e6:	4013      	ands	r3, r2
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ea:	4b33      	ldr	r3, [pc, #204]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	4a34      	ldr	r2, [pc, #208]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	0019      	movs	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	4b2f      	ldr	r3, [pc, #188]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067fa:	430a      	orrs	r2, r1
 80067fc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067fe:	2317      	movs	r3, #23
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d105      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006808:	4b2b      	ldr	r3, [pc, #172]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	4b2a      	ldr	r3, [pc, #168]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800680e:	492f      	ldr	r1, [pc, #188]	@ (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006810:	400a      	ands	r2, r1
 8006812:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2201      	movs	r2, #1
 800681a:	4013      	ands	r3, r2
 800681c:	d009      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800681e:	4b26      	ldr	r3, [pc, #152]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	2203      	movs	r2, #3
 8006824:	4393      	bics	r3, r2
 8006826:	0019      	movs	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	4b22      	ldr	r3, [pc, #136]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800682e:	430a      	orrs	r2, r1
 8006830:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2202      	movs	r2, #2
 8006838:	4013      	ands	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800683c:	4b1e      	ldr	r3, [pc, #120]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800683e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006840:	4a23      	ldr	r2, [pc, #140]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006842:	4013      	ands	r3, r2
 8006844:	0019      	movs	r1, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	4b1b      	ldr	r3, [pc, #108]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800684c:	430a      	orrs	r2, r1
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2220      	movs	r2, #32
 8006856:	4013      	ands	r3, r2
 8006858:	d009      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800685a:	4b17      	ldr	r3, [pc, #92]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800685c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685e:	2210      	movs	r2, #16
 8006860:	4393      	bics	r3, r2
 8006862:	0019      	movs	r1, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	4b13      	ldr	r3, [pc, #76]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800686a:	430a      	orrs	r2, r1
 800686c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	2380      	movs	r3, #128	@ 0x80
 8006874:	029b      	lsls	r3, r3, #10
 8006876:	4013      	ands	r3, r2
 8006878:	d009      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800687a:	4b0f      	ldr	r3, [pc, #60]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687e:	2280      	movs	r2, #128	@ 0x80
 8006880:	4393      	bics	r3, r2
 8006882:	0019      	movs	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800688a:	430a      	orrs	r2, r1
 800688c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	2380      	movs	r3, #128	@ 0x80
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	4013      	ands	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800689a:	4b07      	ldr	r3, [pc, #28]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689e:	2240      	movs	r2, #64	@ 0x40
 80068a0:	4393      	bics	r3, r2
 80068a2:	0019      	movs	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	4b03      	ldr	r3, [pc, #12]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068aa:	430a      	orrs	r2, r1
 80068ac:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	0018      	movs	r0, r3
 80068b2:	46bd      	mov	sp, r7
 80068b4:	b006      	add	sp, #24
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40021000 	.word	0x40021000
 80068bc:	40007000 	.word	0x40007000
 80068c0:	fffffcff 	.word	0xfffffcff
 80068c4:	fffeffff 	.word	0xfffeffff
 80068c8:	00001388 	.word	0x00001388
 80068cc:	efffffff 	.word	0xefffffff
 80068d0:	fffcffff 	.word	0xfffcffff

080068d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e0a8      	b.n	8006a38 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	2382      	movs	r3, #130	@ 0x82
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d009      	beq.n	800690e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	61da      	str	r2, [r3, #28]
 8006900:	e005      	b.n	800690e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	225d      	movs	r2, #93	@ 0x5d
 8006918:	5c9b      	ldrb	r3, [r3, r2]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	225c      	movs	r2, #92	@ 0x5c
 8006924:	2100      	movs	r1, #0
 8006926:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	0018      	movs	r0, r3
 800692c:	f7fb ffe8 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	225d      	movs	r2, #93	@ 0x5d
 8006934:	2102      	movs	r1, #2
 8006936:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2140      	movs	r1, #64	@ 0x40
 8006944:	438a      	bics	r2, r1
 8006946:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	23e0      	movs	r3, #224	@ 0xe0
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	429a      	cmp	r2, r3
 8006952:	d902      	bls.n	800695a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	e002      	b.n	8006960 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800695a:	2380      	movs	r3, #128	@ 0x80
 800695c:	015b      	lsls	r3, r3, #5
 800695e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	23f0      	movs	r3, #240	@ 0xf0
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	429a      	cmp	r2, r3
 800696a:	d008      	beq.n	800697e <HAL_SPI_Init+0xaa>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	23e0      	movs	r3, #224	@ 0xe0
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	429a      	cmp	r2, r3
 8006976:	d002      	beq.n	800697e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	2382      	movs	r3, #130	@ 0x82
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	401a      	ands	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6899      	ldr	r1, [r3, #8]
 800698c:	2384      	movs	r3, #132	@ 0x84
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	400b      	ands	r3, r1
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2102      	movs	r1, #2
 800699a:	400b      	ands	r3, r1
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	2101      	movs	r1, #1
 80069a4:	400b      	ands	r3, r1
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6999      	ldr	r1, [r3, #24]
 80069ac:	2380      	movs	r3, #128	@ 0x80
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	400b      	ands	r3, r1
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	2138      	movs	r1, #56	@ 0x38
 80069ba:	400b      	ands	r3, r1
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	2180      	movs	r1, #128	@ 0x80
 80069c4:	400b      	ands	r3, r1
 80069c6:	431a      	orrs	r2, r3
 80069c8:	0011      	movs	r1, r2
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069ce:	2380      	movs	r3, #128	@ 0x80
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	401a      	ands	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	2204      	movs	r2, #4
 80069e4:	401a      	ands	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	2110      	movs	r1, #16
 80069ec:	400b      	ands	r3, r1
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f4:	2108      	movs	r1, #8
 80069f6:	400b      	ands	r3, r1
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68d9      	ldr	r1, [r3, #12]
 80069fe:	23f0      	movs	r3, #240	@ 0xf0
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	400b      	ands	r3, r1
 8006a04:	431a      	orrs	r2, r3
 8006a06:	0011      	movs	r1, r2
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	2380      	movs	r3, #128	@ 0x80
 8006a0c:	015b      	lsls	r3, r3, #5
 8006a0e:	401a      	ands	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69da      	ldr	r2, [r3, #28]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4907      	ldr	r1, [pc, #28]	@ (8006a40 <HAL_SPI_Init+0x16c>)
 8006a24:	400a      	ands	r2, r1
 8006a26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	225d      	movs	r2, #93	@ 0x5d
 8006a32:	2101      	movs	r1, #1
 8006a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b004      	add	sp, #16
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	fffff7ff 	.word	0xfffff7ff

08006a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e042      	b.n	8006adc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	223d      	movs	r2, #61	@ 0x3d
 8006a5a:	5c9b      	ldrb	r3, [r3, r2]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d107      	bne.n	8006a72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	223c      	movs	r2, #60	@ 0x3c
 8006a66:	2100      	movs	r1, #0
 8006a68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f7fb ffe9 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	223d      	movs	r2, #61	@ 0x3d
 8006a76:	2102      	movs	r1, #2
 8006a78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	0019      	movs	r1, r3
 8006a84:	0010      	movs	r0, r2
 8006a86:	f000 fa61 	bl	8006f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2246      	movs	r2, #70	@ 0x46
 8006a8e:	2101      	movs	r1, #1
 8006a90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	223e      	movs	r2, #62	@ 0x3e
 8006a96:	2101      	movs	r1, #1
 8006a98:	5499      	strb	r1, [r3, r2]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	223f      	movs	r2, #63	@ 0x3f
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	5499      	strb	r1, [r3, r2]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2240      	movs	r2, #64	@ 0x40
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	5499      	strb	r1, [r3, r2]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2241      	movs	r2, #65	@ 0x41
 8006aae:	2101      	movs	r1, #1
 8006ab0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2242      	movs	r2, #66	@ 0x42
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	5499      	strb	r1, [r3, r2]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2243      	movs	r2, #67	@ 0x43
 8006abe:	2101      	movs	r1, #1
 8006ac0:	5499      	strb	r1, [r3, r2]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2244      	movs	r2, #68	@ 0x44
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	5499      	strb	r1, [r3, r2]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2245      	movs	r2, #69	@ 0x45
 8006ace:	2101      	movs	r1, #1
 8006ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	223d      	movs	r2, #61	@ 0x3d
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b002      	add	sp, #8
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	223d      	movs	r2, #61	@ 0x3d
 8006af0:	5c9b      	ldrb	r3, [r3, r2]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d001      	beq.n	8006afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e03b      	b.n	8006b74 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	223d      	movs	r2, #61	@ 0x3d
 8006b00:	2102      	movs	r1, #2
 8006b02:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2101      	movs	r1, #1
 8006b10:	430a      	orrs	r2, r1
 8006b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a18      	ldr	r2, [pc, #96]	@ (8006b7c <HAL_TIM_Base_Start_IT+0x98>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00f      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x5a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	2380      	movs	r3, #128	@ 0x80
 8006b24:	05db      	lsls	r3, r3, #23
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d009      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x5a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a14      	ldr	r2, [pc, #80]	@ (8006b80 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x5a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a12      	ldr	r2, [pc, #72]	@ (8006b84 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d111      	bne.n	8006b62 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2207      	movs	r2, #7
 8006b46:	4013      	ands	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b06      	cmp	r3, #6
 8006b4e:	d010      	beq.n	8006b72 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b60:	e007      	b.n	8006b72 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	0018      	movs	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b004      	add	sp, #16
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40000400 	.word	0x40000400
 8006b84:	40014000 	.word	0x40014000

08006b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d021      	beq.n	8006bec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2202      	movs	r2, #2
 8006bac:	4013      	ands	r3, r2
 8006bae:	d01d      	beq.n	8006bec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	4252      	negs	r2, r2
 8006bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 f9a4 	bl	8006f1c <HAL_TIM_IC_CaptureCallback>
 8006bd4:	e007      	b.n	8006be6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f000 f997 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	0018      	movs	r0, r3
 8006be2:	f000 f9a3 	bl	8006f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d022      	beq.n	8006c3a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d01e      	beq.n	8006c3a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2205      	movs	r2, #5
 8006c02:	4252      	negs	r2, r2
 8006c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	23c0      	movs	r3, #192	@ 0xc0
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4013      	ands	r3, r2
 8006c18:	d004      	beq.n	8006c24 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f000 f97d 	bl	8006f1c <HAL_TIM_IC_CaptureCallback>
 8006c22:	e007      	b.n	8006c34 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	0018      	movs	r0, r3
 8006c28:	f000 f970 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 f97c 	bl	8006f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d021      	beq.n	8006c86 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2208      	movs	r2, #8
 8006c46:	4013      	ands	r3, r2
 8006c48:	d01d      	beq.n	8006c86 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2209      	movs	r2, #9
 8006c50:	4252      	negs	r2, r2
 8006c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2204      	movs	r2, #4
 8006c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	2203      	movs	r2, #3
 8006c62:	4013      	ands	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 f957 	bl	8006f1c <HAL_TIM_IC_CaptureCallback>
 8006c6e:	e007      	b.n	8006c80 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	0018      	movs	r0, r3
 8006c74:	f000 f94a 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 f956 	bl	8006f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2210      	movs	r2, #16
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	d022      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2210      	movs	r2, #16
 8006c92:	4013      	ands	r3, r2
 8006c94:	d01e      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2211      	movs	r2, #17
 8006c9c:	4252      	negs	r2, r2
 8006c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2208      	movs	r2, #8
 8006ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	23c0      	movs	r3, #192	@ 0xc0
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f000 f930 	bl	8006f1c <HAL_TIM_IC_CaptureCallback>
 8006cbc:	e007      	b.n	8006cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f000 f923 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f000 f92f 	bl	8006f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	4013      	ands	r3, r2
 8006cda:	d00c      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d008      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	4252      	negs	r2, r2
 8006cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f005 fdbf 	bl	800c874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2280      	movs	r2, #128	@ 0x80
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d00c      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2280      	movs	r2, #128	@ 0x80
 8006d02:	4013      	ands	r3, r2
 8006d04:	d008      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2281      	movs	r2, #129	@ 0x81
 8006d0c:	4252      	negs	r2, r2
 8006d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	0018      	movs	r0, r3
 8006d14:	f000 faa8 	bl	8007268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2240      	movs	r2, #64	@ 0x40
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d00c      	beq.n	8006d3a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2240      	movs	r2, #64	@ 0x40
 8006d24:	4013      	ands	r3, r2
 8006d26:	d008      	beq.n	8006d3a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2241      	movs	r2, #65	@ 0x41
 8006d2e:	4252      	negs	r2, r2
 8006d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	0018      	movs	r0, r3
 8006d36:	f000 f901 	bl	8006f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d00c      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	4013      	ands	r3, r2
 8006d48:	d008      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2221      	movs	r2, #33	@ 0x21
 8006d50:	4252      	negs	r2, r2
 8006d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f000 fa7e 	bl	8007258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d5c:	46c0      	nop			@ (mov r8, r8)
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b004      	add	sp, #16
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6e:	230f      	movs	r3, #15
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	223c      	movs	r2, #60	@ 0x3c
 8006d7a:	5c9b      	ldrb	r3, [r3, r2]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIM_ConfigClockSource+0x20>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e0bc      	b.n	8006efe <HAL_TIM_ConfigClockSource+0x19a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	223c      	movs	r2, #60	@ 0x3c
 8006d88:	2101      	movs	r1, #1
 8006d8a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	223d      	movs	r2, #61	@ 0x3d
 8006d90:	2102      	movs	r1, #2
 8006d92:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2277      	movs	r2, #119	@ 0x77
 8006da0:	4393      	bics	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4a58      	ldr	r2, [pc, #352]	@ (8006f08 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2280      	movs	r2, #128	@ 0x80
 8006dba:	0192      	lsls	r2, r2, #6
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d040      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0xde>
 8006dc0:	2280      	movs	r2, #128	@ 0x80
 8006dc2:	0192      	lsls	r2, r2, #6
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d900      	bls.n	8006dca <HAL_TIM_ConfigClockSource+0x66>
 8006dc8:	e088      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
 8006dca:	2280      	movs	r2, #128	@ 0x80
 8006dcc:	0152      	lsls	r2, r2, #5
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d100      	bne.n	8006dd4 <HAL_TIM_ConfigClockSource+0x70>
 8006dd2:	e088      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x182>
 8006dd4:	2280      	movs	r2, #128	@ 0x80
 8006dd6:	0152      	lsls	r2, r2, #5
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d900      	bls.n	8006dde <HAL_TIM_ConfigClockSource+0x7a>
 8006ddc:	e07e      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
 8006dde:	2b70      	cmp	r3, #112	@ 0x70
 8006de0:	d018      	beq.n	8006e14 <HAL_TIM_ConfigClockSource+0xb0>
 8006de2:	d900      	bls.n	8006de6 <HAL_TIM_ConfigClockSource+0x82>
 8006de4:	e07a      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
 8006de6:	2b60      	cmp	r3, #96	@ 0x60
 8006de8:	d04f      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x126>
 8006dea:	d900      	bls.n	8006dee <HAL_TIM_ConfigClockSource+0x8a>
 8006dec:	e076      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
 8006dee:	2b50      	cmp	r3, #80	@ 0x50
 8006df0:	d03b      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x106>
 8006df2:	d900      	bls.n	8006df6 <HAL_TIM_ConfigClockSource+0x92>
 8006df4:	e072      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
 8006df6:	2b40      	cmp	r3, #64	@ 0x40
 8006df8:	d057      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x146>
 8006dfa:	d900      	bls.n	8006dfe <HAL_TIM_ConfigClockSource+0x9a>
 8006dfc:	e06e      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
 8006dfe:	2b30      	cmp	r3, #48	@ 0x30
 8006e00:	d063      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x166>
 8006e02:	d86b      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d060      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x166>
 8006e08:	d868      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d05d      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x166>
 8006e0e:	2b10      	cmp	r3, #16
 8006e10:	d05b      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x166>
 8006e12:	e063      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e24:	f000 f99a 	bl	800715c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2277      	movs	r2, #119	@ 0x77
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	609a      	str	r2, [r3, #8]
      break;
 8006e40:	e052      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e52:	f000 f983 	bl	800715c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2180      	movs	r1, #128	@ 0x80
 8006e62:	01c9      	lsls	r1, r1, #7
 8006e64:	430a      	orrs	r2, r1
 8006e66:	609a      	str	r2, [r3, #8]
      break;
 8006e68:	e03e      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e76:	001a      	movs	r2, r3
 8006e78:	f000 f8f6 	bl	8007068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2150      	movs	r1, #80	@ 0x50
 8006e82:	0018      	movs	r0, r3
 8006e84:	f000 f950 	bl	8007128 <TIM_ITRx_SetConfig>
      break;
 8006e88:	e02e      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e96:	001a      	movs	r2, r3
 8006e98:	f000 f914 	bl	80070c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2160      	movs	r1, #96	@ 0x60
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f000 f940 	bl	8007128 <TIM_ITRx_SetConfig>
      break;
 8006ea8:	e01e      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb6:	001a      	movs	r2, r3
 8006eb8:	f000 f8d6 	bl	8007068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2140      	movs	r1, #64	@ 0x40
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f000 f930 	bl	8007128 <TIM_ITRx_SetConfig>
      break;
 8006ec8:	e00e      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	0019      	movs	r1, r3
 8006ed4:	0010      	movs	r0, r2
 8006ed6:	f000 f927 	bl	8007128 <TIM_ITRx_SetConfig>
      break;
 8006eda:	e005      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006edc:	230f      	movs	r3, #15
 8006ede:	18fb      	adds	r3, r7, r3
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	701a      	strb	r2, [r3, #0]
      break;
 8006ee4:	e000      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006ee6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	223d      	movs	r2, #61	@ 0x3d
 8006eec:	2101      	movs	r1, #1
 8006eee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	223c      	movs	r2, #60	@ 0x3c
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	5499      	strb	r1, [r3, r2]

  return status;
 8006ef8:	230f      	movs	r3, #15
 8006efa:	18fb      	adds	r3, r7, r3
 8006efc:	781b      	ldrb	r3, [r3, #0]
}
 8006efe:	0018      	movs	r0, r3
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b004      	add	sp, #16
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	46c0      	nop			@ (mov r8, r8)
 8006f08:	ffff00ff 	.word	0xffff00ff

08006f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f14:	46c0      	nop			@ (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b002      	add	sp, #8
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f24:	46c0      	nop			@ (mov r8, r8)
 8006f26:	46bd      	mov	sp, r7
 8006f28:	b002      	add	sp, #8
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f34:	46c0      	nop			@ (mov r8, r8)
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b002      	add	sp, #8
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f44:	46c0      	nop			@ (mov r8, r8)
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800704c <TIM_Base_SetConfig+0x100>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d008      	beq.n	8006f76 <TIM_Base_SetConfig+0x2a>
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	2380      	movs	r3, #128	@ 0x80
 8006f68:	05db      	lsls	r3, r3, #23
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d003      	beq.n	8006f76 <TIM_Base_SetConfig+0x2a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a37      	ldr	r2, [pc, #220]	@ (8007050 <TIM_Base_SetConfig+0x104>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d108      	bne.n	8006f88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2270      	movs	r2, #112	@ 0x70
 8006f7a:	4393      	bics	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a30      	ldr	r2, [pc, #192]	@ (800704c <TIM_Base_SetConfig+0x100>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d018      	beq.n	8006fc2 <TIM_Base_SetConfig+0x76>
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	2380      	movs	r3, #128	@ 0x80
 8006f94:	05db      	lsls	r3, r3, #23
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d013      	beq.n	8006fc2 <TIM_Base_SetConfig+0x76>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8007050 <TIM_Base_SetConfig+0x104>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00f      	beq.n	8006fc2 <TIM_Base_SetConfig+0x76>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8007054 <TIM_Base_SetConfig+0x108>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00b      	beq.n	8006fc2 <TIM_Base_SetConfig+0x76>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a2a      	ldr	r2, [pc, #168]	@ (8007058 <TIM_Base_SetConfig+0x10c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d007      	beq.n	8006fc2 <TIM_Base_SetConfig+0x76>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a29      	ldr	r2, [pc, #164]	@ (800705c <TIM_Base_SetConfig+0x110>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <TIM_Base_SetConfig+0x76>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a28      	ldr	r2, [pc, #160]	@ (8007060 <TIM_Base_SetConfig+0x114>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4a27      	ldr	r2, [pc, #156]	@ (8007064 <TIM_Base_SetConfig+0x118>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2280      	movs	r2, #128	@ 0x80
 8006fd8:	4393      	bics	r3, r2
 8006fda:	001a      	movs	r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a13      	ldr	r2, [pc, #76]	@ (800704c <TIM_Base_SetConfig+0x100>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00b      	beq.n	800701a <TIM_Base_SetConfig+0xce>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a14      	ldr	r2, [pc, #80]	@ (8007058 <TIM_Base_SetConfig+0x10c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <TIM_Base_SetConfig+0xce>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a13      	ldr	r2, [pc, #76]	@ (800705c <TIM_Base_SetConfig+0x110>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_Base_SetConfig+0xce>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a12      	ldr	r2, [pc, #72]	@ (8007060 <TIM_Base_SetConfig+0x114>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d103      	bne.n	8007022 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2201      	movs	r2, #1
 800702e:	4013      	ands	r3, r2
 8007030:	2b01      	cmp	r3, #1
 8007032:	d106      	bne.n	8007042 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2201      	movs	r2, #1
 800703a:	4393      	bics	r3, r2
 800703c:	001a      	movs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	611a      	str	r2, [r3, #16]
  }
}
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	46bd      	mov	sp, r7
 8007046:	b004      	add	sp, #16
 8007048:	bd80      	pop	{r7, pc}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40000400 	.word	0x40000400
 8007054:	40002000 	.word	0x40002000
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800
 8007064:	fffffcff 	.word	0xfffffcff

08007068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	2201      	movs	r2, #1
 8007080:	4393      	bics	r3, r2
 8007082:	001a      	movs	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	22f0      	movs	r2, #240	@ 0xf0
 8007092:	4393      	bics	r3, r2
 8007094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	220a      	movs	r2, #10
 80070a4:	4393      	bics	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	621a      	str	r2, [r3, #32]
}
 80070bc:	46c0      	nop			@ (mov r8, r8)
 80070be:	46bd      	mov	sp, r7
 80070c0:	b006      	add	sp, #24
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	2210      	movs	r2, #16
 80070dc:	4393      	bics	r3, r2
 80070de:	001a      	movs	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007124 <TIM_TI2_ConfigInputStage+0x60>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	031b      	lsls	r3, r3, #12
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	22a0      	movs	r2, #160	@ 0xa0
 8007100:	4393      	bics	r3, r2
 8007102:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	46bd      	mov	sp, r7
 800711e:	b006      	add	sp, #24
 8007120:	bd80      	pop	{r7, pc}
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	ffff0fff 	.word	0xffff0fff

08007128 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2270      	movs	r2, #112	@ 0x70
 800713c:	4393      	bics	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	2207      	movs	r2, #7
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	609a      	str	r2, [r3, #8]
}
 8007152:	46c0      	nop			@ (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	b004      	add	sp, #16
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4a09      	ldr	r2, [pc, #36]	@ (8007198 <TIM_ETR_SetConfig+0x3c>)
 8007174:	4013      	ands	r3, r2
 8007176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	021a      	lsls	r2, r3, #8
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	431a      	orrs	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4313      	orrs	r3, r2
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	609a      	str	r2, [r3, #8]
}
 8007190:	46c0      	nop			@ (mov r8, r8)
 8007192:	46bd      	mov	sp, r7
 8007194:	b006      	add	sp, #24
 8007196:	bd80      	pop	{r7, pc}
 8007198:	ffff00ff 	.word	0xffff00ff

0800719c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	223c      	movs	r2, #60	@ 0x3c
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e047      	b.n	8007244 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	223c      	movs	r2, #60	@ 0x3c
 80071b8:	2101      	movs	r1, #1
 80071ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	223d      	movs	r2, #61	@ 0x3d
 80071c0:	2102      	movs	r1, #2
 80071c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2270      	movs	r2, #112	@ 0x70
 80071d8:	4393      	bics	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a16      	ldr	r2, [pc, #88]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00f      	beq.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	2380      	movs	r3, #128	@ 0x80
 80071fe:	05db      	lsls	r3, r3, #23
 8007200:	429a      	cmp	r2, r3
 8007202:	d009      	beq.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a11      	ldr	r2, [pc, #68]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a10      	ldr	r2, [pc, #64]	@ (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d10c      	bne.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2280      	movs	r2, #128	@ 0x80
 800721c:	4393      	bics	r3, r2
 800721e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	4313      	orrs	r3, r2
 8007228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	223d      	movs	r2, #61	@ 0x3d
 8007236:	2101      	movs	r1, #1
 8007238:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	223c      	movs	r2, #60	@ 0x3c
 800723e:	2100      	movs	r1, #0
 8007240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	0018      	movs	r0, r3
 8007246:	46bd      	mov	sp, r7
 8007248:	b004      	add	sp, #16
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40012c00 	.word	0x40012c00
 8007250:	40000400 	.word	0x40000400
 8007254:	40014000 	.word	0x40014000

08007258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007260:	46c0      	nop			@ (mov r8, r8)
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007270:	46c0      	nop			@ (mov r8, r8)
 8007272:	46bd      	mov	sp, r7
 8007274:	b002      	add	sp, #8
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e053      	b.n	8007332 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d116      	bne.n	80072c0 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2278      	movs	r2, #120	@ 0x78
 8007296:	2100      	movs	r1, #0
 8007298:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0018      	movs	r0, r3
 800729e:	f000 fcab 	bl	8007bf8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	22b0      	movs	r2, #176	@ 0xb0
 80072a6:	589b      	ldr	r3, [r3, r2]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	21b0      	movs	r1, #176	@ 0xb0
 80072b0:	4a22      	ldr	r2, [pc, #136]	@ (800733c <HAL_UART_Init+0xc4>)
 80072b2:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	22b0      	movs	r2, #176	@ 0xb0
 80072b8:	589b      	ldr	r3, [r3, r2]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	0010      	movs	r0, r2
 80072be:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2224      	movs	r2, #36	@ 0x24
 80072c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2101      	movs	r1, #1
 80072d2:	438a      	bics	r2, r1
 80072d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	0018      	movs	r0, r3
 80072e2:	f000 fe55 	bl	8007f90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	0018      	movs	r0, r3
 80072ea:	f000 fcc9 	bl	8007c80 <UART_SetConfig>
 80072ee:	0003      	movs	r3, r0
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e01c      	b.n	8007332 <HAL_UART_Init+0xba>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	490f      	ldr	r1, [pc, #60]	@ (8007340 <HAL_UART_Init+0xc8>)
 8007304:	400a      	ands	r2, r1
 8007306:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	212a      	movs	r1, #42	@ 0x2a
 8007314:	438a      	bics	r2, r1
 8007316:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2101      	movs	r1, #1
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	0018      	movs	r0, r3
 800732c:	f000 fee4 	bl	80080f8 <UART_CheckIdleState>
 8007330:	0003      	movs	r3, r0
}
 8007332:	0018      	movs	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	b002      	add	sp, #8
 8007338:	bd80      	pop	{r7, pc}
 800733a:	46c0      	nop			@ (mov r8, r8)
 800733c:	08002a91 	.word	0x08002a91
 8007340:	ffffb7ff 	.word	0xffffb7ff

08007344 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e03b      	b.n	80073ce <HAL_UART_DeInit+0x8a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2224      	movs	r2, #36	@ 0x24
 800735a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2101      	movs	r1, #1
 8007368:	438a      	bics	r2, r1
 800736a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2200      	movs	r2, #0
 8007382:	609a      	str	r2, [r3, #8]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	22b4      	movs	r2, #180	@ 0xb4
 8007388:	589b      	ldr	r3, [r3, r2]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <HAL_UART_DeInit+0x52>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	21b4      	movs	r1, #180	@ 0xb4
 8007392:	4a11      	ldr	r2, [pc, #68]	@ (80073d8 <HAL_UART_DeInit+0x94>)
 8007394:	505a      	str	r2, [r3, r1]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	22b4      	movs	r2, #180	@ 0xb4
 800739a:	589b      	ldr	r3, [r3, r2]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	0010      	movs	r0, r2
 80073a0:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2284      	movs	r2, #132	@ 0x84
 80073a6:	2100      	movs	r1, #0
 80073a8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2280      	movs	r2, #128	@ 0x80
 80073b4:	2100      	movs	r1, #0
 80073b6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2278      	movs	r2, #120	@ 0x78
 80073c8:	2100      	movs	r1, #0
 80073ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	0018      	movs	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b002      	add	sp, #8
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			@ (mov r8, r8)
 80073d8:	08002be5 	.word	0x08002be5

080073dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	1dbb      	adds	r3, r7, #6
 80073e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2280      	movs	r2, #128	@ 0x80
 80073ee:	589b      	ldr	r3, [r3, r2]
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d145      	bne.n	8007480 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_UART_Receive_IT+0x26>
 80073fa:	1dbb      	adds	r3, r7, #6
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e03d      	b.n	8007482 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	2380      	movs	r3, #128	@ 0x80
 800740c:	015b      	lsls	r3, r3, #5
 800740e:	429a      	cmp	r2, r3
 8007410:	d109      	bne.n	8007426 <HAL_UART_Receive_IT+0x4a>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2201      	movs	r2, #1
 800741e:	4013      	ands	r3, r2
 8007420:	d001      	beq.n	8007426 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e02d      	b.n	8007482 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	2380      	movs	r3, #128	@ 0x80
 8007434:	041b      	lsls	r3, r3, #16
 8007436:	4013      	ands	r3, r2
 8007438:	d019      	beq.n	800746e <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800743a:	f3ef 8310 	mrs	r3, PRIMASK
 800743e:	613b      	str	r3, [r7, #16]
  return(result);
 8007440:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	2301      	movs	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f383 8810 	msr	PRIMASK, r3
}
 800744e:	46c0      	nop			@ (mov r8, r8)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2180      	movs	r1, #128	@ 0x80
 800745c:	04c9      	lsls	r1, r1, #19
 800745e:	430a      	orrs	r2, r1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f383 8810 	msr	PRIMASK, r3
}
 800746c:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800746e:	1dbb      	adds	r3, r7, #6
 8007470:	881a      	ldrh	r2, [r3, #0]
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	0018      	movs	r0, r3
 8007478:	f000 ff56 	bl	8008328 <UART_Start_Receive_IT>
 800747c:	0003      	movs	r3, r0
 800747e:	e000      	b.n	8007482 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	0018      	movs	r0, r3
 8007484:	46bd      	mov	sp, r7
 8007486:	b008      	add	sp, #32
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	1dbb      	adds	r3, r7, #6
 8007498:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d000      	beq.n	80074a4 <HAL_UART_Transmit_DMA+0x18>
 80074a2:	e077      	b.n	8007594 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_UART_Transmit_DMA+0x26>
 80074aa:	1dbb      	adds	r3, r7, #6
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e06f      	b.n	8007596 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	2380      	movs	r3, #128	@ 0x80
 80074bc:	015b      	lsls	r3, r3, #5
 80074be:	429a      	cmp	r2, r3
 80074c0:	d109      	bne.n	80074d6 <HAL_UART_Transmit_DMA+0x4a>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2201      	movs	r2, #1
 80074ce:	4013      	ands	r3, r2
 80074d0:	d001      	beq.n	80074d6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e05f      	b.n	8007596 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	1dba      	adds	r2, r7, #6
 80074e0:	2150      	movs	r1, #80	@ 0x50
 80074e2:	8812      	ldrh	r2, [r2, #0]
 80074e4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1dba      	adds	r2, r7, #6
 80074ea:	2152      	movs	r1, #82	@ 0x52
 80074ec:	8812      	ldrh	r2, [r2, #0]
 80074ee:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2284      	movs	r2, #132	@ 0x84
 80074f4:	2100      	movs	r1, #0
 80074f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2221      	movs	r2, #33	@ 0x21
 80074fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007502:	2b00      	cmp	r3, #0
 8007504:	d027      	beq.n	8007556 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750a:	4a25      	ldr	r2, [pc, #148]	@ (80075a0 <HAL_UART_Transmit_DMA+0x114>)
 800750c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007512:	4a24      	ldr	r2, [pc, #144]	@ (80075a4 <HAL_UART_Transmit_DMA+0x118>)
 8007514:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751a:	4a23      	ldr	r2, [pc, #140]	@ (80075a8 <HAL_UART_Transmit_DMA+0x11c>)
 800751c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007522:	2200      	movs	r2, #0
 8007524:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800752e:	0019      	movs	r1, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3328      	adds	r3, #40	@ 0x28
 8007536:	001a      	movs	r2, r3
 8007538:	1dbb      	adds	r3, r7, #6
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	f7fc f925 	bl	800378a <HAL_DMA_Start_IT>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d008      	beq.n	8007556 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2284      	movs	r2, #132	@ 0x84
 8007548:	2110      	movs	r1, #16
 800754a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2220      	movs	r2, #32
 8007550:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e01f      	b.n	8007596 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2240      	movs	r2, #64	@ 0x40
 800755c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800755e:	f3ef 8310 	mrs	r3, PRIMASK
 8007562:	613b      	str	r3, [r7, #16]
  return(result);
 8007564:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	2301      	movs	r3, #1
 800756a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f383 8810 	msr	PRIMASK, r3
}
 8007572:	46c0      	nop			@ (mov r8, r8)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2180      	movs	r1, #128	@ 0x80
 8007580:	430a      	orrs	r2, r1
 8007582:	609a      	str	r2, [r3, #8]
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f383 8810 	msr	PRIMASK, r3
}
 800758e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	e000      	b.n	8007596 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007594:	2302      	movs	r3, #2
  }
}
 8007596:	0018      	movs	r0, r3
 8007598:	46bd      	mov	sp, r7
 800759a:	b008      	add	sp, #32
 800759c:	bd80      	pop	{r7, pc}
 800759e:	46c0      	nop			@ (mov r8, r8)
 80075a0:	080085cd 	.word	0x080085cd
 80075a4:	08008665 	.word	0x08008665
 80075a8:	08008687 	.word	0x08008687

080075ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b0ab      	sub	sp, #172	@ 0xac
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	22a4      	movs	r2, #164	@ 0xa4
 80075bc:	18b9      	adds	r1, r7, r2
 80075be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	20a0      	movs	r0, #160	@ 0xa0
 80075c8:	1839      	adds	r1, r7, r0
 80075ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	219c      	movs	r1, #156	@ 0x9c
 80075d4:	1879      	adds	r1, r7, r1
 80075d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075d8:	0011      	movs	r1, r2
 80075da:	18bb      	adds	r3, r7, r2
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a9c      	ldr	r2, [pc, #624]	@ (8007850 <HAL_UART_IRQHandler+0x2a4>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	2298      	movs	r2, #152	@ 0x98
 80075e4:	18bc      	adds	r4, r7, r2
 80075e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80075e8:	18bb      	adds	r3, r7, r2
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d114      	bne.n	800761a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075f0:	187b      	adds	r3, r7, r1
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2220      	movs	r2, #32
 80075f6:	4013      	ands	r3, r2
 80075f8:	d00f      	beq.n	800761a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075fa:	183b      	adds	r3, r7, r0
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2220      	movs	r2, #32
 8007600:	4013      	ands	r3, r2
 8007602:	d00a      	beq.n	800761a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007608:	2b00      	cmp	r3, #0
 800760a:	d100      	bne.n	800760e <HAL_UART_IRQHandler+0x62>
 800760c:	e2a8      	b.n	8007b60 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	0010      	movs	r0, r2
 8007616:	4798      	blx	r3
      }
      return;
 8007618:	e2a2      	b.n	8007b60 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800761a:	2398      	movs	r3, #152	@ 0x98
 800761c:	18fb      	adds	r3, r7, r3
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d100      	bne.n	8007626 <HAL_UART_IRQHandler+0x7a>
 8007624:	e11a      	b.n	800785c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007626:	239c      	movs	r3, #156	@ 0x9c
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2201      	movs	r2, #1
 800762e:	4013      	ands	r3, r2
 8007630:	d106      	bne.n	8007640 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007632:	23a0      	movs	r3, #160	@ 0xa0
 8007634:	18fb      	adds	r3, r7, r3
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a86      	ldr	r2, [pc, #536]	@ (8007854 <HAL_UART_IRQHandler+0x2a8>)
 800763a:	4013      	ands	r3, r2
 800763c:	d100      	bne.n	8007640 <HAL_UART_IRQHandler+0x94>
 800763e:	e10d      	b.n	800785c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007640:	23a4      	movs	r3, #164	@ 0xa4
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2201      	movs	r2, #1
 8007648:	4013      	ands	r3, r2
 800764a:	d012      	beq.n	8007672 <HAL_UART_IRQHandler+0xc6>
 800764c:	23a0      	movs	r3, #160	@ 0xa0
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	2380      	movs	r3, #128	@ 0x80
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4013      	ands	r3, r2
 8007658:	d00b      	beq.n	8007672 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2201      	movs	r2, #1
 8007660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2284      	movs	r2, #132	@ 0x84
 8007666:	589b      	ldr	r3, [r3, r2]
 8007668:	2201      	movs	r2, #1
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2184      	movs	r1, #132	@ 0x84
 8007670:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007672:	23a4      	movs	r3, #164	@ 0xa4
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2202      	movs	r2, #2
 800767a:	4013      	ands	r3, r2
 800767c:	d011      	beq.n	80076a2 <HAL_UART_IRQHandler+0xf6>
 800767e:	239c      	movs	r3, #156	@ 0x9c
 8007680:	18fb      	adds	r3, r7, r3
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2201      	movs	r2, #1
 8007686:	4013      	ands	r3, r2
 8007688:	d00b      	beq.n	80076a2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2202      	movs	r2, #2
 8007690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2284      	movs	r2, #132	@ 0x84
 8007696:	589b      	ldr	r3, [r3, r2]
 8007698:	2204      	movs	r2, #4
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2184      	movs	r1, #132	@ 0x84
 80076a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076a2:	23a4      	movs	r3, #164	@ 0xa4
 80076a4:	18fb      	adds	r3, r7, r3
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2204      	movs	r2, #4
 80076aa:	4013      	ands	r3, r2
 80076ac:	d011      	beq.n	80076d2 <HAL_UART_IRQHandler+0x126>
 80076ae:	239c      	movs	r3, #156	@ 0x9c
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2201      	movs	r2, #1
 80076b6:	4013      	ands	r3, r2
 80076b8:	d00b      	beq.n	80076d2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2204      	movs	r2, #4
 80076c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2284      	movs	r2, #132	@ 0x84
 80076c6:	589b      	ldr	r3, [r3, r2]
 80076c8:	2202      	movs	r2, #2
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2184      	movs	r1, #132	@ 0x84
 80076d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076d2:	23a4      	movs	r3, #164	@ 0xa4
 80076d4:	18fb      	adds	r3, r7, r3
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2208      	movs	r2, #8
 80076da:	4013      	ands	r3, r2
 80076dc:	d017      	beq.n	800770e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076de:	23a0      	movs	r3, #160	@ 0xa0
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2220      	movs	r2, #32
 80076e6:	4013      	ands	r3, r2
 80076e8:	d105      	bne.n	80076f6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076ea:	239c      	movs	r3, #156	@ 0x9c
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2201      	movs	r2, #1
 80076f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076f4:	d00b      	beq.n	800770e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2208      	movs	r2, #8
 80076fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2284      	movs	r2, #132	@ 0x84
 8007702:	589b      	ldr	r3, [r3, r2]
 8007704:	2208      	movs	r2, #8
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2184      	movs	r1, #132	@ 0x84
 800770c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800770e:	23a4      	movs	r3, #164	@ 0xa4
 8007710:	18fb      	adds	r3, r7, r3
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	2380      	movs	r3, #128	@ 0x80
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	4013      	ands	r3, r2
 800771a:	d013      	beq.n	8007744 <HAL_UART_IRQHandler+0x198>
 800771c:	23a0      	movs	r3, #160	@ 0xa0
 800771e:	18fb      	adds	r3, r7, r3
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	2380      	movs	r3, #128	@ 0x80
 8007724:	04db      	lsls	r3, r3, #19
 8007726:	4013      	ands	r3, r2
 8007728:	d00c      	beq.n	8007744 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2280      	movs	r2, #128	@ 0x80
 8007730:	0112      	lsls	r2, r2, #4
 8007732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2284      	movs	r2, #132	@ 0x84
 8007738:	589b      	ldr	r3, [r3, r2]
 800773a:	2220      	movs	r2, #32
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2184      	movs	r1, #132	@ 0x84
 8007742:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2284      	movs	r2, #132	@ 0x84
 8007748:	589b      	ldr	r3, [r3, r2]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d100      	bne.n	8007750 <HAL_UART_IRQHandler+0x1a4>
 800774e:	e209      	b.n	8007b64 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007750:	23a4      	movs	r3, #164	@ 0xa4
 8007752:	18fb      	adds	r3, r7, r3
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2220      	movs	r2, #32
 8007758:	4013      	ands	r3, r2
 800775a:	d00e      	beq.n	800777a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800775c:	23a0      	movs	r3, #160	@ 0xa0
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2220      	movs	r2, #32
 8007764:	4013      	ands	r3, r2
 8007766:	d008      	beq.n	800777a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	0010      	movs	r0, r2
 8007778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2284      	movs	r2, #132	@ 0x84
 800777e:	589b      	ldr	r3, [r3, r2]
 8007780:	2194      	movs	r1, #148	@ 0x94
 8007782:	187a      	adds	r2, r7, r1
 8007784:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2240      	movs	r2, #64	@ 0x40
 800778e:	4013      	ands	r3, r2
 8007790:	2b40      	cmp	r3, #64	@ 0x40
 8007792:	d004      	beq.n	800779e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007794:	187b      	adds	r3, r7, r1
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2228      	movs	r2, #40	@ 0x28
 800779a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800779c:	d04b      	beq.n	8007836 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	0018      	movs	r0, r3
 80077a2:	f000 feaf 	bl	8008504 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2240      	movs	r2, #64	@ 0x40
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b40      	cmp	r3, #64	@ 0x40
 80077b2:	d139      	bne.n	8007828 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b4:	f3ef 8310 	mrs	r3, PRIMASK
 80077b8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80077ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077bc:	2090      	movs	r0, #144	@ 0x90
 80077be:	183a      	adds	r2, r7, r0
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	2301      	movs	r3, #1
 80077c4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077c8:	f383 8810 	msr	PRIMASK, r3
}
 80077cc:	46c0      	nop			@ (mov r8, r8)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2140      	movs	r1, #64	@ 0x40
 80077da:	438a      	bics	r2, r1
 80077dc:	609a      	str	r2, [r3, #8]
 80077de:	183b      	adds	r3, r7, r0
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077e6:	f383 8810 	msr	PRIMASK, r3
}
 80077ea:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d012      	beq.n	800781a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f8:	4a17      	ldr	r2, [pc, #92]	@ (8007858 <HAL_UART_IRQHandler+0x2ac>)
 80077fa:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007800:	0018      	movs	r0, r3
 8007802:	f7fc f860 	bl	80038c6 <HAL_DMA_Abort_IT>
 8007806:	1e03      	subs	r3, r0, #0
 8007808:	d020      	beq.n	800784c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007814:	0018      	movs	r0, r3
 8007816:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	e018      	b.n	800784c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2298      	movs	r2, #152	@ 0x98
 800781e:	589b      	ldr	r3, [r3, r2]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	0010      	movs	r0, r2
 8007824:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007826:	e011      	b.n	800784c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2298      	movs	r2, #152	@ 0x98
 800782c:	589b      	ldr	r3, [r3, r2]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	0010      	movs	r0, r2
 8007832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007834:	e00a      	b.n	800784c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2298      	movs	r2, #152	@ 0x98
 800783a:	589b      	ldr	r3, [r3, r2]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	0010      	movs	r0, r2
 8007840:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2284      	movs	r2, #132	@ 0x84
 8007846:	2100      	movs	r1, #0
 8007848:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800784a:	e18b      	b.n	8007b64 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784c:	46c0      	nop			@ (mov r8, r8)
    return;
 800784e:	e189      	b.n	8007b64 <HAL_UART_IRQHandler+0x5b8>
 8007850:	0000080f 	.word	0x0000080f
 8007854:	04000120 	.word	0x04000120
 8007858:	0800870f 	.word	0x0800870f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007860:	2b01      	cmp	r3, #1
 8007862:	d000      	beq.n	8007866 <HAL_UART_IRQHandler+0x2ba>
 8007864:	e13b      	b.n	8007ade <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007866:	23a4      	movs	r3, #164	@ 0xa4
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2210      	movs	r2, #16
 800786e:	4013      	ands	r3, r2
 8007870:	d100      	bne.n	8007874 <HAL_UART_IRQHandler+0x2c8>
 8007872:	e134      	b.n	8007ade <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007874:	23a0      	movs	r3, #160	@ 0xa0
 8007876:	18fb      	adds	r3, r7, r3
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2210      	movs	r2, #16
 800787c:	4013      	ands	r3, r2
 800787e:	d100      	bne.n	8007882 <HAL_UART_IRQHandler+0x2d6>
 8007880:	e12d      	b.n	8007ade <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2210      	movs	r2, #16
 8007888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2240      	movs	r2, #64	@ 0x40
 8007892:	4013      	ands	r3, r2
 8007894:	2b40      	cmp	r3, #64	@ 0x40
 8007896:	d000      	beq.n	800789a <HAL_UART_IRQHandler+0x2ee>
 8007898:	e0a0      	b.n	80079dc <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	217e      	movs	r1, #126	@ 0x7e
 80078a4:	187b      	adds	r3, r7, r1
 80078a6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80078a8:	187b      	adds	r3, r7, r1
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d100      	bne.n	80078b2 <HAL_UART_IRQHandler+0x306>
 80078b0:	e15a      	b.n	8007b68 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2258      	movs	r2, #88	@ 0x58
 80078b6:	5a9b      	ldrh	r3, [r3, r2]
 80078b8:	187a      	adds	r2, r7, r1
 80078ba:	8812      	ldrh	r2, [r2, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d300      	bcc.n	80078c2 <HAL_UART_IRQHandler+0x316>
 80078c0:	e152      	b.n	8007b68 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	187a      	adds	r2, r7, r1
 80078c6:	215a      	movs	r1, #90	@ 0x5a
 80078c8:	8812      	ldrh	r2, [r2, #0]
 80078ca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d06f      	beq.n	80079b6 <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d6:	f3ef 8310 	mrs	r3, PRIMASK
 80078da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078e0:	2301      	movs	r3, #1
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e6:	f383 8810 	msr	PRIMASK, r3
}
 80078ea:	46c0      	nop			@ (mov r8, r8)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	49a0      	ldr	r1, [pc, #640]	@ (8007b78 <HAL_UART_IRQHandler+0x5cc>)
 80078f8:	400a      	ands	r2, r1
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	f383 8810 	msr	PRIMASK, r3
}
 8007906:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007908:	f3ef 8310 	mrs	r3, PRIMASK
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800790e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007910:	677b      	str	r3, [r7, #116]	@ 0x74
 8007912:	2301      	movs	r3, #1
 8007914:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007918:	f383 8810 	msr	PRIMASK, r3
}
 800791c:	46c0      	nop			@ (mov r8, r8)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2101      	movs	r1, #1
 800792a:	438a      	bics	r2, r1
 800792c:	609a      	str	r2, [r3, #8]
 800792e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007930:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007934:	f383 8810 	msr	PRIMASK, r3
}
 8007938:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800793a:	f3ef 8310 	mrs	r3, PRIMASK
 800793e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007942:	673b      	str	r3, [r7, #112]	@ 0x70
 8007944:	2301      	movs	r3, #1
 8007946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794a:	f383 8810 	msr	PRIMASK, r3
}
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2140      	movs	r1, #64	@ 0x40
 800795c:	438a      	bics	r2, r1
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007962:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007966:	f383 8810 	msr	PRIMASK, r3
}
 800796a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2280      	movs	r2, #128	@ 0x80
 8007970:	2120      	movs	r1, #32
 8007972:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800797a:	f3ef 8310 	mrs	r3, PRIMASK
 800797e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8007980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007984:	2301      	movs	r3, #1
 8007986:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800798a:	f383 8810 	msr	PRIMASK, r3
}
 800798e:	46c0      	nop			@ (mov r8, r8)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2110      	movs	r1, #16
 800799c:	438a      	bics	r2, r1
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079a6:	f383 8810 	msr	PRIMASK, r3
}
 80079aa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079b0:	0018      	movs	r0, r3
 80079b2:	f7fb ff50 	bl	8003856 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	22ac      	movs	r2, #172	@ 0xac
 80079c0:	589b      	ldr	r3, [r3, r2]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	2158      	movs	r1, #88	@ 0x58
 80079c6:	5a51      	ldrh	r1, [r2, r1]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	205a      	movs	r0, #90	@ 0x5a
 80079cc:	5a12      	ldrh	r2, [r2, r0]
 80079ce:	b292      	uxth	r2, r2
 80079d0:	1a8a      	subs	r2, r1, r2
 80079d2:	b291      	uxth	r1, r2
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	0010      	movs	r0, r2
 80079d8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079da:	e0c5      	b.n	8007b68 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2258      	movs	r2, #88	@ 0x58
 80079e0:	5a99      	ldrh	r1, [r3, r2]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	225a      	movs	r2, #90	@ 0x5a
 80079e6:	5a9b      	ldrh	r3, [r3, r2]
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	208e      	movs	r0, #142	@ 0x8e
 80079ec:	183b      	adds	r3, r7, r0
 80079ee:	1a8a      	subs	r2, r1, r2
 80079f0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	225a      	movs	r2, #90	@ 0x5a
 80079f6:	5a9b      	ldrh	r3, [r3, r2]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d100      	bne.n	8007a00 <HAL_UART_IRQHandler+0x454>
 80079fe:	e0b5      	b.n	8007b6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007a00:	183b      	adds	r3, r7, r0
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d100      	bne.n	8007a0a <HAL_UART_IRQHandler+0x45e>
 8007a08:	e0b0      	b.n	8007b6c <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a10:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a12:	2488      	movs	r4, #136	@ 0x88
 8007a14:	193a      	adds	r2, r7, r4
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f383 8810 	msr	PRIMASK, r3
}
 8007a22:	46c0      	nop			@ (mov r8, r8)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4953      	ldr	r1, [pc, #332]	@ (8007b7c <HAL_UART_IRQHandler+0x5d0>)
 8007a30:	400a      	ands	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	193b      	adds	r3, r7, r4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f383 8810 	msr	PRIMASK, r3
}
 8007a40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a42:	f3ef 8310 	mrs	r3, PRIMASK
 8007a46:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a48:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4a:	2484      	movs	r4, #132	@ 0x84
 8007a4c:	193a      	adds	r2, r7, r4
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	2301      	movs	r3, #1
 8007a52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f383 8810 	msr	PRIMASK, r3
}
 8007a5a:	46c0      	nop			@ (mov r8, r8)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2101      	movs	r1, #1
 8007a68:	438a      	bics	r2, r1
 8007a6a:	609a      	str	r2, [r3, #8]
 8007a6c:	193b      	adds	r3, r7, r4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f383 8810 	msr	PRIMASK, r3
}
 8007a78:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2280      	movs	r2, #128	@ 0x80
 8007a7e:	2120      	movs	r1, #32
 8007a80:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	2480      	movs	r4, #128	@ 0x80
 8007a98:	193a      	adds	r2, r7, r4
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	f383 8810 	msr	PRIMASK, r3
}
 8007aa6:	46c0      	nop			@ (mov r8, r8)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2110      	movs	r1, #16
 8007ab4:	438a      	bics	r2, r1
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	193b      	adds	r3, r7, r4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	f383 8810 	msr	PRIMASK, r3
}
 8007ac4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	22ac      	movs	r2, #172	@ 0xac
 8007ad0:	589b      	ldr	r3, [r3, r2]
 8007ad2:	183a      	adds	r2, r7, r0
 8007ad4:	8811      	ldrh	r1, [r2, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	0010      	movs	r0, r2
 8007ada:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007adc:	e046      	b.n	8007b6c <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ade:	23a4      	movs	r3, #164	@ 0xa4
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	2380      	movs	r3, #128	@ 0x80
 8007ae6:	035b      	lsls	r3, r3, #13
 8007ae8:	4013      	ands	r3, r2
 8007aea:	d012      	beq.n	8007b12 <HAL_UART_IRQHandler+0x566>
 8007aec:	239c      	movs	r3, #156	@ 0x9c
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	2380      	movs	r3, #128	@ 0x80
 8007af4:	03db      	lsls	r3, r3, #15
 8007af6:	4013      	ands	r3, r2
 8007af8:	d00b      	beq.n	8007b12 <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2280      	movs	r2, #128	@ 0x80
 8007b00:	0352      	lsls	r2, r2, #13
 8007b02:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	22a8      	movs	r2, #168	@ 0xa8
 8007b08:	589b      	ldr	r3, [r3, r2]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	0010      	movs	r0, r2
 8007b0e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b10:	e02f      	b.n	8007b72 <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b12:	23a4      	movs	r3, #164	@ 0xa4
 8007b14:	18fb      	adds	r3, r7, r3
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2280      	movs	r2, #128	@ 0x80
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	d00f      	beq.n	8007b3e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b1e:	23a0      	movs	r3, #160	@ 0xa0
 8007b20:	18fb      	adds	r3, r7, r3
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2280      	movs	r2, #128	@ 0x80
 8007b26:	4013      	ands	r3, r2
 8007b28:	d009      	beq.n	8007b3e <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d01e      	beq.n	8007b70 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	0010      	movs	r0, r2
 8007b3a:	4798      	blx	r3
    }
    return;
 8007b3c:	e018      	b.n	8007b70 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b3e:	23a4      	movs	r3, #164	@ 0xa4
 8007b40:	18fb      	adds	r3, r7, r3
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2240      	movs	r2, #64	@ 0x40
 8007b46:	4013      	ands	r3, r2
 8007b48:	d013      	beq.n	8007b72 <HAL_UART_IRQHandler+0x5c6>
 8007b4a:	23a0      	movs	r3, #160	@ 0xa0
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2240      	movs	r2, #64	@ 0x40
 8007b52:	4013      	ands	r3, r2
 8007b54:	d00d      	beq.n	8007b72 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	0018      	movs	r0, r3
 8007b5a:	f000 fdf1 	bl	8008740 <UART_EndTransmit_IT>
    return;
 8007b5e:	e008      	b.n	8007b72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007b60:	46c0      	nop			@ (mov r8, r8)
 8007b62:	e006      	b.n	8007b72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007b64:	46c0      	nop			@ (mov r8, r8)
 8007b66:	e004      	b.n	8007b72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007b68:	46c0      	nop			@ (mov r8, r8)
 8007b6a:	e002      	b.n	8007b72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007b6c:	46c0      	nop			@ (mov r8, r8)
 8007b6e:	e000      	b.n	8007b72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007b70:	46c0      	nop			@ (mov r8, r8)
  }

}
 8007b72:	46bd      	mov	sp, r7
 8007b74:	b02b      	add	sp, #172	@ 0xac
 8007b76:	bd90      	pop	{r4, r7, pc}
 8007b78:	fffffeff 	.word	0xfffffeff
 8007b7c:	fffffedf 	.word	0xfffffedf

08007b80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b88:	46c0      	nop			@ (mov r8, r8)
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	b002      	add	sp, #8
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b98:	46c0      	nop			@ (mov r8, r8)
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	b002      	add	sp, #8
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ba8:	46c0      	nop			@ (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b002      	add	sp, #8
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007bb8:	46c0      	nop			@ (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b002      	add	sp, #8
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007bc8:	46c0      	nop			@ (mov r8, r8)
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007bd8:	46c0      	nop			@ (mov r8, r8)
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	000a      	movs	r2, r1
 8007bea:	1cbb      	adds	r3, r7, #2
 8007bec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b002      	add	sp, #8
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2188      	movs	r1, #136	@ 0x88
 8007c04:	4a14      	ldr	r2, [pc, #80]	@ (8007c58 <UART_InitCallbacksToDefault+0x60>)
 8007c06:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	218c      	movs	r1, #140	@ 0x8c
 8007c0c:	4a13      	ldr	r2, [pc, #76]	@ (8007c5c <UART_InitCallbacksToDefault+0x64>)
 8007c0e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2190      	movs	r1, #144	@ 0x90
 8007c14:	4a12      	ldr	r2, [pc, #72]	@ (8007c60 <UART_InitCallbacksToDefault+0x68>)
 8007c16:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2194      	movs	r1, #148	@ 0x94
 8007c1c:	4a11      	ldr	r2, [pc, #68]	@ (8007c64 <UART_InitCallbacksToDefault+0x6c>)
 8007c1e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2198      	movs	r1, #152	@ 0x98
 8007c24:	4a10      	ldr	r2, [pc, #64]	@ (8007c68 <UART_InitCallbacksToDefault+0x70>)
 8007c26:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	219c      	movs	r1, #156	@ 0x9c
 8007c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8007c6c <UART_InitCallbacksToDefault+0x74>)
 8007c2e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	21a0      	movs	r1, #160	@ 0xa0
 8007c34:	4a0e      	ldr	r2, [pc, #56]	@ (8007c70 <UART_InitCallbacksToDefault+0x78>)
 8007c36:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	21a4      	movs	r1, #164	@ 0xa4
 8007c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8007c74 <UART_InitCallbacksToDefault+0x7c>)
 8007c3e:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	21a8      	movs	r1, #168	@ 0xa8
 8007c44:	4a0c      	ldr	r2, [pc, #48]	@ (8007c78 <UART_InitCallbacksToDefault+0x80>)
 8007c46:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	21ac      	movs	r1, #172	@ 0xac
 8007c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8007c7c <UART_InitCallbacksToDefault+0x84>)
 8007c4e:	505a      	str	r2, [r3, r1]

}
 8007c50:	46c0      	nop			@ (mov r8, r8)
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b002      	add	sp, #8
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	08007b81 	.word	0x08007b81
 8007c5c:	0800c951 	.word	0x0800c951
 8007c60:	08007b91 	.word	0x08007b91
 8007c64:	0800c909 	.word	0x0800c909
 8007c68:	08007ba1 	.word	0x08007ba1
 8007c6c:	08007bb1 	.word	0x08007bb1
 8007c70:	08007bc1 	.word	0x08007bc1
 8007c74:	08007bd1 	.word	0x08007bd1
 8007c78:	08008b15 	.word	0x08008b15
 8007c7c:	08007be1 	.word	0x08007be1

08007c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c88:	231e      	movs	r3, #30
 8007c8a:	18fb      	adds	r3, r7, r3
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4aaf      	ldr	r2, [pc, #700]	@ (8007f6c <UART_SetConfig+0x2ec>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	0019      	movs	r1, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4aaa      	ldr	r2, [pc, #680]	@ (8007f70 <UART_SetConfig+0x2f0>)
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	0019      	movs	r1, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	4aa1      	ldr	r2, [pc, #644]	@ (8007f74 <UART_SetConfig+0x2f4>)
 8007cee:	4013      	ands	r3, r2
 8007cf0:	0019      	movs	r1, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a9d      	ldr	r2, [pc, #628]	@ (8007f78 <UART_SetConfig+0x2f8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d127      	bne.n	8007d56 <UART_SetConfig+0xd6>
 8007d06:	4b9d      	ldr	r3, [pc, #628]	@ (8007f7c <UART_SetConfig+0x2fc>)
 8007d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d00d      	beq.n	8007d2e <UART_SetConfig+0xae>
 8007d12:	d81b      	bhi.n	8007d4c <UART_SetConfig+0xcc>
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d014      	beq.n	8007d42 <UART_SetConfig+0xc2>
 8007d18:	d818      	bhi.n	8007d4c <UART_SetConfig+0xcc>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <UART_SetConfig+0xa4>
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d00a      	beq.n	8007d38 <UART_SetConfig+0xb8>
 8007d22:	e013      	b.n	8007d4c <UART_SetConfig+0xcc>
 8007d24:	231f      	movs	r3, #31
 8007d26:	18fb      	adds	r3, r7, r3
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
 8007d2c:	e065      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007d2e:	231f      	movs	r3, #31
 8007d30:	18fb      	adds	r3, r7, r3
 8007d32:	2202      	movs	r2, #2
 8007d34:	701a      	strb	r2, [r3, #0]
 8007d36:	e060      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007d38:	231f      	movs	r3, #31
 8007d3a:	18fb      	adds	r3, r7, r3
 8007d3c:	2204      	movs	r2, #4
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	e05b      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007d42:	231f      	movs	r3, #31
 8007d44:	18fb      	adds	r3, r7, r3
 8007d46:	2208      	movs	r2, #8
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e056      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007d4c:	231f      	movs	r3, #31
 8007d4e:	18fb      	adds	r3, r7, r3
 8007d50:	2210      	movs	r2, #16
 8007d52:	701a      	strb	r2, [r3, #0]
 8007d54:	e051      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a89      	ldr	r2, [pc, #548]	@ (8007f80 <UART_SetConfig+0x300>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d134      	bne.n	8007dca <UART_SetConfig+0x14a>
 8007d60:	4b86      	ldr	r3, [pc, #536]	@ (8007f7c <UART_SetConfig+0x2fc>)
 8007d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d64:	23c0      	movs	r3, #192	@ 0xc0
 8007d66:	029b      	lsls	r3, r3, #10
 8007d68:	4013      	ands	r3, r2
 8007d6a:	22c0      	movs	r2, #192	@ 0xc0
 8007d6c:	0292      	lsls	r2, r2, #10
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d017      	beq.n	8007da2 <UART_SetConfig+0x122>
 8007d72:	22c0      	movs	r2, #192	@ 0xc0
 8007d74:	0292      	lsls	r2, r2, #10
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d822      	bhi.n	8007dc0 <UART_SetConfig+0x140>
 8007d7a:	2280      	movs	r2, #128	@ 0x80
 8007d7c:	0292      	lsls	r2, r2, #10
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d019      	beq.n	8007db6 <UART_SetConfig+0x136>
 8007d82:	2280      	movs	r2, #128	@ 0x80
 8007d84:	0292      	lsls	r2, r2, #10
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d81a      	bhi.n	8007dc0 <UART_SetConfig+0x140>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <UART_SetConfig+0x118>
 8007d8e:	2280      	movs	r2, #128	@ 0x80
 8007d90:	0252      	lsls	r2, r2, #9
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00a      	beq.n	8007dac <UART_SetConfig+0x12c>
 8007d96:	e013      	b.n	8007dc0 <UART_SetConfig+0x140>
 8007d98:	231f      	movs	r3, #31
 8007d9a:	18fb      	adds	r3, r7, r3
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	701a      	strb	r2, [r3, #0]
 8007da0:	e02b      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007da2:	231f      	movs	r3, #31
 8007da4:	18fb      	adds	r3, r7, r3
 8007da6:	2202      	movs	r2, #2
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	e026      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007dac:	231f      	movs	r3, #31
 8007dae:	18fb      	adds	r3, r7, r3
 8007db0:	2204      	movs	r2, #4
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e021      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007db6:	231f      	movs	r3, #31
 8007db8:	18fb      	adds	r3, r7, r3
 8007dba:	2208      	movs	r2, #8
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e01c      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007dc0:	231f      	movs	r3, #31
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	2210      	movs	r2, #16
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	e017      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a6d      	ldr	r2, [pc, #436]	@ (8007f84 <UART_SetConfig+0x304>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d104      	bne.n	8007dde <UART_SetConfig+0x15e>
 8007dd4:	231f      	movs	r3, #31
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	e00d      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a69      	ldr	r2, [pc, #420]	@ (8007f88 <UART_SetConfig+0x308>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d104      	bne.n	8007df2 <UART_SetConfig+0x172>
 8007de8:	231f      	movs	r3, #31
 8007dea:	18fb      	adds	r3, r7, r3
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	e003      	b.n	8007dfa <UART_SetConfig+0x17a>
 8007df2:	231f      	movs	r3, #31
 8007df4:	18fb      	adds	r3, r7, r3
 8007df6:	2210      	movs	r2, #16
 8007df8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69da      	ldr	r2, [r3, #28]
 8007dfe:	2380      	movs	r3, #128	@ 0x80
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d15c      	bne.n	8007ec0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8007e06:	231f      	movs	r3, #31
 8007e08:	18fb      	adds	r3, r7, r3
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d015      	beq.n	8007e3c <UART_SetConfig+0x1bc>
 8007e10:	dc18      	bgt.n	8007e44 <UART_SetConfig+0x1c4>
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d00d      	beq.n	8007e32 <UART_SetConfig+0x1b2>
 8007e16:	dc15      	bgt.n	8007e44 <UART_SetConfig+0x1c4>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <UART_SetConfig+0x1a2>
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d005      	beq.n	8007e2c <UART_SetConfig+0x1ac>
 8007e20:	e010      	b.n	8007e44 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e22:	f7fe fc43 	bl	80066ac <HAL_RCC_GetPCLK1Freq>
 8007e26:	0003      	movs	r3, r0
 8007e28:	61bb      	str	r3, [r7, #24]
        break;
 8007e2a:	e012      	b.n	8007e52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e2c:	4b57      	ldr	r3, [pc, #348]	@ (8007f8c <UART_SetConfig+0x30c>)
 8007e2e:	61bb      	str	r3, [r7, #24]
        break;
 8007e30:	e00f      	b.n	8007e52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e32:	f7fe fbbf 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8007e36:	0003      	movs	r3, r0
 8007e38:	61bb      	str	r3, [r7, #24]
        break;
 8007e3a:	e00a      	b.n	8007e52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e3c:	2380      	movs	r3, #128	@ 0x80
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	61bb      	str	r3, [r7, #24]
        break;
 8007e42:	e006      	b.n	8007e52 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e48:	231e      	movs	r3, #30
 8007e4a:	18fb      	adds	r3, r7, r3
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	701a      	strb	r2, [r3, #0]
        break;
 8007e50:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d100      	bne.n	8007e5a <UART_SetConfig+0x1da>
 8007e58:	e07a      	b.n	8007f50 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	005a      	lsls	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	18d2      	adds	r2, r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	0019      	movs	r1, r3
 8007e6c:	0010      	movs	r0, r2
 8007e6e:	f7f8 f967 	bl	8000140 <__udivsi3>
 8007e72:	0003      	movs	r3, r0
 8007e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b0f      	cmp	r3, #15
 8007e7a:	d91c      	bls.n	8007eb6 <UART_SetConfig+0x236>
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	2380      	movs	r3, #128	@ 0x80
 8007e80:	025b      	lsls	r3, r3, #9
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d217      	bcs.n	8007eb6 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	200e      	movs	r0, #14
 8007e8c:	183b      	adds	r3, r7, r0
 8007e8e:	210f      	movs	r1, #15
 8007e90:	438a      	bics	r2, r1
 8007e92:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2207      	movs	r2, #7
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	b299      	uxth	r1, r3
 8007ea0:	183b      	adds	r3, r7, r0
 8007ea2:	183a      	adds	r2, r7, r0
 8007ea4:	8812      	ldrh	r2, [r2, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	183a      	adds	r2, r7, r0
 8007eb0:	8812      	ldrh	r2, [r2, #0]
 8007eb2:	60da      	str	r2, [r3, #12]
 8007eb4:	e04c      	b.n	8007f50 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007eb6:	231e      	movs	r3, #30
 8007eb8:	18fb      	adds	r3, r7, r3
 8007eba:	2201      	movs	r2, #1
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	e047      	b.n	8007f50 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ec0:	231f      	movs	r3, #31
 8007ec2:	18fb      	adds	r3, r7, r3
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d015      	beq.n	8007ef6 <UART_SetConfig+0x276>
 8007eca:	dc18      	bgt.n	8007efe <UART_SetConfig+0x27e>
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d00d      	beq.n	8007eec <UART_SetConfig+0x26c>
 8007ed0:	dc15      	bgt.n	8007efe <UART_SetConfig+0x27e>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <UART_SetConfig+0x25c>
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d005      	beq.n	8007ee6 <UART_SetConfig+0x266>
 8007eda:	e010      	b.n	8007efe <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007edc:	f7fe fbe6 	bl	80066ac <HAL_RCC_GetPCLK1Freq>
 8007ee0:	0003      	movs	r3, r0
 8007ee2:	61bb      	str	r3, [r7, #24]
        break;
 8007ee4:	e012      	b.n	8007f0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ee6:	4b29      	ldr	r3, [pc, #164]	@ (8007f8c <UART_SetConfig+0x30c>)
 8007ee8:	61bb      	str	r3, [r7, #24]
        break;
 8007eea:	e00f      	b.n	8007f0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eec:	f7fe fb62 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8007ef0:	0003      	movs	r3, r0
 8007ef2:	61bb      	str	r3, [r7, #24]
        break;
 8007ef4:	e00a      	b.n	8007f0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef6:	2380      	movs	r3, #128	@ 0x80
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	61bb      	str	r3, [r7, #24]
        break;
 8007efc:	e006      	b.n	8007f0c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f02:	231e      	movs	r3, #30
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	2201      	movs	r2, #1
 8007f08:	701a      	strb	r2, [r3, #0]
        break;
 8007f0a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01e      	beq.n	8007f50 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	085a      	lsrs	r2, r3, #1
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	18d2      	adds	r2, r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	0019      	movs	r1, r3
 8007f22:	0010      	movs	r0, r2
 8007f24:	f7f8 f90c 	bl	8000140 <__udivsi3>
 8007f28:	0003      	movs	r3, r0
 8007f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2b0f      	cmp	r3, #15
 8007f30:	d90a      	bls.n	8007f48 <UART_SetConfig+0x2c8>
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	2380      	movs	r3, #128	@ 0x80
 8007f36:	025b      	lsls	r3, r3, #9
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d205      	bcs.n	8007f48 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60da      	str	r2, [r3, #12]
 8007f46:	e003      	b.n	8007f50 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007f48:	231e      	movs	r3, #30
 8007f4a:	18fb      	adds	r3, r7, r3
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007f5c:	231e      	movs	r3, #30
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	781b      	ldrb	r3, [r3, #0]
}
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b008      	add	sp, #32
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	46c0      	nop			@ (mov r8, r8)
 8007f6c:	efff69f3 	.word	0xefff69f3
 8007f70:	ffffcfff 	.word	0xffffcfff
 8007f74:	fffff4ff 	.word	0xfffff4ff
 8007f78:	40013800 	.word	0x40013800
 8007f7c:	40021000 	.word	0x40021000
 8007f80:	40004400 	.word	0x40004400
 8007f84:	40004800 	.word	0x40004800
 8007f88:	40004c00 	.word	0x40004c00
 8007f8c:	007a1200 	.word	0x007a1200

08007f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	d00b      	beq.n	8007fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80080d4 <UART_AdvFeatureConfig+0x144>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	0019      	movs	r1, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d00b      	beq.n	8007fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4a43      	ldr	r2, [pc, #268]	@ (80080d8 <UART_AdvFeatureConfig+0x148>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	0019      	movs	r1, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a3b      	ldr	r2, [pc, #236]	@ (80080dc <UART_AdvFeatureConfig+0x14c>)
 8007fee:	4013      	ands	r3, r2
 8007ff0:	0019      	movs	r1, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008002:	2204      	movs	r2, #4
 8008004:	4013      	ands	r3, r2
 8008006:	d00b      	beq.n	8008020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	4a34      	ldr	r2, [pc, #208]	@ (80080e0 <UART_AdvFeatureConfig+0x150>)
 8008010:	4013      	ands	r3, r2
 8008012:	0019      	movs	r1, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008024:	2210      	movs	r2, #16
 8008026:	4013      	ands	r3, r2
 8008028:	d00b      	beq.n	8008042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	4a2c      	ldr	r2, [pc, #176]	@ (80080e4 <UART_AdvFeatureConfig+0x154>)
 8008032:	4013      	ands	r3, r2
 8008034:	0019      	movs	r1, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008046:	2220      	movs	r2, #32
 8008048:	4013      	ands	r3, r2
 800804a:	d00b      	beq.n	8008064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	4a25      	ldr	r2, [pc, #148]	@ (80080e8 <UART_AdvFeatureConfig+0x158>)
 8008054:	4013      	ands	r3, r2
 8008056:	0019      	movs	r1, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	2240      	movs	r2, #64	@ 0x40
 800806a:	4013      	ands	r3, r2
 800806c:	d01d      	beq.n	80080aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	4a1d      	ldr	r2, [pc, #116]	@ (80080ec <UART_AdvFeatureConfig+0x15c>)
 8008076:	4013      	ands	r3, r2
 8008078:	0019      	movs	r1, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800808a:	2380      	movs	r3, #128	@ 0x80
 800808c:	035b      	lsls	r3, r3, #13
 800808e:	429a      	cmp	r2, r3
 8008090:	d10b      	bne.n	80080aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a15      	ldr	r2, [pc, #84]	@ (80080f0 <UART_AdvFeatureConfig+0x160>)
 800809a:	4013      	ands	r3, r2
 800809c:	0019      	movs	r1, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ae:	2280      	movs	r2, #128	@ 0x80
 80080b0:	4013      	ands	r3, r2
 80080b2:	d00b      	beq.n	80080cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4a0e      	ldr	r2, [pc, #56]	@ (80080f4 <UART_AdvFeatureConfig+0x164>)
 80080bc:	4013      	ands	r3, r2
 80080be:	0019      	movs	r1, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	605a      	str	r2, [r3, #4]
  }
}
 80080cc:	46c0      	nop			@ (mov r8, r8)
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b002      	add	sp, #8
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	ffff7fff 	.word	0xffff7fff
 80080d8:	fffdffff 	.word	0xfffdffff
 80080dc:	fffeffff 	.word	0xfffeffff
 80080e0:	fffbffff 	.word	0xfffbffff
 80080e4:	ffffefff 	.word	0xffffefff
 80080e8:	ffffdfff 	.word	0xffffdfff
 80080ec:	ffefffff 	.word	0xffefffff
 80080f0:	ff9fffff 	.word	0xff9fffff
 80080f4:	fff7ffff 	.word	0xfff7ffff

080080f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b092      	sub	sp, #72	@ 0x48
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2284      	movs	r2, #132	@ 0x84
 8008104:	2100      	movs	r1, #0
 8008106:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008108:	f7fa ff46 	bl	8002f98 <HAL_GetTick>
 800810c:	0003      	movs	r3, r0
 800810e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2208      	movs	r2, #8
 8008118:	4013      	ands	r3, r2
 800811a:	2b08      	cmp	r3, #8
 800811c:	d12c      	bne.n	8008178 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800811e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008120:	2280      	movs	r2, #128	@ 0x80
 8008122:	0391      	lsls	r1, r2, #14
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4a46      	ldr	r2, [pc, #280]	@ (8008240 <UART_CheckIdleState+0x148>)
 8008128:	9200      	str	r2, [sp, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	f000 f88c 	bl	8008248 <UART_WaitOnFlagUntilTimeout>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d021      	beq.n	8008178 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008134:	f3ef 8310 	mrs	r3, PRIMASK
 8008138:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800813a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800813c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800813e:	2301      	movs	r3, #1
 8008140:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	f383 8810 	msr	PRIMASK, r3
}
 8008148:	46c0      	nop			@ (mov r8, r8)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2180      	movs	r1, #128	@ 0x80
 8008156:	438a      	bics	r2, r1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008160:	f383 8810 	msr	PRIMASK, r3
}
 8008164:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2278      	movs	r2, #120	@ 0x78
 8008170:	2100      	movs	r1, #0
 8008172:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e05f      	b.n	8008238 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2204      	movs	r2, #4
 8008180:	4013      	ands	r3, r2
 8008182:	2b04      	cmp	r3, #4
 8008184:	d146      	bne.n	8008214 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008188:	2280      	movs	r2, #128	@ 0x80
 800818a:	03d1      	lsls	r1, r2, #15
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	4a2c      	ldr	r2, [pc, #176]	@ (8008240 <UART_CheckIdleState+0x148>)
 8008190:	9200      	str	r2, [sp, #0]
 8008192:	2200      	movs	r2, #0
 8008194:	f000 f858 	bl	8008248 <UART_WaitOnFlagUntilTimeout>
 8008198:	1e03      	subs	r3, r0, #0
 800819a:	d03b      	beq.n	8008214 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800819c:	f3ef 8310 	mrs	r3, PRIMASK
 80081a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80081a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a6:	2301      	movs	r3, #1
 80081a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f383 8810 	msr	PRIMASK, r3
}
 80081b0:	46c0      	nop			@ (mov r8, r8)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4921      	ldr	r1, [pc, #132]	@ (8008244 <UART_CheckIdleState+0x14c>)
 80081be:	400a      	ands	r2, r1
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f383 8810 	msr	PRIMASK, r3
}
 80081cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ce:	f3ef 8310 	mrs	r3, PRIMASK
 80081d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80081d4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081d8:	2301      	movs	r3, #1
 80081da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f383 8810 	msr	PRIMASK, r3
}
 80081e2:	46c0      	nop			@ (mov r8, r8)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2101      	movs	r1, #1
 80081f0:	438a      	bics	r2, r1
 80081f2:	609a      	str	r2, [r3, #8]
 80081f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	f383 8810 	msr	PRIMASK, r3
}
 80081fe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2280      	movs	r2, #128	@ 0x80
 8008204:	2120      	movs	r1, #32
 8008206:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2278      	movs	r2, #120	@ 0x78
 800820c:	2100      	movs	r1, #0
 800820e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e011      	b.n	8008238 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2280      	movs	r2, #128	@ 0x80
 800821e:	2120      	movs	r1, #32
 8008220:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2278      	movs	r2, #120	@ 0x78
 8008232:	2100      	movs	r1, #0
 8008234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	0018      	movs	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	b010      	add	sp, #64	@ 0x40
 800823e:	bd80      	pop	{r7, pc}
 8008240:	01ffffff 	.word	0x01ffffff
 8008244:	fffffedf 	.word	0xfffffedf

08008248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	1dfb      	adds	r3, r7, #7
 8008256:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008258:	e051      	b.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	3301      	adds	r3, #1
 800825e:	d04e      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008260:	f7fa fe9a 	bl	8002f98 <HAL_GetTick>
 8008264:	0002      	movs	r2, r0
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	429a      	cmp	r2, r3
 800826e:	d302      	bcc.n	8008276 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e051      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2204      	movs	r2, #4
 8008282:	4013      	ands	r3, r2
 8008284:	d03b      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b80      	cmp	r3, #128	@ 0x80
 800828a:	d038      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b40      	cmp	r3, #64	@ 0x40
 8008290:	d035      	beq.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	2208      	movs	r2, #8
 800829a:	4013      	ands	r3, r2
 800829c:	2b08      	cmp	r3, #8
 800829e:	d111      	bne.n	80082c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2208      	movs	r2, #8
 80082a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	0018      	movs	r0, r3
 80082ac:	f000 f92a 	bl	8008504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2284      	movs	r2, #132	@ 0x84
 80082b4:	2108      	movs	r1, #8
 80082b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2278      	movs	r2, #120	@ 0x78
 80082bc:	2100      	movs	r1, #0
 80082be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e02c      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	69da      	ldr	r2, [r3, #28]
 80082ca:	2380      	movs	r3, #128	@ 0x80
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	401a      	ands	r2, r3
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d112      	bne.n	80082fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2280      	movs	r2, #128	@ 0x80
 80082de:	0112      	lsls	r2, r2, #4
 80082e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	0018      	movs	r0, r3
 80082e6:	f000 f90d 	bl	8008504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2284      	movs	r2, #132	@ 0x84
 80082ee:	2120      	movs	r1, #32
 80082f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2278      	movs	r2, #120	@ 0x78
 80082f6:	2100      	movs	r1, #0
 80082f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e00f      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	4013      	ands	r3, r2
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	425a      	negs	r2, r3
 800830e:	4153      	adcs	r3, r2
 8008310:	b2db      	uxtb	r3, r3
 8008312:	001a      	movs	r2, r3
 8008314:	1dfb      	adds	r3, r7, #7
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d09e      	beq.n	800825a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	0018      	movs	r0, r3
 8008320:	46bd      	mov	sp, r7
 8008322:	b004      	add	sp, #16
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b090      	sub	sp, #64	@ 0x40
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	1dbb      	adds	r3, r7, #6
 8008334:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	1dba      	adds	r2, r7, #6
 8008340:	2158      	movs	r1, #88	@ 0x58
 8008342:	8812      	ldrh	r2, [r2, #0]
 8008344:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1dba      	adds	r2, r7, #6
 800834a:	215a      	movs	r1, #90	@ 0x5a
 800834c:	8812      	ldrh	r2, [r2, #0]
 800834e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689a      	ldr	r2, [r3, #8]
 800835a:	2380      	movs	r3, #128	@ 0x80
 800835c:	015b      	lsls	r3, r3, #5
 800835e:	429a      	cmp	r2, r3
 8008360:	d10d      	bne.n	800837e <UART_Start_Receive_IT+0x56>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d104      	bne.n	8008374 <UART_Start_Receive_IT+0x4c>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	225c      	movs	r2, #92	@ 0x5c
 800836e:	4950      	ldr	r1, [pc, #320]	@ (80084b0 <UART_Start_Receive_IT+0x188>)
 8008370:	5299      	strh	r1, [r3, r2]
 8008372:	e02e      	b.n	80083d2 <UART_Start_Receive_IT+0xaa>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	225c      	movs	r2, #92	@ 0x5c
 8008378:	21ff      	movs	r1, #255	@ 0xff
 800837a:	5299      	strh	r1, [r3, r2]
 800837c:	e029      	b.n	80083d2 <UART_Start_Receive_IT+0xaa>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <UART_Start_Receive_IT+0x7a>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d104      	bne.n	8008398 <UART_Start_Receive_IT+0x70>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	225c      	movs	r2, #92	@ 0x5c
 8008392:	21ff      	movs	r1, #255	@ 0xff
 8008394:	5299      	strh	r1, [r3, r2]
 8008396:	e01c      	b.n	80083d2 <UART_Start_Receive_IT+0xaa>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	225c      	movs	r2, #92	@ 0x5c
 800839c:	217f      	movs	r1, #127	@ 0x7f
 800839e:	5299      	strh	r1, [r3, r2]
 80083a0:	e017      	b.n	80083d2 <UART_Start_Receive_IT+0xaa>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	2380      	movs	r3, #128	@ 0x80
 80083a8:	055b      	lsls	r3, r3, #21
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d10d      	bne.n	80083ca <UART_Start_Receive_IT+0xa2>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d104      	bne.n	80083c0 <UART_Start_Receive_IT+0x98>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	225c      	movs	r2, #92	@ 0x5c
 80083ba:	217f      	movs	r1, #127	@ 0x7f
 80083bc:	5299      	strh	r1, [r3, r2]
 80083be:	e008      	b.n	80083d2 <UART_Start_Receive_IT+0xaa>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	225c      	movs	r2, #92	@ 0x5c
 80083c4:	213f      	movs	r1, #63	@ 0x3f
 80083c6:	5299      	strh	r1, [r3, r2]
 80083c8:	e003      	b.n	80083d2 <UART_Start_Receive_IT+0xaa>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	225c      	movs	r2, #92	@ 0x5c
 80083ce:	2100      	movs	r1, #0
 80083d0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2284      	movs	r2, #132	@ 0x84
 80083d6:	2100      	movs	r1, #0
 80083d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2280      	movs	r2, #128	@ 0x80
 80083de:	2122      	movs	r1, #34	@ 0x22
 80083e0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e2:	f3ef 8310 	mrs	r3, PRIMASK
 80083e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80083e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ec:	2301      	movs	r3, #1
 80083ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f2:	f383 8810 	msr	PRIMASK, r3
}
 80083f6:	46c0      	nop			@ (mov r8, r8)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2101      	movs	r1, #1
 8008404:	430a      	orrs	r2, r1
 8008406:	609a      	str	r2, [r3, #8]
 8008408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800840c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840e:	f383 8810 	msr	PRIMASK, r3
}
 8008412:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	2380      	movs	r3, #128	@ 0x80
 800841a:	015b      	lsls	r3, r3, #5
 800841c:	429a      	cmp	r2, r3
 800841e:	d107      	bne.n	8008430 <UART_Start_Receive_IT+0x108>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4a22      	ldr	r2, [pc, #136]	@ (80084b4 <UART_Start_Receive_IT+0x18c>)
 800842c:	669a      	str	r2, [r3, #104]	@ 0x68
 800842e:	e002      	b.n	8008436 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a21      	ldr	r2, [pc, #132]	@ (80084b8 <UART_Start_Receive_IT+0x190>)
 8008434:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d019      	beq.n	8008472 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800843e:	f3ef 8310 	mrs	r3, PRIMASK
 8008442:	61fb      	str	r3, [r7, #28]
  return(result);
 8008444:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008446:	637b      	str	r3, [r7, #52]	@ 0x34
 8008448:	2301      	movs	r3, #1
 800844a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	f383 8810 	msr	PRIMASK, r3
}
 8008452:	46c0      	nop			@ (mov r8, r8)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2190      	movs	r1, #144	@ 0x90
 8008460:	0049      	lsls	r1, r1, #1
 8008462:	430a      	orrs	r2, r1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	f383 8810 	msr	PRIMASK, r3
}
 8008470:	e018      	b.n	80084a4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008472:	f3ef 8310 	mrs	r3, PRIMASK
 8008476:	613b      	str	r3, [r7, #16]
  return(result);
 8008478:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800847a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800847c:	2301      	movs	r3, #1
 800847e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f383 8810 	msr	PRIMASK, r3
}
 8008486:	46c0      	nop			@ (mov r8, r8)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2120      	movs	r1, #32
 8008494:	430a      	orrs	r2, r1
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	f383 8810 	msr	PRIMASK, r3
}
 80084a2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	0018      	movs	r0, r3
 80084a8:	46bd      	mov	sp, r7
 80084aa:	b010      	add	sp, #64	@ 0x40
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	46c0      	nop			@ (mov r8, r8)
 80084b0:	000001ff 	.word	0x000001ff
 80084b4:	08008959 	.word	0x08008959
 80084b8:	0800879d 	.word	0x0800879d

080084bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c4:	f3ef 8310 	mrs	r3, PRIMASK
 80084c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80084ca:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	2301      	movs	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f383 8810 	msr	PRIMASK, r3
}
 80084d8:	46c0      	nop			@ (mov r8, r8)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	21c0      	movs	r1, #192	@ 0xc0
 80084e6:	438a      	bics	r2, r1
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f383 8810 	msr	PRIMASK, r3
}
 80084f4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80084fc:	46c0      	nop			@ (mov r8, r8)
 80084fe:	46bd      	mov	sp, r7
 8008500:	b006      	add	sp, #24
 8008502:	bd80      	pop	{r7, pc}

08008504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08e      	sub	sp, #56	@ 0x38
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800850c:	f3ef 8310 	mrs	r3, PRIMASK
 8008510:	617b      	str	r3, [r7, #20]
  return(result);
 8008512:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
 8008516:	2301      	movs	r3, #1
 8008518:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f383 8810 	msr	PRIMASK, r3
}
 8008520:	46c0      	nop			@ (mov r8, r8)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4926      	ldr	r1, [pc, #152]	@ (80085c8 <UART_EndRxTransfer+0xc4>)
 800852e:	400a      	ands	r2, r1
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	f383 8810 	msr	PRIMASK, r3
}
 800853c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800853e:	f3ef 8310 	mrs	r3, PRIMASK
 8008542:	623b      	str	r3, [r7, #32]
  return(result);
 8008544:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008546:	633b      	str	r3, [r7, #48]	@ 0x30
 8008548:	2301      	movs	r3, #1
 800854a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854e:	f383 8810 	msr	PRIMASK, r3
}
 8008552:	46c0      	nop			@ (mov r8, r8)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2101      	movs	r1, #1
 8008560:	438a      	bics	r2, r1
 8008562:	609a      	str	r2, [r3, #8]
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856a:	f383 8810 	msr	PRIMASK, r3
}
 800856e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008574:	2b01      	cmp	r3, #1
 8008576:	d118      	bne.n	80085aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008578:	f3ef 8310 	mrs	r3, PRIMASK
 800857c:	60bb      	str	r3, [r7, #8]
  return(result);
 800857e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008582:	2301      	movs	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f383 8810 	msr	PRIMASK, r3
}
 800858c:	46c0      	nop			@ (mov r8, r8)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2110      	movs	r1, #16
 800859a:	438a      	bics	r2, r1
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f383 8810 	msr	PRIMASK, r3
}
 80085a8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2280      	movs	r2, #128	@ 0x80
 80085ae:	2120      	movs	r1, #32
 80085b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80085be:	46c0      	nop			@ (mov r8, r8)
 80085c0:	46bd      	mov	sp, r7
 80085c2:	b00e      	add	sp, #56	@ 0x38
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	46c0      	nop			@ (mov r8, r8)
 80085c8:	fffffedf 	.word	0xfffffedf

080085cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08c      	sub	sp, #48	@ 0x30
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d035      	beq.n	800864e <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	2252      	movs	r2, #82	@ 0x52
 80085e6:	2100      	movs	r1, #0
 80085e8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ea:	f3ef 8310 	mrs	r3, PRIMASK
 80085ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80085f0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085f4:	2301      	movs	r3, #1
 80085f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f383 8810 	msr	PRIMASK, r3
}
 80085fe:	46c0      	nop			@ (mov r8, r8)
 8008600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689a      	ldr	r2, [r3, #8]
 8008606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2180      	movs	r1, #128	@ 0x80
 800860c:	438a      	bics	r2, r1
 800860e:	609a      	str	r2, [r3, #8]
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f383 8810 	msr	PRIMASK, r3
}
 800861a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800861c:	f3ef 8310 	mrs	r3, PRIMASK
 8008620:	61bb      	str	r3, [r7, #24]
  return(result);
 8008622:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008624:	627b      	str	r3, [r7, #36]	@ 0x24
 8008626:	2301      	movs	r3, #1
 8008628:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	f383 8810 	msr	PRIMASK, r3
}
 8008630:	46c0      	nop			@ (mov r8, r8)
 8008632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2140      	movs	r1, #64	@ 0x40
 800863e:	430a      	orrs	r2, r1
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	f383 8810 	msr	PRIMASK, r3
}
 800864c:	e006      	b.n	800865c <UART_DMATransmitCplt+0x90>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800864e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008650:	228c      	movs	r2, #140	@ 0x8c
 8008652:	589b      	ldr	r3, [r3, r2]
 8008654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008656:	0010      	movs	r0, r2
 8008658:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800865a:	46c0      	nop			@ (mov r8, r8)
 800865c:	46c0      	nop			@ (mov r8, r8)
 800865e:	46bd      	mov	sp, r7
 8008660:	b00c      	add	sp, #48	@ 0x30
 8008662:	bd80      	pop	{r7, pc}

08008664 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008670:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2288      	movs	r2, #136	@ 0x88
 8008676:	589b      	ldr	r3, [r3, r2]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	0010      	movs	r0, r2
 800867c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800867e:	46c0      	nop			@ (mov r8, r8)
 8008680:	46bd      	mov	sp, r7
 8008682:	b004      	add	sp, #16
 8008684:	bd80      	pop	{r7, pc}

08008686 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b086      	sub	sp, #24
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008692:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008698:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2280      	movs	r2, #128	@ 0x80
 800869e:	589b      	ldr	r3, [r3, r2]
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2280      	movs	r2, #128	@ 0x80
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b80      	cmp	r3, #128	@ 0x80
 80086ae:	d10a      	bne.n	80086c6 <UART_DMAError+0x40>
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	2b21      	cmp	r3, #33	@ 0x21
 80086b4:	d107      	bne.n	80086c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2252      	movs	r2, #82	@ 0x52
 80086ba:	2100      	movs	r1, #0
 80086bc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7ff fefb 	bl	80084bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	2240      	movs	r2, #64	@ 0x40
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b40      	cmp	r3, #64	@ 0x40
 80086d2:	d10a      	bne.n	80086ea <UART_DMAError+0x64>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b22      	cmp	r3, #34	@ 0x22
 80086d8:	d107      	bne.n	80086ea <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	225a      	movs	r2, #90	@ 0x5a
 80086de:	2100      	movs	r1, #0
 80086e0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	0018      	movs	r0, r3
 80086e6:	f7ff ff0d 	bl	8008504 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2284      	movs	r2, #132	@ 0x84
 80086ee:	589b      	ldr	r3, [r3, r2]
 80086f0:	2210      	movs	r2, #16
 80086f2:	431a      	orrs	r2, r3
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2184      	movs	r1, #132	@ 0x84
 80086f8:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2298      	movs	r2, #152	@ 0x98
 80086fe:	589b      	ldr	r3, [r3, r2]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	0010      	movs	r0, r2
 8008704:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	46bd      	mov	sp, r7
 800870a:	b006      	add	sp, #24
 800870c:	bd80      	pop	{r7, pc}

0800870e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	225a      	movs	r2, #90	@ 0x5a
 8008720:	2100      	movs	r1, #0
 8008722:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2252      	movs	r2, #82	@ 0x52
 8008728:	2100      	movs	r1, #0
 800872a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2298      	movs	r2, #152	@ 0x98
 8008730:	589b      	ldr	r3, [r3, r2]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	0010      	movs	r0, r2
 8008736:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008738:	46c0      	nop			@ (mov r8, r8)
 800873a:	46bd      	mov	sp, r7
 800873c:	b004      	add	sp, #16
 800873e:	bd80      	pop	{r7, pc}

08008740 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008748:	f3ef 8310 	mrs	r3, PRIMASK
 800874c:	60bb      	str	r3, [r7, #8]
  return(result);
 800874e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	2301      	movs	r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f383 8810 	msr	PRIMASK, r3
}
 800875c:	46c0      	nop			@ (mov r8, r8)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2140      	movs	r1, #64	@ 0x40
 800876a:	438a      	bics	r2, r1
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f383 8810 	msr	PRIMASK, r3
}
 8008778:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	228c      	movs	r2, #140	@ 0x8c
 800878a:	589b      	ldr	r3, [r3, r2]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	0010      	movs	r0, r2
 8008790:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008792:	46c0      	nop			@ (mov r8, r8)
 8008794:	46bd      	mov	sp, r7
 8008796:	b006      	add	sp, #24
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b094      	sub	sp, #80	@ 0x50
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087a4:	204e      	movs	r0, #78	@ 0x4e
 80087a6:	183b      	adds	r3, r7, r0
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	215c      	movs	r1, #92	@ 0x5c
 80087ac:	5a52      	ldrh	r2, [r2, r1]
 80087ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2280      	movs	r2, #128	@ 0x80
 80087b4:	589b      	ldr	r3, [r3, r2]
 80087b6:	2b22      	cmp	r3, #34	@ 0x22
 80087b8:	d000      	beq.n	80087bc <UART_RxISR_8BIT+0x20>
 80087ba:	e0bd      	b.n	8008938 <UART_RxISR_8BIT+0x19c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	214c      	movs	r1, #76	@ 0x4c
 80087c2:	187b      	adds	r3, r7, r1
 80087c4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80087c6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087c8:	187b      	adds	r3, r7, r1
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	183b      	adds	r3, r7, r0
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b2d9      	uxtb	r1, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d8:	400a      	ands	r2, r1
 80087da:	b2d2      	uxtb	r2, r2
 80087dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	225a      	movs	r2, #90	@ 0x5a
 80087ec:	5a9b      	ldrh	r3, [r3, r2]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b299      	uxth	r1, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	225a      	movs	r2, #90	@ 0x5a
 80087f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	225a      	movs	r2, #90	@ 0x5a
 80087fe:	5a9b      	ldrh	r3, [r3, r2]
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d000      	beq.n	8008808 <UART_RxISR_8BIT+0x6c>
 8008806:	e09f      	b.n	8008948 <UART_RxISR_8BIT+0x1ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008808:	f3ef 8310 	mrs	r3, PRIMASK
 800880c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008812:	2301      	movs	r3, #1
 8008814:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	f383 8810 	msr	PRIMASK, r3
}
 800881c:	46c0      	nop			@ (mov r8, r8)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4949      	ldr	r1, [pc, #292]	@ (8008950 <UART_RxISR_8BIT+0x1b4>)
 800882a:	400a      	ands	r2, r1
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008834:	f383 8810 	msr	PRIMASK, r3
}
 8008838:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800883a:	f3ef 8310 	mrs	r3, PRIMASK
 800883e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008842:	647b      	str	r3, [r7, #68]	@ 0x44
 8008844:	2301      	movs	r3, #1
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884a:	f383 8810 	msr	PRIMASK, r3
}
 800884e:	46c0      	nop			@ (mov r8, r8)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2101      	movs	r1, #1
 800885c:	438a      	bics	r2, r1
 800885e:	609a      	str	r2, [r3, #8]
 8008860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008862:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008866:	f383 8810 	msr	PRIMASK, r3
}
 800886a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2280      	movs	r2, #128	@ 0x80
 8008870:	2120      	movs	r1, #32
 8008872:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	2380      	movs	r3, #128	@ 0x80
 8008888:	041b      	lsls	r3, r3, #16
 800888a:	4013      	ands	r3, r2
 800888c:	d018      	beq.n	80088c0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800888e:	f3ef 8310 	mrs	r3, PRIMASK
 8008892:	61bb      	str	r3, [r7, #24]
  return(result);
 8008894:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008896:	643b      	str	r3, [r7, #64]	@ 0x40
 8008898:	2301      	movs	r3, #1
 800889a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	f383 8810 	msr	PRIMASK, r3
}
 80088a2:	46c0      	nop			@ (mov r8, r8)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4929      	ldr	r1, [pc, #164]	@ (8008954 <UART_RxISR_8BIT+0x1b8>)
 80088b0:	400a      	ands	r2, r1
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	f383 8810 	msr	PRIMASK, r3
}
 80088be:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d130      	bne.n	800892a <UART_RxISR_8BIT+0x18e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ce:	f3ef 8310 	mrs	r3, PRIMASK
 80088d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80088d4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d8:	2301      	movs	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f383 8810 	msr	PRIMASK, r3
}
 80088e2:	46c0      	nop			@ (mov r8, r8)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2110      	movs	r1, #16
 80088f0:	438a      	bics	r2, r1
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f383 8810 	msr	PRIMASK, r3
}
 80088fe:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	2210      	movs	r2, #16
 8008908:	4013      	ands	r3, r2
 800890a:	2b10      	cmp	r3, #16
 800890c:	d103      	bne.n	8008916 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2210      	movs	r2, #16
 8008914:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	22ac      	movs	r2, #172	@ 0xac
 800891a:	589b      	ldr	r3, [r3, r2]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	2158      	movs	r1, #88	@ 0x58
 8008920:	5a51      	ldrh	r1, [r2, r1]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	0010      	movs	r0, r2
 8008926:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008928:	e00e      	b.n	8008948 <UART_RxISR_8BIT+0x1ac>
        huart->RxCpltCallback(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2294      	movs	r2, #148	@ 0x94
 800892e:	589b      	ldr	r3, [r3, r2]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	0010      	movs	r0, r2
 8008934:	4798      	blx	r3
}
 8008936:	e007      	b.n	8008948 <UART_RxISR_8BIT+0x1ac>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699a      	ldr	r2, [r3, #24]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2108      	movs	r1, #8
 8008944:	430a      	orrs	r2, r1
 8008946:	619a      	str	r2, [r3, #24]
}
 8008948:	46c0      	nop			@ (mov r8, r8)
 800894a:	46bd      	mov	sp, r7
 800894c:	b014      	add	sp, #80	@ 0x50
 800894e:	bd80      	pop	{r7, pc}
 8008950:	fffffedf 	.word	0xfffffedf
 8008954:	fbffffff 	.word	0xfbffffff

08008958 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b094      	sub	sp, #80	@ 0x50
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008960:	204e      	movs	r0, #78	@ 0x4e
 8008962:	183b      	adds	r3, r7, r0
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	215c      	movs	r1, #92	@ 0x5c
 8008968:	5a52      	ldrh	r2, [r2, r1]
 800896a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2280      	movs	r2, #128	@ 0x80
 8008970:	589b      	ldr	r3, [r3, r2]
 8008972:	2b22      	cmp	r3, #34	@ 0x22
 8008974:	d000      	beq.n	8008978 <UART_RxISR_16BIT+0x20>
 8008976:	e0bd      	b.n	8008af4 <UART_RxISR_16BIT+0x19c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	214c      	movs	r1, #76	@ 0x4c
 800897e:	187b      	adds	r3, r7, r1
 8008980:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8008982:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008988:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800898a:	187b      	adds	r3, r7, r1
 800898c:	183a      	adds	r2, r7, r0
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	8812      	ldrh	r2, [r2, #0]
 8008992:	4013      	ands	r3, r2
 8008994:	b29a      	uxth	r2, r3
 8008996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008998:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899e:	1c9a      	adds	r2, r3, #2
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	225a      	movs	r2, #90	@ 0x5a
 80089a8:	5a9b      	ldrh	r3, [r3, r2]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b299      	uxth	r1, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	225a      	movs	r2, #90	@ 0x5a
 80089b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	225a      	movs	r2, #90	@ 0x5a
 80089ba:	5a9b      	ldrh	r3, [r3, r2]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d000      	beq.n	80089c4 <UART_RxISR_16BIT+0x6c>
 80089c2:	e09f      	b.n	8008b04 <UART_RxISR_16BIT+0x1ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c4:	f3ef 8310 	mrs	r3, PRIMASK
 80089c8:	623b      	str	r3, [r7, #32]
  return(result);
 80089ca:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80089ce:	2301      	movs	r3, #1
 80089d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	f383 8810 	msr	PRIMASK, r3
}
 80089d8:	46c0      	nop			@ (mov r8, r8)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4949      	ldr	r1, [pc, #292]	@ (8008b0c <UART_RxISR_16BIT+0x1b4>)
 80089e6:	400a      	ands	r2, r1
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f0:	f383 8810 	msr	PRIMASK, r3
}
 80089f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089f6:	f3ef 8310 	mrs	r3, PRIMASK
 80089fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80089fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a00:	2301      	movs	r3, #1
 8008a02:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f383 8810 	msr	PRIMASK, r3
}
 8008a0a:	46c0      	nop			@ (mov r8, r8)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2101      	movs	r1, #1
 8008a18:	438a      	bics	r2, r1
 8008a1a:	609a      	str	r2, [r3, #8]
 8008a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a22:	f383 8810 	msr	PRIMASK, r3
}
 8008a26:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2280      	movs	r2, #128	@ 0x80
 8008a2c:	2120      	movs	r1, #32
 8008a2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	2380      	movs	r3, #128	@ 0x80
 8008a44:	041b      	lsls	r3, r3, #16
 8008a46:	4013      	ands	r3, r2
 8008a48:	d018      	beq.n	8008a7c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a4e:	617b      	str	r3, [r7, #20]
  return(result);
 8008a50:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a54:	2301      	movs	r3, #1
 8008a56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f383 8810 	msr	PRIMASK, r3
}
 8008a5e:	46c0      	nop			@ (mov r8, r8)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4929      	ldr	r1, [pc, #164]	@ (8008b10 <UART_RxISR_16BIT+0x1b8>)
 8008a6c:	400a      	ands	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f383 8810 	msr	PRIMASK, r3
}
 8008a7a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d130      	bne.n	8008ae6 <UART_RxISR_16BIT+0x18e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a90:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a94:	2301      	movs	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f383 8810 	msr	PRIMASK, r3
}
 8008a9e:	46c0      	nop			@ (mov r8, r8)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2110      	movs	r1, #16
 8008aac:	438a      	bics	r2, r1
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f383 8810 	msr	PRIMASK, r3
}
 8008aba:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	2210      	movs	r2, #16
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b10      	cmp	r3, #16
 8008ac8:	d103      	bne.n	8008ad2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2210      	movs	r2, #16
 8008ad0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	22ac      	movs	r2, #172	@ 0xac
 8008ad6:	589b      	ldr	r3, [r3, r2]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	2158      	movs	r1, #88	@ 0x58
 8008adc:	5a51      	ldrh	r1, [r2, r1]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	0010      	movs	r0, r2
 8008ae2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ae4:	e00e      	b.n	8008b04 <UART_RxISR_16BIT+0x1ac>
        huart->RxCpltCallback(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2294      	movs	r2, #148	@ 0x94
 8008aea:	589b      	ldr	r3, [r3, r2]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	0010      	movs	r0, r2
 8008af0:	4798      	blx	r3
}
 8008af2:	e007      	b.n	8008b04 <UART_RxISR_16BIT+0x1ac>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699a      	ldr	r2, [r3, #24]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2108      	movs	r1, #8
 8008b00:	430a      	orrs	r2, r1
 8008b02:	619a      	str	r2, [r3, #24]
}
 8008b04:	46c0      	nop			@ (mov r8, r8)
 8008b06:	46bd      	mov	sp, r7
 8008b08:	b014      	add	sp, #80	@ 0x50
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	fffffedf 	.word	0xfffffedf
 8008b10:	fbffffff 	.word	0xfbffffff

08008b14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b1c:	46c0      	nop			@ (mov r8, r8)
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	b002      	add	sp, #8
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2244      	movs	r2, #68	@ 0x44
 8008b30:	2100      	movs	r1, #0
 8008b32:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b34:	4b05      	ldr	r3, [pc, #20]	@ (8008b4c <USB_EnableGlobalInt+0x28>)
 8008b36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	b299      	uxth	r1, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2240      	movs	r2, #64	@ 0x40
 8008b40:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	0018      	movs	r0, r3
 8008b46:	46bd      	mov	sp, r7
 8008b48:	b004      	add	sp, #16
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	0000bf80 	.word	0x0000bf80

08008b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b58:	4b09      	ldr	r3, [pc, #36]	@ (8008b80 <USB_DisableGlobalInt+0x30>)
 8008b5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2240      	movs	r2, #64	@ 0x40
 8008b60:	5a9b      	ldrh	r3, [r3, r2]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	b292      	uxth	r2, r2
 8008b68:	43d2      	mvns	r2, r2
 8008b6a:	b292      	uxth	r2, r2
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	b299      	uxth	r1, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2240      	movs	r2, #64	@ 0x40
 8008b74:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	0018      	movs	r0, r3
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	b004      	add	sp, #16
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	0000bf80 	.word	0x0000bf80

08008b84 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	1d3b      	adds	r3, r7, #4
 8008b8e:	6019      	str	r1, [r3, #0]
 8008b90:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2240      	movs	r2, #64	@ 0x40
 8008b96:	2101      	movs	r1, #1
 8008b98:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2240      	movs	r2, #64	@ 0x40
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2244      	movs	r2, #68	@ 0x44
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2250      	movs	r2, #80	@ 0x50
 8008bae:	2100      	movs	r1, #0
 8008bb0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	b004      	add	sp, #16
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b09c      	sub	sp, #112	@ 0x70
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bc6:	236f      	movs	r3, #111	@ 0x6f
 8008bc8:	18fb      	adds	r3, r7, r3
 8008bca:	2200      	movs	r2, #0
 8008bcc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	18d3      	adds	r3, r2, r3
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	236c      	movs	r3, #108	@ 0x6c
 8008bde:	18fb      	adds	r3, r7, r3
 8008be0:	49a1      	ldr	r1, [pc, #644]	@ (8008e68 <USB_ActivateEndpoint+0x2ac>)
 8008be2:	400a      	ands	r2, r1
 8008be4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	78db      	ldrb	r3, [r3, #3]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d017      	beq.n	8008c1e <USB_ActivateEndpoint+0x62>
 8008bee:	dc28      	bgt.n	8008c42 <USB_ActivateEndpoint+0x86>
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d00e      	beq.n	8008c12 <USB_ActivateEndpoint+0x56>
 8008bf4:	dc25      	bgt.n	8008c42 <USB_ActivateEndpoint+0x86>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <USB_ActivateEndpoint+0x44>
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d018      	beq.n	8008c30 <USB_ActivateEndpoint+0x74>
 8008bfe:	e020      	b.n	8008c42 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008c00:	226c      	movs	r2, #108	@ 0x6c
 8008c02:	18bb      	adds	r3, r7, r2
 8008c04:	18ba      	adds	r2, r7, r2
 8008c06:	8812      	ldrh	r2, [r2, #0]
 8008c08:	2180      	movs	r1, #128	@ 0x80
 8008c0a:	0089      	lsls	r1, r1, #2
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	801a      	strh	r2, [r3, #0]
      break;
 8008c10:	e01c      	b.n	8008c4c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008c12:	226c      	movs	r2, #108	@ 0x6c
 8008c14:	18bb      	adds	r3, r7, r2
 8008c16:	18ba      	adds	r2, r7, r2
 8008c18:	8812      	ldrh	r2, [r2, #0]
 8008c1a:	801a      	strh	r2, [r3, #0]
      break;
 8008c1c:	e016      	b.n	8008c4c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008c1e:	226c      	movs	r2, #108	@ 0x6c
 8008c20:	18bb      	adds	r3, r7, r2
 8008c22:	18ba      	adds	r2, r7, r2
 8008c24:	8812      	ldrh	r2, [r2, #0]
 8008c26:	21c0      	movs	r1, #192	@ 0xc0
 8008c28:	00c9      	lsls	r1, r1, #3
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	801a      	strh	r2, [r3, #0]
      break;
 8008c2e:	e00d      	b.n	8008c4c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008c30:	226c      	movs	r2, #108	@ 0x6c
 8008c32:	18bb      	adds	r3, r7, r2
 8008c34:	18ba      	adds	r2, r7, r2
 8008c36:	8812      	ldrh	r2, [r2, #0]
 8008c38:	2180      	movs	r1, #128	@ 0x80
 8008c3a:	00c9      	lsls	r1, r1, #3
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	801a      	strh	r2, [r3, #0]
      break;
 8008c40:	e004      	b.n	8008c4c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008c42:	236f      	movs	r3, #111	@ 0x6f
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	2201      	movs	r2, #1
 8008c48:	701a      	strb	r2, [r3, #0]
      break;
 8008c4a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	18d3      	adds	r3, r2, r3
 8008c56:	226c      	movs	r2, #108	@ 0x6c
 8008c58:	18ba      	adds	r2, r7, r2
 8008c5a:	8812      	ldrh	r2, [r2, #0]
 8008c5c:	4983      	ldr	r1, [pc, #524]	@ (8008e6c <USB_ActivateEndpoint+0x2b0>)
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	b292      	uxth	r2, r2
 8008c62:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	18d3      	adds	r3, r2, r3
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	b21b      	sxth	r3, r3
 8008c74:	4a7e      	ldr	r2, [pc, #504]	@ (8008e70 <USB_ActivateEndpoint+0x2b4>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	b21a      	sxth	r2, r3
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	b21b      	sxth	r3, r3
 8008c80:	4313      	orrs	r3, r2
 8008c82:	b21a      	sxth	r2, r3
 8008c84:	2166      	movs	r1, #102	@ 0x66
 8008c86:	187b      	adds	r3, r7, r1
 8008c88:	801a      	strh	r2, [r3, #0]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	18d3      	adds	r3, r2, r3
 8008c94:	187a      	adds	r2, r7, r1
 8008c96:	8812      	ldrh	r2, [r2, #0]
 8008c98:	4974      	ldr	r1, [pc, #464]	@ (8008e6c <USB_ActivateEndpoint+0x2b0>)
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	b292      	uxth	r2, r2
 8008c9e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	7b1b      	ldrb	r3, [r3, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d000      	beq.n	8008caa <USB_ActivateEndpoint+0xee>
 8008ca8:	e177      	b.n	8008f9a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	785b      	ldrb	r3, [r3, #1]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d100      	bne.n	8008cb4 <USB_ActivateEndpoint+0xf8>
 8008cb2:	e07a      	b.n	8008daa <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2250      	movs	r2, #80	@ 0x50
 8008cbc:	5a9b      	ldrh	r3, [r3, r2]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	001a      	movs	r2, r3
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	189b      	adds	r3, r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	00da      	lsls	r2, r3, #3
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	18d3      	adds	r3, r2, r3
 8008cd2:	2280      	movs	r2, #128	@ 0x80
 8008cd4:	00d2      	lsls	r2, r2, #3
 8008cd6:	4694      	mov	ip, r2
 8008cd8:	4463      	add	r3, ip
 8008cda:	617b      	str	r3, [r7, #20]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	88db      	ldrh	r3, [r3, #6]
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	18db      	adds	r3, r3, r3
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	18d2      	adds	r2, r2, r3
 8008cf6:	2112      	movs	r1, #18
 8008cf8:	187b      	adds	r3, r7, r1
 8008cfa:	8812      	ldrh	r2, [r2, #0]
 8008cfc:	801a      	strh	r2, [r3, #0]
 8008cfe:	187b      	adds	r3, r7, r1
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	2240      	movs	r2, #64	@ 0x40
 8008d04:	4013      	ands	r3, r2
 8008d06:	d016      	beq.n	8008d36 <USB_ActivateEndpoint+0x17a>
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	18d3      	adds	r3, r2, r3
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	2010      	movs	r0, #16
 8008d18:	183b      	adds	r3, r7, r0
 8008d1a:	4955      	ldr	r1, [pc, #340]	@ (8008e70 <USB_ActivateEndpoint+0x2b4>)
 8008d1c:	400a      	ands	r2, r1
 8008d1e:	801a      	strh	r2, [r3, #0]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	18d3      	adds	r3, r2, r3
 8008d2a:	183a      	adds	r2, r7, r0
 8008d2c:	8812      	ldrh	r2, [r2, #0]
 8008d2e:	4951      	ldr	r1, [pc, #324]	@ (8008e74 <USB_ActivateEndpoint+0x2b8>)
 8008d30:	430a      	orrs	r2, r1
 8008d32:	b292      	uxth	r2, r2
 8008d34:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	78db      	ldrb	r3, [r3, #3]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d01d      	beq.n	8008d7a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	18d3      	adds	r3, r2, r3
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	200c      	movs	r0, #12
 8008d4e:	183b      	adds	r3, r7, r0
 8008d50:	4949      	ldr	r1, [pc, #292]	@ (8008e78 <USB_ActivateEndpoint+0x2bc>)
 8008d52:	400a      	ands	r2, r1
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	183b      	adds	r3, r7, r0
 8008d58:	183a      	adds	r2, r7, r0
 8008d5a:	8812      	ldrh	r2, [r2, #0]
 8008d5c:	2120      	movs	r1, #32
 8008d5e:	404a      	eors	r2, r1
 8008d60:	801a      	strh	r2, [r3, #0]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	18d3      	adds	r3, r2, r3
 8008d6c:	183a      	adds	r2, r7, r0
 8008d6e:	8812      	ldrh	r2, [r2, #0]
 8008d70:	493e      	ldr	r1, [pc, #248]	@ (8008e6c <USB_ActivateEndpoint+0x2b0>)
 8008d72:	430a      	orrs	r2, r1
 8008d74:	b292      	uxth	r2, r2
 8008d76:	801a      	strh	r2, [r3, #0]
 8008d78:	e2b5      	b.n	80092e6 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	18d3      	adds	r3, r2, r3
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	200e      	movs	r0, #14
 8008d8a:	183b      	adds	r3, r7, r0
 8008d8c:	493a      	ldr	r1, [pc, #232]	@ (8008e78 <USB_ActivateEndpoint+0x2bc>)
 8008d8e:	400a      	ands	r2, r1
 8008d90:	801a      	strh	r2, [r3, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	18d3      	adds	r3, r2, r3
 8008d9c:	183a      	adds	r2, r7, r0
 8008d9e:	8812      	ldrh	r2, [r2, #0]
 8008da0:	4932      	ldr	r1, [pc, #200]	@ (8008e6c <USB_ActivateEndpoint+0x2b0>)
 8008da2:	430a      	orrs	r2, r1
 8008da4:	b292      	uxth	r2, r2
 8008da6:	801a      	strh	r2, [r3, #0]
 8008da8:	e29d      	b.n	80092e6 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2250      	movs	r2, #80	@ 0x50
 8008db2:	5a9b      	ldrh	r3, [r3, r2]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	001a      	movs	r2, r3
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	189b      	adds	r3, r3, r2
 8008dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	00da      	lsls	r2, r3, #3
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	18d3      	adds	r3, r2, r3
 8008dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8008e7c <USB_ActivateEndpoint+0x2c0>)
 8008dca:	4694      	mov	ip, r2
 8008dcc:	4463      	add	r3, ip
 8008dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	88db      	ldrh	r3, [r3, #6]
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	18db      	adds	r3, r3, r3
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dde:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2250      	movs	r2, #80	@ 0x50
 8008de8:	5a9b      	ldrh	r3, [r3, r2]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	001a      	movs	r2, r3
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	189b      	adds	r3, r3, r2
 8008df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	00da      	lsls	r2, r3, #3
 8008dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfc:	18d3      	adds	r3, r2, r3
 8008dfe:	4a20      	ldr	r2, [pc, #128]	@ (8008e80 <USB_ActivateEndpoint+0x2c4>)
 8008e00:	4694      	mov	ip, r2
 8008e02:	4463      	add	r3, ip
 8008e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	059b      	lsls	r3, r3, #22
 8008e0e:	0d9b      	lsrs	r3, r3, #22
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e14:	801a      	strh	r2, [r3, #0]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d108      	bne.n	8008e30 <USB_ActivateEndpoint+0x274>
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	4a17      	ldr	r2, [pc, #92]	@ (8008e84 <USB_ActivateEndpoint+0x2c8>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	e045      	b.n	8008ebc <USB_ActivateEndpoint+0x300>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e36:	d827      	bhi.n	8008e88 <USB_ActivateEndpoint+0x2cc>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2201      	movs	r2, #1
 8008e46:	4013      	ands	r3, r2
 8008e48:	d002      	beq.n	8008e50 <USB_ActivateEndpoint+0x294>
 8008e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	029b      	lsls	r3, r3, #10
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e64:	801a      	strh	r2, [r3, #0]
 8008e66:	e029      	b.n	8008ebc <USB_ActivateEndpoint+0x300>
 8008e68:	ffff898f 	.word	0xffff898f
 8008e6c:	ffff8080 	.word	0xffff8080
 8008e70:	ffff8f8f 	.word	0xffff8f8f
 8008e74:	ffff80c0 	.word	0xffff80c0
 8008e78:	ffff8fbf 	.word	0xffff8fbf
 8008e7c:	00000404 	.word	0x00000404
 8008e80:	00000406 	.word	0x00000406
 8008e84:	ffff8000 	.word	0xffff8000
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	095b      	lsrs	r3, r3, #5
 8008e8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	221f      	movs	r2, #31
 8008e96:	4013      	ands	r3, r2
 8008e98:	d102      	bne.n	8008ea0 <USB_ActivateEndpoint+0x2e4>
 8008e9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	029b      	lsls	r3, r3, #10
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	4ab5      	ldr	r2, [pc, #724]	@ (8009188 <USB_ActivateEndpoint+0x5cc>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	18d2      	adds	r2, r2, r3
 8008ec6:	2122      	movs	r1, #34	@ 0x22
 8008ec8:	187b      	adds	r3, r7, r1
 8008eca:	8812      	ldrh	r2, [r2, #0]
 8008ecc:	801a      	strh	r2, [r3, #0]
 8008ece:	187b      	adds	r3, r7, r1
 8008ed0:	881a      	ldrh	r2, [r3, #0]
 8008ed2:	2380      	movs	r3, #128	@ 0x80
 8008ed4:	01db      	lsls	r3, r3, #7
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	d016      	beq.n	8008f08 <USB_ActivateEndpoint+0x34c>
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	18d3      	adds	r3, r2, r3
 8008ee4:	881b      	ldrh	r3, [r3, #0]
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	2020      	movs	r0, #32
 8008eea:	183b      	adds	r3, r7, r0
 8008eec:	49a7      	ldr	r1, [pc, #668]	@ (800918c <USB_ActivateEndpoint+0x5d0>)
 8008eee:	400a      	ands	r2, r1
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	18d3      	adds	r3, r2, r3
 8008efc:	183a      	adds	r2, r7, r0
 8008efe:	8812      	ldrh	r2, [r2, #0]
 8008f00:	49a3      	ldr	r1, [pc, #652]	@ (8009190 <USB_ActivateEndpoint+0x5d4>)
 8008f02:	430a      	orrs	r2, r1
 8008f04:	b292      	uxth	r2, r2
 8008f06:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d125      	bne.n	8008f5c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	18d3      	adds	r3, r2, r3
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	201c      	movs	r0, #28
 8008f20:	183b      	adds	r3, r7, r0
 8008f22:	499c      	ldr	r1, [pc, #624]	@ (8009194 <USB_ActivateEndpoint+0x5d8>)
 8008f24:	400a      	ands	r2, r1
 8008f26:	801a      	strh	r2, [r3, #0]
 8008f28:	183b      	adds	r3, r7, r0
 8008f2a:	183a      	adds	r2, r7, r0
 8008f2c:	8812      	ldrh	r2, [r2, #0]
 8008f2e:	2180      	movs	r1, #128	@ 0x80
 8008f30:	0149      	lsls	r1, r1, #5
 8008f32:	404a      	eors	r2, r1
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	183b      	adds	r3, r7, r0
 8008f38:	183a      	adds	r2, r7, r0
 8008f3a:	8812      	ldrh	r2, [r2, #0]
 8008f3c:	2180      	movs	r1, #128	@ 0x80
 8008f3e:	0189      	lsls	r1, r1, #6
 8008f40:	404a      	eors	r2, r1
 8008f42:	801a      	strh	r2, [r3, #0]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	18d3      	adds	r3, r2, r3
 8008f4e:	183a      	adds	r2, r7, r0
 8008f50:	8812      	ldrh	r2, [r2, #0]
 8008f52:	4991      	ldr	r1, [pc, #580]	@ (8009198 <USB_ActivateEndpoint+0x5dc>)
 8008f54:	430a      	orrs	r2, r1
 8008f56:	b292      	uxth	r2, r2
 8008f58:	801a      	strh	r2, [r3, #0]
 8008f5a:	e1c4      	b.n	80092e6 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	18d3      	adds	r3, r2, r3
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	201e      	movs	r0, #30
 8008f6c:	183b      	adds	r3, r7, r0
 8008f6e:	4989      	ldr	r1, [pc, #548]	@ (8009194 <USB_ActivateEndpoint+0x5d8>)
 8008f70:	400a      	ands	r2, r1
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	183b      	adds	r3, r7, r0
 8008f76:	183a      	adds	r2, r7, r0
 8008f78:	8812      	ldrh	r2, [r2, #0]
 8008f7a:	2180      	movs	r1, #128	@ 0x80
 8008f7c:	0189      	lsls	r1, r1, #6
 8008f7e:	404a      	eors	r2, r1
 8008f80:	801a      	strh	r2, [r3, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	18d3      	adds	r3, r2, r3
 8008f8c:	183a      	adds	r2, r7, r0
 8008f8e:	8812      	ldrh	r2, [r2, #0]
 8008f90:	4981      	ldr	r1, [pc, #516]	@ (8009198 <USB_ActivateEndpoint+0x5dc>)
 8008f92:	430a      	orrs	r2, r1
 8008f94:	b292      	uxth	r2, r2
 8008f96:	801a      	strh	r2, [r3, #0]
 8008f98:	e1a5      	b.n	80092e6 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	78db      	ldrb	r3, [r3, #3]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d117      	bne.n	8008fd2 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	18d3      	adds	r3, r2, r3
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	2062      	movs	r0, #98	@ 0x62
 8008fb2:	183b      	adds	r3, r7, r0
 8008fb4:	4975      	ldr	r1, [pc, #468]	@ (800918c <USB_ActivateEndpoint+0x5d0>)
 8008fb6:	400a      	ands	r2, r1
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	18d3      	adds	r3, r2, r3
 8008fc4:	183a      	adds	r2, r7, r0
 8008fc6:	8812      	ldrh	r2, [r2, #0]
 8008fc8:	4974      	ldr	r1, [pc, #464]	@ (800919c <USB_ActivateEndpoint+0x5e0>)
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	b292      	uxth	r2, r2
 8008fce:	801a      	strh	r2, [r3, #0]
 8008fd0:	e016      	b.n	8009000 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	18d3      	adds	r3, r2, r3
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	2064      	movs	r0, #100	@ 0x64
 8008fe2:	183b      	adds	r3, r7, r0
 8008fe4:	496e      	ldr	r1, [pc, #440]	@ (80091a0 <USB_ActivateEndpoint+0x5e4>)
 8008fe6:	400a      	ands	r2, r1
 8008fe8:	801a      	strh	r2, [r3, #0]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	18d3      	adds	r3, r2, r3
 8008ff4:	183a      	adds	r2, r7, r0
 8008ff6:	8812      	ldrh	r2, [r2, #0]
 8008ff8:	4967      	ldr	r1, [pc, #412]	@ (8009198 <USB_ActivateEndpoint+0x5dc>)
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	b292      	uxth	r2, r2
 8008ffe:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2250      	movs	r2, #80	@ 0x50
 8009008:	5a9b      	ldrh	r3, [r3, r2]
 800900a:	b29b      	uxth	r3, r3
 800900c:	001a      	movs	r2, r3
 800900e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009010:	189b      	adds	r3, r3, r2
 8009012:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	00da      	lsls	r2, r3, #3
 800901a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800901c:	18d3      	adds	r3, r2, r3
 800901e:	2280      	movs	r2, #128	@ 0x80
 8009020:	00d2      	lsls	r2, r2, #3
 8009022:	4694      	mov	ip, r2
 8009024:	4463      	add	r3, ip
 8009026:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	891b      	ldrh	r3, [r3, #8]
 800902c:	085b      	lsrs	r3, r3, #1
 800902e:	b29b      	uxth	r3, r3
 8009030:	18db      	adds	r3, r3, r3
 8009032:	b29a      	uxth	r2, r3
 8009034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	657b      	str	r3, [r7, #84]	@ 0x54
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2250      	movs	r2, #80	@ 0x50
 8009040:	5a9b      	ldrh	r3, [r3, r2]
 8009042:	b29b      	uxth	r3, r3
 8009044:	001a      	movs	r2, r3
 8009046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009048:	189b      	adds	r3, r3, r2
 800904a:	657b      	str	r3, [r7, #84]	@ 0x54
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	00da      	lsls	r2, r3, #3
 8009052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009054:	18d3      	adds	r3, r2, r3
 8009056:	4a53      	ldr	r2, [pc, #332]	@ (80091a4 <USB_ActivateEndpoint+0x5e8>)
 8009058:	4694      	mov	ip, r2
 800905a:	4463      	add	r3, ip
 800905c:	653b      	str	r3, [r7, #80]	@ 0x50
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	895b      	ldrh	r3, [r3, #10]
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	b29b      	uxth	r3, r3
 8009066:	18db      	adds	r3, r3, r3
 8009068:	b29a      	uxth	r2, r3
 800906a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800906c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d000      	beq.n	8009078 <USB_ActivateEndpoint+0x4bc>
 8009076:	e09b      	b.n	80091b0 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	18d2      	adds	r2, r2, r3
 8009082:	2140      	movs	r1, #64	@ 0x40
 8009084:	187b      	adds	r3, r7, r1
 8009086:	8812      	ldrh	r2, [r2, #0]
 8009088:	801a      	strh	r2, [r3, #0]
 800908a:	187b      	adds	r3, r7, r1
 800908c:	881a      	ldrh	r2, [r3, #0]
 800908e:	2380      	movs	r3, #128	@ 0x80
 8009090:	01db      	lsls	r3, r3, #7
 8009092:	4013      	ands	r3, r2
 8009094:	d016      	beq.n	80090c4 <USB_ActivateEndpoint+0x508>
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	18d3      	adds	r3, r2, r3
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	203e      	movs	r0, #62	@ 0x3e
 80090a6:	183b      	adds	r3, r7, r0
 80090a8:	4938      	ldr	r1, [pc, #224]	@ (800918c <USB_ActivateEndpoint+0x5d0>)
 80090aa:	400a      	ands	r2, r1
 80090ac:	801a      	strh	r2, [r3, #0]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	18d3      	adds	r3, r2, r3
 80090b8:	183a      	adds	r2, r7, r0
 80090ba:	8812      	ldrh	r2, [r2, #0]
 80090bc:	4934      	ldr	r1, [pc, #208]	@ (8009190 <USB_ActivateEndpoint+0x5d4>)
 80090be:	430a      	orrs	r2, r1
 80090c0:	b292      	uxth	r2, r2
 80090c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	18d2      	adds	r2, r2, r3
 80090ce:	213c      	movs	r1, #60	@ 0x3c
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	8812      	ldrh	r2, [r2, #0]
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	187b      	adds	r3, r7, r1
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	2240      	movs	r2, #64	@ 0x40
 80090dc:	4013      	ands	r3, r2
 80090de:	d016      	beq.n	800910e <USB_ActivateEndpoint+0x552>
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	18d3      	adds	r3, r2, r3
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	203a      	movs	r0, #58	@ 0x3a
 80090f0:	183b      	adds	r3, r7, r0
 80090f2:	4926      	ldr	r1, [pc, #152]	@ (800918c <USB_ActivateEndpoint+0x5d0>)
 80090f4:	400a      	ands	r2, r1
 80090f6:	801a      	strh	r2, [r3, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	18d3      	adds	r3, r2, r3
 8009102:	183a      	adds	r2, r7, r0
 8009104:	8812      	ldrh	r2, [r2, #0]
 8009106:	4928      	ldr	r1, [pc, #160]	@ (80091a8 <USB_ActivateEndpoint+0x5ec>)
 8009108:	430a      	orrs	r2, r1
 800910a:	b292      	uxth	r2, r2
 800910c:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	18d3      	adds	r3, r2, r3
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29a      	uxth	r2, r3
 800911c:	2038      	movs	r0, #56	@ 0x38
 800911e:	183b      	adds	r3, r7, r0
 8009120:	491c      	ldr	r1, [pc, #112]	@ (8009194 <USB_ActivateEndpoint+0x5d8>)
 8009122:	400a      	ands	r2, r1
 8009124:	801a      	strh	r2, [r3, #0]
 8009126:	183b      	adds	r3, r7, r0
 8009128:	183a      	adds	r2, r7, r0
 800912a:	8812      	ldrh	r2, [r2, #0]
 800912c:	2180      	movs	r1, #128	@ 0x80
 800912e:	0149      	lsls	r1, r1, #5
 8009130:	404a      	eors	r2, r1
 8009132:	801a      	strh	r2, [r3, #0]
 8009134:	183b      	adds	r3, r7, r0
 8009136:	183a      	adds	r2, r7, r0
 8009138:	8812      	ldrh	r2, [r2, #0]
 800913a:	2180      	movs	r1, #128	@ 0x80
 800913c:	0189      	lsls	r1, r1, #6
 800913e:	404a      	eors	r2, r1
 8009140:	801a      	strh	r2, [r3, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	18d3      	adds	r3, r2, r3
 800914c:	183a      	adds	r2, r7, r0
 800914e:	8812      	ldrh	r2, [r2, #0]
 8009150:	4911      	ldr	r1, [pc, #68]	@ (8009198 <USB_ActivateEndpoint+0x5dc>)
 8009152:	430a      	orrs	r2, r1
 8009154:	b292      	uxth	r2, r2
 8009156:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	18d3      	adds	r3, r2, r3
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29a      	uxth	r2, r3
 8009166:	2036      	movs	r0, #54	@ 0x36
 8009168:	183b      	adds	r3, r7, r0
 800916a:	4910      	ldr	r1, [pc, #64]	@ (80091ac <USB_ActivateEndpoint+0x5f0>)
 800916c:	400a      	ands	r2, r1
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	18d3      	adds	r3, r2, r3
 800917a:	183a      	adds	r2, r7, r0
 800917c:	8812      	ldrh	r2, [r2, #0]
 800917e:	4906      	ldr	r1, [pc, #24]	@ (8009198 <USB_ActivateEndpoint+0x5dc>)
 8009180:	430a      	orrs	r2, r1
 8009182:	b292      	uxth	r2, r2
 8009184:	801a      	strh	r2, [r3, #0]
 8009186:	e0ae      	b.n	80092e6 <USB_ActivateEndpoint+0x72a>
 8009188:	ffff8000 	.word	0xffff8000
 800918c:	ffff8f8f 	.word	0xffff8f8f
 8009190:	ffffc080 	.word	0xffffc080
 8009194:	ffffbf8f 	.word	0xffffbf8f
 8009198:	ffff8080 	.word	0xffff8080
 800919c:	ffff8180 	.word	0xffff8180
 80091a0:	ffff8e8f 	.word	0xffff8e8f
 80091a4:	00000404 	.word	0x00000404
 80091a8:	ffff80c0 	.word	0xffff80c0
 80091ac:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	18d2      	adds	r2, r2, r3
 80091ba:	214e      	movs	r1, #78	@ 0x4e
 80091bc:	187b      	adds	r3, r7, r1
 80091be:	8812      	ldrh	r2, [r2, #0]
 80091c0:	801a      	strh	r2, [r3, #0]
 80091c2:	187b      	adds	r3, r7, r1
 80091c4:	881a      	ldrh	r2, [r3, #0]
 80091c6:	2380      	movs	r3, #128	@ 0x80
 80091c8:	01db      	lsls	r3, r3, #7
 80091ca:	4013      	ands	r3, r2
 80091cc:	d016      	beq.n	80091fc <USB_ActivateEndpoint+0x640>
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	18d3      	adds	r3, r2, r3
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29a      	uxth	r2, r3
 80091dc:	204c      	movs	r0, #76	@ 0x4c
 80091de:	183b      	adds	r3, r7, r0
 80091e0:	4944      	ldr	r1, [pc, #272]	@ (80092f4 <USB_ActivateEndpoint+0x738>)
 80091e2:	400a      	ands	r2, r1
 80091e4:	801a      	strh	r2, [r3, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	18d3      	adds	r3, r2, r3
 80091f0:	183a      	adds	r2, r7, r0
 80091f2:	8812      	ldrh	r2, [r2, #0]
 80091f4:	4940      	ldr	r1, [pc, #256]	@ (80092f8 <USB_ActivateEndpoint+0x73c>)
 80091f6:	430a      	orrs	r2, r1
 80091f8:	b292      	uxth	r2, r2
 80091fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	18d2      	adds	r2, r2, r3
 8009206:	214a      	movs	r1, #74	@ 0x4a
 8009208:	187b      	adds	r3, r7, r1
 800920a:	8812      	ldrh	r2, [r2, #0]
 800920c:	801a      	strh	r2, [r3, #0]
 800920e:	187b      	adds	r3, r7, r1
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	2240      	movs	r2, #64	@ 0x40
 8009214:	4013      	ands	r3, r2
 8009216:	d016      	beq.n	8009246 <USB_ActivateEndpoint+0x68a>
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	18d3      	adds	r3, r2, r3
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29a      	uxth	r2, r3
 8009226:	2048      	movs	r0, #72	@ 0x48
 8009228:	183b      	adds	r3, r7, r0
 800922a:	4932      	ldr	r1, [pc, #200]	@ (80092f4 <USB_ActivateEndpoint+0x738>)
 800922c:	400a      	ands	r2, r1
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	18d3      	adds	r3, r2, r3
 800923a:	183a      	adds	r2, r7, r0
 800923c:	8812      	ldrh	r2, [r2, #0]
 800923e:	492f      	ldr	r1, [pc, #188]	@ (80092fc <USB_ActivateEndpoint+0x740>)
 8009240:	430a      	orrs	r2, r1
 8009242:	b292      	uxth	r2, r2
 8009244:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	78db      	ldrb	r3, [r3, #3]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d01d      	beq.n	800928a <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	18d3      	adds	r3, r2, r3
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	b29a      	uxth	r2, r3
 800925c:	2044      	movs	r0, #68	@ 0x44
 800925e:	183b      	adds	r3, r7, r0
 8009260:	4927      	ldr	r1, [pc, #156]	@ (8009300 <USB_ActivateEndpoint+0x744>)
 8009262:	400a      	ands	r2, r1
 8009264:	801a      	strh	r2, [r3, #0]
 8009266:	183b      	adds	r3, r7, r0
 8009268:	183a      	adds	r2, r7, r0
 800926a:	8812      	ldrh	r2, [r2, #0]
 800926c:	2120      	movs	r1, #32
 800926e:	404a      	eors	r2, r1
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	18d3      	adds	r3, r2, r3
 800927c:	183a      	adds	r2, r7, r0
 800927e:	8812      	ldrh	r2, [r2, #0]
 8009280:	4920      	ldr	r1, [pc, #128]	@ (8009304 <USB_ActivateEndpoint+0x748>)
 8009282:	430a      	orrs	r2, r1
 8009284:	b292      	uxth	r2, r2
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	e016      	b.n	80092b8 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	18d3      	adds	r3, r2, r3
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29a      	uxth	r2, r3
 8009298:	2046      	movs	r0, #70	@ 0x46
 800929a:	183b      	adds	r3, r7, r0
 800929c:	4918      	ldr	r1, [pc, #96]	@ (8009300 <USB_ActivateEndpoint+0x744>)
 800929e:	400a      	ands	r2, r1
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	18d3      	adds	r3, r2, r3
 80092ac:	183a      	adds	r2, r7, r0
 80092ae:	8812      	ldrh	r2, [r2, #0]
 80092b0:	4914      	ldr	r1, [pc, #80]	@ (8009304 <USB_ActivateEndpoint+0x748>)
 80092b2:	430a      	orrs	r2, r1
 80092b4:	b292      	uxth	r2, r2
 80092b6:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	18d3      	adds	r3, r2, r3
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	2042      	movs	r0, #66	@ 0x42
 80092c8:	183b      	adds	r3, r7, r0
 80092ca:	490f      	ldr	r1, [pc, #60]	@ (8009308 <USB_ActivateEndpoint+0x74c>)
 80092cc:	400a      	ands	r2, r1
 80092ce:	801a      	strh	r2, [r3, #0]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	18d3      	adds	r3, r2, r3
 80092da:	183a      	adds	r2, r7, r0
 80092dc:	8812      	ldrh	r2, [r2, #0]
 80092de:	4909      	ldr	r1, [pc, #36]	@ (8009304 <USB_ActivateEndpoint+0x748>)
 80092e0:	430a      	orrs	r2, r1
 80092e2:	b292      	uxth	r2, r2
 80092e4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80092e6:	236f      	movs	r3, #111	@ 0x6f
 80092e8:	18fb      	adds	r3, r7, r3
 80092ea:	781b      	ldrb	r3, [r3, #0]
}
 80092ec:	0018      	movs	r0, r3
 80092ee:	46bd      	mov	sp, r7
 80092f0:	b01c      	add	sp, #112	@ 0x70
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	ffff8f8f 	.word	0xffff8f8f
 80092f8:	ffffc080 	.word	0xffffc080
 80092fc:	ffff80c0 	.word	0xffff80c0
 8009300:	ffff8fbf 	.word	0xffff8fbf
 8009304:	ffff8080 	.word	0xffff8080
 8009308:	ffffbf8f 	.word	0xffffbf8f

0800930c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08c      	sub	sp, #48	@ 0x30
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	7b1b      	ldrb	r3, [r3, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d000      	beq.n	8009320 <USB_DeactivateEndpoint+0x14>
 800931e:	e07e      	b.n	800941e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d03c      	beq.n	80093a2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	18d2      	adds	r2, r2, r3
 8009332:	210c      	movs	r1, #12
 8009334:	187b      	adds	r3, r7, r1
 8009336:	8812      	ldrh	r2, [r2, #0]
 8009338:	801a      	strh	r2, [r3, #0]
 800933a:	187b      	adds	r3, r7, r1
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	2240      	movs	r2, #64	@ 0x40
 8009340:	4013      	ands	r3, r2
 8009342:	d016      	beq.n	8009372 <USB_DeactivateEndpoint+0x66>
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	18d3      	adds	r3, r2, r3
 800934e:	881b      	ldrh	r3, [r3, #0]
 8009350:	b29a      	uxth	r2, r3
 8009352:	200a      	movs	r0, #10
 8009354:	183b      	adds	r3, r7, r0
 8009356:	49c7      	ldr	r1, [pc, #796]	@ (8009674 <USB_DeactivateEndpoint+0x368>)
 8009358:	400a      	ands	r2, r1
 800935a:	801a      	strh	r2, [r3, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	18d3      	adds	r3, r2, r3
 8009366:	183a      	adds	r2, r7, r0
 8009368:	8812      	ldrh	r2, [r2, #0]
 800936a:	49c3      	ldr	r1, [pc, #780]	@ (8009678 <USB_DeactivateEndpoint+0x36c>)
 800936c:	430a      	orrs	r2, r1
 800936e:	b292      	uxth	r2, r2
 8009370:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	18d3      	adds	r3, r2, r3
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	b29a      	uxth	r2, r3
 8009380:	2008      	movs	r0, #8
 8009382:	183b      	adds	r3, r7, r0
 8009384:	49bd      	ldr	r1, [pc, #756]	@ (800967c <USB_DeactivateEndpoint+0x370>)
 8009386:	400a      	ands	r2, r1
 8009388:	801a      	strh	r2, [r3, #0]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	18d3      	adds	r3, r2, r3
 8009394:	183a      	adds	r2, r7, r0
 8009396:	8812      	ldrh	r2, [r2, #0]
 8009398:	49b9      	ldr	r1, [pc, #740]	@ (8009680 <USB_DeactivateEndpoint+0x374>)
 800939a:	430a      	orrs	r2, r1
 800939c:	b292      	uxth	r2, r2
 800939e:	801a      	strh	r2, [r3, #0]
 80093a0:	e163      	b.n	800966a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	18d2      	adds	r2, r2, r3
 80093ac:	2112      	movs	r1, #18
 80093ae:	187b      	adds	r3, r7, r1
 80093b0:	8812      	ldrh	r2, [r2, #0]
 80093b2:	801a      	strh	r2, [r3, #0]
 80093b4:	187b      	adds	r3, r7, r1
 80093b6:	881a      	ldrh	r2, [r3, #0]
 80093b8:	2380      	movs	r3, #128	@ 0x80
 80093ba:	01db      	lsls	r3, r3, #7
 80093bc:	4013      	ands	r3, r2
 80093be:	d016      	beq.n	80093ee <USB_DeactivateEndpoint+0xe2>
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	18d3      	adds	r3, r2, r3
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	2010      	movs	r0, #16
 80093d0:	183b      	adds	r3, r7, r0
 80093d2:	49a8      	ldr	r1, [pc, #672]	@ (8009674 <USB_DeactivateEndpoint+0x368>)
 80093d4:	400a      	ands	r2, r1
 80093d6:	801a      	strh	r2, [r3, #0]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	18d3      	adds	r3, r2, r3
 80093e2:	183a      	adds	r2, r7, r0
 80093e4:	8812      	ldrh	r2, [r2, #0]
 80093e6:	49a7      	ldr	r1, [pc, #668]	@ (8009684 <USB_DeactivateEndpoint+0x378>)
 80093e8:	430a      	orrs	r2, r1
 80093ea:	b292      	uxth	r2, r2
 80093ec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	18d3      	adds	r3, r2, r3
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	200e      	movs	r0, #14
 80093fe:	183b      	adds	r3, r7, r0
 8009400:	49a1      	ldr	r1, [pc, #644]	@ (8009688 <USB_DeactivateEndpoint+0x37c>)
 8009402:	400a      	ands	r2, r1
 8009404:	801a      	strh	r2, [r3, #0]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	18d3      	adds	r3, r2, r3
 8009410:	183a      	adds	r2, r7, r0
 8009412:	8812      	ldrh	r2, [r2, #0]
 8009414:	499a      	ldr	r1, [pc, #616]	@ (8009680 <USB_DeactivateEndpoint+0x374>)
 8009416:	430a      	orrs	r2, r1
 8009418:	b292      	uxth	r2, r2
 800941a:	801a      	strh	r2, [r3, #0]
 800941c:	e125      	b.n	800966a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	785b      	ldrb	r3, [r3, #1]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d000      	beq.n	8009428 <USB_DeactivateEndpoint+0x11c>
 8009426:	e090      	b.n	800954a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	18d2      	adds	r2, r2, r3
 8009432:	2120      	movs	r1, #32
 8009434:	187b      	adds	r3, r7, r1
 8009436:	8812      	ldrh	r2, [r2, #0]
 8009438:	801a      	strh	r2, [r3, #0]
 800943a:	187b      	adds	r3, r7, r1
 800943c:	881a      	ldrh	r2, [r3, #0]
 800943e:	2380      	movs	r3, #128	@ 0x80
 8009440:	01db      	lsls	r3, r3, #7
 8009442:	4013      	ands	r3, r2
 8009444:	d016      	beq.n	8009474 <USB_DeactivateEndpoint+0x168>
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	18d3      	adds	r3, r2, r3
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29a      	uxth	r2, r3
 8009454:	201e      	movs	r0, #30
 8009456:	183b      	adds	r3, r7, r0
 8009458:	4986      	ldr	r1, [pc, #536]	@ (8009674 <USB_DeactivateEndpoint+0x368>)
 800945a:	400a      	ands	r2, r1
 800945c:	801a      	strh	r2, [r3, #0]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	18d3      	adds	r3, r2, r3
 8009468:	183a      	adds	r2, r7, r0
 800946a:	8812      	ldrh	r2, [r2, #0]
 800946c:	4985      	ldr	r1, [pc, #532]	@ (8009684 <USB_DeactivateEndpoint+0x378>)
 800946e:	430a      	orrs	r2, r1
 8009470:	b292      	uxth	r2, r2
 8009472:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	18d2      	adds	r2, r2, r3
 800947e:	211c      	movs	r1, #28
 8009480:	187b      	adds	r3, r7, r1
 8009482:	8812      	ldrh	r2, [r2, #0]
 8009484:	801a      	strh	r2, [r3, #0]
 8009486:	187b      	adds	r3, r7, r1
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	2240      	movs	r2, #64	@ 0x40
 800948c:	4013      	ands	r3, r2
 800948e:	d016      	beq.n	80094be <USB_DeactivateEndpoint+0x1b2>
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	18d3      	adds	r3, r2, r3
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	b29a      	uxth	r2, r3
 800949e:	201a      	movs	r0, #26
 80094a0:	183b      	adds	r3, r7, r0
 80094a2:	4974      	ldr	r1, [pc, #464]	@ (8009674 <USB_DeactivateEndpoint+0x368>)
 80094a4:	400a      	ands	r2, r1
 80094a6:	801a      	strh	r2, [r3, #0]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	18d3      	adds	r3, r2, r3
 80094b2:	183a      	adds	r2, r7, r0
 80094b4:	8812      	ldrh	r2, [r2, #0]
 80094b6:	4970      	ldr	r1, [pc, #448]	@ (8009678 <USB_DeactivateEndpoint+0x36c>)
 80094b8:	430a      	orrs	r2, r1
 80094ba:	b292      	uxth	r2, r2
 80094bc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	18d3      	adds	r3, r2, r3
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	2018      	movs	r0, #24
 80094ce:	183b      	adds	r3, r7, r0
 80094d0:	4968      	ldr	r1, [pc, #416]	@ (8009674 <USB_DeactivateEndpoint+0x368>)
 80094d2:	400a      	ands	r2, r1
 80094d4:	801a      	strh	r2, [r3, #0]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	18d3      	adds	r3, r2, r3
 80094e0:	183a      	adds	r2, r7, r0
 80094e2:	8812      	ldrh	r2, [r2, #0]
 80094e4:	4964      	ldr	r1, [pc, #400]	@ (8009678 <USB_DeactivateEndpoint+0x36c>)
 80094e6:	430a      	orrs	r2, r1
 80094e8:	b292      	uxth	r2, r2
 80094ea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	18d3      	adds	r3, r2, r3
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	2016      	movs	r0, #22
 80094fc:	183b      	adds	r3, r7, r0
 80094fe:	4962      	ldr	r1, [pc, #392]	@ (8009688 <USB_DeactivateEndpoint+0x37c>)
 8009500:	400a      	ands	r2, r1
 8009502:	801a      	strh	r2, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	18d3      	adds	r3, r2, r3
 800950e:	183a      	adds	r2, r7, r0
 8009510:	8812      	ldrh	r2, [r2, #0]
 8009512:	495b      	ldr	r1, [pc, #364]	@ (8009680 <USB_DeactivateEndpoint+0x374>)
 8009514:	430a      	orrs	r2, r1
 8009516:	b292      	uxth	r2, r2
 8009518:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	18d3      	adds	r3, r2, r3
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	b29a      	uxth	r2, r3
 8009528:	2014      	movs	r0, #20
 800952a:	183b      	adds	r3, r7, r0
 800952c:	4953      	ldr	r1, [pc, #332]	@ (800967c <USB_DeactivateEndpoint+0x370>)
 800952e:	400a      	ands	r2, r1
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	18d3      	adds	r3, r2, r3
 800953c:	183a      	adds	r2, r7, r0
 800953e:	8812      	ldrh	r2, [r2, #0]
 8009540:	494f      	ldr	r1, [pc, #316]	@ (8009680 <USB_DeactivateEndpoint+0x374>)
 8009542:	430a      	orrs	r2, r1
 8009544:	b292      	uxth	r2, r2
 8009546:	801a      	strh	r2, [r3, #0]
 8009548:	e08f      	b.n	800966a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	18d2      	adds	r2, r2, r3
 8009554:	212e      	movs	r1, #46	@ 0x2e
 8009556:	187b      	adds	r3, r7, r1
 8009558:	8812      	ldrh	r2, [r2, #0]
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	187b      	adds	r3, r7, r1
 800955e:	881a      	ldrh	r2, [r3, #0]
 8009560:	2380      	movs	r3, #128	@ 0x80
 8009562:	01db      	lsls	r3, r3, #7
 8009564:	4013      	ands	r3, r2
 8009566:	d016      	beq.n	8009596 <USB_DeactivateEndpoint+0x28a>
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	18d3      	adds	r3, r2, r3
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	b29a      	uxth	r2, r3
 8009576:	202c      	movs	r0, #44	@ 0x2c
 8009578:	183b      	adds	r3, r7, r0
 800957a:	493e      	ldr	r1, [pc, #248]	@ (8009674 <USB_DeactivateEndpoint+0x368>)
 800957c:	400a      	ands	r2, r1
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	18d3      	adds	r3, r2, r3
 800958a:	183a      	adds	r2, r7, r0
 800958c:	8812      	ldrh	r2, [r2, #0]
 800958e:	493d      	ldr	r1, [pc, #244]	@ (8009684 <USB_DeactivateEndpoint+0x378>)
 8009590:	430a      	orrs	r2, r1
 8009592:	b292      	uxth	r2, r2
 8009594:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	18d2      	adds	r2, r2, r3
 80095a0:	212a      	movs	r1, #42	@ 0x2a
 80095a2:	187b      	adds	r3, r7, r1
 80095a4:	8812      	ldrh	r2, [r2, #0]
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	187b      	adds	r3, r7, r1
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	2240      	movs	r2, #64	@ 0x40
 80095ae:	4013      	ands	r3, r2
 80095b0:	d016      	beq.n	80095e0 <USB_DeactivateEndpoint+0x2d4>
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	18d3      	adds	r3, r2, r3
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	b29a      	uxth	r2, r3
 80095c0:	2028      	movs	r0, #40	@ 0x28
 80095c2:	183b      	adds	r3, r7, r0
 80095c4:	492b      	ldr	r1, [pc, #172]	@ (8009674 <USB_DeactivateEndpoint+0x368>)
 80095c6:	400a      	ands	r2, r1
 80095c8:	801a      	strh	r2, [r3, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	18d3      	adds	r3, r2, r3
 80095d4:	183a      	adds	r2, r7, r0
 80095d6:	8812      	ldrh	r2, [r2, #0]
 80095d8:	4927      	ldr	r1, [pc, #156]	@ (8009678 <USB_DeactivateEndpoint+0x36c>)
 80095da:	430a      	orrs	r2, r1
 80095dc:	b292      	uxth	r2, r2
 80095de:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	18d3      	adds	r3, r2, r3
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	2026      	movs	r0, #38	@ 0x26
 80095f0:	183b      	adds	r3, r7, r0
 80095f2:	4920      	ldr	r1, [pc, #128]	@ (8009674 <USB_DeactivateEndpoint+0x368>)
 80095f4:	400a      	ands	r2, r1
 80095f6:	801a      	strh	r2, [r3, #0]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	18d3      	adds	r3, r2, r3
 8009602:	183a      	adds	r2, r7, r0
 8009604:	8812      	ldrh	r2, [r2, #0]
 8009606:	491f      	ldr	r1, [pc, #124]	@ (8009684 <USB_DeactivateEndpoint+0x378>)
 8009608:	430a      	orrs	r2, r1
 800960a:	b292      	uxth	r2, r2
 800960c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	18d3      	adds	r3, r2, r3
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29a      	uxth	r2, r3
 800961c:	2024      	movs	r0, #36	@ 0x24
 800961e:	183b      	adds	r3, r7, r0
 8009620:	4916      	ldr	r1, [pc, #88]	@ (800967c <USB_DeactivateEndpoint+0x370>)
 8009622:	400a      	ands	r2, r1
 8009624:	801a      	strh	r2, [r3, #0]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	18d3      	adds	r3, r2, r3
 8009630:	183a      	adds	r2, r7, r0
 8009632:	8812      	ldrh	r2, [r2, #0]
 8009634:	4912      	ldr	r1, [pc, #72]	@ (8009680 <USB_DeactivateEndpoint+0x374>)
 8009636:	430a      	orrs	r2, r1
 8009638:	b292      	uxth	r2, r2
 800963a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	18d3      	adds	r3, r2, r3
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	b29a      	uxth	r2, r3
 800964a:	2022      	movs	r0, #34	@ 0x22
 800964c:	183b      	adds	r3, r7, r0
 800964e:	490e      	ldr	r1, [pc, #56]	@ (8009688 <USB_DeactivateEndpoint+0x37c>)
 8009650:	400a      	ands	r2, r1
 8009652:	801a      	strh	r2, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	18d3      	adds	r3, r2, r3
 800965e:	183a      	adds	r2, r7, r0
 8009660:	8812      	ldrh	r2, [r2, #0]
 8009662:	4907      	ldr	r1, [pc, #28]	@ (8009680 <USB_DeactivateEndpoint+0x374>)
 8009664:	430a      	orrs	r2, r1
 8009666:	b292      	uxth	r2, r2
 8009668:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	0018      	movs	r0, r3
 800966e:	46bd      	mov	sp, r7
 8009670:	b00c      	add	sp, #48	@ 0x30
 8009672:	bd80      	pop	{r7, pc}
 8009674:	ffff8f8f 	.word	0xffff8f8f
 8009678:	ffff80c0 	.word	0xffff80c0
 800967c:	ffff8fbf 	.word	0xffff8fbf
 8009680:	ffff8080 	.word	0xffff8080
 8009684:	ffffc080 	.word	0xffffc080
 8009688:	ffffbf8f 	.word	0xffffbf8f

0800968c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800968c:	b590      	push	{r4, r7, lr}
 800968e:	b0c3      	sub	sp, #268	@ 0x10c
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	785b      	ldrb	r3, [r3, #1]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d001      	beq.n	80096a2 <USB_EPStartXfer+0x16>
 800969e:	f000 fd2d 	bl	800a0fc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	699a      	ldr	r2, [r3, #24]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d905      	bls.n	80096ba <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	1d7a      	adds	r2, r7, #5
 80096b4:	32ff      	adds	r2, #255	@ 0xff
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	e004      	b.n	80096c4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	1d7a      	adds	r2, r7, #5
 80096c0:	32ff      	adds	r2, #255	@ 0xff
 80096c2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	7b1b      	ldrb	r3, [r3, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d125      	bne.n	8009718 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	6959      	ldr	r1, [r3, #20]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	88da      	ldrh	r2, [r3, #6]
 80096d4:	1d7b      	adds	r3, r7, #5
 80096d6:	33ff      	adds	r3, #255	@ 0xff
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 fa3f 	bl	800ab60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	613b      	str	r3, [r7, #16]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2250      	movs	r2, #80	@ 0x50
 80096ea:	5a9b      	ldrh	r3, [r3, r2]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	001a      	movs	r2, r3
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	189b      	adds	r3, r3, r2
 80096f4:	613b      	str	r3, [r7, #16]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	00da      	lsls	r2, r3, #3
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	18d3      	adds	r3, r2, r3
 8009700:	4ad7      	ldr	r2, [pc, #860]	@ (8009a60 <USB_EPStartXfer+0x3d4>)
 8009702:	4694      	mov	ip, r2
 8009704:	4463      	add	r3, ip
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	1d7b      	adds	r3, r7, #5
 800970a:	33ff      	adds	r3, #255	@ 0xff
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	f000 fccd 	bl	800a0b2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	78db      	ldrb	r3, [r3, #3]
 800971c:	2b02      	cmp	r3, #2
 800971e:	d000      	beq.n	8009722 <USB_EPStartXfer+0x96>
 8009720:	e362      	b.n	8009de8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	6a1a      	ldr	r2, [r3, #32]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	429a      	cmp	r2, r3
 800972c:	d800      	bhi.n	8009730 <USB_EPStartXfer+0xa4>
 800972e:	e309      	b.n	8009d44 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	18d3      	adds	r3, r2, r3
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29a      	uxth	r2, r3
 800973e:	2056      	movs	r0, #86	@ 0x56
 8009740:	183b      	adds	r3, r7, r0
 8009742:	49c8      	ldr	r1, [pc, #800]	@ (8009a64 <USB_EPStartXfer+0x3d8>)
 8009744:	400a      	ands	r2, r1
 8009746:	801a      	strh	r2, [r3, #0]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	18d3      	adds	r3, r2, r3
 8009752:	183a      	adds	r2, r7, r0
 8009754:	8812      	ldrh	r2, [r2, #0]
 8009756:	49c4      	ldr	r1, [pc, #784]	@ (8009a68 <USB_EPStartXfer+0x3dc>)
 8009758:	430a      	orrs	r2, r1
 800975a:	b292      	uxth	r2, r2
 800975c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	6a1a      	ldr	r2, [r3, #32]
 8009762:	1d7b      	adds	r3, r7, #5
 8009764:	33ff      	adds	r3, #255	@ 0xff
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	1ad2      	subs	r2, r2, r3
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	18d3      	adds	r3, r2, r3
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29b      	uxth	r3, r3
 800977c:	001a      	movs	r2, r3
 800977e:	2340      	movs	r3, #64	@ 0x40
 8009780:	4013      	ands	r3, r2
 8009782:	d100      	bne.n	8009786 <USB_EPStartXfer+0xfa>
 8009784:	e176      	b.n	8009a74 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	633b      	str	r3, [r7, #48]	@ 0x30
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	785b      	ldrb	r3, [r3, #1]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d000      	beq.n	8009794 <USB_EPStartXfer+0x108>
 8009792:	e074      	b.n	800987e <USB_EPStartXfer+0x1f2>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2250      	movs	r2, #80	@ 0x50
 800979c:	5a9b      	ldrh	r3, [r3, r2]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	001a      	movs	r2, r3
 80097a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a4:	189b      	adds	r3, r3, r2
 80097a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	00da      	lsls	r2, r3, #3
 80097ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b0:	18d3      	adds	r3, r2, r3
 80097b2:	4aae      	ldr	r2, [pc, #696]	@ (8009a6c <USB_EPStartXfer+0x3e0>)
 80097b4:	4694      	mov	ip, r2
 80097b6:	4463      	add	r3, ip
 80097b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	b29b      	uxth	r3, r3
 80097c0:	059b      	lsls	r3, r3, #22
 80097c2:	0d9b      	lsrs	r3, r3, #22
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c8:	801a      	strh	r2, [r3, #0]
 80097ca:	1d7b      	adds	r3, r7, #5
 80097cc:	33ff      	adds	r3, #255	@ 0xff
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d108      	bne.n	80097e6 <USB_EPStartXfer+0x15a>
 80097d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	b29b      	uxth	r3, r3
 80097da:	4aa5      	ldr	r2, [pc, #660]	@ (8009a70 <USB_EPStartXfer+0x3e4>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	b29a      	uxth	r2, r3
 80097e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e2:	801a      	strh	r2, [r3, #0]
 80097e4:	e066      	b.n	80098b4 <USB_EPStartXfer+0x228>
 80097e6:	1d7b      	adds	r3, r7, #5
 80097e8:	33ff      	adds	r3, #255	@ 0xff
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80097ee:	d821      	bhi.n	8009834 <USB_EPStartXfer+0x1a8>
 80097f0:	1d7b      	adds	r3, r7, #5
 80097f2:	33ff      	adds	r3, #255	@ 0xff
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	085b      	lsrs	r3, r3, #1
 80097f8:	1c7a      	adds	r2, r7, #1
 80097fa:	32ff      	adds	r2, #255	@ 0xff
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	1d7b      	adds	r3, r7, #5
 8009800:	33ff      	adds	r3, #255	@ 0xff
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2201      	movs	r2, #1
 8009806:	4013      	ands	r3, r2
 8009808:	d006      	beq.n	8009818 <USB_EPStartXfer+0x18c>
 800980a:	1c7b      	adds	r3, r7, #1
 800980c:	33ff      	adds	r3, #255	@ 0xff
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	1c7a      	adds	r2, r7, #1
 8009814:	32ff      	adds	r2, #255	@ 0xff
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	b29a      	uxth	r2, r3
 800981e:	1c7b      	adds	r3, r7, #1
 8009820:	33ff      	adds	r3, #255	@ 0xff
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	029b      	lsls	r3, r3, #10
 8009828:	b29b      	uxth	r3, r3
 800982a:	4313      	orrs	r3, r2
 800982c:	b29a      	uxth	r2, r3
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	801a      	strh	r2, [r3, #0]
 8009832:	e03f      	b.n	80098b4 <USB_EPStartXfer+0x228>
 8009834:	1d7b      	adds	r3, r7, #5
 8009836:	33ff      	adds	r3, #255	@ 0xff
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	095b      	lsrs	r3, r3, #5
 800983c:	1c7a      	adds	r2, r7, #1
 800983e:	32ff      	adds	r2, #255	@ 0xff
 8009840:	6013      	str	r3, [r2, #0]
 8009842:	1d7b      	adds	r3, r7, #5
 8009844:	33ff      	adds	r3, #255	@ 0xff
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	221f      	movs	r2, #31
 800984a:	4013      	ands	r3, r2
 800984c:	d106      	bne.n	800985c <USB_EPStartXfer+0x1d0>
 800984e:	1c7b      	adds	r3, r7, #1
 8009850:	33ff      	adds	r3, #255	@ 0xff
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3b01      	subs	r3, #1
 8009856:	1c7a      	adds	r2, r7, #1
 8009858:	32ff      	adds	r2, #255	@ 0xff
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b29a      	uxth	r2, r3
 8009862:	1c7b      	adds	r3, r7, #1
 8009864:	33ff      	adds	r3, #255	@ 0xff
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	b29b      	uxth	r3, r3
 800986a:	029b      	lsls	r3, r3, #10
 800986c:	b29b      	uxth	r3, r3
 800986e:	4313      	orrs	r3, r2
 8009870:	b29b      	uxth	r3, r3
 8009872:	4a7f      	ldr	r2, [pc, #508]	@ (8009a70 <USB_EPStartXfer+0x3e4>)
 8009874:	4313      	orrs	r3, r2
 8009876:	b29a      	uxth	r2, r3
 8009878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	e01a      	b.n	80098b4 <USB_EPStartXfer+0x228>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d116      	bne.n	80098b4 <USB_EPStartXfer+0x228>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2250      	movs	r2, #80	@ 0x50
 800988a:	5a9b      	ldrh	r3, [r3, r2]
 800988c:	b29b      	uxth	r3, r3
 800988e:	001a      	movs	r2, r3
 8009890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009892:	189b      	adds	r3, r3, r2
 8009894:	633b      	str	r3, [r7, #48]	@ 0x30
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	00da      	lsls	r2, r3, #3
 800989c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989e:	18d3      	adds	r3, r2, r3
 80098a0:	4a72      	ldr	r2, [pc, #456]	@ (8009a6c <USB_EPStartXfer+0x3e0>)
 80098a2:	4694      	mov	ip, r2
 80098a4:	4463      	add	r3, ip
 80098a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098a8:	1d7b      	adds	r3, r7, #5
 80098aa:	33ff      	adds	r3, #255	@ 0xff
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80098b4:	2076      	movs	r0, #118	@ 0x76
 80098b6:	183b      	adds	r3, r7, r0
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	8952      	ldrh	r2, [r2, #10]
 80098bc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	6959      	ldr	r1, [r3, #20]
 80098c2:	1d7b      	adds	r3, r7, #5
 80098c4:	33ff      	adds	r3, #255	@ 0xff
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	b29c      	uxth	r4, r3
 80098ca:	183b      	adds	r3, r7, r0
 80098cc:	881a      	ldrh	r2, [r3, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	0023      	movs	r3, r4
 80098d2:	f001 f945 	bl	800ab60 <USB_WritePMA>
            ep->xfer_buff += len;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	1d7b      	adds	r3, r7, #5
 80098dc:	33ff      	adds	r3, #255	@ 0xff
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	18d2      	adds	r2, r2, r3
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	6a1a      	ldr	r2, [r3, #32]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d908      	bls.n	8009904 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	6a1a      	ldr	r2, [r3, #32]
 80098f6:	1d7b      	adds	r3, r7, #5
 80098f8:	33ff      	adds	r3, #255	@ 0xff
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	1ad2      	subs	r2, r2, r3
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	621a      	str	r2, [r3, #32]
 8009902:	e007      	b.n	8009914 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	1d7a      	adds	r2, r7, #5
 800990a:	32ff      	adds	r2, #255	@ 0xff
 800990c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2200      	movs	r2, #0
 8009912:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	785b      	ldrb	r3, [r3, #1]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d000      	beq.n	800991e <USB_EPStartXfer+0x292>
 800991c:	e070      	b.n	8009a00 <USB_EPStartXfer+0x374>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	61bb      	str	r3, [r7, #24]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2250      	movs	r2, #80	@ 0x50
 8009926:	5a9b      	ldrh	r3, [r3, r2]
 8009928:	b29b      	uxth	r3, r3
 800992a:	001a      	movs	r2, r3
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	189b      	adds	r3, r3, r2
 8009930:	61bb      	str	r3, [r7, #24]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	00da      	lsls	r2, r3, #3
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	18d3      	adds	r3, r2, r3
 800993c:	4a48      	ldr	r2, [pc, #288]	@ (8009a60 <USB_EPStartXfer+0x3d4>)
 800993e:	4694      	mov	ip, r2
 8009940:	4463      	add	r3, ip
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	059b      	lsls	r3, r3, #22
 800994c:	0d9b      	lsrs	r3, r3, #22
 800994e:	b29a      	uxth	r2, r3
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	801a      	strh	r2, [r3, #0]
 8009954:	1d7b      	adds	r3, r7, #5
 8009956:	33ff      	adds	r3, #255	@ 0xff
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d108      	bne.n	8009970 <USB_EPStartXfer+0x2e4>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	4a42      	ldr	r2, [pc, #264]	@ (8009a70 <USB_EPStartXfer+0x3e4>)
 8009966:	4313      	orrs	r3, r2
 8009968:	b29a      	uxth	r2, r3
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	801a      	strh	r2, [r3, #0]
 800996e:	e064      	b.n	8009a3a <USB_EPStartXfer+0x3ae>
 8009970:	1d7b      	adds	r3, r7, #5
 8009972:	33ff      	adds	r3, #255	@ 0xff
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b3e      	cmp	r3, #62	@ 0x3e
 8009978:	d81f      	bhi.n	80099ba <USB_EPStartXfer+0x32e>
 800997a:	1d7b      	adds	r3, r7, #5
 800997c:	33ff      	adds	r3, #255	@ 0xff
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	085b      	lsrs	r3, r3, #1
 8009982:	21fc      	movs	r1, #252	@ 0xfc
 8009984:	187a      	adds	r2, r7, r1
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	1d7b      	adds	r3, r7, #5
 800998a:	33ff      	adds	r3, #255	@ 0xff
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2201      	movs	r2, #1
 8009990:	4013      	ands	r3, r2
 8009992:	d004      	beq.n	800999e <USB_EPStartXfer+0x312>
 8009994:	187b      	adds	r3, r7, r1
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3301      	adds	r3, #1
 800999a:	187a      	adds	r2, r7, r1
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	23fc      	movs	r3, #252	@ 0xfc
 80099a6:	18fb      	adds	r3, r7, r3
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	029b      	lsls	r3, r3, #10
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4313      	orrs	r3, r2
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	e03f      	b.n	8009a3a <USB_EPStartXfer+0x3ae>
 80099ba:	1d7b      	adds	r3, r7, #5
 80099bc:	33ff      	adds	r3, #255	@ 0xff
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	095b      	lsrs	r3, r3, #5
 80099c2:	21fc      	movs	r1, #252	@ 0xfc
 80099c4:	187a      	adds	r2, r7, r1
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	1d7b      	adds	r3, r7, #5
 80099ca:	33ff      	adds	r3, #255	@ 0xff
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	221f      	movs	r2, #31
 80099d0:	4013      	ands	r3, r2
 80099d2:	d104      	bne.n	80099de <USB_EPStartXfer+0x352>
 80099d4:	187b      	adds	r3, r7, r1
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3b01      	subs	r3, #1
 80099da:	187a      	adds	r2, r7, r1
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	23fc      	movs	r3, #252	@ 0xfc
 80099e6:	18fb      	adds	r3, r7, r3
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	029b      	lsls	r3, r3, #10
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	4313      	orrs	r3, r2
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	4a1e      	ldr	r2, [pc, #120]	@ (8009a70 <USB_EPStartXfer+0x3e4>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	801a      	strh	r2, [r3, #0]
 80099fe:	e01c      	b.n	8009a3a <USB_EPStartXfer+0x3ae>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	785b      	ldrb	r3, [r3, #1]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d118      	bne.n	8009a3a <USB_EPStartXfer+0x3ae>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	623b      	str	r3, [r7, #32]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2250      	movs	r2, #80	@ 0x50
 8009a10:	5a9b      	ldrh	r3, [r3, r2]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	001a      	movs	r2, r3
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	189b      	adds	r3, r3, r2
 8009a1a:	623b      	str	r3, [r7, #32]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	00da      	lsls	r2, r3, #3
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	18d3      	adds	r3, r2, r3
 8009a26:	4a0e      	ldr	r2, [pc, #56]	@ (8009a60 <USB_EPStartXfer+0x3d4>)
 8009a28:	4694      	mov	ip, r2
 8009a2a:	4463      	add	r3, ip
 8009a2c:	61fb      	str	r3, [r7, #28]
 8009a2e:	1d7b      	adds	r3, r7, #5
 8009a30:	33ff      	adds	r3, #255	@ 0xff
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a3a:	2076      	movs	r0, #118	@ 0x76
 8009a3c:	183b      	adds	r3, r7, r0
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	8912      	ldrh	r2, [r2, #8]
 8009a42:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	6959      	ldr	r1, [r3, #20]
 8009a48:	1d7b      	adds	r3, r7, #5
 8009a4a:	33ff      	adds	r3, #255	@ 0xff
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	b29c      	uxth	r4, r3
 8009a50:	183b      	adds	r3, r7, r0
 8009a52:	881a      	ldrh	r2, [r3, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	0023      	movs	r3, r4
 8009a58:	f001 f882 	bl	800ab60 <USB_WritePMA>
 8009a5c:	e329      	b.n	800a0b2 <USB_EPStartXfer+0xa26>
 8009a5e:	46c0      	nop			@ (mov r8, r8)
 8009a60:	00000402 	.word	0x00000402
 8009a64:	ffff8f8f 	.word	0xffff8f8f
 8009a68:	ffff8180 	.word	0xffff8180
 8009a6c:	00000406 	.word	0x00000406
 8009a70:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	785b      	ldrb	r3, [r3, #1]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d000      	beq.n	8009a7e <USB_EPStartXfer+0x3f2>
 8009a7c:	e070      	b.n	8009b60 <USB_EPStartXfer+0x4d4>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2250      	movs	r2, #80	@ 0x50
 8009a86:	5a9b      	ldrh	r3, [r3, r2]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	001a      	movs	r2, r3
 8009a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a8e:	189b      	adds	r3, r3, r2
 8009a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	00da      	lsls	r2, r3, #3
 8009a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a9a:	18d3      	adds	r3, r2, r3
 8009a9c:	4acd      	ldr	r2, [pc, #820]	@ (8009dd4 <USB_EPStartXfer+0x748>)
 8009a9e:	4694      	mov	ip, r2
 8009aa0:	4463      	add	r3, ip
 8009aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	059b      	lsls	r3, r3, #22
 8009aac:	0d9b      	lsrs	r3, r3, #22
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ab2:	801a      	strh	r2, [r3, #0]
 8009ab4:	1d7b      	adds	r3, r7, #5
 8009ab6:	33ff      	adds	r3, #255	@ 0xff
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d108      	bne.n	8009ad0 <USB_EPStartXfer+0x444>
 8009abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	4ac4      	ldr	r2, [pc, #784]	@ (8009dd8 <USB_EPStartXfer+0x74c>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009acc:	801a      	strh	r2, [r3, #0]
 8009ace:	e064      	b.n	8009b9a <USB_EPStartXfer+0x50e>
 8009ad0:	1d7b      	adds	r3, r7, #5
 8009ad2:	33ff      	adds	r3, #255	@ 0xff
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ad8:	d81f      	bhi.n	8009b1a <USB_EPStartXfer+0x48e>
 8009ada:	1d7b      	adds	r3, r7, #5
 8009adc:	33ff      	adds	r3, #255	@ 0xff
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	085b      	lsrs	r3, r3, #1
 8009ae2:	21f8      	movs	r1, #248	@ 0xf8
 8009ae4:	187a      	adds	r2, r7, r1
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	1d7b      	adds	r3, r7, #5
 8009aea:	33ff      	adds	r3, #255	@ 0xff
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2201      	movs	r2, #1
 8009af0:	4013      	ands	r3, r2
 8009af2:	d004      	beq.n	8009afe <USB_EPStartXfer+0x472>
 8009af4:	187b      	adds	r3, r7, r1
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3301      	adds	r3, #1
 8009afa:	187a      	adds	r2, r7, r1
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	23f8      	movs	r3, #248	@ 0xf8
 8009b06:	18fb      	adds	r3, r7, r3
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	029b      	lsls	r3, r3, #10
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	4313      	orrs	r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	e03f      	b.n	8009b9a <USB_EPStartXfer+0x50e>
 8009b1a:	1d7b      	adds	r3, r7, #5
 8009b1c:	33ff      	adds	r3, #255	@ 0xff
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	095b      	lsrs	r3, r3, #5
 8009b22:	21f8      	movs	r1, #248	@ 0xf8
 8009b24:	187a      	adds	r2, r7, r1
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	1d7b      	adds	r3, r7, #5
 8009b2a:	33ff      	adds	r3, #255	@ 0xff
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	221f      	movs	r2, #31
 8009b30:	4013      	ands	r3, r2
 8009b32:	d104      	bne.n	8009b3e <USB_EPStartXfer+0x4b2>
 8009b34:	187b      	adds	r3, r7, r1
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	187a      	adds	r2, r7, r1
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	23f8      	movs	r3, #248	@ 0xf8
 8009b46:	18fb      	adds	r3, r7, r3
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	029b      	lsls	r3, r3, #10
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4313      	orrs	r3, r2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	4aa0      	ldr	r2, [pc, #640]	@ (8009dd8 <USB_EPStartXfer+0x74c>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b5c:	801a      	strh	r2, [r3, #0]
 8009b5e:	e01c      	b.n	8009b9a <USB_EPStartXfer+0x50e>
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d118      	bne.n	8009b9a <USB_EPStartXfer+0x50e>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2250      	movs	r2, #80	@ 0x50
 8009b70:	5a9b      	ldrh	r3, [r3, r2]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	001a      	movs	r2, r3
 8009b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b78:	189b      	adds	r3, r3, r2
 8009b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	00da      	lsls	r2, r3, #3
 8009b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b84:	18d3      	adds	r3, r2, r3
 8009b86:	4a93      	ldr	r2, [pc, #588]	@ (8009dd4 <USB_EPStartXfer+0x748>)
 8009b88:	4694      	mov	ip, r2
 8009b8a:	4463      	add	r3, ip
 8009b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b8e:	1d7b      	adds	r3, r7, #5
 8009b90:	33ff      	adds	r3, #255	@ 0xff
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009b9a:	2076      	movs	r0, #118	@ 0x76
 8009b9c:	183b      	adds	r3, r7, r0
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	8912      	ldrh	r2, [r2, #8]
 8009ba2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	6959      	ldr	r1, [r3, #20]
 8009ba8:	1d7b      	adds	r3, r7, #5
 8009baa:	33ff      	adds	r3, #255	@ 0xff
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	b29c      	uxth	r4, r3
 8009bb0:	183b      	adds	r3, r7, r0
 8009bb2:	881a      	ldrh	r2, [r3, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	0023      	movs	r3, r4
 8009bb8:	f000 ffd2 	bl	800ab60 <USB_WritePMA>
            ep->xfer_buff += len;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	695a      	ldr	r2, [r3, #20]
 8009bc0:	1d7b      	adds	r3, r7, #5
 8009bc2:	33ff      	adds	r3, #255	@ 0xff
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	18d2      	adds	r2, r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	6a1a      	ldr	r2, [r3, #32]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d908      	bls.n	8009bea <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	6a1a      	ldr	r2, [r3, #32]
 8009bdc:	1d7b      	adds	r3, r7, #5
 8009bde:	33ff      	adds	r3, #255	@ 0xff
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	1ad2      	subs	r2, r2, r3
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	621a      	str	r2, [r3, #32]
 8009be8:	e007      	b.n	8009bfa <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	1d7a      	adds	r2, r7, #5
 8009bf0:	32ff      	adds	r2, #255	@ 0xff
 8009bf2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d000      	beq.n	8009c08 <USB_EPStartXfer+0x57c>
 8009c06:	e070      	b.n	8009cea <USB_EPStartXfer+0x65e>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2250      	movs	r2, #80	@ 0x50
 8009c10:	5a9b      	ldrh	r3, [r3, r2]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	001a      	movs	r2, r3
 8009c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c18:	189b      	adds	r3, r3, r2
 8009c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	00da      	lsls	r2, r3, #3
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	18d3      	adds	r3, r2, r3
 8009c26:	4a6d      	ldr	r2, [pc, #436]	@ (8009ddc <USB_EPStartXfer+0x750>)
 8009c28:	4694      	mov	ip, r2
 8009c2a:	4463      	add	r3, ip
 8009c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	059b      	lsls	r3, r3, #22
 8009c36:	0d9b      	lsrs	r3, r3, #22
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c3c:	801a      	strh	r2, [r3, #0]
 8009c3e:	1d7b      	adds	r3, r7, #5
 8009c40:	33ff      	adds	r3, #255	@ 0xff
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d108      	bne.n	8009c5a <USB_EPStartXfer+0x5ce>
 8009c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	4a62      	ldr	r2, [pc, #392]	@ (8009dd8 <USB_EPStartXfer+0x74c>)
 8009c50:	4313      	orrs	r3, r2
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c56:	801a      	strh	r2, [r3, #0]
 8009c58:	e062      	b.n	8009d20 <USB_EPStartXfer+0x694>
 8009c5a:	1d7b      	adds	r3, r7, #5
 8009c5c:	33ff      	adds	r3, #255	@ 0xff
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c62:	d81f      	bhi.n	8009ca4 <USB_EPStartXfer+0x618>
 8009c64:	1d7b      	adds	r3, r7, #5
 8009c66:	33ff      	adds	r3, #255	@ 0xff
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	085b      	lsrs	r3, r3, #1
 8009c6c:	21f4      	movs	r1, #244	@ 0xf4
 8009c6e:	187a      	adds	r2, r7, r1
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	1d7b      	adds	r3, r7, #5
 8009c74:	33ff      	adds	r3, #255	@ 0xff
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	d004      	beq.n	8009c88 <USB_EPStartXfer+0x5fc>
 8009c7e:	187b      	adds	r3, r7, r1
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3301      	adds	r3, #1
 8009c84:	187a      	adds	r2, r7, r1
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	23f4      	movs	r3, #244	@ 0xf4
 8009c90:	18fb      	adds	r3, r7, r3
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	029b      	lsls	r3, r3, #10
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca0:	801a      	strh	r2, [r3, #0]
 8009ca2:	e03d      	b.n	8009d20 <USB_EPStartXfer+0x694>
 8009ca4:	1d7b      	adds	r3, r7, #5
 8009ca6:	33ff      	adds	r3, #255	@ 0xff
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	095b      	lsrs	r3, r3, #5
 8009cac:	21f4      	movs	r1, #244	@ 0xf4
 8009cae:	187a      	adds	r2, r7, r1
 8009cb0:	6013      	str	r3, [r2, #0]
 8009cb2:	1d7b      	adds	r3, r7, #5
 8009cb4:	33ff      	adds	r3, #255	@ 0xff
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	221f      	movs	r2, #31
 8009cba:	4013      	ands	r3, r2
 8009cbc:	d104      	bne.n	8009cc8 <USB_EPStartXfer+0x63c>
 8009cbe:	187b      	adds	r3, r7, r1
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	187a      	adds	r2, r7, r1
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	23f4      	movs	r3, #244	@ 0xf4
 8009cd0:	18fb      	adds	r3, r7, r3
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	029b      	lsls	r3, r3, #10
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	4a3e      	ldr	r2, [pc, #248]	@ (8009dd8 <USB_EPStartXfer+0x74c>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce6:	801a      	strh	r2, [r3, #0]
 8009ce8:	e01a      	b.n	8009d20 <USB_EPStartXfer+0x694>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	785b      	ldrb	r3, [r3, #1]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d116      	bne.n	8009d20 <USB_EPStartXfer+0x694>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2250      	movs	r2, #80	@ 0x50
 8009cf6:	5a9b      	ldrh	r3, [r3, r2]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	001a      	movs	r2, r3
 8009cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cfe:	189b      	adds	r3, r3, r2
 8009d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	00da      	lsls	r2, r3, #3
 8009d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d0a:	18d3      	adds	r3, r2, r3
 8009d0c:	4a33      	ldr	r2, [pc, #204]	@ (8009ddc <USB_EPStartXfer+0x750>)
 8009d0e:	4694      	mov	ip, r2
 8009d10:	4463      	add	r3, ip
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d14:	1d7b      	adds	r3, r7, #5
 8009d16:	33ff      	adds	r3, #255	@ 0xff
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d20:	2076      	movs	r0, #118	@ 0x76
 8009d22:	183b      	adds	r3, r7, r0
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	8952      	ldrh	r2, [r2, #10]
 8009d28:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	6959      	ldr	r1, [r3, #20]
 8009d2e:	1d7b      	adds	r3, r7, #5
 8009d30:	33ff      	adds	r3, #255	@ 0xff
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	b29c      	uxth	r4, r3
 8009d36:	183b      	adds	r3, r7, r0
 8009d38:	881a      	ldrh	r2, [r3, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	0023      	movs	r3, r4
 8009d3e:	f000 ff0f 	bl	800ab60 <USB_WritePMA>
 8009d42:	e1b6      	b.n	800a0b2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	6a1b      	ldr	r3, [r3, #32]
 8009d48:	1d7a      	adds	r2, r7, #5
 8009d4a:	32ff      	adds	r2, #255	@ 0xff
 8009d4c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	18d3      	adds	r3, r2, r3
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	2062      	movs	r0, #98	@ 0x62
 8009d5e:	183b      	adds	r3, r7, r0
 8009d60:	491f      	ldr	r1, [pc, #124]	@ (8009de0 <USB_EPStartXfer+0x754>)
 8009d62:	400a      	ands	r2, r1
 8009d64:	801a      	strh	r2, [r3, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	18d3      	adds	r3, r2, r3
 8009d70:	183a      	adds	r2, r7, r0
 8009d72:	8812      	ldrh	r2, [r2, #0]
 8009d74:	491b      	ldr	r1, [pc, #108]	@ (8009de4 <USB_EPStartXfer+0x758>)
 8009d76:	430a      	orrs	r2, r1
 8009d78:	b292      	uxth	r2, r2
 8009d7a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2250      	movs	r2, #80	@ 0x50
 8009d84:	5a9b      	ldrh	r3, [r3, r2]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	001a      	movs	r2, r3
 8009d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d8c:	189b      	adds	r3, r3, r2
 8009d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	00da      	lsls	r2, r3, #3
 8009d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d98:	18d3      	adds	r3, r2, r3
 8009d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8009dd4 <USB_EPStartXfer+0x748>)
 8009d9c:	4694      	mov	ip, r2
 8009d9e:	4463      	add	r3, ip
 8009da0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009da2:	1d7b      	adds	r3, r7, #5
 8009da4:	33ff      	adds	r3, #255	@ 0xff
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009dac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009dae:	2076      	movs	r0, #118	@ 0x76
 8009db0:	183b      	adds	r3, r7, r0
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	8912      	ldrh	r2, [r2, #8]
 8009db6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	6959      	ldr	r1, [r3, #20]
 8009dbc:	1d7b      	adds	r3, r7, #5
 8009dbe:	33ff      	adds	r3, #255	@ 0xff
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	b29c      	uxth	r4, r3
 8009dc4:	183b      	adds	r3, r7, r0
 8009dc6:	881a      	ldrh	r2, [r3, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	0023      	movs	r3, r4
 8009dcc:	f000 fec8 	bl	800ab60 <USB_WritePMA>
 8009dd0:	e16f      	b.n	800a0b2 <USB_EPStartXfer+0xa26>
 8009dd2:	46c0      	nop			@ (mov r8, r8)
 8009dd4:	00000402 	.word	0x00000402
 8009dd8:	ffff8000 	.word	0xffff8000
 8009ddc:	00000406 	.word	0x00000406
 8009de0:	ffff8e8f 	.word	0xffff8e8f
 8009de4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	6a1a      	ldr	r2, [r3, #32]
 8009dec:	1d7b      	adds	r3, r7, #5
 8009dee:	33ff      	adds	r3, #255	@ 0xff
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	1ad2      	subs	r2, r2, r3
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	18d3      	adds	r3, r2, r3
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	001a      	movs	r2, r3
 8009e08:	2340      	movs	r3, #64	@ 0x40
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	d100      	bne.n	8009e10 <USB_EPStartXfer+0x784>
 8009e0e:	e0a4      	b.n	8009f5a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	785b      	ldrb	r3, [r3, #1]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d000      	beq.n	8009e1e <USB_EPStartXfer+0x792>
 8009e1c:	e070      	b.n	8009f00 <USB_EPStartXfer+0x874>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2250      	movs	r2, #80	@ 0x50
 8009e26:	5a9b      	ldrh	r3, [r3, r2]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	001a      	movs	r2, r3
 8009e2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e2e:	189b      	adds	r3, r3, r2
 8009e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	00da      	lsls	r2, r3, #3
 8009e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e3a:	18d3      	adds	r3, r2, r3
 8009e3c:	4ada      	ldr	r2, [pc, #872]	@ (800a1a8 <USB_EPStartXfer+0xb1c>)
 8009e3e:	4694      	mov	ip, r2
 8009e40:	4463      	add	r3, ip
 8009e42:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	059b      	lsls	r3, r3, #22
 8009e4c:	0d9b      	lsrs	r3, r3, #22
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e52:	801a      	strh	r2, [r3, #0]
 8009e54:	1d7b      	adds	r3, r7, #5
 8009e56:	33ff      	adds	r3, #255	@ 0xff
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d108      	bne.n	8009e70 <USB_EPStartXfer+0x7e4>
 8009e5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	4ad1      	ldr	r2, [pc, #836]	@ (800a1ac <USB_EPStartXfer+0xb20>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	e062      	b.n	8009f36 <USB_EPStartXfer+0x8aa>
 8009e70:	1d7b      	adds	r3, r7, #5
 8009e72:	33ff      	adds	r3, #255	@ 0xff
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e78:	d81f      	bhi.n	8009eba <USB_EPStartXfer+0x82e>
 8009e7a:	1d7b      	adds	r3, r7, #5
 8009e7c:	33ff      	adds	r3, #255	@ 0xff
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	21f0      	movs	r1, #240	@ 0xf0
 8009e84:	187a      	adds	r2, r7, r1
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	1d7b      	adds	r3, r7, #5
 8009e8a:	33ff      	adds	r3, #255	@ 0xff
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	4013      	ands	r3, r2
 8009e92:	d004      	beq.n	8009e9e <USB_EPStartXfer+0x812>
 8009e94:	187b      	adds	r3, r7, r1
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	187a      	adds	r2, r7, r1
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	23f0      	movs	r3, #240	@ 0xf0
 8009ea6:	18fb      	adds	r3, r7, r3
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	029b      	lsls	r3, r3, #10
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eb6:	801a      	strh	r2, [r3, #0]
 8009eb8:	e03d      	b.n	8009f36 <USB_EPStartXfer+0x8aa>
 8009eba:	1d7b      	adds	r3, r7, #5
 8009ebc:	33ff      	adds	r3, #255	@ 0xff
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	095b      	lsrs	r3, r3, #5
 8009ec2:	21f0      	movs	r1, #240	@ 0xf0
 8009ec4:	187a      	adds	r2, r7, r1
 8009ec6:	6013      	str	r3, [r2, #0]
 8009ec8:	1d7b      	adds	r3, r7, #5
 8009eca:	33ff      	adds	r3, #255	@ 0xff
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	221f      	movs	r2, #31
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	d104      	bne.n	8009ede <USB_EPStartXfer+0x852>
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	187a      	adds	r2, r7, r1
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	23f0      	movs	r3, #240	@ 0xf0
 8009ee6:	18fb      	adds	r3, r7, r3
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	029b      	lsls	r3, r3, #10
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	4aad      	ldr	r2, [pc, #692]	@ (800a1ac <USB_EPStartXfer+0xb20>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009efc:	801a      	strh	r2, [r3, #0]
 8009efe:	e01a      	b.n	8009f36 <USB_EPStartXfer+0x8aa>
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	785b      	ldrb	r3, [r3, #1]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d116      	bne.n	8009f36 <USB_EPStartXfer+0x8aa>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2250      	movs	r2, #80	@ 0x50
 8009f0c:	5a9b      	ldrh	r3, [r3, r2]
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	001a      	movs	r2, r3
 8009f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f14:	189b      	adds	r3, r3, r2
 8009f16:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	00da      	lsls	r2, r3, #3
 8009f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f20:	18d3      	adds	r3, r2, r3
 8009f22:	4aa1      	ldr	r2, [pc, #644]	@ (800a1a8 <USB_EPStartXfer+0xb1c>)
 8009f24:	4694      	mov	ip, r2
 8009f26:	4463      	add	r3, ip
 8009f28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f2a:	1d7b      	adds	r3, r7, #5
 8009f2c:	33ff      	adds	r3, #255	@ 0xff
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009f36:	2076      	movs	r0, #118	@ 0x76
 8009f38:	183b      	adds	r3, r7, r0
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	8952      	ldrh	r2, [r2, #10]
 8009f3e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6959      	ldr	r1, [r3, #20]
 8009f44:	1d7b      	adds	r3, r7, #5
 8009f46:	33ff      	adds	r3, #255	@ 0xff
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	b29c      	uxth	r4, r3
 8009f4c:	183b      	adds	r3, r7, r0
 8009f4e:	881a      	ldrh	r2, [r3, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	0023      	movs	r3, r4
 8009f54:	f000 fe04 	bl	800ab60 <USB_WritePMA>
 8009f58:	e0ab      	b.n	800a0b2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	785b      	ldrb	r3, [r3, #1]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d000      	beq.n	8009f64 <USB_EPStartXfer+0x8d8>
 8009f62:	e070      	b.n	800a046 <USB_EPStartXfer+0x9ba>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2250      	movs	r2, #80	@ 0x50
 8009f6c:	5a9b      	ldrh	r3, [r3, r2]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	001a      	movs	r2, r3
 8009f72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f74:	189b      	adds	r3, r3, r2
 8009f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	00da      	lsls	r2, r3, #3
 8009f7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f80:	18d3      	adds	r3, r2, r3
 8009f82:	4a8b      	ldr	r2, [pc, #556]	@ (800a1b0 <USB_EPStartXfer+0xb24>)
 8009f84:	4694      	mov	ip, r2
 8009f86:	4463      	add	r3, ip
 8009f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	059b      	lsls	r3, r3, #22
 8009f92:	0d9b      	lsrs	r3, r3, #22
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f98:	801a      	strh	r2, [r3, #0]
 8009f9a:	1d7b      	adds	r3, r7, #5
 8009f9c:	33ff      	adds	r3, #255	@ 0xff
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d108      	bne.n	8009fb6 <USB_EPStartXfer+0x92a>
 8009fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4a80      	ldr	r2, [pc, #512]	@ (800a1ac <USB_EPStartXfer+0xb20>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fb2:	801a      	strh	r2, [r3, #0]
 8009fb4:	e06c      	b.n	800a090 <USB_EPStartXfer+0xa04>
 8009fb6:	1d7b      	adds	r3, r7, #5
 8009fb8:	33ff      	adds	r3, #255	@ 0xff
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fbe:	d81f      	bhi.n	800a000 <USB_EPStartXfer+0x974>
 8009fc0:	1d7b      	adds	r3, r7, #5
 8009fc2:	33ff      	adds	r3, #255	@ 0xff
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	085b      	lsrs	r3, r3, #1
 8009fc8:	21ec      	movs	r1, #236	@ 0xec
 8009fca:	187a      	adds	r2, r7, r1
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	1d7b      	adds	r3, r7, #5
 8009fd0:	33ff      	adds	r3, #255	@ 0xff
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	d004      	beq.n	8009fe4 <USB_EPStartXfer+0x958>
 8009fda:	187b      	adds	r3, r7, r1
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	187a      	adds	r2, r7, r1
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	23ec      	movs	r3, #236	@ 0xec
 8009fec:	18fb      	adds	r3, r7, r3
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	029b      	lsls	r3, r3, #10
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ffc:	801a      	strh	r2, [r3, #0]
 8009ffe:	e047      	b.n	800a090 <USB_EPStartXfer+0xa04>
 800a000:	1d7b      	adds	r3, r7, #5
 800a002:	33ff      	adds	r3, #255	@ 0xff
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	21ec      	movs	r1, #236	@ 0xec
 800a00a:	187a      	adds	r2, r7, r1
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	1d7b      	adds	r3, r7, #5
 800a010:	33ff      	adds	r3, #255	@ 0xff
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	221f      	movs	r2, #31
 800a016:	4013      	ands	r3, r2
 800a018:	d104      	bne.n	800a024 <USB_EPStartXfer+0x998>
 800a01a:	187b      	adds	r3, r7, r1
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3b01      	subs	r3, #1
 800a020:	187a      	adds	r2, r7, r1
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29a      	uxth	r2, r3
 800a02a:	23ec      	movs	r3, #236	@ 0xec
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	b29b      	uxth	r3, r3
 800a032:	029b      	lsls	r3, r3, #10
 800a034:	b29b      	uxth	r3, r3
 800a036:	4313      	orrs	r3, r2
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4a5c      	ldr	r2, [pc, #368]	@ (800a1ac <USB_EPStartXfer+0xb20>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a042:	801a      	strh	r2, [r3, #0]
 800a044:	e024      	b.n	800a090 <USB_EPStartXfer+0xa04>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	785b      	ldrb	r3, [r3, #1]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d120      	bne.n	800a090 <USB_EPStartXfer+0xa04>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2184      	movs	r1, #132	@ 0x84
 800a052:	187a      	adds	r2, r7, r1
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2250      	movs	r2, #80	@ 0x50
 800a05a:	5a9b      	ldrh	r3, [r3, r2]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	001a      	movs	r2, r3
 800a060:	187b      	adds	r3, r7, r1
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	189b      	adds	r3, r3, r2
 800a066:	187a      	adds	r2, r7, r1
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	00da      	lsls	r2, r3, #3
 800a070:	187b      	adds	r3, r7, r1
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	18d3      	adds	r3, r2, r3
 800a076:	4a4e      	ldr	r2, [pc, #312]	@ (800a1b0 <USB_EPStartXfer+0xb24>)
 800a078:	4694      	mov	ip, r2
 800a07a:	4463      	add	r3, ip
 800a07c:	2180      	movs	r1, #128	@ 0x80
 800a07e:	187a      	adds	r2, r7, r1
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	1d7b      	adds	r3, r7, #5
 800a084:	33ff      	adds	r3, #255	@ 0xff
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	b29a      	uxth	r2, r3
 800a08a:	187b      	adds	r3, r7, r1
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a090:	2076      	movs	r0, #118	@ 0x76
 800a092:	183b      	adds	r3, r7, r0
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	8912      	ldrh	r2, [r2, #8]
 800a098:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	6959      	ldr	r1, [r3, #20]
 800a09e:	1d7b      	adds	r3, r7, #5
 800a0a0:	33ff      	adds	r3, #255	@ 0xff
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	b29c      	uxth	r4, r3
 800a0a6:	183b      	adds	r3, r7, r0
 800a0a8:	881a      	ldrh	r2, [r3, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	0023      	movs	r3, r4
 800a0ae:	f000 fd57 	bl	800ab60 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	18d3      	adds	r3, r2, r3
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	200a      	movs	r0, #10
 800a0c2:	183b      	adds	r3, r7, r0
 800a0c4:	493b      	ldr	r1, [pc, #236]	@ (800a1b4 <USB_EPStartXfer+0xb28>)
 800a0c6:	400a      	ands	r2, r1
 800a0c8:	801a      	strh	r2, [r3, #0]
 800a0ca:	183b      	adds	r3, r7, r0
 800a0cc:	183a      	adds	r2, r7, r0
 800a0ce:	8812      	ldrh	r2, [r2, #0]
 800a0d0:	2110      	movs	r1, #16
 800a0d2:	404a      	eors	r2, r1
 800a0d4:	801a      	strh	r2, [r3, #0]
 800a0d6:	183b      	adds	r3, r7, r0
 800a0d8:	183a      	adds	r2, r7, r0
 800a0da:	8812      	ldrh	r2, [r2, #0]
 800a0dc:	2120      	movs	r1, #32
 800a0de:	404a      	eors	r2, r1
 800a0e0:	801a      	strh	r2, [r3, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	18d3      	adds	r3, r2, r3
 800a0ec:	183a      	adds	r2, r7, r0
 800a0ee:	8812      	ldrh	r2, [r2, #0]
 800a0f0:	4931      	ldr	r1, [pc, #196]	@ (800a1b8 <USB_EPStartXfer+0xb2c>)
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	b292      	uxth	r2, r2
 800a0f6:	801a      	strh	r2, [r3, #0]
 800a0f8:	f000 fbe9 	bl	800a8ce <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	7b1b      	ldrb	r3, [r3, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d000      	beq.n	800a106 <USB_EPStartXfer+0xa7a>
 800a104:	e0a8      	b.n	800a258 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	699a      	ldr	r2, [r3, #24]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d90d      	bls.n	800a12e <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	1d7a      	adds	r2, r7, #5
 800a118:	32ff      	adds	r2, #255	@ 0xff
 800a11a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	1d7b      	adds	r3, r7, #5
 800a122:	33ff      	adds	r3, #255	@ 0xff
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	1ad2      	subs	r2, r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	619a      	str	r2, [r3, #24]
 800a12c:	e007      	b.n	800a13e <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	1d7a      	adds	r2, r7, #5
 800a134:	32ff      	adds	r2, #255	@ 0xff
 800a136:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2200      	movs	r2, #0
 800a13c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2190      	movs	r1, #144	@ 0x90
 800a142:	187a      	adds	r2, r7, r1
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2250      	movs	r2, #80	@ 0x50
 800a14a:	5a9b      	ldrh	r3, [r3, r2]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	001a      	movs	r2, r3
 800a150:	187b      	adds	r3, r7, r1
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	189b      	adds	r3, r3, r2
 800a156:	187a      	adds	r2, r7, r1
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	00da      	lsls	r2, r3, #3
 800a160:	187b      	adds	r3, r7, r1
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	18d3      	adds	r3, r2, r3
 800a166:	4a10      	ldr	r2, [pc, #64]	@ (800a1a8 <USB_EPStartXfer+0xb1c>)
 800a168:	4694      	mov	ip, r2
 800a16a:	4463      	add	r3, ip
 800a16c:	218c      	movs	r1, #140	@ 0x8c
 800a16e:	187a      	adds	r2, r7, r1
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	187b      	adds	r3, r7, r1
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	059b      	lsls	r3, r3, #22
 800a17c:	0d9b      	lsrs	r3, r3, #22
 800a17e:	b29a      	uxth	r2, r3
 800a180:	187b      	adds	r3, r7, r1
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	1d7b      	adds	r3, r7, #5
 800a188:	33ff      	adds	r3, #255	@ 0xff
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d115      	bne.n	800a1bc <USB_EPStartXfer+0xb30>
 800a190:	187b      	adds	r3, r7, r1
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	b29b      	uxth	r3, r3
 800a198:	4a04      	ldr	r2, [pc, #16]	@ (800a1ac <USB_EPStartXfer+0xb20>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	187b      	adds	r3, r7, r1
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	801a      	strh	r2, [r3, #0]
 800a1a4:	e36e      	b.n	800a884 <USB_EPStartXfer+0x11f8>
 800a1a6:	46c0      	nop			@ (mov r8, r8)
 800a1a8:	00000406 	.word	0x00000406
 800a1ac:	ffff8000 	.word	0xffff8000
 800a1b0:	00000402 	.word	0x00000402
 800a1b4:	ffff8fbf 	.word	0xffff8fbf
 800a1b8:	ffff8080 	.word	0xffff8080
 800a1bc:	1d7b      	adds	r3, r7, #5
 800a1be:	33ff      	adds	r3, #255	@ 0xff
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1c4:	d822      	bhi.n	800a20c <USB_EPStartXfer+0xb80>
 800a1c6:	1d7b      	adds	r3, r7, #5
 800a1c8:	33ff      	adds	r3, #255	@ 0xff
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	085b      	lsrs	r3, r3, #1
 800a1ce:	21e8      	movs	r1, #232	@ 0xe8
 800a1d0:	187a      	adds	r2, r7, r1
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	1d7b      	adds	r3, r7, #5
 800a1d6:	33ff      	adds	r3, #255	@ 0xff
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4013      	ands	r3, r2
 800a1de:	d004      	beq.n	800a1ea <USB_EPStartXfer+0xb5e>
 800a1e0:	187b      	adds	r3, r7, r1
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	187a      	adds	r2, r7, r1
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	218c      	movs	r1, #140	@ 0x8c
 800a1ec:	187b      	adds	r3, r7, r1
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	23e8      	movs	r3, #232	@ 0xe8
 800a1f6:	18fb      	adds	r3, r7, r3
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	029b      	lsls	r3, r3, #10
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	4313      	orrs	r3, r2
 800a202:	b29a      	uxth	r2, r3
 800a204:	187b      	adds	r3, r7, r1
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	801a      	strh	r2, [r3, #0]
 800a20a:	e33b      	b.n	800a884 <USB_EPStartXfer+0x11f8>
 800a20c:	1d7b      	adds	r3, r7, #5
 800a20e:	33ff      	adds	r3, #255	@ 0xff
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	095b      	lsrs	r3, r3, #5
 800a214:	21e8      	movs	r1, #232	@ 0xe8
 800a216:	187a      	adds	r2, r7, r1
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	1d7b      	adds	r3, r7, #5
 800a21c:	33ff      	adds	r3, #255	@ 0xff
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	221f      	movs	r2, #31
 800a222:	4013      	ands	r3, r2
 800a224:	d104      	bne.n	800a230 <USB_EPStartXfer+0xba4>
 800a226:	187b      	adds	r3, r7, r1
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	187a      	adds	r2, r7, r1
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	218c      	movs	r1, #140	@ 0x8c
 800a232:	187b      	adds	r3, r7, r1
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	b29a      	uxth	r2, r3
 800a23a:	23e8      	movs	r3, #232	@ 0xe8
 800a23c:	18fb      	adds	r3, r7, r3
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	b29b      	uxth	r3, r3
 800a242:	029b      	lsls	r3, r3, #10
 800a244:	b29b      	uxth	r3, r3
 800a246:	4313      	orrs	r3, r2
 800a248:	b29b      	uxth	r3, r3
 800a24a:	4ad7      	ldr	r2, [pc, #860]	@ (800a5a8 <USB_EPStartXfer+0xf1c>)
 800a24c:	4313      	orrs	r3, r2
 800a24e:	b29a      	uxth	r2, r3
 800a250:	187b      	adds	r3, r7, r1
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	801a      	strh	r2, [r3, #0]
 800a256:	e315      	b.n	800a884 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	78db      	ldrb	r3, [r3, #3]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d000      	beq.n	800a262 <USB_EPStartXfer+0xbd6>
 800a260:	e189      	b.n	800a576 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	785b      	ldrb	r3, [r3, #1]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d000      	beq.n	800a26c <USB_EPStartXfer+0xbe0>
 800a26a:	e07b      	b.n	800a364 <USB_EPStartXfer+0xcd8>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	21ac      	movs	r1, #172	@ 0xac
 800a270:	187a      	adds	r2, r7, r1
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2250      	movs	r2, #80	@ 0x50
 800a278:	5a9b      	ldrh	r3, [r3, r2]
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	001a      	movs	r2, r3
 800a27e:	187b      	adds	r3, r7, r1
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	189b      	adds	r3, r3, r2
 800a284:	187a      	adds	r2, r7, r1
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	00da      	lsls	r2, r3, #3
 800a28e:	187b      	adds	r3, r7, r1
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	18d3      	adds	r3, r2, r3
 800a294:	4ac5      	ldr	r2, [pc, #788]	@ (800a5ac <USB_EPStartXfer+0xf20>)
 800a296:	4694      	mov	ip, r2
 800a298:	4463      	add	r3, ip
 800a29a:	21a8      	movs	r1, #168	@ 0xa8
 800a29c:	187a      	adds	r2, r7, r1
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	187b      	adds	r3, r7, r1
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	059b      	lsls	r3, r3, #22
 800a2aa:	0d9b      	lsrs	r3, r3, #22
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	187b      	adds	r3, r7, r1
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	801a      	strh	r2, [r3, #0]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10a      	bne.n	800a2d2 <USB_EPStartXfer+0xc46>
 800a2bc:	187b      	adds	r3, r7, r1
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	4ab8      	ldr	r2, [pc, #736]	@ (800a5a8 <USB_EPStartXfer+0xf1c>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	187b      	adds	r3, r7, r1
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	e06c      	b.n	800a3ac <USB_EPStartXfer+0xd20>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2d8:	d820      	bhi.n	800a31c <USB_EPStartXfer+0xc90>
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	21e4      	movs	r1, #228	@ 0xe4
 800a2e2:	187a      	adds	r2, r7, r1
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	d004      	beq.n	800a2fa <USB_EPStartXfer+0xc6e>
 800a2f0:	187b      	adds	r3, r7, r1
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	187a      	adds	r2, r7, r1
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	21a8      	movs	r1, #168	@ 0xa8
 800a2fc:	187b      	adds	r3, r7, r1
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	b29a      	uxth	r2, r3
 800a304:	23e4      	movs	r3, #228	@ 0xe4
 800a306:	18fb      	adds	r3, r7, r3
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	029b      	lsls	r3, r3, #10
 800a30e:	b29b      	uxth	r3, r3
 800a310:	4313      	orrs	r3, r2
 800a312:	b29a      	uxth	r2, r3
 800a314:	187b      	adds	r3, r7, r1
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	801a      	strh	r2, [r3, #0]
 800a31a:	e047      	b.n	800a3ac <USB_EPStartXfer+0xd20>
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	095b      	lsrs	r3, r3, #5
 800a322:	21e4      	movs	r1, #228	@ 0xe4
 800a324:	187a      	adds	r2, r7, r1
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	221f      	movs	r2, #31
 800a32e:	4013      	ands	r3, r2
 800a330:	d104      	bne.n	800a33c <USB_EPStartXfer+0xcb0>
 800a332:	187b      	adds	r3, r7, r1
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3b01      	subs	r3, #1
 800a338:	187a      	adds	r2, r7, r1
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	21a8      	movs	r1, #168	@ 0xa8
 800a33e:	187b      	adds	r3, r7, r1
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	b29a      	uxth	r2, r3
 800a346:	23e4      	movs	r3, #228	@ 0xe4
 800a348:	18fb      	adds	r3, r7, r3
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	029b      	lsls	r3, r3, #10
 800a350:	b29b      	uxth	r3, r3
 800a352:	4313      	orrs	r3, r2
 800a354:	b29b      	uxth	r3, r3
 800a356:	4a94      	ldr	r2, [pc, #592]	@ (800a5a8 <USB_EPStartXfer+0xf1c>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	187b      	adds	r3, r7, r1
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	801a      	strh	r2, [r3, #0]
 800a362:	e023      	b.n	800a3ac <USB_EPStartXfer+0xd20>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d11f      	bne.n	800a3ac <USB_EPStartXfer+0xd20>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	21b4      	movs	r1, #180	@ 0xb4
 800a370:	187a      	adds	r2, r7, r1
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2250      	movs	r2, #80	@ 0x50
 800a378:	5a9b      	ldrh	r3, [r3, r2]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	001a      	movs	r2, r3
 800a37e:	187b      	adds	r3, r7, r1
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	189b      	adds	r3, r3, r2
 800a384:	187a      	adds	r2, r7, r1
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	00da      	lsls	r2, r3, #3
 800a38e:	187b      	adds	r3, r7, r1
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	18d3      	adds	r3, r2, r3
 800a394:	4a85      	ldr	r2, [pc, #532]	@ (800a5ac <USB_EPStartXfer+0xf20>)
 800a396:	4694      	mov	ip, r2
 800a398:	4463      	add	r3, ip
 800a39a:	21b0      	movs	r1, #176	@ 0xb0
 800a39c:	187a      	adds	r2, r7, r1
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	187b      	adds	r3, r7, r1
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	801a      	strh	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	22a4      	movs	r2, #164	@ 0xa4
 800a3b0:	18ba      	adds	r2, r7, r2
 800a3b2:	6013      	str	r3, [r2, #0]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d000      	beq.n	800a3be <USB_EPStartXfer+0xd32>
 800a3bc:	e07b      	b.n	800a4b6 <USB_EPStartXfer+0xe2a>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	219c      	movs	r1, #156	@ 0x9c
 800a3c2:	187a      	adds	r2, r7, r1
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2250      	movs	r2, #80	@ 0x50
 800a3ca:	5a9b      	ldrh	r3, [r3, r2]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	001a      	movs	r2, r3
 800a3d0:	187b      	adds	r3, r7, r1
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	189b      	adds	r3, r3, r2
 800a3d6:	187a      	adds	r2, r7, r1
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	00da      	lsls	r2, r3, #3
 800a3e0:	187b      	adds	r3, r7, r1
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	18d3      	adds	r3, r2, r3
 800a3e6:	4a72      	ldr	r2, [pc, #456]	@ (800a5b0 <USB_EPStartXfer+0xf24>)
 800a3e8:	4694      	mov	ip, r2
 800a3ea:	4463      	add	r3, ip
 800a3ec:	2198      	movs	r1, #152	@ 0x98
 800a3ee:	187a      	adds	r2, r7, r1
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	187b      	adds	r3, r7, r1
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	059b      	lsls	r3, r3, #22
 800a3fc:	0d9b      	lsrs	r3, r3, #22
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	187b      	adds	r3, r7, r1
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10a      	bne.n	800a424 <USB_EPStartXfer+0xd98>
 800a40e:	187b      	adds	r3, r7, r1
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	b29b      	uxth	r3, r3
 800a416:	4a64      	ldr	r2, [pc, #400]	@ (800a5a8 <USB_EPStartXfer+0xf1c>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	187b      	adds	r3, r7, r1
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	801a      	strh	r2, [r3, #0]
 800a422:	e069      	b.n	800a4f8 <USB_EPStartXfer+0xe6c>
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	2b3e      	cmp	r3, #62	@ 0x3e
 800a42a:	d820      	bhi.n	800a46e <USB_EPStartXfer+0xde2>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	085b      	lsrs	r3, r3, #1
 800a432:	21e0      	movs	r1, #224	@ 0xe0
 800a434:	187a      	adds	r2, r7, r1
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2201      	movs	r2, #1
 800a43e:	4013      	ands	r3, r2
 800a440:	d004      	beq.n	800a44c <USB_EPStartXfer+0xdc0>
 800a442:	187b      	adds	r3, r7, r1
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3301      	adds	r3, #1
 800a448:	187a      	adds	r2, r7, r1
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	2198      	movs	r1, #152	@ 0x98
 800a44e:	187b      	adds	r3, r7, r1
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	b29a      	uxth	r2, r3
 800a456:	23e0      	movs	r3, #224	@ 0xe0
 800a458:	18fb      	adds	r3, r7, r3
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	029b      	lsls	r3, r3, #10
 800a460:	b29b      	uxth	r3, r3
 800a462:	4313      	orrs	r3, r2
 800a464:	b29a      	uxth	r2, r3
 800a466:	187b      	adds	r3, r7, r1
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	e044      	b.n	800a4f8 <USB_EPStartXfer+0xe6c>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	095b      	lsrs	r3, r3, #5
 800a474:	21e0      	movs	r1, #224	@ 0xe0
 800a476:	187a      	adds	r2, r7, r1
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	221f      	movs	r2, #31
 800a480:	4013      	ands	r3, r2
 800a482:	d104      	bne.n	800a48e <USB_EPStartXfer+0xe02>
 800a484:	187b      	adds	r3, r7, r1
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3b01      	subs	r3, #1
 800a48a:	187a      	adds	r2, r7, r1
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	2198      	movs	r1, #152	@ 0x98
 800a490:	187b      	adds	r3, r7, r1
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	b29a      	uxth	r2, r3
 800a498:	23e0      	movs	r3, #224	@ 0xe0
 800a49a:	18fb      	adds	r3, r7, r3
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	029b      	lsls	r3, r3, #10
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	4a3f      	ldr	r2, [pc, #252]	@ (800a5a8 <USB_EPStartXfer+0xf1c>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	187b      	adds	r3, r7, r1
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	801a      	strh	r2, [r3, #0]
 800a4b4:	e020      	b.n	800a4f8 <USB_EPStartXfer+0xe6c>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d11c      	bne.n	800a4f8 <USB_EPStartXfer+0xe6c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2250      	movs	r2, #80	@ 0x50
 800a4c2:	5a9b      	ldrh	r3, [r3, r2]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	001a      	movs	r2, r3
 800a4c8:	21a4      	movs	r1, #164	@ 0xa4
 800a4ca:	187b      	adds	r3, r7, r1
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	189b      	adds	r3, r3, r2
 800a4d0:	187a      	adds	r2, r7, r1
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	00da      	lsls	r2, r3, #3
 800a4da:	187b      	adds	r3, r7, r1
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	18d3      	adds	r3, r2, r3
 800a4e0:	4a33      	ldr	r2, [pc, #204]	@ (800a5b0 <USB_EPStartXfer+0xf24>)
 800a4e2:	4694      	mov	ip, r2
 800a4e4:	4463      	add	r3, ip
 800a4e6:	21a0      	movs	r1, #160	@ 0xa0
 800a4e8:	187a      	adds	r2, r7, r1
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	187b      	adds	r3, r7, r1
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d100      	bne.n	800a502 <USB_EPStartXfer+0xe76>
 800a500:	e1c0      	b.n	800a884 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	18d2      	adds	r2, r2, r3
 800a50c:	2196      	movs	r1, #150	@ 0x96
 800a50e:	187b      	adds	r3, r7, r1
 800a510:	8812      	ldrh	r2, [r2, #0]
 800a512:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a514:	187b      	adds	r3, r7, r1
 800a516:	881a      	ldrh	r2, [r3, #0]
 800a518:	2380      	movs	r3, #128	@ 0x80
 800a51a:	01db      	lsls	r3, r3, #7
 800a51c:	4013      	ands	r3, r2
 800a51e:	d004      	beq.n	800a52a <USB_EPStartXfer+0xe9e>
 800a520:	187b      	adds	r3, r7, r1
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	2240      	movs	r2, #64	@ 0x40
 800a526:	4013      	ands	r3, r2
 800a528:	d10d      	bne.n	800a546 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a52a:	2196      	movs	r1, #150	@ 0x96
 800a52c:	187b      	adds	r3, r7, r1
 800a52e:	881a      	ldrh	r2, [r3, #0]
 800a530:	2380      	movs	r3, #128	@ 0x80
 800a532:	01db      	lsls	r3, r3, #7
 800a534:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a536:	d000      	beq.n	800a53a <USB_EPStartXfer+0xeae>
 800a538:	e1a4      	b.n	800a884 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a53a:	187b      	adds	r3, r7, r1
 800a53c:	881b      	ldrh	r3, [r3, #0]
 800a53e:	2240      	movs	r2, #64	@ 0x40
 800a540:	4013      	ands	r3, r2
 800a542:	d000      	beq.n	800a546 <USB_EPStartXfer+0xeba>
 800a544:	e19e      	b.n	800a884 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	18d3      	adds	r3, r2, r3
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	b29a      	uxth	r2, r3
 800a554:	2094      	movs	r0, #148	@ 0x94
 800a556:	183b      	adds	r3, r7, r0
 800a558:	4916      	ldr	r1, [pc, #88]	@ (800a5b4 <USB_EPStartXfer+0xf28>)
 800a55a:	400a      	ands	r2, r1
 800a55c:	801a      	strh	r2, [r3, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	18d3      	adds	r3, r2, r3
 800a568:	183a      	adds	r2, r7, r0
 800a56a:	8812      	ldrh	r2, [r2, #0]
 800a56c:	4912      	ldr	r1, [pc, #72]	@ (800a5b8 <USB_EPStartXfer+0xf2c>)
 800a56e:	430a      	orrs	r2, r1
 800a570:	b292      	uxth	r2, r2
 800a572:	801a      	strh	r2, [r3, #0]
 800a574:	e186      	b.n	800a884 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	78db      	ldrb	r3, [r3, #3]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d000      	beq.n	800a580 <USB_EPStartXfer+0xef4>
 800a57e:	e17f      	b.n	800a880 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	699a      	ldr	r2, [r3, #24]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d917      	bls.n	800a5bc <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	1d7a      	adds	r2, r7, #5
 800a592:	32ff      	adds	r2, #255	@ 0xff
 800a594:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	699a      	ldr	r2, [r3, #24]
 800a59a:	1d7b      	adds	r3, r7, #5
 800a59c:	33ff      	adds	r3, #255	@ 0xff
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	1ad2      	subs	r2, r2, r3
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	619a      	str	r2, [r3, #24]
 800a5a6:	e011      	b.n	800a5cc <USB_EPStartXfer+0xf40>
 800a5a8:	ffff8000 	.word	0xffff8000
 800a5ac:	00000402 	.word	0x00000402
 800a5b0:	00000406 	.word	0x00000406
 800a5b4:	ffff8f8f 	.word	0xffff8f8f
 800a5b8:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	1d7a      	adds	r2, r7, #5
 800a5c2:	32ff      	adds	r2, #255	@ 0xff
 800a5c4:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	785b      	ldrb	r3, [r3, #1]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d000      	beq.n	800a5d6 <USB_EPStartXfer+0xf4a>
 800a5d4:	e081      	b.n	800a6da <USB_EPStartXfer+0x104e>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	21cc      	movs	r1, #204	@ 0xcc
 800a5da:	187a      	adds	r2, r7, r1
 800a5dc:	6013      	str	r3, [r2, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2250      	movs	r2, #80	@ 0x50
 800a5e2:	5a9b      	ldrh	r3, [r3, r2]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	001a      	movs	r2, r3
 800a5e8:	187b      	adds	r3, r7, r1
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	189b      	adds	r3, r3, r2
 800a5ee:	187a      	adds	r2, r7, r1
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	00da      	lsls	r2, r3, #3
 800a5f8:	187b      	adds	r3, r7, r1
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	18d3      	adds	r3, r2, r3
 800a5fe:	4ab6      	ldr	r2, [pc, #728]	@ (800a8d8 <USB_EPStartXfer+0x124c>)
 800a600:	4694      	mov	ip, r2
 800a602:	4463      	add	r3, ip
 800a604:	21c8      	movs	r1, #200	@ 0xc8
 800a606:	187a      	adds	r2, r7, r1
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	187b      	adds	r3, r7, r1
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	b29b      	uxth	r3, r3
 800a612:	059b      	lsls	r3, r3, #22
 800a614:	0d9b      	lsrs	r3, r3, #22
 800a616:	b29a      	uxth	r2, r3
 800a618:	187b      	adds	r3, r7, r1
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	801a      	strh	r2, [r3, #0]
 800a61e:	1d7b      	adds	r3, r7, #5
 800a620:	33ff      	adds	r3, #255	@ 0xff
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10a      	bne.n	800a63e <USB_EPStartXfer+0xfb2>
 800a628:	187b      	adds	r3, r7, r1
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	4aaa      	ldr	r2, [pc, #680]	@ (800a8dc <USB_EPStartXfer+0x1250>)
 800a632:	4313      	orrs	r3, r2
 800a634:	b29a      	uxth	r2, r3
 800a636:	187b      	adds	r3, r7, r1
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	801a      	strh	r2, [r3, #0]
 800a63c:	e072      	b.n	800a724 <USB_EPStartXfer+0x1098>
 800a63e:	1d7b      	adds	r3, r7, #5
 800a640:	33ff      	adds	r3, #255	@ 0xff
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b3e      	cmp	r3, #62	@ 0x3e
 800a646:	d822      	bhi.n	800a68e <USB_EPStartXfer+0x1002>
 800a648:	1d7b      	adds	r3, r7, #5
 800a64a:	33ff      	adds	r3, #255	@ 0xff
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	085b      	lsrs	r3, r3, #1
 800a650:	21dc      	movs	r1, #220	@ 0xdc
 800a652:	187a      	adds	r2, r7, r1
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	1d7b      	adds	r3, r7, #5
 800a658:	33ff      	adds	r3, #255	@ 0xff
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2201      	movs	r2, #1
 800a65e:	4013      	ands	r3, r2
 800a660:	d004      	beq.n	800a66c <USB_EPStartXfer+0xfe0>
 800a662:	187b      	adds	r3, r7, r1
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3301      	adds	r3, #1
 800a668:	187a      	adds	r2, r7, r1
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	21c8      	movs	r1, #200	@ 0xc8
 800a66e:	187b      	adds	r3, r7, r1
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	b29a      	uxth	r2, r3
 800a676:	23dc      	movs	r3, #220	@ 0xdc
 800a678:	18fb      	adds	r3, r7, r3
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	029b      	lsls	r3, r3, #10
 800a680:	b29b      	uxth	r3, r3
 800a682:	4313      	orrs	r3, r2
 800a684:	b29a      	uxth	r2, r3
 800a686:	187b      	adds	r3, r7, r1
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	801a      	strh	r2, [r3, #0]
 800a68c:	e04a      	b.n	800a724 <USB_EPStartXfer+0x1098>
 800a68e:	1d7b      	adds	r3, r7, #5
 800a690:	33ff      	adds	r3, #255	@ 0xff
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	095b      	lsrs	r3, r3, #5
 800a696:	21dc      	movs	r1, #220	@ 0xdc
 800a698:	187a      	adds	r2, r7, r1
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	1d7b      	adds	r3, r7, #5
 800a69e:	33ff      	adds	r3, #255	@ 0xff
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	221f      	movs	r2, #31
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	d104      	bne.n	800a6b2 <USB_EPStartXfer+0x1026>
 800a6a8:	187b      	adds	r3, r7, r1
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	187a      	adds	r2, r7, r1
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	21c8      	movs	r1, #200	@ 0xc8
 800a6b4:	187b      	adds	r3, r7, r1
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	23dc      	movs	r3, #220	@ 0xdc
 800a6be:	18fb      	adds	r3, r7, r3
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	029b      	lsls	r3, r3, #10
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	4a83      	ldr	r2, [pc, #524]	@ (800a8dc <USB_EPStartXfer+0x1250>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	187b      	adds	r3, r7, r1
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	801a      	strh	r2, [r3, #0]
 800a6d8:	e024      	b.n	800a724 <USB_EPStartXfer+0x1098>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	785b      	ldrb	r3, [r3, #1]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d120      	bne.n	800a724 <USB_EPStartXfer+0x1098>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	21d4      	movs	r1, #212	@ 0xd4
 800a6e6:	187a      	adds	r2, r7, r1
 800a6e8:	6013      	str	r3, [r2, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2250      	movs	r2, #80	@ 0x50
 800a6ee:	5a9b      	ldrh	r3, [r3, r2]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	001a      	movs	r2, r3
 800a6f4:	187b      	adds	r3, r7, r1
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	189b      	adds	r3, r3, r2
 800a6fa:	187a      	adds	r2, r7, r1
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	00da      	lsls	r2, r3, #3
 800a704:	187b      	adds	r3, r7, r1
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	18d3      	adds	r3, r2, r3
 800a70a:	4a73      	ldr	r2, [pc, #460]	@ (800a8d8 <USB_EPStartXfer+0x124c>)
 800a70c:	4694      	mov	ip, r2
 800a70e:	4463      	add	r3, ip
 800a710:	21d0      	movs	r1, #208	@ 0xd0
 800a712:	187a      	adds	r2, r7, r1
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	1d7b      	adds	r3, r7, #5
 800a718:	33ff      	adds	r3, #255	@ 0xff
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	187b      	adds	r3, r7, r1
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	801a      	strh	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	22c4      	movs	r2, #196	@ 0xc4
 800a728:	18ba      	adds	r2, r7, r2
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	785b      	ldrb	r3, [r3, #1]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d000      	beq.n	800a736 <USB_EPStartXfer+0x10aa>
 800a734:	e081      	b.n	800a83a <USB_EPStartXfer+0x11ae>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	21bc      	movs	r1, #188	@ 0xbc
 800a73a:	187a      	adds	r2, r7, r1
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2250      	movs	r2, #80	@ 0x50
 800a742:	5a9b      	ldrh	r3, [r3, r2]
 800a744:	b29b      	uxth	r3, r3
 800a746:	001a      	movs	r2, r3
 800a748:	187b      	adds	r3, r7, r1
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	189b      	adds	r3, r3, r2
 800a74e:	187a      	adds	r2, r7, r1
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	00da      	lsls	r2, r3, #3
 800a758:	187b      	adds	r3, r7, r1
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	18d3      	adds	r3, r2, r3
 800a75e:	4a60      	ldr	r2, [pc, #384]	@ (800a8e0 <USB_EPStartXfer+0x1254>)
 800a760:	4694      	mov	ip, r2
 800a762:	4463      	add	r3, ip
 800a764:	21b8      	movs	r1, #184	@ 0xb8
 800a766:	187a      	adds	r2, r7, r1
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	187b      	adds	r3, r7, r1
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	b29b      	uxth	r3, r3
 800a772:	059b      	lsls	r3, r3, #22
 800a774:	0d9b      	lsrs	r3, r3, #22
 800a776:	b29a      	uxth	r2, r3
 800a778:	187b      	adds	r3, r7, r1
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	801a      	strh	r2, [r3, #0]
 800a77e:	1d7b      	adds	r3, r7, #5
 800a780:	33ff      	adds	r3, #255	@ 0xff
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10a      	bne.n	800a79e <USB_EPStartXfer+0x1112>
 800a788:	187b      	adds	r3, r7, r1
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	4a52      	ldr	r2, [pc, #328]	@ (800a8dc <USB_EPStartXfer+0x1250>)
 800a792:	4313      	orrs	r3, r2
 800a794:	b29a      	uxth	r2, r3
 800a796:	187b      	adds	r3, r7, r1
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	801a      	strh	r2, [r3, #0]
 800a79c:	e072      	b.n	800a884 <USB_EPStartXfer+0x11f8>
 800a79e:	1d7b      	adds	r3, r7, #5
 800a7a0:	33ff      	adds	r3, #255	@ 0xff
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7a6:	d822      	bhi.n	800a7ee <USB_EPStartXfer+0x1162>
 800a7a8:	1d7b      	adds	r3, r7, #5
 800a7aa:	33ff      	adds	r3, #255	@ 0xff
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	085b      	lsrs	r3, r3, #1
 800a7b0:	21d8      	movs	r1, #216	@ 0xd8
 800a7b2:	187a      	adds	r2, r7, r1
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	1d7b      	adds	r3, r7, #5
 800a7b8:	33ff      	adds	r3, #255	@ 0xff
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	4013      	ands	r3, r2
 800a7c0:	d004      	beq.n	800a7cc <USB_EPStartXfer+0x1140>
 800a7c2:	187b      	adds	r3, r7, r1
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	187a      	adds	r2, r7, r1
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	21b8      	movs	r1, #184	@ 0xb8
 800a7ce:	187b      	adds	r3, r7, r1
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	881b      	ldrh	r3, [r3, #0]
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	23d8      	movs	r3, #216	@ 0xd8
 800a7d8:	18fb      	adds	r3, r7, r3
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	029b      	lsls	r3, r3, #10
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	187b      	adds	r3, r7, r1
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	801a      	strh	r2, [r3, #0]
 800a7ec:	e04a      	b.n	800a884 <USB_EPStartXfer+0x11f8>
 800a7ee:	1d7b      	adds	r3, r7, #5
 800a7f0:	33ff      	adds	r3, #255	@ 0xff
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	095b      	lsrs	r3, r3, #5
 800a7f6:	21d8      	movs	r1, #216	@ 0xd8
 800a7f8:	187a      	adds	r2, r7, r1
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	1d7b      	adds	r3, r7, #5
 800a7fe:	33ff      	adds	r3, #255	@ 0xff
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	221f      	movs	r2, #31
 800a804:	4013      	ands	r3, r2
 800a806:	d104      	bne.n	800a812 <USB_EPStartXfer+0x1186>
 800a808:	187b      	adds	r3, r7, r1
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	187a      	adds	r2, r7, r1
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	21b8      	movs	r1, #184	@ 0xb8
 800a814:	187b      	adds	r3, r7, r1
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	23d8      	movs	r3, #216	@ 0xd8
 800a81e:	18fb      	adds	r3, r7, r3
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	b29b      	uxth	r3, r3
 800a824:	029b      	lsls	r3, r3, #10
 800a826:	b29b      	uxth	r3, r3
 800a828:	4313      	orrs	r3, r2
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	4a2b      	ldr	r2, [pc, #172]	@ (800a8dc <USB_EPStartXfer+0x1250>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	b29a      	uxth	r2, r3
 800a832:	187b      	adds	r3, r7, r1
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	801a      	strh	r2, [r3, #0]
 800a838:	e024      	b.n	800a884 <USB_EPStartXfer+0x11f8>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d120      	bne.n	800a884 <USB_EPStartXfer+0x11f8>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2250      	movs	r2, #80	@ 0x50
 800a846:	5a9b      	ldrh	r3, [r3, r2]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	001a      	movs	r2, r3
 800a84c:	21c4      	movs	r1, #196	@ 0xc4
 800a84e:	187b      	adds	r3, r7, r1
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	189b      	adds	r3, r3, r2
 800a854:	187a      	adds	r2, r7, r1
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	00da      	lsls	r2, r3, #3
 800a85e:	187b      	adds	r3, r7, r1
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	18d3      	adds	r3, r2, r3
 800a864:	4a1e      	ldr	r2, [pc, #120]	@ (800a8e0 <USB_EPStartXfer+0x1254>)
 800a866:	4694      	mov	ip, r2
 800a868:	4463      	add	r3, ip
 800a86a:	21c0      	movs	r1, #192	@ 0xc0
 800a86c:	187a      	adds	r2, r7, r1
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	1d7b      	adds	r3, r7, #5
 800a872:	33ff      	adds	r3, #255	@ 0xff
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	b29a      	uxth	r2, r3
 800a878:	187b      	adds	r3, r7, r1
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	801a      	strh	r2, [r3, #0]
 800a87e:	e001      	b.n	800a884 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e025      	b.n	800a8d0 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	18d3      	adds	r3, r2, r3
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29a      	uxth	r2, r3
 800a892:	208a      	movs	r0, #138	@ 0x8a
 800a894:	183b      	adds	r3, r7, r0
 800a896:	4913      	ldr	r1, [pc, #76]	@ (800a8e4 <USB_EPStartXfer+0x1258>)
 800a898:	400a      	ands	r2, r1
 800a89a:	801a      	strh	r2, [r3, #0]
 800a89c:	183b      	adds	r3, r7, r0
 800a89e:	183a      	adds	r2, r7, r0
 800a8a0:	8812      	ldrh	r2, [r2, #0]
 800a8a2:	2180      	movs	r1, #128	@ 0x80
 800a8a4:	0149      	lsls	r1, r1, #5
 800a8a6:	404a      	eors	r2, r1
 800a8a8:	801a      	strh	r2, [r3, #0]
 800a8aa:	183b      	adds	r3, r7, r0
 800a8ac:	183a      	adds	r2, r7, r0
 800a8ae:	8812      	ldrh	r2, [r2, #0]
 800a8b0:	2180      	movs	r1, #128	@ 0x80
 800a8b2:	0189      	lsls	r1, r1, #6
 800a8b4:	404a      	eors	r2, r1
 800a8b6:	801a      	strh	r2, [r3, #0]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	18d3      	adds	r3, r2, r3
 800a8c2:	183a      	adds	r2, r7, r0
 800a8c4:	8812      	ldrh	r2, [r2, #0]
 800a8c6:	4908      	ldr	r1, [pc, #32]	@ (800a8e8 <USB_EPStartXfer+0x125c>)
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	b292      	uxth	r2, r2
 800a8cc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	b043      	add	sp, #268	@ 0x10c
 800a8d6:	bd90      	pop	{r4, r7, pc}
 800a8d8:	00000402 	.word	0x00000402
 800a8dc:	ffff8000 	.word	0xffff8000
 800a8e0:	00000406 	.word	0x00000406
 800a8e4:	ffffbf8f 	.word	0xffffbf8f
 800a8e8:	ffff8080 	.word	0xffff8080

0800a8ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	785b      	ldrb	r3, [r3, #1]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d01d      	beq.n	800a93a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	18d3      	adds	r3, r2, r3
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	200c      	movs	r0, #12
 800a90e:	183b      	adds	r3, r7, r0
 800a910:	491b      	ldr	r1, [pc, #108]	@ (800a980 <USB_EPSetStall+0x94>)
 800a912:	400a      	ands	r2, r1
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	183b      	adds	r3, r7, r0
 800a918:	183a      	adds	r2, r7, r0
 800a91a:	8812      	ldrh	r2, [r2, #0]
 800a91c:	2110      	movs	r1, #16
 800a91e:	404a      	eors	r2, r1
 800a920:	801a      	strh	r2, [r3, #0]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	18d3      	adds	r3, r2, r3
 800a92c:	183a      	adds	r2, r7, r0
 800a92e:	8812      	ldrh	r2, [r2, #0]
 800a930:	4914      	ldr	r1, [pc, #80]	@ (800a984 <USB_EPSetStall+0x98>)
 800a932:	430a      	orrs	r2, r1
 800a934:	b292      	uxth	r2, r2
 800a936:	801a      	strh	r2, [r3, #0]
 800a938:	e01d      	b.n	800a976 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	18d3      	adds	r3, r2, r3
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	b29a      	uxth	r2, r3
 800a948:	200e      	movs	r0, #14
 800a94a:	183b      	adds	r3, r7, r0
 800a94c:	490e      	ldr	r1, [pc, #56]	@ (800a988 <USB_EPSetStall+0x9c>)
 800a94e:	400a      	ands	r2, r1
 800a950:	801a      	strh	r2, [r3, #0]
 800a952:	183b      	adds	r3, r7, r0
 800a954:	183a      	adds	r2, r7, r0
 800a956:	8812      	ldrh	r2, [r2, #0]
 800a958:	2180      	movs	r1, #128	@ 0x80
 800a95a:	0149      	lsls	r1, r1, #5
 800a95c:	404a      	eors	r2, r1
 800a95e:	801a      	strh	r2, [r3, #0]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	18d3      	adds	r3, r2, r3
 800a96a:	183a      	adds	r2, r7, r0
 800a96c:	8812      	ldrh	r2, [r2, #0]
 800a96e:	4905      	ldr	r1, [pc, #20]	@ (800a984 <USB_EPSetStall+0x98>)
 800a970:	430a      	orrs	r2, r1
 800a972:	b292      	uxth	r2, r2
 800a974:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	0018      	movs	r0, r3
 800a97a:	46bd      	mov	sp, r7
 800a97c:	b004      	add	sp, #16
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	ffff8fbf 	.word	0xffff8fbf
 800a984:	ffff8080 	.word	0xffff8080
 800a988:	ffffbf8f 	.word	0xffffbf8f

0800a98c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	7b1b      	ldrb	r3, [r3, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d000      	beq.n	800a9a0 <USB_EPClearStall+0x14>
 800a99e:	e095      	b.n	800aacc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	785b      	ldrb	r3, [r3, #1]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d046      	beq.n	800aa36 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	18d2      	adds	r2, r2, r3
 800a9b2:	2110      	movs	r1, #16
 800a9b4:	187b      	adds	r3, r7, r1
 800a9b6:	8812      	ldrh	r2, [r2, #0]
 800a9b8:	801a      	strh	r2, [r3, #0]
 800a9ba:	187b      	adds	r3, r7, r1
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	2240      	movs	r2, #64	@ 0x40
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	d016      	beq.n	800a9f2 <USB_EPClearStall+0x66>
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	18d3      	adds	r3, r2, r3
 800a9ce:	881b      	ldrh	r3, [r3, #0]
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	200e      	movs	r0, #14
 800a9d4:	183b      	adds	r3, r7, r0
 800a9d6:	4940      	ldr	r1, [pc, #256]	@ (800aad8 <USB_EPClearStall+0x14c>)
 800a9d8:	400a      	ands	r2, r1
 800a9da:	801a      	strh	r2, [r3, #0]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	18d3      	adds	r3, r2, r3
 800a9e6:	183a      	adds	r2, r7, r0
 800a9e8:	8812      	ldrh	r2, [r2, #0]
 800a9ea:	493c      	ldr	r1, [pc, #240]	@ (800aadc <USB_EPClearStall+0x150>)
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	b292      	uxth	r2, r2
 800a9f0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	78db      	ldrb	r3, [r3, #3]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d068      	beq.n	800aacc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	18d3      	adds	r3, r2, r3
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	200c      	movs	r0, #12
 800aa0a:	183b      	adds	r3, r7, r0
 800aa0c:	4934      	ldr	r1, [pc, #208]	@ (800aae0 <USB_EPClearStall+0x154>)
 800aa0e:	400a      	ands	r2, r1
 800aa10:	801a      	strh	r2, [r3, #0]
 800aa12:	183b      	adds	r3, r7, r0
 800aa14:	183a      	adds	r2, r7, r0
 800aa16:	8812      	ldrh	r2, [r2, #0]
 800aa18:	2120      	movs	r1, #32
 800aa1a:	404a      	eors	r2, r1
 800aa1c:	801a      	strh	r2, [r3, #0]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	18d3      	adds	r3, r2, r3
 800aa28:	183a      	adds	r2, r7, r0
 800aa2a:	8812      	ldrh	r2, [r2, #0]
 800aa2c:	492d      	ldr	r1, [pc, #180]	@ (800aae4 <USB_EPClearStall+0x158>)
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	b292      	uxth	r2, r2
 800aa32:	801a      	strh	r2, [r3, #0]
 800aa34:	e04a      	b.n	800aacc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	18d2      	adds	r2, r2, r3
 800aa40:	2116      	movs	r1, #22
 800aa42:	187b      	adds	r3, r7, r1
 800aa44:	8812      	ldrh	r2, [r2, #0]
 800aa46:	801a      	strh	r2, [r3, #0]
 800aa48:	187b      	adds	r3, r7, r1
 800aa4a:	881a      	ldrh	r2, [r3, #0]
 800aa4c:	2380      	movs	r3, #128	@ 0x80
 800aa4e:	01db      	lsls	r3, r3, #7
 800aa50:	4013      	ands	r3, r2
 800aa52:	d016      	beq.n	800aa82 <USB_EPClearStall+0xf6>
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	18d3      	adds	r3, r2, r3
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	2014      	movs	r0, #20
 800aa64:	183b      	adds	r3, r7, r0
 800aa66:	491c      	ldr	r1, [pc, #112]	@ (800aad8 <USB_EPClearStall+0x14c>)
 800aa68:	400a      	ands	r2, r1
 800aa6a:	801a      	strh	r2, [r3, #0]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	18d3      	adds	r3, r2, r3
 800aa76:	183a      	adds	r2, r7, r0
 800aa78:	8812      	ldrh	r2, [r2, #0]
 800aa7a:	491b      	ldr	r1, [pc, #108]	@ (800aae8 <USB_EPClearStall+0x15c>)
 800aa7c:	430a      	orrs	r2, r1
 800aa7e:	b292      	uxth	r2, r2
 800aa80:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	18d3      	adds	r3, r2, r3
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	2012      	movs	r0, #18
 800aa92:	183b      	adds	r3, r7, r0
 800aa94:	4915      	ldr	r1, [pc, #84]	@ (800aaec <USB_EPClearStall+0x160>)
 800aa96:	400a      	ands	r2, r1
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	183b      	adds	r3, r7, r0
 800aa9c:	183a      	adds	r2, r7, r0
 800aa9e:	8812      	ldrh	r2, [r2, #0]
 800aaa0:	2180      	movs	r1, #128	@ 0x80
 800aaa2:	0149      	lsls	r1, r1, #5
 800aaa4:	404a      	eors	r2, r1
 800aaa6:	801a      	strh	r2, [r3, #0]
 800aaa8:	183b      	adds	r3, r7, r0
 800aaaa:	183a      	adds	r2, r7, r0
 800aaac:	8812      	ldrh	r2, [r2, #0]
 800aaae:	2180      	movs	r1, #128	@ 0x80
 800aab0:	0189      	lsls	r1, r1, #6
 800aab2:	404a      	eors	r2, r1
 800aab4:	801a      	strh	r2, [r3, #0]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	18d3      	adds	r3, r2, r3
 800aac0:	183a      	adds	r2, r7, r0
 800aac2:	8812      	ldrh	r2, [r2, #0]
 800aac4:	4907      	ldr	r1, [pc, #28]	@ (800aae4 <USB_EPClearStall+0x158>)
 800aac6:	430a      	orrs	r2, r1
 800aac8:	b292      	uxth	r2, r2
 800aaca:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	0018      	movs	r0, r3
 800aad0:	46bd      	mov	sp, r7
 800aad2:	b006      	add	sp, #24
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	46c0      	nop			@ (mov r8, r8)
 800aad8:	ffff8f8f 	.word	0xffff8f8f
 800aadc:	ffff80c0 	.word	0xffff80c0
 800aae0:	ffff8fbf 	.word	0xffff8fbf
 800aae4:	ffff8080 	.word	0xffff8080
 800aae8:	ffffc080 	.word	0xffffc080
 800aaec:	ffffbf8f 	.word	0xffffbf8f

0800aaf0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	000a      	movs	r2, r1
 800aafa:	1cfb      	adds	r3, r7, #3
 800aafc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800aafe:	1cfb      	adds	r3, r7, #3
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d103      	bne.n	800ab0e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	224c      	movs	r2, #76	@ 0x4c
 800ab0a:	2180      	movs	r1, #128	@ 0x80
 800ab0c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	0018      	movs	r0, r3
 800ab12:	46bd      	mov	sp, r7
 800ab14:	b002      	add	sp, #8
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2258      	movs	r2, #88	@ 0x58
 800ab24:	5a9b      	ldrh	r3, [r3, r2]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	4a05      	ldr	r2, [pc, #20]	@ (800ab40 <USB_DevConnect+0x28>)
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	b299      	uxth	r1, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2258      	movs	r2, #88	@ 0x58
 800ab32:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	0018      	movs	r0, r3
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	b002      	add	sp, #8
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	46c0      	nop			@ (mov r8, r8)
 800ab40:	ffff8000 	.word	0xffff8000

0800ab44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2244      	movs	r2, #68	@ 0x44
 800ab50:	5a9b      	ldrh	r3, [r3, r2]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ab56:	68fb      	ldr	r3, [r7, #12]
}
 800ab58:	0018      	movs	r0, r3
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	b004      	add	sp, #16
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08a      	sub	sp, #40	@ 0x28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	0019      	movs	r1, r3
 800ab6c:	1dbb      	adds	r3, r7, #6
 800ab6e:	801a      	strh	r2, [r3, #0]
 800ab70:	1d3b      	adds	r3, r7, #4
 800ab72:	1c0a      	adds	r2, r1, #0
 800ab74:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ab76:	1d3b      	adds	r3, r7, #4
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	085b      	lsrs	r3, r3, #1
 800ab7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab88:	1dbb      	adds	r3, r7, #6
 800ab8a:	881a      	ldrh	r2, [r3, #0]
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	18d3      	adds	r3, r2, r3
 800ab90:	2280      	movs	r2, #128	@ 0x80
 800ab92:	00d2      	lsls	r2, r2, #3
 800ab94:	4694      	mov	ip, r2
 800ab96:	4463      	add	r3, ip
 800ab98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab9e:	e020      	b.n	800abe2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	781a      	ldrb	r2, [r3, #0]
 800aba4:	2112      	movs	r1, #18
 800aba6:	187b      	adds	r3, r7, r1
 800aba8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	3301      	adds	r3, #1
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	021b      	lsls	r3, r3, #8
 800abb2:	b21a      	sxth	r2, r3
 800abb4:	187b      	adds	r3, r7, r1
 800abb6:	2000      	movs	r0, #0
 800abb8:	5e1b      	ldrsh	r3, [r3, r0]
 800abba:	4313      	orrs	r3, r2
 800abbc:	b21a      	sxth	r2, r3
 800abbe:	187b      	adds	r3, r7, r1
 800abc0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	187a      	adds	r2, r7, r1
 800abc6:	8812      	ldrh	r2, [r2, #0]
 800abc8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	3302      	adds	r3, #2
 800abce:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	3301      	adds	r3, #1
 800abd4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	3301      	adds	r3, #1
 800abda:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800abdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abde:	3b01      	subs	r3, #1
 800abe0:	627b      	str	r3, [r7, #36]	@ 0x24
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1db      	bne.n	800aba0 <USB_WritePMA+0x40>
  }
}
 800abe8:	46c0      	nop			@ (mov r8, r8)
 800abea:	46c0      	nop			@ (mov r8, r8)
 800abec:	46bd      	mov	sp, r7
 800abee:	b00a      	add	sp, #40	@ 0x28
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b08a      	sub	sp, #40	@ 0x28
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	0019      	movs	r1, r3
 800abfe:	1dbb      	adds	r3, r7, #6
 800ac00:	801a      	strh	r2, [r3, #0]
 800ac02:	1d3b      	adds	r3, r7, #4
 800ac04:	1c0a      	adds	r2, r1, #0
 800ac06:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ac08:	1d3b      	adds	r3, r7, #4
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	085b      	lsrs	r3, r3, #1
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac1a:	1dbb      	adds	r3, r7, #6
 800ac1c:	881a      	ldrh	r2, [r3, #0]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	18d3      	adds	r3, r2, r3
 800ac22:	2280      	movs	r2, #128	@ 0x80
 800ac24:	00d2      	lsls	r2, r2, #3
 800ac26:	4694      	mov	ip, r2
 800ac28:	4463      	add	r3, ip
 800ac2a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac30:	e018      	b.n	800ac64 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	3302      	adds	r3, #2
 800ac3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	0a1b      	lsrs	r3, r3, #8
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac60:	3b01      	subs	r3, #1
 800ac62:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e3      	bne.n	800ac32 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ac6a:	1d3b      	adds	r3, r7, #4
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	4013      	ands	r3, r2
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d007      	beq.n	800ac88 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	701a      	strb	r2, [r3, #0]
  }
}
 800ac88:	46c0      	nop			@ (mov r8, r8)
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	b00a      	add	sp, #40	@ 0x28
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	000a      	movs	r2, r1
 800ac9a:	1cfb      	adds	r3, r7, #3
 800ac9c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ac9e:	230f      	movs	r3, #15
 800aca0:	18fb      	adds	r3, r7, r3
 800aca2:	2200      	movs	r2, #0
 800aca4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7c1b      	ldrb	r3, [r3, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d116      	bne.n	800acdc <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800acae:	2380      	movs	r3, #128	@ 0x80
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	2181      	movs	r1, #129	@ 0x81
 800acb8:	f002 f8f9 	bl	800ceae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800acc2:	2380      	movs	r3, #128	@ 0x80
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	2202      	movs	r2, #2
 800acca:	2101      	movs	r1, #1
 800accc:	f002 f8ef 	bl	800ceae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	23b6      	movs	r3, #182	@ 0xb6
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	2101      	movs	r1, #1
 800acd8:	50d1      	str	r1, [r2, r3]
 800acda:	e013      	b.n	800ad04 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	2340      	movs	r3, #64	@ 0x40
 800ace0:	2202      	movs	r2, #2
 800ace2:	2181      	movs	r1, #129	@ 0x81
 800ace4:	f002 f8e3 	bl	800ceae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	2340      	movs	r3, #64	@ 0x40
 800acf2:	2202      	movs	r2, #2
 800acf4:	2101      	movs	r1, #1
 800acf6:	f002 f8da 	bl	800ceae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	23b6      	movs	r3, #182	@ 0xb6
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	2101      	movs	r1, #1
 800ad02:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	2308      	movs	r3, #8
 800ad08:	2203      	movs	r2, #3
 800ad0a:	2182      	movs	r1, #130	@ 0x82
 800ad0c:	f002 f8cf 	bl	800ceae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad16:	2387      	movs	r3, #135	@ 0x87
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f002 fa5e 	bl	800d1dc <USBD_static_malloc>
 800ad20:	0001      	movs	r1, r0
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	23ae      	movs	r3, #174	@ 0xae
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	23ae      	movs	r3, #174	@ 0xae
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	58d3      	ldr	r3, [r2, r3]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d104      	bne.n	800ad40 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800ad36:	230f      	movs	r3, #15
 800ad38:	18fb      	adds	r3, r7, r3
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	e02c      	b.n	800ad9a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	23ae      	movs	r3, #174	@ 0xae
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	58d3      	ldr	r3, [r2, r3]
 800ad48:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	23af      	movs	r3, #175	@ 0xaf
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	58d3      	ldr	r3, [r2, r3]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	2385      	movs	r3, #133	@ 0x85
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	2386      	movs	r3, #134	@ 0x86
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	2100      	movs	r1, #0
 800ad68:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	7c1b      	ldrb	r3, [r3, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	2381      	movs	r3, #129	@ 0x81
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	58d2      	ldr	r2, [r2, r3]
 800ad7a:	2380      	movs	r3, #128	@ 0x80
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	2101      	movs	r1, #1
 800ad82:	f002 f9de 	bl	800d142 <USBD_LL_PrepareReceive>
 800ad86:	e008      	b.n	800ad9a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	2381      	movs	r3, #129	@ 0x81
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	58d2      	ldr	r2, [r2, r3]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	2340      	movs	r3, #64	@ 0x40
 800ad94:	2101      	movs	r1, #1
 800ad96:	f002 f9d4 	bl	800d142 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ad9a:	230f      	movs	r3, #15
 800ad9c:	18fb      	adds	r3, r7, r3
 800ad9e:	781b      	ldrb	r3, [r3, #0]
}
 800ada0:	0018      	movs	r0, r3
 800ada2:	46bd      	mov	sp, r7
 800ada4:	b004      	add	sp, #16
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	000a      	movs	r2, r1
 800adb2:	1cfb      	adds	r3, r7, #3
 800adb4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800adb6:	230f      	movs	r3, #15
 800adb8:	18fb      	adds	r3, r7, r3
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2181      	movs	r1, #129	@ 0x81
 800adc2:	0018      	movs	r0, r3
 800adc4:	f002 f8aa 	bl	800cf1c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2101      	movs	r1, #1
 800add2:	0018      	movs	r0, r3
 800add4:	f002 f8a2 	bl	800cf1c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	23b6      	movs	r3, #182	@ 0xb6
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	2100      	movs	r1, #0
 800ade0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2182      	movs	r1, #130	@ 0x82
 800ade6:	0018      	movs	r0, r3
 800ade8:	f002 f898 	bl	800cf1c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	23ae      	movs	r3, #174	@ 0xae
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	58d3      	ldr	r3, [r2, r3]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d011      	beq.n	800ae22 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	23af      	movs	r3, #175	@ 0xaf
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	58d3      	ldr	r3, [r2, r3]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	23ae      	movs	r3, #174	@ 0xae
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	58d3      	ldr	r3, [r2, r3]
 800ae12:	0018      	movs	r0, r3
 800ae14:	f002 f9ee 	bl	800d1f4 <USBD_static_free>
    pdev->pClassData = NULL;
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	23ae      	movs	r3, #174	@ 0xae
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	2100      	movs	r1, #0
 800ae20:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800ae22:	230f      	movs	r3, #15
 800ae24:	18fb      	adds	r3, r7, r3
 800ae26:	781b      	ldrb	r3, [r3, #0]
}
 800ae28:	0018      	movs	r0, r3
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	b004      	add	sp, #16
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	23ae      	movs	r3, #174	@ 0xae
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	58d3      	ldr	r3, [r2, r3]
 800ae42:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ae44:	230f      	movs	r3, #15
 800ae46:	18fb      	adds	r3, r7, r3
 800ae48:	2200      	movs	r2, #0
 800ae4a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800ae4c:	230c      	movs	r3, #12
 800ae4e:	18fb      	adds	r3, r7, r3
 800ae50:	2200      	movs	r2, #0
 800ae52:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800ae54:	2317      	movs	r3, #23
 800ae56:	18fb      	adds	r3, r7, r3
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	001a      	movs	r2, r3
 800ae62:	2360      	movs	r3, #96	@ 0x60
 800ae64:	4013      	ands	r3, r2
 800ae66:	d03d      	beq.n	800aee4 <USBD_CDC_Setup+0xb4>
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	d000      	beq.n	800ae6e <USBD_CDC_Setup+0x3e>
 800ae6c:	e094      	b.n	800af98 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	88db      	ldrh	r3, [r3, #6]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d02b      	beq.n	800aece <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	b25b      	sxtb	r3, r3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	da12      	bge.n	800aea6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	23af      	movs	r3, #175	@ 0xaf
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	58d3      	ldr	r3, [r2, r3]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ae8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	88d2      	ldrh	r2, [r2, #6]
 800ae94:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ae96:	6939      	ldr	r1, [r7, #16]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	88da      	ldrh	r2, [r3, #6]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	0018      	movs	r0, r3
 800aea0:	f001 fbaf 	bl	800c602 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aea4:	e083      	b.n	800afae <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	7859      	ldrb	r1, [r3, #1]
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	2380      	movs	r3, #128	@ 0x80
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	88db      	ldrh	r3, [r3, #6]
 800aeb6:	b2d9      	uxtb	r1, r3
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	4a40      	ldr	r2, [pc, #256]	@ (800afbc <USBD_CDC_Setup+0x18c>)
 800aebc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aebe:	6939      	ldr	r1, [r7, #16]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	88da      	ldrh	r2, [r3, #6]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	0018      	movs	r0, r3
 800aec8:	f001 fbce 	bl	800c668 <USBD_CtlPrepareRx>
      break;
 800aecc:	e06f      	b.n	800afae <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	23af      	movs	r3, #175	@ 0xaf
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	58d3      	ldr	r3, [r2, r3]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	7850      	ldrb	r0, [r2, #1]
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	2200      	movs	r2, #0
 800aee0:	4798      	blx	r3
      break;
 800aee2:	e064      	b.n	800afae <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	2b0b      	cmp	r3, #11
 800aeea:	d037      	beq.n	800af5c <USBD_CDC_Setup+0x12c>
 800aeec:	dc47      	bgt.n	800af7e <USBD_CDC_Setup+0x14e>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <USBD_CDC_Setup+0xc8>
 800aef2:	2b0a      	cmp	r3, #10
 800aef4:	d019      	beq.n	800af2a <USBD_CDC_Setup+0xfa>
 800aef6:	e042      	b.n	800af7e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	23a7      	movs	r3, #167	@ 0xa7
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	5cd3      	ldrb	r3, [r2, r3]
 800af00:	2b03      	cmp	r3, #3
 800af02:	d107      	bne.n	800af14 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800af04:	230c      	movs	r3, #12
 800af06:	18f9      	adds	r1, r7, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	0018      	movs	r0, r3
 800af0e:	f001 fb78 	bl	800c602 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af12:	e040      	b.n	800af96 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	0011      	movs	r1, r2
 800af1a:	0018      	movs	r0, r3
 800af1c:	f001 faf3 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800af20:	2317      	movs	r3, #23
 800af22:	18fb      	adds	r3, r7, r3
 800af24:	2202      	movs	r2, #2
 800af26:	701a      	strb	r2, [r3, #0]
          break;
 800af28:	e035      	b.n	800af96 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	23a7      	movs	r3, #167	@ 0xa7
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	5cd3      	ldrb	r3, [r2, r3]
 800af32:	2b03      	cmp	r3, #3
 800af34:	d107      	bne.n	800af46 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800af36:	230f      	movs	r3, #15
 800af38:	18f9      	adds	r1, r7, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	0018      	movs	r0, r3
 800af40:	f001 fb5f 	bl	800c602 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af44:	e027      	b.n	800af96 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	0011      	movs	r1, r2
 800af4c:	0018      	movs	r0, r3
 800af4e:	f001 fada 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800af52:	2317      	movs	r3, #23
 800af54:	18fb      	adds	r3, r7, r3
 800af56:	2202      	movs	r2, #2
 800af58:	701a      	strb	r2, [r3, #0]
          break;
 800af5a:	e01c      	b.n	800af96 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	23a7      	movs	r3, #167	@ 0xa7
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	5cd3      	ldrb	r3, [r2, r3]
 800af64:	2b03      	cmp	r3, #3
 800af66:	d015      	beq.n	800af94 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	0011      	movs	r1, r2
 800af6e:	0018      	movs	r0, r3
 800af70:	f001 fac9 	bl	800c506 <USBD_CtlError>
            ret = USBD_FAIL;
 800af74:	2317      	movs	r3, #23
 800af76:	18fb      	adds	r3, r7, r3
 800af78:	2202      	movs	r2, #2
 800af7a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800af7c:	e00a      	b.n	800af94 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	0011      	movs	r1, r2
 800af84:	0018      	movs	r0, r3
 800af86:	f001 fabe 	bl	800c506 <USBD_CtlError>
          ret = USBD_FAIL;
 800af8a:	2317      	movs	r3, #23
 800af8c:	18fb      	adds	r3, r7, r3
 800af8e:	2202      	movs	r2, #2
 800af90:	701a      	strb	r2, [r3, #0]
          break;
 800af92:	e000      	b.n	800af96 <USBD_CDC_Setup+0x166>
          break;
 800af94:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800af96:	e00a      	b.n	800afae <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	0011      	movs	r1, r2
 800af9e:	0018      	movs	r0, r3
 800afa0:	f001 fab1 	bl	800c506 <USBD_CtlError>
      ret = USBD_FAIL;
 800afa4:	2317      	movs	r3, #23
 800afa6:	18fb      	adds	r3, r7, r3
 800afa8:	2202      	movs	r2, #2
 800afaa:	701a      	strb	r2, [r3, #0]
      break;
 800afac:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800afae:	2317      	movs	r3, #23
 800afb0:	18fb      	adds	r3, r7, r3
 800afb2:	781b      	ldrb	r3, [r3, #0]
}
 800afb4:	0018      	movs	r0, r3
 800afb6:	46bd      	mov	sp, r7
 800afb8:	b006      	add	sp, #24
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	00000201 	.word	0x00000201

0800afc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	000a      	movs	r2, r1
 800afca:	1cfb      	adds	r3, r7, #3
 800afcc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	23ae      	movs	r3, #174	@ 0xae
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	58d3      	ldr	r3, [r2, r3]
 800afd6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	23b0      	movs	r3, #176	@ 0xb0
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	58d3      	ldr	r3, [r2, r3]
 800afe0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	23ae      	movs	r3, #174	@ 0xae
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	58d3      	ldr	r3, [r2, r3]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d03e      	beq.n	800b06c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800afee:	1cfb      	adds	r3, r7, #3
 800aff0:	781a      	ldrb	r2, [r3, #0]
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	0013      	movs	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	189b      	adds	r3, r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	18cb      	adds	r3, r1, r3
 800affe:	331c      	adds	r3, #28
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d02b      	beq.n	800b05e <USBD_CDC_DataIn+0x9e>
 800b006:	1cfb      	adds	r3, r7, #3
 800b008:	781a      	ldrb	r2, [r3, #0]
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	0013      	movs	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	189b      	adds	r3, r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	18cb      	adds	r3, r1, r3
 800b016:	331c      	adds	r3, #28
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	1cfb      	adds	r3, r7, #3
 800b01c:	781a      	ldrb	r2, [r3, #0]
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	0013      	movs	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	189b      	adds	r3, r3, r2
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	18cb      	adds	r3, r1, r3
 800b02a:	3320      	adds	r3, #32
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	0019      	movs	r1, r3
 800b030:	f7f5 f90c 	bl	800024c <__aeabi_uidivmod>
 800b034:	1e0b      	subs	r3, r1, #0
 800b036:	d112      	bne.n	800b05e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b038:	1cfb      	adds	r3, r7, #3
 800b03a:	781a      	ldrb	r2, [r3, #0]
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	0013      	movs	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	189b      	adds	r3, r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	18cb      	adds	r3, r1, r3
 800b048:	331c      	adds	r3, #28
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b04e:	1cfb      	adds	r3, r7, #3
 800b050:	7819      	ldrb	r1, [r3, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	2300      	movs	r3, #0
 800b056:	2200      	movs	r2, #0
 800b058:	f002 f83c 	bl	800d0d4 <USBD_LL_Transmit>
 800b05c:	e004      	b.n	800b068 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	2385      	movs	r3, #133	@ 0x85
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	2100      	movs	r1, #0
 800b066:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	e000      	b.n	800b06e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b06c:	2302      	movs	r3, #2
  }
}
 800b06e:	0018      	movs	r0, r3
 800b070:	46bd      	mov	sp, r7
 800b072:	b004      	add	sp, #16
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	000a      	movs	r2, r1
 800b080:	1cfb      	adds	r3, r7, #3
 800b082:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	23ae      	movs	r3, #174	@ 0xae
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	58d3      	ldr	r3, [r2, r3]
 800b08c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b08e:	1cfb      	adds	r3, r7, #3
 800b090:	781a      	ldrb	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	0011      	movs	r1, r2
 800b096:	0018      	movs	r0, r3
 800b098:	f002 f88a 	bl	800d1b0 <USBD_LL_GetRxDataSize>
 800b09c:	0001      	movs	r1, r0
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	2383      	movs	r3, #131	@ 0x83
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	23ae      	movs	r3, #174	@ 0xae
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	58d3      	ldr	r3, [r2, r3]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d011      	beq.n	800b0d6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	23af      	movs	r3, #175	@ 0xaf
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	58d3      	ldr	r3, [r2, r3]
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	68f9      	ldr	r1, [r7, #12]
 800b0be:	2381      	movs	r3, #129	@ 0x81
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	58c8      	ldr	r0, [r1, r3]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2183      	movs	r1, #131	@ 0x83
 800b0c8:	0089      	lsls	r1, r1, #2
 800b0ca:	468c      	mov	ip, r1
 800b0cc:	4463      	add	r3, ip
 800b0ce:	0019      	movs	r1, r3
 800b0d0:	4790      	blx	r2

    return USBD_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e000      	b.n	800b0d8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b0d6:	2302      	movs	r3, #2
  }
}
 800b0d8:	0018      	movs	r0, r3
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	b004      	add	sp, #16
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0e0:	b590      	push	{r4, r7, lr}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	23ae      	movs	r3, #174	@ 0xae
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	58d3      	ldr	r3, [r2, r3]
 800b0f0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	23af      	movs	r3, #175	@ 0xaf
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	58d3      	ldr	r3, [r2, r3]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d018      	beq.n	800b130 <USBD_CDC_EP0_RxReady+0x50>
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	2380      	movs	r3, #128	@ 0x80
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	5cd3      	ldrb	r3, [r2, r3]
 800b106:	2bff      	cmp	r3, #255	@ 0xff
 800b108:	d012      	beq.n	800b130 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	23af      	movs	r3, #175	@ 0xaf
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	58d3      	ldr	r3, [r2, r3]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	68f9      	ldr	r1, [r7, #12]
 800b116:	2280      	movs	r2, #128	@ 0x80
 800b118:	0092      	lsls	r2, r2, #2
 800b11a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b11c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	4c06      	ldr	r4, [pc, #24]	@ (800b13c <USBD_CDC_EP0_RxReady+0x5c>)
 800b122:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b124:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	2380      	movs	r3, #128	@ 0x80
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	21ff      	movs	r1, #255	@ 0xff
 800b12e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	0018      	movs	r0, r3
 800b134:	46bd      	mov	sp, r7
 800b136:	b005      	add	sp, #20
 800b138:	bd90      	pop	{r4, r7, pc}
 800b13a:	46c0      	nop			@ (mov r8, r8)
 800b13c:	00000201 	.word	0x00000201

0800b140 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2243      	movs	r2, #67	@ 0x43
 800b14c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b14e:	4b02      	ldr	r3, [pc, #8]	@ (800b158 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b150:	0018      	movs	r0, r3
 800b152:	46bd      	mov	sp, r7
 800b154:	b002      	add	sp, #8
 800b156:	bd80      	pop	{r7, pc}
 800b158:	20000094 	.word	0x20000094

0800b15c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2243      	movs	r2, #67	@ 0x43
 800b168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b16a:	4b02      	ldr	r3, [pc, #8]	@ (800b174 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b16c:	0018      	movs	r0, r3
 800b16e:	46bd      	mov	sp, r7
 800b170:	b002      	add	sp, #8
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000050 	.word	0x20000050

0800b178 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2243      	movs	r2, #67	@ 0x43
 800b184:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b186:	4b02      	ldr	r3, [pc, #8]	@ (800b190 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b188:	0018      	movs	r0, r3
 800b18a:	46bd      	mov	sp, r7
 800b18c:	b002      	add	sp, #8
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	200000d8 	.word	0x200000d8

0800b194 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	220a      	movs	r2, #10
 800b1a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b1a2:	4b02      	ldr	r3, [pc, #8]	@ (800b1ac <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b1a4:	0018      	movs	r0, r3
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	b002      	add	sp, #8
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	2000000c 	.word	0x2000000c

0800b1b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b1ba:	200f      	movs	r0, #15
 800b1bc:	183b      	adds	r3, r7, r0
 800b1be:	2202      	movs	r2, #2
 800b1c0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d007      	beq.n	800b1d8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	23af      	movs	r3, #175	@ 0xaf
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b1d2:	183b      	adds	r3, r7, r0
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b1d8:	230f      	movs	r3, #15
 800b1da:	18fb      	adds	r3, r7, r3
 800b1dc:	781b      	ldrb	r3, [r3, #0]
}
 800b1de:	0018      	movs	r0, r3
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	b004      	add	sp, #16
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b086      	sub	sp, #24
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	60b9      	str	r1, [r7, #8]
 800b1f0:	1dbb      	adds	r3, r7, #6
 800b1f2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	23ae      	movs	r3, #174	@ 0xae
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	58d3      	ldr	r3, [r2, r3]
 800b1fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	2382      	movs	r3, #130	@ 0x82
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	68b9      	ldr	r1, [r7, #8]
 800b206:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b208:	1dbb      	adds	r3, r7, #6
 800b20a:	8819      	ldrh	r1, [r3, #0]
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	2384      	movs	r3, #132	@ 0x84
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	0018      	movs	r0, r3
 800b218:	46bd      	mov	sp, r7
 800b21a:	b006      	add	sp, #24
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	23ae      	movs	r3, #174	@ 0xae
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	58d3      	ldr	r3, [r2, r3]
 800b230:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	2381      	movs	r3, #129	@ 0x81
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	0018      	movs	r0, r3
 800b240:	46bd      	mov	sp, r7
 800b242:	b004      	add	sp, #16
 800b244:	bd80      	pop	{r7, pc}

0800b246 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b084      	sub	sp, #16
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	23ae      	movs	r3, #174	@ 0xae
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	58d3      	ldr	r3, [r2, r3]
 800b256:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	23ae      	movs	r3, #174	@ 0xae
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	58d3      	ldr	r3, [r2, r3]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d022      	beq.n	800b2aa <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	2385      	movs	r3, #133	@ 0x85
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	58d3      	ldr	r3, [r2, r3]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d11a      	bne.n	800b2a6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	2385      	movs	r3, #133	@ 0x85
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	2101      	movs	r1, #1
 800b278:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	2384      	movs	r3, #132	@ 0x84
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	58d2      	ldr	r2, [r2, r3]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	2382      	movs	r3, #130	@ 0x82
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	2384      	movs	r3, #132	@ 0x84
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b296:	b29b      	uxth	r3, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	000a      	movs	r2, r1
 800b29c:	2181      	movs	r1, #129	@ 0x81
 800b29e:	f001 ff19 	bl	800d0d4 <USBD_LL_Transmit>

      return USBD_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e002      	b.n	800b2ac <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b2aa:	2302      	movs	r3, #2
  }
}
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	b004      	add	sp, #16
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	23ae      	movs	r3, #174	@ 0xae
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	58d3      	ldr	r3, [r2, r3]
 800b2c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	23ae      	movs	r3, #174	@ 0xae
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	58d3      	ldr	r3, [r2, r3]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d019      	beq.n	800b306 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	7c1b      	ldrb	r3, [r3, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10a      	bne.n	800b2f0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	2381      	movs	r3, #129	@ 0x81
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	58d2      	ldr	r2, [r2, r3]
 800b2e2:	2380      	movs	r3, #128	@ 0x80
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	f001 ff2a 	bl	800d142 <USBD_LL_PrepareReceive>
 800b2ee:	e008      	b.n	800b302 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	2381      	movs	r3, #129	@ 0x81
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	58d2      	ldr	r2, [r2, r3]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	2340      	movs	r3, #64	@ 0x40
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	f001 ff20 	bl	800d142 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	e000      	b.n	800b308 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b306:	2302      	movs	r3, #2
  }
}
 800b308:	0018      	movs	r0, r3
 800b30a:	46bd      	mov	sp, r7
 800b30c:	b004      	add	sp, #16
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	1dfb      	adds	r3, r7, #7
 800b31c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b324:	2302      	movs	r3, #2
 800b326:	e020      	b.n	800b36a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	23ad      	movs	r3, #173	@ 0xad
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	58d3      	ldr	r3, [r2, r3]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	23ad      	movs	r3, #173	@ 0xad
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	2100      	movs	r1, #0
 800b33c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d004      	beq.n	800b34e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	23ac      	movs	r3, #172	@ 0xac
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	68b9      	ldr	r1, [r7, #8]
 800b34c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	23a7      	movs	r3, #167	@ 0xa7
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	2101      	movs	r1, #1
 800b356:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	1dfa      	adds	r2, r7, #7
 800b35c:	7812      	ldrb	r2, [r2, #0]
 800b35e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	0018      	movs	r0, r3
 800b364:	f001 fd1a 	bl	800cd9c <USBD_LL_Init>

  return USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	0018      	movs	r0, r3
 800b36c:	46bd      	mov	sp, r7
 800b36e:	b004      	add	sp, #16
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b37c:	200f      	movs	r0, #15
 800b37e:	183b      	adds	r3, r7, r0
 800b380:	2200      	movs	r2, #0
 800b382:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d008      	beq.n	800b39c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	23ad      	movs	r3, #173	@ 0xad
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b394:	183b      	adds	r3, r7, r0
 800b396:	2200      	movs	r2, #0
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	e003      	b.n	800b3a4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b39c:	230f      	movs	r3, #15
 800b39e:	18fb      	adds	r3, r7, r3
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b3a4:	230f      	movs	r3, #15
 800b3a6:	18fb      	adds	r3, r7, r3
 800b3a8:	781b      	ldrb	r3, [r3, #0]
}
 800b3aa:	0018      	movs	r0, r3
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	b004      	add	sp, #16
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	0018      	movs	r0, r3
 800b3be:	f001 fd51 	bl	800ce64 <USBD_LL_Start>

  return USBD_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	0018      	movs	r0, r3
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	b002      	add	sp, #8
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	0018      	movs	r0, r3
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	b002      	add	sp, #8
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b3de:	b590      	push	{r4, r7, lr}
 800b3e0:	b085      	sub	sp, #20
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	000a      	movs	r2, r1
 800b3e8:	1cfb      	adds	r3, r7, #3
 800b3ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b3ec:	240f      	movs	r4, #15
 800b3ee:	193b      	adds	r3, r7, r4
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	23ad      	movs	r3, #173	@ 0xad
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	58d3      	ldr	r3, [r2, r3]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00e      	beq.n	800b41e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	23ad      	movs	r3, #173	@ 0xad
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	58d3      	ldr	r3, [r2, r3]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	1cfa      	adds	r2, r7, #3
 800b40c:	7811      	ldrb	r1, [r2, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	0010      	movs	r0, r2
 800b412:	4798      	blx	r3
 800b414:	1e03      	subs	r3, r0, #0
 800b416:	d102      	bne.n	800b41e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b418:	193b      	adds	r3, r7, r4
 800b41a:	2200      	movs	r2, #0
 800b41c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b41e:	230f      	movs	r3, #15
 800b420:	18fb      	adds	r3, r7, r3
 800b422:	781b      	ldrb	r3, [r3, #0]
}
 800b424:	0018      	movs	r0, r3
 800b426:	46bd      	mov	sp, r7
 800b428:	b005      	add	sp, #20
 800b42a:	bd90      	pop	{r4, r7, pc}

0800b42c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	000a      	movs	r2, r1
 800b436:	1cfb      	adds	r3, r7, #3
 800b438:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	23ad      	movs	r3, #173	@ 0xad
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	58d3      	ldr	r3, [r2, r3]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	1cfa      	adds	r2, r7, #3
 800b446:	7811      	ldrb	r1, [r2, #0]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	0010      	movs	r0, r2
 800b44c:	4798      	blx	r3

  return USBD_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	0018      	movs	r0, r3
 800b452:	46bd      	mov	sp, r7
 800b454:	b002      	add	sp, #8
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	22aa      	movs	r2, #170	@ 0xaa
 800b466:	0092      	lsls	r2, r2, #2
 800b468:	4694      	mov	ip, r2
 800b46a:	4463      	add	r3, ip
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	0011      	movs	r1, r2
 800b470:	0018      	movs	r0, r3
 800b472:	f001 f810 	bl	800c496 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	23a5      	movs	r3, #165	@ 0xa5
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	2101      	movs	r1, #1
 800b47e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a23      	ldr	r2, [pc, #140]	@ (800b510 <USBD_LL_SetupStage+0xb8>)
 800b484:	5a9b      	ldrh	r3, [r3, r2]
 800b486:	0019      	movs	r1, r3
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	23a6      	movs	r3, #166	@ 0xa6
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	23aa      	movs	r3, #170	@ 0xaa
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	5cd3      	ldrb	r3, [r2, r3]
 800b498:	001a      	movs	r2, r3
 800b49a:	231f      	movs	r3, #31
 800b49c:	4013      	ands	r3, r2
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d019      	beq.n	800b4d6 <USBD_LL_SetupStage+0x7e>
 800b4a2:	d822      	bhi.n	800b4ea <USBD_LL_SetupStage+0x92>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <USBD_LL_SetupStage+0x56>
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d00a      	beq.n	800b4c2 <USBD_LL_SetupStage+0x6a>
 800b4ac:	e01d      	b.n	800b4ea <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	22aa      	movs	r2, #170	@ 0xaa
 800b4b2:	0092      	lsls	r2, r2, #2
 800b4b4:	189a      	adds	r2, r3, r2
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	0011      	movs	r1, r2
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	f000 fa10 	bl	800b8e0 <USBD_StdDevReq>
      break;
 800b4c0:	e020      	b.n	800b504 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	22aa      	movs	r2, #170	@ 0xaa
 800b4c6:	0092      	lsls	r2, r2, #2
 800b4c8:	189a      	adds	r2, r3, r2
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	0011      	movs	r1, r2
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	f000 fa78 	bl	800b9c4 <USBD_StdItfReq>
      break;
 800b4d4:	e016      	b.n	800b504 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	22aa      	movs	r2, #170	@ 0xaa
 800b4da:	0092      	lsls	r2, r2, #2
 800b4dc:	189a      	adds	r2, r3, r2
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	0011      	movs	r1, r2
 800b4e2:	0018      	movs	r0, r3
 800b4e4:	f000 fac5 	bl	800ba72 <USBD_StdEPReq>
      break;
 800b4e8:	e00c      	b.n	800b504 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	23aa      	movs	r3, #170	@ 0xaa
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	5cd3      	ldrb	r3, [r2, r3]
 800b4f2:	227f      	movs	r2, #127	@ 0x7f
 800b4f4:	4393      	bics	r3, r2
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	0011      	movs	r1, r2
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	f001 fd38 	bl	800cf72 <USBD_LL_StallEP>
      break;
 800b502:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	0018      	movs	r0, r3
 800b508:	46bd      	mov	sp, r7
 800b50a:	b002      	add	sp, #8
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	46c0      	nop			@ (mov r8, r8)
 800b510:	000002ae 	.word	0x000002ae

0800b514 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	607a      	str	r2, [r7, #4]
 800b51e:	200b      	movs	r0, #11
 800b520:	183b      	adds	r3, r7, r0
 800b522:	1c0a      	adds	r2, r1, #0
 800b524:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b526:	183b      	adds	r3, r7, r0
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d154      	bne.n	800b5d8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3355      	adds	r3, #85	@ 0x55
 800b532:	33ff      	adds	r3, #255	@ 0xff
 800b534:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	23a5      	movs	r3, #165	@ 0xa5
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	58d3      	ldr	r3, [r2, r3]
 800b53e:	2b03      	cmp	r3, #3
 800b540:	d139      	bne.n	800b5b6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d919      	bls.n	800b582 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	68da      	ldr	r2, [r3, #12]
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	1ad2      	subs	r2, r2, r3
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	68da      	ldr	r2, [r3, #12]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b564:	429a      	cmp	r2, r3
 800b566:	d203      	bcs.n	800b570 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	e002      	b.n	800b576 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b574:	b29b      	uxth	r3, r3
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	001a      	movs	r2, r3
 800b57c:	f001 f898 	bl	800c6b0 <USBD_CtlContinueRx>
 800b580:	e045      	b.n	800b60e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	23ad      	movs	r3, #173	@ 0xad
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	58d3      	ldr	r3, [r2, r3]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00d      	beq.n	800b5ac <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	23a7      	movs	r3, #167	@ 0xa7
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d107      	bne.n	800b5ac <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	23ad      	movs	r3, #173	@ 0xad
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	58d3      	ldr	r3, [r2, r3]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	0010      	movs	r0, r2
 800b5aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	f001 f891 	bl	800c6d6 <USBD_CtlSendStatus>
 800b5b4:	e02b      	b.n	800b60e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	23a5      	movs	r3, #165	@ 0xa5
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	58d3      	ldr	r3, [r2, r3]
 800b5be:	2b05      	cmp	r3, #5
 800b5c0:	d125      	bne.n	800b60e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	23a5      	movs	r3, #165	@ 0xa5
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	f001 fcce 	bl	800cf72 <USBD_LL_StallEP>
 800b5d6:	e01a      	b.n	800b60e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	23ad      	movs	r3, #173	@ 0xad
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	58d3      	ldr	r3, [r2, r3]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d011      	beq.n	800b60a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	23a7      	movs	r3, #167	@ 0xa7
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d10b      	bne.n	800b60a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	23ad      	movs	r3, #173	@ 0xad
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	58d3      	ldr	r3, [r2, r3]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	220b      	movs	r2, #11
 800b5fe:	18ba      	adds	r2, r7, r2
 800b600:	7811      	ldrb	r1, [r2, #0]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	0010      	movs	r0, r2
 800b606:	4798      	blx	r3
 800b608:	e001      	b.n	800b60e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b60a:	2302      	movs	r3, #2
 800b60c:	e000      	b.n	800b610 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	0018      	movs	r0, r3
 800b612:	46bd      	mov	sp, r7
 800b614:	b006      	add	sp, #24
 800b616:	bd80      	pop	{r7, pc}

0800b618 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	607a      	str	r2, [r7, #4]
 800b622:	200b      	movs	r0, #11
 800b624:	183b      	adds	r3, r7, r0
 800b626:	1c0a      	adds	r2, r1, #0
 800b628:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b62a:	183b      	adds	r3, r7, r0
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d000      	beq.n	800b634 <USBD_LL_DataInStage+0x1c>
 800b632:	e08e      	b.n	800b752 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3314      	adds	r3, #20
 800b638:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	23a5      	movs	r3, #165	@ 0xa5
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	58d3      	ldr	r3, [r2, r3]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d164      	bne.n	800b710 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	68da      	ldr	r2, [r3, #12]
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d915      	bls.n	800b67e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	1ad2      	subs	r2, r2, r3
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	b29a      	uxth	r2, r3
 800b666:	6879      	ldr	r1, [r7, #4]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	0018      	movs	r0, r3
 800b66c:	f000 ffe9 	bl	800c642 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	2300      	movs	r3, #0
 800b674:	2200      	movs	r2, #0
 800b676:	2100      	movs	r1, #0
 800b678:	f001 fd63 	bl	800d142 <USBD_LL_PrepareReceive>
 800b67c:	e059      	b.n	800b732 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	689a      	ldr	r2, [r3, #8]
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	0019      	movs	r1, r3
 800b688:	0010      	movs	r0, r2
 800b68a:	f7f4 fddf 	bl	800024c <__aeabi_uidivmod>
 800b68e:	1e0b      	subs	r3, r1, #0
 800b690:	d11f      	bne.n	800b6d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	689a      	ldr	r2, [r3, #8]
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d319      	bcc.n	800b6d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	689a      	ldr	r2, [r3, #8]
 800b6a2:	68f9      	ldr	r1, [r7, #12]
 800b6a4:	23a6      	movs	r3, #166	@ 0xa6
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d211      	bcs.n	800b6d2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	f000 ffc4 	bl	800c642 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	23a6      	movs	r3, #166	@ 0xa6
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	f001 fd39 	bl	800d142 <USBD_LL_PrepareReceive>
 800b6d0:	e02f      	b.n	800b732 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	23ad      	movs	r3, #173	@ 0xad
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	58d3      	ldr	r3, [r2, r3]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00d      	beq.n	800b6fc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	23a7      	movs	r3, #167	@ 0xa7
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d107      	bne.n	800b6fc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	23ad      	movs	r3, #173	@ 0xad
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	58d3      	ldr	r3, [r2, r3]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	0010      	movs	r0, r2
 800b6fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2180      	movs	r1, #128	@ 0x80
 800b700:	0018      	movs	r0, r3
 800b702:	f001 fc36 	bl	800cf72 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	0018      	movs	r0, r3
 800b70a:	f000 fff8 	bl	800c6fe <USBD_CtlReceiveStatus>
 800b70e:	e010      	b.n	800b732 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	23a5      	movs	r3, #165	@ 0xa5
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	58d3      	ldr	r3, [r2, r3]
 800b718:	2b04      	cmp	r3, #4
 800b71a:	d005      	beq.n	800b728 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	23a5      	movs	r3, #165	@ 0xa5
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b724:	2b00      	cmp	r3, #0
 800b726:	d104      	bne.n	800b732 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2180      	movs	r1, #128	@ 0x80
 800b72c:	0018      	movs	r0, r3
 800b72e:	f001 fc20 	bl	800cf72 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	23a8      	movs	r3, #168	@ 0xa8
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	5cd3      	ldrb	r3, [r2, r3]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d124      	bne.n	800b788 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	0018      	movs	r0, r3
 800b742:	f7ff fe43 	bl	800b3cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	23a8      	movs	r3, #168	@ 0xa8
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	2100      	movs	r1, #0
 800b74e:	54d1      	strb	r1, [r2, r3]
 800b750:	e01a      	b.n	800b788 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	23ad      	movs	r3, #173	@ 0xad
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	58d3      	ldr	r3, [r2, r3]
 800b75a:	695b      	ldr	r3, [r3, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d011      	beq.n	800b784 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	23a7      	movs	r3, #167	@ 0xa7
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d10b      	bne.n	800b784 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	23ad      	movs	r3, #173	@ 0xad
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	58d3      	ldr	r3, [r2, r3]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	220b      	movs	r2, #11
 800b778:	18ba      	adds	r2, r7, r2
 800b77a:	7811      	ldrb	r1, [r2, #0]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	0010      	movs	r0, r2
 800b780:	4798      	blx	r3
 800b782:	e001      	b.n	800b788 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b784:	2302      	movs	r3, #2
 800b786:	e000      	b.n	800b78a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	0018      	movs	r0, r3
 800b78c:	46bd      	mov	sp, r7
 800b78e:	b006      	add	sp, #24
 800b790:	bd80      	pop	{r7, pc}

0800b792 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b082      	sub	sp, #8
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	2340      	movs	r3, #64	@ 0x40
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	f001 fb84 	bl	800ceae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	23ac      	movs	r3, #172	@ 0xac
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	23b2      	movs	r3, #178	@ 0xb2
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	2140      	movs	r1, #64	@ 0x40
 800b7b8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	2340      	movs	r3, #64	@ 0x40
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2180      	movs	r1, #128	@ 0x80
 800b7c2:	f001 fb74 	bl	800ceae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2240      	movs	r2, #64	@ 0x40
 800b7d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	23a7      	movs	r3, #167	@ 0xa7
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	2101      	movs	r1, #1
 800b7da:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	23a5      	movs	r3, #165	@ 0xa5
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	23a9      	movs	r3, #169	@ 0xa9
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	23ae      	movs	r3, #174	@ 0xae
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	58d3      	ldr	r3, [r2, r3]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	23ad      	movs	r3, #173	@ 0xad
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	58d3      	ldr	r3, [r2, r3]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	b2d9      	uxtb	r1, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	0018      	movs	r0, r3
 800b816:	4790      	blx	r2
  }

  return USBD_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	0018      	movs	r0, r3
 800b81c:	46bd      	mov	sp, r7
 800b81e:	b002      	add	sp, #8
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	000a      	movs	r2, r1
 800b82c:	1cfb      	adds	r3, r7, #3
 800b82e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	1cfa      	adds	r2, r7, #3
 800b834:	7812      	ldrb	r2, [r2, #0]
 800b836:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	0018      	movs	r0, r3
 800b83c:	46bd      	mov	sp, r7
 800b83e:	b002      	add	sp, #8
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	23a7      	movs	r3, #167	@ 0xa7
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	5cd1      	ldrb	r1, [r2, r3]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a06      	ldr	r2, [pc, #24]	@ (800b870 <USBD_LL_Suspend+0x2c>)
 800b858:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	23a7      	movs	r3, #167	@ 0xa7
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	2104      	movs	r1, #4
 800b862:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	0018      	movs	r0, r3
 800b868:	46bd      	mov	sp, r7
 800b86a:	b002      	add	sp, #8
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	46c0      	nop			@ (mov r8, r8)
 800b870:	0000029d 	.word	0x0000029d

0800b874 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	23a7      	movs	r3, #167	@ 0xa7
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	5cd3      	ldrb	r3, [r2, r3]
 800b884:	2b04      	cmp	r3, #4
 800b886:	d106      	bne.n	800b896 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a05      	ldr	r2, [pc, #20]	@ (800b8a0 <USBD_LL_Resume+0x2c>)
 800b88c:	5c99      	ldrb	r1, [r3, r2]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	23a7      	movs	r3, #167	@ 0xa7
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	0018      	movs	r0, r3
 800b89a:	46bd      	mov	sp, r7
 800b89c:	b002      	add	sp, #8
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	0000029d 	.word	0x0000029d

0800b8a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	23a7      	movs	r3, #167	@ 0xa7
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	5cd3      	ldrb	r3, [r2, r3]
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d10e      	bne.n	800b8d6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	23ad      	movs	r3, #173	@ 0xad
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	58d3      	ldr	r3, [r2, r3]
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d007      	beq.n	800b8d6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	23ad      	movs	r3, #173	@ 0xad
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	58d3      	ldr	r3, [r2, r3]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	0010      	movs	r0, r2
 800b8d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	0018      	movs	r0, r3
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b002      	add	sp, #8
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ea:	230f      	movs	r3, #15
 800b8ec:	18fb      	adds	r3, r7, r3
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	001a      	movs	r2, r3
 800b8f8:	2360      	movs	r3, #96	@ 0x60
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	2b40      	cmp	r3, #64	@ 0x40
 800b8fe:	d004      	beq.n	800b90a <USBD_StdDevReq+0x2a>
 800b900:	d84f      	bhi.n	800b9a2 <USBD_StdDevReq+0xc2>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00b      	beq.n	800b91e <USBD_StdDevReq+0x3e>
 800b906:	2b20      	cmp	r3, #32
 800b908:	d14b      	bne.n	800b9a2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	23ad      	movs	r3, #173	@ 0xad
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	58d3      	ldr	r3, [r2, r3]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	0010      	movs	r0, r2
 800b91a:	4798      	blx	r3
      break;
 800b91c:	e048      	b.n	800b9b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	785b      	ldrb	r3, [r3, #1]
 800b922:	2b09      	cmp	r3, #9
 800b924:	d835      	bhi.n	800b992 <USBD_StdDevReq+0xb2>
 800b926:	009a      	lsls	r2, r3, #2
 800b928:	4b25      	ldr	r3, [pc, #148]	@ (800b9c0 <USBD_StdDevReq+0xe0>)
 800b92a:	18d3      	adds	r3, r2, r3
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	0011      	movs	r1, r2
 800b936:	0018      	movs	r0, r3
 800b938:	f000 fa52 	bl	800bde0 <USBD_GetDescriptor>
          break;
 800b93c:	e030      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	0011      	movs	r1, r2
 800b944:	0018      	movs	r0, r3
 800b946:	f000 fbfd 	bl	800c144 <USBD_SetAddress>
          break;
 800b94a:	e029      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	0011      	movs	r1, r2
 800b952:	0018      	movs	r0, r3
 800b954:	f000 fc4a 	bl	800c1ec <USBD_SetConfig>
          break;
 800b958:	e022      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	0011      	movs	r1, r2
 800b960:	0018      	movs	r0, r3
 800b962:	f000 fce7 	bl	800c334 <USBD_GetConfig>
          break;
 800b966:	e01b      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	0011      	movs	r1, r2
 800b96e:	0018      	movs	r0, r3
 800b970:	f000 fd1b 	bl	800c3aa <USBD_GetStatus>
          break;
 800b974:	e014      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	0011      	movs	r1, r2
 800b97c:	0018      	movs	r0, r3
 800b97e:	f000 fd4e 	bl	800c41e <USBD_SetFeature>
          break;
 800b982:	e00d      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	0011      	movs	r1, r2
 800b98a:	0018      	movs	r0, r3
 800b98c:	f000 fd5d 	bl	800c44a <USBD_ClrFeature>
          break;
 800b990:	e006      	b.n	800b9a0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	0011      	movs	r1, r2
 800b998:	0018      	movs	r0, r3
 800b99a:	f000 fdb4 	bl	800c506 <USBD_CtlError>
          break;
 800b99e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b9a0:	e006      	b.n	800b9b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	0011      	movs	r1, r2
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f000 fdac 	bl	800c506 <USBD_CtlError>
      break;
 800b9ae:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800b9b0:	230f      	movs	r3, #15
 800b9b2:	18fb      	adds	r3, r7, r3
 800b9b4:	781b      	ldrb	r3, [r3, #0]
}
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	b004      	add	sp, #16
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	46c0      	nop			@ (mov r8, r8)
 800b9c0:	0800feb8 	.word	0x0800feb8

0800b9c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b9c4:	b5b0      	push	{r4, r5, r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ce:	230f      	movs	r3, #15
 800b9d0:	18fb      	adds	r3, r7, r3
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	001a      	movs	r2, r3
 800b9dc:	2360      	movs	r3, #96	@ 0x60
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b40      	cmp	r3, #64	@ 0x40
 800b9e2:	d004      	beq.n	800b9ee <USBD_StdItfReq+0x2a>
 800b9e4:	d839      	bhi.n	800ba5a <USBD_StdItfReq+0x96>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d001      	beq.n	800b9ee <USBD_StdItfReq+0x2a>
 800b9ea:	2b20      	cmp	r3, #32
 800b9ec:	d135      	bne.n	800ba5a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	23a7      	movs	r3, #167	@ 0xa7
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	5cd3      	ldrb	r3, [r2, r3]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d825      	bhi.n	800ba48 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	889b      	ldrh	r3, [r3, #4]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d819      	bhi.n	800ba3a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	23ad      	movs	r3, #173	@ 0xad
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	58d3      	ldr	r3, [r2, r3]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	250f      	movs	r5, #15
 800ba12:	197c      	adds	r4, r7, r5
 800ba14:	6839      	ldr	r1, [r7, #0]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	0010      	movs	r0, r2
 800ba1a:	4798      	blx	r3
 800ba1c:	0003      	movs	r3, r0
 800ba1e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	88db      	ldrh	r3, [r3, #6]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d116      	bne.n	800ba56 <USBD_StdItfReq+0x92>
 800ba28:	197b      	adds	r3, r7, r5
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d112      	bne.n	800ba56 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	0018      	movs	r0, r3
 800ba34:	f000 fe4f 	bl	800c6d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba38:	e00d      	b.n	800ba56 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	0011      	movs	r1, r2
 800ba40:	0018      	movs	r0, r3
 800ba42:	f000 fd60 	bl	800c506 <USBD_CtlError>
          break;
 800ba46:	e006      	b.n	800ba56 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	0011      	movs	r1, r2
 800ba4e:	0018      	movs	r0, r3
 800ba50:	f000 fd59 	bl	800c506 <USBD_CtlError>
          break;
 800ba54:	e000      	b.n	800ba58 <USBD_StdItfReq+0x94>
          break;
 800ba56:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800ba58:	e006      	b.n	800ba68 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	0011      	movs	r1, r2
 800ba60:	0018      	movs	r0, r3
 800ba62:	f000 fd50 	bl	800c506 <USBD_CtlError>
      break;
 800ba66:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	b004      	add	sp, #16
 800ba70:	bdb0      	pop	{r4, r5, r7, pc}

0800ba72 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ba72:	b5b0      	push	{r4, r5, r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7c:	230f      	movs	r3, #15
 800ba7e:	18fb      	adds	r3, r7, r3
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	889a      	ldrh	r2, [r3, #4]
 800ba88:	230e      	movs	r3, #14
 800ba8a:	18fb      	adds	r3, r7, r3
 800ba8c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	001a      	movs	r2, r3
 800ba94:	2360      	movs	r3, #96	@ 0x60
 800ba96:	4013      	ands	r3, r2
 800ba98:	2b40      	cmp	r3, #64	@ 0x40
 800ba9a:	d006      	beq.n	800baaa <USBD_StdEPReq+0x38>
 800ba9c:	d900      	bls.n	800baa0 <USBD_StdEPReq+0x2e>
 800ba9e:	e190      	b.n	800bdc2 <USBD_StdEPReq+0x350>
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00c      	beq.n	800babe <USBD_StdEPReq+0x4c>
 800baa4:	2b20      	cmp	r3, #32
 800baa6:	d000      	beq.n	800baaa <USBD_StdEPReq+0x38>
 800baa8:	e18b      	b.n	800bdc2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	23ad      	movs	r3, #173	@ 0xad
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	58d3      	ldr	r3, [r2, r3]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	0010      	movs	r0, r2
 800baba:	4798      	blx	r3
      break;
 800babc:	e188      	b.n	800bdd0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	001a      	movs	r2, r3
 800bac4:	2360      	movs	r3, #96	@ 0x60
 800bac6:	4013      	ands	r3, r2
 800bac8:	2b20      	cmp	r3, #32
 800baca:	d10f      	bne.n	800baec <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	23ad      	movs	r3, #173	@ 0xad
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	58d3      	ldr	r3, [r2, r3]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	250f      	movs	r5, #15
 800bad8:	197c      	adds	r4, r7, r5
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	0010      	movs	r0, r2
 800bae0:	4798      	blx	r3
 800bae2:	0003      	movs	r3, r0
 800bae4:	7023      	strb	r3, [r4, #0]

        return ret;
 800bae6:	197b      	adds	r3, r7, r5
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	e174      	b.n	800bdd6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d007      	beq.n	800bb04 <USBD_StdEPReq+0x92>
 800baf4:	dd00      	ble.n	800baf8 <USBD_StdEPReq+0x86>
 800baf6:	e15c      	b.n	800bdb2 <USBD_StdEPReq+0x340>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d100      	bne.n	800bafe <USBD_StdEPReq+0x8c>
 800bafc:	e092      	b.n	800bc24 <USBD_StdEPReq+0x1b2>
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d04b      	beq.n	800bb9a <USBD_StdEPReq+0x128>
 800bb02:	e156      	b.n	800bdb2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	23a7      	movs	r3, #167	@ 0xa7
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	5cd3      	ldrb	r3, [r2, r3]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d002      	beq.n	800bb16 <USBD_StdEPReq+0xa4>
 800bb10:	2b03      	cmp	r3, #3
 800bb12:	d01d      	beq.n	800bb50 <USBD_StdEPReq+0xde>
 800bb14:	e039      	b.n	800bb8a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb16:	220e      	movs	r2, #14
 800bb18:	18bb      	adds	r3, r7, r2
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d010      	beq.n	800bb42 <USBD_StdEPReq+0xd0>
 800bb20:	18bb      	adds	r3, r7, r2
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b80      	cmp	r3, #128	@ 0x80
 800bb26:	d00c      	beq.n	800bb42 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bb28:	18bb      	adds	r3, r7, r2
 800bb2a:	781a      	ldrb	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	0011      	movs	r1, r2
 800bb30:	0018      	movs	r0, r3
 800bb32:	f001 fa1e 	bl	800cf72 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2180      	movs	r1, #128	@ 0x80
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	f001 fa19 	bl	800cf72 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb40:	e02a      	b.n	800bb98 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	0011      	movs	r1, r2
 800bb48:	0018      	movs	r0, r3
 800bb4a:	f000 fcdc 	bl	800c506 <USBD_CtlError>
              break;
 800bb4e:	e023      	b.n	800bb98 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	885b      	ldrh	r3, [r3, #2]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d113      	bne.n	800bb80 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800bb58:	220e      	movs	r2, #14
 800bb5a:	18bb      	adds	r3, r7, r2
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00e      	beq.n	800bb80 <USBD_StdEPReq+0x10e>
 800bb62:	18bb      	adds	r3, r7, r2
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	2b80      	cmp	r3, #128	@ 0x80
 800bb68:	d00a      	beq.n	800bb80 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	88db      	ldrh	r3, [r3, #6]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bb72:	18bb      	adds	r3, r7, r2
 800bb74:	781a      	ldrb	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	0011      	movs	r1, r2
 800bb7a:	0018      	movs	r0, r3
 800bb7c:	f001 f9f9 	bl	800cf72 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	0018      	movs	r0, r3
 800bb84:	f000 fda7 	bl	800c6d6 <USBD_CtlSendStatus>

              break;
 800bb88:	e006      	b.n	800bb98 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800bb8a:	683a      	ldr	r2, [r7, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	0011      	movs	r1, r2
 800bb90:	0018      	movs	r0, r3
 800bb92:	f000 fcb8 	bl	800c506 <USBD_CtlError>
              break;
 800bb96:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bb98:	e112      	b.n	800bdc0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	23a7      	movs	r3, #167	@ 0xa7
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	5cd3      	ldrb	r3, [r2, r3]
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d002      	beq.n	800bbac <USBD_StdEPReq+0x13a>
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d01d      	beq.n	800bbe6 <USBD_StdEPReq+0x174>
 800bbaa:	e032      	b.n	800bc12 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbac:	220e      	movs	r2, #14
 800bbae:	18bb      	adds	r3, r7, r2
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d010      	beq.n	800bbd8 <USBD_StdEPReq+0x166>
 800bbb6:	18bb      	adds	r3, r7, r2
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	2b80      	cmp	r3, #128	@ 0x80
 800bbbc:	d00c      	beq.n	800bbd8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bbbe:	18bb      	adds	r3, r7, r2
 800bbc0:	781a      	ldrb	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	0011      	movs	r1, r2
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	f001 f9d3 	bl	800cf72 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2180      	movs	r1, #128	@ 0x80
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f001 f9ce 	bl	800cf72 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbd6:	e024      	b.n	800bc22 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	0011      	movs	r1, r2
 800bbde:	0018      	movs	r0, r3
 800bbe0:	f000 fc91 	bl	800c506 <USBD_CtlError>
              break;
 800bbe4:	e01d      	b.n	800bc22 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	885b      	ldrh	r3, [r3, #2]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d118      	bne.n	800bc20 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bbee:	210e      	movs	r1, #14
 800bbf0:	187b      	adds	r3, r7, r1
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	227f      	movs	r2, #127	@ 0x7f
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	d006      	beq.n	800bc08 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bbfa:	187b      	adds	r3, r7, r1
 800bbfc:	781a      	ldrb	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	0011      	movs	r1, r2
 800bc02:	0018      	movs	r0, r3
 800bc04:	f001 f9e0 	bl	800cfc8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	f000 fd63 	bl	800c6d6 <USBD_CtlSendStatus>
              }
              break;
 800bc10:	e006      	b.n	800bc20 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	0011      	movs	r1, r2
 800bc18:	0018      	movs	r0, r3
 800bc1a:	f000 fc74 	bl	800c506 <USBD_CtlError>
              break;
 800bc1e:	e000      	b.n	800bc22 <USBD_StdEPReq+0x1b0>
              break;
 800bc20:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bc22:	e0cd      	b.n	800bdc0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	23a7      	movs	r3, #167	@ 0xa7
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	5cd3      	ldrb	r3, [r2, r3]
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d002      	beq.n	800bc36 <USBD_StdEPReq+0x1c4>
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d03c      	beq.n	800bcae <USBD_StdEPReq+0x23c>
 800bc34:	e0b5      	b.n	800bda2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc36:	220e      	movs	r2, #14
 800bc38:	18bb      	adds	r3, r7, r2
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00a      	beq.n	800bc56 <USBD_StdEPReq+0x1e4>
 800bc40:	18bb      	adds	r3, r7, r2
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b80      	cmp	r3, #128	@ 0x80
 800bc46:	d006      	beq.n	800bc56 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	0011      	movs	r1, r2
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f000 fc59 	bl	800c506 <USBD_CtlError>
                break;
 800bc54:	e0ac      	b.n	800bdb0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc56:	220e      	movs	r2, #14
 800bc58:	18bb      	adds	r3, r7, r2
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	b25b      	sxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	da0c      	bge.n	800bc7c <USBD_StdEPReq+0x20a>
 800bc62:	18bb      	adds	r3, r7, r2
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	227f      	movs	r2, #127	@ 0x7f
 800bc68:	401a      	ands	r2, r3
 800bc6a:	0013      	movs	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	189b      	adds	r3, r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	3310      	adds	r3, #16
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	18d3      	adds	r3, r2, r3
 800bc78:	3304      	adds	r3, #4
 800bc7a:	e00d      	b.n	800bc98 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc7c:	230e      	movs	r3, #14
 800bc7e:	18fb      	adds	r3, r7, r3
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	227f      	movs	r2, #127	@ 0x7f
 800bc84:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc86:	0013      	movs	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	189b      	adds	r3, r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	3351      	adds	r3, #81	@ 0x51
 800bc90:	33ff      	adds	r3, #255	@ 0xff
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	18d3      	adds	r3, r2, r3
 800bc96:	3304      	adds	r3, #4
 800bc98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bca0:	68b9      	ldr	r1, [r7, #8]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2202      	movs	r2, #2
 800bca6:	0018      	movs	r0, r3
 800bca8:	f000 fcab 	bl	800c602 <USBD_CtlSendData>
              break;
 800bcac:	e080      	b.n	800bdb0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bcae:	220e      	movs	r2, #14
 800bcb0:	18bb      	adds	r3, r7, r2
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	b25b      	sxtb	r3, r3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da14      	bge.n	800bce4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcba:	18bb      	adds	r3, r7, r2
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	220f      	movs	r2, #15
 800bcc0:	401a      	ands	r2, r3
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	0013      	movs	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	189b      	adds	r3, r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	18cb      	adds	r3, r1, r3
 800bcce:	3318      	adds	r3, #24
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d11e      	bne.n	800bd14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	0011      	movs	r1, r2
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f000 fc12 	bl	800c506 <USBD_CtlError>
                  break;
 800bce2:	e065      	b.n	800bdb0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bce4:	230e      	movs	r3, #14
 800bce6:	18fb      	adds	r3, r7, r3
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	220f      	movs	r2, #15
 800bcec:	401a      	ands	r2, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	23ac      	movs	r3, #172	@ 0xac
 800bcf2:	0059      	lsls	r1, r3, #1
 800bcf4:	0013      	movs	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	189b      	adds	r3, r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	18c3      	adds	r3, r0, r3
 800bcfe:	185b      	adds	r3, r3, r1
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d106      	bne.n	800bd14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	0011      	movs	r1, r2
 800bd0c:	0018      	movs	r0, r3
 800bd0e:	f000 fbfa 	bl	800c506 <USBD_CtlError>
                  break;
 800bd12:	e04d      	b.n	800bdb0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd14:	220e      	movs	r2, #14
 800bd16:	18bb      	adds	r3, r7, r2
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	b25b      	sxtb	r3, r3
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	da0c      	bge.n	800bd3a <USBD_StdEPReq+0x2c8>
 800bd20:	18bb      	adds	r3, r7, r2
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	227f      	movs	r2, #127	@ 0x7f
 800bd26:	401a      	ands	r2, r3
 800bd28:	0013      	movs	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	189b      	adds	r3, r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	3310      	adds	r3, #16
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	18d3      	adds	r3, r2, r3
 800bd36:	3304      	adds	r3, #4
 800bd38:	e00d      	b.n	800bd56 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd3a:	230e      	movs	r3, #14
 800bd3c:	18fb      	adds	r3, r7, r3
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	227f      	movs	r2, #127	@ 0x7f
 800bd42:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd44:	0013      	movs	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	189b      	adds	r3, r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	3351      	adds	r3, #81	@ 0x51
 800bd4e:	33ff      	adds	r3, #255	@ 0xff
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	18d3      	adds	r3, r2, r3
 800bd54:	3304      	adds	r3, #4
 800bd56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd58:	220e      	movs	r2, #14
 800bd5a:	18bb      	adds	r3, r7, r2
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <USBD_StdEPReq+0x2f8>
 800bd62:	18bb      	adds	r3, r7, r2
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b80      	cmp	r3, #128	@ 0x80
 800bd68:	d103      	bne.n	800bd72 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	e010      	b.n	800bd94 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bd72:	230e      	movs	r3, #14
 800bd74:	18fb      	adds	r3, r7, r3
 800bd76:	781a      	ldrb	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	0011      	movs	r1, r2
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f001 f94e 	bl	800d01e <USBD_LL_IsStallEP>
 800bd82:	1e03      	subs	r3, r0, #0
 800bd84:	d003      	beq.n	800bd8e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	e002      	b.n	800bd94 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	2200      	movs	r2, #0
 800bd92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2202      	movs	r2, #2
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f000 fc31 	bl	800c602 <USBD_CtlSendData>
              break;
 800bda0:	e006      	b.n	800bdb0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	0011      	movs	r1, r2
 800bda8:	0018      	movs	r0, r3
 800bdaa:	f000 fbac 	bl	800c506 <USBD_CtlError>
              break;
 800bdae:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bdb0:	e006      	b.n	800bdc0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	0011      	movs	r1, r2
 800bdb8:	0018      	movs	r0, r3
 800bdba:	f000 fba4 	bl	800c506 <USBD_CtlError>
          break;
 800bdbe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bdc0:	e006      	b.n	800bdd0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	0011      	movs	r1, r2
 800bdc8:	0018      	movs	r0, r3
 800bdca:	f000 fb9c 	bl	800c506 <USBD_CtlError>
      break;
 800bdce:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bdd0:	230f      	movs	r3, #15
 800bdd2:	18fb      	adds	r3, r7, r3
 800bdd4:	781b      	ldrb	r3, [r3, #0]
}
 800bdd6:	0018      	movs	r0, r3
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	b004      	add	sp, #16
 800bddc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bde0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdea:	2308      	movs	r3, #8
 800bdec:	18fb      	adds	r3, r7, r3
 800bdee:	2200      	movs	r2, #0
 800bdf0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdf6:	230b      	movs	r3, #11
 800bdf8:	18fb      	adds	r3, r7, r3
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	885b      	ldrh	r3, [r3, #2]
 800be02:	0a1b      	lsrs	r3, r3, #8
 800be04:	b29b      	uxth	r3, r3
 800be06:	2b07      	cmp	r3, #7
 800be08:	d900      	bls.n	800be0c <USBD_GetDescriptor+0x2c>
 800be0a:	e159      	b.n	800c0c0 <USBD_GetDescriptor+0x2e0>
 800be0c:	009a      	lsls	r2, r3, #2
 800be0e:	4bcb      	ldr	r3, [pc, #812]	@ (800c13c <USBD_GetDescriptor+0x35c>)
 800be10:	18d3      	adds	r3, r2, r3
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	23ac      	movs	r3, #172	@ 0xac
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	58d3      	ldr	r3, [r2, r3]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	7c12      	ldrb	r2, [r2, #16]
 800be24:	2108      	movs	r1, #8
 800be26:	1879      	adds	r1, r7, r1
 800be28:	0010      	movs	r0, r2
 800be2a:	4798      	blx	r3
 800be2c:	0003      	movs	r3, r0
 800be2e:	60fb      	str	r3, [r7, #12]
      break;
 800be30:	e153      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	7c1b      	ldrb	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10f      	bne.n	800be5a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	23ad      	movs	r3, #173	@ 0xad
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	58d3      	ldr	r3, [r2, r3]
 800be42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be44:	2208      	movs	r2, #8
 800be46:	18ba      	adds	r2, r7, r2
 800be48:	0010      	movs	r0, r2
 800be4a:	4798      	blx	r3
 800be4c:	0003      	movs	r3, r0
 800be4e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3301      	adds	r3, #1
 800be54:	2202      	movs	r2, #2
 800be56:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be58:	e13f      	b.n	800c0da <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	23ad      	movs	r3, #173	@ 0xad
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	58d3      	ldr	r3, [r2, r3]
 800be62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be64:	2208      	movs	r2, #8
 800be66:	18ba      	adds	r2, r7, r2
 800be68:	0010      	movs	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	0003      	movs	r3, r0
 800be6e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	3301      	adds	r3, #1
 800be74:	2202      	movs	r2, #2
 800be76:	701a      	strb	r2, [r3, #0]
      break;
 800be78:	e12f      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	885b      	ldrh	r3, [r3, #2]
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b05      	cmp	r3, #5
 800be82:	d900      	bls.n	800be86 <USBD_GetDescriptor+0xa6>
 800be84:	e0d0      	b.n	800c028 <USBD_GetDescriptor+0x248>
 800be86:	009a      	lsls	r2, r3, #2
 800be88:	4bad      	ldr	r3, [pc, #692]	@ (800c140 <USBD_GetDescriptor+0x360>)
 800be8a:	18d3      	adds	r3, r2, r3
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	23ac      	movs	r3, #172	@ 0xac
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	58d3      	ldr	r3, [r2, r3]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00d      	beq.n	800beba <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	23ac      	movs	r3, #172	@ 0xac
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	58d3      	ldr	r3, [r2, r3]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	7c12      	ldrb	r2, [r2, #16]
 800beac:	2108      	movs	r1, #8
 800beae:	1879      	adds	r1, r7, r1
 800beb0:	0010      	movs	r0, r2
 800beb2:	4798      	blx	r3
 800beb4:	0003      	movs	r3, r0
 800beb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beb8:	e0c3      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	0011      	movs	r1, r2
 800bec0:	0018      	movs	r0, r3
 800bec2:	f000 fb20 	bl	800c506 <USBD_CtlError>
            err++;
 800bec6:	210b      	movs	r1, #11
 800bec8:	187b      	adds	r3, r7, r1
 800beca:	781a      	ldrb	r2, [r3, #0]
 800becc:	187b      	adds	r3, r7, r1
 800bece:	3201      	adds	r2, #1
 800bed0:	701a      	strb	r2, [r3, #0]
          break;
 800bed2:	e0b6      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	23ac      	movs	r3, #172	@ 0xac
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	58d3      	ldr	r3, [r2, r3]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00d      	beq.n	800befe <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	23ac      	movs	r3, #172	@ 0xac
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	58d3      	ldr	r3, [r2, r3]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	2108      	movs	r1, #8
 800bef2:	1879      	adds	r1, r7, r1
 800bef4:	0010      	movs	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	0003      	movs	r3, r0
 800befa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befc:	e0a1      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	0011      	movs	r1, r2
 800bf04:	0018      	movs	r0, r3
 800bf06:	f000 fafe 	bl	800c506 <USBD_CtlError>
            err++;
 800bf0a:	210b      	movs	r1, #11
 800bf0c:	187b      	adds	r3, r7, r1
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	187b      	adds	r3, r7, r1
 800bf12:	3201      	adds	r2, #1
 800bf14:	701a      	strb	r2, [r3, #0]
          break;
 800bf16:	e094      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	23ac      	movs	r3, #172	@ 0xac
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	58d3      	ldr	r3, [r2, r3]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d00d      	beq.n	800bf42 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	23ac      	movs	r3, #172	@ 0xac
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	58d3      	ldr	r3, [r2, r3]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7c12      	ldrb	r2, [r2, #16]
 800bf34:	2108      	movs	r1, #8
 800bf36:	1879      	adds	r1, r7, r1
 800bf38:	0010      	movs	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	0003      	movs	r3, r0
 800bf3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf40:	e07f      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	0011      	movs	r1, r2
 800bf48:	0018      	movs	r0, r3
 800bf4a:	f000 fadc 	bl	800c506 <USBD_CtlError>
            err++;
 800bf4e:	210b      	movs	r1, #11
 800bf50:	187b      	adds	r3, r7, r1
 800bf52:	781a      	ldrb	r2, [r3, #0]
 800bf54:	187b      	adds	r3, r7, r1
 800bf56:	3201      	adds	r2, #1
 800bf58:	701a      	strb	r2, [r3, #0]
          break;
 800bf5a:	e072      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	23ac      	movs	r3, #172	@ 0xac
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	58d3      	ldr	r3, [r2, r3]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00d      	beq.n	800bf86 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	23ac      	movs	r3, #172	@ 0xac
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	58d3      	ldr	r3, [r2, r3]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	7c12      	ldrb	r2, [r2, #16]
 800bf78:	2108      	movs	r1, #8
 800bf7a:	1879      	adds	r1, r7, r1
 800bf7c:	0010      	movs	r0, r2
 800bf7e:	4798      	blx	r3
 800bf80:	0003      	movs	r3, r0
 800bf82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf84:	e05d      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	0011      	movs	r1, r2
 800bf8c:	0018      	movs	r0, r3
 800bf8e:	f000 faba 	bl	800c506 <USBD_CtlError>
            err++;
 800bf92:	210b      	movs	r1, #11
 800bf94:	187b      	adds	r3, r7, r1
 800bf96:	781a      	ldrb	r2, [r3, #0]
 800bf98:	187b      	adds	r3, r7, r1
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	701a      	strb	r2, [r3, #0]
          break;
 800bf9e:	e050      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	23ac      	movs	r3, #172	@ 0xac
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	58d3      	ldr	r3, [r2, r3]
 800bfa8:	695b      	ldr	r3, [r3, #20]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00d      	beq.n	800bfca <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	23ac      	movs	r3, #172	@ 0xac
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	58d3      	ldr	r3, [r2, r3]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	7c12      	ldrb	r2, [r2, #16]
 800bfbc:	2108      	movs	r1, #8
 800bfbe:	1879      	adds	r1, r7, r1
 800bfc0:	0010      	movs	r0, r2
 800bfc2:	4798      	blx	r3
 800bfc4:	0003      	movs	r3, r0
 800bfc6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfc8:	e03b      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bfca:	683a      	ldr	r2, [r7, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	0011      	movs	r1, r2
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	f000 fa98 	bl	800c506 <USBD_CtlError>
            err++;
 800bfd6:	210b      	movs	r1, #11
 800bfd8:	187b      	adds	r3, r7, r1
 800bfda:	781a      	ldrb	r2, [r3, #0]
 800bfdc:	187b      	adds	r3, r7, r1
 800bfde:	3201      	adds	r2, #1
 800bfe0:	701a      	strb	r2, [r3, #0]
          break;
 800bfe2:	e02e      	b.n	800c042 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	23ac      	movs	r3, #172	@ 0xac
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	58d3      	ldr	r3, [r2, r3]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00d      	beq.n	800c00e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	23ac      	movs	r3, #172	@ 0xac
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	58d3      	ldr	r3, [r2, r3]
 800bffa:	699b      	ldr	r3, [r3, #24]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	7c12      	ldrb	r2, [r2, #16]
 800c000:	2108      	movs	r1, #8
 800c002:	1879      	adds	r1, r7, r1
 800c004:	0010      	movs	r0, r2
 800c006:	4798      	blx	r3
 800c008:	0003      	movs	r3, r0
 800c00a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c00c:	e019      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	0011      	movs	r1, r2
 800c014:	0018      	movs	r0, r3
 800c016:	f000 fa76 	bl	800c506 <USBD_CtlError>
            err++;
 800c01a:	210b      	movs	r1, #11
 800c01c:	187b      	adds	r3, r7, r1
 800c01e:	781a      	ldrb	r2, [r3, #0]
 800c020:	187b      	adds	r3, r7, r1
 800c022:	3201      	adds	r2, #1
 800c024:	701a      	strb	r2, [r3, #0]
          break;
 800c026:	e00c      	b.n	800c042 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	0011      	movs	r1, r2
 800c02e:	0018      	movs	r0, r3
 800c030:	f000 fa69 	bl	800c506 <USBD_CtlError>
          err++;
 800c034:	210b      	movs	r1, #11
 800c036:	187b      	adds	r3, r7, r1
 800c038:	781a      	ldrb	r2, [r3, #0]
 800c03a:	187b      	adds	r3, r7, r1
 800c03c:	3201      	adds	r2, #1
 800c03e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c040:	e04b      	b.n	800c0da <USBD_GetDescriptor+0x2fa>
 800c042:	e04a      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7c1b      	ldrb	r3, [r3, #16]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10b      	bne.n	800c064 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	23ad      	movs	r3, #173	@ 0xad
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	58d3      	ldr	r3, [r2, r3]
 800c054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c056:	2208      	movs	r2, #8
 800c058:	18ba      	adds	r2, r7, r2
 800c05a:	0010      	movs	r0, r2
 800c05c:	4798      	blx	r3
 800c05e:	0003      	movs	r3, r0
 800c060:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c062:	e03a      	b.n	800c0da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	0011      	movs	r1, r2
 800c06a:	0018      	movs	r0, r3
 800c06c:	f000 fa4b 	bl	800c506 <USBD_CtlError>
        err++;
 800c070:	210b      	movs	r1, #11
 800c072:	187b      	adds	r3, r7, r1
 800c074:	781a      	ldrb	r2, [r3, #0]
 800c076:	187b      	adds	r3, r7, r1
 800c078:	3201      	adds	r2, #1
 800c07a:	701a      	strb	r2, [r3, #0]
      break;
 800c07c:	e02d      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7c1b      	ldrb	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10f      	bne.n	800c0a6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	23ad      	movs	r3, #173	@ 0xad
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	58d3      	ldr	r3, [r2, r3]
 800c08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c090:	2208      	movs	r2, #8
 800c092:	18ba      	adds	r2, r7, r2
 800c094:	0010      	movs	r0, r2
 800c096:	4798      	blx	r3
 800c098:	0003      	movs	r3, r0
 800c09a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	2207      	movs	r2, #7
 800c0a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0a4:	e019      	b.n	800c0da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	0011      	movs	r1, r2
 800c0ac:	0018      	movs	r0, r3
 800c0ae:	f000 fa2a 	bl	800c506 <USBD_CtlError>
        err++;
 800c0b2:	210b      	movs	r1, #11
 800c0b4:	187b      	adds	r3, r7, r1
 800c0b6:	781a      	ldrb	r2, [r3, #0]
 800c0b8:	187b      	adds	r3, r7, r1
 800c0ba:	3201      	adds	r2, #1
 800c0bc:	701a      	strb	r2, [r3, #0]
      break;
 800c0be:	e00c      	b.n	800c0da <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	0011      	movs	r1, r2
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f000 fa1d 	bl	800c506 <USBD_CtlError>
      err++;
 800c0cc:	210b      	movs	r1, #11
 800c0ce:	187b      	adds	r3, r7, r1
 800c0d0:	781a      	ldrb	r2, [r3, #0]
 800c0d2:	187b      	adds	r3, r7, r1
 800c0d4:	3201      	adds	r2, #1
 800c0d6:	701a      	strb	r2, [r3, #0]
      break;
 800c0d8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800c0da:	230b      	movs	r3, #11
 800c0dc:	18fb      	adds	r3, r7, r3
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d127      	bne.n	800c134 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c0e4:	2108      	movs	r1, #8
 800c0e6:	187b      	adds	r3, r7, r1
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d019      	beq.n	800c122 <USBD_GetDescriptor+0x342>
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	88db      	ldrh	r3, [r3, #6]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d015      	beq.n	800c122 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	88da      	ldrh	r2, [r3, #6]
 800c0fa:	187b      	adds	r3, r7, r1
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	1c18      	adds	r0, r3, #0
 800c100:	1c11      	adds	r1, r2, #0
 800c102:	b28a      	uxth	r2, r1
 800c104:	b283      	uxth	r3, r0
 800c106:	429a      	cmp	r2, r3
 800c108:	d900      	bls.n	800c10c <USBD_GetDescriptor+0x32c>
 800c10a:	1c01      	adds	r1, r0, #0
 800c10c:	b28a      	uxth	r2, r1
 800c10e:	2108      	movs	r1, #8
 800c110:	187b      	adds	r3, r7, r1
 800c112:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c114:	187b      	adds	r3, r7, r1
 800c116:	881a      	ldrh	r2, [r3, #0]
 800c118:	68f9      	ldr	r1, [r7, #12]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	0018      	movs	r0, r3
 800c11e:	f000 fa70 	bl	800c602 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	88db      	ldrh	r3, [r3, #6]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d105      	bne.n	800c136 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	0018      	movs	r0, r3
 800c12e:	f000 fad2 	bl	800c6d6 <USBD_CtlSendStatus>
 800c132:	e000      	b.n	800c136 <USBD_GetDescriptor+0x356>
    return;
 800c134:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c136:	46bd      	mov	sp, r7
 800c138:	b004      	add	sp, #16
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	0800fee0 	.word	0x0800fee0
 800c140:	0800ff00 	.word	0x0800ff00

0800c144 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c144:	b590      	push	{r4, r7, lr}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	889b      	ldrh	r3, [r3, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d13d      	bne.n	800c1d2 <USBD_SetAddress+0x8e>
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	88db      	ldrh	r3, [r3, #6]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d139      	bne.n	800c1d2 <USBD_SetAddress+0x8e>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	885b      	ldrh	r3, [r3, #2]
 800c162:	2b7f      	cmp	r3, #127	@ 0x7f
 800c164:	d835      	bhi.n	800c1d2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	885b      	ldrh	r3, [r3, #2]
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	230f      	movs	r3, #15
 800c16e:	18fb      	adds	r3, r7, r3
 800c170:	217f      	movs	r1, #127	@ 0x7f
 800c172:	400a      	ands	r2, r1
 800c174:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	23a7      	movs	r3, #167	@ 0xa7
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	5cd3      	ldrb	r3, [r2, r3]
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d106      	bne.n	800c190 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	0011      	movs	r1, r2
 800c188:	0018      	movs	r0, r3
 800c18a:	f000 f9bc 	bl	800c506 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c18e:	e027      	b.n	800c1e0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	240f      	movs	r4, #15
 800c194:	193a      	adds	r2, r7, r4
 800c196:	4914      	ldr	r1, [pc, #80]	@ (800c1e8 <USBD_SetAddress+0xa4>)
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c19c:	193b      	adds	r3, r7, r4
 800c19e:	781a      	ldrb	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	0011      	movs	r1, r2
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	f000 ff6a 	bl	800d07e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	f000 fa92 	bl	800c6d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1b2:	193b      	adds	r3, r7, r4
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	23a7      	movs	r3, #167	@ 0xa7
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	2102      	movs	r1, #2
 800c1c2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c4:	e00c      	b.n	800c1e0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	23a7      	movs	r3, #167	@ 0xa7
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	2101      	movs	r1, #1
 800c1ce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d0:	e006      	b.n	800c1e0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	0011      	movs	r1, r2
 800c1d8:	0018      	movs	r0, r3
 800c1da:	f000 f994 	bl	800c506 <USBD_CtlError>
  }
}
 800c1de:	46c0      	nop			@ (mov r8, r8)
 800c1e0:	46c0      	nop			@ (mov r8, r8)
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	b005      	add	sp, #20
 800c1e6:	bd90      	pop	{r4, r7, pc}
 800c1e8:	0000029e 	.word	0x0000029e

0800c1ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	885b      	ldrh	r3, [r3, #2]
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	4b4c      	ldr	r3, [pc, #304]	@ (800c330 <USBD_SetConfig+0x144>)
 800c1fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c200:	4b4b      	ldr	r3, [pc, #300]	@ (800c330 <USBD_SetConfig+0x144>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d906      	bls.n	800c216 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	0011      	movs	r1, r2
 800c20e:	0018      	movs	r0, r3
 800c210:	f000 f979 	bl	800c506 <USBD_CtlError>
 800c214:	e088      	b.n	800c328 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	23a7      	movs	r3, #167	@ 0xa7
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	5cd3      	ldrb	r3, [r2, r3]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d002      	beq.n	800c228 <USBD_SetConfig+0x3c>
 800c222:	2b03      	cmp	r3, #3
 800c224:	d029      	beq.n	800c27a <USBD_SetConfig+0x8e>
 800c226:	e071      	b.n	800c30c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c228:	4b41      	ldr	r3, [pc, #260]	@ (800c330 <USBD_SetConfig+0x144>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d01f      	beq.n	800c270 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c230:	4b3f      	ldr	r3, [pc, #252]	@ (800c330 <USBD_SetConfig+0x144>)
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	001a      	movs	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	23a7      	movs	r3, #167	@ 0xa7
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	2103      	movs	r1, #3
 800c242:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c244:	4b3a      	ldr	r3, [pc, #232]	@ (800c330 <USBD_SetConfig+0x144>)
 800c246:	781a      	ldrb	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	0011      	movs	r1, r2
 800c24c:	0018      	movs	r0, r3
 800c24e:	f7ff f8c6 	bl	800b3de <USBD_SetClassConfig>
 800c252:	0003      	movs	r3, r0
 800c254:	2b02      	cmp	r3, #2
 800c256:	d106      	bne.n	800c266 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	0011      	movs	r1, r2
 800c25e:	0018      	movs	r0, r3
 800c260:	f000 f951 	bl	800c506 <USBD_CtlError>
            return;
 800c264:	e060      	b.n	800c328 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	0018      	movs	r0, r3
 800c26a:	f000 fa34 	bl	800c6d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c26e:	e05b      	b.n	800c328 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	0018      	movs	r0, r3
 800c274:	f000 fa2f 	bl	800c6d6 <USBD_CtlSendStatus>
        break;
 800c278:	e056      	b.n	800c328 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c27a:	4b2d      	ldr	r3, [pc, #180]	@ (800c330 <USBD_SetConfig+0x144>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d115      	bne.n	800c2ae <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	23a7      	movs	r3, #167	@ 0xa7
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	2102      	movs	r1, #2
 800c28a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c28c:	4b28      	ldr	r3, [pc, #160]	@ (800c330 <USBD_SetConfig+0x144>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	001a      	movs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c296:	4b26      	ldr	r3, [pc, #152]	@ (800c330 <USBD_SetConfig+0x144>)
 800c298:	781a      	ldrb	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	0011      	movs	r1, r2
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f7ff f8c4 	bl	800b42c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f000 fa15 	bl	800c6d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c2ac:	e03c      	b.n	800c328 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c2ae:	4b20      	ldr	r3, [pc, #128]	@ (800c330 <USBD_SetConfig+0x144>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	001a      	movs	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d022      	beq.n	800c302 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	0011      	movs	r1, r2
 800c2c6:	0018      	movs	r0, r3
 800c2c8:	f7ff f8b0 	bl	800b42c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c2cc:	4b18      	ldr	r3, [pc, #96]	@ (800c330 <USBD_SetConfig+0x144>)
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	001a      	movs	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c2d6:	4b16      	ldr	r3, [pc, #88]	@ (800c330 <USBD_SetConfig+0x144>)
 800c2d8:	781a      	ldrb	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	0011      	movs	r1, r2
 800c2de:	0018      	movs	r0, r3
 800c2e0:	f7ff f87d 	bl	800b3de <USBD_SetClassConfig>
 800c2e4:	0003      	movs	r3, r0
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d106      	bne.n	800c2f8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	0011      	movs	r1, r2
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	f000 f908 	bl	800c506 <USBD_CtlError>
            return;
 800c2f6:	e017      	b.n	800c328 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f000 f9eb 	bl	800c6d6 <USBD_CtlSendStatus>
        break;
 800c300:	e012      	b.n	800c328 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	0018      	movs	r0, r3
 800c306:	f000 f9e6 	bl	800c6d6 <USBD_CtlSendStatus>
        break;
 800c30a:	e00d      	b.n	800c328 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	0011      	movs	r1, r2
 800c312:	0018      	movs	r0, r3
 800c314:	f000 f8f7 	bl	800c506 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c318:	4b05      	ldr	r3, [pc, #20]	@ (800c330 <USBD_SetConfig+0x144>)
 800c31a:	781a      	ldrb	r2, [r3, #0]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	0011      	movs	r1, r2
 800c320:	0018      	movs	r0, r3
 800c322:	f7ff f883 	bl	800b42c <USBD_ClrClassConfig>
        break;
 800c326:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c328:	46bd      	mov	sp, r7
 800c32a:	b002      	add	sp, #8
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	46c0      	nop			@ (mov r8, r8)
 800c330:	200008bc 	.word	0x200008bc

0800c334 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	88db      	ldrh	r3, [r3, #6]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d006      	beq.n	800c354 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	0011      	movs	r1, r2
 800c34c:	0018      	movs	r0, r3
 800c34e:	f000 f8da 	bl	800c506 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c352:	e026      	b.n	800c3a2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	23a7      	movs	r3, #167	@ 0xa7
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	5cd3      	ldrb	r3, [r2, r3]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	dc02      	bgt.n	800c366 <USBD_GetConfig+0x32>
 800c360:	2b00      	cmp	r3, #0
 800c362:	dc03      	bgt.n	800c36c <USBD_GetConfig+0x38>
 800c364:	e016      	b.n	800c394 <USBD_GetConfig+0x60>
 800c366:	2b03      	cmp	r3, #3
 800c368:	d00c      	beq.n	800c384 <USBD_GetConfig+0x50>
 800c36a:	e013      	b.n	800c394 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3308      	adds	r3, #8
 800c376:	0019      	movs	r1, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	0018      	movs	r0, r3
 800c37e:	f000 f940 	bl	800c602 <USBD_CtlSendData>
        break;
 800c382:	e00e      	b.n	800c3a2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	1d19      	adds	r1, r3, #4
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	0018      	movs	r0, r3
 800c38e:	f000 f938 	bl	800c602 <USBD_CtlSendData>
        break;
 800c392:	e006      	b.n	800c3a2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	0011      	movs	r1, r2
 800c39a:	0018      	movs	r0, r3
 800c39c:	f000 f8b3 	bl	800c506 <USBD_CtlError>
        break;
 800c3a0:	46c0      	nop			@ (mov r8, r8)
}
 800c3a2:	46c0      	nop			@ (mov r8, r8)
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	b002      	add	sp, #8
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b082      	sub	sp, #8
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	23a7      	movs	r3, #167	@ 0xa7
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	5cd3      	ldrb	r3, [r2, r3]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d822      	bhi.n	800c408 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	88db      	ldrh	r3, [r3, #6]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d006      	beq.n	800c3d8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	0011      	movs	r1, r2
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	f000 f898 	bl	800c506 <USBD_CtlError>
        break;
 800c3d6:	e01e      	b.n	800c416 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	23a9      	movs	r3, #169	@ 0xa9
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	58d3      	ldr	r3, [r2, r3]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d005      	beq.n	800c3f6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	431a      	orrs	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	330c      	adds	r3, #12
 800c3fa:	0019      	movs	r1, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2202      	movs	r2, #2
 800c400:	0018      	movs	r0, r3
 800c402:	f000 f8fe 	bl	800c602 <USBD_CtlSendData>
      break;
 800c406:	e006      	b.n	800c416 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	0011      	movs	r1, r2
 800c40e:	0018      	movs	r0, r3
 800c410:	f000 f879 	bl	800c506 <USBD_CtlError>
      break;
 800c414:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c416:	46c0      	nop			@ (mov r8, r8)
 800c418:	46bd      	mov	sp, r7
 800c41a:	b002      	add	sp, #8
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	885b      	ldrh	r3, [r3, #2]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d108      	bne.n	800c442 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	23a9      	movs	r3, #169	@ 0xa9
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	2101      	movs	r1, #1
 800c438:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	0018      	movs	r0, r3
 800c43e:	f000 f94a 	bl	800c6d6 <USBD_CtlSendStatus>
  }
}
 800c442:	46c0      	nop			@ (mov r8, r8)
 800c444:	46bd      	mov	sp, r7
 800c446:	b002      	add	sp, #8
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	23a7      	movs	r3, #167	@ 0xa7
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	5cd3      	ldrb	r3, [r2, r3]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	2b02      	cmp	r3, #2
 800c460:	d80d      	bhi.n	800c47e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	885b      	ldrh	r3, [r3, #2]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d110      	bne.n	800c48c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	23a9      	movs	r3, #169	@ 0xa9
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	2100      	movs	r1, #0
 800c472:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	0018      	movs	r0, r3
 800c478:	f000 f92d 	bl	800c6d6 <USBD_CtlSendStatus>
      }
      break;
 800c47c:	e006      	b.n	800c48c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c47e:	683a      	ldr	r2, [r7, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	0011      	movs	r1, r2
 800c484:	0018      	movs	r0, r3
 800c486:	f000 f83e 	bl	800c506 <USBD_CtlError>
      break;
 800c48a:	e000      	b.n	800c48e <USBD_ClrFeature+0x44>
      break;
 800c48c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c48e:	46c0      	nop			@ (mov r8, r8)
 800c490:	46bd      	mov	sp, r7
 800c492:	b002      	add	sp, #8
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	785a      	ldrb	r2, [r3, #1]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	3302      	adds	r3, #2
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	001a      	movs	r2, r3
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	3303      	adds	r3, #3
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	021b      	lsls	r3, r3, #8
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	18d3      	adds	r3, r2, r3
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	001a      	movs	r2, r3
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	3305      	adds	r3, #5
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	021b      	lsls	r3, r3, #8
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	18d3      	adds	r3, r2, r3
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	3306      	adds	r3, #6
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	001a      	movs	r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	3307      	adds	r3, #7
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	18d3      	adds	r3, r2, r3
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	80da      	strh	r2, [r3, #6]

}
 800c4fe:	46c0      	nop			@ (mov r8, r8)
 800c500:	46bd      	mov	sp, r7
 800c502:	b002      	add	sp, #8
 800c504:	bd80      	pop	{r7, pc}

0800c506 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2180      	movs	r1, #128	@ 0x80
 800c514:	0018      	movs	r0, r3
 800c516:	f000 fd2c 	bl	800cf72 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2100      	movs	r1, #0
 800c51e:	0018      	movs	r0, r3
 800c520:	f000 fd27 	bl	800cf72 <USBD_LL_StallEP>
}
 800c524:	46c0      	nop			@ (mov r8, r8)
 800c526:	46bd      	mov	sp, r7
 800c528:	b002      	add	sp, #8
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c52c:	b590      	push	{r4, r7, lr}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c538:	2417      	movs	r4, #23
 800c53a:	193b      	adds	r3, r7, r4
 800c53c:	2200      	movs	r2, #0
 800c53e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d03c      	beq.n	800c5c0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	0018      	movs	r0, r3
 800c54a:	f000 f83d 	bl	800c5c8 <USBD_GetLen>
 800c54e:	0003      	movs	r3, r0
 800c550:	3301      	adds	r3, #1
 800c552:	b29b      	uxth	r3, r3
 800c554:	18db      	adds	r3, r3, r3
 800c556:	b29a      	uxth	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c55c:	193b      	adds	r3, r7, r4
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	193a      	adds	r2, r7, r4
 800c562:	1c59      	adds	r1, r3, #1
 800c564:	7011      	strb	r1, [r2, #0]
 800c566:	001a      	movs	r2, r3
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	189b      	adds	r3, r3, r2
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	7812      	ldrb	r2, [r2, #0]
 800c570:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c572:	193b      	adds	r3, r7, r4
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	193a      	adds	r2, r7, r4
 800c578:	1c59      	adds	r1, r3, #1
 800c57a:	7011      	strb	r1, [r2, #0]
 800c57c:	001a      	movs	r2, r3
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	189b      	adds	r3, r3, r2
 800c582:	2203      	movs	r2, #3
 800c584:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c586:	e017      	b.n	800c5b8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	60fa      	str	r2, [r7, #12]
 800c58e:	2417      	movs	r4, #23
 800c590:	193a      	adds	r2, r7, r4
 800c592:	7812      	ldrb	r2, [r2, #0]
 800c594:	1939      	adds	r1, r7, r4
 800c596:	1c50      	adds	r0, r2, #1
 800c598:	7008      	strb	r0, [r1, #0]
 800c59a:	0011      	movs	r1, r2
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	1852      	adds	r2, r2, r1
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c5a4:	193b      	adds	r3, r7, r4
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	193a      	adds	r2, r7, r4
 800c5aa:	1c59      	adds	r1, r3, #1
 800c5ac:	7011      	strb	r1, [r2, #0]
 800c5ae:	001a      	movs	r2, r3
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	189b      	adds	r3, r3, r2
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e3      	bne.n	800c588 <USBD_GetString+0x5c>
    }
  }
}
 800c5c0:	46c0      	nop			@ (mov r8, r8)
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	b007      	add	sp, #28
 800c5c6:	bd90      	pop	{r4, r7, pc}

0800c5c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5d0:	230f      	movs	r3, #15
 800c5d2:	18fb      	adds	r3, r7, r3
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800c5d8:	e008      	b.n	800c5ec <USBD_GetLen+0x24>
  {
    len++;
 800c5da:	210f      	movs	r1, #15
 800c5dc:	187b      	adds	r3, r7, r1
 800c5de:	781a      	ldrb	r2, [r3, #0]
 800c5e0:	187b      	adds	r3, r7, r1
 800c5e2:	3201      	adds	r2, #1
 800c5e4:	701a      	strb	r2, [r3, #0]
    buf++;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1f2      	bne.n	800c5da <USBD_GetLen+0x12>
  }

  return len;
 800c5f4:	230f      	movs	r3, #15
 800c5f6:	18fb      	adds	r3, r7, r3
 800c5f8:	781b      	ldrb	r3, [r3, #0]
}
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	b004      	add	sp, #16
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	1dbb      	adds	r3, r7, #6
 800c60e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	23a5      	movs	r3, #165	@ 0xa5
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	2102      	movs	r1, #2
 800c618:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c61a:	1dbb      	adds	r3, r7, #6
 800c61c:	881a      	ldrh	r2, [r3, #0]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c622:	1dbb      	adds	r3, r7, #6
 800c624:	881a      	ldrh	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c62a:	1dbb      	adds	r3, r7, #6
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	2100      	movs	r1, #0
 800c634:	f000 fd4e 	bl	800d0d4 <USBD_LL_Transmit>

  return USBD_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	0018      	movs	r0, r3
 800c63c:	46bd      	mov	sp, r7
 800c63e:	b004      	add	sp, #16
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	60f8      	str	r0, [r7, #12]
 800c64a:	60b9      	str	r1, [r7, #8]
 800c64c:	1dbb      	adds	r3, r7, #6
 800c64e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c650:	1dbb      	adds	r3, r7, #6
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	2100      	movs	r1, #0
 800c65a:	f000 fd3b 	bl	800d0d4 <USBD_LL_Transmit>

  return USBD_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	0018      	movs	r0, r3
 800c662:	46bd      	mov	sp, r7
 800c664:	b004      	add	sp, #16
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	1dbb      	adds	r3, r7, #6
 800c674:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	23a5      	movs	r3, #165	@ 0xa5
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	2103      	movs	r1, #3
 800c67e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c680:	1dbb      	adds	r3, r7, #6
 800c682:	8819      	ldrh	r1, [r3, #0]
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	23ae      	movs	r3, #174	@ 0xae
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c68c:	1dbb      	adds	r3, r7, #6
 800c68e:	8819      	ldrh	r1, [r3, #0]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	23b0      	movs	r3, #176	@ 0xb0
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c698:	1dbb      	adds	r3, r7, #6
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f000 fd4e 	bl	800d142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	b004      	add	sp, #16
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	1dbb      	adds	r3, r7, #6
 800c6bc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6be:	1dbb      	adds	r3, r7, #6
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	f000 fd3b 	bl	800d142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	b004      	add	sp, #16
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b082      	sub	sp, #8
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	23a5      	movs	r3, #165	@ 0xa5
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	2104      	movs	r1, #4
 800c6e6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	f000 fcf0 	bl	800d0d4 <USBD_LL_Transmit>

  return USBD_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	b002      	add	sp, #8
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b082      	sub	sp, #8
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	23a5      	movs	r3, #165	@ 0xa5
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	2105      	movs	r1, #5
 800c70e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	2300      	movs	r3, #0
 800c714:	2200      	movs	r2, #0
 800c716:	2100      	movs	r1, #0
 800c718:	f000 fd13 	bl	800d142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	0018      	movs	r0, r3
 800c720:	46bd      	mov	sp, r7
 800c722:	b002      	add	sp, #8
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c72c:	4914      	ldr	r1, [pc, #80]	@ (800c780 <MX_USB_DEVICE_Init+0x58>)
 800c72e:	4b15      	ldr	r3, [pc, #84]	@ (800c784 <MX_USB_DEVICE_Init+0x5c>)
 800c730:	2200      	movs	r2, #0
 800c732:	0018      	movs	r0, r3
 800c734:	f7fe fdec 	bl	800b310 <USBD_Init>
 800c738:	1e03      	subs	r3, r0, #0
 800c73a:	d001      	beq.n	800c740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c73c:	f7f6 f868 	bl	8002810 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c740:	4a11      	ldr	r2, [pc, #68]	@ (800c788 <MX_USB_DEVICE_Init+0x60>)
 800c742:	4b10      	ldr	r3, [pc, #64]	@ (800c784 <MX_USB_DEVICE_Init+0x5c>)
 800c744:	0011      	movs	r1, r2
 800c746:	0018      	movs	r0, r3
 800c748:	f7fe fe13 	bl	800b372 <USBD_RegisterClass>
 800c74c:	1e03      	subs	r3, r0, #0
 800c74e:	d001      	beq.n	800c754 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c750:	f7f6 f85e 	bl	8002810 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c754:	4a0d      	ldr	r2, [pc, #52]	@ (800c78c <MX_USB_DEVICE_Init+0x64>)
 800c756:	4b0b      	ldr	r3, [pc, #44]	@ (800c784 <MX_USB_DEVICE_Init+0x5c>)
 800c758:	0011      	movs	r1, r2
 800c75a:	0018      	movs	r0, r3
 800c75c:	f7fe fd28 	bl	800b1b0 <USBD_CDC_RegisterInterface>
 800c760:	1e03      	subs	r3, r0, #0
 800c762:	d001      	beq.n	800c768 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c764:	f7f6 f854 	bl	8002810 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c768:	4b06      	ldr	r3, [pc, #24]	@ (800c784 <MX_USB_DEVICE_Init+0x5c>)
 800c76a:	0018      	movs	r0, r3
 800c76c:	f7fe fe21 	bl	800b3b2 <USBD_Start>
 800c770:	1e03      	subs	r3, r0, #0
 800c772:	d001      	beq.n	800c778 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c774:	f7f6 f84c 	bl	8002810 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c778:	46c0      	nop			@ (mov r8, r8)
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	46c0      	nop			@ (mov r8, r8)
 800c780:	2000012c 	.word	0x2000012c
 800c784:	200008c0 	.word	0x200008c0
 800c788:	20000018 	.word	0x20000018
 800c78c:	2000011c 	.word	0x2000011c

0800c790 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */

  /*## Put UART peripheral in IT reception process ########################*/
  /* Any data received will be stored in "UserTxBuffer" buffer  */
  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 800c794:	490c      	ldr	r1, [pc, #48]	@ (800c7c8 <CDC_Init_FS+0x38>)
 800c796:	4b0d      	ldr	r3, [pc, #52]	@ (800c7cc <CDC_Init_FS+0x3c>)
 800c798:	2201      	movs	r2, #1
 800c79a:	0018      	movs	r0, r3
 800c79c:	f7fa fe1e 	bl	80073dc <HAL_UART_Receive_IT>
 800c7a0:	1e03      	subs	r3, r0, #0
 800c7a2:	d001      	beq.n	800c7a8 <CDC_Init_FS+0x18>
  {
    /* Transfer error in reception process */
    Error_Handler();
 800c7a4:	f7f6 f834 	bl	8002810 <Error_Handler>
  }


  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c7a8:	4909      	ldr	r1, [pc, #36]	@ (800c7d0 <CDC_Init_FS+0x40>)
 800c7aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c7d4 <CDC_Init_FS+0x44>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	f7fe fd19 	bl	800b1e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c7b4:	4a08      	ldr	r2, [pc, #32]	@ (800c7d8 <CDC_Init_FS+0x48>)
 800c7b6:	4b07      	ldr	r3, [pc, #28]	@ (800c7d4 <CDC_Init_FS+0x44>)
 800c7b8:	0011      	movs	r1, r2
 800c7ba:	0018      	movs	r0, r3
 800c7bc:	f7fe fd2f 	bl	800b21e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c7c0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20001384 	.word	0x20001384
 800c7cc:	200004b0 	.word	0x200004b0
 800c7d0:	20000f84 	.word	0x20000f84
 800c7d4:	200008c0 	.word	0x200008c0
 800c7d8:	20000b84 	.word	0x20000b84

0800c7dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&huart1) != HAL_OK)
 800c7e0:	4b05      	ldr	r3, [pc, #20]	@ (800c7f8 <CDC_DeInit_FS+0x1c>)
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	f7fa fdae 	bl	8007344 <HAL_UART_DeInit>
 800c7e8:	1e03      	subs	r3, r0, #0
 800c7ea:	d001      	beq.n	800c7f0 <CDC_DeInit_FS+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 800c7ec:	f7f6 f810 	bl	8002810 <Error_Handler>
  }
  return (USBD_OK);
 800c7f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c7f2:	0018      	movs	r0, r3
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	200004b0 	.word	0x200004b0

0800c7fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6039      	str	r1, [r7, #0]
 800c804:	0011      	movs	r1, r2
 800c806:	1dfb      	adds	r3, r7, #7
 800c808:	1c02      	adds	r2, r0, #0
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	1d3b      	adds	r3, r7, #4
 800c80e:	1c0a      	adds	r2, r1, #0
 800c810:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c812:	1dfb      	adds	r3, r7, #7
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2b23      	cmp	r3, #35	@ 0x23
 800c818:	d804      	bhi.n	800c824 <CDC_Control_FS+0x28>
 800c81a:	009a      	lsls	r2, r3, #2
 800c81c:	4b04      	ldr	r3, [pc, #16]	@ (800c830 <CDC_Control_FS+0x34>)
 800c81e:	18d3      	adds	r3, r2, r3
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c824:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800c826:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c828:	0018      	movs	r0, r3
 800c82a:	46bd      	mov	sp, r7
 800c82c:	b002      	add	sp, #8
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	0800ff18 	.word	0x0800ff18

0800c834 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  HAL_UART_Transmit_DMA(&huart1, Buf, *Len);
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	b29a      	uxth	r2, r3
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	4b09      	ldr	r3, [pc, #36]	@ (800c86c <CDC_Receive_FS+0x38>)
 800c848:	0018      	movs	r0, r3
 800c84a:	f7fa fe1f 	bl	800748c <HAL_UART_Transmit_DMA>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	4b07      	ldr	r3, [pc, #28]	@ (800c870 <CDC_Receive_FS+0x3c>)
 800c852:	0011      	movs	r1, r2
 800c854:	0018      	movs	r0, r3
 800c856:	f7fe fce2 	bl	800b21e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c85a:	4b05      	ldr	r3, [pc, #20]	@ (800c870 <CDC_Receive_FS+0x3c>)
 800c85c:	0018      	movs	r0, r3
 800c85e:	f7fe fd29 	bl	800b2b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c862:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c864:	0018      	movs	r0, r3
 800c866:	46bd      	mov	sp, r7
 800c868:	b002      	add	sp, #8
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	200004b0 	.word	0x200004b0
 800c870:	200008c0 	.word	0x200008c0

0800c874 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 800c87c:	4b1e      	ldr	r3, [pc, #120]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	4b1e      	ldr	r3, [pc, #120]	@ (800c8fc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	429a      	cmp	r2, r3
 800c886:	d033      	beq.n	800c8f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* rollback */
 800c888:	4b1b      	ldr	r3, [pc, #108]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	4b1b      	ldr	r3, [pc, #108]	@ (800c8fc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	429a      	cmp	r2, r3
 800c892:	d906      	bls.n	800c8a2 <HAL_TIM_PeriodElapsedCallback+0x2e>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 800c894:	4b18      	ldr	r3, [pc, #96]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2280      	movs	r2, #128	@ 0x80
 800c89a:	00d2      	lsls	r2, r2, #3
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	e005      	b.n	800c8ae <HAL_TIM_PeriodElapsedCallback+0x3a>
    }
    else
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 800c8a2:	4b16      	ldr	r3, [pc, #88]	@ (800c8fc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	4b14      	ldr	r3, [pc, #80]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	60fb      	str	r3, [r7, #12]
    }

    buffptr = UserTxBufPtrOut;
 800c8ae:	4b12      	ldr	r3, [pc, #72]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	60bb      	str	r3, [r7, #8]

    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	4b12      	ldr	r3, [pc, #72]	@ (800c900 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800c8b8:	18d1      	adds	r1, r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	4b11      	ldr	r3, [pc, #68]	@ (800c904 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f7fe fc90 	bl	800b1e6 <USBD_CDC_SetTxBuffer>

    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 800c8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c904 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800c8c8:	0018      	movs	r0, r3
 800c8ca:	f7fe fcbc 	bl	800b246 <USBD_CDC_TransmitPacket>
 800c8ce:	1e03      	subs	r3, r0, #0
 800c8d0:	d10e      	bne.n	800c8f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
      UserTxBufPtrOut += buffsize;
 800c8d2:	4b09      	ldr	r3, [pc, #36]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	18d2      	adds	r2, r2, r3
 800c8da:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c8dc:	601a      	str	r2, [r3, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 800c8de:	4b06      	ldr	r3, [pc, #24]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	2380      	movs	r3, #128	@ 0x80
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d102      	bne.n	800c8f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
      {
        UserTxBufPtrOut = 0;
 800c8ea:	4b03      	ldr	r3, [pc, #12]	@ (800c8f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 800c8f0:	46c0      	nop			@ (mov r8, r8)
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	b004      	add	sp, #16
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	20001788 	.word	0x20001788
 800c8fc:	20001784 	.word	0x20001784
 800c900:	20001384 	.word	0x20001384
 800c904:	200005f0 	.word	0x200005f0

0800c908 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 800c910:	4b0d      	ldr	r3, [pc, #52]	@ (800c948 <HAL_UART_RxCpltCallback+0x40>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	4b0c      	ldr	r3, [pc, #48]	@ (800c948 <HAL_UART_RxCpltCallback+0x40>)
 800c918:	601a      	str	r2, [r3, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 800c91a:	4b0b      	ldr	r3, [pc, #44]	@ (800c948 <HAL_UART_RxCpltCallback+0x40>)
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	2380      	movs	r3, #128	@ 0x80
 800c920:	00db      	lsls	r3, r3, #3
 800c922:	429a      	cmp	r2, r3
 800c924:	d102      	bne.n	800c92c <HAL_UART_RxCpltCallback+0x24>
  {
    UserTxBufPtrIn = 0;
 800c926:	4b08      	ldr	r3, [pc, #32]	@ (800c948 <HAL_UART_RxCpltCallback+0x40>)
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 800c92c:	4b06      	ldr	r3, [pc, #24]	@ (800c948 <HAL_UART_RxCpltCallback+0x40>)
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	4b06      	ldr	r3, [pc, #24]	@ (800c94c <HAL_UART_RxCpltCallback+0x44>)
 800c932:	18d1      	adds	r1, r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	0018      	movs	r0, r3
 800c93a:	f7fa fd4f 	bl	80073dc <HAL_UART_Receive_IT>
}
 800c93e:	46c0      	nop			@ (mov r8, r8)
 800c940:	46bd      	mov	sp, r7
 800c942:	b002      	add	sp, #8
 800c944:	bd80      	pop	{r7, pc}
 800c946:	46c0      	nop			@ (mov r8, r8)
 800c948:	20001784 	.word	0x20001784
 800c94c:	20001384 	.word	0x20001384

0800c950 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&USBD_Device);
 800c958:	4b03      	ldr	r3, [pc, #12]	@ (800c968 <HAL_UART_TxCpltCallback+0x18>)
 800c95a:	0018      	movs	r0, r3
 800c95c:	f7fe fcaa 	bl	800b2b4 <USBD_CDC_ReceivePacket>
}
 800c960:	46c0      	nop			@ (mov r8, r8)
 800c962:	46bd      	mov	sp, r7
 800c964:	b002      	add	sp, #8
 800c966:	bd80      	pop	{r7, pc}
 800c968:	200005f0 	.word	0x200005f0

0800c96c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	0002      	movs	r2, r0
 800c974:	6039      	str	r1, [r7, #0]
 800c976:	1dfb      	adds	r3, r7, #7
 800c978:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2212      	movs	r2, #18
 800c97e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c980:	4b02      	ldr	r3, [pc, #8]	@ (800c98c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c982:	0018      	movs	r0, r3
 800c984:	46bd      	mov	sp, r7
 800c986:	b002      	add	sp, #8
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	46c0      	nop			@ (mov r8, r8)
 800c98c:	20000148 	.word	0x20000148

0800c990 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	0002      	movs	r2, r0
 800c998:	6039      	str	r1, [r7, #0]
 800c99a:	1dfb      	adds	r3, r7, #7
 800c99c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2204      	movs	r2, #4
 800c9a2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9a4:	4b02      	ldr	r3, [pc, #8]	@ (800c9b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	b002      	add	sp, #8
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	46c0      	nop			@ (mov r8, r8)
 800c9b0:	2000015c 	.word	0x2000015c

0800c9b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	0002      	movs	r2, r0
 800c9bc:	6039      	str	r1, [r7, #0]
 800c9be:	1dfb      	adds	r3, r7, #7
 800c9c0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c9c2:	1dfb      	adds	r3, r7, #7
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d106      	bne.n	800c9d8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	4908      	ldr	r1, [pc, #32]	@ (800c9f0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c9ce:	4b09      	ldr	r3, [pc, #36]	@ (800c9f4 <USBD_FS_ProductStrDescriptor+0x40>)
 800c9d0:	0018      	movs	r0, r3
 800c9d2:	f7ff fdab 	bl	800c52c <USBD_GetString>
 800c9d6:	e005      	b.n	800c9e4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9d8:	683a      	ldr	r2, [r7, #0]
 800c9da:	4905      	ldr	r1, [pc, #20]	@ (800c9f0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c9dc:	4b05      	ldr	r3, [pc, #20]	@ (800c9f4 <USBD_FS_ProductStrDescriptor+0x40>)
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f7ff fda4 	bl	800c52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9e4:	4b02      	ldr	r3, [pc, #8]	@ (800c9f0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c9e6:	0018      	movs	r0, r3
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	b002      	add	sp, #8
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	46c0      	nop			@ (mov r8, r8)
 800c9f0:	2000178c 	.word	0x2000178c
 800c9f4:	0800fdf8 	.word	0x0800fdf8

0800c9f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	0002      	movs	r2, r0
 800ca00:	6039      	str	r1, [r7, #0]
 800ca02:	1dfb      	adds	r3, r7, #7
 800ca04:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	4904      	ldr	r1, [pc, #16]	@ (800ca1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca0a:	4b05      	ldr	r3, [pc, #20]	@ (800ca20 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800ca0c:	0018      	movs	r0, r3
 800ca0e:	f7ff fd8d 	bl	800c52c <USBD_GetString>
  return USBD_StrDesc;
 800ca12:	4b02      	ldr	r3, [pc, #8]	@ (800ca1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800ca14:	0018      	movs	r0, r3
 800ca16:	46bd      	mov	sp, r7
 800ca18:	b002      	add	sp, #8
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	2000178c 	.word	0x2000178c
 800ca20:	0800fe10 	.word	0x0800fe10

0800ca24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	0002      	movs	r2, r0
 800ca2c:	6039      	str	r1, [r7, #0]
 800ca2e:	1dfb      	adds	r3, r7, #7
 800ca30:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	221a      	movs	r2, #26
 800ca36:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca38:	f000 f84c 	bl	800cad4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca3c:	4b02      	ldr	r3, [pc, #8]	@ (800ca48 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800ca3e:	0018      	movs	r0, r3
 800ca40:	46bd      	mov	sp, r7
 800ca42:	b002      	add	sp, #8
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	46c0      	nop			@ (mov r8, r8)
 800ca48:	20000160 	.word	0x20000160

0800ca4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	0002      	movs	r2, r0
 800ca54:	6039      	str	r1, [r7, #0]
 800ca56:	1dfb      	adds	r3, r7, #7
 800ca58:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800ca5a:	1dfb      	adds	r3, r7, #7
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d106      	bne.n	800ca70 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	4908      	ldr	r1, [pc, #32]	@ (800ca88 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ca66:	4b09      	ldr	r3, [pc, #36]	@ (800ca8c <USBD_FS_ConfigStrDescriptor+0x40>)
 800ca68:	0018      	movs	r0, r3
 800ca6a:	f7ff fd5f 	bl	800c52c <USBD_GetString>
 800ca6e:	e005      	b.n	800ca7c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	4905      	ldr	r1, [pc, #20]	@ (800ca88 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ca74:	4b05      	ldr	r3, [pc, #20]	@ (800ca8c <USBD_FS_ConfigStrDescriptor+0x40>)
 800ca76:	0018      	movs	r0, r3
 800ca78:	f7ff fd58 	bl	800c52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca7c:	4b02      	ldr	r3, [pc, #8]	@ (800ca88 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800ca7e:	0018      	movs	r0, r3
 800ca80:	46bd      	mov	sp, r7
 800ca82:	b002      	add	sp, #8
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	46c0      	nop			@ (mov r8, r8)
 800ca88:	2000178c 	.word	0x2000178c
 800ca8c:	0800fe24 	.word	0x0800fe24

0800ca90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	0002      	movs	r2, r0
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	1dfb      	adds	r3, r7, #7
 800ca9c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ca9e:	1dfb      	adds	r3, r7, #7
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d106      	bne.n	800cab4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	4908      	ldr	r1, [pc, #32]	@ (800cacc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800caaa:	4b09      	ldr	r3, [pc, #36]	@ (800cad0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800caac:	0018      	movs	r0, r3
 800caae:	f7ff fd3d 	bl	800c52c <USBD_GetString>
 800cab2:	e005      	b.n	800cac0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	4905      	ldr	r1, [pc, #20]	@ (800cacc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cab8:	4b05      	ldr	r3, [pc, #20]	@ (800cad0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800caba:	0018      	movs	r0, r3
 800cabc:	f7ff fd36 	bl	800c52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cac0:	4b02      	ldr	r3, [pc, #8]	@ (800cacc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800cac2:	0018      	movs	r0, r3
 800cac4:	46bd      	mov	sp, r7
 800cac6:	b002      	add	sp, #8
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	46c0      	nop			@ (mov r8, r8)
 800cacc:	2000178c 	.word	0x2000178c
 800cad0:	0800fe30 	.word	0x0800fe30

0800cad4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cada:	4b10      	ldr	r3, [pc, #64]	@ (800cb1c <Get_SerialNum+0x48>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cae0:	4b0f      	ldr	r3, [pc, #60]	@ (800cb20 <Get_SerialNum+0x4c>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cae6:	4b0f      	ldr	r3, [pc, #60]	@ (800cb24 <Get_SerialNum+0x50>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	18d3      	adds	r3, r2, r3
 800caf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00b      	beq.n	800cb12 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cafa:	490b      	ldr	r1, [pc, #44]	@ (800cb28 <Get_SerialNum+0x54>)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2208      	movs	r2, #8
 800cb00:	0018      	movs	r0, r3
 800cb02:	f000 f815 	bl	800cb30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb06:	4909      	ldr	r1, [pc, #36]	@ (800cb2c <Get_SerialNum+0x58>)
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	2204      	movs	r2, #4
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	f000 f80f 	bl	800cb30 <IntToUnicode>
  }
}
 800cb12:	46c0      	nop			@ (mov r8, r8)
 800cb14:	46bd      	mov	sp, r7
 800cb16:	b004      	add	sp, #16
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	46c0      	nop			@ (mov r8, r8)
 800cb1c:	1ffff7ac 	.word	0x1ffff7ac
 800cb20:	1ffff7b0 	.word	0x1ffff7b0
 800cb24:	1ffff7b4 	.word	0x1ffff7b4
 800cb28:	20000162 	.word	0x20000162
 800cb2c:	20000172 	.word	0x20000172

0800cb30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	1dfb      	adds	r3, r7, #7
 800cb3c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800cb3e:	2117      	movs	r1, #23
 800cb40:	187b      	adds	r3, r7, r1
 800cb42:	2200      	movs	r2, #0
 800cb44:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800cb46:	187b      	adds	r3, r7, r1
 800cb48:	2200      	movs	r2, #0
 800cb4a:	701a      	strb	r2, [r3, #0]
 800cb4c:	e02f      	b.n	800cbae <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	0f1b      	lsrs	r3, r3, #28
 800cb52:	2b09      	cmp	r3, #9
 800cb54:	d80d      	bhi.n	800cb72 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	0f1b      	lsrs	r3, r3, #28
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	2317      	movs	r3, #23
 800cb5e:	18fb      	adds	r3, r7, r3
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	0019      	movs	r1, r3
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	185b      	adds	r3, r3, r1
 800cb6a:	3230      	adds	r2, #48	@ 0x30
 800cb6c:	b2d2      	uxtb	r2, r2
 800cb6e:	701a      	strb	r2, [r3, #0]
 800cb70:	e00c      	b.n	800cb8c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	0f1b      	lsrs	r3, r3, #28
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	2317      	movs	r3, #23
 800cb7a:	18fb      	adds	r3, r7, r3
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	0019      	movs	r1, r3
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	185b      	adds	r3, r3, r1
 800cb86:	3237      	adds	r2, #55	@ 0x37
 800cb88:	b2d2      	uxtb	r2, r2
 800cb8a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb92:	2117      	movs	r1, #23
 800cb94:	187b      	adds	r3, r7, r1
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	18d3      	adds	r3, r2, r3
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cba4:	187b      	adds	r3, r7, r1
 800cba6:	781a      	ldrb	r2, [r3, #0]
 800cba8:	187b      	adds	r3, r7, r1
 800cbaa:	3201      	adds	r2, #1
 800cbac:	701a      	strb	r2, [r3, #0]
 800cbae:	2317      	movs	r3, #23
 800cbb0:	18fa      	adds	r2, r7, r3
 800cbb2:	1dfb      	adds	r3, r7, #7
 800cbb4:	7812      	ldrb	r2, [r2, #0]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d3c8      	bcc.n	800cb4e <IntToUnicode+0x1e>
  }
}
 800cbbc:	46c0      	nop			@ (mov r8, r8)
 800cbbe:	46c0      	nop			@ (mov r8, r8)
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	b006      	add	sp, #24
 800cbc4:	bd80      	pop	{r7, pc}
	...

0800cbc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a0e      	ldr	r2, [pc, #56]	@ (800cc10 <HAL_PCD_MspInit+0x48>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d115      	bne.n	800cc06 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cbda:	4b0e      	ldr	r3, [pc, #56]	@ (800cc14 <HAL_PCD_MspInit+0x4c>)
 800cbdc:	69da      	ldr	r2, [r3, #28]
 800cbde:	4b0d      	ldr	r3, [pc, #52]	@ (800cc14 <HAL_PCD_MspInit+0x4c>)
 800cbe0:	2180      	movs	r1, #128	@ 0x80
 800cbe2:	0409      	lsls	r1, r1, #16
 800cbe4:	430a      	orrs	r2, r1
 800cbe6:	61da      	str	r2, [r3, #28]
 800cbe8:	4b0a      	ldr	r3, [pc, #40]	@ (800cc14 <HAL_PCD_MspInit+0x4c>)
 800cbea:	69da      	ldr	r2, [r3, #28]
 800cbec:	2380      	movs	r3, #128	@ 0x80
 800cbee:	041b      	lsls	r3, r3, #16
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	60fb      	str	r3, [r7, #12]
 800cbf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	201f      	movs	r0, #31
 800cbfc:	f7f6 fcf2 	bl	80035e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800cc00:	201f      	movs	r0, #31
 800cc02:	f7f6 fd04 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cc06:	46c0      	nop			@ (mov r8, r8)
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	b004      	add	sp, #16
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	46c0      	nop			@ (mov r8, r8)
 800cc10:	40005c00 	.word	0x40005c00
 800cc14:	40021000 	.word	0x40021000

0800cc18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	23b6      	movs	r3, #182	@ 0xb6
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	58d2      	ldr	r2, [r2, r3]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	21a6      	movs	r1, #166	@ 0xa6
 800cc2c:	0089      	lsls	r1, r1, #2
 800cc2e:	468c      	mov	ip, r1
 800cc30:	4463      	add	r3, ip
 800cc32:	0019      	movs	r1, r3
 800cc34:	0010      	movs	r0, r2
 800cc36:	f7fe fc0f 	bl	800b458 <USBD_LL_SetupStage>
}
 800cc3a:	46c0      	nop			@ (mov r8, r8)
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	b002      	add	sp, #8
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc42:	b590      	push	{r4, r7, lr}
 800cc44:	b083      	sub	sp, #12
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	000a      	movs	r2, r1
 800cc4c:	1cfb      	adds	r3, r7, #3
 800cc4e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	23b6      	movs	r3, #182	@ 0xb6
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	58d4      	ldr	r4, [r2, r3]
 800cc58:	1cfb      	adds	r3, r7, #3
 800cc5a:	781a      	ldrb	r2, [r3, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	23b2      	movs	r3, #178	@ 0xb2
 800cc60:	0059      	lsls	r1, r3, #1
 800cc62:	0013      	movs	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	189b      	adds	r3, r3, r2
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	18c3      	adds	r3, r0, r3
 800cc6c:	185b      	adds	r3, r3, r1
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	1cfb      	adds	r3, r7, #3
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	0019      	movs	r1, r3
 800cc76:	0020      	movs	r0, r4
 800cc78:	f7fe fc4c 	bl	800b514 <USBD_LL_DataOutStage>
}
 800cc7c:	46c0      	nop			@ (mov r8, r8)
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	b003      	add	sp, #12
 800cc82:	bd90      	pop	{r4, r7, pc}

0800cc84 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	000a      	movs	r2, r1
 800cc8e:	1cfb      	adds	r3, r7, #3
 800cc90:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	23b6      	movs	r3, #182	@ 0xb6
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	58d0      	ldr	r0, [r2, r3]
 800cc9a:	1cfb      	adds	r3, r7, #3
 800cc9c:	781a      	ldrb	r2, [r3, #0]
 800cc9e:	6879      	ldr	r1, [r7, #4]
 800cca0:	0013      	movs	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	189b      	adds	r3, r3, r2
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	18cb      	adds	r3, r1, r3
 800ccaa:	3324      	adds	r3, #36	@ 0x24
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	1cfb      	adds	r3, r7, #3
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	0019      	movs	r1, r3
 800ccb4:	f7fe fcb0 	bl	800b618 <USBD_LL_DataInStage>
}
 800ccb8:	46c0      	nop			@ (mov r8, r8)
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	b002      	add	sp, #8
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	23b6      	movs	r3, #182	@ 0xb6
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	58d3      	ldr	r3, [r2, r3]
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	f7fe fde7 	bl	800b8a4 <USBD_LL_SOF>
}
 800ccd6:	46c0      	nop			@ (mov r8, r8)
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	b002      	add	sp, #8
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cce6:	230f      	movs	r3, #15
 800cce8:	18fb      	adds	r3, r7, r3
 800ccea:	2201      	movs	r2, #1
 800ccec:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	795b      	ldrb	r3, [r3, #5]
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	d001      	beq.n	800ccfa <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800ccf6:	f7f5 fd8b 	bl	8002810 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	23b6      	movs	r3, #182	@ 0xb6
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	58d2      	ldr	r2, [r2, r3]
 800cd02:	230f      	movs	r3, #15
 800cd04:	18fb      	adds	r3, r7, r3
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	0019      	movs	r1, r3
 800cd0a:	0010      	movs	r0, r2
 800cd0c:	f7fe fd89 	bl	800b822 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	23b6      	movs	r3, #182	@ 0xb6
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	58d3      	ldr	r3, [r2, r3]
 800cd18:	0018      	movs	r0, r3
 800cd1a:	f7fe fd3a 	bl	800b792 <USBD_LL_Reset>
}
 800cd1e:	46c0      	nop			@ (mov r8, r8)
 800cd20:	46bd      	mov	sp, r7
 800cd22:	b004      	add	sp, #16
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	23b6      	movs	r3, #182	@ 0xb6
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	58d3      	ldr	r3, [r2, r3]
 800cd38:	0018      	movs	r0, r3
 800cd3a:	f7fe fd83 	bl	800b844 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7a5b      	ldrb	r3, [r3, #9]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d005      	beq.n	800cd52 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd46:	4b05      	ldr	r3, [pc, #20]	@ (800cd5c <HAL_PCD_SuspendCallback+0x34>)
 800cd48:	691a      	ldr	r2, [r3, #16]
 800cd4a:	4b04      	ldr	r3, [pc, #16]	@ (800cd5c <HAL_PCD_SuspendCallback+0x34>)
 800cd4c:	2106      	movs	r1, #6
 800cd4e:	430a      	orrs	r2, r1
 800cd50:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800cd52:	46c0      	nop			@ (mov r8, r8)
 800cd54:	46bd      	mov	sp, r7
 800cd56:	b002      	add	sp, #8
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	46c0      	nop			@ (mov r8, r8)
 800cd5c:	e000ed00 	.word	0xe000ed00

0800cd60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	7a5b      	ldrb	r3, [r3, #9]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d007      	beq.n	800cd80 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd70:	4b09      	ldr	r3, [pc, #36]	@ (800cd98 <HAL_PCD_ResumeCallback+0x38>)
 800cd72:	691a      	ldr	r2, [r3, #16]
 800cd74:	4b08      	ldr	r3, [pc, #32]	@ (800cd98 <HAL_PCD_ResumeCallback+0x38>)
 800cd76:	2106      	movs	r1, #6
 800cd78:	438a      	bics	r2, r1
 800cd7a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800cd7c:	f000 fa42 	bl	800d204 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	23b6      	movs	r3, #182	@ 0xb6
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	58d3      	ldr	r3, [r2, r3]
 800cd88:	0018      	movs	r0, r3
 800cd8a:	f7fe fd73 	bl	800b874 <USBD_LL_Resume>
}
 800cd8e:	46c0      	nop			@ (mov r8, r8)
 800cd90:	46bd      	mov	sp, r7
 800cd92:	b002      	add	sp, #8
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	46c0      	nop			@ (mov r8, r8)
 800cd98:	e000ed00 	.word	0xe000ed00

0800cd9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cda4:	4a2d      	ldr	r2, [pc, #180]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cda6:	23b6      	movs	r3, #182	@ 0xb6
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	6879      	ldr	r1, [r7, #4]
 800cdac:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	23b0      	movs	r3, #176	@ 0xb0
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4929      	ldr	r1, [pc, #164]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cdb6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800cdb8:	4b28      	ldr	r3, [pc, #160]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cdba:	4a29      	ldr	r2, [pc, #164]	@ (800ce60 <USBD_LL_Init+0xc4>)
 800cdbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cdbe:	4b27      	ldr	r3, [pc, #156]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cdc0:	2208      	movs	r2, #8
 800cdc2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cdc4:	4b25      	ldr	r3, [pc, #148]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cdca:	4b24      	ldr	r3, [pc, #144]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cdcc:	2202      	movs	r2, #2
 800cdce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cdd0:	4b22      	ldr	r3, [pc, #136]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cdd6:	4b21      	ldr	r3, [pc, #132]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cddc:	4b1f      	ldr	r3, [pc, #124]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cdde:	2200      	movs	r2, #0
 800cde0:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cde2:	4b1e      	ldr	r3, [pc, #120]	@ (800ce5c <USBD_LL_Init+0xc0>)
 800cde4:	0018      	movs	r0, r3
 800cde6:	f7f7 f943 	bl	8004070 <HAL_PCD_Init>
 800cdea:	1e03      	subs	r3, r0, #0
 800cdec:	d001      	beq.n	800cdf2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800cdee:	f7f5 fd0f 	bl	8002810 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	23b0      	movs	r3, #176	@ 0xb0
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	58d0      	ldr	r0, [r2, r3]
 800cdfa:	2318      	movs	r3, #24
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2100      	movs	r1, #0
 800ce00:	f7f8 fef4 	bl	8005bec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	23b0      	movs	r3, #176	@ 0xb0
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	58d0      	ldr	r0, [r2, r3]
 800ce0c:	2358      	movs	r3, #88	@ 0x58
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2180      	movs	r1, #128	@ 0x80
 800ce12:	f7f8 feeb 	bl	8005bec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	23b0      	movs	r3, #176	@ 0xb0
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	58d0      	ldr	r0, [r2, r3]
 800ce1e:	23c0      	movs	r3, #192	@ 0xc0
 800ce20:	2200      	movs	r2, #0
 800ce22:	2181      	movs	r1, #129	@ 0x81
 800ce24:	f7f8 fee2 	bl	8005bec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	23b0      	movs	r3, #176	@ 0xb0
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	58d0      	ldr	r0, [r2, r3]
 800ce30:	2388      	movs	r3, #136	@ 0x88
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	2200      	movs	r2, #0
 800ce36:	2101      	movs	r1, #1
 800ce38:	f7f8 fed8 	bl	8005bec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	23b0      	movs	r3, #176	@ 0xb0
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	58d0      	ldr	r0, [r2, r3]
 800ce44:	2380      	movs	r3, #128	@ 0x80
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	2200      	movs	r2, #0
 800ce4a:	2182      	movs	r1, #130	@ 0x82
 800ce4c:	f7f8 fece 	bl	8005bec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	0018      	movs	r0, r3
 800ce54:	46bd      	mov	sp, r7
 800ce56:	b002      	add	sp, #8
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	46c0      	nop			@ (mov r8, r8)
 800ce5c:	2000198c 	.word	0x2000198c
 800ce60:	40005c00 	.word	0x40005c00

0800ce64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce6c:	210f      	movs	r1, #15
 800ce6e:	187b      	adds	r3, r7, r1
 800ce70:	2200      	movs	r2, #0
 800ce72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce74:	260e      	movs	r6, #14
 800ce76:	19bb      	adds	r3, r7, r6
 800ce78:	2200      	movs	r2, #0
 800ce7a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	23b0      	movs	r3, #176	@ 0xb0
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	58d3      	ldr	r3, [r2, r3]
 800ce84:	000d      	movs	r5, r1
 800ce86:	187c      	adds	r4, r7, r1
 800ce88:	0018      	movs	r0, r3
 800ce8a:	f7f7 f9e5 	bl	8004258 <HAL_PCD_Start>
 800ce8e:	0003      	movs	r3, r0
 800ce90:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce92:	19bc      	adds	r4, r7, r6
 800ce94:	197b      	adds	r3, r7, r5
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	0018      	movs	r0, r3
 800ce9a:	f000 f9ba 	bl	800d212 <USBD_Get_USB_Status>
 800ce9e:	0003      	movs	r3, r0
 800cea0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cea2:	19bb      	adds	r3, r7, r6
 800cea4:	781b      	ldrb	r3, [r3, #0]
}
 800cea6:	0018      	movs	r0, r3
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	b005      	add	sp, #20
 800ceac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ceae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ceae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceb0:	b085      	sub	sp, #20
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
 800ceb6:	000c      	movs	r4, r1
 800ceb8:	0010      	movs	r0, r2
 800ceba:	0019      	movs	r1, r3
 800cebc:	1cfb      	adds	r3, r7, #3
 800cebe:	1c22      	adds	r2, r4, #0
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	1cbb      	adds	r3, r7, #2
 800cec4:	1c02      	adds	r2, r0, #0
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	003b      	movs	r3, r7
 800ceca:	1c0a      	adds	r2, r1, #0
 800cecc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cece:	260f      	movs	r6, #15
 800ced0:	19bb      	adds	r3, r7, r6
 800ced2:	2200      	movs	r2, #0
 800ced4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ced6:	250e      	movs	r5, #14
 800ced8:	197b      	adds	r3, r7, r5
 800ceda:	2200      	movs	r2, #0
 800cedc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	23b0      	movs	r3, #176	@ 0xb0
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	58d0      	ldr	r0, [r2, r3]
 800cee6:	19bc      	adds	r4, r7, r6
 800cee8:	1cbb      	adds	r3, r7, #2
 800ceea:	781d      	ldrb	r5, [r3, #0]
 800ceec:	003b      	movs	r3, r7
 800ceee:	881a      	ldrh	r2, [r3, #0]
 800cef0:	1cfb      	adds	r3, r7, #3
 800cef2:	7819      	ldrb	r1, [r3, #0]
 800cef4:	002b      	movs	r3, r5
 800cef6:	f7f7 fb43 	bl	8004580 <HAL_PCD_EP_Open>
 800cefa:	0003      	movs	r3, r0
 800cefc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cefe:	250e      	movs	r5, #14
 800cf00:	197c      	adds	r4, r7, r5
 800cf02:	19bb      	adds	r3, r7, r6
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	0018      	movs	r0, r3
 800cf08:	f000 f983 	bl	800d212 <USBD_Get_USB_Status>
 800cf0c:	0003      	movs	r3, r0
 800cf0e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cf10:	197b      	adds	r3, r7, r5
 800cf12:	781b      	ldrb	r3, [r3, #0]
}
 800cf14:	0018      	movs	r0, r3
 800cf16:	46bd      	mov	sp, r7
 800cf18:	b005      	add	sp, #20
 800cf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf1c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	000a      	movs	r2, r1
 800cf26:	1cfb      	adds	r3, r7, #3
 800cf28:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf2a:	210f      	movs	r1, #15
 800cf2c:	187b      	adds	r3, r7, r1
 800cf2e:	2200      	movs	r2, #0
 800cf30:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf32:	260e      	movs	r6, #14
 800cf34:	19bb      	adds	r3, r7, r6
 800cf36:	2200      	movs	r2, #0
 800cf38:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	23b0      	movs	r3, #176	@ 0xb0
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	58d2      	ldr	r2, [r2, r3]
 800cf42:	000d      	movs	r5, r1
 800cf44:	187c      	adds	r4, r7, r1
 800cf46:	1cfb      	adds	r3, r7, #3
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	0019      	movs	r1, r3
 800cf4c:	0010      	movs	r0, r2
 800cf4e:	f7f7 fb86 	bl	800465e <HAL_PCD_EP_Close>
 800cf52:	0003      	movs	r3, r0
 800cf54:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf56:	19bc      	adds	r4, r7, r6
 800cf58:	197b      	adds	r3, r7, r5
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	0018      	movs	r0, r3
 800cf5e:	f000 f958 	bl	800d212 <USBD_Get_USB_Status>
 800cf62:	0003      	movs	r3, r0
 800cf64:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cf66:	19bb      	adds	r3, r7, r6
 800cf68:	781b      	ldrb	r3, [r3, #0]
}
 800cf6a:	0018      	movs	r0, r3
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	b005      	add	sp, #20
 800cf70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf72 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf74:	b085      	sub	sp, #20
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	000a      	movs	r2, r1
 800cf7c:	1cfb      	adds	r3, r7, #3
 800cf7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf80:	210f      	movs	r1, #15
 800cf82:	187b      	adds	r3, r7, r1
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf88:	260e      	movs	r6, #14
 800cf8a:	19bb      	adds	r3, r7, r6
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	23b0      	movs	r3, #176	@ 0xb0
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	58d2      	ldr	r2, [r2, r3]
 800cf98:	000d      	movs	r5, r1
 800cf9a:	187c      	adds	r4, r7, r1
 800cf9c:	1cfb      	adds	r3, r7, #3
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	0019      	movs	r1, r3
 800cfa2:	0010      	movs	r0, r2
 800cfa4:	f7f7 fc38 	bl	8004818 <HAL_PCD_EP_SetStall>
 800cfa8:	0003      	movs	r3, r0
 800cfaa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfac:	19bc      	adds	r4, r7, r6
 800cfae:	197b      	adds	r3, r7, r5
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f000 f92d 	bl	800d212 <USBD_Get_USB_Status>
 800cfb8:	0003      	movs	r3, r0
 800cfba:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cfbc:	19bb      	adds	r3, r7, r6
 800cfbe:	781b      	ldrb	r3, [r3, #0]
}
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	b005      	add	sp, #20
 800cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfc8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	000a      	movs	r2, r1
 800cfd2:	1cfb      	adds	r3, r7, #3
 800cfd4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd6:	210f      	movs	r1, #15
 800cfd8:	187b      	adds	r3, r7, r1
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfde:	260e      	movs	r6, #14
 800cfe0:	19bb      	adds	r3, r7, r6
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	23b0      	movs	r3, #176	@ 0xb0
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	58d2      	ldr	r2, [r2, r3]
 800cfee:	000d      	movs	r5, r1
 800cff0:	187c      	adds	r4, r7, r1
 800cff2:	1cfb      	adds	r3, r7, #3
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	0019      	movs	r1, r3
 800cff8:	0010      	movs	r0, r2
 800cffa:	f7f7 fc69 	bl	80048d0 <HAL_PCD_EP_ClrStall>
 800cffe:	0003      	movs	r3, r0
 800d000:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d002:	19bc      	adds	r4, r7, r6
 800d004:	197b      	adds	r3, r7, r5
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	0018      	movs	r0, r3
 800d00a:	f000 f902 	bl	800d212 <USBD_Get_USB_Status>
 800d00e:	0003      	movs	r3, r0
 800d010:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d012:	19bb      	adds	r3, r7, r6
 800d014:	781b      	ldrb	r3, [r3, #0]
}
 800d016:	0018      	movs	r0, r3
 800d018:	46bd      	mov	sp, r7
 800d01a:	b005      	add	sp, #20
 800d01c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d01e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b084      	sub	sp, #16
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	000a      	movs	r2, r1
 800d028:	1cfb      	adds	r3, r7, #3
 800d02a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	23b0      	movs	r3, #176	@ 0xb0
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	58d3      	ldr	r3, [r2, r3]
 800d034:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d036:	1cfb      	adds	r3, r7, #3
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	b25b      	sxtb	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	da0c      	bge.n	800d05a <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d040:	1cfb      	adds	r3, r7, #3
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	227f      	movs	r2, #127	@ 0x7f
 800d046:	401a      	ands	r2, r3
 800d048:	68f9      	ldr	r1, [r7, #12]
 800d04a:	0013      	movs	r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	189b      	adds	r3, r3, r2
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	18cb      	adds	r3, r1, r3
 800d054:	3312      	adds	r3, #18
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	e00d      	b.n	800d076 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d05a:	1cfb      	adds	r3, r7, #3
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	227f      	movs	r2, #127	@ 0x7f
 800d060:	401a      	ands	r2, r3
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	23a9      	movs	r3, #169	@ 0xa9
 800d066:	0059      	lsls	r1, r3, #1
 800d068:	0013      	movs	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	189b      	adds	r3, r3, r2
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	18c3      	adds	r3, r0, r3
 800d072:	185b      	adds	r3, r3, r1
 800d074:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d076:	0018      	movs	r0, r3
 800d078:	46bd      	mov	sp, r7
 800d07a:	b004      	add	sp, #16
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d07e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d080:	b085      	sub	sp, #20
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	000a      	movs	r2, r1
 800d088:	1cfb      	adds	r3, r7, #3
 800d08a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08c:	210f      	movs	r1, #15
 800d08e:	187b      	adds	r3, r7, r1
 800d090:	2200      	movs	r2, #0
 800d092:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d094:	260e      	movs	r6, #14
 800d096:	19bb      	adds	r3, r7, r6
 800d098:	2200      	movs	r2, #0
 800d09a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	23b0      	movs	r3, #176	@ 0xb0
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	58d2      	ldr	r2, [r2, r3]
 800d0a4:	000d      	movs	r5, r1
 800d0a6:	187c      	adds	r4, r7, r1
 800d0a8:	1cfb      	adds	r3, r7, #3
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	0019      	movs	r1, r3
 800d0ae:	0010      	movs	r0, r2
 800d0b0:	f7f7 fa3c 	bl	800452c <HAL_PCD_SetAddress>
 800d0b4:	0003      	movs	r3, r0
 800d0b6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b8:	19bc      	adds	r4, r7, r6
 800d0ba:	197b      	adds	r3, r7, r5
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	0018      	movs	r0, r3
 800d0c0:	f000 f8a7 	bl	800d212 <USBD_Get_USB_Status>
 800d0c4:	0003      	movs	r3, r0
 800d0c6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d0c8:	19bb      	adds	r3, r7, r6
 800d0ca:	781b      	ldrb	r3, [r3, #0]
}
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	b005      	add	sp, #20
 800d0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d6:	b087      	sub	sp, #28
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	0008      	movs	r0, r1
 800d0de:	607a      	str	r2, [r7, #4]
 800d0e0:	0019      	movs	r1, r3
 800d0e2:	230b      	movs	r3, #11
 800d0e4:	18fb      	adds	r3, r7, r3
 800d0e6:	1c02      	adds	r2, r0, #0
 800d0e8:	701a      	strb	r2, [r3, #0]
 800d0ea:	2408      	movs	r4, #8
 800d0ec:	193b      	adds	r3, r7, r4
 800d0ee:	1c0a      	adds	r2, r1, #0
 800d0f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0f2:	2117      	movs	r1, #23
 800d0f4:	187b      	adds	r3, r7, r1
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0fa:	2516      	movs	r5, #22
 800d0fc:	197b      	adds	r3, r7, r5
 800d0fe:	2200      	movs	r2, #0
 800d100:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	23b0      	movs	r3, #176	@ 0xb0
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	58d0      	ldr	r0, [r2, r3]
 800d10a:	193b      	adds	r3, r7, r4
 800d10c:	881d      	ldrh	r5, [r3, #0]
 800d10e:	000e      	movs	r6, r1
 800d110:	187c      	adds	r4, r7, r1
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	230b      	movs	r3, #11
 800d116:	18fb      	adds	r3, r7, r3
 800d118:	7819      	ldrb	r1, [r3, #0]
 800d11a:	002b      	movs	r3, r5
 800d11c:	f7f7 fb40 	bl	80047a0 <HAL_PCD_EP_Transmit>
 800d120:	0003      	movs	r3, r0
 800d122:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d124:	2516      	movs	r5, #22
 800d126:	197c      	adds	r4, r7, r5
 800d128:	19bb      	adds	r3, r7, r6
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	0018      	movs	r0, r3
 800d12e:	f000 f870 	bl	800d212 <USBD_Get_USB_Status>
 800d132:	0003      	movs	r3, r0
 800d134:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d136:	197b      	adds	r3, r7, r5
 800d138:	781b      	ldrb	r3, [r3, #0]
}
 800d13a:	0018      	movs	r0, r3
 800d13c:	46bd      	mov	sp, r7
 800d13e:	b007      	add	sp, #28
 800d140:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d142 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d142:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d144:	b087      	sub	sp, #28
 800d146:	af00      	add	r7, sp, #0
 800d148:	60f8      	str	r0, [r7, #12]
 800d14a:	0008      	movs	r0, r1
 800d14c:	607a      	str	r2, [r7, #4]
 800d14e:	0019      	movs	r1, r3
 800d150:	230b      	movs	r3, #11
 800d152:	18fb      	adds	r3, r7, r3
 800d154:	1c02      	adds	r2, r0, #0
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	2408      	movs	r4, #8
 800d15a:	193b      	adds	r3, r7, r4
 800d15c:	1c0a      	adds	r2, r1, #0
 800d15e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d160:	2117      	movs	r1, #23
 800d162:	187b      	adds	r3, r7, r1
 800d164:	2200      	movs	r2, #0
 800d166:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d168:	2516      	movs	r5, #22
 800d16a:	197b      	adds	r3, r7, r5
 800d16c:	2200      	movs	r2, #0
 800d16e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	23b0      	movs	r3, #176	@ 0xb0
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	58d0      	ldr	r0, [r2, r3]
 800d178:	193b      	adds	r3, r7, r4
 800d17a:	881d      	ldrh	r5, [r3, #0]
 800d17c:	000e      	movs	r6, r1
 800d17e:	187c      	adds	r4, r7, r1
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	230b      	movs	r3, #11
 800d184:	18fb      	adds	r3, r7, r3
 800d186:	7819      	ldrb	r1, [r3, #0]
 800d188:	002b      	movs	r3, r5
 800d18a:	f7f7 fab9 	bl	8004700 <HAL_PCD_EP_Receive>
 800d18e:	0003      	movs	r3, r0
 800d190:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d192:	2516      	movs	r5, #22
 800d194:	197c      	adds	r4, r7, r5
 800d196:	19bb      	adds	r3, r7, r6
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	0018      	movs	r0, r3
 800d19c:	f000 f839 	bl	800d212 <USBD_Get_USB_Status>
 800d1a0:	0003      	movs	r3, r0
 800d1a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d1a4:	197b      	adds	r3, r7, r5
 800d1a6:	781b      	ldrb	r3, [r3, #0]
}
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	b007      	add	sp, #28
 800d1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	000a      	movs	r2, r1
 800d1ba:	1cfb      	adds	r3, r7, #3
 800d1bc:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	23b0      	movs	r3, #176	@ 0xb0
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	58d2      	ldr	r2, [r2, r3]
 800d1c6:	1cfb      	adds	r3, r7, #3
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	0019      	movs	r1, r3
 800d1cc:	0010      	movs	r0, r2
 800d1ce:	f7f7 face 	bl	800476e <HAL_PCD_EP_GetRxCount>
 800d1d2:	0003      	movs	r3, r0
}
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	b002      	add	sp, #8
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d1e4:	4b02      	ldr	r3, [pc, #8]	@ (800d1f0 <USBD_static_malloc+0x14>)
}
 800d1e6:	0018      	movs	r0, r3
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	b002      	add	sp, #8
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	46c0      	nop			@ (mov r8, r8)
 800d1f0:	20001c68 	.word	0x20001c68

0800d1f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]

}
 800d1fc:	46c0      	nop			@ (mov r8, r8)
 800d1fe:	46bd      	mov	sp, r7
 800d200:	b002      	add	sp, #8
 800d202:	bd80      	pop	{r7, pc}

0800d204 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d208:	f7f5 f84a 	bl	80022a0 <SystemClock_Config>
}
 800d20c:	46c0      	nop			@ (mov r8, r8)
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b084      	sub	sp, #16
 800d216:	af00      	add	r7, sp, #0
 800d218:	0002      	movs	r2, r0
 800d21a:	1dfb      	adds	r3, r7, #7
 800d21c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d21e:	230f      	movs	r3, #15
 800d220:	18fb      	adds	r3, r7, r3
 800d222:	2200      	movs	r2, #0
 800d224:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d226:	1dfb      	adds	r3, r7, #7
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d017      	beq.n	800d25e <USBD_Get_USB_Status+0x4c>
 800d22e:	dc1b      	bgt.n	800d268 <USBD_Get_USB_Status+0x56>
 800d230:	2b02      	cmp	r3, #2
 800d232:	d00f      	beq.n	800d254 <USBD_Get_USB_Status+0x42>
 800d234:	dc18      	bgt.n	800d268 <USBD_Get_USB_Status+0x56>
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <USBD_Get_USB_Status+0x2e>
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d005      	beq.n	800d24a <USBD_Get_USB_Status+0x38>
 800d23e:	e013      	b.n	800d268 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d240:	230f      	movs	r3, #15
 800d242:	18fb      	adds	r3, r7, r3
 800d244:	2200      	movs	r2, #0
 800d246:	701a      	strb	r2, [r3, #0]
    break;
 800d248:	e013      	b.n	800d272 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d24a:	230f      	movs	r3, #15
 800d24c:	18fb      	adds	r3, r7, r3
 800d24e:	2202      	movs	r2, #2
 800d250:	701a      	strb	r2, [r3, #0]
    break;
 800d252:	e00e      	b.n	800d272 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d254:	230f      	movs	r3, #15
 800d256:	18fb      	adds	r3, r7, r3
 800d258:	2201      	movs	r2, #1
 800d25a:	701a      	strb	r2, [r3, #0]
    break;
 800d25c:	e009      	b.n	800d272 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d25e:	230f      	movs	r3, #15
 800d260:	18fb      	adds	r3, r7, r3
 800d262:	2202      	movs	r2, #2
 800d264:	701a      	strb	r2, [r3, #0]
    break;
 800d266:	e004      	b.n	800d272 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d268:	230f      	movs	r3, #15
 800d26a:	18fb      	adds	r3, r7, r3
 800d26c:	2202      	movs	r2, #2
 800d26e:	701a      	strb	r2, [r3, #0]
    break;
 800d270:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800d272:	230f      	movs	r3, #15
 800d274:	18fb      	adds	r3, r7, r3
 800d276:	781b      	ldrb	r3, [r3, #0]
}
 800d278:	0018      	movs	r0, r3
 800d27a:	46bd      	mov	sp, r7
 800d27c:	b004      	add	sp, #16
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI2 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b088      	sub	sp, #32
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d01a      	beq.n	800d2c4 <setup_DW1000RSTnIRQ+0x44>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800d28e:	210c      	movs	r1, #12
 800d290:	187b      	adds	r3, r7, r1
 800d292:	2204      	movs	r2, #4
 800d294:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d296:	187b      	adds	r3, r7, r1
 800d298:	2288      	movs	r2, #136	@ 0x88
 800d29a:	0352      	lsls	r2, r2, #13
 800d29c:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d29e:	187b      	adds	r3, r7, r1
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	609a      	str	r2, [r3, #8]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800d2a4:	187a      	adds	r2, r7, r1
 800d2a6:	2390      	movs	r3, #144	@ 0x90
 800d2a8:	05db      	lsls	r3, r3, #23
 800d2aa:	0011      	movs	r1, r2
 800d2ac:	0018      	movs	r0, r3
 800d2ae:	f7f6 fc39 	bl	8003b24 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI2_IRQn);     //pin #0 -> EXTI #0
 800d2b2:	2006      	movs	r0, #6
 800d2b4:	f7f6 f9ab 	bl	800360e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	2105      	movs	r1, #5
 800d2bc:	2006      	movs	r0, #6
 800d2be:	f7f6 f991 	bl	80035e4 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 800d2c2:	e01d      	b.n	800d300 <setup_DW1000RSTnIRQ+0x80>
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);    //pin #0 -> EXTI #0
 800d2c4:	2006      	movs	r0, #6
 800d2c6:	f7f6 f9b2 	bl	800362e <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800d2ca:	210c      	movs	r1, #12
 800d2cc:	187b      	adds	r3, r7, r1
 800d2ce:	2204      	movs	r2, #4
 800d2d0:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d2d2:	187b      	adds	r3, r7, r1
 800d2d4:	2211      	movs	r2, #17
 800d2d6:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2d8:	187b      	adds	r3, r7, r1
 800d2da:	2200      	movs	r2, #0
 800d2dc:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d2de:	187b      	adds	r3, r7, r1
 800d2e0:	2203      	movs	r2, #3
 800d2e2:	60da      	str	r2, [r3, #12]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800d2e4:	187a      	adds	r2, r7, r1
 800d2e6:	2390      	movs	r3, #144	@ 0x90
 800d2e8:	05db      	lsls	r3, r3, #23
 800d2ea:	0011      	movs	r1, r2
 800d2ec:	0018      	movs	r0, r3
 800d2ee:	f7f6 fc19 	bl	8003b24 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800d2f2:	2390      	movs	r3, #144	@ 0x90
 800d2f4:	05db      	lsls	r3, r3, #23
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	2104      	movs	r1, #4
 800d2fa:	0018      	movs	r0, r3
 800d2fc:	f7f6 fe7f 	bl	8003ffe <HAL_GPIO_WritePin>
}
 800d300:	46c0      	nop			@ (mov r8, r8)
 800d302:	46bd      	mov	sp, r7
 800d304:	b008      	add	sp, #32
 800d306:	bd80      	pop	{r7, pc}

0800d308 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	0002      	movs	r2, r0
 800d310:	1dbb      	adds	r3, r7, #6
 800d312:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800d314:	1dbb      	adds	r3, r7, #6
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	2b20      	cmp	r3, #32
 800d31a:	d101      	bne.n	800d320 <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800d31c:	f000 f804 	bl	800d328 <process_deca_irq>
    }
}
 800d320:	46c0      	nop			@ (mov r8, r8)
 800d322:	46bd      	mov	sp, r7
 800d324:	b002      	add	sp, #8
 800d326:	bd80      	pop	{r7, pc}

0800d328 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800d32c:	e002      	b.n	800d334 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800d32e:	4b05      	ldr	r3, [pc, #20]	@ (800d344 <process_deca_irq+0x1c>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800d334:	f000 f808 	bl	800d348 <port_CheckEXT_IRQ>
 800d338:	1e03      	subs	r3, r0, #0
 800d33a:	d1f8      	bne.n	800d32e <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800d33c:	46c0      	nop			@ (mov r8, r8)
 800d33e:	46c0      	nop			@ (mov r8, r8)
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20001e88 	.word	0x20001e88

0800d348 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800d34c:	4b04      	ldr	r3, [pc, #16]	@ (800d360 <port_CheckEXT_IRQ+0x18>)
 800d34e:	2120      	movs	r1, #32
 800d350:	0018      	movs	r0, r3
 800d352:	f7f6 fe37 	bl	8003fc4 <HAL_GPIO_ReadPin>
 800d356:	0003      	movs	r3, r0
}
 800d358:	0018      	movs	r0, r3
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	46c0      	nop			@ (mov r8, r8)
 800d360:	48000400 	.word	0x48000400

0800d364 <__cvt>:
 800d364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d366:	001f      	movs	r7, r3
 800d368:	2300      	movs	r3, #0
 800d36a:	0016      	movs	r6, r2
 800d36c:	b08b      	sub	sp, #44	@ 0x2c
 800d36e:	429f      	cmp	r7, r3
 800d370:	da04      	bge.n	800d37c <__cvt+0x18>
 800d372:	2180      	movs	r1, #128	@ 0x80
 800d374:	0609      	lsls	r1, r1, #24
 800d376:	187b      	adds	r3, r7, r1
 800d378:	001f      	movs	r7, r3
 800d37a:	232d      	movs	r3, #45	@ 0x2d
 800d37c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d37e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d380:	7013      	strb	r3, [r2, #0]
 800d382:	2320      	movs	r3, #32
 800d384:	2203      	movs	r2, #3
 800d386:	439d      	bics	r5, r3
 800d388:	2d46      	cmp	r5, #70	@ 0x46
 800d38a:	d007      	beq.n	800d39c <__cvt+0x38>
 800d38c:	002b      	movs	r3, r5
 800d38e:	3b45      	subs	r3, #69	@ 0x45
 800d390:	4259      	negs	r1, r3
 800d392:	414b      	adcs	r3, r1
 800d394:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d396:	3a01      	subs	r2, #1
 800d398:	18cb      	adds	r3, r1, r3
 800d39a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d39c:	ab09      	add	r3, sp, #36	@ 0x24
 800d39e:	9304      	str	r3, [sp, #16]
 800d3a0:	ab08      	add	r3, sp, #32
 800d3a2:	9303      	str	r3, [sp, #12]
 800d3a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3a6:	9200      	str	r2, [sp, #0]
 800d3a8:	9302      	str	r3, [sp, #8]
 800d3aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3ac:	0032      	movs	r2, r6
 800d3ae:	9301      	str	r3, [sp, #4]
 800d3b0:	003b      	movs	r3, r7
 800d3b2:	f000 fe69 	bl	800e088 <_dtoa_r>
 800d3b6:	0004      	movs	r4, r0
 800d3b8:	2d47      	cmp	r5, #71	@ 0x47
 800d3ba:	d11b      	bne.n	800d3f4 <__cvt+0x90>
 800d3bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3be:	07db      	lsls	r3, r3, #31
 800d3c0:	d511      	bpl.n	800d3e6 <__cvt+0x82>
 800d3c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3c4:	18c3      	adds	r3, r0, r3
 800d3c6:	9307      	str	r3, [sp, #28]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	0030      	movs	r0, r6
 800d3ce:	0039      	movs	r1, r7
 800d3d0:	f7f3 f83c 	bl	800044c <__aeabi_dcmpeq>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d001      	beq.n	800d3dc <__cvt+0x78>
 800d3d8:	9b07      	ldr	r3, [sp, #28]
 800d3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3dc:	2230      	movs	r2, #48	@ 0x30
 800d3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e0:	9907      	ldr	r1, [sp, #28]
 800d3e2:	428b      	cmp	r3, r1
 800d3e4:	d320      	bcc.n	800d428 <__cvt+0xc4>
 800d3e6:	0020      	movs	r0, r4
 800d3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d3ec:	1b1b      	subs	r3, r3, r4
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	b00b      	add	sp, #44	@ 0x2c
 800d3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3f6:	18c3      	adds	r3, r0, r3
 800d3f8:	9307      	str	r3, [sp, #28]
 800d3fa:	2d46      	cmp	r5, #70	@ 0x46
 800d3fc:	d1e4      	bne.n	800d3c8 <__cvt+0x64>
 800d3fe:	7803      	ldrb	r3, [r0, #0]
 800d400:	2b30      	cmp	r3, #48	@ 0x30
 800d402:	d10c      	bne.n	800d41e <__cvt+0xba>
 800d404:	2200      	movs	r2, #0
 800d406:	2300      	movs	r3, #0
 800d408:	0030      	movs	r0, r6
 800d40a:	0039      	movs	r1, r7
 800d40c:	f7f3 f81e 	bl	800044c <__aeabi_dcmpeq>
 800d410:	2800      	cmp	r0, #0
 800d412:	d104      	bne.n	800d41e <__cvt+0xba>
 800d414:	2301      	movs	r3, #1
 800d416:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d418:	1a9b      	subs	r3, r3, r2
 800d41a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d41c:	6013      	str	r3, [r2, #0]
 800d41e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d420:	9a07      	ldr	r2, [sp, #28]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	18d3      	adds	r3, r2, r3
 800d426:	e7ce      	b.n	800d3c6 <__cvt+0x62>
 800d428:	1c59      	adds	r1, r3, #1
 800d42a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d42c:	701a      	strb	r2, [r3, #0]
 800d42e:	e7d6      	b.n	800d3de <__cvt+0x7a>

0800d430 <__exponent>:
 800d430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d432:	232b      	movs	r3, #43	@ 0x2b
 800d434:	0005      	movs	r5, r0
 800d436:	000c      	movs	r4, r1
 800d438:	b085      	sub	sp, #20
 800d43a:	7002      	strb	r2, [r0, #0]
 800d43c:	2900      	cmp	r1, #0
 800d43e:	da01      	bge.n	800d444 <__exponent+0x14>
 800d440:	424c      	negs	r4, r1
 800d442:	3302      	adds	r3, #2
 800d444:	706b      	strb	r3, [r5, #1]
 800d446:	2c09      	cmp	r4, #9
 800d448:	dd2c      	ble.n	800d4a4 <__exponent+0x74>
 800d44a:	ab02      	add	r3, sp, #8
 800d44c:	1dde      	adds	r6, r3, #7
 800d44e:	0020      	movs	r0, r4
 800d450:	210a      	movs	r1, #10
 800d452:	f7f2 ffe5 	bl	8000420 <__aeabi_idivmod>
 800d456:	0037      	movs	r7, r6
 800d458:	3130      	adds	r1, #48	@ 0x30
 800d45a:	3e01      	subs	r6, #1
 800d45c:	0020      	movs	r0, r4
 800d45e:	7031      	strb	r1, [r6, #0]
 800d460:	210a      	movs	r1, #10
 800d462:	9401      	str	r4, [sp, #4]
 800d464:	f7f2 fef6 	bl	8000254 <__divsi3>
 800d468:	9b01      	ldr	r3, [sp, #4]
 800d46a:	0004      	movs	r4, r0
 800d46c:	2b63      	cmp	r3, #99	@ 0x63
 800d46e:	dcee      	bgt.n	800d44e <__exponent+0x1e>
 800d470:	1eba      	subs	r2, r7, #2
 800d472:	1ca8      	adds	r0, r5, #2
 800d474:	0001      	movs	r1, r0
 800d476:	0013      	movs	r3, r2
 800d478:	3430      	adds	r4, #48	@ 0x30
 800d47a:	7014      	strb	r4, [r2, #0]
 800d47c:	ac02      	add	r4, sp, #8
 800d47e:	3407      	adds	r4, #7
 800d480:	429c      	cmp	r4, r3
 800d482:	d80a      	bhi.n	800d49a <__exponent+0x6a>
 800d484:	2300      	movs	r3, #0
 800d486:	42a2      	cmp	r2, r4
 800d488:	d803      	bhi.n	800d492 <__exponent+0x62>
 800d48a:	3309      	adds	r3, #9
 800d48c:	aa02      	add	r2, sp, #8
 800d48e:	189b      	adds	r3, r3, r2
 800d490:	1bdb      	subs	r3, r3, r7
 800d492:	18c0      	adds	r0, r0, r3
 800d494:	1b40      	subs	r0, r0, r5
 800d496:	b005      	add	sp, #20
 800d498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d49a:	781c      	ldrb	r4, [r3, #0]
 800d49c:	3301      	adds	r3, #1
 800d49e:	700c      	strb	r4, [r1, #0]
 800d4a0:	3101      	adds	r1, #1
 800d4a2:	e7eb      	b.n	800d47c <__exponent+0x4c>
 800d4a4:	2330      	movs	r3, #48	@ 0x30
 800d4a6:	18e4      	adds	r4, r4, r3
 800d4a8:	70ab      	strb	r3, [r5, #2]
 800d4aa:	1d28      	adds	r0, r5, #4
 800d4ac:	70ec      	strb	r4, [r5, #3]
 800d4ae:	e7f1      	b.n	800d494 <__exponent+0x64>

0800d4b0 <_printf_float>:
 800d4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4b2:	b097      	sub	sp, #92	@ 0x5c
 800d4b4:	000d      	movs	r5, r1
 800d4b6:	920a      	str	r2, [sp, #40]	@ 0x28
 800d4b8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800d4ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4bc:	9009      	str	r0, [sp, #36]	@ 0x24
 800d4be:	f000 fccb 	bl	800de58 <_localeconv_r>
 800d4c2:	6803      	ldr	r3, [r0, #0]
 800d4c4:	0018      	movs	r0, r3
 800d4c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800d4c8:	f7f2 fe1e 	bl	8000108 <strlen>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d4d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800d4d2:	7e2b      	ldrb	r3, [r5, #24]
 800d4d4:	2207      	movs	r2, #7
 800d4d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4d8:	682b      	ldr	r3, [r5, #0]
 800d4da:	930e      	str	r3, [sp, #56]	@ 0x38
 800d4dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	05c9      	lsls	r1, r1, #23
 800d4e2:	d545      	bpl.n	800d570 <_printf_float+0xc0>
 800d4e4:	189b      	adds	r3, r3, r2
 800d4e6:	4393      	bics	r3, r2
 800d4e8:	001a      	movs	r2, r3
 800d4ea:	3208      	adds	r2, #8
 800d4ec:	6022      	str	r2, [r4, #0]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	681e      	ldr	r6, [r3, #0]
 800d4f2:	685f      	ldr	r7, [r3, #4]
 800d4f4:	007b      	lsls	r3, r7, #1
 800d4f6:	085b      	lsrs	r3, r3, #1
 800d4f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4fa:	9610      	str	r6, [sp, #64]	@ 0x40
 800d4fc:	64ae      	str	r6, [r5, #72]	@ 0x48
 800d4fe:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800d500:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d502:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d504:	4ba7      	ldr	r3, [pc, #668]	@ (800d7a4 <_printf_float+0x2f4>)
 800d506:	4252      	negs	r2, r2
 800d508:	f7f4 fdda 	bl	80020c0 <__aeabi_dcmpun>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d131      	bne.n	800d574 <_printf_float+0xc4>
 800d510:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d512:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d514:	2201      	movs	r2, #1
 800d516:	4ba3      	ldr	r3, [pc, #652]	@ (800d7a4 <_printf_float+0x2f4>)
 800d518:	4252      	negs	r2, r2
 800d51a:	f7f2 ffa7 	bl	800046c <__aeabi_dcmple>
 800d51e:	2800      	cmp	r0, #0
 800d520:	d128      	bne.n	800d574 <_printf_float+0xc4>
 800d522:	2200      	movs	r2, #0
 800d524:	2300      	movs	r3, #0
 800d526:	0030      	movs	r0, r6
 800d528:	0039      	movs	r1, r7
 800d52a:	f7f2 ff95 	bl	8000458 <__aeabi_dcmplt>
 800d52e:	2800      	cmp	r0, #0
 800d530:	d003      	beq.n	800d53a <_printf_float+0x8a>
 800d532:	002b      	movs	r3, r5
 800d534:	222d      	movs	r2, #45	@ 0x2d
 800d536:	3343      	adds	r3, #67	@ 0x43
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d53c:	4f9a      	ldr	r7, [pc, #616]	@ (800d7a8 <_printf_float+0x2f8>)
 800d53e:	2b47      	cmp	r3, #71	@ 0x47
 800d540:	d900      	bls.n	800d544 <_printf_float+0x94>
 800d542:	4f9a      	ldr	r7, [pc, #616]	@ (800d7ac <_printf_float+0x2fc>)
 800d544:	2303      	movs	r3, #3
 800d546:	2400      	movs	r4, #0
 800d548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d54a:	612b      	str	r3, [r5, #16]
 800d54c:	3301      	adds	r3, #1
 800d54e:	439a      	bics	r2, r3
 800d550:	602a      	str	r2, [r5, #0]
 800d552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d554:	0029      	movs	r1, r5
 800d556:	9300      	str	r3, [sp, #0]
 800d558:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d55a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d55c:	aa15      	add	r2, sp, #84	@ 0x54
 800d55e:	f000 f9e5 	bl	800d92c <_printf_common>
 800d562:	3001      	adds	r0, #1
 800d564:	d000      	beq.n	800d568 <_printf_float+0xb8>
 800d566:	e09f      	b.n	800d6a8 <_printf_float+0x1f8>
 800d568:	2001      	movs	r0, #1
 800d56a:	4240      	negs	r0, r0
 800d56c:	b017      	add	sp, #92	@ 0x5c
 800d56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d570:	3307      	adds	r3, #7
 800d572:	e7b8      	b.n	800d4e6 <_printf_float+0x36>
 800d574:	0032      	movs	r2, r6
 800d576:	003b      	movs	r3, r7
 800d578:	0030      	movs	r0, r6
 800d57a:	0039      	movs	r1, r7
 800d57c:	f7f4 fda0 	bl	80020c0 <__aeabi_dcmpun>
 800d580:	2800      	cmp	r0, #0
 800d582:	d00b      	beq.n	800d59c <_printf_float+0xec>
 800d584:	2f00      	cmp	r7, #0
 800d586:	da03      	bge.n	800d590 <_printf_float+0xe0>
 800d588:	002b      	movs	r3, r5
 800d58a:	222d      	movs	r2, #45	@ 0x2d
 800d58c:	3343      	adds	r3, #67	@ 0x43
 800d58e:	701a      	strb	r2, [r3, #0]
 800d590:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d592:	4f87      	ldr	r7, [pc, #540]	@ (800d7b0 <_printf_float+0x300>)
 800d594:	2b47      	cmp	r3, #71	@ 0x47
 800d596:	d9d5      	bls.n	800d544 <_printf_float+0x94>
 800d598:	4f86      	ldr	r7, [pc, #536]	@ (800d7b4 <_printf_float+0x304>)
 800d59a:	e7d3      	b.n	800d544 <_printf_float+0x94>
 800d59c:	2220      	movs	r2, #32
 800d59e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d5a0:	686b      	ldr	r3, [r5, #4]
 800d5a2:	4394      	bics	r4, r2
 800d5a4:	1c5a      	adds	r2, r3, #1
 800d5a6:	d146      	bne.n	800d636 <_printf_float+0x186>
 800d5a8:	3307      	adds	r3, #7
 800d5aa:	606b      	str	r3, [r5, #4]
 800d5ac:	2380      	movs	r3, #128	@ 0x80
 800d5ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	602b      	str	r3, [r5, #0]
 800d5b8:	9206      	str	r2, [sp, #24]
 800d5ba:	aa14      	add	r2, sp, #80	@ 0x50
 800d5bc:	9205      	str	r2, [sp, #20]
 800d5be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d5c0:	a90a      	add	r1, sp, #40	@ 0x28
 800d5c2:	9204      	str	r2, [sp, #16]
 800d5c4:	aa13      	add	r2, sp, #76	@ 0x4c
 800d5c6:	9203      	str	r2, [sp, #12]
 800d5c8:	2223      	movs	r2, #35	@ 0x23
 800d5ca:	1852      	adds	r2, r2, r1
 800d5cc:	9202      	str	r2, [sp, #8]
 800d5ce:	9301      	str	r3, [sp, #4]
 800d5d0:	686b      	ldr	r3, [r5, #4]
 800d5d2:	0032      	movs	r2, r6
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5d8:	003b      	movs	r3, r7
 800d5da:	f7ff fec3 	bl	800d364 <__cvt>
 800d5de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d5e0:	0007      	movs	r7, r0
 800d5e2:	2c47      	cmp	r4, #71	@ 0x47
 800d5e4:	d12d      	bne.n	800d642 <_printf_float+0x192>
 800d5e6:	1cd3      	adds	r3, r2, #3
 800d5e8:	db02      	blt.n	800d5f0 <_printf_float+0x140>
 800d5ea:	686b      	ldr	r3, [r5, #4]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	dd48      	ble.n	800d682 <_printf_float+0x1d2>
 800d5f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d5f4:	3b02      	subs	r3, #2
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5fa:	0028      	movs	r0, r5
 800d5fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d5fe:	3901      	subs	r1, #1
 800d600:	3050      	adds	r0, #80	@ 0x50
 800d602:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d604:	f7ff ff14 	bl	800d430 <__exponent>
 800d608:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d60a:	0004      	movs	r4, r0
 800d60c:	1813      	adds	r3, r2, r0
 800d60e:	612b      	str	r3, [r5, #16]
 800d610:	2a01      	cmp	r2, #1
 800d612:	dc02      	bgt.n	800d61a <_printf_float+0x16a>
 800d614:	682a      	ldr	r2, [r5, #0]
 800d616:	07d2      	lsls	r2, r2, #31
 800d618:	d501      	bpl.n	800d61e <_printf_float+0x16e>
 800d61a:	3301      	adds	r3, #1
 800d61c:	612b      	str	r3, [r5, #16]
 800d61e:	2323      	movs	r3, #35	@ 0x23
 800d620:	aa0a      	add	r2, sp, #40	@ 0x28
 800d622:	189b      	adds	r3, r3, r2
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d100      	bne.n	800d62c <_printf_float+0x17c>
 800d62a:	e792      	b.n	800d552 <_printf_float+0xa2>
 800d62c:	002b      	movs	r3, r5
 800d62e:	222d      	movs	r2, #45	@ 0x2d
 800d630:	3343      	adds	r3, #67	@ 0x43
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	e78d      	b.n	800d552 <_printf_float+0xa2>
 800d636:	2c47      	cmp	r4, #71	@ 0x47
 800d638:	d1b8      	bne.n	800d5ac <_printf_float+0xfc>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1b6      	bne.n	800d5ac <_printf_float+0xfc>
 800d63e:	3301      	adds	r3, #1
 800d640:	e7b3      	b.n	800d5aa <_printf_float+0xfa>
 800d642:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d644:	0011      	movs	r1, r2
 800d646:	2b65      	cmp	r3, #101	@ 0x65
 800d648:	d9d7      	bls.n	800d5fa <_printf_float+0x14a>
 800d64a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d64c:	2b66      	cmp	r3, #102	@ 0x66
 800d64e:	d11a      	bne.n	800d686 <_printf_float+0x1d6>
 800d650:	686b      	ldr	r3, [r5, #4]
 800d652:	2a00      	cmp	r2, #0
 800d654:	dd09      	ble.n	800d66a <_printf_float+0x1ba>
 800d656:	612a      	str	r2, [r5, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d102      	bne.n	800d662 <_printf_float+0x1b2>
 800d65c:	6829      	ldr	r1, [r5, #0]
 800d65e:	07c9      	lsls	r1, r1, #31
 800d660:	d50b      	bpl.n	800d67a <_printf_float+0x1ca>
 800d662:	3301      	adds	r3, #1
 800d664:	189b      	adds	r3, r3, r2
 800d666:	612b      	str	r3, [r5, #16]
 800d668:	e007      	b.n	800d67a <_printf_float+0x1ca>
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d103      	bne.n	800d676 <_printf_float+0x1c6>
 800d66e:	2201      	movs	r2, #1
 800d670:	6829      	ldr	r1, [r5, #0]
 800d672:	4211      	tst	r1, r2
 800d674:	d000      	beq.n	800d678 <_printf_float+0x1c8>
 800d676:	1c9a      	adds	r2, r3, #2
 800d678:	612a      	str	r2, [r5, #16]
 800d67a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d67c:	2400      	movs	r4, #0
 800d67e:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d680:	e7cd      	b.n	800d61e <_printf_float+0x16e>
 800d682:	2367      	movs	r3, #103	@ 0x67
 800d684:	930c      	str	r3, [sp, #48]	@ 0x30
 800d686:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d688:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d68a:	4299      	cmp	r1, r3
 800d68c:	db06      	blt.n	800d69c <_printf_float+0x1ec>
 800d68e:	682b      	ldr	r3, [r5, #0]
 800d690:	6129      	str	r1, [r5, #16]
 800d692:	07db      	lsls	r3, r3, #31
 800d694:	d5f1      	bpl.n	800d67a <_printf_float+0x1ca>
 800d696:	3101      	adds	r1, #1
 800d698:	6129      	str	r1, [r5, #16]
 800d69a:	e7ee      	b.n	800d67a <_printf_float+0x1ca>
 800d69c:	2201      	movs	r2, #1
 800d69e:	2900      	cmp	r1, #0
 800d6a0:	dce0      	bgt.n	800d664 <_printf_float+0x1b4>
 800d6a2:	1892      	adds	r2, r2, r2
 800d6a4:	1a52      	subs	r2, r2, r1
 800d6a6:	e7dd      	b.n	800d664 <_printf_float+0x1b4>
 800d6a8:	682a      	ldr	r2, [r5, #0]
 800d6aa:	0553      	lsls	r3, r2, #21
 800d6ac:	d408      	bmi.n	800d6c0 <_printf_float+0x210>
 800d6ae:	692b      	ldr	r3, [r5, #16]
 800d6b0:	003a      	movs	r2, r7
 800d6b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d6b8:	47a0      	blx	r4
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	d129      	bne.n	800d712 <_printf_float+0x262>
 800d6be:	e753      	b.n	800d568 <_printf_float+0xb8>
 800d6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6c2:	2b65      	cmp	r3, #101	@ 0x65
 800d6c4:	d800      	bhi.n	800d6c8 <_printf_float+0x218>
 800d6c6:	e0da      	b.n	800d87e <_printf_float+0x3ce>
 800d6c8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d6ca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f7f2 febc 	bl	800044c <__aeabi_dcmpeq>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d033      	beq.n	800d740 <_printf_float+0x290>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	4a37      	ldr	r2, [pc, #220]	@ (800d7b8 <_printf_float+0x308>)
 800d6dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d6e2:	47a0      	blx	r4
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d100      	bne.n	800d6ea <_printf_float+0x23a>
 800d6e8:	e73e      	b.n	800d568 <_printf_float+0xb8>
 800d6ea:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d6ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d6ee:	42b3      	cmp	r3, r6
 800d6f0:	db02      	blt.n	800d6f8 <_printf_float+0x248>
 800d6f2:	682b      	ldr	r3, [r5, #0]
 800d6f4:	07db      	lsls	r3, r3, #31
 800d6f6:	d50c      	bpl.n	800d712 <_printf_float+0x262>
 800d6f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d6fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d6fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d700:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d702:	47a0      	blx	r4
 800d704:	2400      	movs	r4, #0
 800d706:	3001      	adds	r0, #1
 800d708:	d100      	bne.n	800d70c <_printf_float+0x25c>
 800d70a:	e72d      	b.n	800d568 <_printf_float+0xb8>
 800d70c:	1e73      	subs	r3, r6, #1
 800d70e:	42a3      	cmp	r3, r4
 800d710:	dc0a      	bgt.n	800d728 <_printf_float+0x278>
 800d712:	682b      	ldr	r3, [r5, #0]
 800d714:	079b      	lsls	r3, r3, #30
 800d716:	d500      	bpl.n	800d71a <_printf_float+0x26a>
 800d718:	e105      	b.n	800d926 <_printf_float+0x476>
 800d71a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d71c:	68e8      	ldr	r0, [r5, #12]
 800d71e:	4298      	cmp	r0, r3
 800d720:	db00      	blt.n	800d724 <_printf_float+0x274>
 800d722:	e723      	b.n	800d56c <_printf_float+0xbc>
 800d724:	0018      	movs	r0, r3
 800d726:	e721      	b.n	800d56c <_printf_float+0xbc>
 800d728:	002a      	movs	r2, r5
 800d72a:	2301      	movs	r3, #1
 800d72c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d72e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d730:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d732:	321a      	adds	r2, #26
 800d734:	47b8      	blx	r7
 800d736:	3001      	adds	r0, #1
 800d738:	d100      	bne.n	800d73c <_printf_float+0x28c>
 800d73a:	e715      	b.n	800d568 <_printf_float+0xb8>
 800d73c:	3401      	adds	r4, #1
 800d73e:	e7e5      	b.n	800d70c <_printf_float+0x25c>
 800d740:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d742:	2b00      	cmp	r3, #0
 800d744:	dc3a      	bgt.n	800d7bc <_printf_float+0x30c>
 800d746:	2301      	movs	r3, #1
 800d748:	4a1b      	ldr	r2, [pc, #108]	@ (800d7b8 <_printf_float+0x308>)
 800d74a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d74c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d74e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d750:	47a0      	blx	r4
 800d752:	3001      	adds	r0, #1
 800d754:	d100      	bne.n	800d758 <_printf_float+0x2a8>
 800d756:	e707      	b.n	800d568 <_printf_float+0xb8>
 800d758:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d75a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d75c:	4333      	orrs	r3, r6
 800d75e:	d102      	bne.n	800d766 <_printf_float+0x2b6>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	07db      	lsls	r3, r3, #31
 800d764:	d5d5      	bpl.n	800d712 <_printf_float+0x262>
 800d766:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d768:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d76a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d76c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d76e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d770:	47a0      	blx	r4
 800d772:	2300      	movs	r3, #0
 800d774:	3001      	adds	r0, #1
 800d776:	d100      	bne.n	800d77a <_printf_float+0x2ca>
 800d778:	e6f6      	b.n	800d568 <_printf_float+0xb8>
 800d77a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d77c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d77e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d780:	425b      	negs	r3, r3
 800d782:	4293      	cmp	r3, r2
 800d784:	dc01      	bgt.n	800d78a <_printf_float+0x2da>
 800d786:	0033      	movs	r3, r6
 800d788:	e792      	b.n	800d6b0 <_printf_float+0x200>
 800d78a:	002a      	movs	r2, r5
 800d78c:	2301      	movs	r3, #1
 800d78e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d790:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d792:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d794:	321a      	adds	r2, #26
 800d796:	47a0      	blx	r4
 800d798:	3001      	adds	r0, #1
 800d79a:	d100      	bne.n	800d79e <_printf_float+0x2ee>
 800d79c:	e6e4      	b.n	800d568 <_printf_float+0xb8>
 800d79e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	e7ea      	b.n	800d77a <_printf_float+0x2ca>
 800d7a4:	7fefffff 	.word	0x7fefffff
 800d7a8:	0800ffa8 	.word	0x0800ffa8
 800d7ac:	0800ffac 	.word	0x0800ffac
 800d7b0:	0800ffb0 	.word	0x0800ffb0
 800d7b4:	0800ffb4 	.word	0x0800ffb4
 800d7b8:	0800ffb8 	.word	0x0800ffb8
 800d7bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d7be:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d7c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7c2:	429e      	cmp	r6, r3
 800d7c4:	dd00      	ble.n	800d7c8 <_printf_float+0x318>
 800d7c6:	001e      	movs	r6, r3
 800d7c8:	2e00      	cmp	r6, #0
 800d7ca:	dc31      	bgt.n	800d830 <_printf_float+0x380>
 800d7cc:	43f3      	mvns	r3, r6
 800d7ce:	2400      	movs	r4, #0
 800d7d0:	17db      	asrs	r3, r3, #31
 800d7d2:	4033      	ands	r3, r6
 800d7d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d7d6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7da:	1af3      	subs	r3, r6, r3
 800d7dc:	42a3      	cmp	r3, r4
 800d7de:	dc30      	bgt.n	800d842 <_printf_float+0x392>
 800d7e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d7e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	dc38      	bgt.n	800d85a <_printf_float+0x3aa>
 800d7e8:	682b      	ldr	r3, [r5, #0]
 800d7ea:	07db      	lsls	r3, r3, #31
 800d7ec:	d435      	bmi.n	800d85a <_printf_float+0x3aa>
 800d7ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d7f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d7f4:	1b9b      	subs	r3, r3, r6
 800d7f6:	1b14      	subs	r4, r2, r4
 800d7f8:	429c      	cmp	r4, r3
 800d7fa:	dd00      	ble.n	800d7fe <_printf_float+0x34e>
 800d7fc:	001c      	movs	r4, r3
 800d7fe:	2c00      	cmp	r4, #0
 800d800:	dc34      	bgt.n	800d86c <_printf_float+0x3bc>
 800d802:	43e3      	mvns	r3, r4
 800d804:	2600      	movs	r6, #0
 800d806:	17db      	asrs	r3, r3, #31
 800d808:	401c      	ands	r4, r3
 800d80a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d80c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d80e:	1ad3      	subs	r3, r2, r3
 800d810:	1b1b      	subs	r3, r3, r4
 800d812:	42b3      	cmp	r3, r6
 800d814:	dc00      	bgt.n	800d818 <_printf_float+0x368>
 800d816:	e77c      	b.n	800d712 <_printf_float+0x262>
 800d818:	002a      	movs	r2, r5
 800d81a:	2301      	movs	r3, #1
 800d81c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d81e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d820:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d822:	321a      	adds	r2, #26
 800d824:	47b8      	blx	r7
 800d826:	3001      	adds	r0, #1
 800d828:	d100      	bne.n	800d82c <_printf_float+0x37c>
 800d82a:	e69d      	b.n	800d568 <_printf_float+0xb8>
 800d82c:	3601      	adds	r6, #1
 800d82e:	e7ec      	b.n	800d80a <_printf_float+0x35a>
 800d830:	0033      	movs	r3, r6
 800d832:	003a      	movs	r2, r7
 800d834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d838:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d83a:	47a0      	blx	r4
 800d83c:	3001      	adds	r0, #1
 800d83e:	d1c5      	bne.n	800d7cc <_printf_float+0x31c>
 800d840:	e692      	b.n	800d568 <_printf_float+0xb8>
 800d842:	002a      	movs	r2, r5
 800d844:	2301      	movs	r3, #1
 800d846:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d848:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d84a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d84c:	321a      	adds	r2, #26
 800d84e:	47b0      	blx	r6
 800d850:	3001      	adds	r0, #1
 800d852:	d100      	bne.n	800d856 <_printf_float+0x3a6>
 800d854:	e688      	b.n	800d568 <_printf_float+0xb8>
 800d856:	3401      	adds	r4, #1
 800d858:	e7bd      	b.n	800d7d6 <_printf_float+0x326>
 800d85a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d85c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d85e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d860:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d862:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d864:	47a0      	blx	r4
 800d866:	3001      	adds	r0, #1
 800d868:	d1c1      	bne.n	800d7ee <_printf_float+0x33e>
 800d86a:	e67d      	b.n	800d568 <_printf_float+0xb8>
 800d86c:	19ba      	adds	r2, r7, r6
 800d86e:	0023      	movs	r3, r4
 800d870:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d874:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d876:	47b0      	blx	r6
 800d878:	3001      	adds	r0, #1
 800d87a:	d1c2      	bne.n	800d802 <_printf_float+0x352>
 800d87c:	e674      	b.n	800d568 <_printf_float+0xb8>
 800d87e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d880:	930c      	str	r3, [sp, #48]	@ 0x30
 800d882:	2b01      	cmp	r3, #1
 800d884:	dc02      	bgt.n	800d88c <_printf_float+0x3dc>
 800d886:	2301      	movs	r3, #1
 800d888:	421a      	tst	r2, r3
 800d88a:	d039      	beq.n	800d900 <_printf_float+0x450>
 800d88c:	2301      	movs	r3, #1
 800d88e:	003a      	movs	r2, r7
 800d890:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d894:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d896:	47b0      	blx	r6
 800d898:	3001      	adds	r0, #1
 800d89a:	d100      	bne.n	800d89e <_printf_float+0x3ee>
 800d89c:	e664      	b.n	800d568 <_printf_float+0xb8>
 800d89e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d8a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8a6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d8a8:	47b0      	blx	r6
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d100      	bne.n	800d8b0 <_printf_float+0x400>
 800d8ae:	e65b      	b.n	800d568 <_printf_float+0xb8>
 800d8b0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d8b2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d8b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8bc:	2300      	movs	r3, #0
 800d8be:	f7f2 fdc5 	bl	800044c <__aeabi_dcmpeq>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	d11a      	bne.n	800d8fc <_printf_float+0x44c>
 800d8c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d8c8:	1c7a      	adds	r2, r7, #1
 800d8ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d8d0:	47b0      	blx	r6
 800d8d2:	3001      	adds	r0, #1
 800d8d4:	d10e      	bne.n	800d8f4 <_printf_float+0x444>
 800d8d6:	e647      	b.n	800d568 <_printf_float+0xb8>
 800d8d8:	002a      	movs	r2, r5
 800d8da:	2301      	movs	r3, #1
 800d8dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d8e2:	321a      	adds	r2, #26
 800d8e4:	47b8      	blx	r7
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d100      	bne.n	800d8ec <_printf_float+0x43c>
 800d8ea:	e63d      	b.n	800d568 <_printf_float+0xb8>
 800d8ec:	3601      	adds	r6, #1
 800d8ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d8f0:	429e      	cmp	r6, r3
 800d8f2:	dbf1      	blt.n	800d8d8 <_printf_float+0x428>
 800d8f4:	002a      	movs	r2, r5
 800d8f6:	0023      	movs	r3, r4
 800d8f8:	3250      	adds	r2, #80	@ 0x50
 800d8fa:	e6da      	b.n	800d6b2 <_printf_float+0x202>
 800d8fc:	2600      	movs	r6, #0
 800d8fe:	e7f6      	b.n	800d8ee <_printf_float+0x43e>
 800d900:	003a      	movs	r2, r7
 800d902:	e7e2      	b.n	800d8ca <_printf_float+0x41a>
 800d904:	002a      	movs	r2, r5
 800d906:	2301      	movs	r3, #1
 800d908:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d90a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d90c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d90e:	3219      	adds	r2, #25
 800d910:	47b0      	blx	r6
 800d912:	3001      	adds	r0, #1
 800d914:	d100      	bne.n	800d918 <_printf_float+0x468>
 800d916:	e627      	b.n	800d568 <_printf_float+0xb8>
 800d918:	3401      	adds	r4, #1
 800d91a:	68eb      	ldr	r3, [r5, #12]
 800d91c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d91e:	1a9b      	subs	r3, r3, r2
 800d920:	42a3      	cmp	r3, r4
 800d922:	dcef      	bgt.n	800d904 <_printf_float+0x454>
 800d924:	e6f9      	b.n	800d71a <_printf_float+0x26a>
 800d926:	2400      	movs	r4, #0
 800d928:	e7f7      	b.n	800d91a <_printf_float+0x46a>
 800d92a:	46c0      	nop			@ (mov r8, r8)

0800d92c <_printf_common>:
 800d92c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d92e:	0016      	movs	r6, r2
 800d930:	9301      	str	r3, [sp, #4]
 800d932:	688a      	ldr	r2, [r1, #8]
 800d934:	690b      	ldr	r3, [r1, #16]
 800d936:	000c      	movs	r4, r1
 800d938:	9000      	str	r0, [sp, #0]
 800d93a:	4293      	cmp	r3, r2
 800d93c:	da00      	bge.n	800d940 <_printf_common+0x14>
 800d93e:	0013      	movs	r3, r2
 800d940:	0022      	movs	r2, r4
 800d942:	6033      	str	r3, [r6, #0]
 800d944:	3243      	adds	r2, #67	@ 0x43
 800d946:	7812      	ldrb	r2, [r2, #0]
 800d948:	2a00      	cmp	r2, #0
 800d94a:	d001      	beq.n	800d950 <_printf_common+0x24>
 800d94c:	3301      	adds	r3, #1
 800d94e:	6033      	str	r3, [r6, #0]
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	069b      	lsls	r3, r3, #26
 800d954:	d502      	bpl.n	800d95c <_printf_common+0x30>
 800d956:	6833      	ldr	r3, [r6, #0]
 800d958:	3302      	adds	r3, #2
 800d95a:	6033      	str	r3, [r6, #0]
 800d95c:	6822      	ldr	r2, [r4, #0]
 800d95e:	2306      	movs	r3, #6
 800d960:	0015      	movs	r5, r2
 800d962:	401d      	ands	r5, r3
 800d964:	421a      	tst	r2, r3
 800d966:	d027      	beq.n	800d9b8 <_printf_common+0x8c>
 800d968:	0023      	movs	r3, r4
 800d96a:	3343      	adds	r3, #67	@ 0x43
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	1e5a      	subs	r2, r3, #1
 800d970:	4193      	sbcs	r3, r2
 800d972:	6822      	ldr	r2, [r4, #0]
 800d974:	0692      	lsls	r2, r2, #26
 800d976:	d430      	bmi.n	800d9da <_printf_common+0xae>
 800d978:	0022      	movs	r2, r4
 800d97a:	9901      	ldr	r1, [sp, #4]
 800d97c:	9800      	ldr	r0, [sp, #0]
 800d97e:	9d08      	ldr	r5, [sp, #32]
 800d980:	3243      	adds	r2, #67	@ 0x43
 800d982:	47a8      	blx	r5
 800d984:	3001      	adds	r0, #1
 800d986:	d025      	beq.n	800d9d4 <_printf_common+0xa8>
 800d988:	2206      	movs	r2, #6
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	2500      	movs	r5, #0
 800d98e:	4013      	ands	r3, r2
 800d990:	2b04      	cmp	r3, #4
 800d992:	d105      	bne.n	800d9a0 <_printf_common+0x74>
 800d994:	6833      	ldr	r3, [r6, #0]
 800d996:	68e5      	ldr	r5, [r4, #12]
 800d998:	1aed      	subs	r5, r5, r3
 800d99a:	43eb      	mvns	r3, r5
 800d99c:	17db      	asrs	r3, r3, #31
 800d99e:	401d      	ands	r5, r3
 800d9a0:	68a3      	ldr	r3, [r4, #8]
 800d9a2:	6922      	ldr	r2, [r4, #16]
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	dd01      	ble.n	800d9ac <_printf_common+0x80>
 800d9a8:	1a9b      	subs	r3, r3, r2
 800d9aa:	18ed      	adds	r5, r5, r3
 800d9ac:	2600      	movs	r6, #0
 800d9ae:	42b5      	cmp	r5, r6
 800d9b0:	d120      	bne.n	800d9f4 <_printf_common+0xc8>
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	e010      	b.n	800d9d8 <_printf_common+0xac>
 800d9b6:	3501      	adds	r5, #1
 800d9b8:	68e3      	ldr	r3, [r4, #12]
 800d9ba:	6832      	ldr	r2, [r6, #0]
 800d9bc:	1a9b      	subs	r3, r3, r2
 800d9be:	42ab      	cmp	r3, r5
 800d9c0:	ddd2      	ble.n	800d968 <_printf_common+0x3c>
 800d9c2:	0022      	movs	r2, r4
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	9901      	ldr	r1, [sp, #4]
 800d9c8:	9800      	ldr	r0, [sp, #0]
 800d9ca:	9f08      	ldr	r7, [sp, #32]
 800d9cc:	3219      	adds	r2, #25
 800d9ce:	47b8      	blx	r7
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d1f0      	bne.n	800d9b6 <_printf_common+0x8a>
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	4240      	negs	r0, r0
 800d9d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d9da:	2030      	movs	r0, #48	@ 0x30
 800d9dc:	18e1      	adds	r1, r4, r3
 800d9de:	3143      	adds	r1, #67	@ 0x43
 800d9e0:	7008      	strb	r0, [r1, #0]
 800d9e2:	0021      	movs	r1, r4
 800d9e4:	1c5a      	adds	r2, r3, #1
 800d9e6:	3145      	adds	r1, #69	@ 0x45
 800d9e8:	7809      	ldrb	r1, [r1, #0]
 800d9ea:	18a2      	adds	r2, r4, r2
 800d9ec:	3243      	adds	r2, #67	@ 0x43
 800d9ee:	3302      	adds	r3, #2
 800d9f0:	7011      	strb	r1, [r2, #0]
 800d9f2:	e7c1      	b.n	800d978 <_printf_common+0x4c>
 800d9f4:	0022      	movs	r2, r4
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	9901      	ldr	r1, [sp, #4]
 800d9fa:	9800      	ldr	r0, [sp, #0]
 800d9fc:	9f08      	ldr	r7, [sp, #32]
 800d9fe:	321a      	adds	r2, #26
 800da00:	47b8      	blx	r7
 800da02:	3001      	adds	r0, #1
 800da04:	d0e6      	beq.n	800d9d4 <_printf_common+0xa8>
 800da06:	3601      	adds	r6, #1
 800da08:	e7d1      	b.n	800d9ae <_printf_common+0x82>
	...

0800da0c <_printf_i>:
 800da0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da0e:	b08b      	sub	sp, #44	@ 0x2c
 800da10:	9206      	str	r2, [sp, #24]
 800da12:	000a      	movs	r2, r1
 800da14:	3243      	adds	r2, #67	@ 0x43
 800da16:	9307      	str	r3, [sp, #28]
 800da18:	9005      	str	r0, [sp, #20]
 800da1a:	9203      	str	r2, [sp, #12]
 800da1c:	7e0a      	ldrb	r2, [r1, #24]
 800da1e:	000c      	movs	r4, r1
 800da20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da22:	2a78      	cmp	r2, #120	@ 0x78
 800da24:	d809      	bhi.n	800da3a <_printf_i+0x2e>
 800da26:	2a62      	cmp	r2, #98	@ 0x62
 800da28:	d80b      	bhi.n	800da42 <_printf_i+0x36>
 800da2a:	2a00      	cmp	r2, #0
 800da2c:	d100      	bne.n	800da30 <_printf_i+0x24>
 800da2e:	e0bc      	b.n	800dbaa <_printf_i+0x19e>
 800da30:	497b      	ldr	r1, [pc, #492]	@ (800dc20 <_printf_i+0x214>)
 800da32:	9104      	str	r1, [sp, #16]
 800da34:	2a58      	cmp	r2, #88	@ 0x58
 800da36:	d100      	bne.n	800da3a <_printf_i+0x2e>
 800da38:	e090      	b.n	800db5c <_printf_i+0x150>
 800da3a:	0025      	movs	r5, r4
 800da3c:	3542      	adds	r5, #66	@ 0x42
 800da3e:	702a      	strb	r2, [r5, #0]
 800da40:	e022      	b.n	800da88 <_printf_i+0x7c>
 800da42:	0010      	movs	r0, r2
 800da44:	3863      	subs	r0, #99	@ 0x63
 800da46:	2815      	cmp	r0, #21
 800da48:	d8f7      	bhi.n	800da3a <_printf_i+0x2e>
 800da4a:	f7f2 fb6f 	bl	800012c <__gnu_thumb1_case_shi>
 800da4e:	0016      	.short	0x0016
 800da50:	fff6001f 	.word	0xfff6001f
 800da54:	fff6fff6 	.word	0xfff6fff6
 800da58:	001ffff6 	.word	0x001ffff6
 800da5c:	fff6fff6 	.word	0xfff6fff6
 800da60:	fff6fff6 	.word	0xfff6fff6
 800da64:	003600a1 	.word	0x003600a1
 800da68:	fff60080 	.word	0xfff60080
 800da6c:	00b2fff6 	.word	0x00b2fff6
 800da70:	0036fff6 	.word	0x0036fff6
 800da74:	fff6fff6 	.word	0xfff6fff6
 800da78:	0084      	.short	0x0084
 800da7a:	0025      	movs	r5, r4
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	3542      	adds	r5, #66	@ 0x42
 800da80:	1d11      	adds	r1, r2, #4
 800da82:	6019      	str	r1, [r3, #0]
 800da84:	6813      	ldr	r3, [r2, #0]
 800da86:	702b      	strb	r3, [r5, #0]
 800da88:	2301      	movs	r3, #1
 800da8a:	e0a0      	b.n	800dbce <_printf_i+0x1c2>
 800da8c:	6818      	ldr	r0, [r3, #0]
 800da8e:	6809      	ldr	r1, [r1, #0]
 800da90:	1d02      	adds	r2, r0, #4
 800da92:	060d      	lsls	r5, r1, #24
 800da94:	d50b      	bpl.n	800daae <_printf_i+0xa2>
 800da96:	6806      	ldr	r6, [r0, #0]
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	2e00      	cmp	r6, #0
 800da9c:	da03      	bge.n	800daa6 <_printf_i+0x9a>
 800da9e:	232d      	movs	r3, #45	@ 0x2d
 800daa0:	9a03      	ldr	r2, [sp, #12]
 800daa2:	4276      	negs	r6, r6
 800daa4:	7013      	strb	r3, [r2, #0]
 800daa6:	4b5e      	ldr	r3, [pc, #376]	@ (800dc20 <_printf_i+0x214>)
 800daa8:	270a      	movs	r7, #10
 800daaa:	9304      	str	r3, [sp, #16]
 800daac:	e018      	b.n	800dae0 <_printf_i+0xd4>
 800daae:	6806      	ldr	r6, [r0, #0]
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	0649      	lsls	r1, r1, #25
 800dab4:	d5f1      	bpl.n	800da9a <_printf_i+0x8e>
 800dab6:	b236      	sxth	r6, r6
 800dab8:	e7ef      	b.n	800da9a <_printf_i+0x8e>
 800daba:	6808      	ldr	r0, [r1, #0]
 800dabc:	6819      	ldr	r1, [r3, #0]
 800dabe:	c940      	ldmia	r1!, {r6}
 800dac0:	0605      	lsls	r5, r0, #24
 800dac2:	d402      	bmi.n	800daca <_printf_i+0xbe>
 800dac4:	0640      	lsls	r0, r0, #25
 800dac6:	d500      	bpl.n	800daca <_printf_i+0xbe>
 800dac8:	b2b6      	uxth	r6, r6
 800daca:	6019      	str	r1, [r3, #0]
 800dacc:	4b54      	ldr	r3, [pc, #336]	@ (800dc20 <_printf_i+0x214>)
 800dace:	270a      	movs	r7, #10
 800dad0:	9304      	str	r3, [sp, #16]
 800dad2:	2a6f      	cmp	r2, #111	@ 0x6f
 800dad4:	d100      	bne.n	800dad8 <_printf_i+0xcc>
 800dad6:	3f02      	subs	r7, #2
 800dad8:	0023      	movs	r3, r4
 800dada:	2200      	movs	r2, #0
 800dadc:	3343      	adds	r3, #67	@ 0x43
 800dade:	701a      	strb	r2, [r3, #0]
 800dae0:	6863      	ldr	r3, [r4, #4]
 800dae2:	60a3      	str	r3, [r4, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	db03      	blt.n	800daf0 <_printf_i+0xe4>
 800dae8:	2104      	movs	r1, #4
 800daea:	6822      	ldr	r2, [r4, #0]
 800daec:	438a      	bics	r2, r1
 800daee:	6022      	str	r2, [r4, #0]
 800daf0:	2e00      	cmp	r6, #0
 800daf2:	d102      	bne.n	800dafa <_printf_i+0xee>
 800daf4:	9d03      	ldr	r5, [sp, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00c      	beq.n	800db14 <_printf_i+0x108>
 800dafa:	9d03      	ldr	r5, [sp, #12]
 800dafc:	0030      	movs	r0, r6
 800dafe:	0039      	movs	r1, r7
 800db00:	f7f2 fba4 	bl	800024c <__aeabi_uidivmod>
 800db04:	9b04      	ldr	r3, [sp, #16]
 800db06:	3d01      	subs	r5, #1
 800db08:	5c5b      	ldrb	r3, [r3, r1]
 800db0a:	702b      	strb	r3, [r5, #0]
 800db0c:	0033      	movs	r3, r6
 800db0e:	0006      	movs	r6, r0
 800db10:	429f      	cmp	r7, r3
 800db12:	d9f3      	bls.n	800dafc <_printf_i+0xf0>
 800db14:	2f08      	cmp	r7, #8
 800db16:	d109      	bne.n	800db2c <_printf_i+0x120>
 800db18:	6823      	ldr	r3, [r4, #0]
 800db1a:	07db      	lsls	r3, r3, #31
 800db1c:	d506      	bpl.n	800db2c <_printf_i+0x120>
 800db1e:	6862      	ldr	r2, [r4, #4]
 800db20:	6923      	ldr	r3, [r4, #16]
 800db22:	429a      	cmp	r2, r3
 800db24:	dc02      	bgt.n	800db2c <_printf_i+0x120>
 800db26:	2330      	movs	r3, #48	@ 0x30
 800db28:	3d01      	subs	r5, #1
 800db2a:	702b      	strb	r3, [r5, #0]
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	1b5b      	subs	r3, r3, r5
 800db30:	6123      	str	r3, [r4, #16]
 800db32:	9b07      	ldr	r3, [sp, #28]
 800db34:	0021      	movs	r1, r4
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	9805      	ldr	r0, [sp, #20]
 800db3a:	9b06      	ldr	r3, [sp, #24]
 800db3c:	aa09      	add	r2, sp, #36	@ 0x24
 800db3e:	f7ff fef5 	bl	800d92c <_printf_common>
 800db42:	3001      	adds	r0, #1
 800db44:	d148      	bne.n	800dbd8 <_printf_i+0x1cc>
 800db46:	2001      	movs	r0, #1
 800db48:	4240      	negs	r0, r0
 800db4a:	b00b      	add	sp, #44	@ 0x2c
 800db4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db4e:	2220      	movs	r2, #32
 800db50:	6809      	ldr	r1, [r1, #0]
 800db52:	430a      	orrs	r2, r1
 800db54:	6022      	str	r2, [r4, #0]
 800db56:	2278      	movs	r2, #120	@ 0x78
 800db58:	4932      	ldr	r1, [pc, #200]	@ (800dc24 <_printf_i+0x218>)
 800db5a:	9104      	str	r1, [sp, #16]
 800db5c:	0021      	movs	r1, r4
 800db5e:	3145      	adds	r1, #69	@ 0x45
 800db60:	700a      	strb	r2, [r1, #0]
 800db62:	6819      	ldr	r1, [r3, #0]
 800db64:	6822      	ldr	r2, [r4, #0]
 800db66:	c940      	ldmia	r1!, {r6}
 800db68:	0610      	lsls	r0, r2, #24
 800db6a:	d402      	bmi.n	800db72 <_printf_i+0x166>
 800db6c:	0650      	lsls	r0, r2, #25
 800db6e:	d500      	bpl.n	800db72 <_printf_i+0x166>
 800db70:	b2b6      	uxth	r6, r6
 800db72:	6019      	str	r1, [r3, #0]
 800db74:	07d3      	lsls	r3, r2, #31
 800db76:	d502      	bpl.n	800db7e <_printf_i+0x172>
 800db78:	2320      	movs	r3, #32
 800db7a:	4313      	orrs	r3, r2
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	2e00      	cmp	r6, #0
 800db80:	d001      	beq.n	800db86 <_printf_i+0x17a>
 800db82:	2710      	movs	r7, #16
 800db84:	e7a8      	b.n	800dad8 <_printf_i+0xcc>
 800db86:	2220      	movs	r2, #32
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	4393      	bics	r3, r2
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	e7f8      	b.n	800db82 <_printf_i+0x176>
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	680d      	ldr	r5, [r1, #0]
 800db94:	1d10      	adds	r0, r2, #4
 800db96:	6949      	ldr	r1, [r1, #20]
 800db98:	6018      	str	r0, [r3, #0]
 800db9a:	6813      	ldr	r3, [r2, #0]
 800db9c:	062e      	lsls	r6, r5, #24
 800db9e:	d501      	bpl.n	800dba4 <_printf_i+0x198>
 800dba0:	6019      	str	r1, [r3, #0]
 800dba2:	e002      	b.n	800dbaa <_printf_i+0x19e>
 800dba4:	066d      	lsls	r5, r5, #25
 800dba6:	d5fb      	bpl.n	800dba0 <_printf_i+0x194>
 800dba8:	8019      	strh	r1, [r3, #0]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	9d03      	ldr	r5, [sp, #12]
 800dbae:	6123      	str	r3, [r4, #16]
 800dbb0:	e7bf      	b.n	800db32 <_printf_i+0x126>
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	1d11      	adds	r1, r2, #4
 800dbb6:	6019      	str	r1, [r3, #0]
 800dbb8:	6815      	ldr	r5, [r2, #0]
 800dbba:	2100      	movs	r1, #0
 800dbbc:	0028      	movs	r0, r5
 800dbbe:	6862      	ldr	r2, [r4, #4]
 800dbc0:	f000 f9c9 	bl	800df56 <memchr>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d001      	beq.n	800dbcc <_printf_i+0x1c0>
 800dbc8:	1b40      	subs	r0, r0, r5
 800dbca:	6060      	str	r0, [r4, #4]
 800dbcc:	6863      	ldr	r3, [r4, #4]
 800dbce:	6123      	str	r3, [r4, #16]
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9a03      	ldr	r2, [sp, #12]
 800dbd4:	7013      	strb	r3, [r2, #0]
 800dbd6:	e7ac      	b.n	800db32 <_printf_i+0x126>
 800dbd8:	002a      	movs	r2, r5
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	9906      	ldr	r1, [sp, #24]
 800dbde:	9805      	ldr	r0, [sp, #20]
 800dbe0:	9d07      	ldr	r5, [sp, #28]
 800dbe2:	47a8      	blx	r5
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	d0ae      	beq.n	800db46 <_printf_i+0x13a>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	079b      	lsls	r3, r3, #30
 800dbec:	d415      	bmi.n	800dc1a <_printf_i+0x20e>
 800dbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf0:	68e0      	ldr	r0, [r4, #12]
 800dbf2:	4298      	cmp	r0, r3
 800dbf4:	daa9      	bge.n	800db4a <_printf_i+0x13e>
 800dbf6:	0018      	movs	r0, r3
 800dbf8:	e7a7      	b.n	800db4a <_printf_i+0x13e>
 800dbfa:	0022      	movs	r2, r4
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	9906      	ldr	r1, [sp, #24]
 800dc00:	9805      	ldr	r0, [sp, #20]
 800dc02:	9e07      	ldr	r6, [sp, #28]
 800dc04:	3219      	adds	r2, #25
 800dc06:	47b0      	blx	r6
 800dc08:	3001      	adds	r0, #1
 800dc0a:	d09c      	beq.n	800db46 <_printf_i+0x13a>
 800dc0c:	3501      	adds	r5, #1
 800dc0e:	68e3      	ldr	r3, [r4, #12]
 800dc10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc12:	1a9b      	subs	r3, r3, r2
 800dc14:	42ab      	cmp	r3, r5
 800dc16:	dcf0      	bgt.n	800dbfa <_printf_i+0x1ee>
 800dc18:	e7e9      	b.n	800dbee <_printf_i+0x1e2>
 800dc1a:	2500      	movs	r5, #0
 800dc1c:	e7f7      	b.n	800dc0e <_printf_i+0x202>
 800dc1e:	46c0      	nop			@ (mov r8, r8)
 800dc20:	0800ffba 	.word	0x0800ffba
 800dc24:	0800ffcb 	.word	0x0800ffcb

0800dc28 <std>:
 800dc28:	2300      	movs	r3, #0
 800dc2a:	b510      	push	{r4, lr}
 800dc2c:	0004      	movs	r4, r0
 800dc2e:	6003      	str	r3, [r0, #0]
 800dc30:	6043      	str	r3, [r0, #4]
 800dc32:	6083      	str	r3, [r0, #8]
 800dc34:	8181      	strh	r1, [r0, #12]
 800dc36:	6643      	str	r3, [r0, #100]	@ 0x64
 800dc38:	81c2      	strh	r2, [r0, #14]
 800dc3a:	6103      	str	r3, [r0, #16]
 800dc3c:	6143      	str	r3, [r0, #20]
 800dc3e:	6183      	str	r3, [r0, #24]
 800dc40:	0019      	movs	r1, r3
 800dc42:	2208      	movs	r2, #8
 800dc44:	305c      	adds	r0, #92	@ 0x5c
 800dc46:	f000 f8ff 	bl	800de48 <memset>
 800dc4a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc78 <std+0x50>)
 800dc4c:	6224      	str	r4, [r4, #32]
 800dc4e:	6263      	str	r3, [r4, #36]	@ 0x24
 800dc50:	4b0a      	ldr	r3, [pc, #40]	@ (800dc7c <std+0x54>)
 800dc52:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc54:	4b0a      	ldr	r3, [pc, #40]	@ (800dc80 <std+0x58>)
 800dc56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc58:	4b0a      	ldr	r3, [pc, #40]	@ (800dc84 <std+0x5c>)
 800dc5a:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc88 <std+0x60>)
 800dc5e:	429c      	cmp	r4, r3
 800dc60:	d005      	beq.n	800dc6e <std+0x46>
 800dc62:	4b0a      	ldr	r3, [pc, #40]	@ (800dc8c <std+0x64>)
 800dc64:	429c      	cmp	r4, r3
 800dc66:	d002      	beq.n	800dc6e <std+0x46>
 800dc68:	4b09      	ldr	r3, [pc, #36]	@ (800dc90 <std+0x68>)
 800dc6a:	429c      	cmp	r4, r3
 800dc6c:	d103      	bne.n	800dc76 <std+0x4e>
 800dc6e:	0020      	movs	r0, r4
 800dc70:	3058      	adds	r0, #88	@ 0x58
 800dc72:	f000 f96d 	bl	800df50 <__retarget_lock_init_recursive>
 800dc76:	bd10      	pop	{r4, pc}
 800dc78:	0800ddb1 	.word	0x0800ddb1
 800dc7c:	0800ddd9 	.word	0x0800ddd9
 800dc80:	0800de11 	.word	0x0800de11
 800dc84:	0800de3d 	.word	0x0800de3d
 800dc88:	20001e8c 	.word	0x20001e8c
 800dc8c:	20001ef4 	.word	0x20001ef4
 800dc90:	20001f5c 	.word	0x20001f5c

0800dc94 <stdio_exit_handler>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	4a03      	ldr	r2, [pc, #12]	@ (800dca4 <stdio_exit_handler+0x10>)
 800dc98:	4903      	ldr	r1, [pc, #12]	@ (800dca8 <stdio_exit_handler+0x14>)
 800dc9a:	4804      	ldr	r0, [pc, #16]	@ (800dcac <stdio_exit_handler+0x18>)
 800dc9c:	f000 f86c 	bl	800dd78 <_fwalk_sglue>
 800dca0:	bd10      	pop	{r4, pc}
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	2000017c 	.word	0x2000017c
 800dca8:	0800f6d1 	.word	0x0800f6d1
 800dcac:	2000018c 	.word	0x2000018c

0800dcb0 <cleanup_stdio>:
 800dcb0:	6841      	ldr	r1, [r0, #4]
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dce0 <cleanup_stdio+0x30>)
 800dcb4:	b510      	push	{r4, lr}
 800dcb6:	0004      	movs	r4, r0
 800dcb8:	4299      	cmp	r1, r3
 800dcba:	d001      	beq.n	800dcc0 <cleanup_stdio+0x10>
 800dcbc:	f001 fd08 	bl	800f6d0 <_fflush_r>
 800dcc0:	68a1      	ldr	r1, [r4, #8]
 800dcc2:	4b08      	ldr	r3, [pc, #32]	@ (800dce4 <cleanup_stdio+0x34>)
 800dcc4:	4299      	cmp	r1, r3
 800dcc6:	d002      	beq.n	800dcce <cleanup_stdio+0x1e>
 800dcc8:	0020      	movs	r0, r4
 800dcca:	f001 fd01 	bl	800f6d0 <_fflush_r>
 800dcce:	68e1      	ldr	r1, [r4, #12]
 800dcd0:	4b05      	ldr	r3, [pc, #20]	@ (800dce8 <cleanup_stdio+0x38>)
 800dcd2:	4299      	cmp	r1, r3
 800dcd4:	d002      	beq.n	800dcdc <cleanup_stdio+0x2c>
 800dcd6:	0020      	movs	r0, r4
 800dcd8:	f001 fcfa 	bl	800f6d0 <_fflush_r>
 800dcdc:	bd10      	pop	{r4, pc}
 800dcde:	46c0      	nop			@ (mov r8, r8)
 800dce0:	20001e8c 	.word	0x20001e8c
 800dce4:	20001ef4 	.word	0x20001ef4
 800dce8:	20001f5c 	.word	0x20001f5c

0800dcec <global_stdio_init.part.0>:
 800dcec:	b510      	push	{r4, lr}
 800dcee:	4b09      	ldr	r3, [pc, #36]	@ (800dd14 <global_stdio_init.part.0+0x28>)
 800dcf0:	4a09      	ldr	r2, [pc, #36]	@ (800dd18 <global_stdio_init.part.0+0x2c>)
 800dcf2:	2104      	movs	r1, #4
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	4809      	ldr	r0, [pc, #36]	@ (800dd1c <global_stdio_init.part.0+0x30>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f7ff ff95 	bl	800dc28 <std>
 800dcfe:	2201      	movs	r2, #1
 800dd00:	2109      	movs	r1, #9
 800dd02:	4807      	ldr	r0, [pc, #28]	@ (800dd20 <global_stdio_init.part.0+0x34>)
 800dd04:	f7ff ff90 	bl	800dc28 <std>
 800dd08:	2202      	movs	r2, #2
 800dd0a:	2112      	movs	r1, #18
 800dd0c:	4805      	ldr	r0, [pc, #20]	@ (800dd24 <global_stdio_init.part.0+0x38>)
 800dd0e:	f7ff ff8b 	bl	800dc28 <std>
 800dd12:	bd10      	pop	{r4, pc}
 800dd14:	20001fc4 	.word	0x20001fc4
 800dd18:	0800dc95 	.word	0x0800dc95
 800dd1c:	20001e8c 	.word	0x20001e8c
 800dd20:	20001ef4 	.word	0x20001ef4
 800dd24:	20001f5c 	.word	0x20001f5c

0800dd28 <__sfp_lock_acquire>:
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	4802      	ldr	r0, [pc, #8]	@ (800dd34 <__sfp_lock_acquire+0xc>)
 800dd2c:	f000 f911 	bl	800df52 <__retarget_lock_acquire_recursive>
 800dd30:	bd10      	pop	{r4, pc}
 800dd32:	46c0      	nop			@ (mov r8, r8)
 800dd34:	20001fcd 	.word	0x20001fcd

0800dd38 <__sfp_lock_release>:
 800dd38:	b510      	push	{r4, lr}
 800dd3a:	4802      	ldr	r0, [pc, #8]	@ (800dd44 <__sfp_lock_release+0xc>)
 800dd3c:	f000 f90a 	bl	800df54 <__retarget_lock_release_recursive>
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	46c0      	nop			@ (mov r8, r8)
 800dd44:	20001fcd 	.word	0x20001fcd

0800dd48 <__sinit>:
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	0004      	movs	r4, r0
 800dd4c:	f7ff ffec 	bl	800dd28 <__sfp_lock_acquire>
 800dd50:	6a23      	ldr	r3, [r4, #32]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d002      	beq.n	800dd5c <__sinit+0x14>
 800dd56:	f7ff ffef 	bl	800dd38 <__sfp_lock_release>
 800dd5a:	bd10      	pop	{r4, pc}
 800dd5c:	4b04      	ldr	r3, [pc, #16]	@ (800dd70 <__sinit+0x28>)
 800dd5e:	6223      	str	r3, [r4, #32]
 800dd60:	4b04      	ldr	r3, [pc, #16]	@ (800dd74 <__sinit+0x2c>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1f6      	bne.n	800dd56 <__sinit+0xe>
 800dd68:	f7ff ffc0 	bl	800dcec <global_stdio_init.part.0>
 800dd6c:	e7f3      	b.n	800dd56 <__sinit+0xe>
 800dd6e:	46c0      	nop			@ (mov r8, r8)
 800dd70:	0800dcb1 	.word	0x0800dcb1
 800dd74:	20001fc4 	.word	0x20001fc4

0800dd78 <_fwalk_sglue>:
 800dd78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd7a:	0014      	movs	r4, r2
 800dd7c:	2600      	movs	r6, #0
 800dd7e:	9000      	str	r0, [sp, #0]
 800dd80:	9101      	str	r1, [sp, #4]
 800dd82:	68a5      	ldr	r5, [r4, #8]
 800dd84:	6867      	ldr	r7, [r4, #4]
 800dd86:	3f01      	subs	r7, #1
 800dd88:	d504      	bpl.n	800dd94 <_fwalk_sglue+0x1c>
 800dd8a:	6824      	ldr	r4, [r4, #0]
 800dd8c:	2c00      	cmp	r4, #0
 800dd8e:	d1f8      	bne.n	800dd82 <_fwalk_sglue+0xa>
 800dd90:	0030      	movs	r0, r6
 800dd92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd94:	89ab      	ldrh	r3, [r5, #12]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d908      	bls.n	800ddac <_fwalk_sglue+0x34>
 800dd9a:	220e      	movs	r2, #14
 800dd9c:	5eab      	ldrsh	r3, [r5, r2]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	d004      	beq.n	800ddac <_fwalk_sglue+0x34>
 800dda2:	0029      	movs	r1, r5
 800dda4:	9800      	ldr	r0, [sp, #0]
 800dda6:	9b01      	ldr	r3, [sp, #4]
 800dda8:	4798      	blx	r3
 800ddaa:	4306      	orrs	r6, r0
 800ddac:	3568      	adds	r5, #104	@ 0x68
 800ddae:	e7ea      	b.n	800dd86 <_fwalk_sglue+0xe>

0800ddb0 <__sread>:
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	000c      	movs	r4, r1
 800ddb4:	250e      	movs	r5, #14
 800ddb6:	5f49      	ldrsh	r1, [r1, r5]
 800ddb8:	f000 f878 	bl	800deac <_read_r>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	db03      	blt.n	800ddc8 <__sread+0x18>
 800ddc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ddc2:	181b      	adds	r3, r3, r0
 800ddc4:	6563      	str	r3, [r4, #84]	@ 0x54
 800ddc6:	bd70      	pop	{r4, r5, r6, pc}
 800ddc8:	89a3      	ldrh	r3, [r4, #12]
 800ddca:	4a02      	ldr	r2, [pc, #8]	@ (800ddd4 <__sread+0x24>)
 800ddcc:	4013      	ands	r3, r2
 800ddce:	81a3      	strh	r3, [r4, #12]
 800ddd0:	e7f9      	b.n	800ddc6 <__sread+0x16>
 800ddd2:	46c0      	nop			@ (mov r8, r8)
 800ddd4:	ffffefff 	.word	0xffffefff

0800ddd8 <__swrite>:
 800ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddda:	001f      	movs	r7, r3
 800dddc:	898b      	ldrh	r3, [r1, #12]
 800ddde:	0005      	movs	r5, r0
 800dde0:	000c      	movs	r4, r1
 800dde2:	0016      	movs	r6, r2
 800dde4:	05db      	lsls	r3, r3, #23
 800dde6:	d505      	bpl.n	800ddf4 <__swrite+0x1c>
 800dde8:	230e      	movs	r3, #14
 800ddea:	5ec9      	ldrsh	r1, [r1, r3]
 800ddec:	2200      	movs	r2, #0
 800ddee:	2302      	movs	r3, #2
 800ddf0:	f000 f848 	bl	800de84 <_lseek_r>
 800ddf4:	89a3      	ldrh	r3, [r4, #12]
 800ddf6:	4a05      	ldr	r2, [pc, #20]	@ (800de0c <__swrite+0x34>)
 800ddf8:	0028      	movs	r0, r5
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	81a3      	strh	r3, [r4, #12]
 800ddfe:	0032      	movs	r2, r6
 800de00:	230e      	movs	r3, #14
 800de02:	5ee1      	ldrsh	r1, [r4, r3]
 800de04:	003b      	movs	r3, r7
 800de06:	f000 f865 	bl	800ded4 <_write_r>
 800de0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de0c:	ffffefff 	.word	0xffffefff

0800de10 <__sseek>:
 800de10:	b570      	push	{r4, r5, r6, lr}
 800de12:	000c      	movs	r4, r1
 800de14:	250e      	movs	r5, #14
 800de16:	5f49      	ldrsh	r1, [r1, r5]
 800de18:	f000 f834 	bl	800de84 <_lseek_r>
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	1c42      	adds	r2, r0, #1
 800de20:	d103      	bne.n	800de2a <__sseek+0x1a>
 800de22:	4a05      	ldr	r2, [pc, #20]	@ (800de38 <__sseek+0x28>)
 800de24:	4013      	ands	r3, r2
 800de26:	81a3      	strh	r3, [r4, #12]
 800de28:	bd70      	pop	{r4, r5, r6, pc}
 800de2a:	2280      	movs	r2, #128	@ 0x80
 800de2c:	0152      	lsls	r2, r2, #5
 800de2e:	4313      	orrs	r3, r2
 800de30:	81a3      	strh	r3, [r4, #12]
 800de32:	6560      	str	r0, [r4, #84]	@ 0x54
 800de34:	e7f8      	b.n	800de28 <__sseek+0x18>
 800de36:	46c0      	nop			@ (mov r8, r8)
 800de38:	ffffefff 	.word	0xffffefff

0800de3c <__sclose>:
 800de3c:	b510      	push	{r4, lr}
 800de3e:	230e      	movs	r3, #14
 800de40:	5ec9      	ldrsh	r1, [r1, r3]
 800de42:	f000 f80d 	bl	800de60 <_close_r>
 800de46:	bd10      	pop	{r4, pc}

0800de48 <memset>:
 800de48:	0003      	movs	r3, r0
 800de4a:	1882      	adds	r2, r0, r2
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d100      	bne.n	800de52 <memset+0xa>
 800de50:	4770      	bx	lr
 800de52:	7019      	strb	r1, [r3, #0]
 800de54:	3301      	adds	r3, #1
 800de56:	e7f9      	b.n	800de4c <memset+0x4>

0800de58 <_localeconv_r>:
 800de58:	4800      	ldr	r0, [pc, #0]	@ (800de5c <_localeconv_r+0x4>)
 800de5a:	4770      	bx	lr
 800de5c:	200002c8 	.word	0x200002c8

0800de60 <_close_r>:
 800de60:	2300      	movs	r3, #0
 800de62:	b570      	push	{r4, r5, r6, lr}
 800de64:	4d06      	ldr	r5, [pc, #24]	@ (800de80 <_close_r+0x20>)
 800de66:	0004      	movs	r4, r0
 800de68:	0008      	movs	r0, r1
 800de6a:	602b      	str	r3, [r5, #0]
 800de6c:	f7f4 ffa8 	bl	8002dc0 <_close>
 800de70:	1c43      	adds	r3, r0, #1
 800de72:	d103      	bne.n	800de7c <_close_r+0x1c>
 800de74:	682b      	ldr	r3, [r5, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d000      	beq.n	800de7c <_close_r+0x1c>
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	bd70      	pop	{r4, r5, r6, pc}
 800de7e:	46c0      	nop			@ (mov r8, r8)
 800de80:	20001fc8 	.word	0x20001fc8

0800de84 <_lseek_r>:
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	0004      	movs	r4, r0
 800de88:	0008      	movs	r0, r1
 800de8a:	0011      	movs	r1, r2
 800de8c:	001a      	movs	r2, r3
 800de8e:	2300      	movs	r3, #0
 800de90:	4d05      	ldr	r5, [pc, #20]	@ (800dea8 <_lseek_r+0x24>)
 800de92:	602b      	str	r3, [r5, #0]
 800de94:	f7f4 ffb5 	bl	8002e02 <_lseek>
 800de98:	1c43      	adds	r3, r0, #1
 800de9a:	d103      	bne.n	800dea4 <_lseek_r+0x20>
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d000      	beq.n	800dea4 <_lseek_r+0x20>
 800dea2:	6023      	str	r3, [r4, #0]
 800dea4:	bd70      	pop	{r4, r5, r6, pc}
 800dea6:	46c0      	nop			@ (mov r8, r8)
 800dea8:	20001fc8 	.word	0x20001fc8

0800deac <_read_r>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	0004      	movs	r4, r0
 800deb0:	0008      	movs	r0, r1
 800deb2:	0011      	movs	r1, r2
 800deb4:	001a      	movs	r2, r3
 800deb6:	2300      	movs	r3, #0
 800deb8:	4d05      	ldr	r5, [pc, #20]	@ (800ded0 <_read_r+0x24>)
 800deba:	602b      	str	r3, [r5, #0]
 800debc:	f7f4 ff47 	bl	8002d4e <_read>
 800dec0:	1c43      	adds	r3, r0, #1
 800dec2:	d103      	bne.n	800decc <_read_r+0x20>
 800dec4:	682b      	ldr	r3, [r5, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d000      	beq.n	800decc <_read_r+0x20>
 800deca:	6023      	str	r3, [r4, #0]
 800decc:	bd70      	pop	{r4, r5, r6, pc}
 800dece:	46c0      	nop			@ (mov r8, r8)
 800ded0:	20001fc8 	.word	0x20001fc8

0800ded4 <_write_r>:
 800ded4:	b570      	push	{r4, r5, r6, lr}
 800ded6:	0004      	movs	r4, r0
 800ded8:	0008      	movs	r0, r1
 800deda:	0011      	movs	r1, r2
 800dedc:	001a      	movs	r2, r3
 800dede:	2300      	movs	r3, #0
 800dee0:	4d05      	ldr	r5, [pc, #20]	@ (800def8 <_write_r+0x24>)
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f4 ff50 	bl	8002d88 <_write>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d103      	bne.n	800def4 <_write_r+0x20>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d000      	beq.n	800def4 <_write_r+0x20>
 800def2:	6023      	str	r3, [r4, #0]
 800def4:	bd70      	pop	{r4, r5, r6, pc}
 800def6:	46c0      	nop			@ (mov r8, r8)
 800def8:	20001fc8 	.word	0x20001fc8

0800defc <__errno>:
 800defc:	4b01      	ldr	r3, [pc, #4]	@ (800df04 <__errno+0x8>)
 800defe:	6818      	ldr	r0, [r3, #0]
 800df00:	4770      	bx	lr
 800df02:	46c0      	nop			@ (mov r8, r8)
 800df04:	20000188 	.word	0x20000188

0800df08 <__libc_init_array>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	2600      	movs	r6, #0
 800df0c:	4c0c      	ldr	r4, [pc, #48]	@ (800df40 <__libc_init_array+0x38>)
 800df0e:	4d0d      	ldr	r5, [pc, #52]	@ (800df44 <__libc_init_array+0x3c>)
 800df10:	1b64      	subs	r4, r4, r5
 800df12:	10a4      	asrs	r4, r4, #2
 800df14:	42a6      	cmp	r6, r4
 800df16:	d109      	bne.n	800df2c <__libc_init_array+0x24>
 800df18:	2600      	movs	r6, #0
 800df1a:	f001 ff5f 	bl	800fddc <_init>
 800df1e:	4c0a      	ldr	r4, [pc, #40]	@ (800df48 <__libc_init_array+0x40>)
 800df20:	4d0a      	ldr	r5, [pc, #40]	@ (800df4c <__libc_init_array+0x44>)
 800df22:	1b64      	subs	r4, r4, r5
 800df24:	10a4      	asrs	r4, r4, #2
 800df26:	42a6      	cmp	r6, r4
 800df28:	d105      	bne.n	800df36 <__libc_init_array+0x2e>
 800df2a:	bd70      	pop	{r4, r5, r6, pc}
 800df2c:	00b3      	lsls	r3, r6, #2
 800df2e:	58eb      	ldr	r3, [r5, r3]
 800df30:	4798      	blx	r3
 800df32:	3601      	adds	r6, #1
 800df34:	e7ee      	b.n	800df14 <__libc_init_array+0xc>
 800df36:	00b3      	lsls	r3, r6, #2
 800df38:	58eb      	ldr	r3, [r5, r3]
 800df3a:	4798      	blx	r3
 800df3c:	3601      	adds	r6, #1
 800df3e:	e7f2      	b.n	800df26 <__libc_init_array+0x1e>
 800df40:	08010318 	.word	0x08010318
 800df44:	08010318 	.word	0x08010318
 800df48:	0801031c 	.word	0x0801031c
 800df4c:	08010318 	.word	0x08010318

0800df50 <__retarget_lock_init_recursive>:
 800df50:	4770      	bx	lr

0800df52 <__retarget_lock_acquire_recursive>:
 800df52:	4770      	bx	lr

0800df54 <__retarget_lock_release_recursive>:
 800df54:	4770      	bx	lr

0800df56 <memchr>:
 800df56:	b2c9      	uxtb	r1, r1
 800df58:	1882      	adds	r2, r0, r2
 800df5a:	4290      	cmp	r0, r2
 800df5c:	d101      	bne.n	800df62 <memchr+0xc>
 800df5e:	2000      	movs	r0, #0
 800df60:	4770      	bx	lr
 800df62:	7803      	ldrb	r3, [r0, #0]
 800df64:	428b      	cmp	r3, r1
 800df66:	d0fb      	beq.n	800df60 <memchr+0xa>
 800df68:	3001      	adds	r0, #1
 800df6a:	e7f6      	b.n	800df5a <memchr+0x4>

0800df6c <quorem>:
 800df6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df6e:	6902      	ldr	r2, [r0, #16]
 800df70:	690f      	ldr	r7, [r1, #16]
 800df72:	b087      	sub	sp, #28
 800df74:	0006      	movs	r6, r0
 800df76:	000b      	movs	r3, r1
 800df78:	2000      	movs	r0, #0
 800df7a:	9102      	str	r1, [sp, #8]
 800df7c:	42ba      	cmp	r2, r7
 800df7e:	db6d      	blt.n	800e05c <quorem+0xf0>
 800df80:	3f01      	subs	r7, #1
 800df82:	00bc      	lsls	r4, r7, #2
 800df84:	3314      	adds	r3, #20
 800df86:	9305      	str	r3, [sp, #20]
 800df88:	191b      	adds	r3, r3, r4
 800df8a:	9303      	str	r3, [sp, #12]
 800df8c:	0033      	movs	r3, r6
 800df8e:	3314      	adds	r3, #20
 800df90:	191c      	adds	r4, r3, r4
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	6823      	ldr	r3, [r4, #0]
 800df96:	9304      	str	r3, [sp, #16]
 800df98:	9b03      	ldr	r3, [sp, #12]
 800df9a:	9804      	ldr	r0, [sp, #16]
 800df9c:	681d      	ldr	r5, [r3, #0]
 800df9e:	3501      	adds	r5, #1
 800dfa0:	0029      	movs	r1, r5
 800dfa2:	f7f2 f8cd 	bl	8000140 <__udivsi3>
 800dfa6:	9b04      	ldr	r3, [sp, #16]
 800dfa8:	9000      	str	r0, [sp, #0]
 800dfaa:	42ab      	cmp	r3, r5
 800dfac:	d32b      	bcc.n	800e006 <quorem+0x9a>
 800dfae:	9b05      	ldr	r3, [sp, #20]
 800dfb0:	9d01      	ldr	r5, [sp, #4]
 800dfb2:	469c      	mov	ip, r3
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	9305      	str	r3, [sp, #20]
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	4662      	mov	r2, ip
 800dfbc:	ca08      	ldmia	r2!, {r3}
 800dfbe:	6828      	ldr	r0, [r5, #0]
 800dfc0:	4694      	mov	ip, r2
 800dfc2:	9a00      	ldr	r2, [sp, #0]
 800dfc4:	b299      	uxth	r1, r3
 800dfc6:	4351      	muls	r1, r2
 800dfc8:	9a05      	ldr	r2, [sp, #20]
 800dfca:	0c1b      	lsrs	r3, r3, #16
 800dfcc:	1889      	adds	r1, r1, r2
 800dfce:	9a00      	ldr	r2, [sp, #0]
 800dfd0:	4353      	muls	r3, r2
 800dfd2:	0c0a      	lsrs	r2, r1, #16
 800dfd4:	189b      	adds	r3, r3, r2
 800dfd6:	0c1a      	lsrs	r2, r3, #16
 800dfd8:	b289      	uxth	r1, r1
 800dfda:	9205      	str	r2, [sp, #20]
 800dfdc:	b282      	uxth	r2, r0
 800dfde:	1a52      	subs	r2, r2, r1
 800dfe0:	9904      	ldr	r1, [sp, #16]
 800dfe2:	0c00      	lsrs	r0, r0, #16
 800dfe4:	1852      	adds	r2, r2, r1
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	1411      	asrs	r1, r2, #16
 800dfea:	1ac3      	subs	r3, r0, r3
 800dfec:	185b      	adds	r3, r3, r1
 800dfee:	1419      	asrs	r1, r3, #16
 800dff0:	b292      	uxth	r2, r2
 800dff2:	041b      	lsls	r3, r3, #16
 800dff4:	431a      	orrs	r2, r3
 800dff6:	9b03      	ldr	r3, [sp, #12]
 800dff8:	9104      	str	r1, [sp, #16]
 800dffa:	c504      	stmia	r5!, {r2}
 800dffc:	4563      	cmp	r3, ip
 800dffe:	d2dc      	bcs.n	800dfba <quorem+0x4e>
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d030      	beq.n	800e068 <quorem+0xfc>
 800e006:	0030      	movs	r0, r6
 800e008:	9902      	ldr	r1, [sp, #8]
 800e00a:	f001 f9c5 	bl	800f398 <__mcmp>
 800e00e:	2800      	cmp	r0, #0
 800e010:	db23      	blt.n	800e05a <quorem+0xee>
 800e012:	0034      	movs	r4, r6
 800e014:	2500      	movs	r5, #0
 800e016:	9902      	ldr	r1, [sp, #8]
 800e018:	3414      	adds	r4, #20
 800e01a:	3114      	adds	r1, #20
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	c901      	ldmia	r1!, {r0}
 800e020:	9302      	str	r3, [sp, #8]
 800e022:	466b      	mov	r3, sp
 800e024:	891b      	ldrh	r3, [r3, #8]
 800e026:	b282      	uxth	r2, r0
 800e028:	1a9a      	subs	r2, r3, r2
 800e02a:	9b02      	ldr	r3, [sp, #8]
 800e02c:	1952      	adds	r2, r2, r5
 800e02e:	0c00      	lsrs	r0, r0, #16
 800e030:	0c1b      	lsrs	r3, r3, #16
 800e032:	1a1b      	subs	r3, r3, r0
 800e034:	1410      	asrs	r0, r2, #16
 800e036:	181b      	adds	r3, r3, r0
 800e038:	141d      	asrs	r5, r3, #16
 800e03a:	b292      	uxth	r2, r2
 800e03c:	041b      	lsls	r3, r3, #16
 800e03e:	431a      	orrs	r2, r3
 800e040:	9b03      	ldr	r3, [sp, #12]
 800e042:	c404      	stmia	r4!, {r2}
 800e044:	428b      	cmp	r3, r1
 800e046:	d2e9      	bcs.n	800e01c <quorem+0xb0>
 800e048:	9a01      	ldr	r2, [sp, #4]
 800e04a:	00bb      	lsls	r3, r7, #2
 800e04c:	18d3      	adds	r3, r2, r3
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	2a00      	cmp	r2, #0
 800e052:	d013      	beq.n	800e07c <quorem+0x110>
 800e054:	9b00      	ldr	r3, [sp, #0]
 800e056:	3301      	adds	r3, #1
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	9800      	ldr	r0, [sp, #0]
 800e05c:	b007      	add	sp, #28
 800e05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e060:	6823      	ldr	r3, [r4, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d104      	bne.n	800e070 <quorem+0x104>
 800e066:	3f01      	subs	r7, #1
 800e068:	9b01      	ldr	r3, [sp, #4]
 800e06a:	3c04      	subs	r4, #4
 800e06c:	42a3      	cmp	r3, r4
 800e06e:	d3f7      	bcc.n	800e060 <quorem+0xf4>
 800e070:	6137      	str	r7, [r6, #16]
 800e072:	e7c8      	b.n	800e006 <quorem+0x9a>
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	2a00      	cmp	r2, #0
 800e078:	d104      	bne.n	800e084 <quorem+0x118>
 800e07a:	3f01      	subs	r7, #1
 800e07c:	9a01      	ldr	r2, [sp, #4]
 800e07e:	3b04      	subs	r3, #4
 800e080:	429a      	cmp	r2, r3
 800e082:	d3f7      	bcc.n	800e074 <quorem+0x108>
 800e084:	6137      	str	r7, [r6, #16]
 800e086:	e7e5      	b.n	800e054 <quorem+0xe8>

0800e088 <_dtoa_r>:
 800e088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e08a:	0014      	movs	r4, r2
 800e08c:	001d      	movs	r5, r3
 800e08e:	69c6      	ldr	r6, [r0, #28]
 800e090:	b09d      	sub	sp, #116	@ 0x74
 800e092:	940a      	str	r4, [sp, #40]	@ 0x28
 800e094:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e096:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800e098:	9003      	str	r0, [sp, #12]
 800e09a:	2e00      	cmp	r6, #0
 800e09c:	d10f      	bne.n	800e0be <_dtoa_r+0x36>
 800e09e:	2010      	movs	r0, #16
 800e0a0:	f000 fe30 	bl	800ed04 <malloc>
 800e0a4:	9b03      	ldr	r3, [sp, #12]
 800e0a6:	1e02      	subs	r2, r0, #0
 800e0a8:	61d8      	str	r0, [r3, #28]
 800e0aa:	d104      	bne.n	800e0b6 <_dtoa_r+0x2e>
 800e0ac:	21ef      	movs	r1, #239	@ 0xef
 800e0ae:	4bc7      	ldr	r3, [pc, #796]	@ (800e3cc <_dtoa_r+0x344>)
 800e0b0:	48c7      	ldr	r0, [pc, #796]	@ (800e3d0 <_dtoa_r+0x348>)
 800e0b2:	f001 fb55 	bl	800f760 <__assert_func>
 800e0b6:	6046      	str	r6, [r0, #4]
 800e0b8:	6086      	str	r6, [r0, #8]
 800e0ba:	6006      	str	r6, [r0, #0]
 800e0bc:	60c6      	str	r6, [r0, #12]
 800e0be:	9b03      	ldr	r3, [sp, #12]
 800e0c0:	69db      	ldr	r3, [r3, #28]
 800e0c2:	6819      	ldr	r1, [r3, #0]
 800e0c4:	2900      	cmp	r1, #0
 800e0c6:	d00b      	beq.n	800e0e0 <_dtoa_r+0x58>
 800e0c8:	685a      	ldr	r2, [r3, #4]
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	4093      	lsls	r3, r2
 800e0ce:	604a      	str	r2, [r1, #4]
 800e0d0:	608b      	str	r3, [r1, #8]
 800e0d2:	9803      	ldr	r0, [sp, #12]
 800e0d4:	f000 ff16 	bl	800ef04 <_Bfree>
 800e0d8:	2200      	movs	r2, #0
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	69db      	ldr	r3, [r3, #28]
 800e0de:	601a      	str	r2, [r3, #0]
 800e0e0:	2d00      	cmp	r5, #0
 800e0e2:	da1e      	bge.n	800e122 <_dtoa_r+0x9a>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	603b      	str	r3, [r7, #0]
 800e0e8:	006b      	lsls	r3, r5, #1
 800e0ea:	085b      	lsrs	r3, r3, #1
 800e0ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0ee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e0f0:	4bb8      	ldr	r3, [pc, #736]	@ (800e3d4 <_dtoa_r+0x34c>)
 800e0f2:	4ab8      	ldr	r2, [pc, #736]	@ (800e3d4 <_dtoa_r+0x34c>)
 800e0f4:	403b      	ands	r3, r7
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d116      	bne.n	800e128 <_dtoa_r+0xa0>
 800e0fa:	4bb7      	ldr	r3, [pc, #732]	@ (800e3d8 <_dtoa_r+0x350>)
 800e0fc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e0fe:	6013      	str	r3, [r2, #0]
 800e100:	033b      	lsls	r3, r7, #12
 800e102:	0b1b      	lsrs	r3, r3, #12
 800e104:	4323      	orrs	r3, r4
 800e106:	d101      	bne.n	800e10c <_dtoa_r+0x84>
 800e108:	f000 fd83 	bl	800ec12 <_dtoa_r+0xb8a>
 800e10c:	4bb3      	ldr	r3, [pc, #716]	@ (800e3dc <_dtoa_r+0x354>)
 800e10e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e110:	9308      	str	r3, [sp, #32]
 800e112:	2a00      	cmp	r2, #0
 800e114:	d002      	beq.n	800e11c <_dtoa_r+0x94>
 800e116:	4bb2      	ldr	r3, [pc, #712]	@ (800e3e0 <_dtoa_r+0x358>)
 800e118:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e11a:	6013      	str	r3, [r2, #0]
 800e11c:	9808      	ldr	r0, [sp, #32]
 800e11e:	b01d      	add	sp, #116	@ 0x74
 800e120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e122:	2300      	movs	r3, #0
 800e124:	603b      	str	r3, [r7, #0]
 800e126:	e7e2      	b.n	800e0ee <_dtoa_r+0x66>
 800e128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e12a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e12c:	9212      	str	r2, [sp, #72]	@ 0x48
 800e12e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e130:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e132:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e134:	2200      	movs	r2, #0
 800e136:	2300      	movs	r3, #0
 800e138:	f7f2 f988 	bl	800044c <__aeabi_dcmpeq>
 800e13c:	1e06      	subs	r6, r0, #0
 800e13e:	d00b      	beq.n	800e158 <_dtoa_r+0xd0>
 800e140:	2301      	movs	r3, #1
 800e142:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e144:	6013      	str	r3, [r2, #0]
 800e146:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <_dtoa_r+0xca>
 800e14c:	4ba5      	ldr	r3, [pc, #660]	@ (800e3e4 <_dtoa_r+0x35c>)
 800e14e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e150:	6013      	str	r3, [r2, #0]
 800e152:	4ba5      	ldr	r3, [pc, #660]	@ (800e3e8 <_dtoa_r+0x360>)
 800e154:	9308      	str	r3, [sp, #32]
 800e156:	e7e1      	b.n	800e11c <_dtoa_r+0x94>
 800e158:	ab1a      	add	r3, sp, #104	@ 0x68
 800e15a:	9301      	str	r3, [sp, #4]
 800e15c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	9803      	ldr	r0, [sp, #12]
 800e162:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e164:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e166:	f001 f9cd 	bl	800f504 <__d2b>
 800e16a:	007a      	lsls	r2, r7, #1
 800e16c:	9005      	str	r0, [sp, #20]
 800e16e:	0d52      	lsrs	r2, r2, #21
 800e170:	d100      	bne.n	800e174 <_dtoa_r+0xec>
 800e172:	e07b      	b.n	800e26c <_dtoa_r+0x1e4>
 800e174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e176:	9618      	str	r6, [sp, #96]	@ 0x60
 800e178:	0319      	lsls	r1, r3, #12
 800e17a:	4b9c      	ldr	r3, [pc, #624]	@ (800e3ec <_dtoa_r+0x364>)
 800e17c:	0b09      	lsrs	r1, r1, #12
 800e17e:	430b      	orrs	r3, r1
 800e180:	499b      	ldr	r1, [pc, #620]	@ (800e3f0 <_dtoa_r+0x368>)
 800e182:	1857      	adds	r7, r2, r1
 800e184:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e186:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e188:	0019      	movs	r1, r3
 800e18a:	2200      	movs	r2, #0
 800e18c:	4b99      	ldr	r3, [pc, #612]	@ (800e3f4 <_dtoa_r+0x36c>)
 800e18e:	f7f3 fbfb 	bl	8001988 <__aeabi_dsub>
 800e192:	4a99      	ldr	r2, [pc, #612]	@ (800e3f8 <_dtoa_r+0x370>)
 800e194:	4b99      	ldr	r3, [pc, #612]	@ (800e3fc <_dtoa_r+0x374>)
 800e196:	f7f3 f92f 	bl	80013f8 <__aeabi_dmul>
 800e19a:	4a99      	ldr	r2, [pc, #612]	@ (800e400 <_dtoa_r+0x378>)
 800e19c:	4b99      	ldr	r3, [pc, #612]	@ (800e404 <_dtoa_r+0x37c>)
 800e19e:	f7f2 f983 	bl	80004a8 <__aeabi_dadd>
 800e1a2:	0004      	movs	r4, r0
 800e1a4:	0038      	movs	r0, r7
 800e1a6:	000d      	movs	r5, r1
 800e1a8:	f7f3 ffe8 	bl	800217c <__aeabi_i2d>
 800e1ac:	4a96      	ldr	r2, [pc, #600]	@ (800e408 <_dtoa_r+0x380>)
 800e1ae:	4b97      	ldr	r3, [pc, #604]	@ (800e40c <_dtoa_r+0x384>)
 800e1b0:	f7f3 f922 	bl	80013f8 <__aeabi_dmul>
 800e1b4:	0002      	movs	r2, r0
 800e1b6:	000b      	movs	r3, r1
 800e1b8:	0020      	movs	r0, r4
 800e1ba:	0029      	movs	r1, r5
 800e1bc:	f7f2 f974 	bl	80004a8 <__aeabi_dadd>
 800e1c0:	0004      	movs	r4, r0
 800e1c2:	000d      	movs	r5, r1
 800e1c4:	f7f3 ff9e 	bl	8002104 <__aeabi_d2iz>
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	9004      	str	r0, [sp, #16]
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	0020      	movs	r0, r4
 800e1d0:	0029      	movs	r1, r5
 800e1d2:	f7f2 f941 	bl	8000458 <__aeabi_dcmplt>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d00b      	beq.n	800e1f2 <_dtoa_r+0x16a>
 800e1da:	9804      	ldr	r0, [sp, #16]
 800e1dc:	f7f3 ffce 	bl	800217c <__aeabi_i2d>
 800e1e0:	002b      	movs	r3, r5
 800e1e2:	0022      	movs	r2, r4
 800e1e4:	f7f2 f932 	bl	800044c <__aeabi_dcmpeq>
 800e1e8:	4243      	negs	r3, r0
 800e1ea:	4158      	adcs	r0, r3
 800e1ec:	9b04      	ldr	r3, [sp, #16]
 800e1ee:	1a1b      	subs	r3, r3, r0
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e1f6:	9b04      	ldr	r3, [sp, #16]
 800e1f8:	2b16      	cmp	r3, #22
 800e1fa:	d810      	bhi.n	800e21e <_dtoa_r+0x196>
 800e1fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e1fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e200:	9a04      	ldr	r2, [sp, #16]
 800e202:	4b83      	ldr	r3, [pc, #524]	@ (800e410 <_dtoa_r+0x388>)
 800e204:	00d2      	lsls	r2, r2, #3
 800e206:	189b      	adds	r3, r3, r2
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	f7f2 f924 	bl	8000458 <__aeabi_dcmplt>
 800e210:	2800      	cmp	r0, #0
 800e212:	d047      	beq.n	800e2a4 <_dtoa_r+0x21c>
 800e214:	9b04      	ldr	r3, [sp, #16]
 800e216:	3b01      	subs	r3, #1
 800e218:	9304      	str	r3, [sp, #16]
 800e21a:	2300      	movs	r3, #0
 800e21c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e21e:	2200      	movs	r2, #0
 800e220:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e222:	9206      	str	r2, [sp, #24]
 800e224:	1bdb      	subs	r3, r3, r7
 800e226:	1e5a      	subs	r2, r3, #1
 800e228:	d53e      	bpl.n	800e2a8 <_dtoa_r+0x220>
 800e22a:	2201      	movs	r2, #1
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	9306      	str	r3, [sp, #24]
 800e230:	2300      	movs	r3, #0
 800e232:	930d      	str	r3, [sp, #52]	@ 0x34
 800e234:	9b04      	ldr	r3, [sp, #16]
 800e236:	2b00      	cmp	r3, #0
 800e238:	db38      	blt.n	800e2ac <_dtoa_r+0x224>
 800e23a:	9a04      	ldr	r2, [sp, #16]
 800e23c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e23e:	4694      	mov	ip, r2
 800e240:	4463      	add	r3, ip
 800e242:	930d      	str	r3, [sp, #52]	@ 0x34
 800e244:	2300      	movs	r3, #0
 800e246:	9214      	str	r2, [sp, #80]	@ 0x50
 800e248:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e24a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e24c:	2401      	movs	r4, #1
 800e24e:	2b09      	cmp	r3, #9
 800e250:	d867      	bhi.n	800e322 <_dtoa_r+0x29a>
 800e252:	2b05      	cmp	r3, #5
 800e254:	dd02      	ble.n	800e25c <_dtoa_r+0x1d4>
 800e256:	2400      	movs	r4, #0
 800e258:	3b04      	subs	r3, #4
 800e25a:	9322      	str	r3, [sp, #136]	@ 0x88
 800e25c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e25e:	1e98      	subs	r0, r3, #2
 800e260:	2803      	cmp	r0, #3
 800e262:	d867      	bhi.n	800e334 <_dtoa_r+0x2ac>
 800e264:	f7f1 ff58 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e268:	5b383a2b 	.word	0x5b383a2b
 800e26c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e26e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800e270:	18f6      	adds	r6, r6, r3
 800e272:	4b68      	ldr	r3, [pc, #416]	@ (800e414 <_dtoa_r+0x38c>)
 800e274:	18f2      	adds	r2, r6, r3
 800e276:	2a20      	cmp	r2, #32
 800e278:	dd0f      	ble.n	800e29a <_dtoa_r+0x212>
 800e27a:	2340      	movs	r3, #64	@ 0x40
 800e27c:	1a9b      	subs	r3, r3, r2
 800e27e:	409f      	lsls	r7, r3
 800e280:	4b65      	ldr	r3, [pc, #404]	@ (800e418 <_dtoa_r+0x390>)
 800e282:	0038      	movs	r0, r7
 800e284:	18f3      	adds	r3, r6, r3
 800e286:	40dc      	lsrs	r4, r3
 800e288:	4320      	orrs	r0, r4
 800e28a:	f7f3 ffa5 	bl	80021d8 <__aeabi_ui2d>
 800e28e:	2201      	movs	r2, #1
 800e290:	4b62      	ldr	r3, [pc, #392]	@ (800e41c <_dtoa_r+0x394>)
 800e292:	1e77      	subs	r7, r6, #1
 800e294:	18cb      	adds	r3, r1, r3
 800e296:	9218      	str	r2, [sp, #96]	@ 0x60
 800e298:	e776      	b.n	800e188 <_dtoa_r+0x100>
 800e29a:	2320      	movs	r3, #32
 800e29c:	0020      	movs	r0, r4
 800e29e:	1a9b      	subs	r3, r3, r2
 800e2a0:	4098      	lsls	r0, r3
 800e2a2:	e7f2      	b.n	800e28a <_dtoa_r+0x202>
 800e2a4:	9015      	str	r0, [sp, #84]	@ 0x54
 800e2a6:	e7ba      	b.n	800e21e <_dtoa_r+0x196>
 800e2a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800e2aa:	e7c3      	b.n	800e234 <_dtoa_r+0x1ac>
 800e2ac:	9b06      	ldr	r3, [sp, #24]
 800e2ae:	9a04      	ldr	r2, [sp, #16]
 800e2b0:	1a9b      	subs	r3, r3, r2
 800e2b2:	9306      	str	r3, [sp, #24]
 800e2b4:	4253      	negs	r3, r2
 800e2b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	9314      	str	r3, [sp, #80]	@ 0x50
 800e2bc:	e7c5      	b.n	800e24a <_dtoa_r+0x1c2>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e2c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e2c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	dc13      	bgt.n	800e2f4 <_dtoa_r+0x26c>
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	001a      	movs	r2, r3
 800e2d0:	930e      	str	r3, [sp, #56]	@ 0x38
 800e2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2d4:	9223      	str	r2, [sp, #140]	@ 0x8c
 800e2d6:	e00d      	b.n	800e2f4 <_dtoa_r+0x26c>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e7f1      	b.n	800e2c0 <_dtoa_r+0x238>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e2e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2e2:	4694      	mov	ip, r2
 800e2e4:	9b04      	ldr	r3, [sp, #16]
 800e2e6:	4463      	add	r3, ip
 800e2e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	dc00      	bgt.n	800e2f4 <_dtoa_r+0x26c>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	9a03      	ldr	r2, [sp, #12]
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	69d0      	ldr	r0, [r2, #28]
 800e2fa:	2204      	movs	r2, #4
 800e2fc:	0015      	movs	r5, r2
 800e2fe:	3514      	adds	r5, #20
 800e300:	429d      	cmp	r5, r3
 800e302:	d91b      	bls.n	800e33c <_dtoa_r+0x2b4>
 800e304:	6041      	str	r1, [r0, #4]
 800e306:	9803      	ldr	r0, [sp, #12]
 800e308:	f000 fdb8 	bl	800ee7c <_Balloc>
 800e30c:	9008      	str	r0, [sp, #32]
 800e30e:	2800      	cmp	r0, #0
 800e310:	d117      	bne.n	800e342 <_dtoa_r+0x2ba>
 800e312:	21b0      	movs	r1, #176	@ 0xb0
 800e314:	4b42      	ldr	r3, [pc, #264]	@ (800e420 <_dtoa_r+0x398>)
 800e316:	482e      	ldr	r0, [pc, #184]	@ (800e3d0 <_dtoa_r+0x348>)
 800e318:	9a08      	ldr	r2, [sp, #32]
 800e31a:	31ff      	adds	r1, #255	@ 0xff
 800e31c:	e6c9      	b.n	800e0b2 <_dtoa_r+0x2a>
 800e31e:	2301      	movs	r3, #1
 800e320:	e7dd      	b.n	800e2de <_dtoa_r+0x256>
 800e322:	2300      	movs	r3, #0
 800e324:	9410      	str	r4, [sp, #64]	@ 0x40
 800e326:	9322      	str	r3, [sp, #136]	@ 0x88
 800e328:	3b01      	subs	r3, #1
 800e32a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e32e:	2200      	movs	r2, #0
 800e330:	3313      	adds	r3, #19
 800e332:	e7cf      	b.n	800e2d4 <_dtoa_r+0x24c>
 800e334:	2301      	movs	r3, #1
 800e336:	9310      	str	r3, [sp, #64]	@ 0x40
 800e338:	3b02      	subs	r3, #2
 800e33a:	e7f6      	b.n	800e32a <_dtoa_r+0x2a2>
 800e33c:	3101      	adds	r1, #1
 800e33e:	0052      	lsls	r2, r2, #1
 800e340:	e7dc      	b.n	800e2fc <_dtoa_r+0x274>
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	9a08      	ldr	r2, [sp, #32]
 800e346:	69db      	ldr	r3, [r3, #28]
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e34c:	2b0e      	cmp	r3, #14
 800e34e:	d900      	bls.n	800e352 <_dtoa_r+0x2ca>
 800e350:	e0d9      	b.n	800e506 <_dtoa_r+0x47e>
 800e352:	2c00      	cmp	r4, #0
 800e354:	d100      	bne.n	800e358 <_dtoa_r+0x2d0>
 800e356:	e0d6      	b.n	800e506 <_dtoa_r+0x47e>
 800e358:	9b04      	ldr	r3, [sp, #16]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	dd64      	ble.n	800e428 <_dtoa_r+0x3a0>
 800e35e:	210f      	movs	r1, #15
 800e360:	9a04      	ldr	r2, [sp, #16]
 800e362:	4b2b      	ldr	r3, [pc, #172]	@ (800e410 <_dtoa_r+0x388>)
 800e364:	400a      	ands	r2, r1
 800e366:	00d2      	lsls	r2, r2, #3
 800e368:	189b      	adds	r3, r3, r2
 800e36a:	681e      	ldr	r6, [r3, #0]
 800e36c:	685f      	ldr	r7, [r3, #4]
 800e36e:	9b04      	ldr	r3, [sp, #16]
 800e370:	2402      	movs	r4, #2
 800e372:	111d      	asrs	r5, r3, #4
 800e374:	05db      	lsls	r3, r3, #23
 800e376:	d50a      	bpl.n	800e38e <_dtoa_r+0x306>
 800e378:	4b2a      	ldr	r3, [pc, #168]	@ (800e424 <_dtoa_r+0x39c>)
 800e37a:	400d      	ands	r5, r1
 800e37c:	6a1a      	ldr	r2, [r3, #32]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e380:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e382:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e384:	f7f2 fbf4 	bl	8000b70 <__aeabi_ddiv>
 800e388:	900a      	str	r0, [sp, #40]	@ 0x28
 800e38a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e38c:	3401      	adds	r4, #1
 800e38e:	4b25      	ldr	r3, [pc, #148]	@ (800e424 <_dtoa_r+0x39c>)
 800e390:	930c      	str	r3, [sp, #48]	@ 0x30
 800e392:	2d00      	cmp	r5, #0
 800e394:	d108      	bne.n	800e3a8 <_dtoa_r+0x320>
 800e396:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e39a:	0032      	movs	r2, r6
 800e39c:	003b      	movs	r3, r7
 800e39e:	f7f2 fbe7 	bl	8000b70 <__aeabi_ddiv>
 800e3a2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e3a6:	e05a      	b.n	800e45e <_dtoa_r+0x3d6>
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	421d      	tst	r5, r3
 800e3ac:	d009      	beq.n	800e3c2 <_dtoa_r+0x33a>
 800e3ae:	18e4      	adds	r4, r4, r3
 800e3b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3b2:	0030      	movs	r0, r6
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	0039      	movs	r1, r7
 800e3ba:	f7f3 f81d 	bl	80013f8 <__aeabi_dmul>
 800e3be:	0006      	movs	r6, r0
 800e3c0:	000f      	movs	r7, r1
 800e3c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3c4:	106d      	asrs	r5, r5, #1
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	e7e2      	b.n	800e390 <_dtoa_r+0x308>
 800e3ca:	46c0      	nop			@ (mov r8, r8)
 800e3cc:	0800ffe9 	.word	0x0800ffe9
 800e3d0:	08010000 	.word	0x08010000
 800e3d4:	7ff00000 	.word	0x7ff00000
 800e3d8:	0000270f 	.word	0x0000270f
 800e3dc:	0800ffe5 	.word	0x0800ffe5
 800e3e0:	0800ffe8 	.word	0x0800ffe8
 800e3e4:	0800ffb9 	.word	0x0800ffb9
 800e3e8:	0800ffb8 	.word	0x0800ffb8
 800e3ec:	3ff00000 	.word	0x3ff00000
 800e3f0:	fffffc01 	.word	0xfffffc01
 800e3f4:	3ff80000 	.word	0x3ff80000
 800e3f8:	636f4361 	.word	0x636f4361
 800e3fc:	3fd287a7 	.word	0x3fd287a7
 800e400:	8b60c8b3 	.word	0x8b60c8b3
 800e404:	3fc68a28 	.word	0x3fc68a28
 800e408:	509f79fb 	.word	0x509f79fb
 800e40c:	3fd34413 	.word	0x3fd34413
 800e410:	080100f8 	.word	0x080100f8
 800e414:	00000432 	.word	0x00000432
 800e418:	00000412 	.word	0x00000412
 800e41c:	fe100000 	.word	0xfe100000
 800e420:	08010058 	.word	0x08010058
 800e424:	080100d0 	.word	0x080100d0
 800e428:	9b04      	ldr	r3, [sp, #16]
 800e42a:	2402      	movs	r4, #2
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d016      	beq.n	800e45e <_dtoa_r+0x3d6>
 800e430:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e432:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e434:	220f      	movs	r2, #15
 800e436:	425d      	negs	r5, r3
 800e438:	402a      	ands	r2, r5
 800e43a:	4bd7      	ldr	r3, [pc, #860]	@ (800e798 <_dtoa_r+0x710>)
 800e43c:	00d2      	lsls	r2, r2, #3
 800e43e:	189b      	adds	r3, r3, r2
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	f7f2 ffd8 	bl	80013f8 <__aeabi_dmul>
 800e448:	2701      	movs	r7, #1
 800e44a:	2300      	movs	r3, #0
 800e44c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e44e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e450:	4ed2      	ldr	r6, [pc, #840]	@ (800e79c <_dtoa_r+0x714>)
 800e452:	112d      	asrs	r5, r5, #4
 800e454:	2d00      	cmp	r5, #0
 800e456:	d000      	beq.n	800e45a <_dtoa_r+0x3d2>
 800e458:	e0ba      	b.n	800e5d0 <_dtoa_r+0x548>
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1a1      	bne.n	800e3a2 <_dtoa_r+0x31a>
 800e45e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e460:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e462:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e464:	2b00      	cmp	r3, #0
 800e466:	d100      	bne.n	800e46a <_dtoa_r+0x3e2>
 800e468:	e0bd      	b.n	800e5e6 <_dtoa_r+0x55e>
 800e46a:	2200      	movs	r2, #0
 800e46c:	0030      	movs	r0, r6
 800e46e:	0039      	movs	r1, r7
 800e470:	4bcb      	ldr	r3, [pc, #812]	@ (800e7a0 <_dtoa_r+0x718>)
 800e472:	f7f1 fff1 	bl	8000458 <__aeabi_dcmplt>
 800e476:	2800      	cmp	r0, #0
 800e478:	d100      	bne.n	800e47c <_dtoa_r+0x3f4>
 800e47a:	e0b4      	b.n	800e5e6 <_dtoa_r+0x55e>
 800e47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d100      	bne.n	800e484 <_dtoa_r+0x3fc>
 800e482:	e0b0      	b.n	800e5e6 <_dtoa_r+0x55e>
 800e484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e486:	2b00      	cmp	r3, #0
 800e488:	dd39      	ble.n	800e4fe <_dtoa_r+0x476>
 800e48a:	9b04      	ldr	r3, [sp, #16]
 800e48c:	2200      	movs	r2, #0
 800e48e:	3b01      	subs	r3, #1
 800e490:	930c      	str	r3, [sp, #48]	@ 0x30
 800e492:	0030      	movs	r0, r6
 800e494:	4bc3      	ldr	r3, [pc, #780]	@ (800e7a4 <_dtoa_r+0x71c>)
 800e496:	0039      	movs	r1, r7
 800e498:	f7f2 ffae 	bl	80013f8 <__aeabi_dmul>
 800e49c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e49e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e4a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4a2:	3401      	adds	r4, #1
 800e4a4:	0020      	movs	r0, r4
 800e4a6:	9311      	str	r3, [sp, #68]	@ 0x44
 800e4a8:	f7f3 fe68 	bl	800217c <__aeabi_i2d>
 800e4ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4b0:	f7f2 ffa2 	bl	80013f8 <__aeabi_dmul>
 800e4b4:	4bbc      	ldr	r3, [pc, #752]	@ (800e7a8 <_dtoa_r+0x720>)
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f7f1 fff6 	bl	80004a8 <__aeabi_dadd>
 800e4bc:	4bbb      	ldr	r3, [pc, #748]	@ (800e7ac <_dtoa_r+0x724>)
 800e4be:	0006      	movs	r6, r0
 800e4c0:	18cf      	adds	r7, r1, r3
 800e4c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d000      	beq.n	800e4ca <_dtoa_r+0x442>
 800e4c8:	e091      	b.n	800e5ee <_dtoa_r+0x566>
 800e4ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e4cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	4bb7      	ldr	r3, [pc, #732]	@ (800e7b0 <_dtoa_r+0x728>)
 800e4d2:	f7f3 fa59 	bl	8001988 <__aeabi_dsub>
 800e4d6:	0032      	movs	r2, r6
 800e4d8:	003b      	movs	r3, r7
 800e4da:	0004      	movs	r4, r0
 800e4dc:	000d      	movs	r5, r1
 800e4de:	f7f1 ffcf 	bl	8000480 <__aeabi_dcmpgt>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d000      	beq.n	800e4e8 <_dtoa_r+0x460>
 800e4e6:	e29d      	b.n	800ea24 <_dtoa_r+0x99c>
 800e4e8:	2180      	movs	r1, #128	@ 0x80
 800e4ea:	0609      	lsls	r1, r1, #24
 800e4ec:	187b      	adds	r3, r7, r1
 800e4ee:	0032      	movs	r2, r6
 800e4f0:	0020      	movs	r0, r4
 800e4f2:	0029      	movs	r1, r5
 800e4f4:	f7f1 ffb0 	bl	8000458 <__aeabi_dcmplt>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d000      	beq.n	800e4fe <_dtoa_r+0x476>
 800e4fc:	e130      	b.n	800e760 <_dtoa_r+0x6d8>
 800e4fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e500:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e502:	930a      	str	r3, [sp, #40]	@ 0x28
 800e504:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e506:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e508:	2b00      	cmp	r3, #0
 800e50a:	da00      	bge.n	800e50e <_dtoa_r+0x486>
 800e50c:	e177      	b.n	800e7fe <_dtoa_r+0x776>
 800e50e:	9a04      	ldr	r2, [sp, #16]
 800e510:	2a0e      	cmp	r2, #14
 800e512:	dd00      	ble.n	800e516 <_dtoa_r+0x48e>
 800e514:	e173      	b.n	800e7fe <_dtoa_r+0x776>
 800e516:	4ba0      	ldr	r3, [pc, #640]	@ (800e798 <_dtoa_r+0x710>)
 800e518:	00d2      	lsls	r2, r2, #3
 800e51a:	189b      	adds	r3, r3, r2
 800e51c:	685c      	ldr	r4, [r3, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	9306      	str	r3, [sp, #24]
 800e522:	9407      	str	r4, [sp, #28]
 800e524:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e526:	2b00      	cmp	r3, #0
 800e528:	da03      	bge.n	800e532 <_dtoa_r+0x4aa>
 800e52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dc00      	bgt.n	800e532 <_dtoa_r+0x4aa>
 800e530:	e106      	b.n	800e740 <_dtoa_r+0x6b8>
 800e532:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e534:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e538:	9d08      	ldr	r5, [sp, #32]
 800e53a:	3b01      	subs	r3, #1
 800e53c:	195b      	adds	r3, r3, r5
 800e53e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e540:	9a06      	ldr	r2, [sp, #24]
 800e542:	9b07      	ldr	r3, [sp, #28]
 800e544:	0030      	movs	r0, r6
 800e546:	0039      	movs	r1, r7
 800e548:	f7f2 fb12 	bl	8000b70 <__aeabi_ddiv>
 800e54c:	f7f3 fdda 	bl	8002104 <__aeabi_d2iz>
 800e550:	9009      	str	r0, [sp, #36]	@ 0x24
 800e552:	f7f3 fe13 	bl	800217c <__aeabi_i2d>
 800e556:	9a06      	ldr	r2, [sp, #24]
 800e558:	9b07      	ldr	r3, [sp, #28]
 800e55a:	f7f2 ff4d 	bl	80013f8 <__aeabi_dmul>
 800e55e:	0002      	movs	r2, r0
 800e560:	000b      	movs	r3, r1
 800e562:	0030      	movs	r0, r6
 800e564:	0039      	movs	r1, r7
 800e566:	f7f3 fa0f 	bl	8001988 <__aeabi_dsub>
 800e56a:	002b      	movs	r3, r5
 800e56c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e56e:	3501      	adds	r5, #1
 800e570:	3230      	adds	r2, #48	@ 0x30
 800e572:	701a      	strb	r2, [r3, #0]
 800e574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e576:	002c      	movs	r4, r5
 800e578:	429a      	cmp	r2, r3
 800e57a:	d000      	beq.n	800e57e <_dtoa_r+0x4f6>
 800e57c:	e131      	b.n	800e7e2 <_dtoa_r+0x75a>
 800e57e:	0002      	movs	r2, r0
 800e580:	000b      	movs	r3, r1
 800e582:	f7f1 ff91 	bl	80004a8 <__aeabi_dadd>
 800e586:	9a06      	ldr	r2, [sp, #24]
 800e588:	9b07      	ldr	r3, [sp, #28]
 800e58a:	0006      	movs	r6, r0
 800e58c:	000f      	movs	r7, r1
 800e58e:	f7f1 ff77 	bl	8000480 <__aeabi_dcmpgt>
 800e592:	2800      	cmp	r0, #0
 800e594:	d000      	beq.n	800e598 <_dtoa_r+0x510>
 800e596:	e10f      	b.n	800e7b8 <_dtoa_r+0x730>
 800e598:	9a06      	ldr	r2, [sp, #24]
 800e59a:	9b07      	ldr	r3, [sp, #28]
 800e59c:	0030      	movs	r0, r6
 800e59e:	0039      	movs	r1, r7
 800e5a0:	f7f1 ff54 	bl	800044c <__aeabi_dcmpeq>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d003      	beq.n	800e5b0 <_dtoa_r+0x528>
 800e5a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5aa:	07dd      	lsls	r5, r3, #31
 800e5ac:	d500      	bpl.n	800e5b0 <_dtoa_r+0x528>
 800e5ae:	e103      	b.n	800e7b8 <_dtoa_r+0x730>
 800e5b0:	9905      	ldr	r1, [sp, #20]
 800e5b2:	9803      	ldr	r0, [sp, #12]
 800e5b4:	f000 fca6 	bl	800ef04 <_Bfree>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	7023      	strb	r3, [r4, #0]
 800e5bc:	9b04      	ldr	r3, [sp, #16]
 800e5be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	6013      	str	r3, [r2, #0]
 800e5c4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d100      	bne.n	800e5cc <_dtoa_r+0x544>
 800e5ca:	e5a7      	b.n	800e11c <_dtoa_r+0x94>
 800e5cc:	601c      	str	r4, [r3, #0]
 800e5ce:	e5a5      	b.n	800e11c <_dtoa_r+0x94>
 800e5d0:	423d      	tst	r5, r7
 800e5d2:	d005      	beq.n	800e5e0 <_dtoa_r+0x558>
 800e5d4:	6832      	ldr	r2, [r6, #0]
 800e5d6:	6873      	ldr	r3, [r6, #4]
 800e5d8:	f7f2 ff0e 	bl	80013f8 <__aeabi_dmul>
 800e5dc:	003b      	movs	r3, r7
 800e5de:	3401      	adds	r4, #1
 800e5e0:	106d      	asrs	r5, r5, #1
 800e5e2:	3608      	adds	r6, #8
 800e5e4:	e736      	b.n	800e454 <_dtoa_r+0x3cc>
 800e5e6:	9b04      	ldr	r3, [sp, #16]
 800e5e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ec:	e75a      	b.n	800e4a4 <_dtoa_r+0x41c>
 800e5ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5f0:	4b69      	ldr	r3, [pc, #420]	@ (800e798 <_dtoa_r+0x710>)
 800e5f2:	3a01      	subs	r2, #1
 800e5f4:	00d2      	lsls	r2, r2, #3
 800e5f6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e5f8:	189b      	adds	r3, r3, r2
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	2900      	cmp	r1, #0
 800e600:	d04c      	beq.n	800e69c <_dtoa_r+0x614>
 800e602:	2000      	movs	r0, #0
 800e604:	496b      	ldr	r1, [pc, #428]	@ (800e7b4 <_dtoa_r+0x72c>)
 800e606:	f7f2 fab3 	bl	8000b70 <__aeabi_ddiv>
 800e60a:	0032      	movs	r2, r6
 800e60c:	003b      	movs	r3, r7
 800e60e:	f7f3 f9bb 	bl	8001988 <__aeabi_dsub>
 800e612:	9a08      	ldr	r2, [sp, #32]
 800e614:	0006      	movs	r6, r0
 800e616:	4694      	mov	ip, r2
 800e618:	000f      	movs	r7, r1
 800e61a:	9b08      	ldr	r3, [sp, #32]
 800e61c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e61e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e620:	4463      	add	r3, ip
 800e622:	9311      	str	r3, [sp, #68]	@ 0x44
 800e624:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e626:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e628:	f7f3 fd6c 	bl	8002104 <__aeabi_d2iz>
 800e62c:	0005      	movs	r5, r0
 800e62e:	f7f3 fda5 	bl	800217c <__aeabi_i2d>
 800e632:	0002      	movs	r2, r0
 800e634:	000b      	movs	r3, r1
 800e636:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e63a:	f7f3 f9a5 	bl	8001988 <__aeabi_dsub>
 800e63e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e640:	3530      	adds	r5, #48	@ 0x30
 800e642:	1c5c      	adds	r4, r3, #1
 800e644:	701d      	strb	r5, [r3, #0]
 800e646:	0032      	movs	r2, r6
 800e648:	003b      	movs	r3, r7
 800e64a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e64c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e64e:	f7f1 ff03 	bl	8000458 <__aeabi_dcmplt>
 800e652:	2800      	cmp	r0, #0
 800e654:	d16a      	bne.n	800e72c <_dtoa_r+0x6a4>
 800e656:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e658:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e65a:	2000      	movs	r0, #0
 800e65c:	4950      	ldr	r1, [pc, #320]	@ (800e7a0 <_dtoa_r+0x718>)
 800e65e:	f7f3 f993 	bl	8001988 <__aeabi_dsub>
 800e662:	0032      	movs	r2, r6
 800e664:	003b      	movs	r3, r7
 800e666:	f7f1 fef7 	bl	8000458 <__aeabi_dcmplt>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d000      	beq.n	800e670 <_dtoa_r+0x5e8>
 800e66e:	e0a5      	b.n	800e7bc <_dtoa_r+0x734>
 800e670:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e672:	42a3      	cmp	r3, r4
 800e674:	d100      	bne.n	800e678 <_dtoa_r+0x5f0>
 800e676:	e742      	b.n	800e4fe <_dtoa_r+0x476>
 800e678:	2200      	movs	r2, #0
 800e67a:	0030      	movs	r0, r6
 800e67c:	0039      	movs	r1, r7
 800e67e:	4b49      	ldr	r3, [pc, #292]	@ (800e7a4 <_dtoa_r+0x71c>)
 800e680:	f7f2 feba 	bl	80013f8 <__aeabi_dmul>
 800e684:	2200      	movs	r2, #0
 800e686:	0006      	movs	r6, r0
 800e688:	000f      	movs	r7, r1
 800e68a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e68c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e68e:	4b45      	ldr	r3, [pc, #276]	@ (800e7a4 <_dtoa_r+0x71c>)
 800e690:	f7f2 feb2 	bl	80013f8 <__aeabi_dmul>
 800e694:	9416      	str	r4, [sp, #88]	@ 0x58
 800e696:	900a      	str	r0, [sp, #40]	@ 0x28
 800e698:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e69a:	e7c3      	b.n	800e624 <_dtoa_r+0x59c>
 800e69c:	0030      	movs	r0, r6
 800e69e:	0039      	movs	r1, r7
 800e6a0:	f7f2 feaa 	bl	80013f8 <__aeabi_dmul>
 800e6a4:	9d08      	ldr	r5, [sp, #32]
 800e6a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e6a8:	002b      	movs	r3, r5
 800e6aa:	4694      	mov	ip, r2
 800e6ac:	9016      	str	r0, [sp, #88]	@ 0x58
 800e6ae:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e6b0:	4463      	add	r3, ip
 800e6b2:	9319      	str	r3, [sp, #100]	@ 0x64
 800e6b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e6b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6b8:	f7f3 fd24 	bl	8002104 <__aeabi_d2iz>
 800e6bc:	0004      	movs	r4, r0
 800e6be:	f7f3 fd5d 	bl	800217c <__aeabi_i2d>
 800e6c2:	000b      	movs	r3, r1
 800e6c4:	0002      	movs	r2, r0
 800e6c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e6c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6ca:	f7f3 f95d 	bl	8001988 <__aeabi_dsub>
 800e6ce:	3430      	adds	r4, #48	@ 0x30
 800e6d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6d2:	702c      	strb	r4, [r5, #0]
 800e6d4:	3501      	adds	r5, #1
 800e6d6:	0006      	movs	r6, r0
 800e6d8:	000f      	movs	r7, r1
 800e6da:	42ab      	cmp	r3, r5
 800e6dc:	d129      	bne.n	800e732 <_dtoa_r+0x6aa>
 800e6de:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e6e0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e6e2:	9b08      	ldr	r3, [sp, #32]
 800e6e4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e6e6:	469c      	mov	ip, r3
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	4b32      	ldr	r3, [pc, #200]	@ (800e7b4 <_dtoa_r+0x72c>)
 800e6ec:	4464      	add	r4, ip
 800e6ee:	f7f1 fedb 	bl	80004a8 <__aeabi_dadd>
 800e6f2:	0002      	movs	r2, r0
 800e6f4:	000b      	movs	r3, r1
 800e6f6:	0030      	movs	r0, r6
 800e6f8:	0039      	movs	r1, r7
 800e6fa:	f7f1 fec1 	bl	8000480 <__aeabi_dcmpgt>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d15c      	bne.n	800e7bc <_dtoa_r+0x734>
 800e702:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e704:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e706:	2000      	movs	r0, #0
 800e708:	492a      	ldr	r1, [pc, #168]	@ (800e7b4 <_dtoa_r+0x72c>)
 800e70a:	f7f3 f93d 	bl	8001988 <__aeabi_dsub>
 800e70e:	0002      	movs	r2, r0
 800e710:	000b      	movs	r3, r1
 800e712:	0030      	movs	r0, r6
 800e714:	0039      	movs	r1, r7
 800e716:	f7f1 fe9f 	bl	8000458 <__aeabi_dcmplt>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d100      	bne.n	800e720 <_dtoa_r+0x698>
 800e71e:	e6ee      	b.n	800e4fe <_dtoa_r+0x476>
 800e720:	0023      	movs	r3, r4
 800e722:	3c01      	subs	r4, #1
 800e724:	7822      	ldrb	r2, [r4, #0]
 800e726:	2a30      	cmp	r2, #48	@ 0x30
 800e728:	d0fa      	beq.n	800e720 <_dtoa_r+0x698>
 800e72a:	001c      	movs	r4, r3
 800e72c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e72e:	9304      	str	r3, [sp, #16]
 800e730:	e73e      	b.n	800e5b0 <_dtoa_r+0x528>
 800e732:	2200      	movs	r2, #0
 800e734:	4b1b      	ldr	r3, [pc, #108]	@ (800e7a4 <_dtoa_r+0x71c>)
 800e736:	f7f2 fe5f 	bl	80013f8 <__aeabi_dmul>
 800e73a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e73c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e73e:	e7b9      	b.n	800e6b4 <_dtoa_r+0x62c>
 800e740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e742:	2b00      	cmp	r3, #0
 800e744:	d10c      	bne.n	800e760 <_dtoa_r+0x6d8>
 800e746:	9806      	ldr	r0, [sp, #24]
 800e748:	9907      	ldr	r1, [sp, #28]
 800e74a:	2200      	movs	r2, #0
 800e74c:	4b18      	ldr	r3, [pc, #96]	@ (800e7b0 <_dtoa_r+0x728>)
 800e74e:	f7f2 fe53 	bl	80013f8 <__aeabi_dmul>
 800e752:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e756:	f7f1 fe9d 	bl	8000494 <__aeabi_dcmpge>
 800e75a:	2800      	cmp	r0, #0
 800e75c:	d100      	bne.n	800e760 <_dtoa_r+0x6d8>
 800e75e:	e164      	b.n	800ea2a <_dtoa_r+0x9a2>
 800e760:	2600      	movs	r6, #0
 800e762:	0037      	movs	r7, r6
 800e764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e766:	9c08      	ldr	r4, [sp, #32]
 800e768:	43db      	mvns	r3, r3
 800e76a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e76c:	2300      	movs	r3, #0
 800e76e:	9304      	str	r3, [sp, #16]
 800e770:	0031      	movs	r1, r6
 800e772:	9803      	ldr	r0, [sp, #12]
 800e774:	f000 fbc6 	bl	800ef04 <_Bfree>
 800e778:	2f00      	cmp	r7, #0
 800e77a:	d0d7      	beq.n	800e72c <_dtoa_r+0x6a4>
 800e77c:	9b04      	ldr	r3, [sp, #16]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d005      	beq.n	800e78e <_dtoa_r+0x706>
 800e782:	42bb      	cmp	r3, r7
 800e784:	d003      	beq.n	800e78e <_dtoa_r+0x706>
 800e786:	0019      	movs	r1, r3
 800e788:	9803      	ldr	r0, [sp, #12]
 800e78a:	f000 fbbb 	bl	800ef04 <_Bfree>
 800e78e:	0039      	movs	r1, r7
 800e790:	9803      	ldr	r0, [sp, #12]
 800e792:	f000 fbb7 	bl	800ef04 <_Bfree>
 800e796:	e7c9      	b.n	800e72c <_dtoa_r+0x6a4>
 800e798:	080100f8 	.word	0x080100f8
 800e79c:	080100d0 	.word	0x080100d0
 800e7a0:	3ff00000 	.word	0x3ff00000
 800e7a4:	40240000 	.word	0x40240000
 800e7a8:	401c0000 	.word	0x401c0000
 800e7ac:	fcc00000 	.word	0xfcc00000
 800e7b0:	40140000 	.word	0x40140000
 800e7b4:	3fe00000 	.word	0x3fe00000
 800e7b8:	9b04      	ldr	r3, [sp, #16]
 800e7ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800e7bc:	0023      	movs	r3, r4
 800e7be:	001c      	movs	r4, r3
 800e7c0:	3b01      	subs	r3, #1
 800e7c2:	781a      	ldrb	r2, [r3, #0]
 800e7c4:	2a39      	cmp	r2, #57	@ 0x39
 800e7c6:	d108      	bne.n	800e7da <_dtoa_r+0x752>
 800e7c8:	9a08      	ldr	r2, [sp, #32]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d1f7      	bne.n	800e7be <_dtoa_r+0x736>
 800e7ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e7d0:	9908      	ldr	r1, [sp, #32]
 800e7d2:	3201      	adds	r2, #1
 800e7d4:	920c      	str	r2, [sp, #48]	@ 0x30
 800e7d6:	2230      	movs	r2, #48	@ 0x30
 800e7d8:	700a      	strb	r2, [r1, #0]
 800e7da:	781a      	ldrb	r2, [r3, #0]
 800e7dc:	3201      	adds	r2, #1
 800e7de:	701a      	strb	r2, [r3, #0]
 800e7e0:	e7a4      	b.n	800e72c <_dtoa_r+0x6a4>
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	4bc6      	ldr	r3, [pc, #792]	@ (800eb00 <_dtoa_r+0xa78>)
 800e7e6:	f7f2 fe07 	bl	80013f8 <__aeabi_dmul>
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	0006      	movs	r6, r0
 800e7f0:	000f      	movs	r7, r1
 800e7f2:	f7f1 fe2b 	bl	800044c <__aeabi_dcmpeq>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d100      	bne.n	800e7fc <_dtoa_r+0x774>
 800e7fa:	e6a1      	b.n	800e540 <_dtoa_r+0x4b8>
 800e7fc:	e6d8      	b.n	800e5b0 <_dtoa_r+0x528>
 800e7fe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e800:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e802:	9c06      	ldr	r4, [sp, #24]
 800e804:	2f00      	cmp	r7, #0
 800e806:	d014      	beq.n	800e832 <_dtoa_r+0x7aa>
 800e808:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e80a:	2a01      	cmp	r2, #1
 800e80c:	dd00      	ble.n	800e810 <_dtoa_r+0x788>
 800e80e:	e0c8      	b.n	800e9a2 <_dtoa_r+0x91a>
 800e810:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e812:	2a00      	cmp	r2, #0
 800e814:	d100      	bne.n	800e818 <_dtoa_r+0x790>
 800e816:	e0be      	b.n	800e996 <_dtoa_r+0x90e>
 800e818:	4aba      	ldr	r2, [pc, #744]	@ (800eb04 <_dtoa_r+0xa7c>)
 800e81a:	189b      	adds	r3, r3, r2
 800e81c:	9a06      	ldr	r2, [sp, #24]
 800e81e:	2101      	movs	r1, #1
 800e820:	18d2      	adds	r2, r2, r3
 800e822:	9206      	str	r2, [sp, #24]
 800e824:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e826:	9803      	ldr	r0, [sp, #12]
 800e828:	18d3      	adds	r3, r2, r3
 800e82a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e82c:	f000 fc22 	bl	800f074 <__i2b>
 800e830:	0007      	movs	r7, r0
 800e832:	2c00      	cmp	r4, #0
 800e834:	d00e      	beq.n	800e854 <_dtoa_r+0x7cc>
 800e836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e838:	2b00      	cmp	r3, #0
 800e83a:	dd0b      	ble.n	800e854 <_dtoa_r+0x7cc>
 800e83c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e83e:	0023      	movs	r3, r4
 800e840:	4294      	cmp	r4, r2
 800e842:	dd00      	ble.n	800e846 <_dtoa_r+0x7be>
 800e844:	0013      	movs	r3, r2
 800e846:	9a06      	ldr	r2, [sp, #24]
 800e848:	1ae4      	subs	r4, r4, r3
 800e84a:	1ad2      	subs	r2, r2, r3
 800e84c:	9206      	str	r2, [sp, #24]
 800e84e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	930d      	str	r3, [sp, #52]	@ 0x34
 800e854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e856:	2b00      	cmp	r3, #0
 800e858:	d01f      	beq.n	800e89a <_dtoa_r+0x812>
 800e85a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d100      	bne.n	800e862 <_dtoa_r+0x7da>
 800e860:	e0b5      	b.n	800e9ce <_dtoa_r+0x946>
 800e862:	2d00      	cmp	r5, #0
 800e864:	d010      	beq.n	800e888 <_dtoa_r+0x800>
 800e866:	0039      	movs	r1, r7
 800e868:	002a      	movs	r2, r5
 800e86a:	9803      	ldr	r0, [sp, #12]
 800e86c:	f000 fccc 	bl	800f208 <__pow5mult>
 800e870:	9a05      	ldr	r2, [sp, #20]
 800e872:	0001      	movs	r1, r0
 800e874:	0007      	movs	r7, r0
 800e876:	9803      	ldr	r0, [sp, #12]
 800e878:	f000 fc14 	bl	800f0a4 <__multiply>
 800e87c:	0006      	movs	r6, r0
 800e87e:	9905      	ldr	r1, [sp, #20]
 800e880:	9803      	ldr	r0, [sp, #12]
 800e882:	f000 fb3f 	bl	800ef04 <_Bfree>
 800e886:	9605      	str	r6, [sp, #20]
 800e888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e88a:	1b5a      	subs	r2, r3, r5
 800e88c:	42ab      	cmp	r3, r5
 800e88e:	d004      	beq.n	800e89a <_dtoa_r+0x812>
 800e890:	9905      	ldr	r1, [sp, #20]
 800e892:	9803      	ldr	r0, [sp, #12]
 800e894:	f000 fcb8 	bl	800f208 <__pow5mult>
 800e898:	9005      	str	r0, [sp, #20]
 800e89a:	2101      	movs	r1, #1
 800e89c:	9803      	ldr	r0, [sp, #12]
 800e89e:	f000 fbe9 	bl	800f074 <__i2b>
 800e8a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e8a4:	0006      	movs	r6, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d100      	bne.n	800e8ac <_dtoa_r+0x824>
 800e8aa:	e1bc      	b.n	800ec26 <_dtoa_r+0xb9e>
 800e8ac:	001a      	movs	r2, r3
 800e8ae:	0001      	movs	r1, r0
 800e8b0:	9803      	ldr	r0, [sp, #12]
 800e8b2:	f000 fca9 	bl	800f208 <__pow5mult>
 800e8b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e8b8:	0006      	movs	r6, r0
 800e8ba:	2500      	movs	r5, #0
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	dc16      	bgt.n	800e8ee <_dtoa_r+0x866>
 800e8c0:	2500      	movs	r5, #0
 800e8c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8c4:	42ab      	cmp	r3, r5
 800e8c6:	d10e      	bne.n	800e8e6 <_dtoa_r+0x85e>
 800e8c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8ca:	031b      	lsls	r3, r3, #12
 800e8cc:	42ab      	cmp	r3, r5
 800e8ce:	d10a      	bne.n	800e8e6 <_dtoa_r+0x85e>
 800e8d0:	4b8d      	ldr	r3, [pc, #564]	@ (800eb08 <_dtoa_r+0xa80>)
 800e8d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8d4:	4213      	tst	r3, r2
 800e8d6:	d006      	beq.n	800e8e6 <_dtoa_r+0x85e>
 800e8d8:	9b06      	ldr	r3, [sp, #24]
 800e8da:	3501      	adds	r5, #1
 800e8dc:	3301      	adds	r3, #1
 800e8de:	9306      	str	r3, [sp, #24]
 800e8e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	930d      	str	r3, [sp, #52]	@ 0x34
 800e8e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e8e8:	2001      	movs	r0, #1
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d008      	beq.n	800e900 <_dtoa_r+0x878>
 800e8ee:	6933      	ldr	r3, [r6, #16]
 800e8f0:	3303      	adds	r3, #3
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	18f3      	adds	r3, r6, r3
 800e8f6:	6858      	ldr	r0, [r3, #4]
 800e8f8:	f000 fb6c 	bl	800efd4 <__hi0bits>
 800e8fc:	2320      	movs	r3, #32
 800e8fe:	1a18      	subs	r0, r3, r0
 800e900:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e902:	1818      	adds	r0, r3, r0
 800e904:	0002      	movs	r2, r0
 800e906:	231f      	movs	r3, #31
 800e908:	401a      	ands	r2, r3
 800e90a:	4218      	tst	r0, r3
 800e90c:	d065      	beq.n	800e9da <_dtoa_r+0x952>
 800e90e:	3301      	adds	r3, #1
 800e910:	1a9b      	subs	r3, r3, r2
 800e912:	2b04      	cmp	r3, #4
 800e914:	dd5d      	ble.n	800e9d2 <_dtoa_r+0x94a>
 800e916:	231c      	movs	r3, #28
 800e918:	1a9b      	subs	r3, r3, r2
 800e91a:	9a06      	ldr	r2, [sp, #24]
 800e91c:	18e4      	adds	r4, r4, r3
 800e91e:	18d2      	adds	r2, r2, r3
 800e920:	9206      	str	r2, [sp, #24]
 800e922:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e924:	18d3      	adds	r3, r2, r3
 800e926:	930d      	str	r3, [sp, #52]	@ 0x34
 800e928:	9b06      	ldr	r3, [sp, #24]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	dd05      	ble.n	800e93a <_dtoa_r+0x8b2>
 800e92e:	001a      	movs	r2, r3
 800e930:	9905      	ldr	r1, [sp, #20]
 800e932:	9803      	ldr	r0, [sp, #12]
 800e934:	f000 fcc4 	bl	800f2c0 <__lshift>
 800e938:	9005      	str	r0, [sp, #20]
 800e93a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	dd05      	ble.n	800e94c <_dtoa_r+0x8c4>
 800e940:	0031      	movs	r1, r6
 800e942:	001a      	movs	r2, r3
 800e944:	9803      	ldr	r0, [sp, #12]
 800e946:	f000 fcbb 	bl	800f2c0 <__lshift>
 800e94a:	0006      	movs	r6, r0
 800e94c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d045      	beq.n	800e9de <_dtoa_r+0x956>
 800e952:	0031      	movs	r1, r6
 800e954:	9805      	ldr	r0, [sp, #20]
 800e956:	f000 fd1f 	bl	800f398 <__mcmp>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	da3f      	bge.n	800e9de <_dtoa_r+0x956>
 800e95e:	9b04      	ldr	r3, [sp, #16]
 800e960:	220a      	movs	r2, #10
 800e962:	3b01      	subs	r3, #1
 800e964:	930c      	str	r3, [sp, #48]	@ 0x30
 800e966:	9905      	ldr	r1, [sp, #20]
 800e968:	2300      	movs	r3, #0
 800e96a:	9803      	ldr	r0, [sp, #12]
 800e96c:	f000 faee 	bl	800ef4c <__multadd>
 800e970:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e972:	9005      	str	r0, [sp, #20]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d100      	bne.n	800e97a <_dtoa_r+0x8f2>
 800e978:	e15c      	b.n	800ec34 <_dtoa_r+0xbac>
 800e97a:	2300      	movs	r3, #0
 800e97c:	0039      	movs	r1, r7
 800e97e:	220a      	movs	r2, #10
 800e980:	9803      	ldr	r0, [sp, #12]
 800e982:	f000 fae3 	bl	800ef4c <__multadd>
 800e986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e988:	0007      	movs	r7, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	dc55      	bgt.n	800ea3a <_dtoa_r+0x9b2>
 800e98e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e990:	2b02      	cmp	r3, #2
 800e992:	dc2d      	bgt.n	800e9f0 <_dtoa_r+0x968>
 800e994:	e051      	b.n	800ea3a <_dtoa_r+0x9b2>
 800e996:	2336      	movs	r3, #54	@ 0x36
 800e998:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e99a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e99c:	9c06      	ldr	r4, [sp, #24]
 800e99e:	1a9b      	subs	r3, r3, r2
 800e9a0:	e73c      	b.n	800e81c <_dtoa_r+0x794>
 800e9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a4:	1e5d      	subs	r5, r3, #1
 800e9a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9a8:	42ab      	cmp	r3, r5
 800e9aa:	db08      	blt.n	800e9be <_dtoa_r+0x936>
 800e9ac:	1b5d      	subs	r5, r3, r5
 800e9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b0:	9c06      	ldr	r4, [sp, #24]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	db00      	blt.n	800e9b8 <_dtoa_r+0x930>
 800e9b6:	e731      	b.n	800e81c <_dtoa_r+0x794>
 800e9b8:	1ae4      	subs	r4, r4, r3
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	e72e      	b.n	800e81c <_dtoa_r+0x794>
 800e9be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e9c2:	1aeb      	subs	r3, r5, r3
 800e9c4:	18d3      	adds	r3, r2, r3
 800e9c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e9c8:	9314      	str	r3, [sp, #80]	@ 0x50
 800e9ca:	2500      	movs	r5, #0
 800e9cc:	e7ef      	b.n	800e9ae <_dtoa_r+0x926>
 800e9ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e9d0:	e75e      	b.n	800e890 <_dtoa_r+0x808>
 800e9d2:	2b04      	cmp	r3, #4
 800e9d4:	d0a8      	beq.n	800e928 <_dtoa_r+0x8a0>
 800e9d6:	331c      	adds	r3, #28
 800e9d8:	e79f      	b.n	800e91a <_dtoa_r+0x892>
 800e9da:	0013      	movs	r3, r2
 800e9dc:	e7fb      	b.n	800e9d6 <_dtoa_r+0x94e>
 800e9de:	9b04      	ldr	r3, [sp, #16]
 800e9e0:	930c      	str	r3, [sp, #48]	@ 0x30
 800e9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	dc23      	bgt.n	800ea32 <_dtoa_r+0x9aa>
 800e9ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	dd20      	ble.n	800ea32 <_dtoa_r+0x9aa>
 800e9f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d000      	beq.n	800e9f8 <_dtoa_r+0x970>
 800e9f6:	e6b5      	b.n	800e764 <_dtoa_r+0x6dc>
 800e9f8:	0031      	movs	r1, r6
 800e9fa:	2205      	movs	r2, #5
 800e9fc:	9803      	ldr	r0, [sp, #12]
 800e9fe:	f000 faa5 	bl	800ef4c <__multadd>
 800ea02:	0006      	movs	r6, r0
 800ea04:	0001      	movs	r1, r0
 800ea06:	9805      	ldr	r0, [sp, #20]
 800ea08:	f000 fcc6 	bl	800f398 <__mcmp>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	dc00      	bgt.n	800ea12 <_dtoa_r+0x98a>
 800ea10:	e6a8      	b.n	800e764 <_dtoa_r+0x6dc>
 800ea12:	9b08      	ldr	r3, [sp, #32]
 800ea14:	9a08      	ldr	r2, [sp, #32]
 800ea16:	1c5c      	adds	r4, r3, #1
 800ea18:	2331      	movs	r3, #49	@ 0x31
 800ea1a:	7013      	strb	r3, [r2, #0]
 800ea1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea1e:	3301      	adds	r3, #1
 800ea20:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea22:	e6a3      	b.n	800e76c <_dtoa_r+0x6e4>
 800ea24:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ea26:	0037      	movs	r7, r6
 800ea28:	e7f3      	b.n	800ea12 <_dtoa_r+0x98a>
 800ea2a:	9b04      	ldr	r3, [sp, #16]
 800ea2c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800ea2e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea30:	e7f9      	b.n	800ea26 <_dtoa_r+0x99e>
 800ea32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d100      	bne.n	800ea3a <_dtoa_r+0x9b2>
 800ea38:	e100      	b.n	800ec3c <_dtoa_r+0xbb4>
 800ea3a:	2c00      	cmp	r4, #0
 800ea3c:	dd05      	ble.n	800ea4a <_dtoa_r+0x9c2>
 800ea3e:	0039      	movs	r1, r7
 800ea40:	0022      	movs	r2, r4
 800ea42:	9803      	ldr	r0, [sp, #12]
 800ea44:	f000 fc3c 	bl	800f2c0 <__lshift>
 800ea48:	0007      	movs	r7, r0
 800ea4a:	0038      	movs	r0, r7
 800ea4c:	2d00      	cmp	r5, #0
 800ea4e:	d018      	beq.n	800ea82 <_dtoa_r+0x9fa>
 800ea50:	6879      	ldr	r1, [r7, #4]
 800ea52:	9803      	ldr	r0, [sp, #12]
 800ea54:	f000 fa12 	bl	800ee7c <_Balloc>
 800ea58:	1e04      	subs	r4, r0, #0
 800ea5a:	d105      	bne.n	800ea68 <_dtoa_r+0x9e0>
 800ea5c:	0022      	movs	r2, r4
 800ea5e:	4b2b      	ldr	r3, [pc, #172]	@ (800eb0c <_dtoa_r+0xa84>)
 800ea60:	482b      	ldr	r0, [pc, #172]	@ (800eb10 <_dtoa_r+0xa88>)
 800ea62:	492c      	ldr	r1, [pc, #176]	@ (800eb14 <_dtoa_r+0xa8c>)
 800ea64:	f7ff fb25 	bl	800e0b2 <_dtoa_r+0x2a>
 800ea68:	0039      	movs	r1, r7
 800ea6a:	693a      	ldr	r2, [r7, #16]
 800ea6c:	310c      	adds	r1, #12
 800ea6e:	3202      	adds	r2, #2
 800ea70:	0092      	lsls	r2, r2, #2
 800ea72:	300c      	adds	r0, #12
 800ea74:	f000 fe6a 	bl	800f74c <memcpy>
 800ea78:	2201      	movs	r2, #1
 800ea7a:	0021      	movs	r1, r4
 800ea7c:	9803      	ldr	r0, [sp, #12]
 800ea7e:	f000 fc1f 	bl	800f2c0 <__lshift>
 800ea82:	9b08      	ldr	r3, [sp, #32]
 800ea84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea86:	9306      	str	r3, [sp, #24]
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	189b      	adds	r3, r3, r2
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	9704      	str	r7, [sp, #16]
 800ea90:	0007      	movs	r7, r0
 800ea92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea96:	4013      	ands	r3, r2
 800ea98:	930e      	str	r3, [sp, #56]	@ 0x38
 800ea9a:	0031      	movs	r1, r6
 800ea9c:	9805      	ldr	r0, [sp, #20]
 800ea9e:	f7ff fa65 	bl	800df6c <quorem>
 800eaa2:	9904      	ldr	r1, [sp, #16]
 800eaa4:	0005      	movs	r5, r0
 800eaa6:	900a      	str	r0, [sp, #40]	@ 0x28
 800eaa8:	9805      	ldr	r0, [sp, #20]
 800eaaa:	f000 fc75 	bl	800f398 <__mcmp>
 800eaae:	003a      	movs	r2, r7
 800eab0:	900d      	str	r0, [sp, #52]	@ 0x34
 800eab2:	0031      	movs	r1, r6
 800eab4:	9803      	ldr	r0, [sp, #12]
 800eab6:	f000 fc8b 	bl	800f3d0 <__mdiff>
 800eaba:	2201      	movs	r2, #1
 800eabc:	68c3      	ldr	r3, [r0, #12]
 800eabe:	0004      	movs	r4, r0
 800eac0:	3530      	adds	r5, #48	@ 0x30
 800eac2:	9209      	str	r2, [sp, #36]	@ 0x24
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d104      	bne.n	800ead2 <_dtoa_r+0xa4a>
 800eac8:	0001      	movs	r1, r0
 800eaca:	9805      	ldr	r0, [sp, #20]
 800eacc:	f000 fc64 	bl	800f398 <__mcmp>
 800ead0:	9009      	str	r0, [sp, #36]	@ 0x24
 800ead2:	0021      	movs	r1, r4
 800ead4:	9803      	ldr	r0, [sp, #12]
 800ead6:	f000 fa15 	bl	800ef04 <_Bfree>
 800eada:	9b06      	ldr	r3, [sp, #24]
 800eadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eade:	1c5c      	adds	r4, r3, #1
 800eae0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800eae2:	4313      	orrs	r3, r2
 800eae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eae6:	4313      	orrs	r3, r2
 800eae8:	d116      	bne.n	800eb18 <_dtoa_r+0xa90>
 800eaea:	2d39      	cmp	r5, #57	@ 0x39
 800eaec:	d02f      	beq.n	800eb4e <_dtoa_r+0xac6>
 800eaee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dd01      	ble.n	800eaf8 <_dtoa_r+0xa70>
 800eaf4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800eaf6:	3531      	adds	r5, #49	@ 0x31
 800eaf8:	9b06      	ldr	r3, [sp, #24]
 800eafa:	701d      	strb	r5, [r3, #0]
 800eafc:	e638      	b.n	800e770 <_dtoa_r+0x6e8>
 800eafe:	46c0      	nop			@ (mov r8, r8)
 800eb00:	40240000 	.word	0x40240000
 800eb04:	00000433 	.word	0x00000433
 800eb08:	7ff00000 	.word	0x7ff00000
 800eb0c:	08010058 	.word	0x08010058
 800eb10:	08010000 	.word	0x08010000
 800eb14:	000002ef 	.word	0x000002ef
 800eb18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	db04      	blt.n	800eb28 <_dtoa_r+0xaa0>
 800eb1e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800eb20:	4313      	orrs	r3, r2
 800eb22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb24:	4313      	orrs	r3, r2
 800eb26:	d11e      	bne.n	800eb66 <_dtoa_r+0xade>
 800eb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	dde4      	ble.n	800eaf8 <_dtoa_r+0xa70>
 800eb2e:	9905      	ldr	r1, [sp, #20]
 800eb30:	2201      	movs	r2, #1
 800eb32:	9803      	ldr	r0, [sp, #12]
 800eb34:	f000 fbc4 	bl	800f2c0 <__lshift>
 800eb38:	0031      	movs	r1, r6
 800eb3a:	9005      	str	r0, [sp, #20]
 800eb3c:	f000 fc2c 	bl	800f398 <__mcmp>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	dc02      	bgt.n	800eb4a <_dtoa_r+0xac2>
 800eb44:	d1d8      	bne.n	800eaf8 <_dtoa_r+0xa70>
 800eb46:	07eb      	lsls	r3, r5, #31
 800eb48:	d5d6      	bpl.n	800eaf8 <_dtoa_r+0xa70>
 800eb4a:	2d39      	cmp	r5, #57	@ 0x39
 800eb4c:	d1d2      	bne.n	800eaf4 <_dtoa_r+0xa6c>
 800eb4e:	2339      	movs	r3, #57	@ 0x39
 800eb50:	9a06      	ldr	r2, [sp, #24]
 800eb52:	7013      	strb	r3, [r2, #0]
 800eb54:	0023      	movs	r3, r4
 800eb56:	001c      	movs	r4, r3
 800eb58:	3b01      	subs	r3, #1
 800eb5a:	781a      	ldrb	r2, [r3, #0]
 800eb5c:	2a39      	cmp	r2, #57	@ 0x39
 800eb5e:	d04f      	beq.n	800ec00 <_dtoa_r+0xb78>
 800eb60:	3201      	adds	r2, #1
 800eb62:	701a      	strb	r2, [r3, #0]
 800eb64:	e604      	b.n	800e770 <_dtoa_r+0x6e8>
 800eb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	dd03      	ble.n	800eb74 <_dtoa_r+0xaec>
 800eb6c:	2d39      	cmp	r5, #57	@ 0x39
 800eb6e:	d0ee      	beq.n	800eb4e <_dtoa_r+0xac6>
 800eb70:	3501      	adds	r5, #1
 800eb72:	e7c1      	b.n	800eaf8 <_dtoa_r+0xa70>
 800eb74:	9b06      	ldr	r3, [sp, #24]
 800eb76:	9a06      	ldr	r2, [sp, #24]
 800eb78:	701d      	strb	r5, [r3, #0]
 800eb7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d02a      	beq.n	800ebd6 <_dtoa_r+0xb4e>
 800eb80:	2300      	movs	r3, #0
 800eb82:	220a      	movs	r2, #10
 800eb84:	9905      	ldr	r1, [sp, #20]
 800eb86:	9803      	ldr	r0, [sp, #12]
 800eb88:	f000 f9e0 	bl	800ef4c <__multadd>
 800eb8c:	9b04      	ldr	r3, [sp, #16]
 800eb8e:	9005      	str	r0, [sp, #20]
 800eb90:	42bb      	cmp	r3, r7
 800eb92:	d109      	bne.n	800eba8 <_dtoa_r+0xb20>
 800eb94:	2300      	movs	r3, #0
 800eb96:	220a      	movs	r2, #10
 800eb98:	9904      	ldr	r1, [sp, #16]
 800eb9a:	9803      	ldr	r0, [sp, #12]
 800eb9c:	f000 f9d6 	bl	800ef4c <__multadd>
 800eba0:	9004      	str	r0, [sp, #16]
 800eba2:	0007      	movs	r7, r0
 800eba4:	9406      	str	r4, [sp, #24]
 800eba6:	e778      	b.n	800ea9a <_dtoa_r+0xa12>
 800eba8:	9904      	ldr	r1, [sp, #16]
 800ebaa:	2300      	movs	r3, #0
 800ebac:	220a      	movs	r2, #10
 800ebae:	9803      	ldr	r0, [sp, #12]
 800ebb0:	f000 f9cc 	bl	800ef4c <__multadd>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9004      	str	r0, [sp, #16]
 800ebb8:	220a      	movs	r2, #10
 800ebba:	0039      	movs	r1, r7
 800ebbc:	9803      	ldr	r0, [sp, #12]
 800ebbe:	f000 f9c5 	bl	800ef4c <__multadd>
 800ebc2:	e7ee      	b.n	800eba2 <_dtoa_r+0xb1a>
 800ebc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebc6:	2401      	movs	r4, #1
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	dd00      	ble.n	800ebce <_dtoa_r+0xb46>
 800ebcc:	001c      	movs	r4, r3
 800ebce:	9b08      	ldr	r3, [sp, #32]
 800ebd0:	191c      	adds	r4, r3, r4
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	9304      	str	r3, [sp, #16]
 800ebd6:	9905      	ldr	r1, [sp, #20]
 800ebd8:	2201      	movs	r2, #1
 800ebda:	9803      	ldr	r0, [sp, #12]
 800ebdc:	f000 fb70 	bl	800f2c0 <__lshift>
 800ebe0:	0031      	movs	r1, r6
 800ebe2:	9005      	str	r0, [sp, #20]
 800ebe4:	f000 fbd8 	bl	800f398 <__mcmp>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	dcb3      	bgt.n	800eb54 <_dtoa_r+0xacc>
 800ebec:	d101      	bne.n	800ebf2 <_dtoa_r+0xb6a>
 800ebee:	07ed      	lsls	r5, r5, #31
 800ebf0:	d4b0      	bmi.n	800eb54 <_dtoa_r+0xacc>
 800ebf2:	0023      	movs	r3, r4
 800ebf4:	001c      	movs	r4, r3
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	781a      	ldrb	r2, [r3, #0]
 800ebfa:	2a30      	cmp	r2, #48	@ 0x30
 800ebfc:	d0fa      	beq.n	800ebf4 <_dtoa_r+0xb6c>
 800ebfe:	e5b7      	b.n	800e770 <_dtoa_r+0x6e8>
 800ec00:	9a08      	ldr	r2, [sp, #32]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d1a7      	bne.n	800eb56 <_dtoa_r+0xace>
 800ec06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec08:	3301      	adds	r3, #1
 800ec0a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec0c:	2331      	movs	r3, #49	@ 0x31
 800ec0e:	7013      	strb	r3, [r2, #0]
 800ec10:	e5ae      	b.n	800e770 <_dtoa_r+0x6e8>
 800ec12:	4b15      	ldr	r3, [pc, #84]	@ (800ec68 <_dtoa_r+0xbe0>)
 800ec14:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ec16:	9308      	str	r3, [sp, #32]
 800ec18:	4b14      	ldr	r3, [pc, #80]	@ (800ec6c <_dtoa_r+0xbe4>)
 800ec1a:	2a00      	cmp	r2, #0
 800ec1c:	d001      	beq.n	800ec22 <_dtoa_r+0xb9a>
 800ec1e:	f7ff fa7b 	bl	800e118 <_dtoa_r+0x90>
 800ec22:	f7ff fa7b 	bl	800e11c <_dtoa_r+0x94>
 800ec26:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	dc00      	bgt.n	800ec2e <_dtoa_r+0xba6>
 800ec2c:	e648      	b.n	800e8c0 <_dtoa_r+0x838>
 800ec2e:	2001      	movs	r0, #1
 800ec30:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ec32:	e665      	b.n	800e900 <_dtoa_r+0x878>
 800ec34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	dc00      	bgt.n	800ec3c <_dtoa_r+0xbb4>
 800ec3a:	e6d6      	b.n	800e9ea <_dtoa_r+0x962>
 800ec3c:	2400      	movs	r4, #0
 800ec3e:	0031      	movs	r1, r6
 800ec40:	9805      	ldr	r0, [sp, #20]
 800ec42:	f7ff f993 	bl	800df6c <quorem>
 800ec46:	9b08      	ldr	r3, [sp, #32]
 800ec48:	3030      	adds	r0, #48	@ 0x30
 800ec4a:	5518      	strb	r0, [r3, r4]
 800ec4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec4e:	3401      	adds	r4, #1
 800ec50:	0005      	movs	r5, r0
 800ec52:	429c      	cmp	r4, r3
 800ec54:	dab6      	bge.n	800ebc4 <_dtoa_r+0xb3c>
 800ec56:	2300      	movs	r3, #0
 800ec58:	220a      	movs	r2, #10
 800ec5a:	9905      	ldr	r1, [sp, #20]
 800ec5c:	9803      	ldr	r0, [sp, #12]
 800ec5e:	f000 f975 	bl	800ef4c <__multadd>
 800ec62:	9005      	str	r0, [sp, #20]
 800ec64:	e7eb      	b.n	800ec3e <_dtoa_r+0xbb6>
 800ec66:	46c0      	nop			@ (mov r8, r8)
 800ec68:	0800ffdc 	.word	0x0800ffdc
 800ec6c:	0800ffe4 	.word	0x0800ffe4

0800ec70 <_free_r>:
 800ec70:	b570      	push	{r4, r5, r6, lr}
 800ec72:	0005      	movs	r5, r0
 800ec74:	1e0c      	subs	r4, r1, #0
 800ec76:	d010      	beq.n	800ec9a <_free_r+0x2a>
 800ec78:	3c04      	subs	r4, #4
 800ec7a:	6823      	ldr	r3, [r4, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	da00      	bge.n	800ec82 <_free_r+0x12>
 800ec80:	18e4      	adds	r4, r4, r3
 800ec82:	0028      	movs	r0, r5
 800ec84:	f000 f8ea 	bl	800ee5c <__malloc_lock>
 800ec88:	4a1d      	ldr	r2, [pc, #116]	@ (800ed00 <_free_r+0x90>)
 800ec8a:	6813      	ldr	r3, [r2, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d105      	bne.n	800ec9c <_free_r+0x2c>
 800ec90:	6063      	str	r3, [r4, #4]
 800ec92:	6014      	str	r4, [r2, #0]
 800ec94:	0028      	movs	r0, r5
 800ec96:	f000 f8e9 	bl	800ee6c <__malloc_unlock>
 800ec9a:	bd70      	pop	{r4, r5, r6, pc}
 800ec9c:	42a3      	cmp	r3, r4
 800ec9e:	d908      	bls.n	800ecb2 <_free_r+0x42>
 800eca0:	6820      	ldr	r0, [r4, #0]
 800eca2:	1821      	adds	r1, r4, r0
 800eca4:	428b      	cmp	r3, r1
 800eca6:	d1f3      	bne.n	800ec90 <_free_r+0x20>
 800eca8:	6819      	ldr	r1, [r3, #0]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	1809      	adds	r1, r1, r0
 800ecae:	6021      	str	r1, [r4, #0]
 800ecb0:	e7ee      	b.n	800ec90 <_free_r+0x20>
 800ecb2:	001a      	movs	r2, r3
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d001      	beq.n	800ecbe <_free_r+0x4e>
 800ecba:	42a3      	cmp	r3, r4
 800ecbc:	d9f9      	bls.n	800ecb2 <_free_r+0x42>
 800ecbe:	6811      	ldr	r1, [r2, #0]
 800ecc0:	1850      	adds	r0, r2, r1
 800ecc2:	42a0      	cmp	r0, r4
 800ecc4:	d10b      	bne.n	800ecde <_free_r+0x6e>
 800ecc6:	6820      	ldr	r0, [r4, #0]
 800ecc8:	1809      	adds	r1, r1, r0
 800ecca:	1850      	adds	r0, r2, r1
 800eccc:	6011      	str	r1, [r2, #0]
 800ecce:	4283      	cmp	r3, r0
 800ecd0:	d1e0      	bne.n	800ec94 <_free_r+0x24>
 800ecd2:	6818      	ldr	r0, [r3, #0]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	1841      	adds	r1, r0, r1
 800ecd8:	6011      	str	r1, [r2, #0]
 800ecda:	6053      	str	r3, [r2, #4]
 800ecdc:	e7da      	b.n	800ec94 <_free_r+0x24>
 800ecde:	42a0      	cmp	r0, r4
 800ece0:	d902      	bls.n	800ece8 <_free_r+0x78>
 800ece2:	230c      	movs	r3, #12
 800ece4:	602b      	str	r3, [r5, #0]
 800ece6:	e7d5      	b.n	800ec94 <_free_r+0x24>
 800ece8:	6820      	ldr	r0, [r4, #0]
 800ecea:	1821      	adds	r1, r4, r0
 800ecec:	428b      	cmp	r3, r1
 800ecee:	d103      	bne.n	800ecf8 <_free_r+0x88>
 800ecf0:	6819      	ldr	r1, [r3, #0]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	1809      	adds	r1, r1, r0
 800ecf6:	6021      	str	r1, [r4, #0]
 800ecf8:	6063      	str	r3, [r4, #4]
 800ecfa:	6054      	str	r4, [r2, #4]
 800ecfc:	e7ca      	b.n	800ec94 <_free_r+0x24>
 800ecfe:	46c0      	nop			@ (mov r8, r8)
 800ed00:	20001fd4 	.word	0x20001fd4

0800ed04 <malloc>:
 800ed04:	b510      	push	{r4, lr}
 800ed06:	4b03      	ldr	r3, [pc, #12]	@ (800ed14 <malloc+0x10>)
 800ed08:	0001      	movs	r1, r0
 800ed0a:	6818      	ldr	r0, [r3, #0]
 800ed0c:	f000 f826 	bl	800ed5c <_malloc_r>
 800ed10:	bd10      	pop	{r4, pc}
 800ed12:	46c0      	nop			@ (mov r8, r8)
 800ed14:	20000188 	.word	0x20000188

0800ed18 <sbrk_aligned>:
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	4e0f      	ldr	r6, [pc, #60]	@ (800ed58 <sbrk_aligned+0x40>)
 800ed1c:	000d      	movs	r5, r1
 800ed1e:	6831      	ldr	r1, [r6, #0]
 800ed20:	0004      	movs	r4, r0
 800ed22:	2900      	cmp	r1, #0
 800ed24:	d102      	bne.n	800ed2c <sbrk_aligned+0x14>
 800ed26:	f000 fcff 	bl	800f728 <_sbrk_r>
 800ed2a:	6030      	str	r0, [r6, #0]
 800ed2c:	0029      	movs	r1, r5
 800ed2e:	0020      	movs	r0, r4
 800ed30:	f000 fcfa 	bl	800f728 <_sbrk_r>
 800ed34:	1c43      	adds	r3, r0, #1
 800ed36:	d103      	bne.n	800ed40 <sbrk_aligned+0x28>
 800ed38:	2501      	movs	r5, #1
 800ed3a:	426d      	negs	r5, r5
 800ed3c:	0028      	movs	r0, r5
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
 800ed40:	2303      	movs	r3, #3
 800ed42:	1cc5      	adds	r5, r0, #3
 800ed44:	439d      	bics	r5, r3
 800ed46:	42a8      	cmp	r0, r5
 800ed48:	d0f8      	beq.n	800ed3c <sbrk_aligned+0x24>
 800ed4a:	1a29      	subs	r1, r5, r0
 800ed4c:	0020      	movs	r0, r4
 800ed4e:	f000 fceb 	bl	800f728 <_sbrk_r>
 800ed52:	3001      	adds	r0, #1
 800ed54:	d1f2      	bne.n	800ed3c <sbrk_aligned+0x24>
 800ed56:	e7ef      	b.n	800ed38 <sbrk_aligned+0x20>
 800ed58:	20001fd0 	.word	0x20001fd0

0800ed5c <_malloc_r>:
 800ed5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed5e:	2203      	movs	r2, #3
 800ed60:	1ccb      	adds	r3, r1, #3
 800ed62:	4393      	bics	r3, r2
 800ed64:	3308      	adds	r3, #8
 800ed66:	0005      	movs	r5, r0
 800ed68:	001f      	movs	r7, r3
 800ed6a:	2b0c      	cmp	r3, #12
 800ed6c:	d234      	bcs.n	800edd8 <_malloc_r+0x7c>
 800ed6e:	270c      	movs	r7, #12
 800ed70:	42b9      	cmp	r1, r7
 800ed72:	d833      	bhi.n	800eddc <_malloc_r+0x80>
 800ed74:	0028      	movs	r0, r5
 800ed76:	f000 f871 	bl	800ee5c <__malloc_lock>
 800ed7a:	4e37      	ldr	r6, [pc, #220]	@ (800ee58 <_malloc_r+0xfc>)
 800ed7c:	6833      	ldr	r3, [r6, #0]
 800ed7e:	001c      	movs	r4, r3
 800ed80:	2c00      	cmp	r4, #0
 800ed82:	d12f      	bne.n	800ede4 <_malloc_r+0x88>
 800ed84:	0039      	movs	r1, r7
 800ed86:	0028      	movs	r0, r5
 800ed88:	f7ff ffc6 	bl	800ed18 <sbrk_aligned>
 800ed8c:	0004      	movs	r4, r0
 800ed8e:	1c43      	adds	r3, r0, #1
 800ed90:	d15f      	bne.n	800ee52 <_malloc_r+0xf6>
 800ed92:	6834      	ldr	r4, [r6, #0]
 800ed94:	9400      	str	r4, [sp, #0]
 800ed96:	9b00      	ldr	r3, [sp, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d14a      	bne.n	800ee32 <_malloc_r+0xd6>
 800ed9c:	2c00      	cmp	r4, #0
 800ed9e:	d052      	beq.n	800ee46 <_malloc_r+0xea>
 800eda0:	6823      	ldr	r3, [r4, #0]
 800eda2:	0028      	movs	r0, r5
 800eda4:	18e3      	adds	r3, r4, r3
 800eda6:	9900      	ldr	r1, [sp, #0]
 800eda8:	9301      	str	r3, [sp, #4]
 800edaa:	f000 fcbd 	bl	800f728 <_sbrk_r>
 800edae:	9b01      	ldr	r3, [sp, #4]
 800edb0:	4283      	cmp	r3, r0
 800edb2:	d148      	bne.n	800ee46 <_malloc_r+0xea>
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	0028      	movs	r0, r5
 800edb8:	1aff      	subs	r7, r7, r3
 800edba:	0039      	movs	r1, r7
 800edbc:	f7ff ffac 	bl	800ed18 <sbrk_aligned>
 800edc0:	3001      	adds	r0, #1
 800edc2:	d040      	beq.n	800ee46 <_malloc_r+0xea>
 800edc4:	6823      	ldr	r3, [r4, #0]
 800edc6:	19db      	adds	r3, r3, r7
 800edc8:	6023      	str	r3, [r4, #0]
 800edca:	6833      	ldr	r3, [r6, #0]
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	2a00      	cmp	r2, #0
 800edd0:	d133      	bne.n	800ee3a <_malloc_r+0xde>
 800edd2:	9b00      	ldr	r3, [sp, #0]
 800edd4:	6033      	str	r3, [r6, #0]
 800edd6:	e019      	b.n	800ee0c <_malloc_r+0xb0>
 800edd8:	2b00      	cmp	r3, #0
 800edda:	dac9      	bge.n	800ed70 <_malloc_r+0x14>
 800eddc:	230c      	movs	r3, #12
 800edde:	602b      	str	r3, [r5, #0]
 800ede0:	2000      	movs	r0, #0
 800ede2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ede4:	6821      	ldr	r1, [r4, #0]
 800ede6:	1bc9      	subs	r1, r1, r7
 800ede8:	d420      	bmi.n	800ee2c <_malloc_r+0xd0>
 800edea:	290b      	cmp	r1, #11
 800edec:	d90a      	bls.n	800ee04 <_malloc_r+0xa8>
 800edee:	19e2      	adds	r2, r4, r7
 800edf0:	6027      	str	r7, [r4, #0]
 800edf2:	42a3      	cmp	r3, r4
 800edf4:	d104      	bne.n	800ee00 <_malloc_r+0xa4>
 800edf6:	6032      	str	r2, [r6, #0]
 800edf8:	6863      	ldr	r3, [r4, #4]
 800edfa:	6011      	str	r1, [r2, #0]
 800edfc:	6053      	str	r3, [r2, #4]
 800edfe:	e005      	b.n	800ee0c <_malloc_r+0xb0>
 800ee00:	605a      	str	r2, [r3, #4]
 800ee02:	e7f9      	b.n	800edf8 <_malloc_r+0x9c>
 800ee04:	6862      	ldr	r2, [r4, #4]
 800ee06:	42a3      	cmp	r3, r4
 800ee08:	d10e      	bne.n	800ee28 <_malloc_r+0xcc>
 800ee0a:	6032      	str	r2, [r6, #0]
 800ee0c:	0028      	movs	r0, r5
 800ee0e:	f000 f82d 	bl	800ee6c <__malloc_unlock>
 800ee12:	0020      	movs	r0, r4
 800ee14:	2207      	movs	r2, #7
 800ee16:	300b      	adds	r0, #11
 800ee18:	1d23      	adds	r3, r4, #4
 800ee1a:	4390      	bics	r0, r2
 800ee1c:	1ac2      	subs	r2, r0, r3
 800ee1e:	4298      	cmp	r0, r3
 800ee20:	d0df      	beq.n	800ede2 <_malloc_r+0x86>
 800ee22:	1a1b      	subs	r3, r3, r0
 800ee24:	50a3      	str	r3, [r4, r2]
 800ee26:	e7dc      	b.n	800ede2 <_malloc_r+0x86>
 800ee28:	605a      	str	r2, [r3, #4]
 800ee2a:	e7ef      	b.n	800ee0c <_malloc_r+0xb0>
 800ee2c:	0023      	movs	r3, r4
 800ee2e:	6864      	ldr	r4, [r4, #4]
 800ee30:	e7a6      	b.n	800ed80 <_malloc_r+0x24>
 800ee32:	9c00      	ldr	r4, [sp, #0]
 800ee34:	6863      	ldr	r3, [r4, #4]
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	e7ad      	b.n	800ed96 <_malloc_r+0x3a>
 800ee3a:	001a      	movs	r2, r3
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	42a3      	cmp	r3, r4
 800ee40:	d1fb      	bne.n	800ee3a <_malloc_r+0xde>
 800ee42:	2300      	movs	r3, #0
 800ee44:	e7da      	b.n	800edfc <_malloc_r+0xa0>
 800ee46:	230c      	movs	r3, #12
 800ee48:	0028      	movs	r0, r5
 800ee4a:	602b      	str	r3, [r5, #0]
 800ee4c:	f000 f80e 	bl	800ee6c <__malloc_unlock>
 800ee50:	e7c6      	b.n	800ede0 <_malloc_r+0x84>
 800ee52:	6007      	str	r7, [r0, #0]
 800ee54:	e7da      	b.n	800ee0c <_malloc_r+0xb0>
 800ee56:	46c0      	nop			@ (mov r8, r8)
 800ee58:	20001fd4 	.word	0x20001fd4

0800ee5c <__malloc_lock>:
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	4802      	ldr	r0, [pc, #8]	@ (800ee68 <__malloc_lock+0xc>)
 800ee60:	f7ff f877 	bl	800df52 <__retarget_lock_acquire_recursive>
 800ee64:	bd10      	pop	{r4, pc}
 800ee66:	46c0      	nop			@ (mov r8, r8)
 800ee68:	20001fcc 	.word	0x20001fcc

0800ee6c <__malloc_unlock>:
 800ee6c:	b510      	push	{r4, lr}
 800ee6e:	4802      	ldr	r0, [pc, #8]	@ (800ee78 <__malloc_unlock+0xc>)
 800ee70:	f7ff f870 	bl	800df54 <__retarget_lock_release_recursive>
 800ee74:	bd10      	pop	{r4, pc}
 800ee76:	46c0      	nop			@ (mov r8, r8)
 800ee78:	20001fcc 	.word	0x20001fcc

0800ee7c <_Balloc>:
 800ee7c:	b570      	push	{r4, r5, r6, lr}
 800ee7e:	69c5      	ldr	r5, [r0, #28]
 800ee80:	0006      	movs	r6, r0
 800ee82:	000c      	movs	r4, r1
 800ee84:	2d00      	cmp	r5, #0
 800ee86:	d10e      	bne.n	800eea6 <_Balloc+0x2a>
 800ee88:	2010      	movs	r0, #16
 800ee8a:	f7ff ff3b 	bl	800ed04 <malloc>
 800ee8e:	1e02      	subs	r2, r0, #0
 800ee90:	61f0      	str	r0, [r6, #28]
 800ee92:	d104      	bne.n	800ee9e <_Balloc+0x22>
 800ee94:	216b      	movs	r1, #107	@ 0x6b
 800ee96:	4b19      	ldr	r3, [pc, #100]	@ (800eefc <_Balloc+0x80>)
 800ee98:	4819      	ldr	r0, [pc, #100]	@ (800ef00 <_Balloc+0x84>)
 800ee9a:	f000 fc61 	bl	800f760 <__assert_func>
 800ee9e:	6045      	str	r5, [r0, #4]
 800eea0:	6085      	str	r5, [r0, #8]
 800eea2:	6005      	str	r5, [r0, #0]
 800eea4:	60c5      	str	r5, [r0, #12]
 800eea6:	69f5      	ldr	r5, [r6, #28]
 800eea8:	68eb      	ldr	r3, [r5, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d013      	beq.n	800eed6 <_Balloc+0x5a>
 800eeae:	69f3      	ldr	r3, [r6, #28]
 800eeb0:	00a2      	lsls	r2, r4, #2
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	189b      	adds	r3, r3, r2
 800eeb6:	6818      	ldr	r0, [r3, #0]
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d118      	bne.n	800eeee <_Balloc+0x72>
 800eebc:	2101      	movs	r1, #1
 800eebe:	000d      	movs	r5, r1
 800eec0:	40a5      	lsls	r5, r4
 800eec2:	1d6a      	adds	r2, r5, #5
 800eec4:	0030      	movs	r0, r6
 800eec6:	0092      	lsls	r2, r2, #2
 800eec8:	f000 fc68 	bl	800f79c <_calloc_r>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d00c      	beq.n	800eeea <_Balloc+0x6e>
 800eed0:	6044      	str	r4, [r0, #4]
 800eed2:	6085      	str	r5, [r0, #8]
 800eed4:	e00d      	b.n	800eef2 <_Balloc+0x76>
 800eed6:	2221      	movs	r2, #33	@ 0x21
 800eed8:	2104      	movs	r1, #4
 800eeda:	0030      	movs	r0, r6
 800eedc:	f000 fc5e 	bl	800f79c <_calloc_r>
 800eee0:	69f3      	ldr	r3, [r6, #28]
 800eee2:	60e8      	str	r0, [r5, #12]
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d1e1      	bne.n	800eeae <_Balloc+0x32>
 800eeea:	2000      	movs	r0, #0
 800eeec:	bd70      	pop	{r4, r5, r6, pc}
 800eeee:	6802      	ldr	r2, [r0, #0]
 800eef0:	601a      	str	r2, [r3, #0]
 800eef2:	2300      	movs	r3, #0
 800eef4:	6103      	str	r3, [r0, #16]
 800eef6:	60c3      	str	r3, [r0, #12]
 800eef8:	e7f8      	b.n	800eeec <_Balloc+0x70>
 800eefa:	46c0      	nop			@ (mov r8, r8)
 800eefc:	0800ffe9 	.word	0x0800ffe9
 800ef00:	08010069 	.word	0x08010069

0800ef04 <_Bfree>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	69c6      	ldr	r6, [r0, #28]
 800ef08:	0005      	movs	r5, r0
 800ef0a:	000c      	movs	r4, r1
 800ef0c:	2e00      	cmp	r6, #0
 800ef0e:	d10e      	bne.n	800ef2e <_Bfree+0x2a>
 800ef10:	2010      	movs	r0, #16
 800ef12:	f7ff fef7 	bl	800ed04 <malloc>
 800ef16:	1e02      	subs	r2, r0, #0
 800ef18:	61e8      	str	r0, [r5, #28]
 800ef1a:	d104      	bne.n	800ef26 <_Bfree+0x22>
 800ef1c:	218f      	movs	r1, #143	@ 0x8f
 800ef1e:	4b09      	ldr	r3, [pc, #36]	@ (800ef44 <_Bfree+0x40>)
 800ef20:	4809      	ldr	r0, [pc, #36]	@ (800ef48 <_Bfree+0x44>)
 800ef22:	f000 fc1d 	bl	800f760 <__assert_func>
 800ef26:	6046      	str	r6, [r0, #4]
 800ef28:	6086      	str	r6, [r0, #8]
 800ef2a:	6006      	str	r6, [r0, #0]
 800ef2c:	60c6      	str	r6, [r0, #12]
 800ef2e:	2c00      	cmp	r4, #0
 800ef30:	d007      	beq.n	800ef42 <_Bfree+0x3e>
 800ef32:	69eb      	ldr	r3, [r5, #28]
 800ef34:	6862      	ldr	r2, [r4, #4]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	0092      	lsls	r2, r2, #2
 800ef3a:	189b      	adds	r3, r3, r2
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	6022      	str	r2, [r4, #0]
 800ef40:	601c      	str	r4, [r3, #0]
 800ef42:	bd70      	pop	{r4, r5, r6, pc}
 800ef44:	0800ffe9 	.word	0x0800ffe9
 800ef48:	08010069 	.word	0x08010069

0800ef4c <__multadd>:
 800ef4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef4e:	000f      	movs	r7, r1
 800ef50:	9001      	str	r0, [sp, #4]
 800ef52:	000c      	movs	r4, r1
 800ef54:	001e      	movs	r6, r3
 800ef56:	2000      	movs	r0, #0
 800ef58:	690d      	ldr	r5, [r1, #16]
 800ef5a:	3714      	adds	r7, #20
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	3001      	adds	r0, #1
 800ef60:	b299      	uxth	r1, r3
 800ef62:	4351      	muls	r1, r2
 800ef64:	0c1b      	lsrs	r3, r3, #16
 800ef66:	4353      	muls	r3, r2
 800ef68:	1989      	adds	r1, r1, r6
 800ef6a:	0c0e      	lsrs	r6, r1, #16
 800ef6c:	199b      	adds	r3, r3, r6
 800ef6e:	0c1e      	lsrs	r6, r3, #16
 800ef70:	b289      	uxth	r1, r1
 800ef72:	041b      	lsls	r3, r3, #16
 800ef74:	185b      	adds	r3, r3, r1
 800ef76:	c708      	stmia	r7!, {r3}
 800ef78:	4285      	cmp	r5, r0
 800ef7a:	dcef      	bgt.n	800ef5c <__multadd+0x10>
 800ef7c:	2e00      	cmp	r6, #0
 800ef7e:	d022      	beq.n	800efc6 <__multadd+0x7a>
 800ef80:	68a3      	ldr	r3, [r4, #8]
 800ef82:	42ab      	cmp	r3, r5
 800ef84:	dc19      	bgt.n	800efba <__multadd+0x6e>
 800ef86:	6861      	ldr	r1, [r4, #4]
 800ef88:	9801      	ldr	r0, [sp, #4]
 800ef8a:	3101      	adds	r1, #1
 800ef8c:	f7ff ff76 	bl	800ee7c <_Balloc>
 800ef90:	1e07      	subs	r7, r0, #0
 800ef92:	d105      	bne.n	800efa0 <__multadd+0x54>
 800ef94:	003a      	movs	r2, r7
 800ef96:	21ba      	movs	r1, #186	@ 0xba
 800ef98:	4b0c      	ldr	r3, [pc, #48]	@ (800efcc <__multadd+0x80>)
 800ef9a:	480d      	ldr	r0, [pc, #52]	@ (800efd0 <__multadd+0x84>)
 800ef9c:	f000 fbe0 	bl	800f760 <__assert_func>
 800efa0:	0021      	movs	r1, r4
 800efa2:	6922      	ldr	r2, [r4, #16]
 800efa4:	310c      	adds	r1, #12
 800efa6:	3202      	adds	r2, #2
 800efa8:	0092      	lsls	r2, r2, #2
 800efaa:	300c      	adds	r0, #12
 800efac:	f000 fbce 	bl	800f74c <memcpy>
 800efb0:	0021      	movs	r1, r4
 800efb2:	9801      	ldr	r0, [sp, #4]
 800efb4:	f7ff ffa6 	bl	800ef04 <_Bfree>
 800efb8:	003c      	movs	r4, r7
 800efba:	1d2b      	adds	r3, r5, #4
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	18e3      	adds	r3, r4, r3
 800efc0:	3501      	adds	r5, #1
 800efc2:	605e      	str	r6, [r3, #4]
 800efc4:	6125      	str	r5, [r4, #16]
 800efc6:	0020      	movs	r0, r4
 800efc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800efca:	46c0      	nop			@ (mov r8, r8)
 800efcc:	08010058 	.word	0x08010058
 800efd0:	08010069 	.word	0x08010069

0800efd4 <__hi0bits>:
 800efd4:	2280      	movs	r2, #128	@ 0x80
 800efd6:	0003      	movs	r3, r0
 800efd8:	0252      	lsls	r2, r2, #9
 800efda:	2000      	movs	r0, #0
 800efdc:	4293      	cmp	r3, r2
 800efde:	d201      	bcs.n	800efe4 <__hi0bits+0x10>
 800efe0:	041b      	lsls	r3, r3, #16
 800efe2:	3010      	adds	r0, #16
 800efe4:	2280      	movs	r2, #128	@ 0x80
 800efe6:	0452      	lsls	r2, r2, #17
 800efe8:	4293      	cmp	r3, r2
 800efea:	d201      	bcs.n	800eff0 <__hi0bits+0x1c>
 800efec:	3008      	adds	r0, #8
 800efee:	021b      	lsls	r3, r3, #8
 800eff0:	2280      	movs	r2, #128	@ 0x80
 800eff2:	0552      	lsls	r2, r2, #21
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d201      	bcs.n	800effc <__hi0bits+0x28>
 800eff8:	3004      	adds	r0, #4
 800effa:	011b      	lsls	r3, r3, #4
 800effc:	2280      	movs	r2, #128	@ 0x80
 800effe:	05d2      	lsls	r2, r2, #23
 800f000:	4293      	cmp	r3, r2
 800f002:	d201      	bcs.n	800f008 <__hi0bits+0x34>
 800f004:	3002      	adds	r0, #2
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	2b00      	cmp	r3, #0
 800f00a:	db03      	blt.n	800f014 <__hi0bits+0x40>
 800f00c:	3001      	adds	r0, #1
 800f00e:	4213      	tst	r3, r2
 800f010:	d100      	bne.n	800f014 <__hi0bits+0x40>
 800f012:	2020      	movs	r0, #32
 800f014:	4770      	bx	lr

0800f016 <__lo0bits>:
 800f016:	6803      	ldr	r3, [r0, #0]
 800f018:	0001      	movs	r1, r0
 800f01a:	2207      	movs	r2, #7
 800f01c:	0018      	movs	r0, r3
 800f01e:	4010      	ands	r0, r2
 800f020:	4213      	tst	r3, r2
 800f022:	d00d      	beq.n	800f040 <__lo0bits+0x2a>
 800f024:	3a06      	subs	r2, #6
 800f026:	2000      	movs	r0, #0
 800f028:	4213      	tst	r3, r2
 800f02a:	d105      	bne.n	800f038 <__lo0bits+0x22>
 800f02c:	3002      	adds	r0, #2
 800f02e:	4203      	tst	r3, r0
 800f030:	d003      	beq.n	800f03a <__lo0bits+0x24>
 800f032:	40d3      	lsrs	r3, r2
 800f034:	0010      	movs	r0, r2
 800f036:	600b      	str	r3, [r1, #0]
 800f038:	4770      	bx	lr
 800f03a:	089b      	lsrs	r3, r3, #2
 800f03c:	600b      	str	r3, [r1, #0]
 800f03e:	e7fb      	b.n	800f038 <__lo0bits+0x22>
 800f040:	b29a      	uxth	r2, r3
 800f042:	2a00      	cmp	r2, #0
 800f044:	d101      	bne.n	800f04a <__lo0bits+0x34>
 800f046:	2010      	movs	r0, #16
 800f048:	0c1b      	lsrs	r3, r3, #16
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	2a00      	cmp	r2, #0
 800f04e:	d101      	bne.n	800f054 <__lo0bits+0x3e>
 800f050:	3008      	adds	r0, #8
 800f052:	0a1b      	lsrs	r3, r3, #8
 800f054:	071a      	lsls	r2, r3, #28
 800f056:	d101      	bne.n	800f05c <__lo0bits+0x46>
 800f058:	3004      	adds	r0, #4
 800f05a:	091b      	lsrs	r3, r3, #4
 800f05c:	079a      	lsls	r2, r3, #30
 800f05e:	d101      	bne.n	800f064 <__lo0bits+0x4e>
 800f060:	3002      	adds	r0, #2
 800f062:	089b      	lsrs	r3, r3, #2
 800f064:	07da      	lsls	r2, r3, #31
 800f066:	d4e9      	bmi.n	800f03c <__lo0bits+0x26>
 800f068:	3001      	adds	r0, #1
 800f06a:	085b      	lsrs	r3, r3, #1
 800f06c:	d1e6      	bne.n	800f03c <__lo0bits+0x26>
 800f06e:	2020      	movs	r0, #32
 800f070:	e7e2      	b.n	800f038 <__lo0bits+0x22>
	...

0800f074 <__i2b>:
 800f074:	b510      	push	{r4, lr}
 800f076:	000c      	movs	r4, r1
 800f078:	2101      	movs	r1, #1
 800f07a:	f7ff feff 	bl	800ee7c <_Balloc>
 800f07e:	2800      	cmp	r0, #0
 800f080:	d107      	bne.n	800f092 <__i2b+0x1e>
 800f082:	2146      	movs	r1, #70	@ 0x46
 800f084:	4c05      	ldr	r4, [pc, #20]	@ (800f09c <__i2b+0x28>)
 800f086:	0002      	movs	r2, r0
 800f088:	4b05      	ldr	r3, [pc, #20]	@ (800f0a0 <__i2b+0x2c>)
 800f08a:	0020      	movs	r0, r4
 800f08c:	31ff      	adds	r1, #255	@ 0xff
 800f08e:	f000 fb67 	bl	800f760 <__assert_func>
 800f092:	2301      	movs	r3, #1
 800f094:	6144      	str	r4, [r0, #20]
 800f096:	6103      	str	r3, [r0, #16]
 800f098:	bd10      	pop	{r4, pc}
 800f09a:	46c0      	nop			@ (mov r8, r8)
 800f09c:	08010069 	.word	0x08010069
 800f0a0:	08010058 	.word	0x08010058

0800f0a4 <__multiply>:
 800f0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0a6:	0014      	movs	r4, r2
 800f0a8:	690a      	ldr	r2, [r1, #16]
 800f0aa:	6923      	ldr	r3, [r4, #16]
 800f0ac:	000d      	movs	r5, r1
 800f0ae:	b08b      	sub	sp, #44	@ 0x2c
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	db02      	blt.n	800f0ba <__multiply+0x16>
 800f0b4:	0023      	movs	r3, r4
 800f0b6:	000c      	movs	r4, r1
 800f0b8:	001d      	movs	r5, r3
 800f0ba:	6927      	ldr	r7, [r4, #16]
 800f0bc:	692e      	ldr	r6, [r5, #16]
 800f0be:	6861      	ldr	r1, [r4, #4]
 800f0c0:	19bb      	adds	r3, r7, r6
 800f0c2:	9303      	str	r3, [sp, #12]
 800f0c4:	68a3      	ldr	r3, [r4, #8]
 800f0c6:	19ba      	adds	r2, r7, r6
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	da00      	bge.n	800f0ce <__multiply+0x2a>
 800f0cc:	3101      	adds	r1, #1
 800f0ce:	f7ff fed5 	bl	800ee7c <_Balloc>
 800f0d2:	9002      	str	r0, [sp, #8]
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d106      	bne.n	800f0e6 <__multiply+0x42>
 800f0d8:	21b1      	movs	r1, #177	@ 0xb1
 800f0da:	4b49      	ldr	r3, [pc, #292]	@ (800f200 <__multiply+0x15c>)
 800f0dc:	4849      	ldr	r0, [pc, #292]	@ (800f204 <__multiply+0x160>)
 800f0de:	9a02      	ldr	r2, [sp, #8]
 800f0e0:	0049      	lsls	r1, r1, #1
 800f0e2:	f000 fb3d 	bl	800f760 <__assert_func>
 800f0e6:	9b02      	ldr	r3, [sp, #8]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	3314      	adds	r3, #20
 800f0ec:	469c      	mov	ip, r3
 800f0ee:	19bb      	adds	r3, r7, r6
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	4463      	add	r3, ip
 800f0f4:	9304      	str	r3, [sp, #16]
 800f0f6:	4663      	mov	r3, ip
 800f0f8:	9904      	ldr	r1, [sp, #16]
 800f0fa:	428b      	cmp	r3, r1
 800f0fc:	d32a      	bcc.n	800f154 <__multiply+0xb0>
 800f0fe:	0023      	movs	r3, r4
 800f100:	00bf      	lsls	r7, r7, #2
 800f102:	3314      	adds	r3, #20
 800f104:	3514      	adds	r5, #20
 800f106:	9308      	str	r3, [sp, #32]
 800f108:	00b6      	lsls	r6, r6, #2
 800f10a:	19db      	adds	r3, r3, r7
 800f10c:	9305      	str	r3, [sp, #20]
 800f10e:	19ab      	adds	r3, r5, r6
 800f110:	9309      	str	r3, [sp, #36]	@ 0x24
 800f112:	2304      	movs	r3, #4
 800f114:	9306      	str	r3, [sp, #24]
 800f116:	0023      	movs	r3, r4
 800f118:	9a05      	ldr	r2, [sp, #20]
 800f11a:	3315      	adds	r3, #21
 800f11c:	9501      	str	r5, [sp, #4]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d305      	bcc.n	800f12e <__multiply+0x8a>
 800f122:	1b13      	subs	r3, r2, r4
 800f124:	3b15      	subs	r3, #21
 800f126:	089b      	lsrs	r3, r3, #2
 800f128:	3301      	adds	r3, #1
 800f12a:	009b      	lsls	r3, r3, #2
 800f12c:	9306      	str	r3, [sp, #24]
 800f12e:	9b01      	ldr	r3, [sp, #4]
 800f130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f132:	4293      	cmp	r3, r2
 800f134:	d310      	bcc.n	800f158 <__multiply+0xb4>
 800f136:	9b03      	ldr	r3, [sp, #12]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	dd05      	ble.n	800f148 <__multiply+0xa4>
 800f13c:	9b04      	ldr	r3, [sp, #16]
 800f13e:	3b04      	subs	r3, #4
 800f140:	9304      	str	r3, [sp, #16]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d056      	beq.n	800f1f6 <__multiply+0x152>
 800f148:	9b02      	ldr	r3, [sp, #8]
 800f14a:	9a03      	ldr	r2, [sp, #12]
 800f14c:	0018      	movs	r0, r3
 800f14e:	611a      	str	r2, [r3, #16]
 800f150:	b00b      	add	sp, #44	@ 0x2c
 800f152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f154:	c304      	stmia	r3!, {r2}
 800f156:	e7cf      	b.n	800f0f8 <__multiply+0x54>
 800f158:	9b01      	ldr	r3, [sp, #4]
 800f15a:	6818      	ldr	r0, [r3, #0]
 800f15c:	b280      	uxth	r0, r0
 800f15e:	2800      	cmp	r0, #0
 800f160:	d01e      	beq.n	800f1a0 <__multiply+0xfc>
 800f162:	4667      	mov	r7, ip
 800f164:	2500      	movs	r5, #0
 800f166:	9e08      	ldr	r6, [sp, #32]
 800f168:	ce02      	ldmia	r6!, {r1}
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	9307      	str	r3, [sp, #28]
 800f16e:	b28b      	uxth	r3, r1
 800f170:	4343      	muls	r3, r0
 800f172:	001a      	movs	r2, r3
 800f174:	466b      	mov	r3, sp
 800f176:	0c09      	lsrs	r1, r1, #16
 800f178:	8b9b      	ldrh	r3, [r3, #28]
 800f17a:	4341      	muls	r1, r0
 800f17c:	18d3      	adds	r3, r2, r3
 800f17e:	9a07      	ldr	r2, [sp, #28]
 800f180:	195b      	adds	r3, r3, r5
 800f182:	0c12      	lsrs	r2, r2, #16
 800f184:	1889      	adds	r1, r1, r2
 800f186:	0c1a      	lsrs	r2, r3, #16
 800f188:	188a      	adds	r2, r1, r2
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	0c15      	lsrs	r5, r2, #16
 800f18e:	0412      	lsls	r2, r2, #16
 800f190:	431a      	orrs	r2, r3
 800f192:	9b05      	ldr	r3, [sp, #20]
 800f194:	c704      	stmia	r7!, {r2}
 800f196:	42b3      	cmp	r3, r6
 800f198:	d8e6      	bhi.n	800f168 <__multiply+0xc4>
 800f19a:	4663      	mov	r3, ip
 800f19c:	9a06      	ldr	r2, [sp, #24]
 800f19e:	509d      	str	r5, [r3, r2]
 800f1a0:	9b01      	ldr	r3, [sp, #4]
 800f1a2:	6818      	ldr	r0, [r3, #0]
 800f1a4:	0c00      	lsrs	r0, r0, #16
 800f1a6:	d020      	beq.n	800f1ea <__multiply+0x146>
 800f1a8:	4663      	mov	r3, ip
 800f1aa:	0025      	movs	r5, r4
 800f1ac:	4661      	mov	r1, ip
 800f1ae:	2700      	movs	r7, #0
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	3514      	adds	r5, #20
 800f1b4:	682a      	ldr	r2, [r5, #0]
 800f1b6:	680e      	ldr	r6, [r1, #0]
 800f1b8:	b292      	uxth	r2, r2
 800f1ba:	4342      	muls	r2, r0
 800f1bc:	0c36      	lsrs	r6, r6, #16
 800f1be:	1992      	adds	r2, r2, r6
 800f1c0:	19d2      	adds	r2, r2, r7
 800f1c2:	0416      	lsls	r6, r2, #16
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	431e      	orrs	r6, r3
 800f1c8:	600e      	str	r6, [r1, #0]
 800f1ca:	cd40      	ldmia	r5!, {r6}
 800f1cc:	684b      	ldr	r3, [r1, #4]
 800f1ce:	0c36      	lsrs	r6, r6, #16
 800f1d0:	4346      	muls	r6, r0
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	0c12      	lsrs	r2, r2, #16
 800f1d6:	18f3      	adds	r3, r6, r3
 800f1d8:	189b      	adds	r3, r3, r2
 800f1da:	9a05      	ldr	r2, [sp, #20]
 800f1dc:	0c1f      	lsrs	r7, r3, #16
 800f1de:	3104      	adds	r1, #4
 800f1e0:	42aa      	cmp	r2, r5
 800f1e2:	d8e7      	bhi.n	800f1b4 <__multiply+0x110>
 800f1e4:	4662      	mov	r2, ip
 800f1e6:	9906      	ldr	r1, [sp, #24]
 800f1e8:	5053      	str	r3, [r2, r1]
 800f1ea:	9b01      	ldr	r3, [sp, #4]
 800f1ec:	3304      	adds	r3, #4
 800f1ee:	9301      	str	r3, [sp, #4]
 800f1f0:	2304      	movs	r3, #4
 800f1f2:	449c      	add	ip, r3
 800f1f4:	e79b      	b.n	800f12e <__multiply+0x8a>
 800f1f6:	9b03      	ldr	r3, [sp, #12]
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	9303      	str	r3, [sp, #12]
 800f1fc:	e79b      	b.n	800f136 <__multiply+0x92>
 800f1fe:	46c0      	nop			@ (mov r8, r8)
 800f200:	08010058 	.word	0x08010058
 800f204:	08010069 	.word	0x08010069

0800f208 <__pow5mult>:
 800f208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f20a:	2303      	movs	r3, #3
 800f20c:	0015      	movs	r5, r2
 800f20e:	0007      	movs	r7, r0
 800f210:	000e      	movs	r6, r1
 800f212:	401a      	ands	r2, r3
 800f214:	421d      	tst	r5, r3
 800f216:	d008      	beq.n	800f22a <__pow5mult+0x22>
 800f218:	4925      	ldr	r1, [pc, #148]	@ (800f2b0 <__pow5mult+0xa8>)
 800f21a:	3a01      	subs	r2, #1
 800f21c:	0092      	lsls	r2, r2, #2
 800f21e:	5852      	ldr	r2, [r2, r1]
 800f220:	2300      	movs	r3, #0
 800f222:	0031      	movs	r1, r6
 800f224:	f7ff fe92 	bl	800ef4c <__multadd>
 800f228:	0006      	movs	r6, r0
 800f22a:	10ad      	asrs	r5, r5, #2
 800f22c:	d03d      	beq.n	800f2aa <__pow5mult+0xa2>
 800f22e:	69fc      	ldr	r4, [r7, #28]
 800f230:	2c00      	cmp	r4, #0
 800f232:	d10f      	bne.n	800f254 <__pow5mult+0x4c>
 800f234:	2010      	movs	r0, #16
 800f236:	f7ff fd65 	bl	800ed04 <malloc>
 800f23a:	1e02      	subs	r2, r0, #0
 800f23c:	61f8      	str	r0, [r7, #28]
 800f23e:	d105      	bne.n	800f24c <__pow5mult+0x44>
 800f240:	21b4      	movs	r1, #180	@ 0xb4
 800f242:	4b1c      	ldr	r3, [pc, #112]	@ (800f2b4 <__pow5mult+0xac>)
 800f244:	481c      	ldr	r0, [pc, #112]	@ (800f2b8 <__pow5mult+0xb0>)
 800f246:	31ff      	adds	r1, #255	@ 0xff
 800f248:	f000 fa8a 	bl	800f760 <__assert_func>
 800f24c:	6044      	str	r4, [r0, #4]
 800f24e:	6084      	str	r4, [r0, #8]
 800f250:	6004      	str	r4, [r0, #0]
 800f252:	60c4      	str	r4, [r0, #12]
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	689c      	ldr	r4, [r3, #8]
 800f258:	9301      	str	r3, [sp, #4]
 800f25a:	2c00      	cmp	r4, #0
 800f25c:	d108      	bne.n	800f270 <__pow5mult+0x68>
 800f25e:	0038      	movs	r0, r7
 800f260:	4916      	ldr	r1, [pc, #88]	@ (800f2bc <__pow5mult+0xb4>)
 800f262:	f7ff ff07 	bl	800f074 <__i2b>
 800f266:	9b01      	ldr	r3, [sp, #4]
 800f268:	0004      	movs	r4, r0
 800f26a:	6098      	str	r0, [r3, #8]
 800f26c:	2300      	movs	r3, #0
 800f26e:	6003      	str	r3, [r0, #0]
 800f270:	2301      	movs	r3, #1
 800f272:	421d      	tst	r5, r3
 800f274:	d00a      	beq.n	800f28c <__pow5mult+0x84>
 800f276:	0031      	movs	r1, r6
 800f278:	0022      	movs	r2, r4
 800f27a:	0038      	movs	r0, r7
 800f27c:	f7ff ff12 	bl	800f0a4 <__multiply>
 800f280:	0031      	movs	r1, r6
 800f282:	9001      	str	r0, [sp, #4]
 800f284:	0038      	movs	r0, r7
 800f286:	f7ff fe3d 	bl	800ef04 <_Bfree>
 800f28a:	9e01      	ldr	r6, [sp, #4]
 800f28c:	106d      	asrs	r5, r5, #1
 800f28e:	d00c      	beq.n	800f2aa <__pow5mult+0xa2>
 800f290:	6820      	ldr	r0, [r4, #0]
 800f292:	2800      	cmp	r0, #0
 800f294:	d107      	bne.n	800f2a6 <__pow5mult+0x9e>
 800f296:	0022      	movs	r2, r4
 800f298:	0021      	movs	r1, r4
 800f29a:	0038      	movs	r0, r7
 800f29c:	f7ff ff02 	bl	800f0a4 <__multiply>
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	6020      	str	r0, [r4, #0]
 800f2a4:	6003      	str	r3, [r0, #0]
 800f2a6:	0004      	movs	r4, r0
 800f2a8:	e7e2      	b.n	800f270 <__pow5mult+0x68>
 800f2aa:	0030      	movs	r0, r6
 800f2ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f2ae:	46c0      	nop			@ (mov r8, r8)
 800f2b0:	080100c4 	.word	0x080100c4
 800f2b4:	0800ffe9 	.word	0x0800ffe9
 800f2b8:	08010069 	.word	0x08010069
 800f2bc:	00000271 	.word	0x00000271

0800f2c0 <__lshift>:
 800f2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2c2:	000c      	movs	r4, r1
 800f2c4:	0016      	movs	r6, r2
 800f2c6:	6923      	ldr	r3, [r4, #16]
 800f2c8:	1157      	asrs	r7, r2, #5
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	18fb      	adds	r3, r7, r3
 800f2ce:	9301      	str	r3, [sp, #4]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	6849      	ldr	r1, [r1, #4]
 800f2d6:	68a3      	ldr	r3, [r4, #8]
 800f2d8:	9002      	str	r0, [sp, #8]
 800f2da:	9a00      	ldr	r2, [sp, #0]
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	db10      	blt.n	800f302 <__lshift+0x42>
 800f2e0:	9802      	ldr	r0, [sp, #8]
 800f2e2:	f7ff fdcb 	bl	800ee7c <_Balloc>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	0001      	movs	r1, r0
 800f2ea:	0005      	movs	r5, r0
 800f2ec:	001a      	movs	r2, r3
 800f2ee:	3114      	adds	r1, #20
 800f2f0:	4298      	cmp	r0, r3
 800f2f2:	d10c      	bne.n	800f30e <__lshift+0x4e>
 800f2f4:	21ef      	movs	r1, #239	@ 0xef
 800f2f6:	002a      	movs	r2, r5
 800f2f8:	4b25      	ldr	r3, [pc, #148]	@ (800f390 <__lshift+0xd0>)
 800f2fa:	4826      	ldr	r0, [pc, #152]	@ (800f394 <__lshift+0xd4>)
 800f2fc:	0049      	lsls	r1, r1, #1
 800f2fe:	f000 fa2f 	bl	800f760 <__assert_func>
 800f302:	3101      	adds	r1, #1
 800f304:	005b      	lsls	r3, r3, #1
 800f306:	e7e8      	b.n	800f2da <__lshift+0x1a>
 800f308:	0098      	lsls	r0, r3, #2
 800f30a:	500a      	str	r2, [r1, r0]
 800f30c:	3301      	adds	r3, #1
 800f30e:	42bb      	cmp	r3, r7
 800f310:	dbfa      	blt.n	800f308 <__lshift+0x48>
 800f312:	43fb      	mvns	r3, r7
 800f314:	17db      	asrs	r3, r3, #31
 800f316:	401f      	ands	r7, r3
 800f318:	00bf      	lsls	r7, r7, #2
 800f31a:	0023      	movs	r3, r4
 800f31c:	201f      	movs	r0, #31
 800f31e:	19c9      	adds	r1, r1, r7
 800f320:	0037      	movs	r7, r6
 800f322:	6922      	ldr	r2, [r4, #16]
 800f324:	3314      	adds	r3, #20
 800f326:	0092      	lsls	r2, r2, #2
 800f328:	189a      	adds	r2, r3, r2
 800f32a:	4007      	ands	r7, r0
 800f32c:	4206      	tst	r6, r0
 800f32e:	d029      	beq.n	800f384 <__lshift+0xc4>
 800f330:	3001      	adds	r0, #1
 800f332:	1bc0      	subs	r0, r0, r7
 800f334:	9003      	str	r0, [sp, #12]
 800f336:	468c      	mov	ip, r1
 800f338:	2000      	movs	r0, #0
 800f33a:	681e      	ldr	r6, [r3, #0]
 800f33c:	40be      	lsls	r6, r7
 800f33e:	4306      	orrs	r6, r0
 800f340:	4660      	mov	r0, ip
 800f342:	c040      	stmia	r0!, {r6}
 800f344:	4684      	mov	ip, r0
 800f346:	9e03      	ldr	r6, [sp, #12]
 800f348:	cb01      	ldmia	r3!, {r0}
 800f34a:	40f0      	lsrs	r0, r6
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d8f4      	bhi.n	800f33a <__lshift+0x7a>
 800f350:	0026      	movs	r6, r4
 800f352:	3615      	adds	r6, #21
 800f354:	2304      	movs	r3, #4
 800f356:	42b2      	cmp	r2, r6
 800f358:	d304      	bcc.n	800f364 <__lshift+0xa4>
 800f35a:	1b13      	subs	r3, r2, r4
 800f35c:	3b15      	subs	r3, #21
 800f35e:	089b      	lsrs	r3, r3, #2
 800f360:	3301      	adds	r3, #1
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	50c8      	str	r0, [r1, r3]
 800f366:	2800      	cmp	r0, #0
 800f368:	d002      	beq.n	800f370 <__lshift+0xb0>
 800f36a:	9b01      	ldr	r3, [sp, #4]
 800f36c:	3302      	adds	r3, #2
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	9b00      	ldr	r3, [sp, #0]
 800f372:	9802      	ldr	r0, [sp, #8]
 800f374:	3b01      	subs	r3, #1
 800f376:	0021      	movs	r1, r4
 800f378:	612b      	str	r3, [r5, #16]
 800f37a:	f7ff fdc3 	bl	800ef04 <_Bfree>
 800f37e:	0028      	movs	r0, r5
 800f380:	b005      	add	sp, #20
 800f382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f384:	cb01      	ldmia	r3!, {r0}
 800f386:	c101      	stmia	r1!, {r0}
 800f388:	429a      	cmp	r2, r3
 800f38a:	d8fb      	bhi.n	800f384 <__lshift+0xc4>
 800f38c:	e7f0      	b.n	800f370 <__lshift+0xb0>
 800f38e:	46c0      	nop			@ (mov r8, r8)
 800f390:	08010058 	.word	0x08010058
 800f394:	08010069 	.word	0x08010069

0800f398 <__mcmp>:
 800f398:	b530      	push	{r4, r5, lr}
 800f39a:	690b      	ldr	r3, [r1, #16]
 800f39c:	6904      	ldr	r4, [r0, #16]
 800f39e:	0002      	movs	r2, r0
 800f3a0:	1ae0      	subs	r0, r4, r3
 800f3a2:	429c      	cmp	r4, r3
 800f3a4:	d10f      	bne.n	800f3c6 <__mcmp+0x2e>
 800f3a6:	3214      	adds	r2, #20
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	3114      	adds	r1, #20
 800f3ac:	0014      	movs	r4, r2
 800f3ae:	18c9      	adds	r1, r1, r3
 800f3b0:	18d2      	adds	r2, r2, r3
 800f3b2:	3a04      	subs	r2, #4
 800f3b4:	3904      	subs	r1, #4
 800f3b6:	6815      	ldr	r5, [r2, #0]
 800f3b8:	680b      	ldr	r3, [r1, #0]
 800f3ba:	429d      	cmp	r5, r3
 800f3bc:	d004      	beq.n	800f3c8 <__mcmp+0x30>
 800f3be:	2001      	movs	r0, #1
 800f3c0:	429d      	cmp	r5, r3
 800f3c2:	d200      	bcs.n	800f3c6 <__mcmp+0x2e>
 800f3c4:	3802      	subs	r0, #2
 800f3c6:	bd30      	pop	{r4, r5, pc}
 800f3c8:	4294      	cmp	r4, r2
 800f3ca:	d3f2      	bcc.n	800f3b2 <__mcmp+0x1a>
 800f3cc:	e7fb      	b.n	800f3c6 <__mcmp+0x2e>
	...

0800f3d0 <__mdiff>:
 800f3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3d2:	000c      	movs	r4, r1
 800f3d4:	b087      	sub	sp, #28
 800f3d6:	9000      	str	r0, [sp, #0]
 800f3d8:	0011      	movs	r1, r2
 800f3da:	0020      	movs	r0, r4
 800f3dc:	0017      	movs	r7, r2
 800f3de:	f7ff ffdb 	bl	800f398 <__mcmp>
 800f3e2:	1e05      	subs	r5, r0, #0
 800f3e4:	d110      	bne.n	800f408 <__mdiff+0x38>
 800f3e6:	0001      	movs	r1, r0
 800f3e8:	9800      	ldr	r0, [sp, #0]
 800f3ea:	f7ff fd47 	bl	800ee7c <_Balloc>
 800f3ee:	1e02      	subs	r2, r0, #0
 800f3f0:	d104      	bne.n	800f3fc <__mdiff+0x2c>
 800f3f2:	4b40      	ldr	r3, [pc, #256]	@ (800f4f4 <__mdiff+0x124>)
 800f3f4:	4840      	ldr	r0, [pc, #256]	@ (800f4f8 <__mdiff+0x128>)
 800f3f6:	4941      	ldr	r1, [pc, #260]	@ (800f4fc <__mdiff+0x12c>)
 800f3f8:	f000 f9b2 	bl	800f760 <__assert_func>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	6145      	str	r5, [r0, #20]
 800f400:	6103      	str	r3, [r0, #16]
 800f402:	0010      	movs	r0, r2
 800f404:	b007      	add	sp, #28
 800f406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f408:	2600      	movs	r6, #0
 800f40a:	42b0      	cmp	r0, r6
 800f40c:	da03      	bge.n	800f416 <__mdiff+0x46>
 800f40e:	0023      	movs	r3, r4
 800f410:	003c      	movs	r4, r7
 800f412:	001f      	movs	r7, r3
 800f414:	3601      	adds	r6, #1
 800f416:	6861      	ldr	r1, [r4, #4]
 800f418:	9800      	ldr	r0, [sp, #0]
 800f41a:	f7ff fd2f 	bl	800ee7c <_Balloc>
 800f41e:	1e02      	subs	r2, r0, #0
 800f420:	d103      	bne.n	800f42a <__mdiff+0x5a>
 800f422:	4b34      	ldr	r3, [pc, #208]	@ (800f4f4 <__mdiff+0x124>)
 800f424:	4834      	ldr	r0, [pc, #208]	@ (800f4f8 <__mdiff+0x128>)
 800f426:	4936      	ldr	r1, [pc, #216]	@ (800f500 <__mdiff+0x130>)
 800f428:	e7e6      	b.n	800f3f8 <__mdiff+0x28>
 800f42a:	6923      	ldr	r3, [r4, #16]
 800f42c:	3414      	adds	r4, #20
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	18e3      	adds	r3, r4, r3
 800f434:	0021      	movs	r1, r4
 800f436:	9401      	str	r4, [sp, #4]
 800f438:	003c      	movs	r4, r7
 800f43a:	9302      	str	r3, [sp, #8]
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	3414      	adds	r4, #20
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	18e3      	adds	r3, r4, r3
 800f444:	9303      	str	r3, [sp, #12]
 800f446:	0003      	movs	r3, r0
 800f448:	60c6      	str	r6, [r0, #12]
 800f44a:	468c      	mov	ip, r1
 800f44c:	2000      	movs	r0, #0
 800f44e:	3314      	adds	r3, #20
 800f450:	9304      	str	r3, [sp, #16]
 800f452:	9305      	str	r3, [sp, #20]
 800f454:	4663      	mov	r3, ip
 800f456:	cb20      	ldmia	r3!, {r5}
 800f458:	b2a9      	uxth	r1, r5
 800f45a:	000e      	movs	r6, r1
 800f45c:	469c      	mov	ip, r3
 800f45e:	cc08      	ldmia	r4!, {r3}
 800f460:	0c2d      	lsrs	r5, r5, #16
 800f462:	b299      	uxth	r1, r3
 800f464:	1a71      	subs	r1, r6, r1
 800f466:	1809      	adds	r1, r1, r0
 800f468:	0c1b      	lsrs	r3, r3, #16
 800f46a:	1408      	asrs	r0, r1, #16
 800f46c:	1aeb      	subs	r3, r5, r3
 800f46e:	181b      	adds	r3, r3, r0
 800f470:	1418      	asrs	r0, r3, #16
 800f472:	b289      	uxth	r1, r1
 800f474:	041b      	lsls	r3, r3, #16
 800f476:	4319      	orrs	r1, r3
 800f478:	9b05      	ldr	r3, [sp, #20]
 800f47a:	c302      	stmia	r3!, {r1}
 800f47c:	9305      	str	r3, [sp, #20]
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	42a3      	cmp	r3, r4
 800f482:	d8e7      	bhi.n	800f454 <__mdiff+0x84>
 800f484:	0039      	movs	r1, r7
 800f486:	9c03      	ldr	r4, [sp, #12]
 800f488:	3115      	adds	r1, #21
 800f48a:	2304      	movs	r3, #4
 800f48c:	428c      	cmp	r4, r1
 800f48e:	d304      	bcc.n	800f49a <__mdiff+0xca>
 800f490:	1be3      	subs	r3, r4, r7
 800f492:	3b15      	subs	r3, #21
 800f494:	089b      	lsrs	r3, r3, #2
 800f496:	3301      	adds	r3, #1
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	9901      	ldr	r1, [sp, #4]
 800f49c:	18cd      	adds	r5, r1, r3
 800f49e:	9904      	ldr	r1, [sp, #16]
 800f4a0:	002e      	movs	r6, r5
 800f4a2:	18cb      	adds	r3, r1, r3
 800f4a4:	001f      	movs	r7, r3
 800f4a6:	9902      	ldr	r1, [sp, #8]
 800f4a8:	428e      	cmp	r6, r1
 800f4aa:	d311      	bcc.n	800f4d0 <__mdiff+0x100>
 800f4ac:	9c02      	ldr	r4, [sp, #8]
 800f4ae:	1ee9      	subs	r1, r5, #3
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	428c      	cmp	r4, r1
 800f4b4:	d304      	bcc.n	800f4c0 <__mdiff+0xf0>
 800f4b6:	0021      	movs	r1, r4
 800f4b8:	3103      	adds	r1, #3
 800f4ba:	1b49      	subs	r1, r1, r5
 800f4bc:	0889      	lsrs	r1, r1, #2
 800f4be:	0088      	lsls	r0, r1, #2
 800f4c0:	181b      	adds	r3, r3, r0
 800f4c2:	3b04      	subs	r3, #4
 800f4c4:	6819      	ldr	r1, [r3, #0]
 800f4c6:	2900      	cmp	r1, #0
 800f4c8:	d010      	beq.n	800f4ec <__mdiff+0x11c>
 800f4ca:	9b00      	ldr	r3, [sp, #0]
 800f4cc:	6113      	str	r3, [r2, #16]
 800f4ce:	e798      	b.n	800f402 <__mdiff+0x32>
 800f4d0:	4684      	mov	ip, r0
 800f4d2:	ce02      	ldmia	r6!, {r1}
 800f4d4:	b288      	uxth	r0, r1
 800f4d6:	4460      	add	r0, ip
 800f4d8:	1400      	asrs	r0, r0, #16
 800f4da:	0c0c      	lsrs	r4, r1, #16
 800f4dc:	1904      	adds	r4, r0, r4
 800f4de:	4461      	add	r1, ip
 800f4e0:	1420      	asrs	r0, r4, #16
 800f4e2:	b289      	uxth	r1, r1
 800f4e4:	0424      	lsls	r4, r4, #16
 800f4e6:	4321      	orrs	r1, r4
 800f4e8:	c702      	stmia	r7!, {r1}
 800f4ea:	e7dc      	b.n	800f4a6 <__mdiff+0xd6>
 800f4ec:	9900      	ldr	r1, [sp, #0]
 800f4ee:	3901      	subs	r1, #1
 800f4f0:	9100      	str	r1, [sp, #0]
 800f4f2:	e7e6      	b.n	800f4c2 <__mdiff+0xf2>
 800f4f4:	08010058 	.word	0x08010058
 800f4f8:	08010069 	.word	0x08010069
 800f4fc:	00000237 	.word	0x00000237
 800f500:	00000245 	.word	0x00000245

0800f504 <__d2b>:
 800f504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f506:	2101      	movs	r1, #1
 800f508:	0016      	movs	r6, r2
 800f50a:	001f      	movs	r7, r3
 800f50c:	f7ff fcb6 	bl	800ee7c <_Balloc>
 800f510:	1e04      	subs	r4, r0, #0
 800f512:	d105      	bne.n	800f520 <__d2b+0x1c>
 800f514:	0022      	movs	r2, r4
 800f516:	4b25      	ldr	r3, [pc, #148]	@ (800f5ac <__d2b+0xa8>)
 800f518:	4825      	ldr	r0, [pc, #148]	@ (800f5b0 <__d2b+0xac>)
 800f51a:	4926      	ldr	r1, [pc, #152]	@ (800f5b4 <__d2b+0xb0>)
 800f51c:	f000 f920 	bl	800f760 <__assert_func>
 800f520:	033b      	lsls	r3, r7, #12
 800f522:	007d      	lsls	r5, r7, #1
 800f524:	0b1b      	lsrs	r3, r3, #12
 800f526:	0d6d      	lsrs	r5, r5, #21
 800f528:	d002      	beq.n	800f530 <__d2b+0x2c>
 800f52a:	2280      	movs	r2, #128	@ 0x80
 800f52c:	0352      	lsls	r2, r2, #13
 800f52e:	4313      	orrs	r3, r2
 800f530:	9301      	str	r3, [sp, #4]
 800f532:	2e00      	cmp	r6, #0
 800f534:	d025      	beq.n	800f582 <__d2b+0x7e>
 800f536:	4668      	mov	r0, sp
 800f538:	9600      	str	r6, [sp, #0]
 800f53a:	f7ff fd6c 	bl	800f016 <__lo0bits>
 800f53e:	9b01      	ldr	r3, [sp, #4]
 800f540:	9900      	ldr	r1, [sp, #0]
 800f542:	2800      	cmp	r0, #0
 800f544:	d01b      	beq.n	800f57e <__d2b+0x7a>
 800f546:	2220      	movs	r2, #32
 800f548:	001e      	movs	r6, r3
 800f54a:	1a12      	subs	r2, r2, r0
 800f54c:	4096      	lsls	r6, r2
 800f54e:	0032      	movs	r2, r6
 800f550:	40c3      	lsrs	r3, r0
 800f552:	430a      	orrs	r2, r1
 800f554:	6162      	str	r2, [r4, #20]
 800f556:	9301      	str	r3, [sp, #4]
 800f558:	9e01      	ldr	r6, [sp, #4]
 800f55a:	61a6      	str	r6, [r4, #24]
 800f55c:	1e73      	subs	r3, r6, #1
 800f55e:	419e      	sbcs	r6, r3
 800f560:	3601      	adds	r6, #1
 800f562:	6126      	str	r6, [r4, #16]
 800f564:	2d00      	cmp	r5, #0
 800f566:	d014      	beq.n	800f592 <__d2b+0x8e>
 800f568:	2635      	movs	r6, #53	@ 0x35
 800f56a:	4b13      	ldr	r3, [pc, #76]	@ (800f5b8 <__d2b+0xb4>)
 800f56c:	18ed      	adds	r5, r5, r3
 800f56e:	9b08      	ldr	r3, [sp, #32]
 800f570:	182d      	adds	r5, r5, r0
 800f572:	601d      	str	r5, [r3, #0]
 800f574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f576:	1a36      	subs	r6, r6, r0
 800f578:	601e      	str	r6, [r3, #0]
 800f57a:	0020      	movs	r0, r4
 800f57c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f57e:	6161      	str	r1, [r4, #20]
 800f580:	e7ea      	b.n	800f558 <__d2b+0x54>
 800f582:	a801      	add	r0, sp, #4
 800f584:	f7ff fd47 	bl	800f016 <__lo0bits>
 800f588:	9b01      	ldr	r3, [sp, #4]
 800f58a:	2601      	movs	r6, #1
 800f58c:	6163      	str	r3, [r4, #20]
 800f58e:	3020      	adds	r0, #32
 800f590:	e7e7      	b.n	800f562 <__d2b+0x5e>
 800f592:	4b0a      	ldr	r3, [pc, #40]	@ (800f5bc <__d2b+0xb8>)
 800f594:	18c0      	adds	r0, r0, r3
 800f596:	9b08      	ldr	r3, [sp, #32]
 800f598:	6018      	str	r0, [r3, #0]
 800f59a:	4b09      	ldr	r3, [pc, #36]	@ (800f5c0 <__d2b+0xbc>)
 800f59c:	18f3      	adds	r3, r6, r3
 800f59e:	009b      	lsls	r3, r3, #2
 800f5a0:	18e3      	adds	r3, r4, r3
 800f5a2:	6958      	ldr	r0, [r3, #20]
 800f5a4:	f7ff fd16 	bl	800efd4 <__hi0bits>
 800f5a8:	0176      	lsls	r6, r6, #5
 800f5aa:	e7e3      	b.n	800f574 <__d2b+0x70>
 800f5ac:	08010058 	.word	0x08010058
 800f5b0:	08010069 	.word	0x08010069
 800f5b4:	0000030f 	.word	0x0000030f
 800f5b8:	fffffbcd 	.word	0xfffffbcd
 800f5bc:	fffffbce 	.word	0xfffffbce
 800f5c0:	3fffffff 	.word	0x3fffffff

0800f5c4 <__sflush_r>:
 800f5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5c6:	220c      	movs	r2, #12
 800f5c8:	5e8b      	ldrsh	r3, [r1, r2]
 800f5ca:	0005      	movs	r5, r0
 800f5cc:	000c      	movs	r4, r1
 800f5ce:	071a      	lsls	r2, r3, #28
 800f5d0:	d456      	bmi.n	800f680 <__sflush_r+0xbc>
 800f5d2:	684a      	ldr	r2, [r1, #4]
 800f5d4:	2a00      	cmp	r2, #0
 800f5d6:	dc02      	bgt.n	800f5de <__sflush_r+0x1a>
 800f5d8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f5da:	2a00      	cmp	r2, #0
 800f5dc:	dd4e      	ble.n	800f67c <__sflush_r+0xb8>
 800f5de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f5e0:	2f00      	cmp	r7, #0
 800f5e2:	d04b      	beq.n	800f67c <__sflush_r+0xb8>
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	2080      	movs	r0, #128	@ 0x80
 800f5e8:	682e      	ldr	r6, [r5, #0]
 800f5ea:	602a      	str	r2, [r5, #0]
 800f5ec:	001a      	movs	r2, r3
 800f5ee:	0140      	lsls	r0, r0, #5
 800f5f0:	6a21      	ldr	r1, [r4, #32]
 800f5f2:	4002      	ands	r2, r0
 800f5f4:	4203      	tst	r3, r0
 800f5f6:	d033      	beq.n	800f660 <__sflush_r+0x9c>
 800f5f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5fa:	89a3      	ldrh	r3, [r4, #12]
 800f5fc:	075b      	lsls	r3, r3, #29
 800f5fe:	d506      	bpl.n	800f60e <__sflush_r+0x4a>
 800f600:	6863      	ldr	r3, [r4, #4]
 800f602:	1ad2      	subs	r2, r2, r3
 800f604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f606:	2b00      	cmp	r3, #0
 800f608:	d001      	beq.n	800f60e <__sflush_r+0x4a>
 800f60a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f60c:	1ad2      	subs	r2, r2, r3
 800f60e:	2300      	movs	r3, #0
 800f610:	0028      	movs	r0, r5
 800f612:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f614:	6a21      	ldr	r1, [r4, #32]
 800f616:	47b8      	blx	r7
 800f618:	89a2      	ldrh	r2, [r4, #12]
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	d106      	bne.n	800f62c <__sflush_r+0x68>
 800f61e:	6829      	ldr	r1, [r5, #0]
 800f620:	291d      	cmp	r1, #29
 800f622:	d846      	bhi.n	800f6b2 <__sflush_r+0xee>
 800f624:	4b29      	ldr	r3, [pc, #164]	@ (800f6cc <__sflush_r+0x108>)
 800f626:	410b      	asrs	r3, r1
 800f628:	07db      	lsls	r3, r3, #31
 800f62a:	d442      	bmi.n	800f6b2 <__sflush_r+0xee>
 800f62c:	2300      	movs	r3, #0
 800f62e:	6063      	str	r3, [r4, #4]
 800f630:	6923      	ldr	r3, [r4, #16]
 800f632:	6023      	str	r3, [r4, #0]
 800f634:	04d2      	lsls	r2, r2, #19
 800f636:	d505      	bpl.n	800f644 <__sflush_r+0x80>
 800f638:	1c43      	adds	r3, r0, #1
 800f63a:	d102      	bne.n	800f642 <__sflush_r+0x7e>
 800f63c:	682b      	ldr	r3, [r5, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d100      	bne.n	800f644 <__sflush_r+0x80>
 800f642:	6560      	str	r0, [r4, #84]	@ 0x54
 800f644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f646:	602e      	str	r6, [r5, #0]
 800f648:	2900      	cmp	r1, #0
 800f64a:	d017      	beq.n	800f67c <__sflush_r+0xb8>
 800f64c:	0023      	movs	r3, r4
 800f64e:	3344      	adds	r3, #68	@ 0x44
 800f650:	4299      	cmp	r1, r3
 800f652:	d002      	beq.n	800f65a <__sflush_r+0x96>
 800f654:	0028      	movs	r0, r5
 800f656:	f7ff fb0b 	bl	800ec70 <_free_r>
 800f65a:	2300      	movs	r3, #0
 800f65c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f65e:	e00d      	b.n	800f67c <__sflush_r+0xb8>
 800f660:	2301      	movs	r3, #1
 800f662:	0028      	movs	r0, r5
 800f664:	47b8      	blx	r7
 800f666:	0002      	movs	r2, r0
 800f668:	1c43      	adds	r3, r0, #1
 800f66a:	d1c6      	bne.n	800f5fa <__sflush_r+0x36>
 800f66c:	682b      	ldr	r3, [r5, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d0c3      	beq.n	800f5fa <__sflush_r+0x36>
 800f672:	2b1d      	cmp	r3, #29
 800f674:	d001      	beq.n	800f67a <__sflush_r+0xb6>
 800f676:	2b16      	cmp	r3, #22
 800f678:	d11a      	bne.n	800f6b0 <__sflush_r+0xec>
 800f67a:	602e      	str	r6, [r5, #0]
 800f67c:	2000      	movs	r0, #0
 800f67e:	e01e      	b.n	800f6be <__sflush_r+0xfa>
 800f680:	690e      	ldr	r6, [r1, #16]
 800f682:	2e00      	cmp	r6, #0
 800f684:	d0fa      	beq.n	800f67c <__sflush_r+0xb8>
 800f686:	680f      	ldr	r7, [r1, #0]
 800f688:	600e      	str	r6, [r1, #0]
 800f68a:	1bba      	subs	r2, r7, r6
 800f68c:	9201      	str	r2, [sp, #4]
 800f68e:	2200      	movs	r2, #0
 800f690:	079b      	lsls	r3, r3, #30
 800f692:	d100      	bne.n	800f696 <__sflush_r+0xd2>
 800f694:	694a      	ldr	r2, [r1, #20]
 800f696:	60a2      	str	r2, [r4, #8]
 800f698:	9b01      	ldr	r3, [sp, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	ddee      	ble.n	800f67c <__sflush_r+0xb8>
 800f69e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f6a0:	0032      	movs	r2, r6
 800f6a2:	001f      	movs	r7, r3
 800f6a4:	0028      	movs	r0, r5
 800f6a6:	9b01      	ldr	r3, [sp, #4]
 800f6a8:	6a21      	ldr	r1, [r4, #32]
 800f6aa:	47b8      	blx	r7
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	dc07      	bgt.n	800f6c0 <__sflush_r+0xfc>
 800f6b0:	89a2      	ldrh	r2, [r4, #12]
 800f6b2:	2340      	movs	r3, #64	@ 0x40
 800f6b4:	2001      	movs	r0, #1
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	b21b      	sxth	r3, r3
 800f6ba:	81a3      	strh	r3, [r4, #12]
 800f6bc:	4240      	negs	r0, r0
 800f6be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f6c0:	9b01      	ldr	r3, [sp, #4]
 800f6c2:	1836      	adds	r6, r6, r0
 800f6c4:	1a1b      	subs	r3, r3, r0
 800f6c6:	9301      	str	r3, [sp, #4]
 800f6c8:	e7e6      	b.n	800f698 <__sflush_r+0xd4>
 800f6ca:	46c0      	nop			@ (mov r8, r8)
 800f6cc:	dfbffffe 	.word	0xdfbffffe

0800f6d0 <_fflush_r>:
 800f6d0:	690b      	ldr	r3, [r1, #16]
 800f6d2:	b570      	push	{r4, r5, r6, lr}
 800f6d4:	0005      	movs	r5, r0
 800f6d6:	000c      	movs	r4, r1
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d102      	bne.n	800f6e2 <_fflush_r+0x12>
 800f6dc:	2500      	movs	r5, #0
 800f6de:	0028      	movs	r0, r5
 800f6e0:	bd70      	pop	{r4, r5, r6, pc}
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d004      	beq.n	800f6f0 <_fflush_r+0x20>
 800f6e6:	6a03      	ldr	r3, [r0, #32]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d101      	bne.n	800f6f0 <_fflush_r+0x20>
 800f6ec:	f7fe fb2c 	bl	800dd48 <__sinit>
 800f6f0:	220c      	movs	r2, #12
 800f6f2:	5ea3      	ldrsh	r3, [r4, r2]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d0f1      	beq.n	800f6dc <_fflush_r+0xc>
 800f6f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6fa:	07d2      	lsls	r2, r2, #31
 800f6fc:	d404      	bmi.n	800f708 <_fflush_r+0x38>
 800f6fe:	059b      	lsls	r3, r3, #22
 800f700:	d402      	bmi.n	800f708 <_fflush_r+0x38>
 800f702:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f704:	f7fe fc25 	bl	800df52 <__retarget_lock_acquire_recursive>
 800f708:	0028      	movs	r0, r5
 800f70a:	0021      	movs	r1, r4
 800f70c:	f7ff ff5a 	bl	800f5c4 <__sflush_r>
 800f710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f712:	0005      	movs	r5, r0
 800f714:	07db      	lsls	r3, r3, #31
 800f716:	d4e2      	bmi.n	800f6de <_fflush_r+0xe>
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	059b      	lsls	r3, r3, #22
 800f71c:	d4df      	bmi.n	800f6de <_fflush_r+0xe>
 800f71e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f720:	f7fe fc18 	bl	800df54 <__retarget_lock_release_recursive>
 800f724:	e7db      	b.n	800f6de <_fflush_r+0xe>
	...

0800f728 <_sbrk_r>:
 800f728:	2300      	movs	r3, #0
 800f72a:	b570      	push	{r4, r5, r6, lr}
 800f72c:	4d06      	ldr	r5, [pc, #24]	@ (800f748 <_sbrk_r+0x20>)
 800f72e:	0004      	movs	r4, r0
 800f730:	0008      	movs	r0, r1
 800f732:	602b      	str	r3, [r5, #0]
 800f734:	f7f3 fb70 	bl	8002e18 <_sbrk>
 800f738:	1c43      	adds	r3, r0, #1
 800f73a:	d103      	bne.n	800f744 <_sbrk_r+0x1c>
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d000      	beq.n	800f744 <_sbrk_r+0x1c>
 800f742:	6023      	str	r3, [r4, #0]
 800f744:	bd70      	pop	{r4, r5, r6, pc}
 800f746:	46c0      	nop			@ (mov r8, r8)
 800f748:	20001fc8 	.word	0x20001fc8

0800f74c <memcpy>:
 800f74c:	2300      	movs	r3, #0
 800f74e:	b510      	push	{r4, lr}
 800f750:	429a      	cmp	r2, r3
 800f752:	d100      	bne.n	800f756 <memcpy+0xa>
 800f754:	bd10      	pop	{r4, pc}
 800f756:	5ccc      	ldrb	r4, [r1, r3]
 800f758:	54c4      	strb	r4, [r0, r3]
 800f75a:	3301      	adds	r3, #1
 800f75c:	e7f8      	b.n	800f750 <memcpy+0x4>
	...

0800f760 <__assert_func>:
 800f760:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f762:	0014      	movs	r4, r2
 800f764:	001a      	movs	r2, r3
 800f766:	4b09      	ldr	r3, [pc, #36]	@ (800f78c <__assert_func+0x2c>)
 800f768:	0005      	movs	r5, r0
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	000e      	movs	r6, r1
 800f76e:	68d8      	ldr	r0, [r3, #12]
 800f770:	4b07      	ldr	r3, [pc, #28]	@ (800f790 <__assert_func+0x30>)
 800f772:	2c00      	cmp	r4, #0
 800f774:	d101      	bne.n	800f77a <__assert_func+0x1a>
 800f776:	4b07      	ldr	r3, [pc, #28]	@ (800f794 <__assert_func+0x34>)
 800f778:	001c      	movs	r4, r3
 800f77a:	4907      	ldr	r1, [pc, #28]	@ (800f798 <__assert_func+0x38>)
 800f77c:	9301      	str	r3, [sp, #4]
 800f77e:	9402      	str	r4, [sp, #8]
 800f780:	002b      	movs	r3, r5
 800f782:	9600      	str	r6, [sp, #0]
 800f784:	f000 f856 	bl	800f834 <fiprintf>
 800f788:	f000 f864 	bl	800f854 <abort>
 800f78c:	20000188 	.word	0x20000188
 800f790:	080101ca 	.word	0x080101ca
 800f794:	08010205 	.word	0x08010205
 800f798:	080101d7 	.word	0x080101d7

0800f79c <_calloc_r>:
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	0c0b      	lsrs	r3, r1, #16
 800f7a0:	0c15      	lsrs	r5, r2, #16
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d11e      	bne.n	800f7e4 <_calloc_r+0x48>
 800f7a6:	2d00      	cmp	r5, #0
 800f7a8:	d10c      	bne.n	800f7c4 <_calloc_r+0x28>
 800f7aa:	b289      	uxth	r1, r1
 800f7ac:	b294      	uxth	r4, r2
 800f7ae:	434c      	muls	r4, r1
 800f7b0:	0021      	movs	r1, r4
 800f7b2:	f7ff fad3 	bl	800ed5c <_malloc_r>
 800f7b6:	1e05      	subs	r5, r0, #0
 800f7b8:	d01a      	beq.n	800f7f0 <_calloc_r+0x54>
 800f7ba:	0022      	movs	r2, r4
 800f7bc:	2100      	movs	r1, #0
 800f7be:	f7fe fb43 	bl	800de48 <memset>
 800f7c2:	e016      	b.n	800f7f2 <_calloc_r+0x56>
 800f7c4:	1c2b      	adds	r3, r5, #0
 800f7c6:	1c0c      	adds	r4, r1, #0
 800f7c8:	b289      	uxth	r1, r1
 800f7ca:	b292      	uxth	r2, r2
 800f7cc:	434a      	muls	r2, r1
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	b2a1      	uxth	r1, r4
 800f7d2:	4359      	muls	r1, r3
 800f7d4:	0c14      	lsrs	r4, r2, #16
 800f7d6:	190c      	adds	r4, r1, r4
 800f7d8:	0c23      	lsrs	r3, r4, #16
 800f7da:	d107      	bne.n	800f7ec <_calloc_r+0x50>
 800f7dc:	0424      	lsls	r4, r4, #16
 800f7de:	b292      	uxth	r2, r2
 800f7e0:	4314      	orrs	r4, r2
 800f7e2:	e7e5      	b.n	800f7b0 <_calloc_r+0x14>
 800f7e4:	2d00      	cmp	r5, #0
 800f7e6:	d101      	bne.n	800f7ec <_calloc_r+0x50>
 800f7e8:	1c14      	adds	r4, r2, #0
 800f7ea:	e7ed      	b.n	800f7c8 <_calloc_r+0x2c>
 800f7ec:	230c      	movs	r3, #12
 800f7ee:	6003      	str	r3, [r0, #0]
 800f7f0:	2500      	movs	r5, #0
 800f7f2:	0028      	movs	r0, r5
 800f7f4:	bd70      	pop	{r4, r5, r6, pc}

0800f7f6 <__ascii_mbtowc>:
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	2900      	cmp	r1, #0
 800f7fa:	d100      	bne.n	800f7fe <__ascii_mbtowc+0x8>
 800f7fc:	a901      	add	r1, sp, #4
 800f7fe:	1e10      	subs	r0, r2, #0
 800f800:	d006      	beq.n	800f810 <__ascii_mbtowc+0x1a>
 800f802:	2b00      	cmp	r3, #0
 800f804:	d006      	beq.n	800f814 <__ascii_mbtowc+0x1e>
 800f806:	7813      	ldrb	r3, [r2, #0]
 800f808:	600b      	str	r3, [r1, #0]
 800f80a:	7810      	ldrb	r0, [r2, #0]
 800f80c:	1e43      	subs	r3, r0, #1
 800f80e:	4198      	sbcs	r0, r3
 800f810:	b002      	add	sp, #8
 800f812:	4770      	bx	lr
 800f814:	2002      	movs	r0, #2
 800f816:	4240      	negs	r0, r0
 800f818:	e7fa      	b.n	800f810 <__ascii_mbtowc+0x1a>

0800f81a <__ascii_wctomb>:
 800f81a:	0003      	movs	r3, r0
 800f81c:	1e08      	subs	r0, r1, #0
 800f81e:	d005      	beq.n	800f82c <__ascii_wctomb+0x12>
 800f820:	2aff      	cmp	r2, #255	@ 0xff
 800f822:	d904      	bls.n	800f82e <__ascii_wctomb+0x14>
 800f824:	228a      	movs	r2, #138	@ 0x8a
 800f826:	2001      	movs	r0, #1
 800f828:	601a      	str	r2, [r3, #0]
 800f82a:	4240      	negs	r0, r0
 800f82c:	4770      	bx	lr
 800f82e:	2001      	movs	r0, #1
 800f830:	700a      	strb	r2, [r1, #0]
 800f832:	e7fb      	b.n	800f82c <__ascii_wctomb+0x12>

0800f834 <fiprintf>:
 800f834:	b40e      	push	{r1, r2, r3}
 800f836:	b517      	push	{r0, r1, r2, r4, lr}
 800f838:	4c05      	ldr	r4, [pc, #20]	@ (800f850 <fiprintf+0x1c>)
 800f83a:	ab05      	add	r3, sp, #20
 800f83c:	cb04      	ldmia	r3!, {r2}
 800f83e:	0001      	movs	r1, r0
 800f840:	6820      	ldr	r0, [r4, #0]
 800f842:	9301      	str	r3, [sp, #4]
 800f844:	f000 f834 	bl	800f8b0 <_vfiprintf_r>
 800f848:	bc1e      	pop	{r1, r2, r3, r4}
 800f84a:	bc08      	pop	{r3}
 800f84c:	b003      	add	sp, #12
 800f84e:	4718      	bx	r3
 800f850:	20000188 	.word	0x20000188

0800f854 <abort>:
 800f854:	2006      	movs	r0, #6
 800f856:	b510      	push	{r4, lr}
 800f858:	f000 fa10 	bl	800fc7c <raise>
 800f85c:	2001      	movs	r0, #1
 800f85e:	f7f3 fa69 	bl	8002d34 <_exit>

0800f862 <__sfputc_r>:
 800f862:	6893      	ldr	r3, [r2, #8]
 800f864:	b510      	push	{r4, lr}
 800f866:	3b01      	subs	r3, #1
 800f868:	6093      	str	r3, [r2, #8]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	da04      	bge.n	800f878 <__sfputc_r+0x16>
 800f86e:	6994      	ldr	r4, [r2, #24]
 800f870:	42a3      	cmp	r3, r4
 800f872:	db07      	blt.n	800f884 <__sfputc_r+0x22>
 800f874:	290a      	cmp	r1, #10
 800f876:	d005      	beq.n	800f884 <__sfputc_r+0x22>
 800f878:	6813      	ldr	r3, [r2, #0]
 800f87a:	1c58      	adds	r0, r3, #1
 800f87c:	6010      	str	r0, [r2, #0]
 800f87e:	7019      	strb	r1, [r3, #0]
 800f880:	0008      	movs	r0, r1
 800f882:	bd10      	pop	{r4, pc}
 800f884:	f000 f930 	bl	800fae8 <__swbuf_r>
 800f888:	0001      	movs	r1, r0
 800f88a:	e7f9      	b.n	800f880 <__sfputc_r+0x1e>

0800f88c <__sfputs_r>:
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	0006      	movs	r6, r0
 800f890:	000f      	movs	r7, r1
 800f892:	0014      	movs	r4, r2
 800f894:	18d5      	adds	r5, r2, r3
 800f896:	42ac      	cmp	r4, r5
 800f898:	d101      	bne.n	800f89e <__sfputs_r+0x12>
 800f89a:	2000      	movs	r0, #0
 800f89c:	e007      	b.n	800f8ae <__sfputs_r+0x22>
 800f89e:	7821      	ldrb	r1, [r4, #0]
 800f8a0:	003a      	movs	r2, r7
 800f8a2:	0030      	movs	r0, r6
 800f8a4:	f7ff ffdd 	bl	800f862 <__sfputc_r>
 800f8a8:	3401      	adds	r4, #1
 800f8aa:	1c43      	adds	r3, r0, #1
 800f8ac:	d1f3      	bne.n	800f896 <__sfputs_r+0xa>
 800f8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f8b0 <_vfiprintf_r>:
 800f8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8b2:	b0a1      	sub	sp, #132	@ 0x84
 800f8b4:	000f      	movs	r7, r1
 800f8b6:	0015      	movs	r5, r2
 800f8b8:	001e      	movs	r6, r3
 800f8ba:	9003      	str	r0, [sp, #12]
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	d004      	beq.n	800f8ca <_vfiprintf_r+0x1a>
 800f8c0:	6a03      	ldr	r3, [r0, #32]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d101      	bne.n	800f8ca <_vfiprintf_r+0x1a>
 800f8c6:	f7fe fa3f 	bl	800dd48 <__sinit>
 800f8ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8cc:	07db      	lsls	r3, r3, #31
 800f8ce:	d405      	bmi.n	800f8dc <_vfiprintf_r+0x2c>
 800f8d0:	89bb      	ldrh	r3, [r7, #12]
 800f8d2:	059b      	lsls	r3, r3, #22
 800f8d4:	d402      	bmi.n	800f8dc <_vfiprintf_r+0x2c>
 800f8d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f8d8:	f7fe fb3b 	bl	800df52 <__retarget_lock_acquire_recursive>
 800f8dc:	89bb      	ldrh	r3, [r7, #12]
 800f8de:	071b      	lsls	r3, r3, #28
 800f8e0:	d502      	bpl.n	800f8e8 <_vfiprintf_r+0x38>
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d113      	bne.n	800f910 <_vfiprintf_r+0x60>
 800f8e8:	0039      	movs	r1, r7
 800f8ea:	9803      	ldr	r0, [sp, #12]
 800f8ec:	f000 f93e 	bl	800fb6c <__swsetup_r>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	d00d      	beq.n	800f910 <_vfiprintf_r+0x60>
 800f8f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8f6:	07db      	lsls	r3, r3, #31
 800f8f8:	d503      	bpl.n	800f902 <_vfiprintf_r+0x52>
 800f8fa:	2001      	movs	r0, #1
 800f8fc:	4240      	negs	r0, r0
 800f8fe:	b021      	add	sp, #132	@ 0x84
 800f900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f902:	89bb      	ldrh	r3, [r7, #12]
 800f904:	059b      	lsls	r3, r3, #22
 800f906:	d4f8      	bmi.n	800f8fa <_vfiprintf_r+0x4a>
 800f908:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f90a:	f7fe fb23 	bl	800df54 <__retarget_lock_release_recursive>
 800f90e:	e7f4      	b.n	800f8fa <_vfiprintf_r+0x4a>
 800f910:	2300      	movs	r3, #0
 800f912:	ac08      	add	r4, sp, #32
 800f914:	6163      	str	r3, [r4, #20]
 800f916:	3320      	adds	r3, #32
 800f918:	7663      	strb	r3, [r4, #25]
 800f91a:	3310      	adds	r3, #16
 800f91c:	76a3      	strb	r3, [r4, #26]
 800f91e:	9607      	str	r6, [sp, #28]
 800f920:	002e      	movs	r6, r5
 800f922:	7833      	ldrb	r3, [r6, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d001      	beq.n	800f92c <_vfiprintf_r+0x7c>
 800f928:	2b25      	cmp	r3, #37	@ 0x25
 800f92a:	d148      	bne.n	800f9be <_vfiprintf_r+0x10e>
 800f92c:	1b73      	subs	r3, r6, r5
 800f92e:	9305      	str	r3, [sp, #20]
 800f930:	42ae      	cmp	r6, r5
 800f932:	d00b      	beq.n	800f94c <_vfiprintf_r+0x9c>
 800f934:	002a      	movs	r2, r5
 800f936:	0039      	movs	r1, r7
 800f938:	9803      	ldr	r0, [sp, #12]
 800f93a:	f7ff ffa7 	bl	800f88c <__sfputs_r>
 800f93e:	3001      	adds	r0, #1
 800f940:	d100      	bne.n	800f944 <_vfiprintf_r+0x94>
 800f942:	e0ae      	b.n	800faa2 <_vfiprintf_r+0x1f2>
 800f944:	6963      	ldr	r3, [r4, #20]
 800f946:	9a05      	ldr	r2, [sp, #20]
 800f948:	189b      	adds	r3, r3, r2
 800f94a:	6163      	str	r3, [r4, #20]
 800f94c:	7833      	ldrb	r3, [r6, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d100      	bne.n	800f954 <_vfiprintf_r+0xa4>
 800f952:	e0a6      	b.n	800faa2 <_vfiprintf_r+0x1f2>
 800f954:	2201      	movs	r2, #1
 800f956:	2300      	movs	r3, #0
 800f958:	4252      	negs	r2, r2
 800f95a:	6062      	str	r2, [r4, #4]
 800f95c:	a904      	add	r1, sp, #16
 800f95e:	3254      	adds	r2, #84	@ 0x54
 800f960:	1852      	adds	r2, r2, r1
 800f962:	1c75      	adds	r5, r6, #1
 800f964:	6023      	str	r3, [r4, #0]
 800f966:	60e3      	str	r3, [r4, #12]
 800f968:	60a3      	str	r3, [r4, #8]
 800f96a:	7013      	strb	r3, [r2, #0]
 800f96c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f96e:	4b59      	ldr	r3, [pc, #356]	@ (800fad4 <_vfiprintf_r+0x224>)
 800f970:	2205      	movs	r2, #5
 800f972:	0018      	movs	r0, r3
 800f974:	7829      	ldrb	r1, [r5, #0]
 800f976:	9305      	str	r3, [sp, #20]
 800f978:	f7fe faed 	bl	800df56 <memchr>
 800f97c:	1c6e      	adds	r6, r5, #1
 800f97e:	2800      	cmp	r0, #0
 800f980:	d11f      	bne.n	800f9c2 <_vfiprintf_r+0x112>
 800f982:	6822      	ldr	r2, [r4, #0]
 800f984:	06d3      	lsls	r3, r2, #27
 800f986:	d504      	bpl.n	800f992 <_vfiprintf_r+0xe2>
 800f988:	2353      	movs	r3, #83	@ 0x53
 800f98a:	a904      	add	r1, sp, #16
 800f98c:	185b      	adds	r3, r3, r1
 800f98e:	2120      	movs	r1, #32
 800f990:	7019      	strb	r1, [r3, #0]
 800f992:	0713      	lsls	r3, r2, #28
 800f994:	d504      	bpl.n	800f9a0 <_vfiprintf_r+0xf0>
 800f996:	2353      	movs	r3, #83	@ 0x53
 800f998:	a904      	add	r1, sp, #16
 800f99a:	185b      	adds	r3, r3, r1
 800f99c:	212b      	movs	r1, #43	@ 0x2b
 800f99e:	7019      	strb	r1, [r3, #0]
 800f9a0:	782b      	ldrb	r3, [r5, #0]
 800f9a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9a4:	d016      	beq.n	800f9d4 <_vfiprintf_r+0x124>
 800f9a6:	002e      	movs	r6, r5
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	200a      	movs	r0, #10
 800f9ac:	68e3      	ldr	r3, [r4, #12]
 800f9ae:	7832      	ldrb	r2, [r6, #0]
 800f9b0:	1c75      	adds	r5, r6, #1
 800f9b2:	3a30      	subs	r2, #48	@ 0x30
 800f9b4:	2a09      	cmp	r2, #9
 800f9b6:	d950      	bls.n	800fa5a <_vfiprintf_r+0x1aa>
 800f9b8:	2900      	cmp	r1, #0
 800f9ba:	d111      	bne.n	800f9e0 <_vfiprintf_r+0x130>
 800f9bc:	e017      	b.n	800f9ee <_vfiprintf_r+0x13e>
 800f9be:	3601      	adds	r6, #1
 800f9c0:	e7af      	b.n	800f922 <_vfiprintf_r+0x72>
 800f9c2:	9b05      	ldr	r3, [sp, #20]
 800f9c4:	6822      	ldr	r2, [r4, #0]
 800f9c6:	1ac0      	subs	r0, r0, r3
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	4083      	lsls	r3, r0
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	0035      	movs	r5, r6
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	e7cc      	b.n	800f96e <_vfiprintf_r+0xbe>
 800f9d4:	9b07      	ldr	r3, [sp, #28]
 800f9d6:	1d19      	adds	r1, r3, #4
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	9107      	str	r1, [sp, #28]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	db01      	blt.n	800f9e4 <_vfiprintf_r+0x134>
 800f9e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9e2:	e004      	b.n	800f9ee <_vfiprintf_r+0x13e>
 800f9e4:	425b      	negs	r3, r3
 800f9e6:	60e3      	str	r3, [r4, #12]
 800f9e8:	2302      	movs	r3, #2
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	7833      	ldrb	r3, [r6, #0]
 800f9f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9f2:	d10c      	bne.n	800fa0e <_vfiprintf_r+0x15e>
 800f9f4:	7873      	ldrb	r3, [r6, #1]
 800f9f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9f8:	d134      	bne.n	800fa64 <_vfiprintf_r+0x1b4>
 800f9fa:	9b07      	ldr	r3, [sp, #28]
 800f9fc:	3602      	adds	r6, #2
 800f9fe:	1d1a      	adds	r2, r3, #4
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	9207      	str	r2, [sp, #28]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	da01      	bge.n	800fa0c <_vfiprintf_r+0x15c>
 800fa08:	2301      	movs	r3, #1
 800fa0a:	425b      	negs	r3, r3
 800fa0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa0e:	4d32      	ldr	r5, [pc, #200]	@ (800fad8 <_vfiprintf_r+0x228>)
 800fa10:	2203      	movs	r2, #3
 800fa12:	0028      	movs	r0, r5
 800fa14:	7831      	ldrb	r1, [r6, #0]
 800fa16:	f7fe fa9e 	bl	800df56 <memchr>
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	d006      	beq.n	800fa2c <_vfiprintf_r+0x17c>
 800fa1e:	2340      	movs	r3, #64	@ 0x40
 800fa20:	1b40      	subs	r0, r0, r5
 800fa22:	4083      	lsls	r3, r0
 800fa24:	6822      	ldr	r2, [r4, #0]
 800fa26:	3601      	adds	r6, #1
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	6023      	str	r3, [r4, #0]
 800fa2c:	7831      	ldrb	r1, [r6, #0]
 800fa2e:	2206      	movs	r2, #6
 800fa30:	482a      	ldr	r0, [pc, #168]	@ (800fadc <_vfiprintf_r+0x22c>)
 800fa32:	1c75      	adds	r5, r6, #1
 800fa34:	7621      	strb	r1, [r4, #24]
 800fa36:	f7fe fa8e 	bl	800df56 <memchr>
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	d040      	beq.n	800fac0 <_vfiprintf_r+0x210>
 800fa3e:	4b28      	ldr	r3, [pc, #160]	@ (800fae0 <_vfiprintf_r+0x230>)
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d122      	bne.n	800fa8a <_vfiprintf_r+0x1da>
 800fa44:	2207      	movs	r2, #7
 800fa46:	9b07      	ldr	r3, [sp, #28]
 800fa48:	3307      	adds	r3, #7
 800fa4a:	4393      	bics	r3, r2
 800fa4c:	3308      	adds	r3, #8
 800fa4e:	9307      	str	r3, [sp, #28]
 800fa50:	6963      	ldr	r3, [r4, #20]
 800fa52:	9a04      	ldr	r2, [sp, #16]
 800fa54:	189b      	adds	r3, r3, r2
 800fa56:	6163      	str	r3, [r4, #20]
 800fa58:	e762      	b.n	800f920 <_vfiprintf_r+0x70>
 800fa5a:	4343      	muls	r3, r0
 800fa5c:	002e      	movs	r6, r5
 800fa5e:	2101      	movs	r1, #1
 800fa60:	189b      	adds	r3, r3, r2
 800fa62:	e7a4      	b.n	800f9ae <_vfiprintf_r+0xfe>
 800fa64:	2300      	movs	r3, #0
 800fa66:	200a      	movs	r0, #10
 800fa68:	0019      	movs	r1, r3
 800fa6a:	3601      	adds	r6, #1
 800fa6c:	6063      	str	r3, [r4, #4]
 800fa6e:	7832      	ldrb	r2, [r6, #0]
 800fa70:	1c75      	adds	r5, r6, #1
 800fa72:	3a30      	subs	r2, #48	@ 0x30
 800fa74:	2a09      	cmp	r2, #9
 800fa76:	d903      	bls.n	800fa80 <_vfiprintf_r+0x1d0>
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d0c8      	beq.n	800fa0e <_vfiprintf_r+0x15e>
 800fa7c:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa7e:	e7c6      	b.n	800fa0e <_vfiprintf_r+0x15e>
 800fa80:	4341      	muls	r1, r0
 800fa82:	002e      	movs	r6, r5
 800fa84:	2301      	movs	r3, #1
 800fa86:	1889      	adds	r1, r1, r2
 800fa88:	e7f1      	b.n	800fa6e <_vfiprintf_r+0x1be>
 800fa8a:	aa07      	add	r2, sp, #28
 800fa8c:	9200      	str	r2, [sp, #0]
 800fa8e:	0021      	movs	r1, r4
 800fa90:	003a      	movs	r2, r7
 800fa92:	4b14      	ldr	r3, [pc, #80]	@ (800fae4 <_vfiprintf_r+0x234>)
 800fa94:	9803      	ldr	r0, [sp, #12]
 800fa96:	f7fd fd0b 	bl	800d4b0 <_printf_float>
 800fa9a:	9004      	str	r0, [sp, #16]
 800fa9c:	9b04      	ldr	r3, [sp, #16]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	d1d6      	bne.n	800fa50 <_vfiprintf_r+0x1a0>
 800faa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800faa4:	07db      	lsls	r3, r3, #31
 800faa6:	d405      	bmi.n	800fab4 <_vfiprintf_r+0x204>
 800faa8:	89bb      	ldrh	r3, [r7, #12]
 800faaa:	059b      	lsls	r3, r3, #22
 800faac:	d402      	bmi.n	800fab4 <_vfiprintf_r+0x204>
 800faae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fab0:	f7fe fa50 	bl	800df54 <__retarget_lock_release_recursive>
 800fab4:	89bb      	ldrh	r3, [r7, #12]
 800fab6:	065b      	lsls	r3, r3, #25
 800fab8:	d500      	bpl.n	800fabc <_vfiprintf_r+0x20c>
 800faba:	e71e      	b.n	800f8fa <_vfiprintf_r+0x4a>
 800fabc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fabe:	e71e      	b.n	800f8fe <_vfiprintf_r+0x4e>
 800fac0:	aa07      	add	r2, sp, #28
 800fac2:	9200      	str	r2, [sp, #0]
 800fac4:	0021      	movs	r1, r4
 800fac6:	003a      	movs	r2, r7
 800fac8:	4b06      	ldr	r3, [pc, #24]	@ (800fae4 <_vfiprintf_r+0x234>)
 800faca:	9803      	ldr	r0, [sp, #12]
 800facc:	f7fd ff9e 	bl	800da0c <_printf_i>
 800fad0:	e7e3      	b.n	800fa9a <_vfiprintf_r+0x1ea>
 800fad2:	46c0      	nop			@ (mov r8, r8)
 800fad4:	08010307 	.word	0x08010307
 800fad8:	0801030d 	.word	0x0801030d
 800fadc:	08010311 	.word	0x08010311
 800fae0:	0800d4b1 	.word	0x0800d4b1
 800fae4:	0800f88d 	.word	0x0800f88d

0800fae8 <__swbuf_r>:
 800fae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faea:	0006      	movs	r6, r0
 800faec:	000d      	movs	r5, r1
 800faee:	0014      	movs	r4, r2
 800faf0:	2800      	cmp	r0, #0
 800faf2:	d004      	beq.n	800fafe <__swbuf_r+0x16>
 800faf4:	6a03      	ldr	r3, [r0, #32]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d101      	bne.n	800fafe <__swbuf_r+0x16>
 800fafa:	f7fe f925 	bl	800dd48 <__sinit>
 800fafe:	69a3      	ldr	r3, [r4, #24]
 800fb00:	60a3      	str	r3, [r4, #8]
 800fb02:	89a3      	ldrh	r3, [r4, #12]
 800fb04:	071b      	lsls	r3, r3, #28
 800fb06:	d502      	bpl.n	800fb0e <__swbuf_r+0x26>
 800fb08:	6923      	ldr	r3, [r4, #16]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d109      	bne.n	800fb22 <__swbuf_r+0x3a>
 800fb0e:	0021      	movs	r1, r4
 800fb10:	0030      	movs	r0, r6
 800fb12:	f000 f82b 	bl	800fb6c <__swsetup_r>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d003      	beq.n	800fb22 <__swbuf_r+0x3a>
 800fb1a:	2501      	movs	r5, #1
 800fb1c:	426d      	negs	r5, r5
 800fb1e:	0028      	movs	r0, r5
 800fb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb22:	6923      	ldr	r3, [r4, #16]
 800fb24:	6820      	ldr	r0, [r4, #0]
 800fb26:	b2ef      	uxtb	r7, r5
 800fb28:	1ac0      	subs	r0, r0, r3
 800fb2a:	6963      	ldr	r3, [r4, #20]
 800fb2c:	b2ed      	uxtb	r5, r5
 800fb2e:	4283      	cmp	r3, r0
 800fb30:	dc05      	bgt.n	800fb3e <__swbuf_r+0x56>
 800fb32:	0021      	movs	r1, r4
 800fb34:	0030      	movs	r0, r6
 800fb36:	f7ff fdcb 	bl	800f6d0 <_fflush_r>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	d1ed      	bne.n	800fb1a <__swbuf_r+0x32>
 800fb3e:	68a3      	ldr	r3, [r4, #8]
 800fb40:	3001      	adds	r0, #1
 800fb42:	3b01      	subs	r3, #1
 800fb44:	60a3      	str	r3, [r4, #8]
 800fb46:	6823      	ldr	r3, [r4, #0]
 800fb48:	1c5a      	adds	r2, r3, #1
 800fb4a:	6022      	str	r2, [r4, #0]
 800fb4c:	701f      	strb	r7, [r3, #0]
 800fb4e:	6963      	ldr	r3, [r4, #20]
 800fb50:	4283      	cmp	r3, r0
 800fb52:	d004      	beq.n	800fb5e <__swbuf_r+0x76>
 800fb54:	89a3      	ldrh	r3, [r4, #12]
 800fb56:	07db      	lsls	r3, r3, #31
 800fb58:	d5e1      	bpl.n	800fb1e <__swbuf_r+0x36>
 800fb5a:	2d0a      	cmp	r5, #10
 800fb5c:	d1df      	bne.n	800fb1e <__swbuf_r+0x36>
 800fb5e:	0021      	movs	r1, r4
 800fb60:	0030      	movs	r0, r6
 800fb62:	f7ff fdb5 	bl	800f6d0 <_fflush_r>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d0d9      	beq.n	800fb1e <__swbuf_r+0x36>
 800fb6a:	e7d6      	b.n	800fb1a <__swbuf_r+0x32>

0800fb6c <__swsetup_r>:
 800fb6c:	4b2d      	ldr	r3, [pc, #180]	@ (800fc24 <__swsetup_r+0xb8>)
 800fb6e:	b570      	push	{r4, r5, r6, lr}
 800fb70:	0005      	movs	r5, r0
 800fb72:	6818      	ldr	r0, [r3, #0]
 800fb74:	000c      	movs	r4, r1
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d004      	beq.n	800fb84 <__swsetup_r+0x18>
 800fb7a:	6a03      	ldr	r3, [r0, #32]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d101      	bne.n	800fb84 <__swsetup_r+0x18>
 800fb80:	f7fe f8e2 	bl	800dd48 <__sinit>
 800fb84:	230c      	movs	r3, #12
 800fb86:	5ee2      	ldrsh	r2, [r4, r3]
 800fb88:	0713      	lsls	r3, r2, #28
 800fb8a:	d423      	bmi.n	800fbd4 <__swsetup_r+0x68>
 800fb8c:	06d3      	lsls	r3, r2, #27
 800fb8e:	d407      	bmi.n	800fba0 <__swsetup_r+0x34>
 800fb90:	2309      	movs	r3, #9
 800fb92:	602b      	str	r3, [r5, #0]
 800fb94:	2340      	movs	r3, #64	@ 0x40
 800fb96:	2001      	movs	r0, #1
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	81a3      	strh	r3, [r4, #12]
 800fb9c:	4240      	negs	r0, r0
 800fb9e:	e03a      	b.n	800fc16 <__swsetup_r+0xaa>
 800fba0:	0752      	lsls	r2, r2, #29
 800fba2:	d513      	bpl.n	800fbcc <__swsetup_r+0x60>
 800fba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fba6:	2900      	cmp	r1, #0
 800fba8:	d008      	beq.n	800fbbc <__swsetup_r+0x50>
 800fbaa:	0023      	movs	r3, r4
 800fbac:	3344      	adds	r3, #68	@ 0x44
 800fbae:	4299      	cmp	r1, r3
 800fbb0:	d002      	beq.n	800fbb8 <__swsetup_r+0x4c>
 800fbb2:	0028      	movs	r0, r5
 800fbb4:	f7ff f85c 	bl	800ec70 <_free_r>
 800fbb8:	2300      	movs	r3, #0
 800fbba:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbbc:	2224      	movs	r2, #36	@ 0x24
 800fbbe:	89a3      	ldrh	r3, [r4, #12]
 800fbc0:	4393      	bics	r3, r2
 800fbc2:	81a3      	strh	r3, [r4, #12]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	6063      	str	r3, [r4, #4]
 800fbc8:	6923      	ldr	r3, [r4, #16]
 800fbca:	6023      	str	r3, [r4, #0]
 800fbcc:	2308      	movs	r3, #8
 800fbce:	89a2      	ldrh	r2, [r4, #12]
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	81a3      	strh	r3, [r4, #12]
 800fbd4:	6923      	ldr	r3, [r4, #16]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d10b      	bne.n	800fbf2 <__swsetup_r+0x86>
 800fbda:	21a0      	movs	r1, #160	@ 0xa0
 800fbdc:	2280      	movs	r2, #128	@ 0x80
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	0089      	lsls	r1, r1, #2
 800fbe2:	0092      	lsls	r2, r2, #2
 800fbe4:	400b      	ands	r3, r1
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d003      	beq.n	800fbf2 <__swsetup_r+0x86>
 800fbea:	0021      	movs	r1, r4
 800fbec:	0028      	movs	r0, r5
 800fbee:	f000 f88f 	bl	800fd10 <__smakebuf_r>
 800fbf2:	230c      	movs	r3, #12
 800fbf4:	5ee2      	ldrsh	r2, [r4, r3]
 800fbf6:	2101      	movs	r1, #1
 800fbf8:	0013      	movs	r3, r2
 800fbfa:	400b      	ands	r3, r1
 800fbfc:	420a      	tst	r2, r1
 800fbfe:	d00b      	beq.n	800fc18 <__swsetup_r+0xac>
 800fc00:	2300      	movs	r3, #0
 800fc02:	60a3      	str	r3, [r4, #8]
 800fc04:	6963      	ldr	r3, [r4, #20]
 800fc06:	425b      	negs	r3, r3
 800fc08:	61a3      	str	r3, [r4, #24]
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	6923      	ldr	r3, [r4, #16]
 800fc0e:	4283      	cmp	r3, r0
 800fc10:	d101      	bne.n	800fc16 <__swsetup_r+0xaa>
 800fc12:	0613      	lsls	r3, r2, #24
 800fc14:	d4be      	bmi.n	800fb94 <__swsetup_r+0x28>
 800fc16:	bd70      	pop	{r4, r5, r6, pc}
 800fc18:	0791      	lsls	r1, r2, #30
 800fc1a:	d400      	bmi.n	800fc1e <__swsetup_r+0xb2>
 800fc1c:	6963      	ldr	r3, [r4, #20]
 800fc1e:	60a3      	str	r3, [r4, #8]
 800fc20:	e7f3      	b.n	800fc0a <__swsetup_r+0x9e>
 800fc22:	46c0      	nop			@ (mov r8, r8)
 800fc24:	20000188 	.word	0x20000188

0800fc28 <_raise_r>:
 800fc28:	b570      	push	{r4, r5, r6, lr}
 800fc2a:	0004      	movs	r4, r0
 800fc2c:	000d      	movs	r5, r1
 800fc2e:	291f      	cmp	r1, #31
 800fc30:	d904      	bls.n	800fc3c <_raise_r+0x14>
 800fc32:	2316      	movs	r3, #22
 800fc34:	6003      	str	r3, [r0, #0]
 800fc36:	2001      	movs	r0, #1
 800fc38:	4240      	negs	r0, r0
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d004      	beq.n	800fc4c <_raise_r+0x24>
 800fc42:	008a      	lsls	r2, r1, #2
 800fc44:	189b      	adds	r3, r3, r2
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	2a00      	cmp	r2, #0
 800fc4a:	d108      	bne.n	800fc5e <_raise_r+0x36>
 800fc4c:	0020      	movs	r0, r4
 800fc4e:	f000 f831 	bl	800fcb4 <_getpid_r>
 800fc52:	002a      	movs	r2, r5
 800fc54:	0001      	movs	r1, r0
 800fc56:	0020      	movs	r0, r4
 800fc58:	f000 f81a 	bl	800fc90 <_kill_r>
 800fc5c:	e7ed      	b.n	800fc3a <_raise_r+0x12>
 800fc5e:	2a01      	cmp	r2, #1
 800fc60:	d009      	beq.n	800fc76 <_raise_r+0x4e>
 800fc62:	1c51      	adds	r1, r2, #1
 800fc64:	d103      	bne.n	800fc6e <_raise_r+0x46>
 800fc66:	2316      	movs	r3, #22
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	2001      	movs	r0, #1
 800fc6c:	e7e5      	b.n	800fc3a <_raise_r+0x12>
 800fc6e:	2100      	movs	r1, #0
 800fc70:	0028      	movs	r0, r5
 800fc72:	6019      	str	r1, [r3, #0]
 800fc74:	4790      	blx	r2
 800fc76:	2000      	movs	r0, #0
 800fc78:	e7df      	b.n	800fc3a <_raise_r+0x12>
	...

0800fc7c <raise>:
 800fc7c:	b510      	push	{r4, lr}
 800fc7e:	4b03      	ldr	r3, [pc, #12]	@ (800fc8c <raise+0x10>)
 800fc80:	0001      	movs	r1, r0
 800fc82:	6818      	ldr	r0, [r3, #0]
 800fc84:	f7ff ffd0 	bl	800fc28 <_raise_r>
 800fc88:	bd10      	pop	{r4, pc}
 800fc8a:	46c0      	nop			@ (mov r8, r8)
 800fc8c:	20000188 	.word	0x20000188

0800fc90 <_kill_r>:
 800fc90:	2300      	movs	r3, #0
 800fc92:	b570      	push	{r4, r5, r6, lr}
 800fc94:	4d06      	ldr	r5, [pc, #24]	@ (800fcb0 <_kill_r+0x20>)
 800fc96:	0004      	movs	r4, r0
 800fc98:	0008      	movs	r0, r1
 800fc9a:	0011      	movs	r1, r2
 800fc9c:	602b      	str	r3, [r5, #0]
 800fc9e:	f7f3 f839 	bl	8002d14 <_kill>
 800fca2:	1c43      	adds	r3, r0, #1
 800fca4:	d103      	bne.n	800fcae <_kill_r+0x1e>
 800fca6:	682b      	ldr	r3, [r5, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d000      	beq.n	800fcae <_kill_r+0x1e>
 800fcac:	6023      	str	r3, [r4, #0]
 800fcae:	bd70      	pop	{r4, r5, r6, pc}
 800fcb0:	20001fc8 	.word	0x20001fc8

0800fcb4 <_getpid_r>:
 800fcb4:	b510      	push	{r4, lr}
 800fcb6:	f7f3 f827 	bl	8002d08 <_getpid>
 800fcba:	bd10      	pop	{r4, pc}

0800fcbc <__swhatbuf_r>:
 800fcbc:	b570      	push	{r4, r5, r6, lr}
 800fcbe:	000e      	movs	r6, r1
 800fcc0:	001d      	movs	r5, r3
 800fcc2:	230e      	movs	r3, #14
 800fcc4:	5ec9      	ldrsh	r1, [r1, r3]
 800fcc6:	0014      	movs	r4, r2
 800fcc8:	b096      	sub	sp, #88	@ 0x58
 800fcca:	2900      	cmp	r1, #0
 800fccc:	da0c      	bge.n	800fce8 <__swhatbuf_r+0x2c>
 800fcce:	89b2      	ldrh	r2, [r6, #12]
 800fcd0:	2380      	movs	r3, #128	@ 0x80
 800fcd2:	0011      	movs	r1, r2
 800fcd4:	4019      	ands	r1, r3
 800fcd6:	421a      	tst	r2, r3
 800fcd8:	d114      	bne.n	800fd04 <__swhatbuf_r+0x48>
 800fcda:	2380      	movs	r3, #128	@ 0x80
 800fcdc:	00db      	lsls	r3, r3, #3
 800fcde:	2000      	movs	r0, #0
 800fce0:	6029      	str	r1, [r5, #0]
 800fce2:	6023      	str	r3, [r4, #0]
 800fce4:	b016      	add	sp, #88	@ 0x58
 800fce6:	bd70      	pop	{r4, r5, r6, pc}
 800fce8:	466a      	mov	r2, sp
 800fcea:	f000 f853 	bl	800fd94 <_fstat_r>
 800fcee:	2800      	cmp	r0, #0
 800fcf0:	dbed      	blt.n	800fcce <__swhatbuf_r+0x12>
 800fcf2:	23f0      	movs	r3, #240	@ 0xf0
 800fcf4:	9901      	ldr	r1, [sp, #4]
 800fcf6:	021b      	lsls	r3, r3, #8
 800fcf8:	4019      	ands	r1, r3
 800fcfa:	4b04      	ldr	r3, [pc, #16]	@ (800fd0c <__swhatbuf_r+0x50>)
 800fcfc:	18c9      	adds	r1, r1, r3
 800fcfe:	424b      	negs	r3, r1
 800fd00:	4159      	adcs	r1, r3
 800fd02:	e7ea      	b.n	800fcda <__swhatbuf_r+0x1e>
 800fd04:	2100      	movs	r1, #0
 800fd06:	2340      	movs	r3, #64	@ 0x40
 800fd08:	e7e9      	b.n	800fcde <__swhatbuf_r+0x22>
 800fd0a:	46c0      	nop			@ (mov r8, r8)
 800fd0c:	ffffe000 	.word	0xffffe000

0800fd10 <__smakebuf_r>:
 800fd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd12:	2602      	movs	r6, #2
 800fd14:	898b      	ldrh	r3, [r1, #12]
 800fd16:	0005      	movs	r5, r0
 800fd18:	000c      	movs	r4, r1
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	4233      	tst	r3, r6
 800fd1e:	d007      	beq.n	800fd30 <__smakebuf_r+0x20>
 800fd20:	0023      	movs	r3, r4
 800fd22:	3347      	adds	r3, #71	@ 0x47
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	6123      	str	r3, [r4, #16]
 800fd28:	2301      	movs	r3, #1
 800fd2a:	6163      	str	r3, [r4, #20]
 800fd2c:	b005      	add	sp, #20
 800fd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd30:	ab03      	add	r3, sp, #12
 800fd32:	aa02      	add	r2, sp, #8
 800fd34:	f7ff ffc2 	bl	800fcbc <__swhatbuf_r>
 800fd38:	9f02      	ldr	r7, [sp, #8]
 800fd3a:	9001      	str	r0, [sp, #4]
 800fd3c:	0039      	movs	r1, r7
 800fd3e:	0028      	movs	r0, r5
 800fd40:	f7ff f80c 	bl	800ed5c <_malloc_r>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d108      	bne.n	800fd5a <__smakebuf_r+0x4a>
 800fd48:	220c      	movs	r2, #12
 800fd4a:	5ea3      	ldrsh	r3, [r4, r2]
 800fd4c:	059a      	lsls	r2, r3, #22
 800fd4e:	d4ed      	bmi.n	800fd2c <__smakebuf_r+0x1c>
 800fd50:	2203      	movs	r2, #3
 800fd52:	4393      	bics	r3, r2
 800fd54:	431e      	orrs	r6, r3
 800fd56:	81a6      	strh	r6, [r4, #12]
 800fd58:	e7e2      	b.n	800fd20 <__smakebuf_r+0x10>
 800fd5a:	2380      	movs	r3, #128	@ 0x80
 800fd5c:	89a2      	ldrh	r2, [r4, #12]
 800fd5e:	6020      	str	r0, [r4, #0]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	81a3      	strh	r3, [r4, #12]
 800fd64:	9b03      	ldr	r3, [sp, #12]
 800fd66:	6120      	str	r0, [r4, #16]
 800fd68:	6167      	str	r7, [r4, #20]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00c      	beq.n	800fd88 <__smakebuf_r+0x78>
 800fd6e:	0028      	movs	r0, r5
 800fd70:	230e      	movs	r3, #14
 800fd72:	5ee1      	ldrsh	r1, [r4, r3]
 800fd74:	f000 f820 	bl	800fdb8 <_isatty_r>
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	d005      	beq.n	800fd88 <__smakebuf_r+0x78>
 800fd7c:	2303      	movs	r3, #3
 800fd7e:	89a2      	ldrh	r2, [r4, #12]
 800fd80:	439a      	bics	r2, r3
 800fd82:	3b02      	subs	r3, #2
 800fd84:	4313      	orrs	r3, r2
 800fd86:	81a3      	strh	r3, [r4, #12]
 800fd88:	89a3      	ldrh	r3, [r4, #12]
 800fd8a:	9a01      	ldr	r2, [sp, #4]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	81a3      	strh	r3, [r4, #12]
 800fd90:	e7cc      	b.n	800fd2c <__smakebuf_r+0x1c>
	...

0800fd94 <_fstat_r>:
 800fd94:	2300      	movs	r3, #0
 800fd96:	b570      	push	{r4, r5, r6, lr}
 800fd98:	4d06      	ldr	r5, [pc, #24]	@ (800fdb4 <_fstat_r+0x20>)
 800fd9a:	0004      	movs	r4, r0
 800fd9c:	0008      	movs	r0, r1
 800fd9e:	0011      	movs	r1, r2
 800fda0:	602b      	str	r3, [r5, #0]
 800fda2:	f7f3 f817 	bl	8002dd4 <_fstat>
 800fda6:	1c43      	adds	r3, r0, #1
 800fda8:	d103      	bne.n	800fdb2 <_fstat_r+0x1e>
 800fdaa:	682b      	ldr	r3, [r5, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d000      	beq.n	800fdb2 <_fstat_r+0x1e>
 800fdb0:	6023      	str	r3, [r4, #0]
 800fdb2:	bd70      	pop	{r4, r5, r6, pc}
 800fdb4:	20001fc8 	.word	0x20001fc8

0800fdb8 <_isatty_r>:
 800fdb8:	2300      	movs	r3, #0
 800fdba:	b570      	push	{r4, r5, r6, lr}
 800fdbc:	4d06      	ldr	r5, [pc, #24]	@ (800fdd8 <_isatty_r+0x20>)
 800fdbe:	0004      	movs	r4, r0
 800fdc0:	0008      	movs	r0, r1
 800fdc2:	602b      	str	r3, [r5, #0]
 800fdc4:	f7f3 f814 	bl	8002df0 <_isatty>
 800fdc8:	1c43      	adds	r3, r0, #1
 800fdca:	d103      	bne.n	800fdd4 <_isatty_r+0x1c>
 800fdcc:	682b      	ldr	r3, [r5, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d000      	beq.n	800fdd4 <_isatty_r+0x1c>
 800fdd2:	6023      	str	r3, [r4, #0]
 800fdd4:	bd70      	pop	{r4, r5, r6, pc}
 800fdd6:	46c0      	nop			@ (mov r8, r8)
 800fdd8:	20001fc8 	.word	0x20001fc8

0800fddc <_init>:
 800fddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdde:	46c0      	nop			@ (mov r8, r8)
 800fde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde2:	bc08      	pop	{r3}
 800fde4:	469e      	mov	lr, r3
 800fde6:	4770      	bx	lr

0800fde8 <_fini>:
 800fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdea:	46c0      	nop			@ (mov r8, r8)
 800fdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdee:	bc08      	pop	{r3}
 800fdf0:	469e      	mov	lr, r3
 800fdf2:	4770      	bx	lr
