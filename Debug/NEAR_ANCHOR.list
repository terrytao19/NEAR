
NEAR_ANCHOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f910  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800f9d0  0800f9d0  000109d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff74  0800ff74  0001135c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800ff74  0800ff74  0001135c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800ff74  0800ff74  0001135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff74  0800ff74  00010f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff78  0800ff78  00010f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  0800ff7c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  2000035c  080102d8  0001135c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce8  080102d8  00011ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001135c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b814  00000000  00000000  00011384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004457  00000000  00000000  0002cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  00030ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001246  00000000  00000000  00032798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064fe  00000000  00000000  000339de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f60b  00000000  00000000  00039edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a65d8  00000000  00000000  000594e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffabf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064c4  00000000  00000000  000ffb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00105fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000035c 	.word	0x2000035c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f9b8 	.word	0x0800f9b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000360 	.word	0x20000360
 8000104:	0800f9b8 	.word	0x0800f9b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffc5 	bl	80013cc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff09 	bl	8001264 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffb7 	bl	80013cc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffad 	bl	80013cc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff33 	bl	80012ec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff29 	bl	80012ec <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	b5c0      	push	{r6, r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	9000      	str	r0, [sp, #0]
 80004b6:	9101      	str	r1, [sp, #4]
 80004b8:	030e      	lsls	r6, r1, #12
 80004ba:	004c      	lsls	r4, r1, #1
 80004bc:	0fcd      	lsrs	r5, r1, #31
 80004be:	0a71      	lsrs	r1, r6, #9
 80004c0:	9e00      	ldr	r6, [sp, #0]
 80004c2:	005f      	lsls	r7, r3, #1
 80004c4:	0f76      	lsrs	r6, r6, #29
 80004c6:	430e      	orrs	r6, r1
 80004c8:	9900      	ldr	r1, [sp, #0]
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	00c9      	lsls	r1, r1, #3
 80004d0:	4689      	mov	r9, r1
 80004d2:	0319      	lsls	r1, r3, #12
 80004d4:	0d7b      	lsrs	r3, r7, #21
 80004d6:	4698      	mov	r8, r3
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	0a49      	lsrs	r1, r1, #9
 80004dc:	0fdb      	lsrs	r3, r3, #31
 80004de:	469c      	mov	ip, r3
 80004e0:	9b00      	ldr	r3, [sp, #0]
 80004e2:	9a00      	ldr	r2, [sp, #0]
 80004e4:	0f5b      	lsrs	r3, r3, #29
 80004e6:	430b      	orrs	r3, r1
 80004e8:	4641      	mov	r1, r8
 80004ea:	0d64      	lsrs	r4, r4, #21
 80004ec:	00d2      	lsls	r2, r2, #3
 80004ee:	1a61      	subs	r1, r4, r1
 80004f0:	4565      	cmp	r5, ip
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x4e>
 80004f4:	e0a6      	b.n	8000644 <__aeabi_dadd+0x19c>
 80004f6:	2900      	cmp	r1, #0
 80004f8:	dd72      	ble.n	80005e0 <__aeabi_dadd+0x138>
 80004fa:	4647      	mov	r7, r8
 80004fc:	2f00      	cmp	r7, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e0dd      	b.n	80006be <__aeabi_dadd+0x216>
 8000502:	4fcc      	ldr	r7, [pc, #816]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000504:	42bc      	cmp	r4, r7
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x62>
 8000508:	e19a      	b.n	8000840 <__aeabi_dadd+0x398>
 800050a:	2701      	movs	r7, #1
 800050c:	2938      	cmp	r1, #56	@ 0x38
 800050e:	dc17      	bgt.n	8000540 <__aeabi_dadd+0x98>
 8000510:	2780      	movs	r7, #128	@ 0x80
 8000512:	043f      	lsls	r7, r7, #16
 8000514:	433b      	orrs	r3, r7
 8000516:	291f      	cmp	r1, #31
 8000518:	dd00      	ble.n	800051c <__aeabi_dadd+0x74>
 800051a:	e1dd      	b.n	80008d8 <__aeabi_dadd+0x430>
 800051c:	2720      	movs	r7, #32
 800051e:	1a78      	subs	r0, r7, r1
 8000520:	001f      	movs	r7, r3
 8000522:	4087      	lsls	r7, r0
 8000524:	46ba      	mov	sl, r7
 8000526:	0017      	movs	r7, r2
 8000528:	40cf      	lsrs	r7, r1
 800052a:	4684      	mov	ip, r0
 800052c:	0038      	movs	r0, r7
 800052e:	4657      	mov	r7, sl
 8000530:	4307      	orrs	r7, r0
 8000532:	4660      	mov	r0, ip
 8000534:	4082      	lsls	r2, r0
 8000536:	40cb      	lsrs	r3, r1
 8000538:	1e50      	subs	r0, r2, #1
 800053a:	4182      	sbcs	r2, r0
 800053c:	1af6      	subs	r6, r6, r3
 800053e:	4317      	orrs	r7, r2
 8000540:	464b      	mov	r3, r9
 8000542:	1bdf      	subs	r7, r3, r7
 8000544:	45b9      	cmp	r9, r7
 8000546:	4180      	sbcs	r0, r0
 8000548:	4240      	negs	r0, r0
 800054a:	1a36      	subs	r6, r6, r0
 800054c:	0233      	lsls	r3, r6, #8
 800054e:	d400      	bmi.n	8000552 <__aeabi_dadd+0xaa>
 8000550:	e0ff      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000552:	0276      	lsls	r6, r6, #9
 8000554:	0a76      	lsrs	r6, r6, #9
 8000556:	2e00      	cmp	r6, #0
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xb4>
 800055a:	e13c      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800055c:	0030      	movs	r0, r6
 800055e:	f001 ff43 	bl	80023e8 <__clzsi2>
 8000562:	0003      	movs	r3, r0
 8000564:	3b08      	subs	r3, #8
 8000566:	2120      	movs	r1, #32
 8000568:	0038      	movs	r0, r7
 800056a:	1aca      	subs	r2, r1, r3
 800056c:	40d0      	lsrs	r0, r2
 800056e:	409e      	lsls	r6, r3
 8000570:	0002      	movs	r2, r0
 8000572:	409f      	lsls	r7, r3
 8000574:	4332      	orrs	r2, r6
 8000576:	429c      	cmp	r4, r3
 8000578:	dd00      	ble.n	800057c <__aeabi_dadd+0xd4>
 800057a:	e1a6      	b.n	80008ca <__aeabi_dadd+0x422>
 800057c:	1b18      	subs	r0, r3, r4
 800057e:	3001      	adds	r0, #1
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	003e      	movs	r6, r7
 8000584:	408f      	lsls	r7, r1
 8000586:	40c6      	lsrs	r6, r0
 8000588:	1e7b      	subs	r3, r7, #1
 800058a:	419f      	sbcs	r7, r3
 800058c:	0013      	movs	r3, r2
 800058e:	408b      	lsls	r3, r1
 8000590:	4337      	orrs	r7, r6
 8000592:	431f      	orrs	r7, r3
 8000594:	40c2      	lsrs	r2, r0
 8000596:	003b      	movs	r3, r7
 8000598:	0016      	movs	r6, r2
 800059a:	2400      	movs	r4, #0
 800059c:	4313      	orrs	r3, r2
 800059e:	d100      	bne.n	80005a2 <__aeabi_dadd+0xfa>
 80005a0:	e1df      	b.n	8000962 <__aeabi_dadd+0x4ba>
 80005a2:	077b      	lsls	r3, r7, #29
 80005a4:	d100      	bne.n	80005a8 <__aeabi_dadd+0x100>
 80005a6:	e332      	b.n	8000c0e <__aeabi_dadd+0x766>
 80005a8:	230f      	movs	r3, #15
 80005aa:	003a      	movs	r2, r7
 80005ac:	403b      	ands	r3, r7
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d004      	beq.n	80005bc <__aeabi_dadd+0x114>
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	42ba      	cmp	r2, r7
 80005b6:	41bf      	sbcs	r7, r7
 80005b8:	427f      	negs	r7, r7
 80005ba:	19f6      	adds	r6, r6, r7
 80005bc:	0233      	lsls	r3, r6, #8
 80005be:	d400      	bmi.n	80005c2 <__aeabi_dadd+0x11a>
 80005c0:	e323      	b.n	8000c0a <__aeabi_dadd+0x762>
 80005c2:	4b9c      	ldr	r3, [pc, #624]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c4:	3401      	adds	r4, #1
 80005c6:	429c      	cmp	r4, r3
 80005c8:	d100      	bne.n	80005cc <__aeabi_dadd+0x124>
 80005ca:	e0b4      	b.n	8000736 <__aeabi_dadd+0x28e>
 80005cc:	4b9a      	ldr	r3, [pc, #616]	@ (8000838 <__aeabi_dadd+0x390>)
 80005ce:	0564      	lsls	r4, r4, #21
 80005d0:	401e      	ands	r6, r3
 80005d2:	0d64      	lsrs	r4, r4, #21
 80005d4:	0777      	lsls	r7, r6, #29
 80005d6:	08d2      	lsrs	r2, r2, #3
 80005d8:	0276      	lsls	r6, r6, #9
 80005da:	4317      	orrs	r7, r2
 80005dc:	0b36      	lsrs	r6, r6, #12
 80005de:	e0ac      	b.n	800073a <__aeabi_dadd+0x292>
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x13e>
 80005e4:	e07e      	b.n	80006e4 <__aeabi_dadd+0x23c>
 80005e6:	4641      	mov	r1, r8
 80005e8:	1b09      	subs	r1, r1, r4
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_dadd+0x148>
 80005ee:	e160      	b.n	80008b2 <__aeabi_dadd+0x40a>
 80005f0:	0034      	movs	r4, r6
 80005f2:	4648      	mov	r0, r9
 80005f4:	4304      	orrs	r4, r0
 80005f6:	d100      	bne.n	80005fa <__aeabi_dadd+0x152>
 80005f8:	e1c9      	b.n	800098e <__aeabi_dadd+0x4e6>
 80005fa:	1e4c      	subs	r4, r1, #1
 80005fc:	2901      	cmp	r1, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e22e      	b.n	8000a60 <__aeabi_dadd+0x5b8>
 8000602:	4d8c      	ldr	r5, [pc, #560]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000604:	42a9      	cmp	r1, r5
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e224      	b.n	8000a54 <__aeabi_dadd+0x5ac>
 800060a:	2701      	movs	r7, #1
 800060c:	2c38      	cmp	r4, #56	@ 0x38
 800060e:	dc11      	bgt.n	8000634 <__aeabi_dadd+0x18c>
 8000610:	0021      	movs	r1, r4
 8000612:	291f      	cmp	r1, #31
 8000614:	dd00      	ble.n	8000618 <__aeabi_dadd+0x170>
 8000616:	e20b      	b.n	8000a30 <__aeabi_dadd+0x588>
 8000618:	2420      	movs	r4, #32
 800061a:	0037      	movs	r7, r6
 800061c:	4648      	mov	r0, r9
 800061e:	1a64      	subs	r4, r4, r1
 8000620:	40a7      	lsls	r7, r4
 8000622:	40c8      	lsrs	r0, r1
 8000624:	4307      	orrs	r7, r0
 8000626:	4648      	mov	r0, r9
 8000628:	40a0      	lsls	r0, r4
 800062a:	40ce      	lsrs	r6, r1
 800062c:	1e44      	subs	r4, r0, #1
 800062e:	41a0      	sbcs	r0, r4
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	4307      	orrs	r7, r0
 8000634:	1bd7      	subs	r7, r2, r7
 8000636:	42ba      	cmp	r2, r7
 8000638:	4192      	sbcs	r2, r2
 800063a:	4252      	negs	r2, r2
 800063c:	4665      	mov	r5, ip
 800063e:	4644      	mov	r4, r8
 8000640:	1a9e      	subs	r6, r3, r2
 8000642:	e783      	b.n	800054c <__aeabi_dadd+0xa4>
 8000644:	2900      	cmp	r1, #0
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e09c      	b.n	8000784 <__aeabi_dadd+0x2dc>
 800064a:	4647      	mov	r7, r8
 800064c:	2f00      	cmp	r7, #0
 800064e:	d167      	bne.n	8000720 <__aeabi_dadd+0x278>
 8000650:	001f      	movs	r7, r3
 8000652:	4317      	orrs	r7, r2
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x1b0>
 8000656:	e0e4      	b.n	8000822 <__aeabi_dadd+0x37a>
 8000658:	1e48      	subs	r0, r1, #1
 800065a:	2901      	cmp	r1, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x1b8>
 800065e:	e19b      	b.n	8000998 <__aeabi_dadd+0x4f0>
 8000660:	4f74      	ldr	r7, [pc, #464]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000662:	42b9      	cmp	r1, r7
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x1c0>
 8000666:	e0eb      	b.n	8000840 <__aeabi_dadd+0x398>
 8000668:	2701      	movs	r7, #1
 800066a:	0001      	movs	r1, r0
 800066c:	2838      	cmp	r0, #56	@ 0x38
 800066e:	dc11      	bgt.n	8000694 <__aeabi_dadd+0x1ec>
 8000670:	291f      	cmp	r1, #31
 8000672:	dd00      	ble.n	8000676 <__aeabi_dadd+0x1ce>
 8000674:	e1c7      	b.n	8000a06 <__aeabi_dadd+0x55e>
 8000676:	2720      	movs	r7, #32
 8000678:	1a78      	subs	r0, r7, r1
 800067a:	001f      	movs	r7, r3
 800067c:	4684      	mov	ip, r0
 800067e:	4087      	lsls	r7, r0
 8000680:	0010      	movs	r0, r2
 8000682:	40c8      	lsrs	r0, r1
 8000684:	4307      	orrs	r7, r0
 8000686:	4660      	mov	r0, ip
 8000688:	4082      	lsls	r2, r0
 800068a:	40cb      	lsrs	r3, r1
 800068c:	1e50      	subs	r0, r2, #1
 800068e:	4182      	sbcs	r2, r0
 8000690:	18f6      	adds	r6, r6, r3
 8000692:	4317      	orrs	r7, r2
 8000694:	444f      	add	r7, r9
 8000696:	454f      	cmp	r7, r9
 8000698:	4180      	sbcs	r0, r0
 800069a:	4240      	negs	r0, r0
 800069c:	1836      	adds	r6, r6, r0
 800069e:	0233      	lsls	r3, r6, #8
 80006a0:	d557      	bpl.n	8000752 <__aeabi_dadd+0x2aa>
 80006a2:	4b64      	ldr	r3, [pc, #400]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006a4:	3401      	adds	r4, #1
 80006a6:	429c      	cmp	r4, r3
 80006a8:	d045      	beq.n	8000736 <__aeabi_dadd+0x28e>
 80006aa:	2101      	movs	r1, #1
 80006ac:	4b62      	ldr	r3, [pc, #392]	@ (8000838 <__aeabi_dadd+0x390>)
 80006ae:	087a      	lsrs	r2, r7, #1
 80006b0:	401e      	ands	r6, r3
 80006b2:	4039      	ands	r1, r7
 80006b4:	430a      	orrs	r2, r1
 80006b6:	07f7      	lsls	r7, r6, #31
 80006b8:	4317      	orrs	r7, r2
 80006ba:	0876      	lsrs	r6, r6, #1
 80006bc:	e771      	b.n	80005a2 <__aeabi_dadd+0xfa>
 80006be:	001f      	movs	r7, r3
 80006c0:	4317      	orrs	r7, r2
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x21e>
 80006c4:	e0ad      	b.n	8000822 <__aeabi_dadd+0x37a>
 80006c6:	1e4f      	subs	r7, r1, #1
 80006c8:	46bc      	mov	ip, r7
 80006ca:	2901      	cmp	r1, #1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e182      	b.n	80009d6 <__aeabi_dadd+0x52e>
 80006d0:	4f58      	ldr	r7, [pc, #352]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006d2:	42b9      	cmp	r1, r7
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x230>
 80006d6:	e190      	b.n	80009fa <__aeabi_dadd+0x552>
 80006d8:	4661      	mov	r1, ip
 80006da:	2701      	movs	r7, #1
 80006dc:	2938      	cmp	r1, #56	@ 0x38
 80006de:	dd00      	ble.n	80006e2 <__aeabi_dadd+0x23a>
 80006e0:	e72e      	b.n	8000540 <__aeabi_dadd+0x98>
 80006e2:	e718      	b.n	8000516 <__aeabi_dadd+0x6e>
 80006e4:	4f55      	ldr	r7, [pc, #340]	@ (800083c <__aeabi_dadd+0x394>)
 80006e6:	1c61      	adds	r1, r4, #1
 80006e8:	4239      	tst	r1, r7
 80006ea:	d000      	beq.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e0d0      	b.n	8000890 <__aeabi_dadd+0x3e8>
 80006ee:	0031      	movs	r1, r6
 80006f0:	4648      	mov	r0, r9
 80006f2:	001f      	movs	r7, r3
 80006f4:	4301      	orrs	r1, r0
 80006f6:	4317      	orrs	r7, r2
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d000      	beq.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e13d      	b.n	800097a <__aeabi_dadd+0x4d2>
 80006fe:	2900      	cmp	r1, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x25c>
 8000702:	e1bc      	b.n	8000a7e <__aeabi_dadd+0x5d6>
 8000704:	2f00      	cmp	r7, #0
 8000706:	d000      	beq.n	800070a <__aeabi_dadd+0x262>
 8000708:	e1bf      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 800070a:	464b      	mov	r3, r9
 800070c:	2100      	movs	r1, #0
 800070e:	08d8      	lsrs	r0, r3, #3
 8000710:	0777      	lsls	r7, r6, #29
 8000712:	4307      	orrs	r7, r0
 8000714:	08f0      	lsrs	r0, r6, #3
 8000716:	0306      	lsls	r6, r0, #12
 8000718:	054c      	lsls	r4, r1, #21
 800071a:	0b36      	lsrs	r6, r6, #12
 800071c:	0d64      	lsrs	r4, r4, #21
 800071e:	e00c      	b.n	800073a <__aeabi_dadd+0x292>
 8000720:	4f44      	ldr	r7, [pc, #272]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000722:	42bc      	cmp	r4, r7
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e08b      	b.n	8000840 <__aeabi_dadd+0x398>
 8000728:	2701      	movs	r7, #1
 800072a:	2938      	cmp	r1, #56	@ 0x38
 800072c:	dcb2      	bgt.n	8000694 <__aeabi_dadd+0x1ec>
 800072e:	2780      	movs	r7, #128	@ 0x80
 8000730:	043f      	lsls	r7, r7, #16
 8000732:	433b      	orrs	r3, r7
 8000734:	e79c      	b.n	8000670 <__aeabi_dadd+0x1c8>
 8000736:	2600      	movs	r6, #0
 8000738:	2700      	movs	r7, #0
 800073a:	0524      	lsls	r4, r4, #20
 800073c:	4334      	orrs	r4, r6
 800073e:	07ed      	lsls	r5, r5, #31
 8000740:	432c      	orrs	r4, r5
 8000742:	0038      	movs	r0, r7
 8000744:	0021      	movs	r1, r4
 8000746:	b002      	add	sp, #8
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	077b      	lsls	r3, r7, #29
 8000754:	d004      	beq.n	8000760 <__aeabi_dadd+0x2b8>
 8000756:	230f      	movs	r3, #15
 8000758:	403b      	ands	r3, r7
 800075a:	2b04      	cmp	r3, #4
 800075c:	d000      	beq.n	8000760 <__aeabi_dadd+0x2b8>
 800075e:	e728      	b.n	80005b2 <__aeabi_dadd+0x10a>
 8000760:	08f8      	lsrs	r0, r7, #3
 8000762:	4b34      	ldr	r3, [pc, #208]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000764:	0777      	lsls	r7, r6, #29
 8000766:	4307      	orrs	r7, r0
 8000768:	08f0      	lsrs	r0, r6, #3
 800076a:	429c      	cmp	r4, r3
 800076c:	d000      	beq.n	8000770 <__aeabi_dadd+0x2c8>
 800076e:	e24a      	b.n	8000c06 <__aeabi_dadd+0x75e>
 8000770:	003b      	movs	r3, r7
 8000772:	4303      	orrs	r3, r0
 8000774:	d059      	beq.n	800082a <__aeabi_dadd+0x382>
 8000776:	2680      	movs	r6, #128	@ 0x80
 8000778:	0336      	lsls	r6, r6, #12
 800077a:	4306      	orrs	r6, r0
 800077c:	0336      	lsls	r6, r6, #12
 800077e:	4c2d      	ldr	r4, [pc, #180]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000780:	0b36      	lsrs	r6, r6, #12
 8000782:	e7da      	b.n	800073a <__aeabi_dadd+0x292>
 8000784:	2900      	cmp	r1, #0
 8000786:	d061      	beq.n	800084c <__aeabi_dadd+0x3a4>
 8000788:	4641      	mov	r1, r8
 800078a:	1b09      	subs	r1, r1, r4
 800078c:	2c00      	cmp	r4, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x2ea>
 8000790:	e0b9      	b.n	8000906 <__aeabi_dadd+0x45e>
 8000792:	4c28      	ldr	r4, [pc, #160]	@ (8000834 <__aeabi_dadd+0x38c>)
 8000794:	45a0      	cmp	r8, r4
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x2f2>
 8000798:	e1a5      	b.n	8000ae6 <__aeabi_dadd+0x63e>
 800079a:	2701      	movs	r7, #1
 800079c:	2938      	cmp	r1, #56	@ 0x38
 800079e:	dc13      	bgt.n	80007c8 <__aeabi_dadd+0x320>
 80007a0:	2480      	movs	r4, #128	@ 0x80
 80007a2:	0424      	lsls	r4, r4, #16
 80007a4:	4326      	orrs	r6, r4
 80007a6:	291f      	cmp	r1, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e1c8      	b.n	8000b3e <__aeabi_dadd+0x696>
 80007ac:	2420      	movs	r4, #32
 80007ae:	0037      	movs	r7, r6
 80007b0:	4648      	mov	r0, r9
 80007b2:	1a64      	subs	r4, r4, r1
 80007b4:	40a7      	lsls	r7, r4
 80007b6:	40c8      	lsrs	r0, r1
 80007b8:	4307      	orrs	r7, r0
 80007ba:	4648      	mov	r0, r9
 80007bc:	40a0      	lsls	r0, r4
 80007be:	40ce      	lsrs	r6, r1
 80007c0:	1e44      	subs	r4, r0, #1
 80007c2:	41a0      	sbcs	r0, r4
 80007c4:	199b      	adds	r3, r3, r6
 80007c6:	4307      	orrs	r7, r0
 80007c8:	18bf      	adds	r7, r7, r2
 80007ca:	4297      	cmp	r7, r2
 80007cc:	4192      	sbcs	r2, r2
 80007ce:	4252      	negs	r2, r2
 80007d0:	4644      	mov	r4, r8
 80007d2:	18d6      	adds	r6, r2, r3
 80007d4:	e763      	b.n	800069e <__aeabi_dadd+0x1f6>
 80007d6:	0038      	movs	r0, r7
 80007d8:	f001 fe06 	bl	80023e8 <__clzsi2>
 80007dc:	0003      	movs	r3, r0
 80007de:	3318      	adds	r3, #24
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	dc00      	bgt.n	80007e6 <__aeabi_dadd+0x33e>
 80007e4:	e6bf      	b.n	8000566 <__aeabi_dadd+0xbe>
 80007e6:	003a      	movs	r2, r7
 80007e8:	3808      	subs	r0, #8
 80007ea:	4082      	lsls	r2, r0
 80007ec:	429c      	cmp	r4, r3
 80007ee:	dd00      	ble.n	80007f2 <__aeabi_dadd+0x34a>
 80007f0:	e083      	b.n	80008fa <__aeabi_dadd+0x452>
 80007f2:	1b1b      	subs	r3, r3, r4
 80007f4:	1c58      	adds	r0, r3, #1
 80007f6:	281f      	cmp	r0, #31
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x354>
 80007fa:	e1b4      	b.n	8000b66 <__aeabi_dadd+0x6be>
 80007fc:	0017      	movs	r7, r2
 80007fe:	3b1f      	subs	r3, #31
 8000800:	40df      	lsrs	r7, r3
 8000802:	2820      	cmp	r0, #32
 8000804:	d005      	beq.n	8000812 <__aeabi_dadd+0x36a>
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	1a1b      	subs	r3, r3, r0
 800080a:	409a      	lsls	r2, r3
 800080c:	1e53      	subs	r3, r2, #1
 800080e:	419a      	sbcs	r2, r3
 8000810:	4317      	orrs	r7, r2
 8000812:	2400      	movs	r4, #0
 8000814:	2f00      	cmp	r7, #0
 8000816:	d00a      	beq.n	800082e <__aeabi_dadd+0x386>
 8000818:	077b      	lsls	r3, r7, #29
 800081a:	d000      	beq.n	800081e <__aeabi_dadd+0x376>
 800081c:	e6c4      	b.n	80005a8 <__aeabi_dadd+0x100>
 800081e:	0026      	movs	r6, r4
 8000820:	e79e      	b.n	8000760 <__aeabi_dadd+0x2b8>
 8000822:	464b      	mov	r3, r9
 8000824:	000c      	movs	r4, r1
 8000826:	08d8      	lsrs	r0, r3, #3
 8000828:	e79b      	b.n	8000762 <__aeabi_dadd+0x2ba>
 800082a:	2700      	movs	r7, #0
 800082c:	4c01      	ldr	r4, [pc, #4]	@ (8000834 <__aeabi_dadd+0x38c>)
 800082e:	2600      	movs	r6, #0
 8000830:	e783      	b.n	800073a <__aeabi_dadd+0x292>
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	000007ff 	.word	0x000007ff
 8000838:	ff7fffff 	.word	0xff7fffff
 800083c:	000007fe 	.word	0x000007fe
 8000840:	464b      	mov	r3, r9
 8000842:	0777      	lsls	r7, r6, #29
 8000844:	08d8      	lsrs	r0, r3, #3
 8000846:	4307      	orrs	r7, r0
 8000848:	08f0      	lsrs	r0, r6, #3
 800084a:	e791      	b.n	8000770 <__aeabi_dadd+0x2c8>
 800084c:	4fcd      	ldr	r7, [pc, #820]	@ (8000b84 <__aeabi_dadd+0x6dc>)
 800084e:	1c61      	adds	r1, r4, #1
 8000850:	4239      	tst	r1, r7
 8000852:	d16b      	bne.n	800092c <__aeabi_dadd+0x484>
 8000854:	0031      	movs	r1, r6
 8000856:	4648      	mov	r0, r9
 8000858:	4301      	orrs	r1, r0
 800085a:	2c00      	cmp	r4, #0
 800085c:	d000      	beq.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e14b      	b.n	8000af8 <__aeabi_dadd+0x650>
 8000860:	001f      	movs	r7, r3
 8000862:	4317      	orrs	r7, r2
 8000864:	2900      	cmp	r1, #0
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x3c2>
 8000868:	e181      	b.n	8000b6e <__aeabi_dadd+0x6c6>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x3c8>
 800086e:	e74c      	b.n	800070a <__aeabi_dadd+0x262>
 8000870:	444a      	add	r2, r9
 8000872:	454a      	cmp	r2, r9
 8000874:	4180      	sbcs	r0, r0
 8000876:	18f6      	adds	r6, r6, r3
 8000878:	4240      	negs	r0, r0
 800087a:	1836      	adds	r6, r6, r0
 800087c:	0233      	lsls	r3, r6, #8
 800087e:	d500      	bpl.n	8000882 <__aeabi_dadd+0x3da>
 8000880:	e1b0      	b.n	8000be4 <__aeabi_dadd+0x73c>
 8000882:	0017      	movs	r7, r2
 8000884:	4691      	mov	r9, r2
 8000886:	4337      	orrs	r7, r6
 8000888:	d000      	beq.n	800088c <__aeabi_dadd+0x3e4>
 800088a:	e73e      	b.n	800070a <__aeabi_dadd+0x262>
 800088c:	2600      	movs	r6, #0
 800088e:	e754      	b.n	800073a <__aeabi_dadd+0x292>
 8000890:	4649      	mov	r1, r9
 8000892:	1a89      	subs	r1, r1, r2
 8000894:	4688      	mov	r8, r1
 8000896:	45c1      	cmp	r9, r8
 8000898:	41bf      	sbcs	r7, r7
 800089a:	1af1      	subs	r1, r6, r3
 800089c:	427f      	negs	r7, r7
 800089e:	1bc9      	subs	r1, r1, r7
 80008a0:	020f      	lsls	r7, r1, #8
 80008a2:	d461      	bmi.n	8000968 <__aeabi_dadd+0x4c0>
 80008a4:	4647      	mov	r7, r8
 80008a6:	430f      	orrs	r7, r1
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x404>
 80008aa:	e0bd      	b.n	8000a28 <__aeabi_dadd+0x580>
 80008ac:	000e      	movs	r6, r1
 80008ae:	4647      	mov	r7, r8
 80008b0:	e651      	b.n	8000556 <__aeabi_dadd+0xae>
 80008b2:	4cb5      	ldr	r4, [pc, #724]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 80008b4:	45a0      	cmp	r8, r4
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x412>
 80008b8:	e100      	b.n	8000abc <__aeabi_dadd+0x614>
 80008ba:	2701      	movs	r7, #1
 80008bc:	2938      	cmp	r1, #56	@ 0x38
 80008be:	dd00      	ble.n	80008c2 <__aeabi_dadd+0x41a>
 80008c0:	e6b8      	b.n	8000634 <__aeabi_dadd+0x18c>
 80008c2:	2480      	movs	r4, #128	@ 0x80
 80008c4:	0424      	lsls	r4, r4, #16
 80008c6:	4326      	orrs	r6, r4
 80008c8:	e6a3      	b.n	8000612 <__aeabi_dadd+0x16a>
 80008ca:	4eb0      	ldr	r6, [pc, #704]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80008cc:	1ae4      	subs	r4, r4, r3
 80008ce:	4016      	ands	r6, r2
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e73f      	b.n	8000756 <__aeabi_dadd+0x2ae>
 80008d6:	e743      	b.n	8000760 <__aeabi_dadd+0x2b8>
 80008d8:	000f      	movs	r7, r1
 80008da:	0018      	movs	r0, r3
 80008dc:	3f20      	subs	r7, #32
 80008de:	40f8      	lsrs	r0, r7
 80008e0:	4684      	mov	ip, r0
 80008e2:	2920      	cmp	r1, #32
 80008e4:	d003      	beq.n	80008ee <__aeabi_dadd+0x446>
 80008e6:	2740      	movs	r7, #64	@ 0x40
 80008e8:	1a79      	subs	r1, r7, r1
 80008ea:	408b      	lsls	r3, r1
 80008ec:	431a      	orrs	r2, r3
 80008ee:	1e53      	subs	r3, r2, #1
 80008f0:	419a      	sbcs	r2, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	0017      	movs	r7, r2
 80008f6:	431f      	orrs	r7, r3
 80008f8:	e622      	b.n	8000540 <__aeabi_dadd+0x98>
 80008fa:	48a4      	ldr	r0, [pc, #656]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80008fc:	1ae1      	subs	r1, r4, r3
 80008fe:	4010      	ands	r0, r2
 8000900:	0747      	lsls	r7, r0, #29
 8000902:	08c0      	lsrs	r0, r0, #3
 8000904:	e707      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000906:	0034      	movs	r4, r6
 8000908:	4648      	mov	r0, r9
 800090a:	4304      	orrs	r4, r0
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x468>
 800090e:	e0fa      	b.n	8000b06 <__aeabi_dadd+0x65e>
 8000910:	1e4c      	subs	r4, r1, #1
 8000912:	2901      	cmp	r1, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x470>
 8000916:	e0d7      	b.n	8000ac8 <__aeabi_dadd+0x620>
 8000918:	4f9b      	ldr	r7, [pc, #620]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800091a:	42b9      	cmp	r1, r7
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x478>
 800091e:	e0e2      	b.n	8000ae6 <__aeabi_dadd+0x63e>
 8000920:	2701      	movs	r7, #1
 8000922:	2c38      	cmp	r4, #56	@ 0x38
 8000924:	dd00      	ble.n	8000928 <__aeabi_dadd+0x480>
 8000926:	e74f      	b.n	80007c8 <__aeabi_dadd+0x320>
 8000928:	0021      	movs	r1, r4
 800092a:	e73c      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 800092c:	4c96      	ldr	r4, [pc, #600]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800092e:	42a1      	cmp	r1, r4
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x48c>
 8000932:	e0dd      	b.n	8000af0 <__aeabi_dadd+0x648>
 8000934:	444a      	add	r2, r9
 8000936:	454a      	cmp	r2, r9
 8000938:	4180      	sbcs	r0, r0
 800093a:	18f3      	adds	r3, r6, r3
 800093c:	4240      	negs	r0, r0
 800093e:	1818      	adds	r0, r3, r0
 8000940:	07c7      	lsls	r7, r0, #31
 8000942:	0852      	lsrs	r2, r2, #1
 8000944:	4317      	orrs	r7, r2
 8000946:	0846      	lsrs	r6, r0, #1
 8000948:	0752      	lsls	r2, r2, #29
 800094a:	d005      	beq.n	8000958 <__aeabi_dadd+0x4b0>
 800094c:	220f      	movs	r2, #15
 800094e:	000c      	movs	r4, r1
 8000950:	403a      	ands	r2, r7
 8000952:	2a04      	cmp	r2, #4
 8000954:	d000      	beq.n	8000958 <__aeabi_dadd+0x4b0>
 8000956:	e62c      	b.n	80005b2 <__aeabi_dadd+0x10a>
 8000958:	0776      	lsls	r6, r6, #29
 800095a:	08ff      	lsrs	r7, r7, #3
 800095c:	4337      	orrs	r7, r6
 800095e:	0900      	lsrs	r0, r0, #4
 8000960:	e6d9      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000962:	2700      	movs	r7, #0
 8000964:	2600      	movs	r6, #0
 8000966:	e6e8      	b.n	800073a <__aeabi_dadd+0x292>
 8000968:	4649      	mov	r1, r9
 800096a:	1a57      	subs	r7, r2, r1
 800096c:	42ba      	cmp	r2, r7
 800096e:	4192      	sbcs	r2, r2
 8000970:	1b9e      	subs	r6, r3, r6
 8000972:	4252      	negs	r2, r2
 8000974:	4665      	mov	r5, ip
 8000976:	1ab6      	subs	r6, r6, r2
 8000978:	e5ed      	b.n	8000556 <__aeabi_dadd+0xae>
 800097a:	2900      	cmp	r1, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_dadd+0x4d8>
 800097e:	e0c6      	b.n	8000b0e <__aeabi_dadd+0x666>
 8000980:	2f00      	cmp	r7, #0
 8000982:	d167      	bne.n	8000a54 <__aeabi_dadd+0x5ac>
 8000984:	2680      	movs	r6, #128	@ 0x80
 8000986:	2500      	movs	r5, #0
 8000988:	4c7f      	ldr	r4, [pc, #508]	@ (8000b88 <__aeabi_dadd+0x6e0>)
 800098a:	0336      	lsls	r6, r6, #12
 800098c:	e6d5      	b.n	800073a <__aeabi_dadd+0x292>
 800098e:	4665      	mov	r5, ip
 8000990:	000c      	movs	r4, r1
 8000992:	001e      	movs	r6, r3
 8000994:	08d0      	lsrs	r0, r2, #3
 8000996:	e6e4      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000998:	444a      	add	r2, r9
 800099a:	454a      	cmp	r2, r9
 800099c:	4180      	sbcs	r0, r0
 800099e:	18f3      	adds	r3, r6, r3
 80009a0:	4240      	negs	r0, r0
 80009a2:	1818      	adds	r0, r3, r0
 80009a4:	0011      	movs	r1, r2
 80009a6:	0203      	lsls	r3, r0, #8
 80009a8:	d400      	bmi.n	80009ac <__aeabi_dadd+0x504>
 80009aa:	e096      	b.n	8000ada <__aeabi_dadd+0x632>
 80009ac:	4b77      	ldr	r3, [pc, #476]	@ (8000b8c <__aeabi_dadd+0x6e4>)
 80009ae:	0849      	lsrs	r1, r1, #1
 80009b0:	4018      	ands	r0, r3
 80009b2:	07c3      	lsls	r3, r0, #31
 80009b4:	430b      	orrs	r3, r1
 80009b6:	0844      	lsrs	r4, r0, #1
 80009b8:	0749      	lsls	r1, r1, #29
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x516>
 80009bc:	e129      	b.n	8000c12 <__aeabi_dadd+0x76a>
 80009be:	220f      	movs	r2, #15
 80009c0:	401a      	ands	r2, r3
 80009c2:	2a04      	cmp	r2, #4
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x520>
 80009c6:	e0ea      	b.n	8000b9e <__aeabi_dadd+0x6f6>
 80009c8:	1d1f      	adds	r7, r3, #4
 80009ca:	429f      	cmp	r7, r3
 80009cc:	41b6      	sbcs	r6, r6
 80009ce:	4276      	negs	r6, r6
 80009d0:	1936      	adds	r6, r6, r4
 80009d2:	2402      	movs	r4, #2
 80009d4:	e6c4      	b.n	8000760 <__aeabi_dadd+0x2b8>
 80009d6:	4649      	mov	r1, r9
 80009d8:	1a8f      	subs	r7, r1, r2
 80009da:	45b9      	cmp	r9, r7
 80009dc:	4180      	sbcs	r0, r0
 80009de:	1af6      	subs	r6, r6, r3
 80009e0:	4240      	negs	r0, r0
 80009e2:	1a36      	subs	r6, r6, r0
 80009e4:	0233      	lsls	r3, r6, #8
 80009e6:	d406      	bmi.n	80009f6 <__aeabi_dadd+0x54e>
 80009e8:	0773      	lsls	r3, r6, #29
 80009ea:	08ff      	lsrs	r7, r7, #3
 80009ec:	2101      	movs	r1, #1
 80009ee:	431f      	orrs	r7, r3
 80009f0:	08f0      	lsrs	r0, r6, #3
 80009f2:	e690      	b.n	8000716 <__aeabi_dadd+0x26e>
 80009f4:	4665      	mov	r5, ip
 80009f6:	2401      	movs	r4, #1
 80009f8:	e5ab      	b.n	8000552 <__aeabi_dadd+0xaa>
 80009fa:	464b      	mov	r3, r9
 80009fc:	0777      	lsls	r7, r6, #29
 80009fe:	08d8      	lsrs	r0, r3, #3
 8000a00:	4307      	orrs	r7, r0
 8000a02:	08f0      	lsrs	r0, r6, #3
 8000a04:	e6b4      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000a06:	000f      	movs	r7, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	3f20      	subs	r7, #32
 8000a0c:	40f8      	lsrs	r0, r7
 8000a0e:	4684      	mov	ip, r0
 8000a10:	2920      	cmp	r1, #32
 8000a12:	d003      	beq.n	8000a1c <__aeabi_dadd+0x574>
 8000a14:	2740      	movs	r7, #64	@ 0x40
 8000a16:	1a79      	subs	r1, r7, r1
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	1e53      	subs	r3, r2, #1
 8000a1e:	419a      	sbcs	r2, r3
 8000a20:	4663      	mov	r3, ip
 8000a22:	0017      	movs	r7, r2
 8000a24:	431f      	orrs	r7, r3
 8000a26:	e635      	b.n	8000694 <__aeabi_dadd+0x1ec>
 8000a28:	2500      	movs	r5, #0
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e684      	b.n	800073a <__aeabi_dadd+0x292>
 8000a30:	000c      	movs	r4, r1
 8000a32:	0035      	movs	r5, r6
 8000a34:	3c20      	subs	r4, #32
 8000a36:	40e5      	lsrs	r5, r4
 8000a38:	2920      	cmp	r1, #32
 8000a3a:	d005      	beq.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a3c:	2440      	movs	r4, #64	@ 0x40
 8000a3e:	1a61      	subs	r1, r4, r1
 8000a40:	408e      	lsls	r6, r1
 8000a42:	4649      	mov	r1, r9
 8000a44:	4331      	orrs	r1, r6
 8000a46:	4689      	mov	r9, r1
 8000a48:	4648      	mov	r0, r9
 8000a4a:	1e41      	subs	r1, r0, #1
 8000a4c:	4188      	sbcs	r0, r1
 8000a4e:	0007      	movs	r7, r0
 8000a50:	432f      	orrs	r7, r5
 8000a52:	e5ef      	b.n	8000634 <__aeabi_dadd+0x18c>
 8000a54:	08d2      	lsrs	r2, r2, #3
 8000a56:	075f      	lsls	r7, r3, #29
 8000a58:	4665      	mov	r5, ip
 8000a5a:	4317      	orrs	r7, r2
 8000a5c:	08d8      	lsrs	r0, r3, #3
 8000a5e:	e687      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000a60:	1a17      	subs	r7, r2, r0
 8000a62:	42ba      	cmp	r2, r7
 8000a64:	4192      	sbcs	r2, r2
 8000a66:	1b9e      	subs	r6, r3, r6
 8000a68:	4252      	negs	r2, r2
 8000a6a:	1ab6      	subs	r6, r6, r2
 8000a6c:	0233      	lsls	r3, r6, #8
 8000a6e:	d4c1      	bmi.n	80009f4 <__aeabi_dadd+0x54c>
 8000a70:	0773      	lsls	r3, r6, #29
 8000a72:	08ff      	lsrs	r7, r7, #3
 8000a74:	4665      	mov	r5, ip
 8000a76:	2101      	movs	r1, #1
 8000a78:	431f      	orrs	r7, r3
 8000a7a:	08f0      	lsrs	r0, r6, #3
 8000a7c:	e64b      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d07b      	beq.n	8000b7a <__aeabi_dadd+0x6d2>
 8000a82:	4665      	mov	r5, ip
 8000a84:	001e      	movs	r6, r3
 8000a86:	4691      	mov	r9, r2
 8000a88:	e63f      	b.n	800070a <__aeabi_dadd+0x262>
 8000a8a:	1a81      	subs	r1, r0, r2
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	45c1      	cmp	r9, r8
 8000a90:	41a4      	sbcs	r4, r4
 8000a92:	1af1      	subs	r1, r6, r3
 8000a94:	4264      	negs	r4, r4
 8000a96:	1b09      	subs	r1, r1, r4
 8000a98:	2480      	movs	r4, #128	@ 0x80
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	4221      	tst	r1, r4
 8000a9e:	d077      	beq.n	8000b90 <__aeabi_dadd+0x6e8>
 8000aa0:	1a10      	subs	r0, r2, r0
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	4192      	sbcs	r2, r2
 8000aa6:	0007      	movs	r7, r0
 8000aa8:	1b9e      	subs	r6, r3, r6
 8000aaa:	4252      	negs	r2, r2
 8000aac:	1ab6      	subs	r6, r6, r2
 8000aae:	4337      	orrs	r7, r6
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x60c>
 8000ab2:	e0a0      	b.n	8000bf6 <__aeabi_dadd+0x74e>
 8000ab4:	4665      	mov	r5, ip
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	2600      	movs	r6, #0
 8000aba:	e63e      	b.n	800073a <__aeabi_dadd+0x292>
 8000abc:	075f      	lsls	r7, r3, #29
 8000abe:	08d2      	lsrs	r2, r2, #3
 8000ac0:	4665      	mov	r5, ip
 8000ac2:	4317      	orrs	r7, r2
 8000ac4:	08d8      	lsrs	r0, r3, #3
 8000ac6:	e653      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000ac8:	1881      	adds	r1, r0, r2
 8000aca:	4291      	cmp	r1, r2
 8000acc:	4192      	sbcs	r2, r2
 8000ace:	18f0      	adds	r0, r6, r3
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	1880      	adds	r0, r0, r2
 8000ad4:	0203      	lsls	r3, r0, #8
 8000ad6:	d500      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000ad8:	e768      	b.n	80009ac <__aeabi_dadd+0x504>
 8000ada:	0747      	lsls	r7, r0, #29
 8000adc:	08c9      	lsrs	r1, r1, #3
 8000ade:	430f      	orrs	r7, r1
 8000ae0:	08c0      	lsrs	r0, r0, #3
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	e617      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000ae6:	08d2      	lsrs	r2, r2, #3
 8000ae8:	075f      	lsls	r7, r3, #29
 8000aea:	4317      	orrs	r7, r2
 8000aec:	08d8      	lsrs	r0, r3, #3
 8000aee:	e63f      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000af0:	000c      	movs	r4, r1
 8000af2:	2600      	movs	r6, #0
 8000af4:	2700      	movs	r7, #0
 8000af6:	e620      	b.n	800073a <__aeabi_dadd+0x292>
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d156      	bne.n	8000baa <__aeabi_dadd+0x702>
 8000afc:	075f      	lsls	r7, r3, #29
 8000afe:	08d2      	lsrs	r2, r2, #3
 8000b00:	4317      	orrs	r7, r2
 8000b02:	08d8      	lsrs	r0, r3, #3
 8000b04:	e634      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000b06:	000c      	movs	r4, r1
 8000b08:	001e      	movs	r6, r3
 8000b0a:	08d0      	lsrs	r0, r2, #3
 8000b0c:	e629      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000b0e:	08c1      	lsrs	r1, r0, #3
 8000b10:	0770      	lsls	r0, r6, #29
 8000b12:	4301      	orrs	r1, r0
 8000b14:	08f0      	lsrs	r0, r6, #3
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	d062      	beq.n	8000be0 <__aeabi_dadd+0x738>
 8000b1a:	2480      	movs	r4, #128	@ 0x80
 8000b1c:	0324      	lsls	r4, r4, #12
 8000b1e:	4220      	tst	r0, r4
 8000b20:	d007      	beq.n	8000b32 <__aeabi_dadd+0x68a>
 8000b22:	08de      	lsrs	r6, r3, #3
 8000b24:	4226      	tst	r6, r4
 8000b26:	d104      	bne.n	8000b32 <__aeabi_dadd+0x68a>
 8000b28:	4665      	mov	r5, ip
 8000b2a:	0030      	movs	r0, r6
 8000b2c:	08d1      	lsrs	r1, r2, #3
 8000b2e:	075b      	lsls	r3, r3, #29
 8000b30:	4319      	orrs	r1, r3
 8000b32:	0f4f      	lsrs	r7, r1, #29
 8000b34:	00c9      	lsls	r1, r1, #3
 8000b36:	08c9      	lsrs	r1, r1, #3
 8000b38:	077f      	lsls	r7, r7, #29
 8000b3a:	430f      	orrs	r7, r1
 8000b3c:	e618      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000b3e:	000c      	movs	r4, r1
 8000b40:	0030      	movs	r0, r6
 8000b42:	3c20      	subs	r4, #32
 8000b44:	40e0      	lsrs	r0, r4
 8000b46:	4684      	mov	ip, r0
 8000b48:	2920      	cmp	r1, #32
 8000b4a:	d005      	beq.n	8000b58 <__aeabi_dadd+0x6b0>
 8000b4c:	2440      	movs	r4, #64	@ 0x40
 8000b4e:	1a61      	subs	r1, r4, r1
 8000b50:	408e      	lsls	r6, r1
 8000b52:	4649      	mov	r1, r9
 8000b54:	4331      	orrs	r1, r6
 8000b56:	4689      	mov	r9, r1
 8000b58:	4648      	mov	r0, r9
 8000b5a:	1e41      	subs	r1, r0, #1
 8000b5c:	4188      	sbcs	r0, r1
 8000b5e:	4661      	mov	r1, ip
 8000b60:	0007      	movs	r7, r0
 8000b62:	430f      	orrs	r7, r1
 8000b64:	e630      	b.n	80007c8 <__aeabi_dadd+0x320>
 8000b66:	2120      	movs	r1, #32
 8000b68:	2700      	movs	r7, #0
 8000b6a:	1a09      	subs	r1, r1, r0
 8000b6c:	e50e      	b.n	800058c <__aeabi_dadd+0xe4>
 8000b6e:	001e      	movs	r6, r3
 8000b70:	2f00      	cmp	r7, #0
 8000b72:	d000      	beq.n	8000b76 <__aeabi_dadd+0x6ce>
 8000b74:	e522      	b.n	80005bc <__aeabi_dadd+0x114>
 8000b76:	2400      	movs	r4, #0
 8000b78:	e758      	b.n	8000a2c <__aeabi_dadd+0x584>
 8000b7a:	2500      	movs	r5, #0
 8000b7c:	2400      	movs	r4, #0
 8000b7e:	2600      	movs	r6, #0
 8000b80:	e5db      	b.n	800073a <__aeabi_dadd+0x292>
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	000007fe 	.word	0x000007fe
 8000b88:	000007ff 	.word	0x000007ff
 8000b8c:	ff7fffff 	.word	0xff7fffff
 8000b90:	4647      	mov	r7, r8
 8000b92:	430f      	orrs	r7, r1
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x6f0>
 8000b96:	e747      	b.n	8000a28 <__aeabi_dadd+0x580>
 8000b98:	000e      	movs	r6, r1
 8000b9a:	46c1      	mov	r9, r8
 8000b9c:	e5b5      	b.n	800070a <__aeabi_dadd+0x262>
 8000b9e:	08df      	lsrs	r7, r3, #3
 8000ba0:	0764      	lsls	r4, r4, #29
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4327      	orrs	r7, r4
 8000ba6:	0900      	lsrs	r0, r0, #4
 8000ba8:	e5b5      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000baa:	0019      	movs	r1, r3
 8000bac:	08c0      	lsrs	r0, r0, #3
 8000bae:	0777      	lsls	r7, r6, #29
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	4311      	orrs	r1, r2
 8000bb4:	08f0      	lsrs	r0, r6, #3
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x714>
 8000bba:	e5d9      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	0309      	lsls	r1, r1, #12
 8000bc0:	4208      	tst	r0, r1
 8000bc2:	d007      	beq.n	8000bd4 <__aeabi_dadd+0x72c>
 8000bc4:	08dc      	lsrs	r4, r3, #3
 8000bc6:	420c      	tst	r4, r1
 8000bc8:	d104      	bne.n	8000bd4 <__aeabi_dadd+0x72c>
 8000bca:	08d2      	lsrs	r2, r2, #3
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	0017      	movs	r7, r2
 8000bd2:	0020      	movs	r0, r4
 8000bd4:	0f7b      	lsrs	r3, r7, #29
 8000bd6:	00ff      	lsls	r7, r7, #3
 8000bd8:	08ff      	lsrs	r7, r7, #3
 8000bda:	075b      	lsls	r3, r3, #29
 8000bdc:	431f      	orrs	r7, r3
 8000bde:	e5c7      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000be0:	000f      	movs	r7, r1
 8000be2:	e5c5      	b.n	8000770 <__aeabi_dadd+0x2c8>
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <__aeabi_dadd+0x788>)
 8000be6:	08d2      	lsrs	r2, r2, #3
 8000be8:	4033      	ands	r3, r6
 8000bea:	075f      	lsls	r7, r3, #29
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	2401      	movs	r4, #1
 8000bf0:	4317      	orrs	r7, r2
 8000bf2:	0b1e      	lsrs	r6, r3, #12
 8000bf4:	e5a1      	b.n	800073a <__aeabi_dadd+0x292>
 8000bf6:	4226      	tst	r6, r4
 8000bf8:	d012      	beq.n	8000c20 <__aeabi_dadd+0x778>
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <__aeabi_dadd+0x788>)
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	0002      	movs	r2, r0
 8000c00:	2401      	movs	r4, #1
 8000c02:	401e      	ands	r6, r3
 8000c04:	e4e6      	b.n	80005d4 <__aeabi_dadd+0x12c>
 8000c06:	0021      	movs	r1, r4
 8000c08:	e585      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c0a:	0017      	movs	r7, r2
 8000c0c:	e5a8      	b.n	8000760 <__aeabi_dadd+0x2b8>
 8000c0e:	003a      	movs	r2, r7
 8000c10:	e4d4      	b.n	80005bc <__aeabi_dadd+0x114>
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	0764      	lsls	r4, r4, #29
 8000c16:	431c      	orrs	r4, r3
 8000c18:	0027      	movs	r7, r4
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	0900      	lsrs	r0, r0, #4
 8000c1e:	e57a      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c20:	08c0      	lsrs	r0, r0, #3
 8000c22:	0777      	lsls	r7, r6, #29
 8000c24:	4307      	orrs	r7, r0
 8000c26:	4665      	mov	r5, ip
 8000c28:	2100      	movs	r1, #0
 8000c2a:	08f0      	lsrs	r0, r6, #3
 8000c2c:	e573      	b.n	8000716 <__aeabi_dadd+0x26e>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	ff7fffff 	.word	0xff7fffff

08000c34 <__aeabi_ddiv>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	46de      	mov	lr, fp
 8000c38:	4645      	mov	r5, r8
 8000c3a:	4657      	mov	r7, sl
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	b087      	sub	sp, #28
 8000c42:	9200      	str	r2, [sp, #0]
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	030b      	lsls	r3, r1, #12
 8000c48:	0b1b      	lsrs	r3, r3, #12
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	0fca      	lsrs	r2, r1, #31
 8000c4e:	004b      	lsls	r3, r1, #1
 8000c50:	0004      	movs	r4, r0
 8000c52:	4680      	mov	r8, r0
 8000c54:	0d5b      	lsrs	r3, r3, #21
 8000c56:	9202      	str	r2, [sp, #8]
 8000c58:	d100      	bne.n	8000c5c <__aeabi_ddiv+0x28>
 8000c5a:	e098      	b.n	8000d8e <__aeabi_ddiv+0x15a>
 8000c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <__aeabi_ddiv+0x9e>
 8000c62:	4659      	mov	r1, fp
 8000c64:	0f42      	lsrs	r2, r0, #29
 8000c66:	00c9      	lsls	r1, r1, #3
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	2180      	movs	r1, #128	@ 0x80
 8000c6c:	0409      	lsls	r1, r1, #16
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	00c2      	lsls	r2, r0, #3
 8000c72:	4690      	mov	r8, r2
 8000c74:	4a77      	ldr	r2, [pc, #476]	@ (8000e54 <__aeabi_ddiv+0x220>)
 8000c76:	4689      	mov	r9, r1
 8000c78:	4692      	mov	sl, r2
 8000c7a:	449a      	add	sl, r3
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2400      	movs	r4, #0
 8000c80:	9303      	str	r3, [sp, #12]
 8000c82:	9e00      	ldr	r6, [sp, #0]
 8000c84:	9f01      	ldr	r7, [sp, #4]
 8000c86:	033b      	lsls	r3, r7, #12
 8000c88:	0b1b      	lsrs	r3, r3, #12
 8000c8a:	469b      	mov	fp, r3
 8000c8c:	007b      	lsls	r3, r7, #1
 8000c8e:	0030      	movs	r0, r6
 8000c90:	0d5b      	lsrs	r3, r3, #21
 8000c92:	0ffd      	lsrs	r5, r7, #31
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d059      	beq.n	8000d4c <__aeabi_ddiv+0x118>
 8000c98:	4a6d      	ldr	r2, [pc, #436]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d048      	beq.n	8000d30 <__aeabi_ddiv+0xfc>
 8000c9e:	4659      	mov	r1, fp
 8000ca0:	0f72      	lsrs	r2, r6, #29
 8000ca2:	00c9      	lsls	r1, r1, #3
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	2180      	movs	r1, #128	@ 0x80
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	4311      	orrs	r1, r2
 8000cac:	468b      	mov	fp, r1
 8000cae:	4969      	ldr	r1, [pc, #420]	@ (8000e54 <__aeabi_ddiv+0x220>)
 8000cb0:	00f2      	lsls	r2, r6, #3
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4651      	mov	r1, sl
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1acb      	subs	r3, r1, r3
 8000cba:	469a      	mov	sl, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	9e02      	ldr	r6, [sp, #8]
 8000cc0:	406e      	eors	r6, r5
 8000cc2:	b2f6      	uxtb	r6, r6
 8000cc4:	2c0f      	cmp	r4, #15
 8000cc6:	d900      	bls.n	8000cca <__aeabi_ddiv+0x96>
 8000cc8:	e0ce      	b.n	8000e68 <__aeabi_ddiv+0x234>
 8000cca:	4b63      	ldr	r3, [pc, #396]	@ (8000e58 <__aeabi_ddiv+0x224>)
 8000ccc:	00a4      	lsls	r4, r4, #2
 8000cce:	591b      	ldr	r3, [r3, r4]
 8000cd0:	469f      	mov	pc, r3
 8000cd2:	465a      	mov	r2, fp
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_ddiv+0xa8>
 8000cda:	e090      	b.n	8000dfe <__aeabi_ddiv+0x1ca>
 8000cdc:	469a      	mov	sl, r3
 8000cde:	2302      	movs	r3, #2
 8000ce0:	4690      	mov	r8, r2
 8000ce2:	2408      	movs	r4, #8
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	e7cc      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000ce8:	46cb      	mov	fp, r9
 8000cea:	4642      	mov	r2, r8
 8000cec:	9d02      	ldr	r5, [sp, #8]
 8000cee:	9903      	ldr	r1, [sp, #12]
 8000cf0:	2902      	cmp	r1, #2
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0xc2>
 8000cf4:	e1de      	b.n	80010b4 <__aeabi_ddiv+0x480>
 8000cf6:	2903      	cmp	r1, #3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_ddiv+0xc8>
 8000cfa:	e08d      	b.n	8000e18 <__aeabi_ddiv+0x1e4>
 8000cfc:	2901      	cmp	r1, #1
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_ddiv+0xce>
 8000d00:	e179      	b.n	8000ff6 <__aeabi_ddiv+0x3c2>
 8000d02:	002e      	movs	r6, r5
 8000d04:	2200      	movs	r2, #0
 8000d06:	2300      	movs	r3, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	4690      	mov	r8, r2
 8000d0c:	051b      	lsls	r3, r3, #20
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	07f6      	lsls	r6, r6, #31
 8000d12:	4333      	orrs	r3, r6
 8000d14:	4640      	mov	r0, r8
 8000d16:	0019      	movs	r1, r3
 8000d18:	b007      	add	sp, #28
 8000d1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1c:	46bb      	mov	fp, r7
 8000d1e:	46b2      	mov	sl, r6
 8000d20:	46a9      	mov	r9, r5
 8000d22:	46a0      	mov	r8, r4
 8000d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d26:	2200      	movs	r2, #0
 8000d28:	2400      	movs	r4, #0
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	4b48      	ldr	r3, [pc, #288]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000d2e:	e7ed      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000d30:	465a      	mov	r2, fp
 8000d32:	9b00      	ldr	r3, [sp, #0]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	4b49      	ldr	r3, [pc, #292]	@ (8000e5c <__aeabi_ddiv+0x228>)
 8000d38:	469c      	mov	ip, r3
 8000d3a:	44e2      	add	sl, ip
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d159      	bne.n	8000df4 <__aeabi_ddiv+0x1c0>
 8000d40:	2302      	movs	r3, #2
 8000d42:	431c      	orrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	469b      	mov	fp, r3
 8000d4a:	e7b8      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000d4c:	465a      	mov	r2, fp
 8000d4e:	9b00      	ldr	r3, [sp, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	d049      	beq.n	8000de8 <__aeabi_ddiv+0x1b4>
 8000d54:	465b      	mov	r3, fp
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x128>
 8000d5a:	e19c      	b.n	8001096 <__aeabi_ddiv+0x462>
 8000d5c:	4658      	mov	r0, fp
 8000d5e:	f001 fb43 	bl	80023e8 <__clzsi2>
 8000d62:	0002      	movs	r2, r0
 8000d64:	0003      	movs	r3, r0
 8000d66:	3a0b      	subs	r2, #11
 8000d68:	271d      	movs	r7, #29
 8000d6a:	9e00      	ldr	r6, [sp, #0]
 8000d6c:	1aba      	subs	r2, r7, r2
 8000d6e:	0019      	movs	r1, r3
 8000d70:	4658      	mov	r0, fp
 8000d72:	40d6      	lsrs	r6, r2
 8000d74:	3908      	subs	r1, #8
 8000d76:	4088      	lsls	r0, r1
 8000d78:	0032      	movs	r2, r6
 8000d7a:	4302      	orrs	r2, r0
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	9a00      	ldr	r2, [sp, #0]
 8000d80:	408a      	lsls	r2, r1
 8000d82:	4937      	ldr	r1, [pc, #220]	@ (8000e60 <__aeabi_ddiv+0x22c>)
 8000d84:	4453      	add	r3, sl
 8000d86:	468a      	mov	sl, r1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	449a      	add	sl, r3
 8000d8c:	e797      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000d8e:	465b      	mov	r3, fp
 8000d90:	4303      	orrs	r3, r0
 8000d92:	4699      	mov	r9, r3
 8000d94:	d021      	beq.n	8000dda <__aeabi_ddiv+0x1a6>
 8000d96:	465b      	mov	r3, fp
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_ddiv+0x16a>
 8000d9c:	e169      	b.n	8001072 <__aeabi_ddiv+0x43e>
 8000d9e:	4658      	mov	r0, fp
 8000da0:	f001 fb22 	bl	80023e8 <__clzsi2>
 8000da4:	230b      	movs	r3, #11
 8000da6:	425b      	negs	r3, r3
 8000da8:	469c      	mov	ip, r3
 8000daa:	0002      	movs	r2, r0
 8000dac:	4484      	add	ip, r0
 8000dae:	4666      	mov	r6, ip
 8000db0:	231d      	movs	r3, #29
 8000db2:	1b9b      	subs	r3, r3, r6
 8000db4:	0026      	movs	r6, r4
 8000db6:	0011      	movs	r1, r2
 8000db8:	4658      	mov	r0, fp
 8000dba:	40de      	lsrs	r6, r3
 8000dbc:	3908      	subs	r1, #8
 8000dbe:	4088      	lsls	r0, r1
 8000dc0:	0033      	movs	r3, r6
 8000dc2:	4303      	orrs	r3, r0
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	0023      	movs	r3, r4
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4698      	mov	r8, r3
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <__aeabi_ddiv+0x230>)
 8000dce:	2400      	movs	r4, #0
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9303      	str	r3, [sp, #12]
 8000dd8:	e753      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	4698      	mov	r8, r3
 8000dde:	469a      	mov	sl, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	2404      	movs	r4, #4
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	e74c      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000de8:	2301      	movs	r3, #1
 8000dea:	431c      	orrs	r4, r3
 8000dec:	2300      	movs	r3, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	469b      	mov	fp, r3
 8000df2:	e764      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000df4:	2303      	movs	r3, #3
 8000df6:	0032      	movs	r2, r6
 8000df8:	2103      	movs	r1, #3
 8000dfa:	431c      	orrs	r4, r3
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_ddiv+0x8a>
 8000dfe:	469a      	mov	sl, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	46d9      	mov	r9, fp
 8000e04:	240c      	movs	r4, #12
 8000e06:	9303      	str	r3, [sp, #12]
 8000e08:	e73b      	b.n	8000c82 <__aeabi_ddiv+0x4e>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2480      	movs	r4, #128	@ 0x80
 8000e0e:	4698      	mov	r8, r3
 8000e10:	2600      	movs	r6, #0
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e14:	0324      	lsls	r4, r4, #12
 8000e16:	e779      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e18:	2480      	movs	r4, #128	@ 0x80
 8000e1a:	465b      	mov	r3, fp
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	0324      	lsls	r4, r4, #12
 8000e22:	002e      	movs	r6, r5
 8000e24:	4690      	mov	r8, r2
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e28:	0b24      	lsrs	r4, r4, #12
 8000e2a:	e76f      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e2c:	2480      	movs	r4, #128	@ 0x80
 8000e2e:	464b      	mov	r3, r9
 8000e30:	0324      	lsls	r4, r4, #12
 8000e32:	4223      	tst	r3, r4
 8000e34:	d002      	beq.n	8000e3c <__aeabi_ddiv+0x208>
 8000e36:	465b      	mov	r3, fp
 8000e38:	4223      	tst	r3, r4
 8000e3a:	d0f0      	beq.n	8000e1e <__aeabi_ddiv+0x1ea>
 8000e3c:	2480      	movs	r4, #128	@ 0x80
 8000e3e:	464b      	mov	r3, r9
 8000e40:	0324      	lsls	r4, r4, #12
 8000e42:	431c      	orrs	r4, r3
 8000e44:	0324      	lsls	r4, r4, #12
 8000e46:	9e02      	ldr	r6, [sp, #8]
 8000e48:	4b01      	ldr	r3, [pc, #4]	@ (8000e50 <__aeabi_ddiv+0x21c>)
 8000e4a:	0b24      	lsrs	r4, r4, #12
 8000e4c:	e75e      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	000007ff 	.word	0x000007ff
 8000e54:	fffffc01 	.word	0xfffffc01
 8000e58:	0800fa98 	.word	0x0800fa98
 8000e5c:	fffff801 	.word	0xfffff801
 8000e60:	000003f3 	.word	0x000003f3
 8000e64:	fffffc0d 	.word	0xfffffc0d
 8000e68:	45cb      	cmp	fp, r9
 8000e6a:	d200      	bcs.n	8000e6e <__aeabi_ddiv+0x23a>
 8000e6c:	e0f8      	b.n	8001060 <__aeabi_ddiv+0x42c>
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x23e>
 8000e70:	e0f3      	b.n	800105a <__aeabi_ddiv+0x426>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	4644      	mov	r4, r8
 8000e7a:	4648      	mov	r0, r9
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	44e2      	add	sl, ip
 8000e80:	465b      	mov	r3, fp
 8000e82:	0e17      	lsrs	r7, r2, #24
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c19      	lsrs	r1, r3, #16
 8000e8a:	043b      	lsls	r3, r7, #16
 8000e8c:	0212      	lsls	r2, r2, #8
 8000e8e:	9700      	str	r7, [sp, #0]
 8000e90:	0c1f      	lsrs	r7, r3, #16
 8000e92:	4691      	mov	r9, r2
 8000e94:	9102      	str	r1, [sp, #8]
 8000e96:	9703      	str	r7, [sp, #12]
 8000e98:	f7ff f9d8 	bl	800024c <__aeabi_uidivmod>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	437a      	muls	r2, r7
 8000ea0:	040b      	lsls	r3, r1, #16
 8000ea2:	0c21      	lsrs	r1, r4, #16
 8000ea4:	4680      	mov	r8, r0
 8000ea6:	4319      	orrs	r1, r3
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d909      	bls.n	8000ec0 <__aeabi_ddiv+0x28c>
 8000eac:	9f00      	ldr	r7, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	46bc      	mov	ip, r7
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	4461      	add	r1, ip
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	44e0      	add	r8, ip
 8000eba:	428f      	cmp	r7, r1
 8000ebc:	d800      	bhi.n	8000ec0 <__aeabi_ddiv+0x28c>
 8000ebe:	e15c      	b.n	800117a <__aeabi_ddiv+0x546>
 8000ec0:	1a88      	subs	r0, r1, r2
 8000ec2:	9902      	ldr	r1, [sp, #8]
 8000ec4:	f7ff f9c2 	bl	800024c <__aeabi_uidivmod>
 8000ec8:	9a03      	ldr	r2, [sp, #12]
 8000eca:	0424      	lsls	r4, r4, #16
 8000ecc:	4342      	muls	r2, r0
 8000ece:	0409      	lsls	r1, r1, #16
 8000ed0:	0c24      	lsrs	r4, r4, #16
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	430c      	orrs	r4, r1
 8000ed6:	42a2      	cmp	r2, r4
 8000ed8:	d906      	bls.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8000eda:	9900      	ldr	r1, [sp, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	468c      	mov	ip, r1
 8000ee0:	4464      	add	r4, ip
 8000ee2:	42a1      	cmp	r1, r4
 8000ee4:	d800      	bhi.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8000ee6:	e142      	b.n	800116e <__aeabi_ddiv+0x53a>
 8000ee8:	1aa0      	subs	r0, r4, r2
 8000eea:	4642      	mov	r2, r8
 8000eec:	0412      	lsls	r2, r2, #16
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	4693      	mov	fp, r2
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	4659      	mov	r1, fp
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	001f      	movs	r7, r3
 8000efa:	9304      	str	r3, [sp, #16]
 8000efc:	040b      	lsls	r3, r1, #16
 8000efe:	4649      	mov	r1, r9
 8000f00:	0409      	lsls	r1, r1, #16
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	000c      	movs	r4, r1
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	435c      	muls	r4, r3
 8000f0a:	0c12      	lsrs	r2, r2, #16
 8000f0c:	437b      	muls	r3, r7
 8000f0e:	4688      	mov	r8, r1
 8000f10:	4351      	muls	r1, r2
 8000f12:	437a      	muls	r2, r7
 8000f14:	0c27      	lsrs	r7, r4, #16
 8000f16:	46bc      	mov	ip, r7
 8000f18:	185b      	adds	r3, r3, r1
 8000f1a:	4463      	add	r3, ip
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d903      	bls.n	8000f28 <__aeabi_ddiv+0x2f4>
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	0249      	lsls	r1, r1, #9
 8000f24:	468c      	mov	ip, r1
 8000f26:	4462      	add	r2, ip
 8000f28:	0c19      	lsrs	r1, r3, #16
 8000f2a:	0424      	lsls	r4, r4, #16
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	0c24      	lsrs	r4, r4, #16
 8000f30:	188a      	adds	r2, r1, r2
 8000f32:	191c      	adds	r4, r3, r4
 8000f34:	4290      	cmp	r0, r2
 8000f36:	d302      	bcc.n	8000f3e <__aeabi_ddiv+0x30a>
 8000f38:	d116      	bne.n	8000f68 <__aeabi_ddiv+0x334>
 8000f3a:	42a5      	cmp	r5, r4
 8000f3c:	d214      	bcs.n	8000f68 <__aeabi_ddiv+0x334>
 8000f3e:	465b      	mov	r3, fp
 8000f40:	9f00      	ldr	r7, [sp, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	444d      	add	r5, r9
 8000f46:	9305      	str	r3, [sp, #20]
 8000f48:	454d      	cmp	r5, r9
 8000f4a:	419b      	sbcs	r3, r3
 8000f4c:	46bc      	mov	ip, r7
 8000f4e:	425b      	negs	r3, r3
 8000f50:	4463      	add	r3, ip
 8000f52:	18c0      	adds	r0, r0, r3
 8000f54:	4287      	cmp	r7, r0
 8000f56:	d300      	bcc.n	8000f5a <__aeabi_ddiv+0x326>
 8000f58:	e102      	b.n	8001160 <__aeabi_ddiv+0x52c>
 8000f5a:	4282      	cmp	r2, r0
 8000f5c:	d900      	bls.n	8000f60 <__aeabi_ddiv+0x32c>
 8000f5e:	e129      	b.n	80011b4 <__aeabi_ddiv+0x580>
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x330>
 8000f62:	e124      	b.n	80011ae <__aeabi_ddiv+0x57a>
 8000f64:	9b05      	ldr	r3, [sp, #20]
 8000f66:	469b      	mov	fp, r3
 8000f68:	1b2c      	subs	r4, r5, r4
 8000f6a:	42a5      	cmp	r5, r4
 8000f6c:	41ad      	sbcs	r5, r5
 8000f6e:	9b00      	ldr	r3, [sp, #0]
 8000f70:	1a80      	subs	r0, r0, r2
 8000f72:	426d      	negs	r5, r5
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	4283      	cmp	r3, r0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x348>
 8000f7a:	e10f      	b.n	800119c <__aeabi_ddiv+0x568>
 8000f7c:	9902      	ldr	r1, [sp, #8]
 8000f7e:	f7ff f965 	bl	800024c <__aeabi_uidivmod>
 8000f82:	9a03      	ldr	r2, [sp, #12]
 8000f84:	040b      	lsls	r3, r1, #16
 8000f86:	4342      	muls	r2, r0
 8000f88:	0c21      	lsrs	r1, r4, #16
 8000f8a:	0005      	movs	r5, r0
 8000f8c:	4319      	orrs	r1, r3
 8000f8e:	428a      	cmp	r2, r1
 8000f90:	d900      	bls.n	8000f94 <__aeabi_ddiv+0x360>
 8000f92:	e0cb      	b.n	800112c <__aeabi_ddiv+0x4f8>
 8000f94:	1a88      	subs	r0, r1, r2
 8000f96:	9902      	ldr	r1, [sp, #8]
 8000f98:	f7ff f958 	bl	800024c <__aeabi_uidivmod>
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	4342      	muls	r2, r0
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	0c24      	lsrs	r4, r4, #16
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	d900      	bls.n	8000fb0 <__aeabi_ddiv+0x37c>
 8000fae:	e0ca      	b.n	8001146 <__aeabi_ddiv+0x512>
 8000fb0:	4641      	mov	r1, r8
 8000fb2:	1aa4      	subs	r4, r4, r2
 8000fb4:	042a      	lsls	r2, r5, #16
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	9f04      	ldr	r7, [sp, #16]
 8000fba:	0413      	lsls	r3, r2, #16
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	4359      	muls	r1, r3
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	437b      	muls	r3, r7
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	0c15      	lsrs	r5, r2, #16
 8000fc8:	4368      	muls	r0, r5
 8000fca:	0c0b      	lsrs	r3, r1, #16
 8000fcc:	4484      	add	ip, r0
 8000fce:	4463      	add	r3, ip
 8000fd0:	437d      	muls	r5, r7
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d903      	bls.n	8000fde <__aeabi_ddiv+0x3aa>
 8000fd6:	2080      	movs	r0, #128	@ 0x80
 8000fd8:	0240      	lsls	r0, r0, #9
 8000fda:	4684      	mov	ip, r0
 8000fdc:	4465      	add	r5, ip
 8000fde:	0c18      	lsrs	r0, r3, #16
 8000fe0:	0409      	lsls	r1, r1, #16
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	0c09      	lsrs	r1, r1, #16
 8000fe6:	1940      	adds	r0, r0, r5
 8000fe8:	185b      	adds	r3, r3, r1
 8000fea:	4284      	cmp	r4, r0
 8000fec:	d327      	bcc.n	800103e <__aeabi_ddiv+0x40a>
 8000fee:	d023      	beq.n	8001038 <__aeabi_ddiv+0x404>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	0035      	movs	r5, r6
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	4b94      	ldr	r3, [pc, #592]	@ (8001248 <__aeabi_ddiv+0x614>)
 8000ff8:	4453      	add	r3, sl
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dd60      	ble.n	80010c0 <__aeabi_ddiv+0x48c>
 8000ffe:	0751      	lsls	r1, r2, #29
 8001000:	d000      	beq.n	8001004 <__aeabi_ddiv+0x3d0>
 8001002:	e086      	b.n	8001112 <__aeabi_ddiv+0x4de>
 8001004:	002e      	movs	r6, r5
 8001006:	08d1      	lsrs	r1, r2, #3
 8001008:	465a      	mov	r2, fp
 800100a:	01d2      	lsls	r2, r2, #7
 800100c:	d506      	bpl.n	800101c <__aeabi_ddiv+0x3e8>
 800100e:	465a      	mov	r2, fp
 8001010:	4b8e      	ldr	r3, [pc, #568]	@ (800124c <__aeabi_ddiv+0x618>)
 8001012:	401a      	ands	r2, r3
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	4693      	mov	fp, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4453      	add	r3, sl
 800101c:	4a8c      	ldr	r2, [pc, #560]	@ (8001250 <__aeabi_ddiv+0x61c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	dd00      	ble.n	8001024 <__aeabi_ddiv+0x3f0>
 8001022:	e680      	b.n	8000d26 <__aeabi_ddiv+0xf2>
 8001024:	465a      	mov	r2, fp
 8001026:	0752      	lsls	r2, r2, #29
 8001028:	430a      	orrs	r2, r1
 800102a:	4690      	mov	r8, r2
 800102c:	465a      	mov	r2, fp
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	0254      	lsls	r4, r2, #9
 8001032:	0b24      	lsrs	r4, r4, #12
 8001034:	0d5b      	lsrs	r3, r3, #21
 8001036:	e669      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001038:	0035      	movs	r5, r6
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0db      	beq.n	8000ff6 <__aeabi_ddiv+0x3c2>
 800103e:	9d00      	ldr	r5, [sp, #0]
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	46ac      	mov	ip, r5
 8001044:	4464      	add	r4, ip
 8001046:	42ac      	cmp	r4, r5
 8001048:	d200      	bcs.n	800104c <__aeabi_ddiv+0x418>
 800104a:	e09e      	b.n	800118a <__aeabi_ddiv+0x556>
 800104c:	4284      	cmp	r4, r0
 800104e:	d200      	bcs.n	8001052 <__aeabi_ddiv+0x41e>
 8001050:	e0e1      	b.n	8001216 <__aeabi_ddiv+0x5e2>
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0x422>
 8001054:	e0ee      	b.n	8001234 <__aeabi_ddiv+0x600>
 8001056:	000a      	movs	r2, r1
 8001058:	e7ca      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 800105a:	4542      	cmp	r2, r8
 800105c:	d900      	bls.n	8001060 <__aeabi_ddiv+0x42c>
 800105e:	e708      	b.n	8000e72 <__aeabi_ddiv+0x23e>
 8001060:	464b      	mov	r3, r9
 8001062:	07dc      	lsls	r4, r3, #31
 8001064:	0858      	lsrs	r0, r3, #1
 8001066:	4643      	mov	r3, r8
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	431c      	orrs	r4, r3
 800106c:	4643      	mov	r3, r8
 800106e:	07dd      	lsls	r5, r3, #31
 8001070:	e706      	b.n	8000e80 <__aeabi_ddiv+0x24c>
 8001072:	f001 f9b9 	bl	80023e8 <__clzsi2>
 8001076:	2315      	movs	r3, #21
 8001078:	469c      	mov	ip, r3
 800107a:	4484      	add	ip, r0
 800107c:	0002      	movs	r2, r0
 800107e:	4663      	mov	r3, ip
 8001080:	3220      	adds	r2, #32
 8001082:	2b1c      	cmp	r3, #28
 8001084:	dc00      	bgt.n	8001088 <__aeabi_ddiv+0x454>
 8001086:	e692      	b.n	8000dae <__aeabi_ddiv+0x17a>
 8001088:	0023      	movs	r3, r4
 800108a:	3808      	subs	r0, #8
 800108c:	4083      	lsls	r3, r0
 800108e:	4699      	mov	r9, r3
 8001090:	2300      	movs	r3, #0
 8001092:	4698      	mov	r8, r3
 8001094:	e69a      	b.n	8000dcc <__aeabi_ddiv+0x198>
 8001096:	f001 f9a7 	bl	80023e8 <__clzsi2>
 800109a:	0002      	movs	r2, r0
 800109c:	0003      	movs	r3, r0
 800109e:	3215      	adds	r2, #21
 80010a0:	3320      	adds	r3, #32
 80010a2:	2a1c      	cmp	r2, #28
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_ddiv+0x474>
 80010a6:	e65f      	b.n	8000d68 <__aeabi_ddiv+0x134>
 80010a8:	9900      	ldr	r1, [sp, #0]
 80010aa:	3808      	subs	r0, #8
 80010ac:	4081      	lsls	r1, r0
 80010ae:	2200      	movs	r2, #0
 80010b0:	468b      	mov	fp, r1
 80010b2:	e666      	b.n	8000d82 <__aeabi_ddiv+0x14e>
 80010b4:	2200      	movs	r2, #0
 80010b6:	002e      	movs	r6, r5
 80010b8:	2400      	movs	r4, #0
 80010ba:	4690      	mov	r8, r2
 80010bc:	4b65      	ldr	r3, [pc, #404]	@ (8001254 <__aeabi_ddiv+0x620>)
 80010be:	e625      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 80010c0:	002e      	movs	r6, r5
 80010c2:	2101      	movs	r1, #1
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	2938      	cmp	r1, #56	@ 0x38
 80010c8:	dd00      	ble.n	80010cc <__aeabi_ddiv+0x498>
 80010ca:	e61b      	b.n	8000d04 <__aeabi_ddiv+0xd0>
 80010cc:	291f      	cmp	r1, #31
 80010ce:	dc7e      	bgt.n	80011ce <__aeabi_ddiv+0x59a>
 80010d0:	4861      	ldr	r0, [pc, #388]	@ (8001258 <__aeabi_ddiv+0x624>)
 80010d2:	0014      	movs	r4, r2
 80010d4:	4450      	add	r0, sl
 80010d6:	465b      	mov	r3, fp
 80010d8:	4082      	lsls	r2, r0
 80010da:	4083      	lsls	r3, r0
 80010dc:	40cc      	lsrs	r4, r1
 80010de:	1e50      	subs	r0, r2, #1
 80010e0:	4182      	sbcs	r2, r0
 80010e2:	4323      	orrs	r3, r4
 80010e4:	431a      	orrs	r2, r3
 80010e6:	465b      	mov	r3, fp
 80010e8:	40cb      	lsrs	r3, r1
 80010ea:	0751      	lsls	r1, r2, #29
 80010ec:	d009      	beq.n	8001102 <__aeabi_ddiv+0x4ce>
 80010ee:	210f      	movs	r1, #15
 80010f0:	4011      	ands	r1, r2
 80010f2:	2904      	cmp	r1, #4
 80010f4:	d005      	beq.n	8001102 <__aeabi_ddiv+0x4ce>
 80010f6:	1d11      	adds	r1, r2, #4
 80010f8:	4291      	cmp	r1, r2
 80010fa:	4192      	sbcs	r2, r2
 80010fc:	4252      	negs	r2, r2
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	000a      	movs	r2, r1
 8001102:	0219      	lsls	r1, r3, #8
 8001104:	d400      	bmi.n	8001108 <__aeabi_ddiv+0x4d4>
 8001106:	e09b      	b.n	8001240 <__aeabi_ddiv+0x60c>
 8001108:	2200      	movs	r2, #0
 800110a:	2301      	movs	r3, #1
 800110c:	2400      	movs	r4, #0
 800110e:	4690      	mov	r8, r2
 8001110:	e5fc      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001112:	210f      	movs	r1, #15
 8001114:	4011      	ands	r1, r2
 8001116:	2904      	cmp	r1, #4
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x4e8>
 800111a:	e773      	b.n	8001004 <__aeabi_ddiv+0x3d0>
 800111c:	1d11      	adds	r1, r2, #4
 800111e:	4291      	cmp	r1, r2
 8001120:	4192      	sbcs	r2, r2
 8001122:	4252      	negs	r2, r2
 8001124:	002e      	movs	r6, r5
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	4493      	add	fp, r2
 800112a:	e76d      	b.n	8001008 <__aeabi_ddiv+0x3d4>
 800112c:	9b00      	ldr	r3, [sp, #0]
 800112e:	3d01      	subs	r5, #1
 8001130:	469c      	mov	ip, r3
 8001132:	4461      	add	r1, ip
 8001134:	428b      	cmp	r3, r1
 8001136:	d900      	bls.n	800113a <__aeabi_ddiv+0x506>
 8001138:	e72c      	b.n	8000f94 <__aeabi_ddiv+0x360>
 800113a:	428a      	cmp	r2, r1
 800113c:	d800      	bhi.n	8001140 <__aeabi_ddiv+0x50c>
 800113e:	e729      	b.n	8000f94 <__aeabi_ddiv+0x360>
 8001140:	1e85      	subs	r5, r0, #2
 8001142:	4461      	add	r1, ip
 8001144:	e726      	b.n	8000f94 <__aeabi_ddiv+0x360>
 8001146:	9900      	ldr	r1, [sp, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	468c      	mov	ip, r1
 800114c:	4464      	add	r4, ip
 800114e:	42a1      	cmp	r1, r4
 8001150:	d900      	bls.n	8001154 <__aeabi_ddiv+0x520>
 8001152:	e72d      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 8001154:	42a2      	cmp	r2, r4
 8001156:	d800      	bhi.n	800115a <__aeabi_ddiv+0x526>
 8001158:	e72a      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 800115a:	1e83      	subs	r3, r0, #2
 800115c:	4464      	add	r4, ip
 800115e:	e727      	b.n	8000fb0 <__aeabi_ddiv+0x37c>
 8001160:	4287      	cmp	r7, r0
 8001162:	d000      	beq.n	8001166 <__aeabi_ddiv+0x532>
 8001164:	e6fe      	b.n	8000f64 <__aeabi_ddiv+0x330>
 8001166:	45a9      	cmp	r9, r5
 8001168:	d900      	bls.n	800116c <__aeabi_ddiv+0x538>
 800116a:	e6fb      	b.n	8000f64 <__aeabi_ddiv+0x330>
 800116c:	e6f5      	b.n	8000f5a <__aeabi_ddiv+0x326>
 800116e:	42a2      	cmp	r2, r4
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x540>
 8001172:	e6b9      	b.n	8000ee8 <__aeabi_ddiv+0x2b4>
 8001174:	1e83      	subs	r3, r0, #2
 8001176:	4464      	add	r4, ip
 8001178:	e6b6      	b.n	8000ee8 <__aeabi_ddiv+0x2b4>
 800117a:	428a      	cmp	r2, r1
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x54c>
 800117e:	e69f      	b.n	8000ec0 <__aeabi_ddiv+0x28c>
 8001180:	46bc      	mov	ip, r7
 8001182:	1e83      	subs	r3, r0, #2
 8001184:	4698      	mov	r8, r3
 8001186:	4461      	add	r1, ip
 8001188:	e69a      	b.n	8000ec0 <__aeabi_ddiv+0x28c>
 800118a:	000a      	movs	r2, r1
 800118c:	4284      	cmp	r4, r0
 800118e:	d000      	beq.n	8001192 <__aeabi_ddiv+0x55e>
 8001190:	e72e      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 8001192:	454b      	cmp	r3, r9
 8001194:	d000      	beq.n	8001198 <__aeabi_ddiv+0x564>
 8001196:	e72b      	b.n	8000ff0 <__aeabi_ddiv+0x3bc>
 8001198:	0035      	movs	r5, r6
 800119a:	e72c      	b.n	8000ff6 <__aeabi_ddiv+0x3c2>
 800119c:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <__aeabi_ddiv+0x614>)
 800119e:	4a2f      	ldr	r2, [pc, #188]	@ (800125c <__aeabi_ddiv+0x628>)
 80011a0:	4453      	add	r3, sl
 80011a2:	4592      	cmp	sl, r2
 80011a4:	db43      	blt.n	800122e <__aeabi_ddiv+0x5fa>
 80011a6:	2201      	movs	r2, #1
 80011a8:	2100      	movs	r1, #0
 80011aa:	4493      	add	fp, r2
 80011ac:	e72c      	b.n	8001008 <__aeabi_ddiv+0x3d4>
 80011ae:	42ac      	cmp	r4, r5
 80011b0:	d800      	bhi.n	80011b4 <__aeabi_ddiv+0x580>
 80011b2:	e6d7      	b.n	8000f64 <__aeabi_ddiv+0x330>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9900      	ldr	r1, [sp, #0]
 80011bc:	444d      	add	r5, r9
 80011be:	454d      	cmp	r5, r9
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	44e3      	add	fp, ip
 80011c4:	468c      	mov	ip, r1
 80011c6:	425b      	negs	r3, r3
 80011c8:	4463      	add	r3, ip
 80011ca:	18c0      	adds	r0, r0, r3
 80011cc:	e6cc      	b.n	8000f68 <__aeabi_ddiv+0x334>
 80011ce:	201f      	movs	r0, #31
 80011d0:	4240      	negs	r0, r0
 80011d2:	1ac3      	subs	r3, r0, r3
 80011d4:	4658      	mov	r0, fp
 80011d6:	40d8      	lsrs	r0, r3
 80011d8:	2920      	cmp	r1, #32
 80011da:	d004      	beq.n	80011e6 <__aeabi_ddiv+0x5b2>
 80011dc:	4659      	mov	r1, fp
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <__aeabi_ddiv+0x62c>)
 80011e0:	4453      	add	r3, sl
 80011e2:	4099      	lsls	r1, r3
 80011e4:	430a      	orrs	r2, r1
 80011e6:	1e53      	subs	r3, r2, #1
 80011e8:	419a      	sbcs	r2, r3
 80011ea:	2307      	movs	r3, #7
 80011ec:	0019      	movs	r1, r3
 80011ee:	4302      	orrs	r2, r0
 80011f0:	2400      	movs	r4, #0
 80011f2:	4011      	ands	r1, r2
 80011f4:	4213      	tst	r3, r2
 80011f6:	d009      	beq.n	800120c <__aeabi_ddiv+0x5d8>
 80011f8:	3308      	adds	r3, #8
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d01d      	beq.n	800123c <__aeabi_ddiv+0x608>
 8001200:	1d13      	adds	r3, r2, #4
 8001202:	4293      	cmp	r3, r2
 8001204:	4189      	sbcs	r1, r1
 8001206:	001a      	movs	r2, r3
 8001208:	4249      	negs	r1, r1
 800120a:	0749      	lsls	r1, r1, #29
 800120c:	08d2      	lsrs	r2, r2, #3
 800120e:	430a      	orrs	r2, r1
 8001210:	4690      	mov	r8, r2
 8001212:	2300      	movs	r3, #0
 8001214:	e57a      	b.n	8000d0c <__aeabi_ddiv+0xd8>
 8001216:	4649      	mov	r1, r9
 8001218:	9f00      	ldr	r7, [sp, #0]
 800121a:	004d      	lsls	r5, r1, #1
 800121c:	454d      	cmp	r5, r9
 800121e:	4189      	sbcs	r1, r1
 8001220:	46bc      	mov	ip, r7
 8001222:	4249      	negs	r1, r1
 8001224:	4461      	add	r1, ip
 8001226:	46a9      	mov	r9, r5
 8001228:	3a02      	subs	r2, #2
 800122a:	1864      	adds	r4, r4, r1
 800122c:	e7ae      	b.n	800118c <__aeabi_ddiv+0x558>
 800122e:	2201      	movs	r2, #1
 8001230:	4252      	negs	r2, r2
 8001232:	e746      	b.n	80010c2 <__aeabi_ddiv+0x48e>
 8001234:	4599      	cmp	r9, r3
 8001236:	d3ee      	bcc.n	8001216 <__aeabi_ddiv+0x5e2>
 8001238:	000a      	movs	r2, r1
 800123a:	e7aa      	b.n	8001192 <__aeabi_ddiv+0x55e>
 800123c:	2100      	movs	r1, #0
 800123e:	e7e5      	b.n	800120c <__aeabi_ddiv+0x5d8>
 8001240:	0759      	lsls	r1, r3, #29
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	0b1c      	lsrs	r4, r3, #12
 8001246:	e7e1      	b.n	800120c <__aeabi_ddiv+0x5d8>
 8001248:	000003ff 	.word	0x000003ff
 800124c:	feffffff 	.word	0xfeffffff
 8001250:	000007fe 	.word	0x000007fe
 8001254:	000007ff 	.word	0x000007ff
 8001258:	0000041e 	.word	0x0000041e
 800125c:	fffffc02 	.word	0xfffffc02
 8001260:	0000043e 	.word	0x0000043e

08001264 <__eqdf2>:
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	4657      	mov	r7, sl
 8001268:	46de      	mov	lr, fp
 800126a:	464e      	mov	r6, r9
 800126c:	4645      	mov	r5, r8
 800126e:	b5e0      	push	{r5, r6, r7, lr}
 8001270:	000d      	movs	r5, r1
 8001272:	0004      	movs	r4, r0
 8001274:	0fe8      	lsrs	r0, r5, #31
 8001276:	4683      	mov	fp, r0
 8001278:	0309      	lsls	r1, r1, #12
 800127a:	0fd8      	lsrs	r0, r3, #31
 800127c:	0b09      	lsrs	r1, r1, #12
 800127e:	4682      	mov	sl, r0
 8001280:	4819      	ldr	r0, [pc, #100]	@ (80012e8 <__eqdf2+0x84>)
 8001282:	468c      	mov	ip, r1
 8001284:	031f      	lsls	r7, r3, #12
 8001286:	0069      	lsls	r1, r5, #1
 8001288:	005e      	lsls	r6, r3, #1
 800128a:	0d49      	lsrs	r1, r1, #21
 800128c:	0b3f      	lsrs	r7, r7, #12
 800128e:	0d76      	lsrs	r6, r6, #21
 8001290:	4281      	cmp	r1, r0
 8001292:	d018      	beq.n	80012c6 <__eqdf2+0x62>
 8001294:	4286      	cmp	r6, r0
 8001296:	d00f      	beq.n	80012b8 <__eqdf2+0x54>
 8001298:	2001      	movs	r0, #1
 800129a:	42b1      	cmp	r1, r6
 800129c:	d10d      	bne.n	80012ba <__eqdf2+0x56>
 800129e:	45bc      	cmp	ip, r7
 80012a0:	d10b      	bne.n	80012ba <__eqdf2+0x56>
 80012a2:	4294      	cmp	r4, r2
 80012a4:	d109      	bne.n	80012ba <__eqdf2+0x56>
 80012a6:	45d3      	cmp	fp, sl
 80012a8:	d01c      	beq.n	80012e4 <__eqdf2+0x80>
 80012aa:	2900      	cmp	r1, #0
 80012ac:	d105      	bne.n	80012ba <__eqdf2+0x56>
 80012ae:	4660      	mov	r0, ip
 80012b0:	4320      	orrs	r0, r4
 80012b2:	1e43      	subs	r3, r0, #1
 80012b4:	4198      	sbcs	r0, r3
 80012b6:	e000      	b.n	80012ba <__eqdf2+0x56>
 80012b8:	2001      	movs	r0, #1
 80012ba:	bcf0      	pop	{r4, r5, r6, r7}
 80012bc:	46bb      	mov	fp, r7
 80012be:	46b2      	mov	sl, r6
 80012c0:	46a9      	mov	r9, r5
 80012c2:	46a0      	mov	r8, r4
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c6:	2001      	movs	r0, #1
 80012c8:	428e      	cmp	r6, r1
 80012ca:	d1f6      	bne.n	80012ba <__eqdf2+0x56>
 80012cc:	4661      	mov	r1, ip
 80012ce:	4339      	orrs	r1, r7
 80012d0:	000f      	movs	r7, r1
 80012d2:	4317      	orrs	r7, r2
 80012d4:	4327      	orrs	r7, r4
 80012d6:	d1f0      	bne.n	80012ba <__eqdf2+0x56>
 80012d8:	465b      	mov	r3, fp
 80012da:	4652      	mov	r2, sl
 80012dc:	1a98      	subs	r0, r3, r2
 80012de:	1e43      	subs	r3, r0, #1
 80012e0:	4198      	sbcs	r0, r3
 80012e2:	e7ea      	b.n	80012ba <__eqdf2+0x56>
 80012e4:	2000      	movs	r0, #0
 80012e6:	e7e8      	b.n	80012ba <__eqdf2+0x56>
 80012e8:	000007ff 	.word	0x000007ff

080012ec <__gedf2>:
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	4657      	mov	r7, sl
 80012f0:	464e      	mov	r6, r9
 80012f2:	4645      	mov	r5, r8
 80012f4:	46de      	mov	lr, fp
 80012f6:	b5e0      	push	{r5, r6, r7, lr}
 80012f8:	000d      	movs	r5, r1
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	0d49      	lsrs	r1, r1, #21
 8001300:	468a      	mov	sl, r1
 8001302:	0fdf      	lsrs	r7, r3, #31
 8001304:	0fe9      	lsrs	r1, r5, #31
 8001306:	46bc      	mov	ip, r7
 8001308:	b083      	sub	sp, #12
 800130a:	4f2f      	ldr	r7, [pc, #188]	@ (80013c8 <__gedf2+0xdc>)
 800130c:	0004      	movs	r4, r0
 800130e:	4680      	mov	r8, r0
 8001310:	9101      	str	r1, [sp, #4]
 8001312:	0058      	lsls	r0, r3, #1
 8001314:	0319      	lsls	r1, r3, #12
 8001316:	4691      	mov	r9, r2
 8001318:	0b36      	lsrs	r6, r6, #12
 800131a:	0b09      	lsrs	r1, r1, #12
 800131c:	0d40      	lsrs	r0, r0, #21
 800131e:	45ba      	cmp	sl, r7
 8001320:	d01d      	beq.n	800135e <__gedf2+0x72>
 8001322:	42b8      	cmp	r0, r7
 8001324:	d00d      	beq.n	8001342 <__gedf2+0x56>
 8001326:	4657      	mov	r7, sl
 8001328:	2f00      	cmp	r7, #0
 800132a:	d12a      	bne.n	8001382 <__gedf2+0x96>
 800132c:	4334      	orrs	r4, r6
 800132e:	2800      	cmp	r0, #0
 8001330:	d124      	bne.n	800137c <__gedf2+0x90>
 8001332:	430a      	orrs	r2, r1
 8001334:	d036      	beq.n	80013a4 <__gedf2+0xb8>
 8001336:	2c00      	cmp	r4, #0
 8001338:	d141      	bne.n	80013be <__gedf2+0xd2>
 800133a:	4663      	mov	r3, ip
 800133c:	0058      	lsls	r0, r3, #1
 800133e:	3801      	subs	r0, #1
 8001340:	e015      	b.n	800136e <__gedf2+0x82>
 8001342:	4311      	orrs	r1, r2
 8001344:	d138      	bne.n	80013b8 <__gedf2+0xcc>
 8001346:	4653      	mov	r3, sl
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <__gedf2+0x64>
 800134c:	4326      	orrs	r6, r4
 800134e:	d0f4      	beq.n	800133a <__gedf2+0x4e>
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	4563      	cmp	r3, ip
 8001354:	d107      	bne.n	8001366 <__gedf2+0x7a>
 8001356:	9b01      	ldr	r3, [sp, #4]
 8001358:	0058      	lsls	r0, r3, #1
 800135a:	3801      	subs	r0, #1
 800135c:	e007      	b.n	800136e <__gedf2+0x82>
 800135e:	4326      	orrs	r6, r4
 8001360:	d12a      	bne.n	80013b8 <__gedf2+0xcc>
 8001362:	4550      	cmp	r0, sl
 8001364:	d021      	beq.n	80013aa <__gedf2+0xbe>
 8001366:	2001      	movs	r0, #1
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	425f      	negs	r7, r3
 800136c:	4338      	orrs	r0, r7
 800136e:	b003      	add	sp, #12
 8001370:	bcf0      	pop	{r4, r5, r6, r7}
 8001372:	46bb      	mov	fp, r7
 8001374:	46b2      	mov	sl, r6
 8001376:	46a9      	mov	r9, r5
 8001378:	46a0      	mov	r8, r4
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137c:	2c00      	cmp	r4, #0
 800137e:	d0dc      	beq.n	800133a <__gedf2+0x4e>
 8001380:	e7e6      	b.n	8001350 <__gedf2+0x64>
 8001382:	2800      	cmp	r0, #0
 8001384:	d0ef      	beq.n	8001366 <__gedf2+0x7a>
 8001386:	9b01      	ldr	r3, [sp, #4]
 8001388:	4563      	cmp	r3, ip
 800138a:	d1ec      	bne.n	8001366 <__gedf2+0x7a>
 800138c:	4582      	cmp	sl, r0
 800138e:	dcea      	bgt.n	8001366 <__gedf2+0x7a>
 8001390:	dbe1      	blt.n	8001356 <__gedf2+0x6a>
 8001392:	428e      	cmp	r6, r1
 8001394:	d8e7      	bhi.n	8001366 <__gedf2+0x7a>
 8001396:	d1de      	bne.n	8001356 <__gedf2+0x6a>
 8001398:	45c8      	cmp	r8, r9
 800139a:	d8e4      	bhi.n	8001366 <__gedf2+0x7a>
 800139c:	2000      	movs	r0, #0
 800139e:	45c8      	cmp	r8, r9
 80013a0:	d2e5      	bcs.n	800136e <__gedf2+0x82>
 80013a2:	e7d8      	b.n	8001356 <__gedf2+0x6a>
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d0e2      	beq.n	800136e <__gedf2+0x82>
 80013a8:	e7dd      	b.n	8001366 <__gedf2+0x7a>
 80013aa:	4311      	orrs	r1, r2
 80013ac:	d104      	bne.n	80013b8 <__gedf2+0xcc>
 80013ae:	9b01      	ldr	r3, [sp, #4]
 80013b0:	4563      	cmp	r3, ip
 80013b2:	d1d8      	bne.n	8001366 <__gedf2+0x7a>
 80013b4:	2000      	movs	r0, #0
 80013b6:	e7da      	b.n	800136e <__gedf2+0x82>
 80013b8:	2002      	movs	r0, #2
 80013ba:	4240      	negs	r0, r0
 80013bc:	e7d7      	b.n	800136e <__gedf2+0x82>
 80013be:	9b01      	ldr	r3, [sp, #4]
 80013c0:	4563      	cmp	r3, ip
 80013c2:	d0e6      	beq.n	8001392 <__gedf2+0xa6>
 80013c4:	e7cf      	b.n	8001366 <__gedf2+0x7a>
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff

080013cc <__ledf2>:
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4657      	mov	r7, sl
 80013d0:	464e      	mov	r6, r9
 80013d2:	4645      	mov	r5, r8
 80013d4:	46de      	mov	lr, fp
 80013d6:	b5e0      	push	{r5, r6, r7, lr}
 80013d8:	000d      	movs	r5, r1
 80013da:	030e      	lsls	r6, r1, #12
 80013dc:	0049      	lsls	r1, r1, #1
 80013de:	0d49      	lsrs	r1, r1, #21
 80013e0:	468a      	mov	sl, r1
 80013e2:	0fdf      	lsrs	r7, r3, #31
 80013e4:	0fe9      	lsrs	r1, r5, #31
 80013e6:	46bc      	mov	ip, r7
 80013e8:	b083      	sub	sp, #12
 80013ea:	4f2e      	ldr	r7, [pc, #184]	@ (80014a4 <__ledf2+0xd8>)
 80013ec:	0004      	movs	r4, r0
 80013ee:	4680      	mov	r8, r0
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	0058      	lsls	r0, r3, #1
 80013f4:	0319      	lsls	r1, r3, #12
 80013f6:	4691      	mov	r9, r2
 80013f8:	0b36      	lsrs	r6, r6, #12
 80013fa:	0b09      	lsrs	r1, r1, #12
 80013fc:	0d40      	lsrs	r0, r0, #21
 80013fe:	45ba      	cmp	sl, r7
 8001400:	d01e      	beq.n	8001440 <__ledf2+0x74>
 8001402:	42b8      	cmp	r0, r7
 8001404:	d00d      	beq.n	8001422 <__ledf2+0x56>
 8001406:	4657      	mov	r7, sl
 8001408:	2f00      	cmp	r7, #0
 800140a:	d127      	bne.n	800145c <__ledf2+0x90>
 800140c:	4334      	orrs	r4, r6
 800140e:	2800      	cmp	r0, #0
 8001410:	d133      	bne.n	800147a <__ledf2+0xae>
 8001412:	430a      	orrs	r2, r1
 8001414:	d034      	beq.n	8001480 <__ledf2+0xb4>
 8001416:	2c00      	cmp	r4, #0
 8001418:	d140      	bne.n	800149c <__ledf2+0xd0>
 800141a:	4663      	mov	r3, ip
 800141c:	0058      	lsls	r0, r3, #1
 800141e:	3801      	subs	r0, #1
 8001420:	e015      	b.n	800144e <__ledf2+0x82>
 8001422:	4311      	orrs	r1, r2
 8001424:	d112      	bne.n	800144c <__ledf2+0x80>
 8001426:	4653      	mov	r3, sl
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <__ledf2+0x64>
 800142c:	4326      	orrs	r6, r4
 800142e:	d0f4      	beq.n	800141a <__ledf2+0x4e>
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	4563      	cmp	r3, ip
 8001434:	d01d      	beq.n	8001472 <__ledf2+0xa6>
 8001436:	2001      	movs	r0, #1
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	425f      	negs	r7, r3
 800143c:	4338      	orrs	r0, r7
 800143e:	e006      	b.n	800144e <__ledf2+0x82>
 8001440:	4326      	orrs	r6, r4
 8001442:	d103      	bne.n	800144c <__ledf2+0x80>
 8001444:	4550      	cmp	r0, sl
 8001446:	d1f6      	bne.n	8001436 <__ledf2+0x6a>
 8001448:	4311      	orrs	r1, r2
 800144a:	d01c      	beq.n	8001486 <__ledf2+0xba>
 800144c:	2002      	movs	r0, #2
 800144e:	b003      	add	sp, #12
 8001450:	bcf0      	pop	{r4, r5, r6, r7}
 8001452:	46bb      	mov	fp, r7
 8001454:	46b2      	mov	sl, r6
 8001456:	46a9      	mov	r9, r5
 8001458:	46a0      	mov	r8, r4
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	2800      	cmp	r0, #0
 800145e:	d0ea      	beq.n	8001436 <__ledf2+0x6a>
 8001460:	9b01      	ldr	r3, [sp, #4]
 8001462:	4563      	cmp	r3, ip
 8001464:	d1e7      	bne.n	8001436 <__ledf2+0x6a>
 8001466:	4582      	cmp	sl, r0
 8001468:	dce5      	bgt.n	8001436 <__ledf2+0x6a>
 800146a:	db02      	blt.n	8001472 <__ledf2+0xa6>
 800146c:	428e      	cmp	r6, r1
 800146e:	d8e2      	bhi.n	8001436 <__ledf2+0x6a>
 8001470:	d00e      	beq.n	8001490 <__ledf2+0xc4>
 8001472:	9b01      	ldr	r3, [sp, #4]
 8001474:	0058      	lsls	r0, r3, #1
 8001476:	3801      	subs	r0, #1
 8001478:	e7e9      	b.n	800144e <__ledf2+0x82>
 800147a:	2c00      	cmp	r4, #0
 800147c:	d0cd      	beq.n	800141a <__ledf2+0x4e>
 800147e:	e7d7      	b.n	8001430 <__ledf2+0x64>
 8001480:	2c00      	cmp	r4, #0
 8001482:	d0e4      	beq.n	800144e <__ledf2+0x82>
 8001484:	e7d7      	b.n	8001436 <__ledf2+0x6a>
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	2000      	movs	r0, #0
 800148a:	4563      	cmp	r3, ip
 800148c:	d0df      	beq.n	800144e <__ledf2+0x82>
 800148e:	e7d2      	b.n	8001436 <__ledf2+0x6a>
 8001490:	45c8      	cmp	r8, r9
 8001492:	d8d0      	bhi.n	8001436 <__ledf2+0x6a>
 8001494:	2000      	movs	r0, #0
 8001496:	45c8      	cmp	r8, r9
 8001498:	d2d9      	bcs.n	800144e <__ledf2+0x82>
 800149a:	e7ea      	b.n	8001472 <__ledf2+0xa6>
 800149c:	9b01      	ldr	r3, [sp, #4]
 800149e:	4563      	cmp	r3, ip
 80014a0:	d0e4      	beq.n	800146c <__ledf2+0xa0>
 80014a2:	e7c8      	b.n	8001436 <__ledf2+0x6a>
 80014a4:	000007ff 	.word	0x000007ff

080014a8 <__aeabi_dmul>:
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	4657      	mov	r7, sl
 80014ac:	464e      	mov	r6, r9
 80014ae:	46de      	mov	lr, fp
 80014b0:	4645      	mov	r5, r8
 80014b2:	b5e0      	push	{r5, r6, r7, lr}
 80014b4:	001f      	movs	r7, r3
 80014b6:	030b      	lsls	r3, r1, #12
 80014b8:	0b1b      	lsrs	r3, r3, #12
 80014ba:	0016      	movs	r6, r2
 80014bc:	469a      	mov	sl, r3
 80014be:	0fca      	lsrs	r2, r1, #31
 80014c0:	004b      	lsls	r3, r1, #1
 80014c2:	0004      	movs	r4, r0
 80014c4:	4691      	mov	r9, r2
 80014c6:	b085      	sub	sp, #20
 80014c8:	0d5b      	lsrs	r3, r3, #21
 80014ca:	d100      	bne.n	80014ce <__aeabi_dmul+0x26>
 80014cc:	e1cf      	b.n	800186e <__aeabi_dmul+0x3c6>
 80014ce:	4acd      	ldr	r2, [pc, #820]	@ (8001804 <__aeabi_dmul+0x35c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d055      	beq.n	8001580 <__aeabi_dmul+0xd8>
 80014d4:	4651      	mov	r1, sl
 80014d6:	0f42      	lsrs	r2, r0, #29
 80014d8:	00c9      	lsls	r1, r1, #3
 80014da:	430a      	orrs	r2, r1
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	0409      	lsls	r1, r1, #16
 80014e0:	4311      	orrs	r1, r2
 80014e2:	00c2      	lsls	r2, r0, #3
 80014e4:	4690      	mov	r8, r2
 80014e6:	4ac8      	ldr	r2, [pc, #800]	@ (8001808 <__aeabi_dmul+0x360>)
 80014e8:	468a      	mov	sl, r1
 80014ea:	4693      	mov	fp, r2
 80014ec:	449b      	add	fp, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	2500      	movs	r5, #0
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	033c      	lsls	r4, r7, #12
 80014f6:	007b      	lsls	r3, r7, #1
 80014f8:	0ffa      	lsrs	r2, r7, #31
 80014fa:	9601      	str	r6, [sp, #4]
 80014fc:	0b24      	lsrs	r4, r4, #12
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x5e>
 8001504:	e188      	b.n	8001818 <__aeabi_dmul+0x370>
 8001506:	4abf      	ldr	r2, [pc, #764]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d100      	bne.n	800150e <__aeabi_dmul+0x66>
 800150c:	e092      	b.n	8001634 <__aeabi_dmul+0x18c>
 800150e:	4abe      	ldr	r2, [pc, #760]	@ (8001808 <__aeabi_dmul+0x360>)
 8001510:	4694      	mov	ip, r2
 8001512:	4463      	add	r3, ip
 8001514:	449b      	add	fp, r3
 8001516:	2d0a      	cmp	r5, #10
 8001518:	dc42      	bgt.n	80015a0 <__aeabi_dmul+0xf8>
 800151a:	00e4      	lsls	r4, r4, #3
 800151c:	0f73      	lsrs	r3, r6, #29
 800151e:	4323      	orrs	r3, r4
 8001520:	2480      	movs	r4, #128	@ 0x80
 8001522:	4649      	mov	r1, r9
 8001524:	0424      	lsls	r4, r4, #16
 8001526:	431c      	orrs	r4, r3
 8001528:	00f3      	lsls	r3, r6, #3
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	9b00      	ldr	r3, [sp, #0]
 800152e:	2000      	movs	r0, #0
 8001530:	4059      	eors	r1, r3
 8001532:	b2cb      	uxtb	r3, r1
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	2d02      	cmp	r5, #2
 8001538:	dc00      	bgt.n	800153c <__aeabi_dmul+0x94>
 800153a:	e094      	b.n	8001666 <__aeabi_dmul+0x1be>
 800153c:	2301      	movs	r3, #1
 800153e:	40ab      	lsls	r3, r5
 8001540:	001d      	movs	r5, r3
 8001542:	23a6      	movs	r3, #166	@ 0xa6
 8001544:	002a      	movs	r2, r5
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	401a      	ands	r2, r3
 800154a:	421d      	tst	r5, r3
 800154c:	d000      	beq.n	8001550 <__aeabi_dmul+0xa8>
 800154e:	e229      	b.n	80019a4 <__aeabi_dmul+0x4fc>
 8001550:	2390      	movs	r3, #144	@ 0x90
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	421d      	tst	r5, r3
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0xb2>
 8001558:	e24d      	b.n	80019f6 <__aeabi_dmul+0x54e>
 800155a:	2300      	movs	r3, #0
 800155c:	2480      	movs	r4, #128	@ 0x80
 800155e:	4699      	mov	r9, r3
 8001560:	0324      	lsls	r4, r4, #12
 8001562:	4ba8      	ldr	r3, [pc, #672]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001564:	0010      	movs	r0, r2
 8001566:	464a      	mov	r2, r9
 8001568:	051b      	lsls	r3, r3, #20
 800156a:	4323      	orrs	r3, r4
 800156c:	07d2      	lsls	r2, r2, #31
 800156e:	4313      	orrs	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	b005      	add	sp, #20
 8001574:	bcf0      	pop	{r4, r5, r6, r7}
 8001576:	46bb      	mov	fp, r7
 8001578:	46b2      	mov	sl, r6
 800157a:	46a9      	mov	r9, r5
 800157c:	46a0      	mov	r8, r4
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001580:	4652      	mov	r2, sl
 8001582:	4302      	orrs	r2, r0
 8001584:	4690      	mov	r8, r2
 8001586:	d000      	beq.n	800158a <__aeabi_dmul+0xe2>
 8001588:	e1ac      	b.n	80018e4 <__aeabi_dmul+0x43c>
 800158a:	469b      	mov	fp, r3
 800158c:	2302      	movs	r3, #2
 800158e:	4692      	mov	sl, r2
 8001590:	2508      	movs	r5, #8
 8001592:	9302      	str	r3, [sp, #8]
 8001594:	e7ae      	b.n	80014f4 <__aeabi_dmul+0x4c>
 8001596:	9b00      	ldr	r3, [sp, #0]
 8001598:	46a2      	mov	sl, r4
 800159a:	4699      	mov	r9, r3
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	4698      	mov	r8, r3
 80015a0:	9b02      	ldr	r3, [sp, #8]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0x100>
 80015a6:	e1ca      	b.n	800193e <__aeabi_dmul+0x496>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0x106>
 80015ac:	e192      	b.n	80018d4 <__aeabi_dmul+0x42c>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d110      	bne.n	80015d4 <__aeabi_dmul+0x12c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2400      	movs	r4, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	e7d4      	b.n	8001564 <__aeabi_dmul+0xbc>
 80015ba:	2201      	movs	r2, #1
 80015bc:	087b      	lsrs	r3, r7, #1
 80015be:	403a      	ands	r2, r7
 80015c0:	4313      	orrs	r3, r2
 80015c2:	4652      	mov	r2, sl
 80015c4:	07d2      	lsls	r2, r2, #31
 80015c6:	4313      	orrs	r3, r2
 80015c8:	4698      	mov	r8, r3
 80015ca:	4653      	mov	r3, sl
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	469a      	mov	sl, r3
 80015d0:	9b03      	ldr	r3, [sp, #12]
 80015d2:	4699      	mov	r9, r3
 80015d4:	465b      	mov	r3, fp
 80015d6:	1c58      	adds	r0, r3, #1
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	445b      	add	r3, fp
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dc00      	bgt.n	80015e4 <__aeabi_dmul+0x13c>
 80015e2:	e1b1      	b.n	8001948 <__aeabi_dmul+0x4a0>
 80015e4:	4642      	mov	r2, r8
 80015e6:	0752      	lsls	r2, r2, #29
 80015e8:	d00b      	beq.n	8001602 <__aeabi_dmul+0x15a>
 80015ea:	220f      	movs	r2, #15
 80015ec:	4641      	mov	r1, r8
 80015ee:	400a      	ands	r2, r1
 80015f0:	2a04      	cmp	r2, #4
 80015f2:	d006      	beq.n	8001602 <__aeabi_dmul+0x15a>
 80015f4:	4642      	mov	r2, r8
 80015f6:	1d11      	adds	r1, r2, #4
 80015f8:	4541      	cmp	r1, r8
 80015fa:	4192      	sbcs	r2, r2
 80015fc:	4688      	mov	r8, r1
 80015fe:	4252      	negs	r2, r2
 8001600:	4492      	add	sl, r2
 8001602:	4652      	mov	r2, sl
 8001604:	01d2      	lsls	r2, r2, #7
 8001606:	d506      	bpl.n	8001616 <__aeabi_dmul+0x16e>
 8001608:	4652      	mov	r2, sl
 800160a:	4b80      	ldr	r3, [pc, #512]	@ (800180c <__aeabi_dmul+0x364>)
 800160c:	401a      	ands	r2, r3
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	4692      	mov	sl, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	18c3      	adds	r3, r0, r3
 8001616:	4a7e      	ldr	r2, [pc, #504]	@ (8001810 <__aeabi_dmul+0x368>)
 8001618:	4293      	cmp	r3, r2
 800161a:	dd00      	ble.n	800161e <__aeabi_dmul+0x176>
 800161c:	e18f      	b.n	800193e <__aeabi_dmul+0x496>
 800161e:	4642      	mov	r2, r8
 8001620:	08d1      	lsrs	r1, r2, #3
 8001622:	4652      	mov	r2, sl
 8001624:	0752      	lsls	r2, r2, #29
 8001626:	430a      	orrs	r2, r1
 8001628:	4651      	mov	r1, sl
 800162a:	055b      	lsls	r3, r3, #21
 800162c:	024c      	lsls	r4, r1, #9
 800162e:	0b24      	lsrs	r4, r4, #12
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	e797      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001634:	4b73      	ldr	r3, [pc, #460]	@ (8001804 <__aeabi_dmul+0x35c>)
 8001636:	4326      	orrs	r6, r4
 8001638:	469c      	mov	ip, r3
 800163a:	44e3      	add	fp, ip
 800163c:	2e00      	cmp	r6, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_dmul+0x19a>
 8001640:	e16f      	b.n	8001922 <__aeabi_dmul+0x47a>
 8001642:	2303      	movs	r3, #3
 8001644:	4649      	mov	r1, r9
 8001646:	431d      	orrs	r5, r3
 8001648:	9b00      	ldr	r3, [sp, #0]
 800164a:	4059      	eors	r1, r3
 800164c:	b2cb      	uxtb	r3, r1
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	2d0a      	cmp	r5, #10
 8001652:	dd00      	ble.n	8001656 <__aeabi_dmul+0x1ae>
 8001654:	e133      	b.n	80018be <__aeabi_dmul+0x416>
 8001656:	2301      	movs	r3, #1
 8001658:	40ab      	lsls	r3, r5
 800165a:	001d      	movs	r5, r3
 800165c:	2303      	movs	r3, #3
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2288      	movs	r2, #136	@ 0x88
 8001662:	422a      	tst	r2, r5
 8001664:	d197      	bne.n	8001596 <__aeabi_dmul+0xee>
 8001666:	4642      	mov	r2, r8
 8001668:	4643      	mov	r3, r8
 800166a:	0412      	lsls	r2, r2, #16
 800166c:	0c12      	lsrs	r2, r2, #16
 800166e:	0016      	movs	r6, r2
 8001670:	9801      	ldr	r0, [sp, #4]
 8001672:	0c1d      	lsrs	r5, r3, #16
 8001674:	0c03      	lsrs	r3, r0, #16
 8001676:	0400      	lsls	r0, r0, #16
 8001678:	0c00      	lsrs	r0, r0, #16
 800167a:	4346      	muls	r6, r0
 800167c:	46b4      	mov	ip, r6
 800167e:	001e      	movs	r6, r3
 8001680:	436e      	muls	r6, r5
 8001682:	9600      	str	r6, [sp, #0]
 8001684:	0016      	movs	r6, r2
 8001686:	0007      	movs	r7, r0
 8001688:	435e      	muls	r6, r3
 800168a:	4661      	mov	r1, ip
 800168c:	46b0      	mov	r8, r6
 800168e:	436f      	muls	r7, r5
 8001690:	0c0e      	lsrs	r6, r1, #16
 8001692:	44b8      	add	r8, r7
 8001694:	4446      	add	r6, r8
 8001696:	42b7      	cmp	r7, r6
 8001698:	d905      	bls.n	80016a6 <__aeabi_dmul+0x1fe>
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	0249      	lsls	r1, r1, #9
 800169e:	4688      	mov	r8, r1
 80016a0:	9f00      	ldr	r7, [sp, #0]
 80016a2:	4447      	add	r7, r8
 80016a4:	9700      	str	r7, [sp, #0]
 80016a6:	4661      	mov	r1, ip
 80016a8:	0409      	lsls	r1, r1, #16
 80016aa:	0c09      	lsrs	r1, r1, #16
 80016ac:	0c37      	lsrs	r7, r6, #16
 80016ae:	0436      	lsls	r6, r6, #16
 80016b0:	468c      	mov	ip, r1
 80016b2:	0031      	movs	r1, r6
 80016b4:	4461      	add	r1, ip
 80016b6:	9101      	str	r1, [sp, #4]
 80016b8:	0011      	movs	r1, r2
 80016ba:	0c26      	lsrs	r6, r4, #16
 80016bc:	0424      	lsls	r4, r4, #16
 80016be:	0c24      	lsrs	r4, r4, #16
 80016c0:	4361      	muls	r1, r4
 80016c2:	468c      	mov	ip, r1
 80016c4:	0021      	movs	r1, r4
 80016c6:	4369      	muls	r1, r5
 80016c8:	4689      	mov	r9, r1
 80016ca:	4661      	mov	r1, ip
 80016cc:	0c09      	lsrs	r1, r1, #16
 80016ce:	4688      	mov	r8, r1
 80016d0:	4372      	muls	r2, r6
 80016d2:	444a      	add	r2, r9
 80016d4:	4442      	add	r2, r8
 80016d6:	4375      	muls	r5, r6
 80016d8:	4591      	cmp	r9, r2
 80016da:	d903      	bls.n	80016e4 <__aeabi_dmul+0x23c>
 80016dc:	2180      	movs	r1, #128	@ 0x80
 80016de:	0249      	lsls	r1, r1, #9
 80016e0:	4688      	mov	r8, r1
 80016e2:	4445      	add	r5, r8
 80016e4:	0c11      	lsrs	r1, r2, #16
 80016e6:	4688      	mov	r8, r1
 80016e8:	4661      	mov	r1, ip
 80016ea:	0409      	lsls	r1, r1, #16
 80016ec:	0c09      	lsrs	r1, r1, #16
 80016ee:	468c      	mov	ip, r1
 80016f0:	0412      	lsls	r2, r2, #16
 80016f2:	4462      	add	r2, ip
 80016f4:	18b9      	adds	r1, r7, r2
 80016f6:	9102      	str	r1, [sp, #8]
 80016f8:	4651      	mov	r1, sl
 80016fa:	0c09      	lsrs	r1, r1, #16
 80016fc:	468c      	mov	ip, r1
 80016fe:	4651      	mov	r1, sl
 8001700:	040f      	lsls	r7, r1, #16
 8001702:	0c3f      	lsrs	r7, r7, #16
 8001704:	0039      	movs	r1, r7
 8001706:	4341      	muls	r1, r0
 8001708:	4445      	add	r5, r8
 800170a:	4688      	mov	r8, r1
 800170c:	4661      	mov	r1, ip
 800170e:	4341      	muls	r1, r0
 8001710:	468a      	mov	sl, r1
 8001712:	4641      	mov	r1, r8
 8001714:	4660      	mov	r0, ip
 8001716:	0c09      	lsrs	r1, r1, #16
 8001718:	4689      	mov	r9, r1
 800171a:	4358      	muls	r0, r3
 800171c:	437b      	muls	r3, r7
 800171e:	4453      	add	r3, sl
 8001720:	444b      	add	r3, r9
 8001722:	459a      	cmp	sl, r3
 8001724:	d903      	bls.n	800172e <__aeabi_dmul+0x286>
 8001726:	2180      	movs	r1, #128	@ 0x80
 8001728:	0249      	lsls	r1, r1, #9
 800172a:	4689      	mov	r9, r1
 800172c:	4448      	add	r0, r9
 800172e:	0c19      	lsrs	r1, r3, #16
 8001730:	4689      	mov	r9, r1
 8001732:	4641      	mov	r1, r8
 8001734:	0409      	lsls	r1, r1, #16
 8001736:	0c09      	lsrs	r1, r1, #16
 8001738:	4688      	mov	r8, r1
 800173a:	0039      	movs	r1, r7
 800173c:	4361      	muls	r1, r4
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	4443      	add	r3, r8
 8001742:	4688      	mov	r8, r1
 8001744:	4661      	mov	r1, ip
 8001746:	434c      	muls	r4, r1
 8001748:	4371      	muls	r1, r6
 800174a:	468c      	mov	ip, r1
 800174c:	4641      	mov	r1, r8
 800174e:	4377      	muls	r7, r6
 8001750:	0c0e      	lsrs	r6, r1, #16
 8001752:	193f      	adds	r7, r7, r4
 8001754:	19f6      	adds	r6, r6, r7
 8001756:	4448      	add	r0, r9
 8001758:	42b4      	cmp	r4, r6
 800175a:	d903      	bls.n	8001764 <__aeabi_dmul+0x2bc>
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	0249      	lsls	r1, r1, #9
 8001760:	4689      	mov	r9, r1
 8001762:	44cc      	add	ip, r9
 8001764:	9902      	ldr	r1, [sp, #8]
 8001766:	9f00      	ldr	r7, [sp, #0]
 8001768:	4689      	mov	r9, r1
 800176a:	0431      	lsls	r1, r6, #16
 800176c:	444f      	add	r7, r9
 800176e:	4689      	mov	r9, r1
 8001770:	4641      	mov	r1, r8
 8001772:	4297      	cmp	r7, r2
 8001774:	4192      	sbcs	r2, r2
 8001776:	040c      	lsls	r4, r1, #16
 8001778:	0c24      	lsrs	r4, r4, #16
 800177a:	444c      	add	r4, r9
 800177c:	18ff      	adds	r7, r7, r3
 800177e:	4252      	negs	r2, r2
 8001780:	1964      	adds	r4, r4, r5
 8001782:	18a1      	adds	r1, r4, r2
 8001784:	429f      	cmp	r7, r3
 8001786:	419b      	sbcs	r3, r3
 8001788:	4688      	mov	r8, r1
 800178a:	4682      	mov	sl, r0
 800178c:	425b      	negs	r3, r3
 800178e:	4699      	mov	r9, r3
 8001790:	4590      	cmp	r8, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	42ac      	cmp	r4, r5
 8001796:	41a4      	sbcs	r4, r4
 8001798:	44c2      	add	sl, r8
 800179a:	44d1      	add	r9, sl
 800179c:	4252      	negs	r2, r2
 800179e:	4264      	negs	r4, r4
 80017a0:	4314      	orrs	r4, r2
 80017a2:	4599      	cmp	r9, r3
 80017a4:	419b      	sbcs	r3, r3
 80017a6:	4582      	cmp	sl, r0
 80017a8:	4192      	sbcs	r2, r2
 80017aa:	425b      	negs	r3, r3
 80017ac:	4252      	negs	r2, r2
 80017ae:	4313      	orrs	r3, r2
 80017b0:	464a      	mov	r2, r9
 80017b2:	0c36      	lsrs	r6, r6, #16
 80017b4:	19a4      	adds	r4, r4, r6
 80017b6:	18e3      	adds	r3, r4, r3
 80017b8:	4463      	add	r3, ip
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	0dd2      	lsrs	r2, r2, #23
 80017be:	431a      	orrs	r2, r3
 80017c0:	9901      	ldr	r1, [sp, #4]
 80017c2:	4692      	mov	sl, r2
 80017c4:	027a      	lsls	r2, r7, #9
 80017c6:	430a      	orrs	r2, r1
 80017c8:	1e50      	subs	r0, r2, #1
 80017ca:	4182      	sbcs	r2, r0
 80017cc:	0dff      	lsrs	r7, r7, #23
 80017ce:	4317      	orrs	r7, r2
 80017d0:	464a      	mov	r2, r9
 80017d2:	0252      	lsls	r2, r2, #9
 80017d4:	4317      	orrs	r7, r2
 80017d6:	46b8      	mov	r8, r7
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	d500      	bpl.n	80017de <__aeabi_dmul+0x336>
 80017dc:	e6ed      	b.n	80015ba <__aeabi_dmul+0x112>
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <__aeabi_dmul+0x36c>)
 80017e0:	9a03      	ldr	r2, [sp, #12]
 80017e2:	445b      	add	r3, fp
 80017e4:	4691      	mov	r9, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_dmul+0x344>
 80017ea:	e0ac      	b.n	8001946 <__aeabi_dmul+0x49e>
 80017ec:	003a      	movs	r2, r7
 80017ee:	0752      	lsls	r2, r2, #29
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dmul+0x34c>
 80017f2:	e710      	b.n	8001616 <__aeabi_dmul+0x16e>
 80017f4:	220f      	movs	r2, #15
 80017f6:	4658      	mov	r0, fp
 80017f8:	403a      	ands	r2, r7
 80017fa:	2a04      	cmp	r2, #4
 80017fc:	d000      	beq.n	8001800 <__aeabi_dmul+0x358>
 80017fe:	e6f9      	b.n	80015f4 <__aeabi_dmul+0x14c>
 8001800:	e709      	b.n	8001616 <__aeabi_dmul+0x16e>
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	000007ff 	.word	0x000007ff
 8001808:	fffffc01 	.word	0xfffffc01
 800180c:	feffffff 	.word	0xfeffffff
 8001810:	000007fe 	.word	0x000007fe
 8001814:	000003ff 	.word	0x000003ff
 8001818:	0022      	movs	r2, r4
 800181a:	4332      	orrs	r2, r6
 800181c:	d06f      	beq.n	80018fe <__aeabi_dmul+0x456>
 800181e:	2c00      	cmp	r4, #0
 8001820:	d100      	bne.n	8001824 <__aeabi_dmul+0x37c>
 8001822:	e0c2      	b.n	80019aa <__aeabi_dmul+0x502>
 8001824:	0020      	movs	r0, r4
 8001826:	f000 fddf 	bl	80023e8 <__clzsi2>
 800182a:	0002      	movs	r2, r0
 800182c:	0003      	movs	r3, r0
 800182e:	3a0b      	subs	r2, #11
 8001830:	201d      	movs	r0, #29
 8001832:	1a82      	subs	r2, r0, r2
 8001834:	0030      	movs	r0, r6
 8001836:	0019      	movs	r1, r3
 8001838:	40d0      	lsrs	r0, r2
 800183a:	3908      	subs	r1, #8
 800183c:	408c      	lsls	r4, r1
 800183e:	0002      	movs	r2, r0
 8001840:	4322      	orrs	r2, r4
 8001842:	0034      	movs	r4, r6
 8001844:	408c      	lsls	r4, r1
 8001846:	4659      	mov	r1, fp
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4986      	ldr	r1, [pc, #536]	@ (8001a64 <__aeabi_dmul+0x5bc>)
 800184c:	468b      	mov	fp, r1
 800184e:	449b      	add	fp, r3
 8001850:	2d0a      	cmp	r5, #10
 8001852:	dd00      	ble.n	8001856 <__aeabi_dmul+0x3ae>
 8001854:	e6a4      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001856:	4649      	mov	r1, r9
 8001858:	9b00      	ldr	r3, [sp, #0]
 800185a:	9401      	str	r4, [sp, #4]
 800185c:	4059      	eors	r1, r3
 800185e:	b2cb      	uxtb	r3, r1
 8001860:	0014      	movs	r4, r2
 8001862:	2000      	movs	r0, #0
 8001864:	9303      	str	r3, [sp, #12]
 8001866:	2d02      	cmp	r5, #2
 8001868:	dd00      	ble.n	800186c <__aeabi_dmul+0x3c4>
 800186a:	e667      	b.n	800153c <__aeabi_dmul+0x94>
 800186c:	e6fb      	b.n	8001666 <__aeabi_dmul+0x1be>
 800186e:	4653      	mov	r3, sl
 8001870:	4303      	orrs	r3, r0
 8001872:	4698      	mov	r8, r3
 8001874:	d03c      	beq.n	80018f0 <__aeabi_dmul+0x448>
 8001876:	4653      	mov	r3, sl
 8001878:	2b00      	cmp	r3, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dmul+0x3d6>
 800187c:	e0a3      	b.n	80019c6 <__aeabi_dmul+0x51e>
 800187e:	4650      	mov	r0, sl
 8001880:	f000 fdb2 	bl	80023e8 <__clzsi2>
 8001884:	230b      	movs	r3, #11
 8001886:	425b      	negs	r3, r3
 8001888:	469c      	mov	ip, r3
 800188a:	0002      	movs	r2, r0
 800188c:	4484      	add	ip, r0
 800188e:	0011      	movs	r1, r2
 8001890:	4650      	mov	r0, sl
 8001892:	3908      	subs	r1, #8
 8001894:	4088      	lsls	r0, r1
 8001896:	231d      	movs	r3, #29
 8001898:	4680      	mov	r8, r0
 800189a:	4660      	mov	r0, ip
 800189c:	1a1b      	subs	r3, r3, r0
 800189e:	0020      	movs	r0, r4
 80018a0:	40d8      	lsrs	r0, r3
 80018a2:	0003      	movs	r3, r0
 80018a4:	4640      	mov	r0, r8
 80018a6:	4303      	orrs	r3, r0
 80018a8:	469a      	mov	sl, r3
 80018aa:	0023      	movs	r3, r4
 80018ac:	408b      	lsls	r3, r1
 80018ae:	4698      	mov	r8, r3
 80018b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a64 <__aeabi_dmul+0x5bc>)
 80018b2:	2500      	movs	r5, #0
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	469b      	mov	fp, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	e61a      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018be:	2d0f      	cmp	r5, #15
 80018c0:	d000      	beq.n	80018c4 <__aeabi_dmul+0x41c>
 80018c2:	e0c9      	b.n	8001a58 <__aeabi_dmul+0x5b0>
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	4652      	mov	r2, sl
 80018c8:	031b      	lsls	r3, r3, #12
 80018ca:	421a      	tst	r2, r3
 80018cc:	d002      	beq.n	80018d4 <__aeabi_dmul+0x42c>
 80018ce:	421c      	tst	r4, r3
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dmul+0x42c>
 80018d2:	e092      	b.n	80019fa <__aeabi_dmul+0x552>
 80018d4:	2480      	movs	r4, #128	@ 0x80
 80018d6:	4653      	mov	r3, sl
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	431c      	orrs	r4, r3
 80018dc:	0324      	lsls	r4, r4, #12
 80018de:	4642      	mov	r2, r8
 80018e0:	0b24      	lsrs	r4, r4, #12
 80018e2:	e63e      	b.n	8001562 <__aeabi_dmul+0xba>
 80018e4:	469b      	mov	fp, r3
 80018e6:	2303      	movs	r3, #3
 80018e8:	4680      	mov	r8, r0
 80018ea:	250c      	movs	r5, #12
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	e601      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018f0:	2300      	movs	r3, #0
 80018f2:	469a      	mov	sl, r3
 80018f4:	469b      	mov	fp, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	2504      	movs	r5, #4
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	e5fa      	b.n	80014f4 <__aeabi_dmul+0x4c>
 80018fe:	2101      	movs	r1, #1
 8001900:	430d      	orrs	r5, r1
 8001902:	2d0a      	cmp	r5, #10
 8001904:	dd00      	ble.n	8001908 <__aeabi_dmul+0x460>
 8001906:	e64b      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001908:	4649      	mov	r1, r9
 800190a:	9800      	ldr	r0, [sp, #0]
 800190c:	4041      	eors	r1, r0
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	9103      	str	r1, [sp, #12]
 8001912:	2d02      	cmp	r5, #2
 8001914:	dc00      	bgt.n	8001918 <__aeabi_dmul+0x470>
 8001916:	e096      	b.n	8001a46 <__aeabi_dmul+0x59e>
 8001918:	2300      	movs	r3, #0
 800191a:	2400      	movs	r4, #0
 800191c:	2001      	movs	r0, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	e60c      	b.n	800153c <__aeabi_dmul+0x94>
 8001922:	4649      	mov	r1, r9
 8001924:	2302      	movs	r3, #2
 8001926:	9a00      	ldr	r2, [sp, #0]
 8001928:	432b      	orrs	r3, r5
 800192a:	4051      	eors	r1, r2
 800192c:	b2ca      	uxtb	r2, r1
 800192e:	9203      	str	r2, [sp, #12]
 8001930:	2b0a      	cmp	r3, #10
 8001932:	dd00      	ble.n	8001936 <__aeabi_dmul+0x48e>
 8001934:	e634      	b.n	80015a0 <__aeabi_dmul+0xf8>
 8001936:	2d00      	cmp	r5, #0
 8001938:	d157      	bne.n	80019ea <__aeabi_dmul+0x542>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	4699      	mov	r9, r3
 800193e:	2400      	movs	r4, #0
 8001940:	2200      	movs	r2, #0
 8001942:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <__aeabi_dmul+0x5c0>)
 8001944:	e60e      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001946:	4658      	mov	r0, fp
 8001948:	2101      	movs	r1, #1
 800194a:	1ac9      	subs	r1, r1, r3
 800194c:	2938      	cmp	r1, #56	@ 0x38
 800194e:	dd00      	ble.n	8001952 <__aeabi_dmul+0x4aa>
 8001950:	e62f      	b.n	80015b2 <__aeabi_dmul+0x10a>
 8001952:	291f      	cmp	r1, #31
 8001954:	dd56      	ble.n	8001a04 <__aeabi_dmul+0x55c>
 8001956:	221f      	movs	r2, #31
 8001958:	4654      	mov	r4, sl
 800195a:	4252      	negs	r2, r2
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	40dc      	lsrs	r4, r3
 8001960:	2920      	cmp	r1, #32
 8001962:	d007      	beq.n	8001974 <__aeabi_dmul+0x4cc>
 8001964:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <__aeabi_dmul+0x5c4>)
 8001966:	4642      	mov	r2, r8
 8001968:	469c      	mov	ip, r3
 800196a:	4653      	mov	r3, sl
 800196c:	4460      	add	r0, ip
 800196e:	4083      	lsls	r3, r0
 8001970:	431a      	orrs	r2, r3
 8001972:	4690      	mov	r8, r2
 8001974:	4642      	mov	r2, r8
 8001976:	2107      	movs	r1, #7
 8001978:	1e53      	subs	r3, r2, #1
 800197a:	419a      	sbcs	r2, r3
 800197c:	000b      	movs	r3, r1
 800197e:	4322      	orrs	r2, r4
 8001980:	4013      	ands	r3, r2
 8001982:	2400      	movs	r4, #0
 8001984:	4211      	tst	r1, r2
 8001986:	d009      	beq.n	800199c <__aeabi_dmul+0x4f4>
 8001988:	230f      	movs	r3, #15
 800198a:	4013      	ands	r3, r2
 800198c:	2b04      	cmp	r3, #4
 800198e:	d05d      	beq.n	8001a4c <__aeabi_dmul+0x5a4>
 8001990:	1d11      	adds	r1, r2, #4
 8001992:	4291      	cmp	r1, r2
 8001994:	419b      	sbcs	r3, r3
 8001996:	000a      	movs	r2, r1
 8001998:	425b      	negs	r3, r3
 800199a:	075b      	lsls	r3, r3, #29
 800199c:	08d2      	lsrs	r2, r2, #3
 800199e:	431a      	orrs	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	e5df      	b.n	8001564 <__aeabi_dmul+0xbc>
 80019a4:	9b03      	ldr	r3, [sp, #12]
 80019a6:	4699      	mov	r9, r3
 80019a8:	e5fa      	b.n	80015a0 <__aeabi_dmul+0xf8>
 80019aa:	9801      	ldr	r0, [sp, #4]
 80019ac:	f000 fd1c 	bl	80023e8 <__clzsi2>
 80019b0:	0002      	movs	r2, r0
 80019b2:	0003      	movs	r3, r0
 80019b4:	3215      	adds	r2, #21
 80019b6:	3320      	adds	r3, #32
 80019b8:	2a1c      	cmp	r2, #28
 80019ba:	dc00      	bgt.n	80019be <__aeabi_dmul+0x516>
 80019bc:	e738      	b.n	8001830 <__aeabi_dmul+0x388>
 80019be:	9a01      	ldr	r2, [sp, #4]
 80019c0:	3808      	subs	r0, #8
 80019c2:	4082      	lsls	r2, r0
 80019c4:	e73f      	b.n	8001846 <__aeabi_dmul+0x39e>
 80019c6:	f000 fd0f 	bl	80023e8 <__clzsi2>
 80019ca:	2315      	movs	r3, #21
 80019cc:	469c      	mov	ip, r3
 80019ce:	4484      	add	ip, r0
 80019d0:	0002      	movs	r2, r0
 80019d2:	4663      	mov	r3, ip
 80019d4:	3220      	adds	r2, #32
 80019d6:	2b1c      	cmp	r3, #28
 80019d8:	dc00      	bgt.n	80019dc <__aeabi_dmul+0x534>
 80019da:	e758      	b.n	800188e <__aeabi_dmul+0x3e6>
 80019dc:	2300      	movs	r3, #0
 80019de:	4698      	mov	r8, r3
 80019e0:	0023      	movs	r3, r4
 80019e2:	3808      	subs	r0, #8
 80019e4:	4083      	lsls	r3, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	e762      	b.n	80018b0 <__aeabi_dmul+0x408>
 80019ea:	001d      	movs	r5, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	2002      	movs	r0, #2
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e5a2      	b.n	800153c <__aeabi_dmul+0x94>
 80019f6:	9002      	str	r0, [sp, #8]
 80019f8:	e632      	b.n	8001660 <__aeabi_dmul+0x1b8>
 80019fa:	431c      	orrs	r4, r3
 80019fc:	9b00      	ldr	r3, [sp, #0]
 80019fe:	9a01      	ldr	r2, [sp, #4]
 8001a00:	4699      	mov	r9, r3
 8001a02:	e5ae      	b.n	8001562 <__aeabi_dmul+0xba>
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <__aeabi_dmul+0x5c8>)
 8001a06:	4652      	mov	r2, sl
 8001a08:	18c3      	adds	r3, r0, r3
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	40c8      	lsrs	r0, r1
 8001a10:	4302      	orrs	r2, r0
 8001a12:	4640      	mov	r0, r8
 8001a14:	4098      	lsls	r0, r3
 8001a16:	0003      	movs	r3, r0
 8001a18:	1e58      	subs	r0, r3, #1
 8001a1a:	4183      	sbcs	r3, r0
 8001a1c:	4654      	mov	r4, sl
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	40cc      	lsrs	r4, r1
 8001a22:	0753      	lsls	r3, r2, #29
 8001a24:	d009      	beq.n	8001a3a <__aeabi_dmul+0x592>
 8001a26:	230f      	movs	r3, #15
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d005      	beq.n	8001a3a <__aeabi_dmul+0x592>
 8001a2e:	1d13      	adds	r3, r2, #4
 8001a30:	4293      	cmp	r3, r2
 8001a32:	4192      	sbcs	r2, r2
 8001a34:	4252      	negs	r2, r2
 8001a36:	18a4      	adds	r4, r4, r2
 8001a38:	001a      	movs	r2, r3
 8001a3a:	0223      	lsls	r3, r4, #8
 8001a3c:	d508      	bpl.n	8001a50 <__aeabi_dmul+0x5a8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2400      	movs	r4, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	e58e      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001a46:	4689      	mov	r9, r1
 8001a48:	2400      	movs	r4, #0
 8001a4a:	e58b      	b.n	8001564 <__aeabi_dmul+0xbc>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e7a5      	b.n	800199c <__aeabi_dmul+0x4f4>
 8001a50:	0763      	lsls	r3, r4, #29
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0b24      	lsrs	r4, r4, #12
 8001a56:	e7a1      	b.n	800199c <__aeabi_dmul+0x4f4>
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	46a2      	mov	sl, r4
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	9b01      	ldr	r3, [sp, #4]
 8001a60:	4698      	mov	r8, r3
 8001a62:	e737      	b.n	80018d4 <__aeabi_dmul+0x42c>
 8001a64:	fffffc0d 	.word	0xfffffc0d
 8001a68:	000007ff 	.word	0x000007ff
 8001a6c:	0000043e 	.word	0x0000043e
 8001a70:	0000041e 	.word	0x0000041e

08001a74 <__aeabi_dsub>:
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	4657      	mov	r7, sl
 8001a78:	464e      	mov	r6, r9
 8001a7a:	4645      	mov	r5, r8
 8001a7c:	46de      	mov	lr, fp
 8001a7e:	b5e0      	push	{r5, r6, r7, lr}
 8001a80:	b083      	sub	sp, #12
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	9101      	str	r1, [sp, #4]
 8001a86:	030c      	lsls	r4, r1, #12
 8001a88:	004d      	lsls	r5, r1, #1
 8001a8a:	0fce      	lsrs	r6, r1, #31
 8001a8c:	0a61      	lsrs	r1, r4, #9
 8001a8e:	9c00      	ldr	r4, [sp, #0]
 8001a90:	005f      	lsls	r7, r3, #1
 8001a92:	0f64      	lsrs	r4, r4, #29
 8001a94:	430c      	orrs	r4, r1
 8001a96:	9900      	ldr	r1, [sp, #0]
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	00c8      	lsls	r0, r1, #3
 8001a9e:	0319      	lsls	r1, r3, #12
 8001aa0:	0d7b      	lsrs	r3, r7, #21
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	4fcc      	ldr	r7, [pc, #816]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001aa8:	0fdb      	lsrs	r3, r3, #31
 8001aaa:	469c      	mov	ip, r3
 8001aac:	0a4b      	lsrs	r3, r1, #9
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	4680      	mov	r8, r0
 8001ab2:	0f49      	lsrs	r1, r1, #29
 8001ab4:	4319      	orrs	r1, r3
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	468b      	mov	fp, r1
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	4692      	mov	sl, r2
 8001abe:	0d6d      	lsrs	r5, r5, #21
 8001ac0:	45b9      	cmp	r9, r7
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0x52>
 8001ac4:	e0bf      	b.n	8001c46 <__aeabi_dsub+0x1d2>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4661      	mov	r1, ip
 8001aca:	4059      	eors	r1, r3
 8001acc:	464b      	mov	r3, r9
 8001ace:	468c      	mov	ip, r1
 8001ad0:	1aeb      	subs	r3, r5, r3
 8001ad2:	428e      	cmp	r6, r1
 8001ad4:	d075      	beq.n	8001bc2 <__aeabi_dsub+0x14e>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dsub+0x68>
 8001ada:	e2a3      	b.n	8002024 <__aeabi_dsub+0x5b0>
 8001adc:	4649      	mov	r1, r9
 8001ade:	2900      	cmp	r1, #0
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x70>
 8001ae2:	e0ce      	b.n	8001c82 <__aeabi_dsub+0x20e>
 8001ae4:	42bd      	cmp	r5, r7
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0x76>
 8001ae8:	e200      	b.n	8001eec <__aeabi_dsub+0x478>
 8001aea:	2701      	movs	r7, #1
 8001aec:	2b38      	cmp	r3, #56	@ 0x38
 8001aee:	dc19      	bgt.n	8001b24 <__aeabi_dsub+0xb0>
 8001af0:	2780      	movs	r7, #128	@ 0x80
 8001af2:	4659      	mov	r1, fp
 8001af4:	043f      	lsls	r7, r7, #16
 8001af6:	4339      	orrs	r1, r7
 8001af8:	468b      	mov	fp, r1
 8001afa:	2b1f      	cmp	r3, #31
 8001afc:	dd00      	ble.n	8001b00 <__aeabi_dsub+0x8c>
 8001afe:	e1fa      	b.n	8001ef6 <__aeabi_dsub+0x482>
 8001b00:	2720      	movs	r7, #32
 8001b02:	1af9      	subs	r1, r7, r3
 8001b04:	468c      	mov	ip, r1
 8001b06:	4659      	mov	r1, fp
 8001b08:	4667      	mov	r7, ip
 8001b0a:	40b9      	lsls	r1, r7
 8001b0c:	000f      	movs	r7, r1
 8001b0e:	0011      	movs	r1, r2
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	430f      	orrs	r7, r1
 8001b14:	4661      	mov	r1, ip
 8001b16:	408a      	lsls	r2, r1
 8001b18:	1e51      	subs	r1, r2, #1
 8001b1a:	418a      	sbcs	r2, r1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	40d9      	lsrs	r1, r3
 8001b20:	4317      	orrs	r7, r2
 8001b22:	1a64      	subs	r4, r4, r1
 8001b24:	1bc7      	subs	r7, r0, r7
 8001b26:	42b8      	cmp	r0, r7
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	1a24      	subs	r4, r4, r0
 8001b2e:	0223      	lsls	r3, r4, #8
 8001b30:	d400      	bmi.n	8001b34 <__aeabi_dsub+0xc0>
 8001b32:	e140      	b.n	8001db6 <__aeabi_dsub+0x342>
 8001b34:	0264      	lsls	r4, r4, #9
 8001b36:	0a64      	lsrs	r4, r4, #9
 8001b38:	2c00      	cmp	r4, #0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0xca>
 8001b3c:	e154      	b.n	8001de8 <__aeabi_dsub+0x374>
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f000 fc52 	bl	80023e8 <__clzsi2>
 8001b44:	0003      	movs	r3, r0
 8001b46:	3b08      	subs	r3, #8
 8001b48:	2120      	movs	r1, #32
 8001b4a:	0038      	movs	r0, r7
 8001b4c:	1aca      	subs	r2, r1, r3
 8001b4e:	40d0      	lsrs	r0, r2
 8001b50:	409c      	lsls	r4, r3
 8001b52:	0002      	movs	r2, r0
 8001b54:	409f      	lsls	r7, r3
 8001b56:	4322      	orrs	r2, r4
 8001b58:	429d      	cmp	r5, r3
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dsub+0xea>
 8001b5c:	e1a6      	b.n	8001eac <__aeabi_dsub+0x438>
 8001b5e:	1b58      	subs	r0, r3, r5
 8001b60:	3001      	adds	r0, #1
 8001b62:	1a09      	subs	r1, r1, r0
 8001b64:	003c      	movs	r4, r7
 8001b66:	408f      	lsls	r7, r1
 8001b68:	40c4      	lsrs	r4, r0
 8001b6a:	1e7b      	subs	r3, r7, #1
 8001b6c:	419f      	sbcs	r7, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	408b      	lsls	r3, r1
 8001b72:	4327      	orrs	r7, r4
 8001b74:	431f      	orrs	r7, r3
 8001b76:	40c2      	lsrs	r2, r0
 8001b78:	003b      	movs	r3, r7
 8001b7a:	0014      	movs	r4, r2
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x110>
 8001b82:	e1f7      	b.n	8001f74 <__aeabi_dsub+0x500>
 8001b84:	077b      	lsls	r3, r7, #29
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x116>
 8001b88:	e377      	b.n	800227a <__aeabi_dsub+0x806>
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	0038      	movs	r0, r7
 8001b8e:	403b      	ands	r3, r7
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d004      	beq.n	8001b9e <__aeabi_dsub+0x12a>
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	42b8      	cmp	r0, r7
 8001b98:	41bf      	sbcs	r7, r7
 8001b9a:	427f      	negs	r7, r7
 8001b9c:	19e4      	adds	r4, r4, r7
 8001b9e:	0223      	lsls	r3, r4, #8
 8001ba0:	d400      	bmi.n	8001ba4 <__aeabi_dsub+0x130>
 8001ba2:	e368      	b.n	8002276 <__aeabi_dsub+0x802>
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001ba6:	3501      	adds	r5, #1
 8001ba8:	429d      	cmp	r5, r3
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x13a>
 8001bac:	e0f4      	b.n	8001d98 <__aeabi_dsub+0x324>
 8001bae:	4b8b      	ldr	r3, [pc, #556]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001bb0:	056d      	lsls	r5, r5, #21
 8001bb2:	401c      	ands	r4, r3
 8001bb4:	0d6d      	lsrs	r5, r5, #21
 8001bb6:	0767      	lsls	r7, r4, #29
 8001bb8:	08c0      	lsrs	r0, r0, #3
 8001bba:	0264      	lsls	r4, r4, #9
 8001bbc:	4307      	orrs	r7, r0
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	e0ec      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x154>
 8001bc6:	e329      	b.n	800221c <__aeabi_dsub+0x7a8>
 8001bc8:	4649      	mov	r1, r9
 8001bca:	2900      	cmp	r1, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x15c>
 8001bce:	e0d6      	b.n	8001d7e <__aeabi_dsub+0x30a>
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x164>
 8001bd6:	e12e      	b.n	8001e36 <__aeabi_dsub+0x3c2>
 8001bd8:	1e59      	subs	r1, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x16c>
 8001bde:	e1e6      	b.n	8001fae <__aeabi_dsub+0x53a>
 8001be0:	42bb      	cmp	r3, r7
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x172>
 8001be4:	e182      	b.n	8001eec <__aeabi_dsub+0x478>
 8001be6:	2701      	movs	r7, #1
 8001be8:	000b      	movs	r3, r1
 8001bea:	2938      	cmp	r1, #56	@ 0x38
 8001bec:	dc14      	bgt.n	8001c18 <__aeabi_dsub+0x1a4>
 8001bee:	2b1f      	cmp	r3, #31
 8001bf0:	dd00      	ble.n	8001bf4 <__aeabi_dsub+0x180>
 8001bf2:	e23c      	b.n	800206e <__aeabi_dsub+0x5fa>
 8001bf4:	2720      	movs	r7, #32
 8001bf6:	1af9      	subs	r1, r7, r3
 8001bf8:	468c      	mov	ip, r1
 8001bfa:	4659      	mov	r1, fp
 8001bfc:	4667      	mov	r7, ip
 8001bfe:	40b9      	lsls	r1, r7
 8001c00:	000f      	movs	r7, r1
 8001c02:	0011      	movs	r1, r2
 8001c04:	40d9      	lsrs	r1, r3
 8001c06:	430f      	orrs	r7, r1
 8001c08:	4661      	mov	r1, ip
 8001c0a:	408a      	lsls	r2, r1
 8001c0c:	1e51      	subs	r1, r2, #1
 8001c0e:	418a      	sbcs	r2, r1
 8001c10:	4659      	mov	r1, fp
 8001c12:	40d9      	lsrs	r1, r3
 8001c14:	4317      	orrs	r7, r2
 8001c16:	1864      	adds	r4, r4, r1
 8001c18:	183f      	adds	r7, r7, r0
 8001c1a:	4287      	cmp	r7, r0
 8001c1c:	4180      	sbcs	r0, r0
 8001c1e:	4240      	negs	r0, r0
 8001c20:	1824      	adds	r4, r4, r0
 8001c22:	0223      	lsls	r3, r4, #8
 8001c24:	d400      	bmi.n	8001c28 <__aeabi_dsub+0x1b4>
 8001c26:	e0c6      	b.n	8001db6 <__aeabi_dsub+0x342>
 8001c28:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001c2a:	3501      	adds	r5, #1
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x1be>
 8001c30:	e0b2      	b.n	8001d98 <__aeabi_dsub+0x324>
 8001c32:	2101      	movs	r1, #1
 8001c34:	4b69      	ldr	r3, [pc, #420]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001c36:	087a      	lsrs	r2, r7, #1
 8001c38:	401c      	ands	r4, r3
 8001c3a:	4039      	ands	r1, r7
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	07e7      	lsls	r7, r4, #31
 8001c40:	4317      	orrs	r7, r2
 8001c42:	0864      	lsrs	r4, r4, #1
 8001c44:	e79e      	b.n	8001b84 <__aeabi_dsub+0x110>
 8001c46:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <__aeabi_dsub+0x36c>)
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	468a      	mov	sl, r1
 8001c4c:	18eb      	adds	r3, r5, r3
 8001c4e:	2900      	cmp	r1, #0
 8001c50:	d028      	beq.n	8001ca4 <__aeabi_dsub+0x230>
 8001c52:	4566      	cmp	r6, ip
 8001c54:	d02c      	beq.n	8001cb0 <__aeabi_dsub+0x23c>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d05b      	beq.n	8001d12 <__aeabi_dsub+0x29e>
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x1ec>
 8001c5e:	e12c      	b.n	8001eba <__aeabi_dsub+0x446>
 8001c60:	465b      	mov	r3, fp
 8001c62:	4666      	mov	r6, ip
 8001c64:	075f      	lsls	r7, r3, #29
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	4317      	orrs	r7, r2
 8001c6a:	08dd      	lsrs	r5, r3, #3
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	432b      	orrs	r3, r5
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x200>
 8001c72:	e0e2      	b.n	8001e3a <__aeabi_dsub+0x3c6>
 8001c74:	2480      	movs	r4, #128	@ 0x80
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	432c      	orrs	r4, r5
 8001c7a:	0324      	lsls	r4, r4, #12
 8001c7c:	4d56      	ldr	r5, [pc, #344]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001c7e:	0b24      	lsrs	r4, r4, #12
 8001c80:	e08c      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001c82:	4659      	mov	r1, fp
 8001c84:	4311      	orrs	r1, r2
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x216>
 8001c88:	e0d5      	b.n	8001e36 <__aeabi_dsub+0x3c2>
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x21e>
 8001c90:	e1b9      	b.n	8002006 <__aeabi_dsub+0x592>
 8001c92:	42bb      	cmp	r3, r7
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x224>
 8001c96:	e1b1      	b.n	8001ffc <__aeabi_dsub+0x588>
 8001c98:	2701      	movs	r7, #1
 8001c9a:	000b      	movs	r3, r1
 8001c9c:	2938      	cmp	r1, #56	@ 0x38
 8001c9e:	dd00      	ble.n	8001ca2 <__aeabi_dsub+0x22e>
 8001ca0:	e740      	b.n	8001b24 <__aeabi_dsub+0xb0>
 8001ca2:	e72a      	b.n	8001afa <__aeabi_dsub+0x86>
 8001ca4:	4661      	mov	r1, ip
 8001ca6:	2701      	movs	r7, #1
 8001ca8:	4079      	eors	r1, r7
 8001caa:	468c      	mov	ip, r1
 8001cac:	4566      	cmp	r6, ip
 8001cae:	d1d2      	bne.n	8001c56 <__aeabi_dsub+0x1e2>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x242>
 8001cb4:	e0c5      	b.n	8001e42 <__aeabi_dsub+0x3ce>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x248>
 8001cba:	e155      	b.n	8001f68 <__aeabi_dsub+0x4f4>
 8001cbc:	464b      	mov	r3, r9
 8001cbe:	0025      	movs	r5, r4
 8001cc0:	4305      	orrs	r5, r0
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x252>
 8001cc4:	e212      	b.n	80020ec <__aeabi_dsub+0x678>
 8001cc6:	1e59      	subs	r1, r3, #1
 8001cc8:	468c      	mov	ip, r1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x25c>
 8001cce:	e249      	b.n	8002164 <__aeabi_dsub+0x6f0>
 8001cd0:	4d41      	ldr	r5, [pc, #260]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001cd2:	42ab      	cmp	r3, r5
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x264>
 8001cd6:	e28f      	b.n	80021f8 <__aeabi_dsub+0x784>
 8001cd8:	2701      	movs	r7, #1
 8001cda:	2938      	cmp	r1, #56	@ 0x38
 8001cdc:	dc11      	bgt.n	8001d02 <__aeabi_dsub+0x28e>
 8001cde:	4663      	mov	r3, ip
 8001ce0:	2b1f      	cmp	r3, #31
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x272>
 8001ce4:	e25b      	b.n	800219e <__aeabi_dsub+0x72a>
 8001ce6:	4661      	mov	r1, ip
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0027      	movs	r7, r4
 8001cec:	1a5b      	subs	r3, r3, r1
 8001cee:	0005      	movs	r5, r0
 8001cf0:	4098      	lsls	r0, r3
 8001cf2:	409f      	lsls	r7, r3
 8001cf4:	40cd      	lsrs	r5, r1
 8001cf6:	1e43      	subs	r3, r0, #1
 8001cf8:	4198      	sbcs	r0, r3
 8001cfa:	40cc      	lsrs	r4, r1
 8001cfc:	432f      	orrs	r7, r5
 8001cfe:	4307      	orrs	r7, r0
 8001d00:	44a3      	add	fp, r4
 8001d02:	18bf      	adds	r7, r7, r2
 8001d04:	4297      	cmp	r7, r2
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	445a      	add	r2, fp
 8001d0c:	0014      	movs	r4, r2
 8001d0e:	464d      	mov	r5, r9
 8001d10:	e787      	b.n	8001c22 <__aeabi_dsub+0x1ae>
 8001d12:	4f34      	ldr	r7, [pc, #208]	@ (8001de4 <__aeabi_dsub+0x370>)
 8001d14:	1c6b      	adds	r3, r5, #1
 8001d16:	423b      	tst	r3, r7
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x2a8>
 8001d1a:	e0b6      	b.n	8001e8a <__aeabi_dsub+0x416>
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	0023      	movs	r3, r4
 8001d20:	4311      	orrs	r1, r2
 8001d22:	000f      	movs	r7, r1
 8001d24:	4303      	orrs	r3, r0
 8001d26:	2d00      	cmp	r5, #0
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dsub+0x2b8>
 8001d2a:	e126      	b.n	8001f7a <__aeabi_dsub+0x506>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x2be>
 8001d30:	e1c0      	b.n	80020b4 <__aeabi_dsub+0x640>
 8001d32:	2900      	cmp	r1, #0
 8001d34:	d100      	bne.n	8001d38 <__aeabi_dsub+0x2c4>
 8001d36:	e0a1      	b.n	8001e7c <__aeabi_dsub+0x408>
 8001d38:	1a83      	subs	r3, r0, r2
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	465b      	mov	r3, fp
 8001d3e:	4540      	cmp	r0, r8
 8001d40:	41ad      	sbcs	r5, r5
 8001d42:	1ae3      	subs	r3, r4, r3
 8001d44:	426d      	negs	r5, r5
 8001d46:	1b5b      	subs	r3, r3, r5
 8001d48:	2580      	movs	r5, #128	@ 0x80
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	422b      	tst	r3, r5
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x2de>
 8001d50:	e14b      	b.n	8001fea <__aeabi_dsub+0x576>
 8001d52:	465b      	mov	r3, fp
 8001d54:	1a10      	subs	r0, r2, r0
 8001d56:	4282      	cmp	r2, r0
 8001d58:	4192      	sbcs	r2, r2
 8001d5a:	1b1c      	subs	r4, r3, r4
 8001d5c:	0007      	movs	r7, r0
 8001d5e:	2601      	movs	r6, #1
 8001d60:	4663      	mov	r3, ip
 8001d62:	4252      	negs	r2, r2
 8001d64:	1aa4      	subs	r4, r4, r2
 8001d66:	4327      	orrs	r7, r4
 8001d68:	401e      	ands	r6, r3
 8001d6a:	2f00      	cmp	r7, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x2fc>
 8001d6e:	e142      	b.n	8001ff6 <__aeabi_dsub+0x582>
 8001d70:	422c      	tst	r4, r5
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x302>
 8001d74:	e26d      	b.n	8002252 <__aeabi_dsub+0x7de>
 8001d76:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <__aeabi_dsub+0x368>)
 8001d78:	2501      	movs	r5, #1
 8001d7a:	401c      	ands	r4, r3
 8001d7c:	e71b      	b.n	8001bb6 <__aeabi_dsub+0x142>
 8001d7e:	42bd      	cmp	r5, r7
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x310>
 8001d82:	e13b      	b.n	8001ffc <__aeabi_dsub+0x588>
 8001d84:	2701      	movs	r7, #1
 8001d86:	2b38      	cmp	r3, #56	@ 0x38
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dsub+0x318>
 8001d8a:	e745      	b.n	8001c18 <__aeabi_dsub+0x1a4>
 8001d8c:	2780      	movs	r7, #128	@ 0x80
 8001d8e:	4659      	mov	r1, fp
 8001d90:	043f      	lsls	r7, r7, #16
 8001d92:	4339      	orrs	r1, r7
 8001d94:	468b      	mov	fp, r1
 8001d96:	e72a      	b.n	8001bee <__aeabi_dsub+0x17a>
 8001d98:	2400      	movs	r4, #0
 8001d9a:	2700      	movs	r7, #0
 8001d9c:	052d      	lsls	r5, r5, #20
 8001d9e:	4325      	orrs	r5, r4
 8001da0:	07f6      	lsls	r6, r6, #31
 8001da2:	4335      	orrs	r5, r6
 8001da4:	0038      	movs	r0, r7
 8001da6:	0029      	movs	r1, r5
 8001da8:	b003      	add	sp, #12
 8001daa:	bcf0      	pop	{r4, r5, r6, r7}
 8001dac:	46bb      	mov	fp, r7
 8001dae:	46b2      	mov	sl, r6
 8001db0:	46a9      	mov	r9, r5
 8001db2:	46a0      	mov	r8, r4
 8001db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db6:	077b      	lsls	r3, r7, #29
 8001db8:	d004      	beq.n	8001dc4 <__aeabi_dsub+0x350>
 8001dba:	230f      	movs	r3, #15
 8001dbc:	403b      	ands	r3, r7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d000      	beq.n	8001dc4 <__aeabi_dsub+0x350>
 8001dc2:	e6e7      	b.n	8001b94 <__aeabi_dsub+0x120>
 8001dc4:	002b      	movs	r3, r5
 8001dc6:	08f8      	lsrs	r0, r7, #3
 8001dc8:	4a03      	ldr	r2, [pc, #12]	@ (8001dd8 <__aeabi_dsub+0x364>)
 8001dca:	0767      	lsls	r7, r4, #29
 8001dcc:	4307      	orrs	r7, r0
 8001dce:	08e5      	lsrs	r5, r4, #3
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x362>
 8001dd4:	e74a      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001dd6:	e0a5      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001dd8:	000007ff 	.word	0x000007ff
 8001ddc:	ff7fffff 	.word	0xff7fffff
 8001de0:	fffff801 	.word	0xfffff801
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	0038      	movs	r0, r7
 8001dea:	f000 fafd 	bl	80023e8 <__clzsi2>
 8001dee:	0003      	movs	r3, r0
 8001df0:	3318      	adds	r3, #24
 8001df2:	2b1f      	cmp	r3, #31
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_dsub+0x384>
 8001df6:	e6a7      	b.n	8001b48 <__aeabi_dsub+0xd4>
 8001df8:	003a      	movs	r2, r7
 8001dfa:	3808      	subs	r0, #8
 8001dfc:	4082      	lsls	r2, r0
 8001dfe:	429d      	cmp	r5, r3
 8001e00:	dd00      	ble.n	8001e04 <__aeabi_dsub+0x390>
 8001e02:	e08a      	b.n	8001f1a <__aeabi_dsub+0x4a6>
 8001e04:	1b5b      	subs	r3, r3, r5
 8001e06:	1c58      	adds	r0, r3, #1
 8001e08:	281f      	cmp	r0, #31
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_dsub+0x39a>
 8001e0c:	e1d8      	b.n	80021c0 <__aeabi_dsub+0x74c>
 8001e0e:	0017      	movs	r7, r2
 8001e10:	3b1f      	subs	r3, #31
 8001e12:	40df      	lsrs	r7, r3
 8001e14:	2820      	cmp	r0, #32
 8001e16:	d005      	beq.n	8001e24 <__aeabi_dsub+0x3b0>
 8001e18:	2340      	movs	r3, #64	@ 0x40
 8001e1a:	1a1b      	subs	r3, r3, r0
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	1e53      	subs	r3, r2, #1
 8001e20:	419a      	sbcs	r2, r3
 8001e22:	4317      	orrs	r7, r2
 8001e24:	2500      	movs	r5, #0
 8001e26:	2f00      	cmp	r7, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x3b8>
 8001e2a:	e0e5      	b.n	8001ff8 <__aeabi_dsub+0x584>
 8001e2c:	077b      	lsls	r3, r7, #29
 8001e2e:	d000      	beq.n	8001e32 <__aeabi_dsub+0x3be>
 8001e30:	e6ab      	b.n	8001b8a <__aeabi_dsub+0x116>
 8001e32:	002c      	movs	r4, r5
 8001e34:	e7c6      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001e36:	08c0      	lsrs	r0, r0, #3
 8001e38:	e7c6      	b.n	8001dc8 <__aeabi_dsub+0x354>
 8001e3a:	2700      	movs	r7, #0
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	4dd1      	ldr	r5, [pc, #836]	@ (8002184 <__aeabi_dsub+0x710>)
 8001e40:	e7ac      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001e42:	4fd1      	ldr	r7, [pc, #836]	@ (8002188 <__aeabi_dsub+0x714>)
 8001e44:	1c6b      	adds	r3, r5, #1
 8001e46:	423b      	tst	r3, r7
 8001e48:	d171      	bne.n	8001f2e <__aeabi_dsub+0x4ba>
 8001e4a:	0023      	movs	r3, r4
 8001e4c:	4303      	orrs	r3, r0
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d000      	beq.n	8001e54 <__aeabi_dsub+0x3e0>
 8001e52:	e14e      	b.n	80020f2 <__aeabi_dsub+0x67e>
 8001e54:	4657      	mov	r7, sl
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x3e8>
 8001e5a:	e1b5      	b.n	80021c8 <__aeabi_dsub+0x754>
 8001e5c:	2f00      	cmp	r7, #0
 8001e5e:	d00d      	beq.n	8001e7c <__aeabi_dsub+0x408>
 8001e60:	1883      	adds	r3, r0, r2
 8001e62:	4283      	cmp	r3, r0
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	445c      	add	r4, fp
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1824      	adds	r4, r4, r0
 8001e6c:	0222      	lsls	r2, r4, #8
 8001e6e:	d500      	bpl.n	8001e72 <__aeabi_dsub+0x3fe>
 8001e70:	e1c8      	b.n	8002204 <__aeabi_dsub+0x790>
 8001e72:	001f      	movs	r7, r3
 8001e74:	4698      	mov	r8, r3
 8001e76:	4327      	orrs	r7, r4
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x408>
 8001e7a:	e0bc      	b.n	8001ff6 <__aeabi_dsub+0x582>
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	0767      	lsls	r7, r4, #29
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	431f      	orrs	r7, r3
 8001e84:	08e5      	lsrs	r5, r4, #3
 8001e86:	2300      	movs	r3, #0
 8001e88:	e04c      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001e8a:	1a83      	subs	r3, r0, r2
 8001e8c:	4698      	mov	r8, r3
 8001e8e:	465b      	mov	r3, fp
 8001e90:	4540      	cmp	r0, r8
 8001e92:	41bf      	sbcs	r7, r7
 8001e94:	1ae3      	subs	r3, r4, r3
 8001e96:	427f      	negs	r7, r7
 8001e98:	1bdb      	subs	r3, r3, r7
 8001e9a:	021f      	lsls	r7, r3, #8
 8001e9c:	d47c      	bmi.n	8001f98 <__aeabi_dsub+0x524>
 8001e9e:	4647      	mov	r7, r8
 8001ea0:	431f      	orrs	r7, r3
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x432>
 8001ea4:	e0a6      	b.n	8001ff4 <__aeabi_dsub+0x580>
 8001ea6:	001c      	movs	r4, r3
 8001ea8:	4647      	mov	r7, r8
 8001eaa:	e645      	b.n	8001b38 <__aeabi_dsub+0xc4>
 8001eac:	4cb7      	ldr	r4, [pc, #732]	@ (800218c <__aeabi_dsub+0x718>)
 8001eae:	1aed      	subs	r5, r5, r3
 8001eb0:	4014      	ands	r4, r2
 8001eb2:	077b      	lsls	r3, r7, #29
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dsub+0x444>
 8001eb6:	e780      	b.n	8001dba <__aeabi_dsub+0x346>
 8001eb8:	e784      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001eba:	464b      	mov	r3, r9
 8001ebc:	0025      	movs	r5, r4
 8001ebe:	4305      	orrs	r5, r0
 8001ec0:	d066      	beq.n	8001f90 <__aeabi_dsub+0x51c>
 8001ec2:	1e5f      	subs	r7, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dsub+0x456>
 8001ec8:	e0fc      	b.n	80020c4 <__aeabi_dsub+0x650>
 8001eca:	4dae      	ldr	r5, [pc, #696]	@ (8002184 <__aeabi_dsub+0x710>)
 8001ecc:	42ab      	cmp	r3, r5
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x45e>
 8001ed0:	e15e      	b.n	8002190 <__aeabi_dsub+0x71c>
 8001ed2:	4666      	mov	r6, ip
 8001ed4:	2f38      	cmp	r7, #56	@ 0x38
 8001ed6:	dc00      	bgt.n	8001eda <__aeabi_dsub+0x466>
 8001ed8:	e0b4      	b.n	8002044 <__aeabi_dsub+0x5d0>
 8001eda:	2001      	movs	r0, #1
 8001edc:	1a17      	subs	r7, r2, r0
 8001ede:	42ba      	cmp	r2, r7
 8001ee0:	4192      	sbcs	r2, r2
 8001ee2:	465b      	mov	r3, fp
 8001ee4:	4252      	negs	r2, r2
 8001ee6:	464d      	mov	r5, r9
 8001ee8:	1a9c      	subs	r4, r3, r2
 8001eea:	e620      	b.n	8001b2e <__aeabi_dsub+0xba>
 8001eec:	0767      	lsls	r7, r4, #29
 8001eee:	08c0      	lsrs	r0, r0, #3
 8001ef0:	4307      	orrs	r7, r0
 8001ef2:	08e5      	lsrs	r5, r4, #3
 8001ef4:	e6ba      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001ef6:	001f      	movs	r7, r3
 8001ef8:	4659      	mov	r1, fp
 8001efa:	3f20      	subs	r7, #32
 8001efc:	40f9      	lsrs	r1, r7
 8001efe:	000f      	movs	r7, r1
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d005      	beq.n	8001f10 <__aeabi_dsub+0x49c>
 8001f04:	2140      	movs	r1, #64	@ 0x40
 8001f06:	1acb      	subs	r3, r1, r3
 8001f08:	4659      	mov	r1, fp
 8001f0a:	4099      	lsls	r1, r3
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	4692      	mov	sl, r2
 8001f10:	4653      	mov	r3, sl
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	4193      	sbcs	r3, r2
 8001f16:	431f      	orrs	r7, r3
 8001f18:	e604      	b.n	8001b24 <__aeabi_dsub+0xb0>
 8001f1a:	1aeb      	subs	r3, r5, r3
 8001f1c:	4d9b      	ldr	r5, [pc, #620]	@ (800218c <__aeabi_dsub+0x718>)
 8001f1e:	4015      	ands	r5, r2
 8001f20:	076f      	lsls	r7, r5, #29
 8001f22:	08ed      	lsrs	r5, r5, #3
 8001f24:	032c      	lsls	r4, r5, #12
 8001f26:	055d      	lsls	r5, r3, #21
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	0d6d      	lsrs	r5, r5, #21
 8001f2c:	e736      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f2e:	4d95      	ldr	r5, [pc, #596]	@ (8002184 <__aeabi_dsub+0x710>)
 8001f30:	42ab      	cmp	r3, r5
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x4c2>
 8001f34:	e0d6      	b.n	80020e4 <__aeabi_dsub+0x670>
 8001f36:	1882      	adds	r2, r0, r2
 8001f38:	0021      	movs	r1, r4
 8001f3a:	4282      	cmp	r2, r0
 8001f3c:	4180      	sbcs	r0, r0
 8001f3e:	4459      	add	r1, fp
 8001f40:	4240      	negs	r0, r0
 8001f42:	1808      	adds	r0, r1, r0
 8001f44:	07c7      	lsls	r7, r0, #31
 8001f46:	0852      	lsrs	r2, r2, #1
 8001f48:	4317      	orrs	r7, r2
 8001f4a:	0844      	lsrs	r4, r0, #1
 8001f4c:	0752      	lsls	r2, r2, #29
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x4de>
 8001f50:	e185      	b.n	800225e <__aeabi_dsub+0x7ea>
 8001f52:	220f      	movs	r2, #15
 8001f54:	001d      	movs	r5, r3
 8001f56:	403a      	ands	r2, r7
 8001f58:	2a04      	cmp	r2, #4
 8001f5a:	d000      	beq.n	8001f5e <__aeabi_dsub+0x4ea>
 8001f5c:	e61a      	b.n	8001b94 <__aeabi_dsub+0x120>
 8001f5e:	08ff      	lsrs	r7, r7, #3
 8001f60:	0764      	lsls	r4, r4, #29
 8001f62:	4327      	orrs	r7, r4
 8001f64:	0905      	lsrs	r5, r0, #4
 8001f66:	e7dd      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8001f68:	465b      	mov	r3, fp
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	075f      	lsls	r7, r3, #29
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08dd      	lsrs	r5, r3, #3
 8001f72:	e67b      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8001f74:	2700      	movs	r7, #0
 8001f76:	2400      	movs	r4, #0
 8001f78:	e710      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d000      	beq.n	8001f80 <__aeabi_dsub+0x50c>
 8001f7e:	e0d6      	b.n	800212e <__aeabi_dsub+0x6ba>
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x512>
 8001f84:	e12f      	b.n	80021e6 <__aeabi_dsub+0x772>
 8001f86:	2480      	movs	r4, #128	@ 0x80
 8001f88:	2600      	movs	r6, #0
 8001f8a:	4d7e      	ldr	r5, [pc, #504]	@ (8002184 <__aeabi_dsub+0x710>)
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	e705      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001f90:	4666      	mov	r6, ip
 8001f92:	465c      	mov	r4, fp
 8001f94:	08d0      	lsrs	r0, r2, #3
 8001f96:	e717      	b.n	8001dc8 <__aeabi_dsub+0x354>
 8001f98:	465b      	mov	r3, fp
 8001f9a:	1a17      	subs	r7, r2, r0
 8001f9c:	42ba      	cmp	r2, r7
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	1b1c      	subs	r4, r3, r4
 8001fa2:	2601      	movs	r6, #1
 8001fa4:	4663      	mov	r3, ip
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1aa4      	subs	r4, r4, r2
 8001faa:	401e      	ands	r6, r3
 8001fac:	e5c4      	b.n	8001b38 <__aeabi_dsub+0xc4>
 8001fae:	1883      	adds	r3, r0, r2
 8001fb0:	4283      	cmp	r3, r0
 8001fb2:	4180      	sbcs	r0, r0
 8001fb4:	445c      	add	r4, fp
 8001fb6:	4240      	negs	r0, r0
 8001fb8:	1825      	adds	r5, r4, r0
 8001fba:	022a      	lsls	r2, r5, #8
 8001fbc:	d400      	bmi.n	8001fc0 <__aeabi_dsub+0x54c>
 8001fbe:	e0da      	b.n	8002176 <__aeabi_dsub+0x702>
 8001fc0:	4a72      	ldr	r2, [pc, #456]	@ (800218c <__aeabi_dsub+0x718>)
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	4015      	ands	r5, r2
 8001fc6:	07ea      	lsls	r2, r5, #31
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	0869      	lsrs	r1, r5, #1
 8001fcc:	075b      	lsls	r3, r3, #29
 8001fce:	d400      	bmi.n	8001fd2 <__aeabi_dsub+0x55e>
 8001fd0:	e14a      	b.n	8002268 <__aeabi_dsub+0x7f4>
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x568>
 8001fda:	e0fc      	b.n	80021d6 <__aeabi_dsub+0x762>
 8001fdc:	1d17      	adds	r7, r2, #4
 8001fde:	4297      	cmp	r7, r2
 8001fe0:	41a4      	sbcs	r4, r4
 8001fe2:	4264      	negs	r4, r4
 8001fe4:	2502      	movs	r5, #2
 8001fe6:	1864      	adds	r4, r4, r1
 8001fe8:	e6ec      	b.n	8001dc4 <__aeabi_dsub+0x350>
 8001fea:	4647      	mov	r7, r8
 8001fec:	001c      	movs	r4, r3
 8001fee:	431f      	orrs	r7, r3
 8001ff0:	d000      	beq.n	8001ff4 <__aeabi_dsub+0x580>
 8001ff2:	e743      	b.n	8001e7c <__aeabi_dsub+0x408>
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	e6cf      	b.n	8001d9c <__aeabi_dsub+0x328>
 8001ffc:	08c0      	lsrs	r0, r0, #3
 8001ffe:	0767      	lsls	r7, r4, #29
 8002000:	4307      	orrs	r7, r0
 8002002:	08e5      	lsrs	r5, r4, #3
 8002004:	e632      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002006:	1a87      	subs	r7, r0, r2
 8002008:	465b      	mov	r3, fp
 800200a:	42b8      	cmp	r0, r7
 800200c:	4180      	sbcs	r0, r0
 800200e:	1ae4      	subs	r4, r4, r3
 8002010:	4240      	negs	r0, r0
 8002012:	1a24      	subs	r4, r4, r0
 8002014:	0223      	lsls	r3, r4, #8
 8002016:	d428      	bmi.n	800206a <__aeabi_dsub+0x5f6>
 8002018:	0763      	lsls	r3, r4, #29
 800201a:	08ff      	lsrs	r7, r7, #3
 800201c:	431f      	orrs	r7, r3
 800201e:	08e5      	lsrs	r5, r4, #3
 8002020:	2301      	movs	r3, #1
 8002022:	e77f      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dsub+0x5b6>
 8002028:	e673      	b.n	8001d12 <__aeabi_dsub+0x29e>
 800202a:	464b      	mov	r3, r9
 800202c:	1b5f      	subs	r7, r3, r5
 800202e:	003b      	movs	r3, r7
 8002030:	2d00      	cmp	r5, #0
 8002032:	d100      	bne.n	8002036 <__aeabi_dsub+0x5c2>
 8002034:	e742      	b.n	8001ebc <__aeabi_dsub+0x448>
 8002036:	2f38      	cmp	r7, #56	@ 0x38
 8002038:	dd00      	ble.n	800203c <__aeabi_dsub+0x5c8>
 800203a:	e0ec      	b.n	8002216 <__aeabi_dsub+0x7a2>
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	000e      	movs	r6, r1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431c      	orrs	r4, r3
 8002044:	2f1f      	cmp	r7, #31
 8002046:	dc25      	bgt.n	8002094 <__aeabi_dsub+0x620>
 8002048:	2520      	movs	r5, #32
 800204a:	0023      	movs	r3, r4
 800204c:	1bed      	subs	r5, r5, r7
 800204e:	0001      	movs	r1, r0
 8002050:	40a8      	lsls	r0, r5
 8002052:	40ab      	lsls	r3, r5
 8002054:	40f9      	lsrs	r1, r7
 8002056:	1e45      	subs	r5, r0, #1
 8002058:	41a8      	sbcs	r0, r5
 800205a:	430b      	orrs	r3, r1
 800205c:	40fc      	lsrs	r4, r7
 800205e:	4318      	orrs	r0, r3
 8002060:	465b      	mov	r3, fp
 8002062:	1b1b      	subs	r3, r3, r4
 8002064:	469b      	mov	fp, r3
 8002066:	e739      	b.n	8001edc <__aeabi_dsub+0x468>
 8002068:	4666      	mov	r6, ip
 800206a:	2501      	movs	r5, #1
 800206c:	e562      	b.n	8001b34 <__aeabi_dsub+0xc0>
 800206e:	001f      	movs	r7, r3
 8002070:	4659      	mov	r1, fp
 8002072:	3f20      	subs	r7, #32
 8002074:	40f9      	lsrs	r1, r7
 8002076:	468c      	mov	ip, r1
 8002078:	2b20      	cmp	r3, #32
 800207a:	d005      	beq.n	8002088 <__aeabi_dsub+0x614>
 800207c:	2740      	movs	r7, #64	@ 0x40
 800207e:	4659      	mov	r1, fp
 8002080:	1afb      	subs	r3, r7, r3
 8002082:	4099      	lsls	r1, r3
 8002084:	430a      	orrs	r2, r1
 8002086:	4692      	mov	sl, r2
 8002088:	4657      	mov	r7, sl
 800208a:	1e7b      	subs	r3, r7, #1
 800208c:	419f      	sbcs	r7, r3
 800208e:	4663      	mov	r3, ip
 8002090:	431f      	orrs	r7, r3
 8002092:	e5c1      	b.n	8001c18 <__aeabi_dsub+0x1a4>
 8002094:	003b      	movs	r3, r7
 8002096:	0025      	movs	r5, r4
 8002098:	3b20      	subs	r3, #32
 800209a:	40dd      	lsrs	r5, r3
 800209c:	2f20      	cmp	r7, #32
 800209e:	d004      	beq.n	80020aa <__aeabi_dsub+0x636>
 80020a0:	2340      	movs	r3, #64	@ 0x40
 80020a2:	1bdb      	subs	r3, r3, r7
 80020a4:	409c      	lsls	r4, r3
 80020a6:	4320      	orrs	r0, r4
 80020a8:	4680      	mov	r8, r0
 80020aa:	4640      	mov	r0, r8
 80020ac:	1e43      	subs	r3, r0, #1
 80020ae:	4198      	sbcs	r0, r3
 80020b0:	4328      	orrs	r0, r5
 80020b2:	e713      	b.n	8001edc <__aeabi_dsub+0x468>
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d09d      	beq.n	8001ff4 <__aeabi_dsub+0x580>
 80020b8:	2601      	movs	r6, #1
 80020ba:	4663      	mov	r3, ip
 80020bc:	465c      	mov	r4, fp
 80020be:	4690      	mov	r8, r2
 80020c0:	401e      	ands	r6, r3
 80020c2:	e6db      	b.n	8001e7c <__aeabi_dsub+0x408>
 80020c4:	1a17      	subs	r7, r2, r0
 80020c6:	465b      	mov	r3, fp
 80020c8:	42ba      	cmp	r2, r7
 80020ca:	4192      	sbcs	r2, r2
 80020cc:	1b1c      	subs	r4, r3, r4
 80020ce:	4252      	negs	r2, r2
 80020d0:	1aa4      	subs	r4, r4, r2
 80020d2:	0223      	lsls	r3, r4, #8
 80020d4:	d4c8      	bmi.n	8002068 <__aeabi_dsub+0x5f4>
 80020d6:	0763      	lsls	r3, r4, #29
 80020d8:	08ff      	lsrs	r7, r7, #3
 80020da:	431f      	orrs	r7, r3
 80020dc:	4666      	mov	r6, ip
 80020de:	2301      	movs	r3, #1
 80020e0:	08e5      	lsrs	r5, r4, #3
 80020e2:	e71f      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 80020e4:	001d      	movs	r5, r3
 80020e6:	2400      	movs	r4, #0
 80020e8:	2700      	movs	r7, #0
 80020ea:	e657      	b.n	8001d9c <__aeabi_dsub+0x328>
 80020ec:	465c      	mov	r4, fp
 80020ee:	08d0      	lsrs	r0, r2, #3
 80020f0:	e66a      	b.n	8001dc8 <__aeabi_dsub+0x354>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x684>
 80020f6:	e737      	b.n	8001f68 <__aeabi_dsub+0x4f4>
 80020f8:	4653      	mov	r3, sl
 80020fa:	08c0      	lsrs	r0, r0, #3
 80020fc:	0767      	lsls	r7, r4, #29
 80020fe:	4307      	orrs	r7, r0
 8002100:	08e5      	lsrs	r5, r4, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x694>
 8002106:	e5b1      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	031b      	lsls	r3, r3, #12
 800210c:	421d      	tst	r5, r3
 800210e:	d008      	beq.n	8002122 <__aeabi_dsub+0x6ae>
 8002110:	4659      	mov	r1, fp
 8002112:	08c8      	lsrs	r0, r1, #3
 8002114:	4218      	tst	r0, r3
 8002116:	d104      	bne.n	8002122 <__aeabi_dsub+0x6ae>
 8002118:	08d2      	lsrs	r2, r2, #3
 800211a:	0749      	lsls	r1, r1, #29
 800211c:	430a      	orrs	r2, r1
 800211e:	0017      	movs	r7, r2
 8002120:	0005      	movs	r5, r0
 8002122:	0f7b      	lsrs	r3, r7, #29
 8002124:	00ff      	lsls	r7, r7, #3
 8002126:	08ff      	lsrs	r7, r7, #3
 8002128:	075b      	lsls	r3, r3, #29
 800212a:	431f      	orrs	r7, r3
 800212c:	e59e      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 800212e:	08c0      	lsrs	r0, r0, #3
 8002130:	0763      	lsls	r3, r4, #29
 8002132:	4318      	orrs	r0, r3
 8002134:	08e5      	lsrs	r5, r4, #3
 8002136:	2900      	cmp	r1, #0
 8002138:	d053      	beq.n	80021e2 <__aeabi_dsub+0x76e>
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	421d      	tst	r5, r3
 8002140:	d00a      	beq.n	8002158 <__aeabi_dsub+0x6e4>
 8002142:	4659      	mov	r1, fp
 8002144:	08cc      	lsrs	r4, r1, #3
 8002146:	421c      	tst	r4, r3
 8002148:	d106      	bne.n	8002158 <__aeabi_dsub+0x6e4>
 800214a:	2601      	movs	r6, #1
 800214c:	4663      	mov	r3, ip
 800214e:	0025      	movs	r5, r4
 8002150:	08d0      	lsrs	r0, r2, #3
 8002152:	0749      	lsls	r1, r1, #29
 8002154:	4308      	orrs	r0, r1
 8002156:	401e      	ands	r6, r3
 8002158:	0f47      	lsrs	r7, r0, #29
 800215a:	00c0      	lsls	r0, r0, #3
 800215c:	08c0      	lsrs	r0, r0, #3
 800215e:	077f      	lsls	r7, r7, #29
 8002160:	4307      	orrs	r7, r0
 8002162:	e583      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002164:	1883      	adds	r3, r0, r2
 8002166:	4293      	cmp	r3, r2
 8002168:	4192      	sbcs	r2, r2
 800216a:	445c      	add	r4, fp
 800216c:	4252      	negs	r2, r2
 800216e:	18a5      	adds	r5, r4, r2
 8002170:	022a      	lsls	r2, r5, #8
 8002172:	d500      	bpl.n	8002176 <__aeabi_dsub+0x702>
 8002174:	e724      	b.n	8001fc0 <__aeabi_dsub+0x54c>
 8002176:	076f      	lsls	r7, r5, #29
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	431f      	orrs	r7, r3
 800217c:	08ed      	lsrs	r5, r5, #3
 800217e:	2301      	movs	r3, #1
 8002180:	e6d0      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	000007ff 	.word	0x000007ff
 8002188:	000007fe 	.word	0x000007fe
 800218c:	ff7fffff 	.word	0xff7fffff
 8002190:	465b      	mov	r3, fp
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	075f      	lsls	r7, r3, #29
 8002196:	4666      	mov	r6, ip
 8002198:	4317      	orrs	r7, r2
 800219a:	08dd      	lsrs	r5, r3, #3
 800219c:	e566      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 800219e:	0025      	movs	r5, r4
 80021a0:	3b20      	subs	r3, #32
 80021a2:	40dd      	lsrs	r5, r3
 80021a4:	4663      	mov	r3, ip
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d005      	beq.n	80021b6 <__aeabi_dsub+0x742>
 80021aa:	2340      	movs	r3, #64	@ 0x40
 80021ac:	4661      	mov	r1, ip
 80021ae:	1a5b      	subs	r3, r3, r1
 80021b0:	409c      	lsls	r4, r3
 80021b2:	4320      	orrs	r0, r4
 80021b4:	4680      	mov	r8, r0
 80021b6:	4647      	mov	r7, r8
 80021b8:	1e7b      	subs	r3, r7, #1
 80021ba:	419f      	sbcs	r7, r3
 80021bc:	432f      	orrs	r7, r5
 80021be:	e5a0      	b.n	8001d02 <__aeabi_dsub+0x28e>
 80021c0:	2120      	movs	r1, #32
 80021c2:	2700      	movs	r7, #0
 80021c4:	1a09      	subs	r1, r1, r0
 80021c6:	e4d2      	b.n	8001b6e <__aeabi_dsub+0xfa>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x75a>
 80021cc:	e713      	b.n	8001ff6 <__aeabi_dsub+0x582>
 80021ce:	465c      	mov	r4, fp
 80021d0:	0017      	movs	r7, r2
 80021d2:	2500      	movs	r5, #0
 80021d4:	e5f6      	b.n	8001dc4 <__aeabi_dsub+0x350>
 80021d6:	08d7      	lsrs	r7, r2, #3
 80021d8:	0749      	lsls	r1, r1, #29
 80021da:	2302      	movs	r3, #2
 80021dc:	430f      	orrs	r7, r1
 80021de:	092d      	lsrs	r5, r5, #4
 80021e0:	e6a0      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 80021e2:	0007      	movs	r7, r0
 80021e4:	e542      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 80021e6:	465b      	mov	r3, fp
 80021e8:	2601      	movs	r6, #1
 80021ea:	075f      	lsls	r7, r3, #29
 80021ec:	08dd      	lsrs	r5, r3, #3
 80021ee:	4663      	mov	r3, ip
 80021f0:	08d2      	lsrs	r2, r2, #3
 80021f2:	4317      	orrs	r7, r2
 80021f4:	401e      	ands	r6, r3
 80021f6:	e539      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 80021f8:	465b      	mov	r3, fp
 80021fa:	08d2      	lsrs	r2, r2, #3
 80021fc:	075f      	lsls	r7, r3, #29
 80021fe:	4317      	orrs	r7, r2
 8002200:	08dd      	lsrs	r5, r3, #3
 8002202:	e533      	b.n	8001c6c <__aeabi_dsub+0x1f8>
 8002204:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <__aeabi_dsub+0x80c>)
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	4022      	ands	r2, r4
 800220a:	0757      	lsls	r7, r2, #29
 800220c:	0252      	lsls	r2, r2, #9
 800220e:	2501      	movs	r5, #1
 8002210:	431f      	orrs	r7, r3
 8002212:	0b14      	lsrs	r4, r2, #12
 8002214:	e5c2      	b.n	8001d9c <__aeabi_dsub+0x328>
 8002216:	000e      	movs	r6, r1
 8002218:	2001      	movs	r0, #1
 800221a:	e65f      	b.n	8001edc <__aeabi_dsub+0x468>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <__aeabi_dsub+0x7c8>
 8002220:	464b      	mov	r3, r9
 8002222:	1b5b      	subs	r3, r3, r5
 8002224:	469c      	mov	ip, r3
 8002226:	2d00      	cmp	r5, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x7b8>
 800222a:	e548      	b.n	8001cbe <__aeabi_dsub+0x24a>
 800222c:	2701      	movs	r7, #1
 800222e:	2b38      	cmp	r3, #56	@ 0x38
 8002230:	dd00      	ble.n	8002234 <__aeabi_dsub+0x7c0>
 8002232:	e566      	b.n	8001d02 <__aeabi_dsub+0x28e>
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	041b      	lsls	r3, r3, #16
 8002238:	431c      	orrs	r4, r3
 800223a:	e550      	b.n	8001cde <__aeabi_dsub+0x26a>
 800223c:	1c6b      	adds	r3, r5, #1
 800223e:	4d11      	ldr	r5, [pc, #68]	@ (8002284 <__aeabi_dsub+0x810>)
 8002240:	422b      	tst	r3, r5
 8002242:	d000      	beq.n	8002246 <__aeabi_dsub+0x7d2>
 8002244:	e673      	b.n	8001f2e <__aeabi_dsub+0x4ba>
 8002246:	4659      	mov	r1, fp
 8002248:	0023      	movs	r3, r4
 800224a:	4311      	orrs	r1, r2
 800224c:	468a      	mov	sl, r1
 800224e:	4303      	orrs	r3, r0
 8002250:	e600      	b.n	8001e54 <__aeabi_dsub+0x3e0>
 8002252:	0767      	lsls	r7, r4, #29
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	2300      	movs	r3, #0
 8002258:	4307      	orrs	r7, r0
 800225a:	08e5      	lsrs	r5, r4, #3
 800225c:	e662      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 800225e:	0764      	lsls	r4, r4, #29
 8002260:	08ff      	lsrs	r7, r7, #3
 8002262:	4327      	orrs	r7, r4
 8002264:	0905      	lsrs	r5, r0, #4
 8002266:	e65d      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002268:	08d2      	lsrs	r2, r2, #3
 800226a:	0749      	lsls	r1, r1, #29
 800226c:	4311      	orrs	r1, r2
 800226e:	000f      	movs	r7, r1
 8002270:	2302      	movs	r3, #2
 8002272:	092d      	lsrs	r5, r5, #4
 8002274:	e656      	b.n	8001f24 <__aeabi_dsub+0x4b0>
 8002276:	0007      	movs	r7, r0
 8002278:	e5a4      	b.n	8001dc4 <__aeabi_dsub+0x350>
 800227a:	0038      	movs	r0, r7
 800227c:	e48f      	b.n	8001b9e <__aeabi_dsub+0x12a>
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	ff7fffff 	.word	0xff7fffff
 8002284:	000007fe 	.word	0x000007fe

08002288 <__aeabi_dcmpun>:
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	46c6      	mov	lr, r8
 800228c:	031e      	lsls	r6, r3, #12
 800228e:	0b36      	lsrs	r6, r6, #12
 8002290:	46b0      	mov	r8, r6
 8002292:	4e0d      	ldr	r6, [pc, #52]	@ (80022c8 <__aeabi_dcmpun+0x40>)
 8002294:	030c      	lsls	r4, r1, #12
 8002296:	004d      	lsls	r5, r1, #1
 8002298:	005f      	lsls	r7, r3, #1
 800229a:	b500      	push	{lr}
 800229c:	0b24      	lsrs	r4, r4, #12
 800229e:	0d6d      	lsrs	r5, r5, #21
 80022a0:	0d7f      	lsrs	r7, r7, #21
 80022a2:	42b5      	cmp	r5, r6
 80022a4:	d00b      	beq.n	80022be <__aeabi_dcmpun+0x36>
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__aeabi_dcmpun+0x40>)
 80022a8:	2000      	movs	r0, #0
 80022aa:	428f      	cmp	r7, r1
 80022ac:	d104      	bne.n	80022b8 <__aeabi_dcmpun+0x30>
 80022ae:	4646      	mov	r6, r8
 80022b0:	4316      	orrs	r6, r2
 80022b2:	0030      	movs	r0, r6
 80022b4:	1e43      	subs	r3, r0, #1
 80022b6:	4198      	sbcs	r0, r3
 80022b8:	bc80      	pop	{r7}
 80022ba:	46b8      	mov	r8, r7
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022be:	4304      	orrs	r4, r0
 80022c0:	2001      	movs	r0, #1
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d1f8      	bne.n	80022b8 <__aeabi_dcmpun+0x30>
 80022c6:	e7ee      	b.n	80022a6 <__aeabi_dcmpun+0x1e>
 80022c8:	000007ff 	.word	0x000007ff

080022cc <__aeabi_d2iz>:
 80022cc:	000b      	movs	r3, r1
 80022ce:	0002      	movs	r2, r0
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	4d16      	ldr	r5, [pc, #88]	@ (800232c <__aeabi_d2iz+0x60>)
 80022d4:	030c      	lsls	r4, r1, #12
 80022d6:	b082      	sub	sp, #8
 80022d8:	0049      	lsls	r1, r1, #1
 80022da:	2000      	movs	r0, #0
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	0b24      	lsrs	r4, r4, #12
 80022e2:	0d49      	lsrs	r1, r1, #21
 80022e4:	0fde      	lsrs	r6, r3, #31
 80022e6:	42a9      	cmp	r1, r5
 80022e8:	dd04      	ble.n	80022f4 <__aeabi_d2iz+0x28>
 80022ea:	4811      	ldr	r0, [pc, #68]	@ (8002330 <__aeabi_d2iz+0x64>)
 80022ec:	4281      	cmp	r1, r0
 80022ee:	dd03      	ble.n	80022f8 <__aeabi_d2iz+0x2c>
 80022f0:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <__aeabi_d2iz+0x68>)
 80022f2:	18f0      	adds	r0, r6, r3
 80022f4:	b002      	add	sp, #8
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	2080      	movs	r0, #128	@ 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4320      	orrs	r0, r4
 80022fe:	4c0e      	ldr	r4, [pc, #56]	@ (8002338 <__aeabi_d2iz+0x6c>)
 8002300:	1a64      	subs	r4, r4, r1
 8002302:	2c1f      	cmp	r4, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x4c>
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <__aeabi_d2iz+0x70>)
 8002308:	1a5b      	subs	r3, r3, r1
 800230a:	40d8      	lsrs	r0, r3
 800230c:	0003      	movs	r3, r0
 800230e:	4258      	negs	r0, r3
 8002310:	2e00      	cmp	r6, #0
 8002312:	d1ef      	bne.n	80022f4 <__aeabi_d2iz+0x28>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ed      	b.n	80022f4 <__aeabi_d2iz+0x28>
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <__aeabi_d2iz+0x74>)
 800231a:	9a00      	ldr	r2, [sp, #0]
 800231c:	469c      	mov	ip, r3
 800231e:	0003      	movs	r3, r0
 8002320:	4461      	add	r1, ip
 8002322:	408b      	lsls	r3, r1
 8002324:	40e2      	lsrs	r2, r4
 8002326:	4313      	orrs	r3, r2
 8002328:	e7f1      	b.n	800230e <__aeabi_d2iz+0x42>
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	000003fe 	.word	0x000003fe
 8002330:	0000041d 	.word	0x0000041d
 8002334:	7fffffff 	.word	0x7fffffff
 8002338:	00000433 	.word	0x00000433
 800233c:	00000413 	.word	0x00000413
 8002340:	fffffbed 	.word	0xfffffbed

08002344 <__aeabi_i2d>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	2800      	cmp	r0, #0
 8002348:	d016      	beq.n	8002378 <__aeabi_i2d+0x34>
 800234a:	17c3      	asrs	r3, r0, #31
 800234c:	18c5      	adds	r5, r0, r3
 800234e:	405d      	eors	r5, r3
 8002350:	0fc4      	lsrs	r4, r0, #31
 8002352:	0028      	movs	r0, r5
 8002354:	f000 f848 	bl	80023e8 <__clzsi2>
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <__aeabi_i2d+0x58>)
 800235a:	1a1b      	subs	r3, r3, r0
 800235c:	055b      	lsls	r3, r3, #21
 800235e:	0d5b      	lsrs	r3, r3, #21
 8002360:	280a      	cmp	r0, #10
 8002362:	dc14      	bgt.n	800238e <__aeabi_i2d+0x4a>
 8002364:	0002      	movs	r2, r0
 8002366:	002e      	movs	r6, r5
 8002368:	3215      	adds	r2, #21
 800236a:	4096      	lsls	r6, r2
 800236c:	220b      	movs	r2, #11
 800236e:	1a12      	subs	r2, r2, r0
 8002370:	40d5      	lsrs	r5, r2
 8002372:	032d      	lsls	r5, r5, #12
 8002374:	0b2d      	lsrs	r5, r5, #12
 8002376:	e003      	b.n	8002380 <__aeabi_i2d+0x3c>
 8002378:	2400      	movs	r4, #0
 800237a:	2300      	movs	r3, #0
 800237c:	2500      	movs	r5, #0
 800237e:	2600      	movs	r6, #0
 8002380:	051b      	lsls	r3, r3, #20
 8002382:	432b      	orrs	r3, r5
 8002384:	07e4      	lsls	r4, r4, #31
 8002386:	4323      	orrs	r3, r4
 8002388:	0030      	movs	r0, r6
 800238a:	0019      	movs	r1, r3
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	380b      	subs	r0, #11
 8002390:	4085      	lsls	r5, r0
 8002392:	032d      	lsls	r5, r5, #12
 8002394:	2600      	movs	r6, #0
 8002396:	0b2d      	lsrs	r5, r5, #12
 8002398:	e7f2      	b.n	8002380 <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f81f 	bl	80023e8 <__clzsi2>
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <__aeabi_ui2d+0x44>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	055b      	lsls	r3, r3, #21
 80023b0:	0d5b      	lsrs	r3, r3, #21
 80023b2:	280a      	cmp	r0, #10
 80023b4:	dc0f      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b6:	220b      	movs	r2, #11
 80023b8:	0021      	movs	r1, r4
 80023ba:	1a12      	subs	r2, r2, r0
 80023bc:	40d1      	lsrs	r1, r2
 80023be:	3015      	adds	r0, #21
 80023c0:	030a      	lsls	r2, r1, #12
 80023c2:	4084      	lsls	r4, r0
 80023c4:	0b12      	lsrs	r2, r2, #12
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	0312      	lsls	r2, r2, #12
 80023de:	2400      	movs	r4, #0
 80023e0:	0b12      	lsrs	r2, r2, #12
 80023e2:	e7f3      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e4:	0000041e 	.word	0x0000041e

080023e8 <__clzsi2>:
 80023e8:	211c      	movs	r1, #28
 80023ea:	2301      	movs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d301      	bcc.n	80023f6 <__clzsi2+0xe>
 80023f2:	0c00      	lsrs	r0, r0, #16
 80023f4:	3910      	subs	r1, #16
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	4298      	cmp	r0, r3
 80023fa:	d301      	bcc.n	8002400 <__clzsi2+0x18>
 80023fc:	0a00      	lsrs	r0, r0, #8
 80023fe:	3908      	subs	r1, #8
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	4298      	cmp	r0, r3
 8002404:	d301      	bcc.n	800240a <__clzsi2+0x22>
 8002406:	0900      	lsrs	r0, r0, #4
 8002408:	3904      	subs	r1, #4
 800240a:	a202      	add	r2, pc, #8	@ (adr r2, 8002414 <__clzsi2+0x2c>)
 800240c:	5c10      	ldrb	r0, [r2, r0]
 800240e:	1840      	adds	r0, r0, r1
 8002410:	4770      	bx	lr
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	02020304 	.word	0x02020304
 8002418:	01010101 	.word	0x01010101
	...

08002424 <send_at_msg>:

char joined_msg[] = "+JOIN: Network joined";

/* USER CODE END 0 */

void send_at_msg(char* msg) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit_IT(&huart1, (uint8_t*) msg, strlen(msg));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f7fd fe6a 	bl	8000108 <strlen>
 8002434:	0003      	movs	r3, r0
 8002436:	b29a      	uxth	r2, r3
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <send_at_msg+0x28>)
 800243c:	0018      	movs	r0, r3
 800243e:	f004 ff4f 	bl	80072e0 <HAL_UART_Transmit_IT>
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	200004c8 	.word	0x200004c8

08002450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002454:	f000 fe8c 	bl	8003170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002458:	f000 f85a 	bl	8002510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800245c:	f000 fa48 	bl	80028f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002460:	f000 fa28 	bl	80028b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002464:	f000 f9f2 	bl	800284c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002468:	f000 f91e 	bl	80026a8 <MX_SPI1_Init>
  MX_ADC_Init();
 800246c:	f000 f8c0 	bl	80025f0 <MX_ADC_Init>
  MX_SPI2_Init();
 8002470:	f000 f958 	bl	8002724 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8002474:	f00a f800 	bl	800c478 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8002478:	f000 f992 	bl	80027a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Startup sequence for LoRa module
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 800247c:	2390      	movs	r3, #144	@ 0x90
 800247e:	05db      	lsls	r3, r3, #23
 8002480:	2201      	movs	r2, #1
 8002482:	2101      	movs	r1, #1
 8002484:	0018      	movs	r0, r3
 8002486:	f001 fdd2 	bl	800402e <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800248a:	23fa      	movs	r3, #250	@ 0xfa
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	0018      	movs	r0, r3
 8002490:	f000 fed2 	bl	8003238 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_RESET);
 8002494:	2390      	movs	r3, #144	@ 0x90
 8002496:	05db      	lsls	r3, r3, #23
 8002498:	2200      	movs	r2, #0
 800249a:	2101      	movs	r1, #1
 800249c:	0018      	movs	r0, r3
 800249e:	f001 fdc6 	bl	800402e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80024a2:	2064      	movs	r0, #100	@ 0x64
 80024a4:	f000 fec8 	bl	8003238 <HAL_Delay>
  HAL_GPIO_WritePin(E5_NRST_GPIO_Port, E5_NRST_Pin, GPIO_PIN_SET);
 80024a8:	2390      	movs	r3, #144	@ 0x90
 80024aa:	05db      	lsls	r3, r3, #23
 80024ac:	2201      	movs	r2, #1
 80024ae:	2101      	movs	r1, #1
 80024b0:	0018      	movs	r0, r3
 80024b2:	f001 fdbc 	bl	800402e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80024b6:	2064      	movs	r0, #100	@ 0x64
 80024b8:	f000 febe 	bl	8003238 <HAL_Delay>

  // LoRa command reception callback
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_rx_buf, UART_RX_BUF_SIZE);
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	00da      	lsls	r2, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	@ (80024fc <main+0xac>)
 80024c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <main+0xb0>)
 80024c4:	0018      	movs	r0, r3
 80024c6:	f006 f96a 	bl	800879e <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(2000);
 80024ca:	23fa      	movs	r3, #250	@ 0xfa
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 feb2 	bl	8003238 <HAL_Delay>
  send_at_msg("AT+MODE=TEST\r\n");
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <main+0xb4>)
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7ff ffa4 	bl	8002424 <send_at_msg>
  HAL_Delay(100);
 80024dc:	2064      	movs	r0, #100	@ 0x64
 80024de:	f000 feab 	bl	8003238 <HAL_Delay>
  send_at_msg("AT+TEST=RFCFG,915,SF8,500,12,15,14,ON,OFF,OFF\r\n");
 80024e2:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <main+0xb8>)
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7ff ff9d 	bl	8002424 <send_at_msg>
  HAL_Delay(100);
 80024ea:	2064      	movs	r0, #100	@ 0x64
 80024ec:	f000 fea4 	bl	8003238 <HAL_Delay>
  send_at_msg("AT+TEST=RXLRPKT\r\n");
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <main+0xbc>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff ff96 	bl	8002424 <send_at_msg>

  while (1)
 80024f8:	46c0      	nop			@ (mov r8, r8)
 80024fa:	e7fd      	b.n	80024f8 <main+0xa8>
 80024fc:	200005c4 	.word	0x200005c4
 8002500:	200004c8 	.word	0x200004c8
 8002504:	0800fa10 	.word	0x0800fa10
 8002508:	0800fa20 	.word	0x0800fa20
 800250c:	0800f9d0 	.word	0x0800f9d0

08002510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b099      	sub	sp, #100	@ 0x64
 8002514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002516:	242c      	movs	r4, #44	@ 0x2c
 8002518:	193b      	adds	r3, r7, r4
 800251a:	0018      	movs	r0, r3
 800251c:	2334      	movs	r3, #52	@ 0x34
 800251e:	001a      	movs	r2, r3
 8002520:	2100      	movs	r1, #0
 8002522:	f00b fa93 	bl	800da4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002526:	231c      	movs	r3, #28
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	0018      	movs	r0, r3
 800252c:	2310      	movs	r3, #16
 800252e:	001a      	movs	r2, r3
 8002530:	2100      	movs	r1, #0
 8002532:	f00b fa8b 	bl	800da4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002536:	003b      	movs	r3, r7
 8002538:	0018      	movs	r0, r3
 800253a:	231c      	movs	r3, #28
 800253c:	001a      	movs	r2, r3
 800253e:	2100      	movs	r1, #0
 8002540:	f00b fa84 	bl	800da4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8002544:	0021      	movs	r1, r4
 8002546:	187b      	adds	r3, r7, r1
 8002548:	2232      	movs	r2, #50	@ 0x32
 800254a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800254c:	187b      	adds	r3, r7, r1
 800254e:	2201      	movs	r2, #1
 8002550:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2201      	movs	r2, #1
 8002556:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002558:	187b      	adds	r3, r7, r1
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800255e:	187b      	adds	r3, r7, r1
 8002560:	2210      	movs	r2, #16
 8002562:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2210      	movs	r2, #16
 8002568:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2202      	movs	r2, #2
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002570:	187b      	adds	r3, r7, r1
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	0212      	lsls	r2, r2, #8
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	22e0      	movs	r2, #224	@ 0xe0
 800257c:	0352      	lsls	r2, r2, #13
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002580:	187b      	adds	r3, r7, r1
 8002582:	2201      	movs	r2, #1
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002586:	187b      	adds	r3, r7, r1
 8002588:	0018      	movs	r0, r3
 800258a:	f003 fbcb 	bl	8005d24 <HAL_RCC_OscConfig>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d001      	beq.n	8002596 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002592:	f000 fae1 	bl	8002b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002596:	211c      	movs	r1, #28
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2207      	movs	r2, #7
 800259c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	2202      	movs	r2, #2
 80025a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	2101      	movs	r1, #1
 80025b4:	0018      	movs	r0, r3
 80025b6:	f003 ff3b 	bl	8006430 <HAL_RCC_ClockConfig>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d001      	beq.n	80025c2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80025be:	f000 facb 	bl	8002b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 80025c2:	003b      	movs	r3, r7
 80025c4:	4a09      	ldr	r2, [pc, #36]	@ (80025ec <SystemClock_Config+0xdc>)
 80025c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80025c8:	003b      	movs	r3, r7
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80025ce:	003b      	movs	r3, r7
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d4:	003b      	movs	r3, r7
 80025d6:	0018      	movs	r0, r3
 80025d8:	f004 f896 	bl	8006708 <HAL_RCCEx_PeriphCLKConfig>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d001      	beq.n	80025e4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80025e0:	f000 faba 	bl	8002b58 <Error_Handler>
  }
}
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b019      	add	sp, #100	@ 0x64
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	00020001 	.word	0x00020001

080025f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	0018      	movs	r0, r3
 80025fa:	230c      	movs	r3, #12
 80025fc:	001a      	movs	r2, r3
 80025fe:	2100      	movs	r1, #0
 8002600:	f00b fa24 	bl	800da4c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002604:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002606:	4a27      	ldr	r2, [pc, #156]	@ (80026a4 <MX_ADC_Init+0xb4>)
 8002608:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800260a:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <MX_ADC_Init+0xb0>)
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002610:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002616:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800261c:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <MX_ADC_Init+0xb0>)
 800261e:	2201      	movs	r2, #1
 8002620:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002622:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002624:	2204      	movs	r2, #4
 8002626:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <MX_ADC_Init+0xb0>)
 800262a:	2200      	movs	r2, #0
 800262c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002630:	2200      	movs	r2, #0
 8002632:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002634:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002636:	2200      	movs	r2, #0
 8002638:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <MX_ADC_Init+0xb0>)
 800263c:	2200      	movs	r2, #0
 800263e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002640:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002642:	22c2      	movs	r2, #194	@ 0xc2
 8002644:	32ff      	adds	r2, #255	@ 0xff
 8002646:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <MX_ADC_Init+0xb0>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002650:	2224      	movs	r2, #36	@ 0x24
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002658:	2201      	movs	r2, #1
 800265a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800265c:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <MX_ADC_Init+0xb0>)
 800265e:	0018      	movs	r0, r3
 8002660:	f000 fe0e 	bl	8003280 <HAL_ADC_Init>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d001      	beq.n	800266c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002668:	f000 fa76 	bl	8002b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2208      	movs	r2, #8
 8002670:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2280      	movs	r2, #128	@ 0x80
 8002676:	0152      	lsls	r2, r2, #5
 8002678:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	2280      	movs	r2, #128	@ 0x80
 800267e:	0552      	lsls	r2, r2, #21
 8002680:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002682:	1d3a      	adds	r2, r7, #4
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <MX_ADC_Init+0xb0>)
 8002686:	0011      	movs	r1, r2
 8002688:	0018      	movs	r0, r3
 800268a:	f000 ff39 	bl	8003500 <HAL_ADC_ConfigChannel>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d001      	beq.n	8002696 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002692:	f000 fa61 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	20000378 	.word	0x20000378
 80026a4:	40012400 	.word	0x40012400

080026a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <MX_SPI1_Init+0x74>)
 80026ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <MX_SPI1_Init+0x78>)
 80026b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <MX_SPI1_Init+0x74>)
 80026b4:	2282      	movs	r2, #130	@ 0x82
 80026b6:	0052      	lsls	r2, r2, #1
 80026b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026ba:	4b18      	ldr	r3, [pc, #96]	@ (800271c <MX_SPI1_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026c0:	4b16      	ldr	r3, [pc, #88]	@ (800271c <MX_SPI1_Init+0x74>)
 80026c2:	22e0      	movs	r2, #224	@ 0xe0
 80026c4:	00d2      	lsls	r2, r2, #3
 80026c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c8:	4b14      	ldr	r3, [pc, #80]	@ (800271c <MX_SPI1_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <MX_SPI1_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <MX_SPI1_Init+0x74>)
 80026d6:	2280      	movs	r2, #128	@ 0x80
 80026d8:	0092      	lsls	r2, r2, #2
 80026da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <MX_SPI1_Init+0x74>)
 80026de:	2208      	movs	r2, #8
 80026e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <MX_SPI1_Init+0x74>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <MX_SPI1_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <MX_SPI1_Init+0x74>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <MX_SPI1_Init+0x74>)
 80026f6:	2207      	movs	r2, #7
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026fa:	4b08      	ldr	r3, [pc, #32]	@ (800271c <MX_SPI1_Init+0x74>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <MX_SPI1_Init+0x74>)
 8002702:	2208      	movs	r2, #8
 8002704:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002706:	4b05      	ldr	r3, [pc, #20]	@ (800271c <MX_SPI1_Init+0x74>)
 8002708:	0018      	movs	r0, r3
 800270a:	f004 f8fb 	bl	8006904 <HAL_SPI_Init>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d001      	beq.n	8002716 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002712:	f000 fa21 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200003b8 	.word	0x200003b8
 8002720:	40013000 	.word	0x40013000

08002724 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <MX_SPI2_Init+0x74>)
 800272a:	4a1c      	ldr	r2, [pc, #112]	@ (800279c <MX_SPI2_Init+0x78>)
 800272c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800272e:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002730:	2282      	movs	r2, #130	@ 0x82
 8002732:	0052      	lsls	r2, r2, #1
 8002734:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002736:	4b18      	ldr	r3, [pc, #96]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800273c:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <MX_SPI2_Init+0x74>)
 800273e:	22c0      	movs	r2, #192	@ 0xc0
 8002740:	0092      	lsls	r2, r2, #2
 8002742:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <MX_SPI2_Init+0x74>)
 800274c:	2200      	movs	r2, #0
 800274e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002750:	4b11      	ldr	r3, [pc, #68]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	02d2      	lsls	r2, r2, #11
 8002756:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002758:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <MX_SPI2_Init+0x74>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800275e:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002766:	2200      	movs	r2, #0
 8002768:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <MX_SPI2_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002770:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002772:	2207      	movs	r2, #7
 8002774:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002776:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <MX_SPI2_Init+0x74>)
 800277e:	2208      	movs	r2, #8
 8002780:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <MX_SPI2_Init+0x74>)
 8002784:	0018      	movs	r0, r3
 8002786:	f004 f8bd 	bl	8006904 <HAL_SPI_Init>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d001      	beq.n	8002792 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800278e:	f000 f9e3 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	2000041c 	.word	0x2000041c
 800279c:	40003800 	.word	0x40003800

080027a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a6:	2308      	movs	r3, #8
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	0018      	movs	r0, r3
 80027ac:	2310      	movs	r3, #16
 80027ae:	001a      	movs	r2, r3
 80027b0:	2100      	movs	r1, #0
 80027b2:	f00b f94b 	bl	800da4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b6:	003b      	movs	r3, r7
 80027b8:	0018      	movs	r0, r3
 80027ba:	2308      	movs	r3, #8
 80027bc:	001a      	movs	r2, r3
 80027be:	2100      	movs	r1, #0
 80027c0:	f00b f944 	bl	800da4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <MX_TIM3_Init+0xa4>)
 80027c6:	4a20      	ldr	r2, [pc, #128]	@ (8002848 <MX_TIM3_Init+0xa8>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80027ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002844 <MX_TIM3_Init+0xa4>)
 80027cc:	22f4      	movs	r2, #244	@ 0xf4
 80027ce:	32ff      	adds	r2, #255	@ 0xff
 80027d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <MX_TIM3_Init+0xa4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 360-1;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <MX_TIM3_Init+0xa4>)
 80027da:	2268      	movs	r2, #104	@ 0x68
 80027dc:	32ff      	adds	r2, #255	@ 0xff
 80027de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <MX_TIM3_Init+0xa4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e6:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <MX_TIM3_Init+0xa4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ec:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <MX_TIM3_Init+0xa4>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f004 f940 	bl	8006a74 <HAL_TIM_Base_Init>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80027f8:	f000 f9ae 	bl	8002b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fc:	2108      	movs	r1, #8
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2280      	movs	r2, #128	@ 0x80
 8002802:	0152      	lsls	r2, r2, #5
 8002804:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002806:	187a      	adds	r2, r7, r1
 8002808:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <MX_TIM3_Init+0xa4>)
 800280a:	0011      	movs	r1, r2
 800280c:	0018      	movs	r0, r3
 800280e:	f004 fa6f 	bl	8006cf0 <HAL_TIM_ConfigClockSource>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d001      	beq.n	800281a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002816:	f000 f99f 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281a:	003b      	movs	r3, r7
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002820:	003b      	movs	r3, r7
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002826:	003a      	movs	r2, r7
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <MX_TIM3_Init+0xa4>)
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f004 fc83 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d001      	beq.n	800283a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002836:	f000 f98f 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	46bd      	mov	sp, r7
 800283e:	b006      	add	sp, #24
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	20000480 	.word	0x20000480
 8002848:	40000400 	.word	0x40000400

0800284c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002850:	4b16      	ldr	r3, [pc, #88]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002852:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <MX_USART1_UART_Init+0x64>)
 8002854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002858:	2296      	movs	r2, #150	@ 0x96
 800285a:	0192      	lsls	r2, r2, #6
 800285c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002888:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 800288a:	2210      	movs	r2, #16
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800288e:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002890:	2280      	movs	r2, #128	@ 0x80
 8002892:	0152      	lsls	r2, r2, #5
 8002894:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <MX_USART1_UART_Init+0x60>)
 8002898:	0018      	movs	r0, r3
 800289a:	f004 fcbb 	bl	8007214 <HAL_UART_Init>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d001      	beq.n	80028a6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80028a2:	f000 f959 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200004c8 	.word	0x200004c8
 80028b0:	40013800 	.word	0x40013800

080028b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028ba:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <MX_DMA_Init+0x38>)
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <MX_DMA_Init+0x38>)
 80028c0:	2101      	movs	r1, #1
 80028c2:	430a      	orrs	r2, r1
 80028c4:	615a      	str	r2, [r3, #20]
 80028c6:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <MX_DMA_Init+0x38>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4013      	ands	r3, r2
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	200a      	movs	r0, #10
 80028d8:	f000 ffcc 	bl	8003874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80028dc:	200a      	movs	r0, #10
 80028de:	f000 ffde 	bl	800389e <HAL_NVIC_EnableIRQ>

}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	40021000 	.word	0x40021000

080028f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b089      	sub	sp, #36	@ 0x24
 80028f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f6:	240c      	movs	r4, #12
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	0018      	movs	r0, r3
 80028fc:	2314      	movs	r3, #20
 80028fe:	001a      	movs	r2, r3
 8002900:	2100      	movs	r1, #0
 8002902:	f00b f8a3 	bl	800da4c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002906:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <MX_GPIO_Init+0x184>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a74 <MX_GPIO_Init+0x184>)
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	03c9      	lsls	r1, r1, #15
 8002910:	430a      	orrs	r2, r1
 8002912:	615a      	str	r2, [r3, #20]
 8002914:	4b57      	ldr	r3, [pc, #348]	@ (8002a74 <MX_GPIO_Init+0x184>)
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	03db      	lsls	r3, r3, #15
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	4b54      	ldr	r3, [pc, #336]	@ (8002a74 <MX_GPIO_Init+0x184>)
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	4b53      	ldr	r3, [pc, #332]	@ (8002a74 <MX_GPIO_Init+0x184>)
 8002928:	2180      	movs	r1, #128	@ 0x80
 800292a:	0289      	lsls	r1, r1, #10
 800292c:	430a      	orrs	r2, r1
 800292e:	615a      	str	r2, [r3, #20]
 8002930:	4b50      	ldr	r3, [pc, #320]	@ (8002a74 <MX_GPIO_Init+0x184>)
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	029b      	lsls	r3, r3, #10
 8002938:	4013      	ands	r3, r2
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a74 <MX_GPIO_Init+0x184>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b4c      	ldr	r3, [pc, #304]	@ (8002a74 <MX_GPIO_Init+0x184>)
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	02c9      	lsls	r1, r1, #11
 8002948:	430a      	orrs	r2, r1
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	4b49      	ldr	r3, [pc, #292]	@ (8002a74 <MX_GPIO_Init+0x184>)
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	02db      	lsls	r3, r3, #11
 8002954:	4013      	ands	r3, r2
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E5_NRST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 800295a:	2390      	movs	r3, #144	@ 0x90
 800295c:	05db      	lsls	r3, r3, #23
 800295e:	2200      	movs	r2, #0
 8002960:	2111      	movs	r1, #17
 8002962:	0018      	movs	r0, r3
 8002964:	f001 fb63 	bl	800402e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 8002968:	4943      	ldr	r1, [pc, #268]	@ (8002a78 <MX_GPIO_Init+0x188>)
 800296a:	4b44      	ldr	r3, [pc, #272]	@ (8002a7c <MX_GPIO_Init+0x18c>)
 800296c:	2200      	movs	r2, #0
 800296e:	0018      	movs	r0, r3
 8002970:	f001 fb5d 	bl	800402e <HAL_GPIO_WritePin>
                          |TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : E5_NRST_Pin */
  GPIO_InitStruct.Pin = E5_NRST_Pin;
 8002974:	193b      	adds	r3, r7, r4
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297a:	193b      	adds	r3, r7, r4
 800297c:	2201      	movs	r2, #1
 800297e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	193b      	adds	r3, r7, r4
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	193b      	adds	r3, r7, r4
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E5_NRST_GPIO_Port, &GPIO_InitStruct);
 800298c:	193a      	adds	r2, r7, r4
 800298e:	2390      	movs	r3, #144	@ 0x90
 8002990:	05db      	lsls	r3, r3, #23
 8002992:	0011      	movs	r1, r2
 8002994:	0018      	movs	r0, r3
 8002996:	f001 f9b5 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 800299a:	193b      	adds	r3, r7, r4
 800299c:	2204      	movs	r2, #4
 800299e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2288      	movs	r2, #136	@ 0x88
 80029a4:	0352      	lsls	r2, r2, #13
 80029a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	193b      	adds	r3, r7, r4
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80029ae:	193a      	adds	r2, r7, r4
 80029b0:	2390      	movs	r3, #144	@ 0x90
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	0011      	movs	r1, r2
 80029b6:	0018      	movs	r0, r3
 80029b8:	f001 f9a4 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	2210      	movs	r2, #16
 80029c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	2201      	movs	r2, #1
 80029c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	2203      	movs	r2, #3
 80029d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80029d4:	193a      	adds	r2, r7, r4
 80029d6:	2390      	movs	r3, #144	@ 0x90
 80029d8:	05db      	lsls	r3, r3, #23
 80029da:	0011      	movs	r1, r2
 80029dc:	0018      	movs	r0, r3
 80029de:	f001 f991 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCREEN_EN_Pin SD_CS_Pin WAKE_Pin TFT_DC_Pin
                           TFT_RST_Pin */
  GPIO_InitStruct.Pin = SCREEN_EN_Pin|SD_CS_Pin|WAKE_Pin|TFT_DC_Pin
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	4a24      	ldr	r2, [pc, #144]	@ (8002a78 <MX_GPIO_Init+0x188>)
 80029e6:	601a      	str	r2, [r3, #0]
                          |TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2201      	movs	r2, #1
 80029ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a7c <MX_GPIO_Init+0x18c>)
 80029fe:	0019      	movs	r1, r3
 8002a00:	0010      	movs	r0, r2
 8002a02:	f001 f97f 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DISP_Pin */
  GPIO_InitStruct.Pin = BTN_DISP_Pin;
 8002a06:	0021      	movs	r1, r4
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2280      	movs	r2, #128	@ 0x80
 8002a0c:	0192      	lsls	r2, r2, #6
 8002a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a10:	000c      	movs	r4, r1
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2200      	movs	r2, #0
 8002a16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_DISP_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	4a16      	ldr	r2, [pc, #88]	@ (8002a7c <MX_GPIO_Init+0x18c>)
 8002a22:	0019      	movs	r1, r3
 8002a24:	0010      	movs	r0, r2
 8002a26:	f001 f96d 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002a2a:	0021      	movs	r1, r4
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	2220      	movs	r2, #32
 8002a30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a32:	187b      	adds	r3, r7, r1
 8002a34:	2288      	movs	r2, #136	@ 0x88
 8002a36:	0352      	lsls	r2, r2, #13
 8002a38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	4a0e      	ldr	r2, [pc, #56]	@ (8002a7c <MX_GPIO_Init+0x18c>)
 8002a44:	0019      	movs	r1, r3
 8002a46:	0010      	movs	r0, r2
 8002a48:	f001 f95c 	bl	8003d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	2006      	movs	r0, #6
 8002a52:	f000 ff0f 	bl	8003874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002a56:	2006      	movs	r0, #6
 8002a58:	f000 ff21 	bl	800389e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2007      	movs	r0, #7
 8002a62:	f000 ff07 	bl	8003874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a66:	2007      	movs	r0, #7
 8002a68:	f000 ff19 	bl	800389e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b009      	add	sp, #36	@ 0x24
 8002a72:	bd90      	pop	{r4, r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	00000b44 	.word	0x00000b44
 8002a7c:	48000400 	.word	0x48000400

08002a80 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t offset)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	000a      	movs	r2, r1
 8002a8a:	1cbb      	adds	r3, r7, #2
 8002a8c:	801a      	strh	r2, [r3, #0]

	static uint16_t last_offset = 0;

	// Ignore if called twice (which will happen on every half buffer)
	if (offset != last_offset) {
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	1cba      	adds	r2, r7, #2
 8002a94:	8812      	ldrh	r2, [r2, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d050      	beq.n	8002b3c <HAL_UARTEx_RxEventCallback+0xbc>

		// If wrap around reset last_size
		if (offset < last_offset)
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	1cba      	adds	r2, r7, #2
 8002aa0:	8812      	ldrh	r2, [r2, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d202      	bcs.n	8002aac <HAL_UARTEx_RxEventCallback+0x2c>
			last_offset = 0;
 8002aa6:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	801a      	strh	r2, [r3, #0]

    CDC_Transmit_FS(uart_rx_buf + last_offset, offset - last_offset);
 8002aac:	4b25      	ldr	r3, [pc, #148]	@ (8002b44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	4b25      	ldr	r3, [pc, #148]	@ (8002b48 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002ab4:	18d0      	adds	r0, r2, r3
 8002ab6:	1cbb      	adds	r3, r7, #2
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	4a22      	ldr	r2, [pc, #136]	@ (8002b44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002abc:	8812      	ldrh	r2, [r2, #0]
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	f009 fd5d 	bl	800c580 <CDC_Transmit_FS>
    
    static uint16_t response_offset = 0;
    
    for(uint16_t i = last_offset; i < offset; i++)
 8002ac6:	230e      	movs	r3, #14
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	801a      	strh	r2, [r3, #0]
 8002ad0:	e029      	b.n	8002b26 <HAL_UARTEx_RxEventCallback+0xa6>
    {
      if(uart_rx_buf[i] == '+')
 8002ad2:	210e      	movs	r1, #14
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b48 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	2b2b      	cmp	r3, #43	@ 0x2b
 8002ade:	d11c      	bne.n	8002b1a <HAL_UARTEx_RxEventCallback+0x9a>
      {
        response_offset = i;
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002ae2:	187a      	adds	r2, r7, r1
 8002ae4:	8812      	ldrh	r2, [r2, #0]
 8002ae6:	801a      	strh	r2, [r3, #0]
        if (offset < response_offset)
 8002ae8:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	1cba      	adds	r2, r7, #2
 8002aee:	8812      	ldrh	r2, [r2, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d202      	bcs.n	8002afa <HAL_UARTEx_RxEventCallback+0x7a>
          response_offset = 0;
 8002af4:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	801a      	strh	r2, [r3, #0]
        if(memcmp(uart_rx_buf + response_offset, joined_msg, sizeof(joined_msg) - 1) == 0)
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	001a      	movs	r2, r3
 8002b00:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002b02:	18d3      	adds	r3, r2, r3
 8002b04:	4912      	ldr	r1, [pc, #72]	@ (8002b50 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002b06:	2215      	movs	r2, #21
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f00a ff91 	bl	800da30 <memcmp>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d103      	bne.n	8002b1a <HAL_UARTEx_RxEventCallback+0x9a>
        {
          joined = 1;
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
          break;
 8002b18:	e00c      	b.n	8002b34 <HAL_UARTEx_RxEventCallback+0xb4>
    for(uint16_t i = last_offset; i < offset; i++)
 8002b1a:	210e      	movs	r1, #14
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	3201      	adds	r2, #1
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	230e      	movs	r3, #14
 8002b28:	18fa      	adds	r2, r7, r3
 8002b2a:	1cbb      	adds	r3, r7, #2
 8002b2c:	8812      	ldrh	r2, [r2, #0]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d3ce      	bcc.n	8002ad2 <HAL_UARTEx_RxEventCallback+0x52>
        }
      }
    }

    last_offset = offset;
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002b36:	1cba      	adds	r2, r7, #2
 8002b38:	8812      	ldrh	r2, [r2, #0]
 8002b3a:	801a      	strh	r2, [r3, #0]


	}

}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b004      	add	sp, #16
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200009c6 	.word	0x200009c6
 8002b48:	200005c4 	.word	0x200005c4
 8002b4c:	200009c8 	.word	0x200009c8
 8002b50:	20000000 	.word	0x20000000
 8002b54:	200009c4 	.word	0x200009c4

08002b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5c:	b672      	cpsid	i
}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b60:	46c0      	nop			@ (mov r8, r8)
 8002b62:	e7fd      	b.n	8002b60 <Error_Handler+0x8>

08002b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	4b13      	ldr	r3, [pc, #76]	@ (8002bb8 <HAL_MspInit+0x54>)
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_MspInit+0x54>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	619a      	str	r2, [r3, #24]
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <HAL_MspInit+0x54>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <HAL_MspInit+0x54>)
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <HAL_MspInit+0x54>)
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0549      	lsls	r1, r1, #21
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	61da      	str	r2, [r3, #28]
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_MspInit+0x54>)
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	055b      	lsls	r3, r3, #21
 8002b98:	4013      	ands	r3, r2
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	2004      	movs	r0, #4
 8002ba4:	f000 fe66 	bl	8003874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8002ba8:	2004      	movs	r0, #4
 8002baa:	f000 fe78 	bl	800389e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b08b      	sub	sp, #44	@ 0x2c
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	2414      	movs	r4, #20
 8002bc6:	193b      	adds	r3, r7, r4
 8002bc8:	0018      	movs	r0, r3
 8002bca:	2314      	movs	r3, #20
 8002bcc:	001a      	movs	r2, r3
 8002bce:	2100      	movs	r1, #0
 8002bd0:	f00a ff3c 	bl	800da4c <memset>
  if(hadc->Instance==ADC1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a18      	ldr	r2, [pc, #96]	@ (8002c3c <HAL_ADC_MspInit+0x80>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12a      	bne.n	8002c34 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bde:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <HAL_ADC_MspInit+0x84>)
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	4b17      	ldr	r3, [pc, #92]	@ (8002c40 <HAL_ADC_MspInit+0x84>)
 8002be4:	2180      	movs	r1, #128	@ 0x80
 8002be6:	0089      	lsls	r1, r1, #2
 8002be8:	430a      	orrs	r2, r1
 8002bea:	619a      	str	r2, [r3, #24]
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_ADC_MspInit+0x84>)
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <HAL_ADC_MspInit+0x84>)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_ADC_MspInit+0x84>)
 8002c00:	2180      	movs	r1, #128	@ 0x80
 8002c02:	02c9      	lsls	r1, r1, #11
 8002c04:	430a      	orrs	r2, r1
 8002c06:	615a      	str	r2, [r3, #20]
 8002c08:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_ADC_MspInit+0x84>)
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	02db      	lsls	r3, r3, #11
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = VBATT_ADC_Pin;
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2203      	movs	r2, #3
 8002c20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	4a06      	ldr	r2, [pc, #24]	@ (8002c44 <HAL_ADC_MspInit+0x88>)
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	0010      	movs	r0, r2
 8002c30:	f001 f868 	bl	8003d04 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b00b      	add	sp, #44	@ 0x2c
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	40012400 	.word	0x40012400
 8002c40:	40021000 	.word	0x40021000
 8002c44:	48000400 	.word	0x48000400

08002c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b08d      	sub	sp, #52	@ 0x34
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	241c      	movs	r4, #28
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	0018      	movs	r0, r3
 8002c56:	2314      	movs	r3, #20
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f00a fef6 	bl	800da4c <memset>
  if(hspi->Instance==SPI1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a45      	ldr	r2, [pc, #276]	@ (8002d7c <HAL_SPI_MspInit+0x134>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d133      	bne.n	8002cd2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c6a:	4b45      	ldr	r3, [pc, #276]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	4b44      	ldr	r3, [pc, #272]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002c70:	2180      	movs	r1, #128	@ 0x80
 8002c72:	0149      	lsls	r1, r1, #5
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
 8002c78:	4b41      	ldr	r3, [pc, #260]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	4b3e      	ldr	r3, [pc, #248]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002c8c:	2180      	movs	r1, #128	@ 0x80
 8002c8e:	0289      	lsls	r1, r1, #10
 8002c90:	430a      	orrs	r2, r1
 8002c92:	615a      	str	r2, [r3, #20]
 8002c94:	4b3a      	ldr	r3, [pc, #232]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8002ca2:	0021      	movs	r1, r4
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	22e0      	movs	r2, #224	@ 0xe0
 8002ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	187b      	adds	r3, r7, r1
 8002cac:	2202      	movs	r2, #2
 8002cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	187a      	adds	r2, r7, r1
 8002cc4:	2390      	movs	r3, #144	@ 0x90
 8002cc6:	05db      	lsls	r3, r3, #23
 8002cc8:	0011      	movs	r1, r2
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f001 f81a 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cd0:	e04f      	b.n	8002d72 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8002d84 <HAL_SPI_MspInit+0x13c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d14a      	bne.n	8002d72 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cdc:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	4b27      	ldr	r3, [pc, #156]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002ce2:	2180      	movs	r1, #128	@ 0x80
 8002ce4:	01c9      	lsls	r1, r1, #7
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	61da      	str	r2, [r3, #28]
 8002cea:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	01db      	lsls	r3, r3, #7
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf8:	4b21      	ldr	r3, [pc, #132]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002cfe:	2180      	movs	r1, #128	@ 0x80
 8002d00:	02c9      	lsls	r1, r1, #11
 8002d02:	430a      	orrs	r2, r1
 8002d04:	615a      	str	r2, [r3, #20]
 8002d06:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <HAL_SPI_MspInit+0x138>)
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	02db      	lsls	r3, r3, #11
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d14:	211c      	movs	r1, #28
 8002d16:	187b      	adds	r3, r7, r1
 8002d18:	2280      	movs	r2, #128	@ 0x80
 8002d1a:	00d2      	lsls	r2, r2, #3
 8002d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	000c      	movs	r4, r1
 8002d20:	193b      	adds	r3, r7, r4
 8002d22:	2202      	movs	r2, #2
 8002d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	2203      	movs	r2, #3
 8002d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	2205      	movs	r2, #5
 8002d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	4a13      	ldr	r2, [pc, #76]	@ (8002d88 <HAL_SPI_MspInit+0x140>)
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	0010      	movs	r0, r2
 8002d40:	f000 ffe0 	bl	8003d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_CS_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002d44:	0021      	movs	r1, r4
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	22d0      	movs	r2, #208	@ 0xd0
 8002d4a:	0212      	lsls	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	187b      	adds	r3, r7, r1
 8002d50:	2202      	movs	r2, #2
 8002d52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	187b      	adds	r3, r7, r1
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	4a07      	ldr	r2, [pc, #28]	@ (8002d88 <HAL_SPI_MspInit+0x140>)
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	0010      	movs	r0, r2
 8002d6e:	f000 ffc9 	bl	8003d04 <HAL_GPIO_Init>
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b00d      	add	sp, #52	@ 0x34
 8002d78:	bd90      	pop	{r4, r7, pc}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	40013000 	.word	0x40013000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40003800 	.word	0x40003800
 8002d88:	48000400 	.word	0x48000400

08002d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <HAL_TIM_Base_MspInit+0x44>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d113      	bne.n	8002dc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <HAL_TIM_Base_MspInit+0x48>)
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <HAL_TIM_Base_MspInit+0x48>)
 8002da4:	2102      	movs	r1, #2
 8002da6:	430a      	orrs	r2, r1
 8002da8:	61da      	str	r2, [r3, #28]
 8002daa:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <HAL_TIM_Base_MspInit+0x48>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2202      	movs	r2, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2010      	movs	r0, #16
 8002dbc:	f000 fd5a 	bl	8003874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dc0:	2010      	movs	r0, #16
 8002dc2:	f000 fd6c 	bl	800389e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b004      	add	sp, #16
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b08b      	sub	sp, #44	@ 0x2c
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	2414      	movs	r4, #20
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	0018      	movs	r0, r3
 8002de6:	2314      	movs	r3, #20
 8002de8:	001a      	movs	r2, r3
 8002dea:	2100      	movs	r1, #0
 8002dec:	f00a fe2e 	bl	800da4c <memset>
  if(huart->Instance==USART1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a34      	ldr	r2, [pc, #208]	@ (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d161      	bne.n	8002ebe <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <HAL_UART_MspInit+0xf4>)
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ecc <HAL_UART_MspInit+0xf4>)
 8002e00:	2180      	movs	r1, #128	@ 0x80
 8002e02:	01c9      	lsls	r1, r1, #7
 8002e04:	430a      	orrs	r2, r1
 8002e06:	619a      	str	r2, [r3, #24]
 8002e08:	4b30      	ldr	r3, [pc, #192]	@ (8002ecc <HAL_UART_MspInit+0xf4>)
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	01db      	lsls	r3, r3, #7
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <HAL_UART_MspInit+0xf4>)
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ecc <HAL_UART_MspInit+0xf4>)
 8002e1c:	2180      	movs	r1, #128	@ 0x80
 8002e1e:	0289      	lsls	r1, r1, #10
 8002e20:	430a      	orrs	r2, r1
 8002e22:	615a      	str	r2, [r3, #20]
 8002e24:	4b29      	ldr	r3, [pc, #164]	@ (8002ecc <HAL_UART_MspInit+0xf4>)
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e32:	193b      	adds	r3, r7, r4
 8002e34:	22c0      	movs	r2, #192	@ 0xc0
 8002e36:	00d2      	lsls	r2, r2, #3
 8002e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	0021      	movs	r1, r4
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	2202      	movs	r2, #2
 8002e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	2201      	movs	r2, #1
 8002e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	187a      	adds	r2, r7, r1
 8002e56:	2390      	movs	r3, #144	@ 0x90
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 ff51 	bl	8003d04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002e62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed4 <HAL_UART_MspInit+0xfc>)
 8002e66:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e68:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e74:	4b16      	ldr	r3, [pc, #88]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e76:	2280      	movs	r2, #128	@ 0x80
 8002e78:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e80:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e86:	4b12      	ldr	r3, [pc, #72]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e88:	2220      	movs	r2, #32
 8002e8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 fd1f 	bl	80038d8 <HAL_DMA_Init>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002e9e:	f7ff fe5b 	bl	8002b58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002ea6:	675a      	str	r2, [r3, #116]	@ 0x74
 8002ea8:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <HAL_UART_MspInit+0xf8>)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	201b      	movs	r0, #27
 8002eb4:	f000 fcde 	bl	8003874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eb8:	201b      	movs	r0, #27
 8002eba:	f000 fcf0 	bl	800389e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b00b      	add	sp, #44	@ 0x2c
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	20000580 	.word	0x20000580
 8002ed4:	40020030 	.word	0x40020030

08002ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002edc:	46c0      	nop			@ (mov r8, r8)
 8002ede:	e7fd      	b.n	8002edc <NMI_Handler+0x4>

08002ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	e7fd      	b.n	8002ee4 <HardFault_Handler+0x4>

08002ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f00:	f000 f97e 	bl	8003200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RESET_Pin);
 8002f18:	2004      	movs	r0, #4
 8002f1a:	f001 f8a5 	bl	8004068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002f28:	2020      	movs	r0, #32
 8002f2a:	f001 f89d 	bl	8004068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 fdf7 	bl	8003b2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002f40:	46c0      	nop			@ (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	20000580 	.word	0x20000580

08002f4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <TIM3_IRQHandler+0x14>)
 8002f52:	0018      	movs	r0, r3
 8002f54:	f003 fdde 	bl	8006b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f58:	46c0      	nop			@ (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	20000480 	.word	0x20000480

08002f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  //   __HAL_UART_CLEAR_IDLEFLAG(&huart1);
  //   UART1_IdleCallback();
  // }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f68:	4b03      	ldr	r3, [pc, #12]	@ (8002f78 <USART1_IRQHandler+0x14>)
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f004 fa28 	bl	80073c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f70:	46c0      	nop			@ (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	200004c8 	.word	0x200004c8

08002f7c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <USB_IRQHandler+0x14>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f001 f9a6 	bl	80042d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	2000169c 	.word	0x2000169c

08002f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  return 1;
 8002f98:	2301      	movs	r3, #1
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_kill>:

int _kill(int pid, int sig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002faa:	f00a fda9 	bl	800db00 <__errno>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	2216      	movs	r2, #22
 8002fb2:	601a      	str	r2, [r3, #0]
  return -1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	425b      	negs	r3, r3
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_exit>:

void _exit (int status)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fc8:	2301      	movs	r3, #1
 8002fca:	425a      	negs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7ff ffe5 	bl	8002fa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	e7fd      	b.n	8002fd6 <_exit+0x16>

08002fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e00a      	b.n	8003002 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fec:	e000      	b.n	8002ff0 <_read+0x16>
 8002fee:	bf00      	nop
 8002ff0:	0001      	movs	r1, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	60ba      	str	r2, [r7, #8]
 8002ff8:	b2ca      	uxtb	r2, r1
 8002ffa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3301      	adds	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	dbf0      	blt.n	8002fec <_read+0x12>
  }

  return len;
 800300a:	687b      	ldr	r3, [r7, #4]
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b006      	add	sp, #24
 8003012:	bd80      	pop	{r7, pc}

08003014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e009      	b.n	800303a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	60ba      	str	r2, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	0018      	movs	r0, r3
 8003030:	e000      	b.n	8003034 <_write+0x20>
 8003032:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3301      	adds	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	dbf1      	blt.n	8003026 <_write+0x12>
  }
  return len;
 8003042:	687b      	ldr	r3, [r7, #4]
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b006      	add	sp, #24
 800304a:	bd80      	pop	{r7, pc}

0800304c <_close>:

int _close(int file)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003054:	2301      	movs	r3, #1
 8003056:	425b      	negs	r3, r3
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}

08003060 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	0192      	lsls	r2, r2, #6
 8003070:	605a      	str	r2, [r3, #4]
  return 0;
 8003072:	2300      	movs	r3, #0
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}

0800307c <_isatty>:

int _isatty(int file)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003084:	2301      	movs	r3, #1
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}

0800308e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b004      	add	sp, #16
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030ac:	4a14      	ldr	r2, [pc, #80]	@ (8003100 <_sbrk+0x5c>)
 80030ae:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <_sbrk+0x60>)
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030b8:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <_sbrk+0x64>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c0:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <_sbrk+0x64>)
 80030c2:	4a12      	ldr	r2, [pc, #72]	@ (800310c <_sbrk+0x68>)
 80030c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <_sbrk+0x64>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	18d3      	adds	r3, r2, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d207      	bcs.n	80030e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030d4:	f00a fd14 	bl	800db00 <__errno>
 80030d8:	0003      	movs	r3, r0
 80030da:	220c      	movs	r2, #12
 80030dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030de:	2301      	movs	r3, #1
 80030e0:	425b      	negs	r3, r3
 80030e2:	e009      	b.n	80030f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030e4:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <_sbrk+0x64>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ea:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <_sbrk+0x64>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	18d2      	adds	r2, r2, r3
 80030f2:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <_sbrk+0x64>)
 80030f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b006      	add	sp, #24
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20004000 	.word	0x20004000
 8003104:	00000400 	.word	0x00000400
 8003108:	200009cc 	.word	0x200009cc
 800310c:	20001ce8 	.word	0x20001ce8

08003110 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003114:	46c0      	nop			@ (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800311c:	480d      	ldr	r0, [pc, #52]	@ (8003154 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800311e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003120:	f7ff fff6 	bl	8003110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003124:	480c      	ldr	r0, [pc, #48]	@ (8003158 <LoopForever+0x6>)
  ldr r1, =_edata
 8003126:	490d      	ldr	r1, [pc, #52]	@ (800315c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003128:	4a0d      	ldr	r2, [pc, #52]	@ (8003160 <LoopForever+0xe>)
  movs r3, #0
 800312a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800312c:	e002      	b.n	8003134 <LoopCopyDataInit>

0800312e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800312e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003132:	3304      	adds	r3, #4

08003134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003138:	d3f9      	bcc.n	800312e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800313c:	4c0a      	ldr	r4, [pc, #40]	@ (8003168 <LoopForever+0x16>)
  movs r3, #0
 800313e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003140:	e001      	b.n	8003146 <LoopFillZerobss>

08003142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003144:	3204      	adds	r2, #4

08003146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003148:	d3fb      	bcc.n	8003142 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800314a:	f00a fcdf 	bl	800db0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800314e:	f7ff f97f 	bl	8002450 <main>

08003152 <LoopForever>:

LoopForever:
    b LoopForever
 8003152:	e7fe      	b.n	8003152 <LoopForever>
  ldr   r0, =_estack
 8003154:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800315c:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8003160:	0800ff7c 	.word	0x0800ff7c
  ldr r2, =_sbss
 8003164:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8003168:	20001ce8 	.word	0x20001ce8

0800316c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800316c:	e7fe      	b.n	800316c <ADC1_COMP_IRQHandler>
	...

08003170 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b07      	ldr	r3, [pc, #28]	@ (8003194 <HAL_Init+0x24>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_Init+0x24>)
 800317a:	2110      	movs	r1, #16
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 f809 	bl	8003198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003186:	f7ff fced 	bl	8002b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	40022000 	.word	0x40022000

08003198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a0:	4b14      	ldr	r3, [pc, #80]	@ (80031f4 <HAL_InitTick+0x5c>)
 80031a2:	681c      	ldr	r4, [r3, #0]
 80031a4:	4b14      	ldr	r3, [pc, #80]	@ (80031f8 <HAL_InitTick+0x60>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	0019      	movs	r1, r3
 80031aa:	23fa      	movs	r3, #250	@ 0xfa
 80031ac:	0098      	lsls	r0, r3, #2
 80031ae:	f7fc ffc7 	bl	8000140 <__udivsi3>
 80031b2:	0003      	movs	r3, r0
 80031b4:	0019      	movs	r1, r3
 80031b6:	0020      	movs	r0, r4
 80031b8:	f7fc ffc2 	bl	8000140 <__udivsi3>
 80031bc:	0003      	movs	r3, r0
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 fb7d 	bl	80038be <HAL_SYSTICK_Config>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d001      	beq.n	80031cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e00f      	b.n	80031ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d80b      	bhi.n	80031ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	2301      	movs	r3, #1
 80031d6:	425b      	negs	r3, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 fb4a 	bl	8003874 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e0:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <HAL_InitTick+0x64>)
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b003      	add	sp, #12
 80031f2:	bd90      	pop	{r4, r7, pc}
 80031f4:	20000018 	.word	0x20000018
 80031f8:	20000020 	.word	0x20000020
 80031fc:	2000001c 	.word	0x2000001c

08003200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_IncTick+0x1c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	001a      	movs	r2, r3
 800320a:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_IncTick+0x20>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	18d2      	adds	r2, r2, r3
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <HAL_IncTick+0x20>)
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	46c0      	nop			@ (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	20000020 	.word	0x20000020
 8003220:	200009d0 	.word	0x200009d0

08003224 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b02      	ldr	r3, [pc, #8]	@ (8003234 <HAL_GetTick+0x10>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	200009d0 	.word	0x200009d0

08003238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7ff fff0 	bl	8003224 <HAL_GetTick>
 8003244:	0003      	movs	r3, r0
 8003246:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3301      	adds	r3, #1
 8003250:	d005      	beq.n	800325e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003252:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <HAL_Delay+0x44>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	001a      	movs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	189b      	adds	r3, r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	f7ff ffe0 	bl	8003224 <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	429a      	cmp	r2, r3
 800326e:	d8f7      	bhi.n	8003260 <HAL_Delay+0x28>
  {
  }
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b004      	add	sp, #16
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	20000020 	.word	0x20000020

08003280 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e125      	b.n	80034ea <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2234      	movs	r2, #52	@ 0x34
 80032b0:	2100      	movs	r1, #0
 80032b2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff fc80 	bl	8002bbc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	2210      	movs	r2, #16
 80032c2:	4013      	ands	r3, r2
 80032c4:	d000      	beq.n	80032c8 <HAL_ADC_Init+0x48>
 80032c6:	e103      	b.n	80034d0 <HAL_ADC_Init+0x250>
 80032c8:	230f      	movs	r3, #15
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d000      	beq.n	80032d4 <HAL_ADC_Init+0x54>
 80032d2:	e0fd      	b.n	80034d0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2204      	movs	r2, #4
 80032dc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80032de:	d000      	beq.n	80032e2 <HAL_ADC_Init+0x62>
 80032e0:	e0f6      	b.n	80034d0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e6:	4a83      	ldr	r2, [pc, #524]	@ (80034f4 <HAL_ADC_Init+0x274>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	2202      	movs	r2, #2
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2203      	movs	r2, #3
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d112      	bne.n	8003326 <HAL_ADC_Init+0xa6>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2201      	movs	r2, #1
 8003308:	4013      	ands	r3, r2
 800330a:	2b01      	cmp	r3, #1
 800330c:	d009      	beq.n	8003322 <HAL_ADC_Init+0xa2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	401a      	ands	r2, r3
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	429a      	cmp	r2, r3
 8003320:	d101      	bne.n	8003326 <HAL_ADC_Init+0xa6>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_ADC_Init+0xa8>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2218      	movs	r2, #24
 8003334:	4393      	bics	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	0899      	lsrs	r1, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4964      	ldr	r1, [pc, #400]	@ (80034f8 <HAL_ADC_Init+0x278>)
 8003366:	400a      	ands	r2, r1
 8003368:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7e1b      	ldrb	r3, [r3, #24]
 800336e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e5b      	ldrb	r3, [r3, #25]
 8003374:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003376:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7e9b      	ldrb	r3, [r3, #26]
 800337c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800337e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	2b01      	cmp	r3, #1
 8003386:	d002      	beq.n	800338e <HAL_ADC_Init+0x10e>
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	015b      	lsls	r3, r3, #5
 800338c:	e000      	b.n	8003390 <HAL_ADC_Init+0x110>
 800338e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003390:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003396:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_Init+0x124>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e000      	b.n	80033a6 <HAL_ADC_Init+0x126>
 80033a4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80033a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2124      	movs	r1, #36	@ 0x24
 80033ac:	5c5b      	ldrb	r3, [r3, r1]
 80033ae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033b0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7edb      	ldrb	r3, [r3, #27]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d115      	bne.n	80033ec <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7e9b      	ldrb	r3, [r3, #26]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2280      	movs	r2, #128	@ 0x80
 80033cc:	0252      	lsls	r2, r2, #9
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	e00b      	b.n	80033ec <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	2220      	movs	r2, #32
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e4:	2201      	movs	r2, #1
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	23c2      	movs	r3, #194	@ 0xc2
 80033f2:	33ff      	adds	r3, #255	@ 0xff
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d007      	beq.n	8003408 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003400:	4313      	orrs	r3, r2
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4313      	orrs	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68d9      	ldr	r1, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	430a      	orrs	r2, r1
 8003416:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	055b      	lsls	r3, r3, #21
 8003420:	429a      	cmp	r2, r3
 8003422:	d01b      	beq.n	800345c <HAL_ADC_Init+0x1dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d017      	beq.n	800345c <HAL_ADC_Init+0x1dc>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	2b02      	cmp	r3, #2
 8003432:	d013      	beq.n	800345c <HAL_ADC_Init+0x1dc>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	2b03      	cmp	r3, #3
 800343a:	d00f      	beq.n	800345c <HAL_ADC_Init+0x1dc>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	2b04      	cmp	r3, #4
 8003442:	d00b      	beq.n	800345c <HAL_ADC_Init+0x1dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	2b05      	cmp	r3, #5
 800344a:	d007      	beq.n	800345c <HAL_ADC_Init+0x1dc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	2b06      	cmp	r3, #6
 8003452:	d003      	beq.n	800345c <HAL_ADC_Init+0x1dc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	2b07      	cmp	r3, #7
 800345a:	d112      	bne.n	8003482 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2107      	movs	r1, #7
 8003468:	438a      	bics	r2, r1
 800346a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6959      	ldr	r1, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	2207      	movs	r2, #7
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a1c      	ldr	r2, [pc, #112]	@ (80034fc <HAL_ADC_Init+0x27c>)
 800348a:	4013      	ands	r3, r2
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d10b      	bne.n	80034aa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349c:	2203      	movs	r2, #3
 800349e:	4393      	bics	r3, r2
 80034a0:	2201      	movs	r2, #1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034a8:	e01c      	b.n	80034e4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ae:	2212      	movs	r2, #18
 80034b0:	4393      	bics	r3, r2
 80034b2:	2210      	movs	r2, #16
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034be:	2201      	movs	r2, #1
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80034c6:	230f      	movs	r3, #15
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80034ce:	e009      	b.n	80034e4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d4:	2210      	movs	r2, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80034dc:	230f      	movs	r3, #15
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	781b      	ldrb	r3, [r3, #0]
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	fffffefd 	.word	0xfffffefd
 80034f8:	fffe0219 	.word	0xfffe0219
 80034fc:	833fffe7 	.word	0x833fffe7

08003500 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800350a:	230f      	movs	r3, #15
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351a:	2380      	movs	r3, #128	@ 0x80
 800351c:	055b      	lsls	r3, r3, #21
 800351e:	429a      	cmp	r2, r3
 8003520:	d011      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x46>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d00d      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x46>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352e:	2b02      	cmp	r3, #2
 8003530:	d009      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x46>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	2b03      	cmp	r3, #3
 8003538:	d005      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x46>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	2b04      	cmp	r3, #4
 8003540:	d001      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x46>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2234      	movs	r2, #52	@ 0x34
 800354a:	5c9b      	ldrb	r3, [r3, r2]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x54>
 8003550:	2302      	movs	r3, #2
 8003552:	e0d0      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1f6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2234      	movs	r2, #52	@ 0x34
 8003558:	2101      	movs	r1, #1
 800355a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2204      	movs	r2, #4
 8003564:	4013      	ands	r3, r2
 8003566:	d000      	beq.n	800356a <HAL_ADC_ConfigChannel+0x6a>
 8003568:	e0b4      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a64      	ldr	r2, [pc, #400]	@ (8003700 <HAL_ADC_ConfigChannel+0x200>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d100      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x76>
 8003574:	e082      	b.n	800367c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	055b      	lsls	r3, r3, #21
 8003594:	429a      	cmp	r2, r3
 8003596:	d037      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d033      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d02f      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d02b      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d027      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d023      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	2b06      	cmp	r3, #6
 80035c6:	d01f      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	2b07      	cmp	r3, #7
 80035ce:	d01b      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	2107      	movs	r1, #7
 80035dc:	400b      	ands	r3, r1
 80035de:	429a      	cmp	r2, r3
 80035e0:	d012      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2107      	movs	r1, #7
 80035ee:	438a      	bics	r2, r1
 80035f0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2207      	movs	r2, #7
 80035fe:	401a      	ands	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b10      	cmp	r3, #16
 800360e:	d007      	beq.n	8003620 <HAL_ADC_ConfigChannel+0x120>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b11      	cmp	r3, #17
 8003616:	d003      	beq.n	8003620 <HAL_ADC_ConfigChannel+0x120>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b12      	cmp	r3, #18
 800361e:	d163      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003620:	4b38      	ldr	r3, [pc, #224]	@ (8003704 <HAL_ADC_ConfigChannel+0x204>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b10      	cmp	r3, #16
 800362a:	d009      	beq.n	8003640 <HAL_ADC_ConfigChannel+0x140>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b11      	cmp	r3, #17
 8003632:	d102      	bne.n	800363a <HAL_ADC_ConfigChannel+0x13a>
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	03db      	lsls	r3, r3, #15
 8003638:	e004      	b.n	8003644 <HAL_ADC_ConfigChannel+0x144>
 800363a:	2380      	movs	r3, #128	@ 0x80
 800363c:	045b      	lsls	r3, r3, #17
 800363e:	e001      	b.n	8003644 <HAL_ADC_ConfigChannel+0x144>
 8003640:	2380      	movs	r3, #128	@ 0x80
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	4a2f      	ldr	r2, [pc, #188]	@ (8003704 <HAL_ADC_ConfigChannel+0x204>)
 8003646:	430b      	orrs	r3, r1
 8003648:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b10      	cmp	r3, #16
 8003650:	d14a      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003652:	4b2d      	ldr	r3, [pc, #180]	@ (8003708 <HAL_ADC_ConfigChannel+0x208>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	492d      	ldr	r1, [pc, #180]	@ (800370c <HAL_ADC_ConfigChannel+0x20c>)
 8003658:	0018      	movs	r0, r3
 800365a:	f7fc fd71 	bl	8000140 <__udivsi3>
 800365e:	0003      	movs	r3, r0
 8003660:	001a      	movs	r2, r3
 8003662:	0013      	movs	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	189b      	adds	r3, r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800366c:	e002      	b.n	8003674 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3b01      	subs	r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f9      	bne.n	800366e <HAL_ADC_ConfigChannel+0x16e>
 800367a:	e035      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	4099      	lsls	r1, r3
 800368a:	000b      	movs	r3, r1
 800368c:	43d9      	mvns	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	400a      	ands	r2, r1
 8003694:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b10      	cmp	r3, #16
 800369c:	d007      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x1ae>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b11      	cmp	r3, #17
 80036a4:	d003      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x1ae>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b12      	cmp	r3, #18
 80036ac:	d11c      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80036ae:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <HAL_ADC_ConfigChannel+0x204>)
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d007      	beq.n	80036ca <HAL_ADC_ConfigChannel+0x1ca>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b11      	cmp	r3, #17
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x1c6>
 80036c2:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <HAL_ADC_ConfigChannel+0x210>)
 80036c4:	e002      	b.n	80036cc <HAL_ADC_ConfigChannel+0x1cc>
 80036c6:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <HAL_ADC_ConfigChannel+0x214>)
 80036c8:	e000      	b.n	80036cc <HAL_ADC_ConfigChannel+0x1cc>
 80036ca:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <HAL_ADC_ConfigChannel+0x218>)
 80036cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <HAL_ADC_ConfigChannel+0x204>)
 80036ce:	400b      	ands	r3, r1
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e009      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	2220      	movs	r2, #32
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80036e0:	230f      	movs	r3, #15
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2234      	movs	r2, #52	@ 0x34
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80036f0:	230f      	movs	r3, #15
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	781b      	ldrb	r3, [r3, #0]
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	00001001 	.word	0x00001001
 8003704:	40012708 	.word	0x40012708
 8003708:	20000018 	.word	0x20000018
 800370c:	000f4240 	.word	0x000f4240
 8003710:	ffbfffff 	.word	0xffbfffff
 8003714:	feffffff 	.word	0xfeffffff
 8003718:	ff7fffff 	.word	0xff7fffff

0800371c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	0002      	movs	r2, r0
 8003724:	1dfb      	adds	r3, r7, #7
 8003726:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003728:	1dfb      	adds	r3, r7, #7
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b7f      	cmp	r3, #127	@ 0x7f
 800372e:	d809      	bhi.n	8003744 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	001a      	movs	r2, r3
 8003736:	231f      	movs	r3, #31
 8003738:	401a      	ands	r2, r3
 800373a:	4b04      	ldr	r3, [pc, #16]	@ (800374c <__NVIC_EnableIRQ+0x30>)
 800373c:	2101      	movs	r1, #1
 800373e:	4091      	lsls	r1, r2
 8003740:	000a      	movs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
  }
}
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	0002      	movs	r2, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b7f      	cmp	r3, #127	@ 0x7f
 8003764:	d828      	bhi.n	80037b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003766:	4a2f      	ldr	r2, [pc, #188]	@ (8003824 <__NVIC_SetPriority+0xd4>)
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b25b      	sxtb	r3, r3
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	33c0      	adds	r3, #192	@ 0xc0
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	589b      	ldr	r3, [r3, r2]
 8003776:	1dfa      	adds	r2, r7, #7
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	0011      	movs	r1, r2
 800377c:	2203      	movs	r2, #3
 800377e:	400a      	ands	r2, r1
 8003780:	00d2      	lsls	r2, r2, #3
 8003782:	21ff      	movs	r1, #255	@ 0xff
 8003784:	4091      	lsls	r1, r2
 8003786:	000a      	movs	r2, r1
 8003788:	43d2      	mvns	r2, r2
 800378a:	401a      	ands	r2, r3
 800378c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	22ff      	movs	r2, #255	@ 0xff
 8003794:	401a      	ands	r2, r3
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	0018      	movs	r0, r3
 800379c:	2303      	movs	r3, #3
 800379e:	4003      	ands	r3, r0
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a4:	481f      	ldr	r0, [pc, #124]	@ (8003824 <__NVIC_SetPriority+0xd4>)
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b25b      	sxtb	r3, r3
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	430a      	orrs	r2, r1
 80037b0:	33c0      	adds	r3, #192	@ 0xc0
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037b6:	e031      	b.n	800381c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <__NVIC_SetPriority+0xd8>)
 80037ba:	1dfb      	adds	r3, r7, #7
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	0019      	movs	r1, r3
 80037c0:	230f      	movs	r3, #15
 80037c2:	400b      	ands	r3, r1
 80037c4:	3b08      	subs	r3, #8
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3306      	adds	r3, #6
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	18d3      	adds	r3, r2, r3
 80037ce:	3304      	adds	r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1dfa      	adds	r2, r7, #7
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	0011      	movs	r1, r2
 80037d8:	2203      	movs	r2, #3
 80037da:	400a      	ands	r2, r1
 80037dc:	00d2      	lsls	r2, r2, #3
 80037de:	21ff      	movs	r1, #255	@ 0xff
 80037e0:	4091      	lsls	r1, r2
 80037e2:	000a      	movs	r2, r1
 80037e4:	43d2      	mvns	r2, r2
 80037e6:	401a      	ands	r2, r3
 80037e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	22ff      	movs	r2, #255	@ 0xff
 80037f0:	401a      	ands	r2, r3
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	0018      	movs	r0, r3
 80037f8:	2303      	movs	r3, #3
 80037fa:	4003      	ands	r3, r0
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003800:	4809      	ldr	r0, [pc, #36]	@ (8003828 <__NVIC_SetPriority+0xd8>)
 8003802:	1dfb      	adds	r3, r7, #7
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	001c      	movs	r4, r3
 8003808:	230f      	movs	r3, #15
 800380a:	4023      	ands	r3, r4
 800380c:	3b08      	subs	r3, #8
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	430a      	orrs	r2, r1
 8003812:	3306      	adds	r3, #6
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	18c3      	adds	r3, r0, r3
 8003818:	3304      	adds	r3, #4
 800381a:	601a      	str	r2, [r3, #0]
}
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b003      	add	sp, #12
 8003822:	bd90      	pop	{r4, r7, pc}
 8003824:	e000e100 	.word	0xe000e100
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	1e5a      	subs	r2, r3, #1
 8003838:	2380      	movs	r3, #128	@ 0x80
 800383a:	045b      	lsls	r3, r3, #17
 800383c:	429a      	cmp	r2, r3
 800383e:	d301      	bcc.n	8003844 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003840:	2301      	movs	r3, #1
 8003842:	e010      	b.n	8003866 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <SysTick_Config+0x44>)
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	3a01      	subs	r2, #1
 800384a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384c:	2301      	movs	r3, #1
 800384e:	425b      	negs	r3, r3
 8003850:	2103      	movs	r1, #3
 8003852:	0018      	movs	r0, r3
 8003854:	f7ff ff7c 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <SysTick_Config+0x44>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385e:	4b04      	ldr	r3, [pc, #16]	@ (8003870 <SysTick_Config+0x44>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	e000e010 	.word	0xe000e010

08003874 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	210f      	movs	r1, #15
 8003880:	187b      	adds	r3, r7, r1
 8003882:	1c02      	adds	r2, r0, #0
 8003884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	187b      	adds	r3, r7, r1
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b25b      	sxtb	r3, r3
 800388e:	0011      	movs	r1, r2
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff ff5d 	bl	8003750 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	0002      	movs	r2, r0
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038aa:	1dfb      	adds	r3, r7, #7
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7ff ff33 	bl	800371c <__NVIC_EnableIRQ>
}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7ff ffaf 	bl	800382c <SysTick_Config>
 80038ce:	0003      	movs	r3, r0
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b002      	add	sp, #8
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e036      	b.n	800395c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2221      	movs	r2, #33	@ 0x21
 80038f2:	2102      	movs	r1, #2
 80038f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <HAL_DMA_Init+0x8c>)
 8003902:	4013      	ands	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800390e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	0018      	movs	r0, r3
 8003940:	f000 f9c4 	bl	8003ccc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2221      	movs	r2, #33	@ 0x21
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	2100      	movs	r1, #0
 8003958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}
 8003964:	ffffc00f 	.word	0xffffc00f

08003968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2317      	movs	r3, #23
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	5c9b      	ldrb	r3, [r3, r2]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_DMA_Start_IT+0x24>
 8003988:	2302      	movs	r3, #2
 800398a:	e04f      	b.n	8003a2c <HAL_DMA_Start_IT+0xc4>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	2101      	movs	r1, #1
 8003992:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2221      	movs	r2, #33	@ 0x21
 8003998:	5c9b      	ldrb	r3, [r3, r2]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	d13a      	bne.n	8003a16 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2221      	movs	r2, #33	@ 0x21
 80039a4:	2102      	movs	r1, #2
 80039a6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	438a      	bics	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f954 	bl	8003c72 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	210e      	movs	r1, #14
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e00f      	b.n	8003a04 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	210a      	movs	r1, #10
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2104      	movs	r1, #4
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e007      	b.n	8003a26 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a1e:	2317      	movs	r3, #23
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	2202      	movs	r2, #2
 8003a24:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003a26:	2317      	movs	r3, #23
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	781b      	ldrb	r3, [r3, #0]
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b006      	add	sp, #24
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2221      	movs	r2, #33	@ 0x21
 8003a40:	5c9b      	ldrb	r3, [r3, r2]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d008      	beq.n	8003a5a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	2100      	movs	r1, #0
 8003a54:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e020      	b.n	8003a9c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	210e      	movs	r1, #14
 8003a66:	438a      	bics	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	438a      	bics	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a82:	2101      	movs	r1, #1
 8003a84:	4091      	lsls	r1, r2
 8003a86:	000a      	movs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2221      	movs	r2, #33	@ 0x21
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	210f      	movs	r1, #15
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2221      	movs	r2, #33	@ 0x21
 8003ab8:	5c9b      	ldrb	r3, [r3, r2]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d006      	beq.n	8003ace <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003ac6:	187b      	adds	r3, r7, r1
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e028      	b.n	8003b20 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	210e      	movs	r1, #14
 8003ada:	438a      	bics	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	438a      	bics	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af6:	2101      	movs	r1, #1
 8003af8:	4091      	lsls	r1, r2
 8003afa:	000a      	movs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2221      	movs	r2, #33	@ 0x21
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	4798      	blx	r3
    }
  }
  return status;
 8003b20:	230f      	movs	r3, #15
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	781b      	ldrb	r3, [r3, #0]
}
 8003b26:	0018      	movs	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b004      	add	sp, #16
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	0013      	movs	r3, r2
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	d024      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x72>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d020      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	d107      	bne.n	8003b7a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2104      	movs	r1, #4
 8003b76:	438a      	bics	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b82:	2104      	movs	r1, #4
 8003b84:	4091      	lsls	r1, r2
 8003b86:	000a      	movs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d100      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x66>
 8003b92:	e06a      	b.n	8003c6a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	0010      	movs	r0, r2
 8003b9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b9e:	e064      	b.n	8003c6a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	0013      	movs	r3, r2
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4013      	ands	r3, r2
 8003bae:	d02b      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xda>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d027      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d10b      	bne.n	8003bdc <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	210a      	movs	r1, #10
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2221      	movs	r2, #33	@ 0x21
 8003bd8:	2101      	movs	r1, #1
 8003bda:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be4:	2102      	movs	r1, #2
 8003be6:	4091      	lsls	r1, r2
 8003be8:	000a      	movs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d036      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	0010      	movs	r0, r2
 8003c04:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c06:	e030      	b.n	8003c6a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	0013      	movs	r3, r2
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4013      	ands	r3, r2
 8003c16:	d028      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x13c>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d024      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	210e      	movs	r1, #14
 8003c2c:	438a      	bics	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4091      	lsls	r1, r2
 8003c3c:	000a      	movs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2221      	movs	r2, #33	@ 0x21
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	2100      	movs	r1, #0
 8003c54:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	0010      	movs	r0, r2
 8003c66:	4798      	blx	r3
    }
  }
}
 8003c68:	e7ff      	b.n	8003c6a <HAL_DMA_IRQHandler+0x13c>
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4091      	lsls	r1, r2
 8003c8c:	000a      	movs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d108      	bne.n	8003cb2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cb0:	e007      	b.n	8003cc2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	60da      	str	r2, [r3, #12]
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b004      	add	sp, #16
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a08      	ldr	r2, [pc, #32]	@ (8003cfc <DMA_CalcBaseAndBitshift+0x30>)
 8003cda:	4694      	mov	ip, r2
 8003cdc:	4463      	add	r3, ip
 8003cde:	2114      	movs	r1, #20
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7fc fa2d 	bl	8000140 <__udivsi3>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	009a      	lsls	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a03      	ldr	r2, [pc, #12]	@ (8003d00 <DMA_CalcBaseAndBitshift+0x34>)
 8003cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	bffdfff8 	.word	0xbffdfff8
 8003d00:	40020000 	.word	0x40020000

08003d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d12:	e155      	b.n	8003fc0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4091      	lsls	r1, r2
 8003d1e:	000a      	movs	r2, r1
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d100      	bne.n	8003d2c <HAL_GPIO_Init+0x28>
 8003d2a:	e146      	b.n	8003fba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2203      	movs	r2, #3
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d005      	beq.n	8003d44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d130      	bne.n	8003da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	2203      	movs	r2, #3
 8003d50:	409a      	lsls	r2, r3
 8003d52:	0013      	movs	r3, r2
 8003d54:	43da      	mvns	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	409a      	lsls	r2, r3
 8003d66:	0013      	movs	r3, r2
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	0013      	movs	r3, r2
 8003d82:	43da      	mvns	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	2201      	movs	r2, #1
 8003d92:	401a      	ands	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	409a      	lsls	r2, r3
 8003d98:	0013      	movs	r3, r2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2203      	movs	r2, #3
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d017      	beq.n	8003de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2203      	movs	r2, #3
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d123      	bne.n	8003e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	08da      	lsrs	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	0092      	lsls	r2, r2, #2
 8003df8:	58d3      	ldr	r3, [r2, r3]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2207      	movs	r2, #7
 8003e00:	4013      	ands	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	220f      	movs	r2, #15
 8003e06:	409a      	lsls	r2, r3
 8003e08:	0013      	movs	r3, r2
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2107      	movs	r1, #7
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	0013      	movs	r3, r2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	6939      	ldr	r1, [r7, #16]
 8003e34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2203      	movs	r2, #3
 8003e42:	409a      	lsls	r2, r3
 8003e44:	0013      	movs	r3, r2
 8003e46:	43da      	mvns	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2203      	movs	r2, #3
 8003e54:	401a      	ands	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	23c0      	movs	r3, #192	@ 0xc0
 8003e70:	029b      	lsls	r3, r3, #10
 8003e72:	4013      	ands	r3, r2
 8003e74:	d100      	bne.n	8003e78 <HAL_GPIO_Init+0x174>
 8003e76:	e0a0      	b.n	8003fba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e78:	4b57      	ldr	r3, [pc, #348]	@ (8003fd8 <HAL_GPIO_Init+0x2d4>)
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	4b56      	ldr	r3, [pc, #344]	@ (8003fd8 <HAL_GPIO_Init+0x2d4>)
 8003e7e:	2101      	movs	r1, #1
 8003e80:	430a      	orrs	r2, r1
 8003e82:	619a      	str	r2, [r3, #24]
 8003e84:	4b54      	ldr	r3, [pc, #336]	@ (8003fd8 <HAL_GPIO_Init+0x2d4>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e90:	4a52      	ldr	r2, [pc, #328]	@ (8003fdc <HAL_GPIO_Init+0x2d8>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	589b      	ldr	r3, [r3, r2]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	0013      	movs	r3, r2
 8003eac:	43da      	mvns	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	2390      	movs	r3, #144	@ 0x90
 8003eb8:	05db      	lsls	r3, r3, #23
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d019      	beq.n	8003ef2 <HAL_GPIO_Init+0x1ee>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a47      	ldr	r2, [pc, #284]	@ (8003fe0 <HAL_GPIO_Init+0x2dc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <HAL_GPIO_Init+0x1ea>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a46      	ldr	r2, [pc, #280]	@ (8003fe4 <HAL_GPIO_Init+0x2e0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00d      	beq.n	8003eea <HAL_GPIO_Init+0x1e6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a45      	ldr	r2, [pc, #276]	@ (8003fe8 <HAL_GPIO_Init+0x2e4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <HAL_GPIO_Init+0x1e2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a44      	ldr	r2, [pc, #272]	@ (8003fec <HAL_GPIO_Init+0x2e8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_GPIO_Init+0x1de>
 8003ede:	2304      	movs	r3, #4
 8003ee0:	e008      	b.n	8003ef4 <HAL_GPIO_Init+0x1f0>
 8003ee2:	2305      	movs	r3, #5
 8003ee4:	e006      	b.n	8003ef4 <HAL_GPIO_Init+0x1f0>
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e004      	b.n	8003ef4 <HAL_GPIO_Init+0x1f0>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e002      	b.n	8003ef4 <HAL_GPIO_Init+0x1f0>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <HAL_GPIO_Init+0x1f0>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	400a      	ands	r2, r1
 8003efa:	0092      	lsls	r2, r2, #2
 8003efc:	4093      	lsls	r3, r2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f04:	4935      	ldr	r1, [pc, #212]	@ (8003fdc <HAL_GPIO_Init+0x2d8>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f12:	4b37      	ldr	r3, [pc, #220]	@ (8003ff0 <HAL_GPIO_Init+0x2ec>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	035b      	lsls	r3, r3, #13
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f36:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff0 <HAL_GPIO_Init+0x2ec>)
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff0 <HAL_GPIO_Init+0x2ec>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	43da      	mvns	r2, r3
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	2380      	movs	r3, #128	@ 0x80
 8003f52:	039b      	lsls	r3, r3, #14
 8003f54:	4013      	ands	r3, r2
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f60:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <HAL_GPIO_Init+0x2ec>)
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003f66:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <HAL_GPIO_Init+0x2ec>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4013      	ands	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	2380      	movs	r3, #128	@ 0x80
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <HAL_GPIO_Init+0x2ec>)
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003f90:	4b17      	ldr	r3, [pc, #92]	@ (8003ff0 <HAL_GPIO_Init+0x2ec>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	025b      	lsls	r3, r3, #9
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <HAL_GPIO_Init+0x2ec>)
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	40da      	lsrs	r2, r3
 8003fc8:	1e13      	subs	r3, r2, #0
 8003fca:	d000      	beq.n	8003fce <HAL_GPIO_Init+0x2ca>
 8003fcc:	e6a2      	b.n	8003d14 <HAL_GPIO_Init+0x10>
  } 
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	46c0      	nop			@ (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b006      	add	sp, #24
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	48000400 	.word	0x48000400
 8003fe4:	48000800 	.word	0x48000800
 8003fe8:	48000c00 	.word	0x48000c00
 8003fec:	48001000 	.word	0x48001000
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	000a      	movs	r2, r1
 8003ffe:	1cbb      	adds	r3, r7, #2
 8004000:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	1cba      	adds	r2, r7, #2
 8004008:	8812      	ldrh	r2, [r2, #0]
 800400a:	4013      	ands	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800400e:	230f      	movs	r3, #15
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e003      	b.n	8004020 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004018:	230f      	movs	r3, #15
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004020:	230f      	movs	r3, #15
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	781b      	ldrb	r3, [r3, #0]
  }
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b004      	add	sp, #16
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	0008      	movs	r0, r1
 8004038:	0011      	movs	r1, r2
 800403a:	1cbb      	adds	r3, r7, #2
 800403c:	1c02      	adds	r2, r0, #0
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	1c7b      	adds	r3, r7, #1
 8004042:	1c0a      	adds	r2, r1, #0
 8004044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004046:	1c7b      	adds	r3, r7, #1
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800404e:	1cbb      	adds	r3, r7, #2
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004056:	e003      	b.n	8004060 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004058:	1cbb      	adds	r3, r7, #2
 800405a:	881a      	ldrh	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004060:	46c0      	nop			@ (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	0002      	movs	r2, r0
 8004070:	1dbb      	adds	r3, r7, #6
 8004072:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004074:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	1dba      	adds	r2, r7, #6
 800407a:	8812      	ldrh	r2, [r2, #0]
 800407c:	4013      	ands	r3, r2
 800407e:	d008      	beq.n	8004092 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004080:	4b06      	ldr	r3, [pc, #24]	@ (800409c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004082:	1dba      	adds	r2, r7, #6
 8004084:	8812      	ldrh	r2, [r2, #0]
 8004086:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004088:	1dbb      	adds	r3, r7, #6
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	0018      	movs	r0, r3
 800408e:	f008 ff31 	bl	800cef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	40010400 	.word	0x40010400

080040a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0e4      	b.n	800427c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a73      	ldr	r2, [pc, #460]	@ (8004284 <HAL_PCD_Init+0x1e4>)
 80040b6:	5c9b      	ldrb	r3, [r3, r2]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	23a4      	movs	r3, #164	@ 0xa4
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	2100      	movs	r1, #0
 80040c6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f008 fbb6 	bl	800c83c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004284 <HAL_PCD_Init+0x1e4>)
 80040d4:	2103      	movs	r1, #3
 80040d6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0018      	movs	r0, r3
 80040de:	f004 fbdd 	bl	800889c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e2:	230f      	movs	r3, #15
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e047      	b.n	800417c <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040ec:	200f      	movs	r0, #15
 80040ee:	183b      	adds	r3, r7, r0
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	0013      	movs	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	18cb      	adds	r3, r1, r3
 80040fe:	3311      	adds	r3, #17
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004104:	183b      	adds	r3, r7, r0
 8004106:	781a      	ldrb	r2, [r3, #0]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	0013      	movs	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	189b      	adds	r3, r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	18cb      	adds	r3, r1, r3
 8004114:	3310      	adds	r3, #16
 8004116:	183a      	adds	r2, r7, r0
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800411c:	183b      	adds	r3, r7, r0
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	0013      	movs	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	189b      	adds	r3, r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	18cb      	adds	r3, r1, r3
 800412c:	3313      	adds	r3, #19
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004132:	183b      	adds	r3, r7, r0
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	0013      	movs	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	189b      	adds	r3, r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	18cb      	adds	r3, r1, r3
 8004142:	3320      	adds	r3, #32
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004148:	183b      	adds	r3, r7, r0
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	0013      	movs	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	189b      	adds	r3, r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	18cb      	adds	r3, r1, r3
 8004158:	3324      	adds	r3, #36	@ 0x24
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800415e:	183b      	adds	r3, r7, r0
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	0013      	movs	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	189b      	adds	r3, r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	2200      	movs	r2, #0
 8004170:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004172:	183b      	adds	r3, r7, r0
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	183b      	adds	r3, r7, r0
 8004178:	3201      	adds	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	791b      	ldrb	r3, [r3, #4]
 8004180:	210f      	movs	r1, #15
 8004182:	187a      	adds	r2, r7, r1
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3b0      	bcc.n	80040ec <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418a:	187b      	adds	r3, r7, r1
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e056      	b.n	8004240 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004192:	240f      	movs	r4, #15
 8004194:	193b      	adds	r3, r7, r4
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	2352      	movs	r3, #82	@ 0x52
 800419c:	33ff      	adds	r3, #255	@ 0xff
 800419e:	0019      	movs	r1, r3
 80041a0:	0013      	movs	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	189b      	adds	r3, r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	18c3      	adds	r3, r0, r3
 80041aa:	185b      	adds	r3, r3, r1
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041b0:	193b      	adds	r3, r7, r4
 80041b2:	781a      	ldrb	r2, [r3, #0]
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	23a8      	movs	r3, #168	@ 0xa8
 80041b8:	0059      	lsls	r1, r3, #1
 80041ba:	0013      	movs	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	18c3      	adds	r3, r0, r3
 80041c4:	185b      	adds	r3, r3, r1
 80041c6:	193a      	adds	r2, r7, r4
 80041c8:	7812      	ldrb	r2, [r2, #0]
 80041ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041cc:	193b      	adds	r3, r7, r4
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	2354      	movs	r3, #84	@ 0x54
 80041d4:	33ff      	adds	r3, #255	@ 0xff
 80041d6:	0019      	movs	r1, r3
 80041d8:	0013      	movs	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	189b      	adds	r3, r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	18c3      	adds	r3, r0, r3
 80041e2:	185b      	adds	r3, r3, r1
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041e8:	193b      	adds	r3, r7, r4
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	23b0      	movs	r3, #176	@ 0xb0
 80041f0:	0059      	lsls	r1, r3, #1
 80041f2:	0013      	movs	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	18c3      	adds	r3, r0, r3
 80041fc:	185b      	adds	r3, r3, r1
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004202:	193b      	adds	r3, r7, r4
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	23b2      	movs	r3, #178	@ 0xb2
 800420a:	0059      	lsls	r1, r3, #1
 800420c:	0013      	movs	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	189b      	adds	r3, r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	18c3      	adds	r3, r0, r3
 8004216:	185b      	adds	r3, r3, r1
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800421c:	193b      	adds	r3, r7, r4
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	23b4      	movs	r3, #180	@ 0xb4
 8004224:	0059      	lsls	r1, r3, #1
 8004226:	0013      	movs	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	189b      	adds	r3, r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	18c3      	adds	r3, r0, r3
 8004230:	185b      	adds	r3, r3, r1
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004236:	193b      	adds	r3, r7, r4
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	193b      	adds	r3, r7, r4
 800423c:	3201      	adds	r2, #1
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	791b      	ldrb	r3, [r3, #4]
 8004244:	220f      	movs	r2, #15
 8004246:	18ba      	adds	r2, r7, r2
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d3a1      	bcc.n	8004192 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6859      	ldr	r1, [r3, #4]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	f004 fb3a 	bl	80088d0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a07      	ldr	r2, [pc, #28]	@ (8004284 <HAL_PCD_Init+0x1e4>)
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	7a9b      	ldrb	r3, [r3, #10]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d103      	bne.n	800427a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0018      	movs	r0, r3
 8004276:	f001 fd1f 	bl	8005cb8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	b005      	add	sp, #20
 8004282:	bd90      	pop	{r4, r7, pc}
 8004284:	00000291 	.word	0x00000291

08004288 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	23a4      	movs	r3, #164	@ 0xa4
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	5cd3      	ldrb	r3, [r2, r3]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_PCD_Start+0x18>
 800429c:	2302      	movs	r3, #2
 800429e:	e014      	b.n	80042ca <HAL_PCD_Start+0x42>
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	23a4      	movs	r3, #164	@ 0xa4
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	2101      	movs	r1, #1
 80042a8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f004 fade 	bl	8008870 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f006 fad3 	bl	800a864 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	23a4      	movs	r3, #164	@ 0xa4
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	2100      	movs	r1, #0
 80042c6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b002      	add	sp, #8
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f006 fad5 	bl	800a890 <USB_ReadInterrupts>
 80042e6:	0003      	movs	r3, r0
 80042e8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	4013      	ands	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 fb60 	bl	80049bc <PCD_EP_ISR_Handler>

    return;
 80042fc:	e11d      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	2380      	movs	r3, #128	@ 0x80
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4013      	ands	r3, r2
 8004306:	d015      	beq.n	8004334 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2244      	movs	r2, #68	@ 0x44
 800430e:	5a9b      	ldrh	r3, [r3, r2]
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	498a      	ldr	r1, [pc, #552]	@ (8004540 <HAL_PCD_IRQHandler+0x26c>)
 8004318:	400a      	ands	r2, r1
 800431a:	b291      	uxth	r1, r2
 800431c:	2244      	movs	r2, #68	@ 0x44
 800431e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f008 fb15 	bl	800c952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2100      	movs	r1, #0
 800432c:	0018      	movs	r0, r3
 800432e:	f000 f915 	bl	800455c <HAL_PCD_SetAddress>

    return;
 8004332:	e102      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	01db      	lsls	r3, r3, #7
 800433a:	4013      	ands	r3, r2
 800433c:	d00c      	beq.n	8004358 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2244      	movs	r2, #68	@ 0x44
 8004344:	5a9b      	ldrh	r3, [r3, r2]
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	497d      	ldr	r1, [pc, #500]	@ (8004544 <HAL_PCD_IRQHandler+0x270>)
 800434e:	400a      	ands	r2, r1
 8004350:	b291      	uxth	r1, r2
 8004352:	2244      	movs	r2, #68	@ 0x44
 8004354:	5299      	strh	r1, [r3, r2]

    return;
 8004356:	e0f0      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	4013      	ands	r3, r2
 8004360:	d00c      	beq.n	800437c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2244      	movs	r2, #68	@ 0x44
 8004368:	5a9b      	ldrh	r3, [r3, r2]
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4975      	ldr	r1, [pc, #468]	@ (8004548 <HAL_PCD_IRQHandler+0x274>)
 8004372:	400a      	ands	r2, r1
 8004374:	b291      	uxth	r1, r2
 8004376:	2244      	movs	r2, #68	@ 0x44
 8004378:	5299      	strh	r1, [r3, r2]

    return;
 800437a:	e0de      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	2380      	movs	r3, #128	@ 0x80
 8004380:	015b      	lsls	r3, r3, #5
 8004382:	4013      	ands	r3, r2
 8004384:	d038      	beq.n	80043f8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	5a9b      	ldrh	r3, [r3, r2]
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2104      	movs	r1, #4
 8004396:	438a      	bics	r2, r1
 8004398:	b291      	uxth	r1, r2
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2240      	movs	r2, #64	@ 0x40
 80043a4:	5a9b      	ldrh	r3, [r3, r2]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2108      	movs	r1, #8
 80043ae:	438a      	bics	r2, r1
 80043b0:	b291      	uxth	r1, r2
 80043b2:	2240      	movs	r2, #64	@ 0x40
 80043b4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	23b2      	movs	r3, #178	@ 0xb2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	5cd3      	ldrb	r3, [r2, r3]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d109      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	23b2      	movs	r3, #178	@ 0xb2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	2100      	movs	r1, #0
 80043ca:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2100      	movs	r1, #0
 80043d0:	0018      	movs	r0, r3
 80043d2:	f001 fc9b 	bl	8005d0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0018      	movs	r0, r3
 80043da:	f008 fafb 	bl	800c9d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2244      	movs	r2, #68	@ 0x44
 80043e4:	5a9b      	ldrh	r3, [r3, r2]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4957      	ldr	r1, [pc, #348]	@ (800454c <HAL_PCD_IRQHandler+0x278>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	b291      	uxth	r1, r2
 80043f2:	2244      	movs	r2, #68	@ 0x44
 80043f4:	5299      	strh	r1, [r3, r2]

    return;
 80043f6:	e0a0      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	2380      	movs	r3, #128	@ 0x80
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4013      	ands	r3, r2
 8004400:	d028      	beq.n	8004454 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2240      	movs	r2, #64	@ 0x40
 8004408:	5a9b      	ldrh	r3, [r3, r2]
 800440a:	b29a      	uxth	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2108      	movs	r1, #8
 8004412:	430a      	orrs	r2, r1
 8004414:	b291      	uxth	r1, r2
 8004416:	2240      	movs	r2, #64	@ 0x40
 8004418:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2244      	movs	r2, #68	@ 0x44
 8004420:	5a9b      	ldrh	r3, [r3, r2]
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4949      	ldr	r1, [pc, #292]	@ (8004550 <HAL_PCD_IRQHandler+0x27c>)
 800442a:	400a      	ands	r2, r1
 800442c:	b291      	uxth	r1, r2
 800442e:	2244      	movs	r2, #68	@ 0x44
 8004430:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2240      	movs	r2, #64	@ 0x40
 8004438:	5a9b      	ldrh	r3, [r3, r2]
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2104      	movs	r1, #4
 8004442:	430a      	orrs	r2, r1
 8004444:	b291      	uxth	r1, r2
 8004446:	2240      	movs	r2, #64	@ 0x40
 8004448:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f008 faa5 	bl	800c99c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004452:	e072      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2280      	movs	r2, #128	@ 0x80
 8004458:	4013      	ands	r3, r2
 800445a:	d046      	beq.n	80044ea <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2244      	movs	r2, #68	@ 0x44
 8004462:	5a9b      	ldrh	r3, [r3, r2]
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2180      	movs	r1, #128	@ 0x80
 800446c:	438a      	bics	r2, r1
 800446e:	b291      	uxth	r1, r2
 8004470:	2244      	movs	r2, #68	@ 0x44
 8004472:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	23b2      	movs	r3, #178	@ 0xb2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	5cd3      	ldrb	r3, [r2, r3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d12f      	bne.n	80044e0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2240      	movs	r2, #64	@ 0x40
 8004486:	5a9b      	ldrh	r3, [r3, r2]
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2104      	movs	r1, #4
 8004490:	430a      	orrs	r2, r1
 8004492:	b291      	uxth	r1, r2
 8004494:	2240      	movs	r2, #64	@ 0x40
 8004496:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2240      	movs	r2, #64	@ 0x40
 800449e:	5a9b      	ldrh	r3, [r3, r2]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2108      	movs	r1, #8
 80044a8:	430a      	orrs	r2, r1
 80044aa:	b291      	uxth	r1, r2
 80044ac:	2240      	movs	r2, #64	@ 0x40
 80044ae:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	23b2      	movs	r3, #178	@ 0xb2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	2101      	movs	r1, #1
 80044b8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2254      	movs	r2, #84	@ 0x54
 80044c0:	5a9b      	ldrh	r3, [r3, r2]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	223c      	movs	r2, #60	@ 0x3c
 80044c8:	4013      	ands	r3, r2
 80044ca:	0019      	movs	r1, r3
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	23b3      	movs	r3, #179	@ 0xb3
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2101      	movs	r1, #1
 80044d8:	0018      	movs	r0, r3
 80044da:	f001 fc17 	bl	8005d0c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80044de:	e02c      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f008 fa5a 	bl	800c99c <HAL_PCD_SuspendCallback>
    return;
 80044e8:	e027      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	2380      	movs	r3, #128	@ 0x80
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4013      	ands	r3, r2
 80044f2:	d010      	beq.n	8004516 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2244      	movs	r2, #68	@ 0x44
 80044fa:	5a9b      	ldrh	r3, [r3, r2]
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4914      	ldr	r1, [pc, #80]	@ (8004554 <HAL_PCD_IRQHandler+0x280>)
 8004504:	400a      	ands	r2, r1
 8004506:	b291      	uxth	r1, r2
 8004508:	2244      	movs	r2, #68	@ 0x44
 800450a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0018      	movs	r0, r3
 8004510:	f008 fa10 	bl	800c934 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004514:	e011      	b.n	800453a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4013      	ands	r3, r2
 800451e:	d00c      	beq.n	800453a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2244      	movs	r2, #68	@ 0x44
 8004526:	5a9b      	ldrh	r3, [r3, r2]
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	490a      	ldr	r1, [pc, #40]	@ (8004558 <HAL_PCD_IRQHandler+0x284>)
 8004530:	400a      	ands	r2, r1
 8004532:	b291      	uxth	r1, r2
 8004534:	2244      	movs	r2, #68	@ 0x44
 8004536:	5299      	strh	r1, [r3, r2]

    return;
 8004538:	46c0      	nop			@ (mov r8, r8)
  }
}
 800453a:	46bd      	mov	sp, r7
 800453c:	b004      	add	sp, #16
 800453e:	bd80      	pop	{r7, pc}
 8004540:	fffffbff 	.word	0xfffffbff
 8004544:	ffffbfff 	.word	0xffffbfff
 8004548:	ffffdfff 	.word	0xffffdfff
 800454c:	ffffefff 	.word	0xffffefff
 8004550:	fffff7ff 	.word	0xfffff7ff
 8004554:	fffffdff 	.word	0xfffffdff
 8004558:	fffffeff 	.word	0xfffffeff

0800455c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	000a      	movs	r2, r1
 8004566:	1cfb      	adds	r3, r7, #3
 8004568:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	23a4      	movs	r3, #164	@ 0xa4
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	5cd3      	ldrb	r3, [r2, r3]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_PCD_SetAddress+0x1e>
 8004576:	2302      	movs	r3, #2
 8004578:	e016      	b.n	80045a8 <HAL_PCD_SetAddress+0x4c>
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	23a4      	movs	r3, #164	@ 0xa4
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	2101      	movs	r1, #1
 8004582:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	1cfa      	adds	r2, r7, #3
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	1cfb      	adds	r3, r7, #3
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	0019      	movs	r1, r3
 8004596:	0010      	movs	r0, r2
 8004598:	f006 f950 	bl	800a83c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	23a4      	movs	r3, #164	@ 0xa4
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	2100      	movs	r1, #0
 80045a4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	000c      	movs	r4, r1
 80045ba:	0010      	movs	r0, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	1cfb      	adds	r3, r7, #3
 80045c0:	1c22      	adds	r2, r4, #0
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	003b      	movs	r3, r7
 80045c6:	1c02      	adds	r2, r0, #0
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	1cbb      	adds	r3, r7, #2
 80045cc:	1c0a      	adds	r2, r1, #0
 80045ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045d0:	230b      	movs	r3, #11
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045d8:	1cfb      	adds	r3, r7, #3
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	da0f      	bge.n	8004602 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e2:	1cfb      	adds	r3, r7, #3
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2207      	movs	r2, #7
 80045e8:	401a      	ands	r2, r3
 80045ea:	0013      	movs	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	3310      	adds	r3, #16
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	18d3      	adds	r3, r2, r3
 80045f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	705a      	strb	r2, [r3, #1]
 8004600:	e00f      	b.n	8004622 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004602:	1cfb      	adds	r3, r7, #3
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2207      	movs	r2, #7
 8004608:	401a      	ands	r2, r3
 800460a:	0013      	movs	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	189b      	adds	r3, r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	3351      	adds	r3, #81	@ 0x51
 8004614:	33ff      	adds	r3, #255	@ 0xff
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004622:	1cfb      	adds	r3, r7, #3
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2207      	movs	r2, #7
 8004628:	4013      	ands	r3, r2
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004630:	003b      	movs	r3, r7
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1cba      	adds	r2, r7, #2
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004640:	1cbb      	adds	r3, r7, #2
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d102      	bne.n	800464e <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	23a4      	movs	r3, #164	@ 0xa4
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	5cd3      	ldrb	r3, [r2, r3]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_PCD_EP_Open+0xae>
 800465a:	2302      	movs	r3, #2
 800465c:	e013      	b.n	8004686 <HAL_PCD_EP_Open+0xd6>
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	23a4      	movs	r3, #164	@ 0xa4
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	2101      	movs	r1, #1
 8004666:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	0011      	movs	r1, r2
 8004670:	0018      	movs	r0, r3
 8004672:	f004 f949 	bl	8008908 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	23a4      	movs	r3, #164	@ 0xa4
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	2100      	movs	r1, #0
 800467e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004680:	230b      	movs	r3, #11
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	781b      	ldrb	r3, [r3, #0]
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b005      	add	sp, #20
 800468c:	bd90      	pop	{r4, r7, pc}

0800468e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	000a      	movs	r2, r1
 8004698:	1cfb      	adds	r3, r7, #3
 800469a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800469c:	1cfb      	adds	r3, r7, #3
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	b25b      	sxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da0f      	bge.n	80046c6 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a6:	1cfb      	adds	r3, r7, #3
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2207      	movs	r2, #7
 80046ac:	401a      	ands	r2, r3
 80046ae:	0013      	movs	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	3310      	adds	r3, #16
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	18d3      	adds	r3, r2, r3
 80046bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	705a      	strb	r2, [r3, #1]
 80046c4:	e00f      	b.n	80046e6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c6:	1cfb      	adds	r3, r7, #3
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2207      	movs	r2, #7
 80046cc:	401a      	ands	r2, r3
 80046ce:	0013      	movs	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	189b      	adds	r3, r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	3351      	adds	r3, #81	@ 0x51
 80046d8:	33ff      	adds	r3, #255	@ 0xff
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e6:	1cfb      	adds	r3, r7, #3
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2207      	movs	r2, #7
 80046ec:	4013      	ands	r3, r2
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	23a4      	movs	r3, #164	@ 0xa4
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_PCD_EP_Close+0x76>
 8004700:	2302      	movs	r3, #2
 8004702:	e011      	b.n	8004728 <HAL_PCD_EP_Close+0x9a>
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	23a4      	movs	r3, #164	@ 0xa4
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	2101      	movs	r1, #1
 800470c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	0011      	movs	r1, r2
 8004716:	0018      	movs	r0, r3
 8004718:	f004 fc9e 	bl	8009058 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	23a4      	movs	r3, #164	@ 0xa4
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	2100      	movs	r1, #0
 8004724:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b004      	add	sp, #16
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	200b      	movs	r0, #11
 800473e:	183b      	adds	r3, r7, r0
 8004740:	1c0a      	adds	r2, r1, #0
 8004742:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004744:	0001      	movs	r1, r0
 8004746:	187b      	adds	r3, r7, r1
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2207      	movs	r2, #7
 800474c:	401a      	ands	r2, r3
 800474e:	0013      	movs	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	189b      	adds	r3, r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	3351      	adds	r3, #81	@ 0x51
 8004758:	33ff      	adds	r3, #255	@ 0xff
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	18d3      	adds	r3, r2, r3
 800475e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2200      	movs	r2, #0
 8004770:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004778:	187b      	adds	r3, r7, r1
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2207      	movs	r2, #7
 800477e:	4013      	ands	r3, r2
 8004780:	b2da      	uxtb	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	0011      	movs	r1, r2
 800478e:	0018      	movs	r0, r3
 8004790:	f004 fe22 	bl	80093d8 <USB_EPStartXfer>

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b006      	add	sp, #24
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	000a      	movs	r2, r1
 80047a8:	1cfb      	adds	r3, r7, #3
 80047aa:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047ac:	1cfb      	adds	r3, r7, #3
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2207      	movs	r2, #7
 80047b2:	401a      	ands	r2, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	23b6      	movs	r3, #182	@ 0xb6
 80047b8:	0059      	lsls	r1, r3, #1
 80047ba:	0013      	movs	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	18c3      	adds	r3, r0, r3
 80047c4:	185b      	adds	r3, r3, r1
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b002      	add	sp, #8
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	200b      	movs	r0, #11
 80047de:	183b      	adds	r3, r7, r0
 80047e0:	1c0a      	adds	r2, r1, #0
 80047e2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e4:	183b      	adds	r3, r7, r0
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2207      	movs	r2, #7
 80047ea:	401a      	ands	r2, r3
 80047ec:	0013      	movs	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	189b      	adds	r3, r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	3310      	adds	r3, #16
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	18d3      	adds	r3, r2, r3
 80047fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	2101      	movs	r1, #1
 800480e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2201      	movs	r2, #1
 8004820:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004822:	183b      	adds	r3, r7, r0
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2207      	movs	r2, #7
 8004828:	4013      	ands	r3, r2
 800482a:	b2da      	uxtb	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	0011      	movs	r1, r2
 8004838:	0018      	movs	r0, r3
 800483a:	f004 fdcd 	bl	80093d8 <USB_EPStartXfer>

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b006      	add	sp, #24
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	000a      	movs	r2, r1
 8004852:	1cfb      	adds	r3, r7, #3
 8004854:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004856:	1cfb      	adds	r3, r7, #3
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2207      	movs	r2, #7
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	7912      	ldrb	r2, [r2, #4]
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e046      	b.n	80048f8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800486a:	1cfb      	adds	r3, r7, #3
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b25b      	sxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	da0f      	bge.n	8004894 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004874:	1cfb      	adds	r3, r7, #3
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2207      	movs	r2, #7
 800487a:	401a      	ands	r2, r3
 800487c:	0013      	movs	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	189b      	adds	r3, r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	3310      	adds	r3, #16
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	18d3      	adds	r3, r2, r3
 800488a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	705a      	strb	r2, [r3, #1]
 8004892:	e00d      	b.n	80048b0 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004894:	1cfb      	adds	r3, r7, #3
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	0013      	movs	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	189b      	adds	r3, r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	3351      	adds	r3, #81	@ 0x51
 80048a2:	33ff      	adds	r3, #255	@ 0xff
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	18d3      	adds	r3, r2, r3
 80048a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b6:	1cfb      	adds	r3, r7, #3
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2207      	movs	r2, #7
 80048bc:	4013      	ands	r3, r2
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	23a4      	movs	r3, #164	@ 0xa4
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	5cd3      	ldrb	r3, [r2, r3]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_PCD_EP_SetStall+0x8c>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e011      	b.n	80048f8 <HAL_PCD_EP_SetStall+0xb0>
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	23a4      	movs	r3, #164	@ 0xa4
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	2101      	movs	r1, #1
 80048dc:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	0011      	movs	r1, r2
 80048e6:	0018      	movs	r0, r3
 80048e8:	f005 fea6 	bl	800a638 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	23a4      	movs	r3, #164	@ 0xa4
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	2100      	movs	r1, #0
 80048f4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b004      	add	sp, #16
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	000a      	movs	r2, r1
 800490a:	1cfb      	adds	r3, r7, #3
 800490c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800490e:	1cfb      	adds	r3, r7, #3
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	220f      	movs	r2, #15
 8004914:	4013      	ands	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	7912      	ldrb	r2, [r2, #4]
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e048      	b.n	80049b4 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004922:	1cfb      	adds	r3, r7, #3
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b25b      	sxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	da0f      	bge.n	800494c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492c:	1cfb      	adds	r3, r7, #3
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2207      	movs	r2, #7
 8004932:	401a      	ands	r2, r3
 8004934:	0013      	movs	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	189b      	adds	r3, r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	3310      	adds	r3, #16
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	18d3      	adds	r3, r2, r3
 8004942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	705a      	strb	r2, [r3, #1]
 800494a:	e00f      	b.n	800496c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800494c:	1cfb      	adds	r3, r7, #3
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2207      	movs	r2, #7
 8004952:	401a      	ands	r2, r3
 8004954:	0013      	movs	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	189b      	adds	r3, r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	3351      	adds	r3, #81	@ 0x51
 800495e:	33ff      	adds	r3, #255	@ 0xff
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	18d3      	adds	r3, r2, r3
 8004964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004972:	1cfb      	adds	r3, r7, #3
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2207      	movs	r2, #7
 8004978:	4013      	ands	r3, r2
 800497a:	b2da      	uxtb	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	23a4      	movs	r3, #164	@ 0xa4
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	5cd3      	ldrb	r3, [r2, r3]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_PCD_EP_ClrStall+0x90>
 800498c:	2302      	movs	r3, #2
 800498e:	e011      	b.n	80049b4 <HAL_PCD_EP_ClrStall+0xb4>
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	23a4      	movs	r3, #164	@ 0xa4
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	2101      	movs	r1, #1
 8004998:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	0011      	movs	r1, r2
 80049a2:	0018      	movs	r0, r3
 80049a4:	f005 fe98 	bl	800a6d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	23a4      	movs	r3, #164	@ 0xa4
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	2100      	movs	r1, #0
 80049b0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b004      	add	sp, #16
 80049ba:	bd80      	pop	{r7, pc}

080049bc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049bc:	b5b0      	push	{r4, r5, r7, lr}
 80049be:	b096      	sub	sp, #88	@ 0x58
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049c4:	f000 fbea 	bl	800519c <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	2048      	movs	r0, #72	@ 0x48
 80049ce:	183b      	adds	r3, r7, r0
 80049d0:	2144      	movs	r1, #68	@ 0x44
 80049d2:	5a52      	ldrh	r2, [r2, r1]
 80049d4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049d6:	183b      	adds	r3, r7, r0
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	244f      	movs	r4, #79	@ 0x4f
 80049de:	193b      	adds	r3, r7, r4
 80049e0:	210f      	movs	r1, #15
 80049e2:	400a      	ands	r2, r1
 80049e4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80049e6:	193b      	adds	r3, r7, r4
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d000      	beq.n	80049f0 <PCD_EP_ISR_Handler+0x34>
 80049ee:	e18d      	b.n	8004d0c <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049f0:	183b      	adds	r3, r7, r0
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	2210      	movs	r2, #16
 80049f6:	4013      	ands	r3, r2
 80049f8:	d152      	bne.n	8004aa0 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	200e      	movs	r0, #14
 8004a04:	183b      	adds	r3, r7, r0
 8004a06:	49ba      	ldr	r1, [pc, #744]	@ (8004cf0 <PCD_EP_ISR_Handler+0x334>)
 8004a08:	400a      	ands	r2, r1
 8004a0a:	801a      	strh	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	183a      	adds	r2, r7, r0
 8004a12:	8812      	ldrh	r2, [r2, #0]
 8004a14:	49b7      	ldr	r1, [pc, #732]	@ (8004cf4 <PCD_EP_ISR_Handler+0x338>)
 8004a16:	430a      	orrs	r2, r1
 8004a18:	b292      	uxth	r2, r2
 8004a1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3310      	adds	r3, #16
 8004a20:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2250      	movs	r2, #80	@ 0x50
 8004a28:	5a9b      	ldrh	r3, [r3, r2]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	001a      	movs	r2, r3
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	18d2      	adds	r2, r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	18d3      	adds	r3, r2, r3
 8004a3c:	4aae      	ldr	r2, [pc, #696]	@ (8004cf8 <PCD_EP_ISR_Handler+0x33c>)
 8004a3e:	4694      	mov	ip, r2
 8004a40:	4463      	add	r3, ip
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	059b      	lsls	r3, r3, #22
 8004a46:	0d9a      	lsrs	r2, r3, #22
 8004a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	18d2      	adds	r2, r2, r3
 8004a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a58:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f007 ff4a 	bl	800c8f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	7b1b      	ldrb	r3, [r3, #12]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <PCD_EP_ISR_Handler+0xb6>
 8004a6e:	f000 fb95 	bl	800519c <PCD_EP_ISR_Handler+0x7e0>
 8004a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <PCD_EP_ISR_Handler+0xc2>
 8004a7a:	f000 fb8f 	bl	800519c <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	7b1b      	ldrb	r3, [r3, #12]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2280      	movs	r2, #128	@ 0x80
 8004a86:	4252      	negs	r2, r2
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0011      	movs	r1, r2
 8004a92:	224c      	movs	r2, #76	@ 0x4c
 8004a94:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	731a      	strb	r2, [r3, #12]
 8004a9c:	f000 fb7e 	bl	800519c <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3351      	adds	r3, #81	@ 0x51
 8004aa4:	33ff      	adds	r3, #255	@ 0xff
 8004aa6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	214c      	movs	r1, #76	@ 0x4c
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	8812      	ldrh	r2, [r2, #0]
 8004ab2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004ab4:	187b      	adds	r3, r7, r1
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	2380      	movs	r3, #128	@ 0x80
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	4013      	ands	r3, r2
 8004abe:	d037      	beq.n	8004b30 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2250      	movs	r2, #80	@ 0x50
 8004ac6:	5a9b      	ldrh	r3, [r3, r2]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	001a      	movs	r2, r3
 8004acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	18d2      	adds	r2, r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	18d3      	adds	r3, r2, r3
 8004ada:	4a88      	ldr	r2, [pc, #544]	@ (8004cfc <PCD_EP_ISR_Handler+0x340>)
 8004adc:	4694      	mov	ip, r2
 8004ade:	4463      	add	r3, ip
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	059b      	lsls	r3, r3, #22
 8004ae4:	0d9a      	lsrs	r2, r3, #22
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	22a6      	movs	r2, #166	@ 0xa6
 8004af2:	0092      	lsls	r2, r2, #2
 8004af4:	1899      	adds	r1, r3, r2
 8004af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004afc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f005 ff1e 	bl	800a940 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	2010      	movs	r0, #16
 8004b0e:	183b      	adds	r3, r7, r0
 8004b10:	497b      	ldr	r1, [pc, #492]	@ (8004d00 <PCD_EP_ISR_Handler+0x344>)
 8004b12:	400a      	ands	r2, r1
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	183a      	adds	r2, r7, r0
 8004b1c:	8812      	ldrh	r2, [r2, #0]
 8004b1e:	2180      	movs	r1, #128	@ 0x80
 8004b20:	430a      	orrs	r2, r1
 8004b22:	b292      	uxth	r2, r2
 8004b24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f007 feaf 	bl	800c88c <HAL_PCD_SetupStageCallback>
 8004b2e:	e335      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b30:	234c      	movs	r3, #76	@ 0x4c
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2200      	movs	r2, #0
 8004b36:	5e9b      	ldrsh	r3, [r3, r2]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	db00      	blt.n	8004b3e <PCD_EP_ISR_Handler+0x182>
 8004b3c:	e32e      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	201e      	movs	r0, #30
 8004b48:	183b      	adds	r3, r7, r0
 8004b4a:	496d      	ldr	r1, [pc, #436]	@ (8004d00 <PCD_EP_ISR_Handler+0x344>)
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	183a      	adds	r2, r7, r0
 8004b56:	8812      	ldrh	r2, [r2, #0]
 8004b58:	2180      	movs	r1, #128	@ 0x80
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2250      	movs	r2, #80	@ 0x50
 8004b66:	5a9b      	ldrh	r3, [r3, r2]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	001a      	movs	r2, r3
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	18d2      	adds	r2, r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	18d3      	adds	r3, r2, r3
 8004b7a:	4a60      	ldr	r2, [pc, #384]	@ (8004cfc <PCD_EP_ISR_Handler+0x340>)
 8004b7c:	4694      	mov	ip, r2
 8004b7e:	4463      	add	r3, ip
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	059b      	lsls	r3, r3, #22
 8004b84:	0d9a      	lsrs	r2, r3, #22
 8004b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b88:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01a      	beq.n	8004bc8 <PCD_EP_ISR_Handler+0x20c>
 8004b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba0:	6959      	ldr	r1, [r3, #20]
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f005 fec8 	bl	800a940 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	18d2      	adds	r2, r2, r3
 8004bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bbc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f007 fe77 	bl	800c8b6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	214c      	movs	r1, #76	@ 0x4c
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	881a      	ldrh	r2, [r3, #0]
 8004bd8:	2380      	movs	r3, #128	@ 0x80
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d000      	beq.n	8004be2 <PCD_EP_ISR_Handler+0x226>
 8004be0:	e2dc      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
 8004be2:	187b      	adds	r3, r7, r1
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	23c0      	movs	r3, #192	@ 0xc0
 8004be8:	019b      	lsls	r3, r3, #6
 8004bea:	401a      	ands	r2, r3
 8004bec:	23c0      	movs	r3, #192	@ 0xc0
 8004bee:	019b      	lsls	r3, r3, #6
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d100      	bne.n	8004bf6 <PCD_EP_ISR_Handler+0x23a>
 8004bf4:	e2d2      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2250      	movs	r2, #80	@ 0x50
 8004c02:	5a9b      	ldrh	r3, [r3, r2]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	001a      	movs	r2, r3
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	189b      	adds	r3, r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4a3a      	ldr	r2, [pc, #232]	@ (8004cfc <PCD_EP_ISR_Handler+0x340>)
 8004c12:	4694      	mov	ip, r2
 8004c14:	4463      	add	r3, ip
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	059b      	lsls	r3, r3, #22
 8004c20:	0d9b      	lsrs	r3, r3, #22
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d108      	bne.n	8004c42 <PCD_EP_ISR_Handler+0x286>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf4 <PCD_EP_ISR_Handler+0x338>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	e035      	b.n	8004cae <PCD_EP_ISR_Handler+0x2f2>
 8004c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c48:	d817      	bhi.n	8004c7a <PCD_EP_ISR_Handler+0x2be>
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2201      	movs	r2, #1
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d002      	beq.n	8004c62 <PCD_EP_ISR_Handler+0x2a6>
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c5e:	3301      	adds	r3, #1
 8004c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	029b      	lsls	r3, r3, #10
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	e019      	b.n	8004cae <PCD_EP_ISR_Handler+0x2f2>
 8004c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	221f      	movs	r2, #31
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d102      	bne.n	8004c92 <PCD_EP_ISR_Handler+0x2d6>
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	029b      	lsls	r3, r3, #10
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	4a13      	ldr	r2, [pc, #76]	@ (8004cf4 <PCD_EP_ISR_Handler+0x338>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	2012      	movs	r0, #18
 8004cb8:	183b      	adds	r3, r7, r0
 8004cba:	4912      	ldr	r1, [pc, #72]	@ (8004d04 <PCD_EP_ISR_Handler+0x348>)
 8004cbc:	400a      	ands	r2, r1
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	183b      	adds	r3, r7, r0
 8004cc2:	183a      	adds	r2, r7, r0
 8004cc4:	8812      	ldrh	r2, [r2, #0]
 8004cc6:	2180      	movs	r1, #128	@ 0x80
 8004cc8:	0149      	lsls	r1, r1, #5
 8004cca:	404a      	eors	r2, r1
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	183b      	adds	r3, r7, r0
 8004cd0:	183a      	adds	r2, r7, r0
 8004cd2:	8812      	ldrh	r2, [r2, #0]
 8004cd4:	2180      	movs	r1, #128	@ 0x80
 8004cd6:	0189      	lsls	r1, r1, #6
 8004cd8:	404a      	eors	r2, r1
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	183a      	adds	r2, r7, r0
 8004ce2:	8812      	ldrh	r2, [r2, #0]
 8004ce4:	4908      	ldr	r1, [pc, #32]	@ (8004d08 <PCD_EP_ISR_Handler+0x34c>)
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e256      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	ffff8f0f 	.word	0xffff8f0f
 8004cf4:	ffff8000 	.word	0xffff8000
 8004cf8:	00000402 	.word	0x00000402
 8004cfc:	00000406 	.word	0x00000406
 8004d00:	00000f8f 	.word	0x00000f8f
 8004d04:	ffffbf8f 	.word	0xffffbf8f
 8004d08:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	001a      	movs	r2, r3
 8004d12:	204f      	movs	r0, #79	@ 0x4f
 8004d14:	183b      	adds	r3, r7, r0
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	18d2      	adds	r2, r2, r3
 8004d1c:	214c      	movs	r1, #76	@ 0x4c
 8004d1e:	187b      	adds	r3, r7, r1
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	2200      	movs	r2, #0
 8004d28:	5e9b      	ldrsh	r3, [r3, r2]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	db00      	blt.n	8004d30 <PCD_EP_ISR_Handler+0x374>
 8004d2e:	e0fa      	b.n	8004f26 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	001a      	movs	r2, r3
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	18d3      	adds	r3, r2, r3
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	244a      	movs	r4, #74	@ 0x4a
 8004d44:	193b      	adds	r3, r7, r4
 8004d46:	49d1      	ldr	r1, [pc, #836]	@ (800508c <PCD_EP_ISR_Handler+0x6d0>)
 8004d48:	400a      	ands	r2, r1
 8004d4a:	801a      	strh	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	001a      	movs	r2, r3
 8004d52:	183b      	adds	r3, r7, r0
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	193a      	adds	r2, r7, r4
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	2180      	movs	r1, #128	@ 0x80
 8004d60:	430a      	orrs	r2, r1
 8004d62:	b292      	uxth	r2, r2
 8004d64:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d66:	183b      	adds	r3, r7, r0
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	0013      	movs	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	189b      	adds	r3, r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	3351      	adds	r3, #81	@ 0x51
 8004d74:	33ff      	adds	r3, #255	@ 0xff
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	18d3      	adds	r3, r2, r3
 8004d7a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7e:	7b1b      	ldrb	r3, [r3, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d125      	bne.n	8004dd0 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2250      	movs	r2, #80	@ 0x50
 8004d8a:	5a9b      	ldrh	r3, [r3, r2]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	001a      	movs	r2, r3
 8004d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	18d2      	adds	r2, r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	18d3      	adds	r3, r2, r3
 8004d9e:	4abc      	ldr	r2, [pc, #752]	@ (8005090 <PCD_EP_ISR_Handler+0x6d4>)
 8004da0:	4694      	mov	ip, r2
 8004da2:	4463      	add	r3, ip
 8004da4:	881a      	ldrh	r2, [r3, #0]
 8004da6:	2450      	movs	r4, #80	@ 0x50
 8004da8:	193b      	adds	r3, r7, r4
 8004daa:	0592      	lsls	r2, r2, #22
 8004dac:	0d92      	lsrs	r2, r2, #22
 8004dae:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004db0:	193b      	adds	r3, r7, r4
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d100      	bne.n	8004dba <PCD_EP_ISR_Handler+0x3fe>
 8004db8:	e08d      	b.n	8004ed6 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc0:	6959      	ldr	r1, [r3, #20]
 8004dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc4:	88da      	ldrh	r2, [r3, #6]
 8004dc6:	193b      	adds	r3, r7, r4
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	f005 fdb9 	bl	800a940 <USB_ReadPMA>
 8004dce:	e082      	b.n	8004ed6 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd2:	78db      	ldrb	r3, [r3, #3]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d10c      	bne.n	8004df2 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004dd8:	2350      	movs	r3, #80	@ 0x50
 8004dda:	18fc      	adds	r4, r7, r3
 8004ddc:	234c      	movs	r3, #76	@ 0x4c
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	881a      	ldrh	r2, [r3, #0]
 8004de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 f9ec 	bl	80051c4 <HAL_PCD_EP_DB_Receive>
 8004dec:	0003      	movs	r3, r0
 8004dee:	8023      	strh	r3, [r4, #0]
 8004df0:	e071      	b.n	8004ed6 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	001a      	movs	r2, r3
 8004df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	18d3      	adds	r3, r2, r3
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	2052      	movs	r0, #82	@ 0x52
 8004e06:	183b      	adds	r3, r7, r0
 8004e08:	49a2      	ldr	r1, [pc, #648]	@ (8005094 <PCD_EP_ISR_Handler+0x6d8>)
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	001a      	movs	r2, r3
 8004e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	18d3      	adds	r3, r2, r3
 8004e1c:	183a      	adds	r2, r7, r0
 8004e1e:	8812      	ldrh	r2, [r2, #0]
 8004e20:	499d      	ldr	r1, [pc, #628]	@ (8005098 <PCD_EP_ISR_Handler+0x6dc>)
 8004e22:	430a      	orrs	r2, r1
 8004e24:	b292      	uxth	r2, r2
 8004e26:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	18d3      	adds	r3, r2, r3
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	2380      	movs	r3, #128	@ 0x80
 8004e3e:	01db      	lsls	r3, r3, #7
 8004e40:	4013      	ands	r3, r2
 8004e42:	d024      	beq.n	8004e8e <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2250      	movs	r2, #80	@ 0x50
 8004e4a:	5a9b      	ldrh	r3, [r3, r2]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	001a      	movs	r2, r3
 8004e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	18d2      	adds	r2, r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	18d3      	adds	r3, r2, r3
 8004e5e:	4a8f      	ldr	r2, [pc, #572]	@ (800509c <PCD_EP_ISR_Handler+0x6e0>)
 8004e60:	4694      	mov	ip, r2
 8004e62:	4463      	add	r3, ip
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	2450      	movs	r4, #80	@ 0x50
 8004e68:	193b      	adds	r3, r7, r4
 8004e6a:	0592      	lsls	r2, r2, #22
 8004e6c:	0d92      	lsrs	r2, r2, #22
 8004e6e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004e70:	193b      	adds	r3, r7, r4
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02e      	beq.n	8004ed6 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7e:	6959      	ldr	r1, [r3, #20]
 8004e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e82:	891a      	ldrh	r2, [r3, #8]
 8004e84:	193b      	adds	r3, r7, r4
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	f005 fd5a 	bl	800a940 <USB_ReadPMA>
 8004e8c:	e023      	b.n	8004ed6 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2250      	movs	r2, #80	@ 0x50
 8004e94:	5a9b      	ldrh	r3, [r3, r2]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	001a      	movs	r2, r3
 8004e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	18d2      	adds	r2, r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	18d3      	adds	r3, r2, r3
 8004ea8:	4a79      	ldr	r2, [pc, #484]	@ (8005090 <PCD_EP_ISR_Handler+0x6d4>)
 8004eaa:	4694      	mov	ip, r2
 8004eac:	4463      	add	r3, ip
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	2450      	movs	r4, #80	@ 0x50
 8004eb2:	193b      	adds	r3, r7, r4
 8004eb4:	0592      	lsls	r2, r2, #22
 8004eb6:	0d92      	lsrs	r2, r2, #22
 8004eb8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004eba:	193b      	adds	r3, r7, r4
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec8:	6959      	ldr	r1, [r3, #20]
 8004eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ecc:	895a      	ldrh	r2, [r3, #10]
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	f005 fd35 	bl	800a940 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	2150      	movs	r1, #80	@ 0x50
 8004edc:	187b      	adds	r3, r7, r1
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	18d2      	adds	r2, r2, r3
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	187b      	adds	r3, r7, r1
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	18d2      	adds	r2, r2, r3
 8004ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <PCD_EP_ISR_Handler+0x54c>
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	881a      	ldrh	r2, [r3, #0]
 8004f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d207      	bcs.n	8004f18 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0a:	781a      	ldrb	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	0011      	movs	r1, r2
 8004f10:	0018      	movs	r0, r3
 8004f12:	f007 fcd0 	bl	800c8b6 <HAL_PCD_DataOutStageCallback>
 8004f16:	e006      	b.n	8004f26 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f1e:	0011      	movs	r1, r2
 8004f20:	0018      	movs	r0, r3
 8004f22:	f004 fa59 	bl	80093d8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f26:	244c      	movs	r4, #76	@ 0x4c
 8004f28:	193b      	adds	r3, r7, r4
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	2280      	movs	r2, #128	@ 0x80
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d100      	bne.n	8004f34 <PCD_EP_ISR_Handler+0x578>
 8004f32:	e133      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f34:	204f      	movs	r0, #79	@ 0x4f
 8004f36:	183b      	adds	r3, r7, r0
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	0013      	movs	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	189b      	adds	r3, r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	3310      	adds	r3, #16
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	18d3      	adds	r3, r2, r3
 8004f48:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	001a      	movs	r2, r3
 8004f50:	183b      	adds	r3, r7, r0
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	18d3      	adds	r3, r2, r3
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	2542      	movs	r5, #66	@ 0x42
 8004f5e:	197b      	adds	r3, r7, r5
 8004f60:	494f      	ldr	r1, [pc, #316]	@ (80050a0 <PCD_EP_ISR_Handler+0x6e4>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	183b      	adds	r3, r7, r0
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	18d3      	adds	r3, r2, r3
 8004f74:	197a      	adds	r2, r7, r5
 8004f76:	8812      	ldrh	r2, [r2, #0]
 8004f78:	494a      	ldr	r1, [pc, #296]	@ (80050a4 <PCD_EP_ISR_Handler+0x6e8>)
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	b292      	uxth	r2, r2
 8004f7e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f82:	78db      	ldrb	r3, [r3, #3]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d000      	beq.n	8004f8a <PCD_EP_ISR_Handler+0x5ce>
 8004f88:	e0af      	b.n	80050ea <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f92:	7b1b      	ldrb	r3, [r3, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d100      	bne.n	8004f9a <PCD_EP_ISR_Handler+0x5de>
 8004f98:	e09f      	b.n	80050da <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	2240      	movs	r2, #64	@ 0x40
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d046      	beq.n	8005032 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d125      	bne.n	8004ff8 <PCD_EP_ISR_Handler+0x63c>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2250      	movs	r2, #80	@ 0x50
 8004fb8:	5a9b      	ldrh	r3, [r3, r2]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	189b      	adds	r3, r3, r2
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	00da      	lsls	r2, r3, #3
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	18d3      	adds	r3, r2, r3
 8004fce:	4a33      	ldr	r2, [pc, #204]	@ (800509c <PCD_EP_ISR_Handler+0x6e0>)
 8004fd0:	4694      	mov	ip, r2
 8004fd2:	4463      	add	r3, ip
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	059b      	lsls	r3, r3, #22
 8004fde:	0d9b      	lsrs	r3, r3, #22
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4a2d      	ldr	r2, [pc, #180]	@ (80050a4 <PCD_EP_ISR_Handler+0x6e8>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	e070      	b.n	80050da <PCD_EP_ISR_Handler+0x71e>
 8004ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d16c      	bne.n	80050da <PCD_EP_ISR_Handler+0x71e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2250      	movs	r2, #80	@ 0x50
 800500c:	5a9b      	ldrh	r3, [r3, r2]
 800500e:	b29b      	uxth	r3, r3
 8005010:	001a      	movs	r2, r3
 8005012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005014:	189b      	adds	r3, r3, r2
 8005016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	00da      	lsls	r2, r3, #3
 800501e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005020:	18d3      	adds	r3, r2, r3
 8005022:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <PCD_EP_ISR_Handler+0x6e0>)
 8005024:	4694      	mov	ip, r2
 8005026:	4463      	add	r3, ip
 8005028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800502a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502c:	2200      	movs	r2, #0
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e053      	b.n	80050da <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d133      	bne.n	80050a8 <PCD_EP_ISR_Handler+0x6ec>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	637b      	str	r3, [r7, #52]	@ 0x34
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2250      	movs	r2, #80	@ 0x50
 800504c:	5a9b      	ldrh	r3, [r3, r2]
 800504e:	b29b      	uxth	r3, r3
 8005050:	001a      	movs	r2, r3
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	189b      	adds	r3, r3, r2
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
 8005058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	00da      	lsls	r2, r3, #3
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	18d3      	adds	r3, r2, r3
 8005062:	4a0b      	ldr	r2, [pc, #44]	@ (8005090 <PCD_EP_ISR_Handler+0x6d4>)
 8005064:	4694      	mov	ip, r2
 8005066:	4463      	add	r3, ip
 8005068:	633b      	str	r3, [r7, #48]	@ 0x30
 800506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	059b      	lsls	r3, r3, #22
 8005072:	0d9b      	lsrs	r3, r3, #22
 8005074:	b29a      	uxth	r2, r3
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	801a      	strh	r2, [r3, #0]
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	4a08      	ldr	r2, [pc, #32]	@ (80050a4 <PCD_EP_ISR_Handler+0x6e8>)
 8005082:	4313      	orrs	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e026      	b.n	80050da <PCD_EP_ISR_Handler+0x71e>
 800508c:	00000f8f 	.word	0x00000f8f
 8005090:	00000406 	.word	0x00000406
 8005094:	ffff8f8f 	.word	0xffff8f8f
 8005098:	ffff80c0 	.word	0xffff80c0
 800509c:	00000402 	.word	0x00000402
 80050a0:	ffff8f0f 	.word	0xffff8f0f
 80050a4:	ffff8000 	.word	0xffff8000
 80050a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d114      	bne.n	80050da <PCD_EP_ISR_Handler+0x71e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2250      	movs	r2, #80	@ 0x50
 80050b6:	5a9b      	ldrh	r3, [r3, r2]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	001a      	movs	r2, r3
 80050bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	00da      	lsls	r2, r3, #3
 80050c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ca:	18d3      	adds	r3, r2, r3
 80050cc:	4a3b      	ldr	r2, [pc, #236]	@ (80051bc <PCD_EP_ISR_Handler+0x800>)
 80050ce:	4694      	mov	ip, r2
 80050d0:	4463      	add	r3, ip
 80050d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d6:	2200      	movs	r2, #0
 80050d8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0011      	movs	r1, r2
 80050e2:	0018      	movs	r0, r3
 80050e4:	f007 fc08 	bl	800c8f8 <HAL_PCD_DataInStageCallback>
 80050e8:	e058      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80050ea:	234c      	movs	r3, #76	@ 0x4c
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	881a      	ldrh	r2, [r3, #0]
 80050f0:	2380      	movs	r3, #128	@ 0x80
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4013      	ands	r3, r2
 80050f6:	d149      	bne.n	800518c <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2250      	movs	r2, #80	@ 0x50
 80050fe:	5a9b      	ldrh	r3, [r3, r2]
 8005100:	b29b      	uxth	r3, r3
 8005102:	001a      	movs	r2, r3
 8005104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	18d2      	adds	r2, r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	18d3      	adds	r3, r2, r3
 8005112:	4a2b      	ldr	r2, [pc, #172]	@ (80051c0 <PCD_EP_ISR_Handler+0x804>)
 8005114:	4694      	mov	ip, r2
 8005116:	4463      	add	r3, ip
 8005118:	881a      	ldrh	r2, [r3, #0]
 800511a:	2140      	movs	r1, #64	@ 0x40
 800511c:	187b      	adds	r3, r7, r1
 800511e:	0592      	lsls	r2, r2, #22
 8005120:	0d92      	lsrs	r2, r2, #22
 8005122:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005126:	699a      	ldr	r2, [r3, #24]
 8005128:	187b      	adds	r3, r7, r1
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d907      	bls.n	8005140 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8005130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	187b      	adds	r3, r7, r1
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	1ad2      	subs	r2, r2, r3
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	619a      	str	r2, [r3, #24]
 800513e:	e002      	b.n	8005146 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005142:	2200      	movs	r2, #0
 8005144:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d107      	bne.n	800515e <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800514e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0011      	movs	r1, r2
 8005156:	0018      	movs	r0, r3
 8005158:	f007 fbce 	bl	800c8f8 <HAL_PCD_DataInStageCallback>
 800515c:	e01e      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800515e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	2140      	movs	r1, #64	@ 0x40
 8005164:	187b      	adds	r3, r7, r1
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	18d2      	adds	r2, r2, r3
 800516a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800516c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800516e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	187b      	adds	r3, r7, r1
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	18d2      	adds	r2, r2, r3
 8005178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005182:	0011      	movs	r1, r2
 8005184:	0018      	movs	r0, r3
 8005186:	f004 f927 	bl	80093d8 <USB_EPStartXfer>
 800518a:	e007      	b.n	800519c <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800518c:	234c      	movs	r3, #76	@ 0x4c
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	881a      	ldrh	r2, [r3, #0]
 8005192:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 f930 	bl	80053fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2244      	movs	r2, #68	@ 0x44
 80051a2:	5a9b      	ldrh	r3, [r3, r2]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	b21b      	sxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da01      	bge.n	80051b0 <PCD_EP_ISR_Handler+0x7f4>
 80051ac:	f7ff fc0c 	bl	80049c8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	0018      	movs	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b016      	add	sp, #88	@ 0x58
 80051b8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ba:	46c0      	nop			@ (mov r8, r8)
 80051bc:	00000406 	.word	0x00000406
 80051c0:	00000402 	.word	0x00000402

080051c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b089      	sub	sp, #36	@ 0x24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	1dbb      	adds	r3, r7, #6
 80051d0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051d2:	1dbb      	adds	r3, r7, #6
 80051d4:	881a      	ldrh	r2, [r3, #0]
 80051d6:	2380      	movs	r3, #128	@ 0x80
 80051d8:	01db      	lsls	r3, r3, #7
 80051da:	4013      	ands	r3, r2
 80051dc:	d100      	bne.n	80051e0 <HAL_PCD_EP_DB_Receive+0x1c>
 80051de:	e07d      	b.n	80052dc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2250      	movs	r2, #80	@ 0x50
 80051e6:	5a9b      	ldrh	r3, [r3, r2]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	001a      	movs	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	18d2      	adds	r2, r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	18d3      	adds	r3, r2, r3
 80051fa:	4a7a      	ldr	r2, [pc, #488]	@ (80053e4 <HAL_PCD_EP_DB_Receive+0x220>)
 80051fc:	4694      	mov	ip, r2
 80051fe:	4463      	add	r3, ip
 8005200:	881a      	ldrh	r2, [r3, #0]
 8005202:	211a      	movs	r1, #26
 8005204:	187b      	adds	r3, r7, r1
 8005206:	0592      	lsls	r2, r2, #22
 8005208:	0d92      	lsrs	r2, r2, #22
 800520a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	187b      	adds	r3, r7, r1
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d307      	bcc.n	8005228 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	699a      	ldr	r2, [r3, #24]
 800521c:	187b      	adds	r3, r7, r1
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	1ad2      	subs	r2, r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	619a      	str	r2, [r3, #24]
 8005226:	e002      	b.n	800522e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2200      	movs	r2, #0
 800522c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d121      	bne.n	800527a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	001a      	movs	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	18d3      	adds	r3, r2, r3
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29a      	uxth	r2, r3
 8005248:	2018      	movs	r0, #24
 800524a:	183b      	adds	r3, r7, r0
 800524c:	4966      	ldr	r1, [pc, #408]	@ (80053e8 <HAL_PCD_EP_DB_Receive+0x224>)
 800524e:	400a      	ands	r2, r1
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	183b      	adds	r3, r7, r0
 8005254:	183a      	adds	r2, r7, r0
 8005256:	8812      	ldrh	r2, [r2, #0]
 8005258:	2180      	movs	r1, #128	@ 0x80
 800525a:	0189      	lsls	r1, r1, #6
 800525c:	404a      	eors	r2, r1
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	001a      	movs	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	18d3      	adds	r3, r2, r3
 800526e:	183a      	adds	r2, r7, r0
 8005270:	8812      	ldrh	r2, [r2, #0]
 8005272:	495e      	ldr	r1, [pc, #376]	@ (80053ec <HAL_PCD_EP_DB_Receive+0x228>)
 8005274:	430a      	orrs	r2, r1
 8005276:	b292      	uxth	r2, r2
 8005278:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800527a:	1dbb      	adds	r3, r7, #6
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	2240      	movs	r2, #64	@ 0x40
 8005280:	4013      	ands	r3, r2
 8005282:	d01a      	beq.n	80052ba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	001a      	movs	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29a      	uxth	r2, r3
 8005296:	2016      	movs	r0, #22
 8005298:	183b      	adds	r3, r7, r0
 800529a:	4955      	ldr	r1, [pc, #340]	@ (80053f0 <HAL_PCD_EP_DB_Receive+0x22c>)
 800529c:	400a      	ands	r2, r1
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	001a      	movs	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	18d3      	adds	r3, r2, r3
 80052ae:	183a      	adds	r2, r7, r0
 80052b0:	8812      	ldrh	r2, [r2, #0]
 80052b2:	4950      	ldr	r1, [pc, #320]	@ (80053f4 <HAL_PCD_EP_DB_Receive+0x230>)
 80052b4:	430a      	orrs	r2, r1
 80052b6:	b292      	uxth	r2, r2
 80052b8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80052ba:	241a      	movs	r4, #26
 80052bc:	193b      	adds	r3, r7, r4
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d100      	bne.n	80052c6 <HAL_PCD_EP_DB_Receive+0x102>
 80052c4:	e086      	b.n	80053d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6959      	ldr	r1, [r3, #20]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	891a      	ldrh	r2, [r3, #8]
 80052d2:	193b      	adds	r3, r7, r4
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	f005 fb33 	bl	800a940 <USB_ReadPMA>
 80052da:	e07b      	b.n	80053d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2250      	movs	r2, #80	@ 0x50
 80052e2:	5a9b      	ldrh	r3, [r3, r2]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	001a      	movs	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	18d2      	adds	r2, r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	18d3      	adds	r3, r2, r3
 80052f6:	4a40      	ldr	r2, [pc, #256]	@ (80053f8 <HAL_PCD_EP_DB_Receive+0x234>)
 80052f8:	4694      	mov	ip, r2
 80052fa:	4463      	add	r3, ip
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	211a      	movs	r1, #26
 8005300:	187b      	adds	r3, r7, r1
 8005302:	0592      	lsls	r2, r2, #22
 8005304:	0d92      	lsrs	r2, r2, #22
 8005306:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	187b      	adds	r3, r7, r1
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d307      	bcc.n	8005324 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	187b      	adds	r3, r7, r1
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	1ad2      	subs	r2, r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	619a      	str	r2, [r3, #24]
 8005322:	e002      	b.n	800532a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2200      	movs	r2, #0
 8005328:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d121      	bne.n	8005376 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	001a      	movs	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	18d3      	adds	r3, r2, r3
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29a      	uxth	r2, r3
 8005344:	201e      	movs	r0, #30
 8005346:	183b      	adds	r3, r7, r0
 8005348:	4927      	ldr	r1, [pc, #156]	@ (80053e8 <HAL_PCD_EP_DB_Receive+0x224>)
 800534a:	400a      	ands	r2, r1
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	183b      	adds	r3, r7, r0
 8005350:	183a      	adds	r2, r7, r0
 8005352:	8812      	ldrh	r2, [r2, #0]
 8005354:	2180      	movs	r1, #128	@ 0x80
 8005356:	0189      	lsls	r1, r1, #6
 8005358:	404a      	eors	r2, r1
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	001a      	movs	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	183a      	adds	r2, r7, r0
 800536c:	8812      	ldrh	r2, [r2, #0]
 800536e:	491f      	ldr	r1, [pc, #124]	@ (80053ec <HAL_PCD_EP_DB_Receive+0x228>)
 8005370:	430a      	orrs	r2, r1
 8005372:	b292      	uxth	r2, r2
 8005374:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005376:	1dbb      	adds	r3, r7, #6
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	2240      	movs	r2, #64	@ 0x40
 800537c:	4013      	ands	r3, r2
 800537e:	d11a      	bne.n	80053b6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	001a      	movs	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	18d3      	adds	r3, r2, r3
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29a      	uxth	r2, r3
 8005392:	201c      	movs	r0, #28
 8005394:	183b      	adds	r3, r7, r0
 8005396:	4916      	ldr	r1, [pc, #88]	@ (80053f0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005398:	400a      	ands	r2, r1
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	001a      	movs	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	18d3      	adds	r3, r2, r3
 80053aa:	183a      	adds	r2, r7, r0
 80053ac:	8812      	ldrh	r2, [r2, #0]
 80053ae:	4911      	ldr	r1, [pc, #68]	@ (80053f4 <HAL_PCD_EP_DB_Receive+0x230>)
 80053b0:	430a      	orrs	r2, r1
 80053b2:	b292      	uxth	r2, r2
 80053b4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80053b6:	241a      	movs	r4, #26
 80053b8:	193b      	adds	r3, r7, r4
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6959      	ldr	r1, [r3, #20]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	895a      	ldrh	r2, [r3, #10]
 80053cc:	193b      	adds	r3, r7, r4
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	f005 fab6 	bl	800a940 <USB_ReadPMA>
    }
  }

  return count;
 80053d4:	231a      	movs	r3, #26
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	881b      	ldrh	r3, [r3, #0]
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b009      	add	sp, #36	@ 0x24
 80053e0:	bd90      	pop	{r4, r7, pc}
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	00000402 	.word	0x00000402
 80053e8:	ffffbf8f 	.word	0xffffbf8f
 80053ec:	ffff8080 	.word	0xffff8080
 80053f0:	ffff8f8f 	.word	0xffff8f8f
 80053f4:	ffff80c0 	.word	0xffff80c0
 80053f8:	00000406 	.word	0x00000406

080053fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b0a4      	sub	sp, #144	@ 0x90
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	1dbb      	adds	r3, r7, #6
 8005408:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800540a:	1dbb      	adds	r3, r7, #6
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	2240      	movs	r2, #64	@ 0x40
 8005410:	4013      	ands	r3, r2
 8005412:	d100      	bne.n	8005416 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005414:	e1e4      	b.n	80057e0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2250      	movs	r2, #80	@ 0x50
 800541c:	5a9b      	ldrh	r3, [r3, r2]
 800541e:	b29b      	uxth	r3, r3
 8005420:	001a      	movs	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	18d2      	adds	r2, r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	18d3      	adds	r3, r2, r3
 8005430:	4ad0      	ldr	r2, [pc, #832]	@ (8005774 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005432:	4694      	mov	ip, r2
 8005434:	4463      	add	r3, ip
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	2188      	movs	r1, #136	@ 0x88
 800543a:	187b      	adds	r3, r7, r1
 800543c:	0592      	lsls	r2, r2, #22
 800543e:	0d92      	lsrs	r2, r2, #22
 8005440:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	187b      	adds	r3, r7, r1
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d907      	bls.n	800545e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	187b      	adds	r3, r7, r1
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	619a      	str	r2, [r3, #24]
 800545c:	e002      	b.n	8005464 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2200      	movs	r2, #0
 8005462:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d000      	beq.n	800546e <HAL_PCD_EP_DB_Transmit+0x72>
 800546c:	e0b5      	b.n	80055da <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d125      	bne.n	80054c2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2250      	movs	r2, #80	@ 0x50
 8005482:	5a9b      	ldrh	r3, [r3, r2]
 8005484:	b29b      	uxth	r3, r3
 8005486:	001a      	movs	r2, r3
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	189b      	adds	r3, r3, r2
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	00da      	lsls	r2, r3, #3
 8005494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005496:	18d3      	adds	r3, r2, r3
 8005498:	4ab6      	ldr	r2, [pc, #728]	@ (8005774 <HAL_PCD_EP_DB_Transmit+0x378>)
 800549a:	4694      	mov	ip, r2
 800549c:	4463      	add	r3, ip
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	059b      	lsls	r3, r3, #22
 80054a8:	0d9b      	lsrs	r3, r3, #22
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	4ab0      	ldr	r2, [pc, #704]	@ (8005778 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	e01b      	b.n	80054fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d117      	bne.n	80054fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2250      	movs	r2, #80	@ 0x50
 80054d6:	5a9b      	ldrh	r3, [r3, r2]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	001a      	movs	r2, r3
 80054dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054de:	189b      	adds	r3, r3, r2
 80054e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	00da      	lsls	r2, r3, #3
 80054e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ea:	18d3      	adds	r3, r2, r3
 80054ec:	4aa1      	ldr	r2, [pc, #644]	@ (8005774 <HAL_PCD_EP_DB_Transmit+0x378>)
 80054ee:	4694      	mov	ip, r2
 80054f0:	4463      	add	r3, ip
 80054f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	2200      	movs	r2, #0
 80054f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d125      	bne.n	8005554 <HAL_PCD_EP_DB_Transmit+0x158>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2250      	movs	r2, #80	@ 0x50
 8005514:	5a9b      	ldrh	r3, [r3, r2]
 8005516:	b29b      	uxth	r3, r3
 8005518:	001a      	movs	r2, r3
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	189b      	adds	r3, r3, r2
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	00da      	lsls	r2, r3, #3
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	18d3      	adds	r3, r2, r3
 800552a:	4a94      	ldr	r2, [pc, #592]	@ (800577c <HAL_PCD_EP_DB_Transmit+0x380>)
 800552c:	4694      	mov	ip, r2
 800552e:	4463      	add	r3, ip
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	059b      	lsls	r3, r3, #22
 800553a:	0d9b      	lsrs	r3, r3, #22
 800553c:	b29a      	uxth	r2, r3
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	4a8b      	ldr	r2, [pc, #556]	@ (8005778 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	b29a      	uxth	r2, r3
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	801a      	strh	r2, [r3, #0]
 8005552:	e018      	b.n	8005586 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d114      	bne.n	8005586 <HAL_PCD_EP_DB_Transmit+0x18a>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2250      	movs	r2, #80	@ 0x50
 8005562:	5a9b      	ldrh	r3, [r3, r2]
 8005564:	b29b      	uxth	r3, r3
 8005566:	001a      	movs	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	189b      	adds	r3, r3, r2
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	00da      	lsls	r2, r3, #3
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	18d3      	adds	r3, r2, r3
 8005578:	4a80      	ldr	r2, [pc, #512]	@ (800577c <HAL_PCD_EP_DB_Transmit+0x380>)
 800557a:	4694      	mov	ip, r2
 800557c:	4463      	add	r3, ip
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	2200      	movs	r2, #0
 8005584:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	0011      	movs	r1, r2
 800558e:	0018      	movs	r0, r3
 8005590:	f007 f9b2 	bl	800c8f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005594:	1dbb      	adds	r3, r7, #6
 8005596:	881a      	ldrh	r2, [r3, #0]
 8005598:	2380      	movs	r3, #128	@ 0x80
 800559a:	01db      	lsls	r3, r3, #7
 800559c:	4013      	ands	r3, r2
 800559e:	d100      	bne.n	80055a2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80055a0:	e308      	b.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	001a      	movs	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	18d3      	adds	r3, r2, r3
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	2016      	movs	r0, #22
 80055b6:	183b      	adds	r3, r7, r0
 80055b8:	4971      	ldr	r1, [pc, #452]	@ (8005780 <HAL_PCD_EP_DB_Transmit+0x384>)
 80055ba:	400a      	ands	r2, r1
 80055bc:	801a      	strh	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	001a      	movs	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	18d3      	adds	r3, r2, r3
 80055cc:	183a      	adds	r2, r7, r0
 80055ce:	8812      	ldrh	r2, [r2, #0]
 80055d0:	496c      	ldr	r1, [pc, #432]	@ (8005784 <HAL_PCD_EP_DB_Transmit+0x388>)
 80055d2:	430a      	orrs	r2, r1
 80055d4:	b292      	uxth	r2, r2
 80055d6:	801a      	strh	r2, [r3, #0]
 80055d8:	e2ec      	b.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055da:	1dbb      	adds	r3, r7, #6
 80055dc:	881a      	ldrh	r2, [r3, #0]
 80055de:	2380      	movs	r3, #128	@ 0x80
 80055e0:	01db      	lsls	r3, r3, #7
 80055e2:	4013      	ands	r3, r2
 80055e4:	d01a      	beq.n	800561c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	001a      	movs	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	18d3      	adds	r3, r2, r3
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	208a      	movs	r0, #138	@ 0x8a
 80055fa:	183b      	adds	r3, r7, r0
 80055fc:	4960      	ldr	r1, [pc, #384]	@ (8005780 <HAL_PCD_EP_DB_Transmit+0x384>)
 80055fe:	400a      	ands	r2, r1
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	001a      	movs	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	18d3      	adds	r3, r2, r3
 8005610:	183a      	adds	r2, r7, r0
 8005612:	8812      	ldrh	r2, [r2, #0]
 8005614:	495b      	ldr	r1, [pc, #364]	@ (8005784 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005616:	430a      	orrs	r2, r1
 8005618:	b292      	uxth	r2, r2
 800561a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2224      	movs	r2, #36	@ 0x24
 8005620:	5c9b      	ldrb	r3, [r3, r2]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d000      	beq.n	8005628 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005626:	e2c5      	b.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	2188      	movs	r1, #136	@ 0x88
 800562e:	187b      	adds	r3, r7, r1
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	18d2      	adds	r2, r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	187b      	adds	r3, r7, r1
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	18d2      	adds	r2, r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6a1a      	ldr	r2, [r3, #32]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	429a      	cmp	r2, r3
 8005650:	d30c      	bcc.n	800566c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	218c      	movs	r1, #140	@ 0x8c
 8005658:	187a      	adds	r2, r7, r1
 800565a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	187b      	adds	r3, r7, r1
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1ad2      	subs	r2, r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	621a      	str	r2, [r3, #32]
 800566a:	e01a      	b.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005674:	2388      	movs	r3, #136	@ 0x88
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	228c      	movs	r2, #140	@ 0x8c
 800567c:	18ba      	adds	r2, r7, r2
 800567e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2224      	movs	r2, #36	@ 0x24
 8005684:	2100      	movs	r1, #0
 8005686:	5499      	strb	r1, [r3, r2]
 8005688:	e00b      	b.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2224      	movs	r2, #36	@ 0x24
 800568e:	2100      	movs	r1, #0
 8005690:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	228c      	movs	r2, #140	@ 0x8c
 8005698:	18ba      	adds	r2, r7, r2
 800569a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	785b      	ldrb	r3, [r3, #1]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d000      	beq.n	80056ac <HAL_PCD_EP_DB_Transmit+0x2b0>
 80056aa:	e06d      	b.n	8005788 <HAL_PCD_EP_DB_Transmit+0x38c>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2250      	movs	r2, #80	@ 0x50
 80056b8:	5a9b      	ldrh	r3, [r3, r2]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	001a      	movs	r2, r3
 80056be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	00da      	lsls	r2, r3, #3
 80056ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056cc:	18d3      	adds	r3, r2, r3
 80056ce:	4a29      	ldr	r2, [pc, #164]	@ (8005774 <HAL_PCD_EP_DB_Transmit+0x378>)
 80056d0:	4694      	mov	ip, r2
 80056d2:	4463      	add	r3, ip
 80056d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	059b      	lsls	r3, r3, #22
 80056de:	0d9b      	lsrs	r3, r3, #22
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	238c      	movs	r3, #140	@ 0x8c
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d108      	bne.n	8005702 <HAL_PCD_EP_DB_Transmit+0x306>
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	4a20      	ldr	r2, [pc, #128]	@ (8005778 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	e061      	b.n	80057c6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005702:	228c      	movs	r2, #140	@ 0x8c
 8005704:	18bb      	adds	r3, r7, r2
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b3e      	cmp	r3, #62	@ 0x3e
 800570a:	d817      	bhi.n	800573c <HAL_PCD_EP_DB_Transmit+0x340>
 800570c:	18bb      	adds	r3, r7, r2
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005714:	18bb      	adds	r3, r7, r2
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	4013      	ands	r3, r2
 800571c:	d002      	beq.n	8005724 <HAL_PCD_EP_DB_Transmit+0x328>
 800571e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005720:	3301      	adds	r3, #1
 8005722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29a      	uxth	r2, r3
 800572a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800572c:	b29b      	uxth	r3, r3
 800572e:	029b      	lsls	r3, r3, #10
 8005730:	b29b      	uxth	r3, r3
 8005732:	4313      	orrs	r3, r2
 8005734:	b29a      	uxth	r2, r3
 8005736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e044      	b.n	80057c6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800573c:	228c      	movs	r2, #140	@ 0x8c
 800573e:	18bb      	adds	r3, r7, r2
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005746:	18bb      	adds	r3, r7, r2
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	221f      	movs	r2, #31
 800574c:	4013      	ands	r3, r2
 800574e:	d102      	bne.n	8005756 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005752:	3b01      	subs	r3, #1
 8005754:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29a      	uxth	r2, r3
 800575c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800575e:	b29b      	uxth	r3, r3
 8005760:	029b      	lsls	r3, r3, #10
 8005762:	b29b      	uxth	r3, r3
 8005764:	4313      	orrs	r3, r2
 8005766:	b29b      	uxth	r3, r3
 8005768:	4a03      	ldr	r2, [pc, #12]	@ (8005778 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	b29a      	uxth	r2, r3
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e028      	b.n	80057c6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005774:	00000402 	.word	0x00000402
 8005778:	ffff8000 	.word	0xffff8000
 800577c:	00000406 	.word	0x00000406
 8005780:	ffff8f8f 	.word	0xffff8f8f
 8005784:	ffffc080 	.word	0xffffc080
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d11a      	bne.n	80057c6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	647b      	str	r3, [r7, #68]	@ 0x44
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2250      	movs	r2, #80	@ 0x50
 800579c:	5a9b      	ldrh	r3, [r3, r2]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	001a      	movs	r2, r3
 80057a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a4:	189b      	adds	r3, r3, r2
 80057a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	00da      	lsls	r2, r3, #3
 80057ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b0:	18d3      	adds	r3, r2, r3
 80057b2:	4ad9      	ldr	r2, [pc, #868]	@ (8005b18 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80057b4:	4694      	mov	ip, r2
 80057b6:	4463      	add	r3, ip
 80057b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ba:	238c      	movs	r3, #140	@ 0x8c
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6959      	ldr	r1, [r3, #20]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	891a      	ldrh	r2, [r3, #8]
 80057d2:	238c      	movs	r3, #140	@ 0x8c
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f005 f867 	bl	800a8ac <USB_WritePMA>
 80057de:	e1e9      	b.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2250      	movs	r2, #80	@ 0x50
 80057e6:	5a9b      	ldrh	r3, [r3, r2]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	001a      	movs	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	18d2      	adds	r2, r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	18d3      	adds	r3, r2, r3
 80057fa:	4ac8      	ldr	r2, [pc, #800]	@ (8005b1c <HAL_PCD_EP_DB_Transmit+0x720>)
 80057fc:	4694      	mov	ip, r2
 80057fe:	4463      	add	r3, ip
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	2188      	movs	r1, #136	@ 0x88
 8005804:	187b      	adds	r3, r7, r1
 8005806:	0592      	lsls	r2, r2, #22
 8005808:	0d92      	lsrs	r2, r2, #22
 800580a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	699a      	ldr	r2, [r3, #24]
 8005810:	187b      	adds	r3, r7, r1
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d307      	bcc.n	8005828 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	187b      	adds	r3, r7, r1
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	1ad2      	subs	r2, r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	619a      	str	r2, [r3, #24]
 8005826:	e002      	b.n	800582e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2200      	movs	r2, #0
 800582c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d000      	beq.n	8005838 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005836:	e0bb      	b.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d125      	bne.n	800588c <HAL_PCD_EP_DB_Transmit+0x490>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2250      	movs	r2, #80	@ 0x50
 800584c:	5a9b      	ldrh	r3, [r3, r2]
 800584e:	b29b      	uxth	r3, r3
 8005850:	001a      	movs	r2, r3
 8005852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005854:	189b      	adds	r3, r3, r2
 8005856:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	00da      	lsls	r2, r3, #3
 800585e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005860:	18d3      	adds	r3, r2, r3
 8005862:	4aad      	ldr	r2, [pc, #692]	@ (8005b18 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8005864:	4694      	mov	ip, r2
 8005866:	4463      	add	r3, ip
 8005868:	67bb      	str	r3, [r7, #120]	@ 0x78
 800586a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	059b      	lsls	r3, r3, #22
 8005872:	0d9b      	lsrs	r3, r3, #22
 8005874:	b29a      	uxth	r2, r3
 8005876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	4aa7      	ldr	r2, [pc, #668]	@ (8005b20 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005882:	4313      	orrs	r3, r2
 8005884:	b29a      	uxth	r2, r3
 8005886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	e01b      	b.n	80058c4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d117      	bne.n	80058c4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	667b      	str	r3, [r7, #100]	@ 0x64
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2250      	movs	r2, #80	@ 0x50
 80058a0:	5a9b      	ldrh	r3, [r3, r2]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	001a      	movs	r2, r3
 80058a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058a8:	189b      	adds	r3, r3, r2
 80058aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	00da      	lsls	r2, r3, #3
 80058b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058b4:	18d3      	adds	r3, r2, r3
 80058b6:	4a98      	ldr	r2, [pc, #608]	@ (8005b18 <HAL_PCD_EP_DB_Transmit+0x71c>)
 80058b8:	4694      	mov	ip, r2
 80058ba:	4463      	add	r3, ip
 80058bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058c0:	2200      	movs	r2, #0
 80058c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d12b      	bne.n	800592a <HAL_PCD_EP_DB_Transmit+0x52e>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2250      	movs	r2, #80	@ 0x50
 80058de:	5a9b      	ldrh	r3, [r3, r2]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	001a      	movs	r2, r3
 80058e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	00da      	lsls	r2, r3, #3
 80058f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	4a89      	ldr	r2, [pc, #548]	@ (8005b1c <HAL_PCD_EP_DB_Transmit+0x720>)
 80058f6:	4694      	mov	ip, r2
 80058f8:	4463      	add	r3, ip
 80058fa:	2184      	movs	r1, #132	@ 0x84
 80058fc:	187a      	adds	r2, r7, r1
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	187b      	adds	r3, r7, r1
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	059b      	lsls	r3, r3, #22
 800590a:	0d9b      	lsrs	r3, r3, #22
 800590c:	b29a      	uxth	r2, r3
 800590e:	187b      	adds	r3, r7, r1
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	187b      	adds	r3, r7, r1
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	4a80      	ldr	r2, [pc, #512]	@ (8005b20 <HAL_PCD_EP_DB_Transmit+0x724>)
 800591e:	4313      	orrs	r3, r2
 8005920:	b29a      	uxth	r2, r3
 8005922:	187b      	adds	r3, r7, r1
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e018      	b.n	800595c <HAL_PCD_EP_DB_Transmit+0x560>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d114      	bne.n	800595c <HAL_PCD_EP_DB_Transmit+0x560>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2250      	movs	r2, #80	@ 0x50
 8005938:	5a9b      	ldrh	r3, [r3, r2]
 800593a:	b29b      	uxth	r3, r3
 800593c:	001a      	movs	r2, r3
 800593e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005940:	189b      	adds	r3, r3, r2
 8005942:	677b      	str	r3, [r7, #116]	@ 0x74
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	00da      	lsls	r2, r3, #3
 800594a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800594c:	18d3      	adds	r3, r2, r3
 800594e:	4a73      	ldr	r2, [pc, #460]	@ (8005b1c <HAL_PCD_EP_DB_Transmit+0x720>)
 8005950:	4694      	mov	ip, r2
 8005952:	4463      	add	r3, ip
 8005954:	673b      	str	r3, [r7, #112]	@ 0x70
 8005956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005958:	2200      	movs	r2, #0
 800595a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781a      	ldrb	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	0011      	movs	r1, r2
 8005964:	0018      	movs	r0, r3
 8005966:	f006 ffc7 	bl	800c8f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800596a:	1dbb      	adds	r3, r7, #6
 800596c:	881a      	ldrh	r2, [r3, #0]
 800596e:	2380      	movs	r3, #128	@ 0x80
 8005970:	01db      	lsls	r3, r3, #7
 8005972:	4013      	ands	r3, r2
 8005974:	d000      	beq.n	8005978 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005976:	e11d      	b.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	001a      	movs	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	18d3      	adds	r3, r2, r3
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29a      	uxth	r2, r3
 800598a:	2082      	movs	r0, #130	@ 0x82
 800598c:	183b      	adds	r3, r7, r0
 800598e:	4965      	ldr	r1, [pc, #404]	@ (8005b24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005990:	400a      	ands	r2, r1
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	001a      	movs	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	183a      	adds	r2, r7, r0
 80059a4:	8812      	ldrh	r2, [r2, #0]
 80059a6:	4960      	ldr	r1, [pc, #384]	@ (8005b28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80059a8:	430a      	orrs	r2, r1
 80059aa:	b292      	uxth	r2, r2
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e101      	b.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059b0:	1dbb      	adds	r3, r7, #6
 80059b2:	881a      	ldrh	r2, [r3, #0]
 80059b4:	2380      	movs	r3, #128	@ 0x80
 80059b6:	01db      	lsls	r3, r3, #7
 80059b8:	4013      	ands	r3, r2
 80059ba:	d11a      	bne.n	80059f2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	001a      	movs	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	18d3      	adds	r3, r2, r3
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	204e      	movs	r0, #78	@ 0x4e
 80059d0:	183b      	adds	r3, r7, r0
 80059d2:	4954      	ldr	r1, [pc, #336]	@ (8005b24 <HAL_PCD_EP_DB_Transmit+0x728>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	001a      	movs	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	18d3      	adds	r3, r2, r3
 80059e6:	183a      	adds	r2, r7, r0
 80059e8:	8812      	ldrh	r2, [r2, #0]
 80059ea:	494f      	ldr	r1, [pc, #316]	@ (8005b28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80059ec:	430a      	orrs	r2, r1
 80059ee:	b292      	uxth	r2, r2
 80059f0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2224      	movs	r2, #36	@ 0x24
 80059f6:	5c9b      	ldrb	r3, [r3, r2]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d000      	beq.n	80059fe <HAL_PCD_EP_DB_Transmit+0x602>
 80059fc:	e0da      	b.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	2188      	movs	r1, #136	@ 0x88
 8005a04:	187b      	adds	r3, r7, r1
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	18d2      	adds	r2, r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	187b      	adds	r3, r7, r1
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	18d2      	adds	r2, r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d30c      	bcc.n	8005a42 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	218c      	movs	r1, #140	@ 0x8c
 8005a2e:	187a      	adds	r2, r7, r1
 8005a30:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	187b      	adds	r3, r7, r1
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	621a      	str	r2, [r3, #32]
 8005a40:	e01a      	b.n	8005a78 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8005a4a:	2388      	movs	r3, #136	@ 0x88
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	228c      	movs	r2, #140	@ 0x8c
 8005a52:	18ba      	adds	r2, r7, r2
 8005a54:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2224      	movs	r2, #36	@ 0x24
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	5499      	strb	r1, [r3, r2]
 8005a5e:	e00b      	b.n	8005a78 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	228c      	movs	r2, #140	@ 0x8c
 8005a66:	18ba      	adds	r2, r7, r2
 8005a68:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2224      	movs	r2, #36	@ 0x24
 8005a74:	2100      	movs	r1, #0
 8005a76:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d000      	beq.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x68c>
 8005a86:	e06d      	b.n	8005b64 <HAL_PCD_EP_DB_Transmit+0x768>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2250      	movs	r2, #80	@ 0x50
 8005a94:	5a9b      	ldrh	r3, [r3, r2]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	001a      	movs	r2, r3
 8005a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a9c:	189b      	adds	r3, r3, r2
 8005a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	00da      	lsls	r2, r3, #3
 8005aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aa8:	18d3      	adds	r3, r2, r3
 8005aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8005b1c <HAL_PCD_EP_DB_Transmit+0x720>)
 8005aac:	4694      	mov	ip, r2
 8005aae:	4463      	add	r3, ip
 8005ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	059b      	lsls	r3, r3, #22
 8005aba:	0d9b      	lsrs	r3, r3, #22
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	238c      	movs	r3, #140	@ 0x8c
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d108      	bne.n	8005ade <HAL_PCD_EP_DB_Transmit+0x6e2>
 8005acc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4a13      	ldr	r2, [pc, #76]	@ (8005b20 <HAL_PCD_EP_DB_Transmit+0x724>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	e05e      	b.n	8005b9c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005ade:	228c      	movs	r2, #140	@ 0x8c
 8005ae0:	18bb      	adds	r3, r7, r2
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ae6:	d821      	bhi.n	8005b2c <HAL_PCD_EP_DB_Transmit+0x730>
 8005ae8:	18bb      	adds	r3, r7, r2
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005af0:	18bb      	adds	r3, r7, r2
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2201      	movs	r2, #1
 8005af6:	4013      	ands	r3, r2
 8005af8:	d002      	beq.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x704>
 8005afa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005afc:	3301      	adds	r3, #1
 8005afe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	029b      	lsls	r3, r3, #10
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	e041      	b.n	8005b9c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b18:	00000402 	.word	0x00000402
 8005b1c:	00000406 	.word	0x00000406
 8005b20:	ffff8000 	.word	0xffff8000
 8005b24:	ffff8f8f 	.word	0xffff8f8f
 8005b28:	ffffc080 	.word	0xffffc080
 8005b2c:	228c      	movs	r2, #140	@ 0x8c
 8005b2e:	18bb      	adds	r3, r7, r2
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b36:	18bb      	adds	r3, r7, r2
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	221f      	movs	r2, #31
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d102      	bne.n	8005b46 <HAL_PCD_EP_DB_Transmit+0x74a>
 8005b40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b42:	3b01      	subs	r3, #1
 8005b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4a2c      	ldr	r2, [pc, #176]	@ (8005c0c <HAL_PCD_EP_DB_Transmit+0x810>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	e01b      	b.n	8005b9c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d117      	bne.n	8005b9c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2250      	movs	r2, #80	@ 0x50
 8005b72:	5a9b      	ldrh	r3, [r3, r2]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	001a      	movs	r2, r3
 8005b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b7a:	189b      	adds	r3, r3, r2
 8005b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	00da      	lsls	r2, r3, #3
 8005b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b86:	18d3      	adds	r3, r2, r3
 8005b88:	4a21      	ldr	r2, [pc, #132]	@ (8005c10 <HAL_PCD_EP_DB_Transmit+0x814>)
 8005b8a:	4694      	mov	ip, r2
 8005b8c:	4463      	add	r3, ip
 8005b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b90:	238c      	movs	r3, #140	@ 0x8c
 8005b92:	18fb      	adds	r3, r7, r3
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b9a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6959      	ldr	r1, [r3, #20]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	895a      	ldrh	r2, [r3, #10]
 8005ba8:	238c      	movs	r3, #140	@ 0x8c
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f004 fe7c 	bl	800a8ac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	001a      	movs	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	18d3      	adds	r3, r2, r3
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	2014      	movs	r0, #20
 8005bc8:	183b      	adds	r3, r7, r0
 8005bca:	4912      	ldr	r1, [pc, #72]	@ (8005c14 <HAL_PCD_EP_DB_Transmit+0x818>)
 8005bcc:	400a      	ands	r2, r1
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	183b      	adds	r3, r7, r0
 8005bd2:	183a      	adds	r2, r7, r0
 8005bd4:	8812      	ldrh	r2, [r2, #0]
 8005bd6:	2110      	movs	r1, #16
 8005bd8:	404a      	eors	r2, r1
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	183b      	adds	r3, r7, r0
 8005bde:	183a      	adds	r2, r7, r0
 8005be0:	8812      	ldrh	r2, [r2, #0]
 8005be2:	2120      	movs	r1, #32
 8005be4:	404a      	eors	r2, r1
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	001a      	movs	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	183a      	adds	r2, r7, r0
 8005bf8:	8812      	ldrh	r2, [r2, #0]
 8005bfa:	4907      	ldr	r1, [pc, #28]	@ (8005c18 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	b292      	uxth	r2, r2
 8005c00:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	0018      	movs	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b024      	add	sp, #144	@ 0x90
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	ffff8000 	.word	0xffff8000
 8005c10:	00000406 	.word	0x00000406
 8005c14:	ffff8fbf 	.word	0xffff8fbf
 8005c18:	ffff8080 	.word	0xffff8080

08005c1c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c1c:	b590      	push	{r4, r7, lr}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	0008      	movs	r0, r1
 8005c26:	0011      	movs	r1, r2
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	240a      	movs	r4, #10
 8005c2c:	193b      	adds	r3, r7, r4
 8005c2e:	1c02      	adds	r2, r0, #0
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	2308      	movs	r3, #8
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	1c0a      	adds	r2, r1, #0
 8005c38:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c3a:	0021      	movs	r1, r4
 8005c3c:	187b      	adds	r3, r7, r1
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	2280      	movs	r2, #128	@ 0x80
 8005c42:	4013      	ands	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00c      	beq.n	8005c64 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c4a:	187b      	adds	r3, r7, r1
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	2207      	movs	r2, #7
 8005c50:	401a      	ands	r2, r3
 8005c52:	0013      	movs	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	189b      	adds	r3, r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	3310      	adds	r3, #16
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	18d3      	adds	r3, r2, r3
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e00b      	b.n	8005c7c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c64:	230a      	movs	r3, #10
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	0013      	movs	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	3351      	adds	r3, #81	@ 0x51
 8005c74:	33ff      	adds	r3, #255	@ 0xff
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	18d3      	adds	r3, r2, r3
 8005c7a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d107      	bne.n	8005c96 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	80da      	strh	r2, [r3, #6]
 8005c94:	e00b      	b.n	8005cae <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	0c1b      	lsrs	r3, r3, #16
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b007      	add	sp, #28
 8005cb6:	bd90      	pop	{r4, r7, pc}

08005cb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	23b4      	movs	r3, #180	@ 0xb4
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	2101      	movs	r1, #1
 8005cce:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	23b2      	movs	r3, #178	@ 0xb2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2254      	movs	r2, #84	@ 0x54
 8005cde:	5a9b      	ldrh	r3, [r3, r2]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b299      	uxth	r1, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2254      	movs	r2, #84	@ 0x54
 8005cec:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2254      	movs	r2, #84	@ 0x54
 8005cf2:	5a9b      	ldrh	r3, [r3, r2]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	b299      	uxth	r1, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2254      	movs	r2, #84	@ 0x54
 8005d00:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	0018      	movs	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b004      	add	sp, #16
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	000a      	movs	r2, r1
 8005d16:	1cfb      	adds	r3, r7, #3
 8005d18:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d1a:	46c0      	nop			@ (mov r8, r8)
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b002      	add	sp, #8
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f000 fb76 	bl	8006424 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d100      	bne.n	8005d44 <HAL_RCC_OscConfig+0x20>
 8005d42:	e08e      	b.n	8005e62 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d44:	4bc5      	ldr	r3, [pc, #788]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	220c      	movs	r2, #12
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d00e      	beq.n	8005d6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d50:	4bc2      	ldr	r3, [pc, #776]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	220c      	movs	r2, #12
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d117      	bne.n	8005d8c <HAL_RCC_OscConfig+0x68>
 8005d5c:	4bbf      	ldr	r3, [pc, #764]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	23c0      	movs	r3, #192	@ 0xc0
 8005d62:	025b      	lsls	r3, r3, #9
 8005d64:	401a      	ands	r2, r3
 8005d66:	2380      	movs	r3, #128	@ 0x80
 8005d68:	025b      	lsls	r3, r3, #9
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d10e      	bne.n	8005d8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6e:	4bbb      	ldr	r3, [pc, #748]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	2380      	movs	r3, #128	@ 0x80
 8005d74:	029b      	lsls	r3, r3, #10
 8005d76:	4013      	ands	r3, r2
 8005d78:	d100      	bne.n	8005d7c <HAL_RCC_OscConfig+0x58>
 8005d7a:	e071      	b.n	8005e60 <HAL_RCC_OscConfig+0x13c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d000      	beq.n	8005d86 <HAL_RCC_OscConfig+0x62>
 8005d84:	e06c      	b.n	8005e60 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f000 fb4c 	bl	8006424 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_OscConfig+0x80>
 8005d94:	4bb1      	ldr	r3, [pc, #708]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4bb0      	ldr	r3, [pc, #704]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005d9a:	2180      	movs	r1, #128	@ 0x80
 8005d9c:	0249      	lsls	r1, r1, #9
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e02f      	b.n	8005e04 <HAL_RCC_OscConfig+0xe0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <HAL_RCC_OscConfig+0xa2>
 8005dac:	4bab      	ldr	r3, [pc, #684]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4baa      	ldr	r3, [pc, #680]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005db2:	49ab      	ldr	r1, [pc, #684]	@ (8006060 <HAL_RCC_OscConfig+0x33c>)
 8005db4:	400a      	ands	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	4ba8      	ldr	r3, [pc, #672]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4ba7      	ldr	r3, [pc, #668]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dbe:	49a9      	ldr	r1, [pc, #676]	@ (8006064 <HAL_RCC_OscConfig+0x340>)
 8005dc0:	400a      	ands	r2, r1
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e01e      	b.n	8005e04 <HAL_RCC_OscConfig+0xe0>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d10e      	bne.n	8005dec <HAL_RCC_OscConfig+0xc8>
 8005dce:	4ba3      	ldr	r3, [pc, #652]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4ba2      	ldr	r3, [pc, #648]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dd4:	2180      	movs	r1, #128	@ 0x80
 8005dd6:	02c9      	lsls	r1, r1, #11
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	4b9f      	ldr	r3, [pc, #636]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4b9e      	ldr	r3, [pc, #632]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005de2:	2180      	movs	r1, #128	@ 0x80
 8005de4:	0249      	lsls	r1, r1, #9
 8005de6:	430a      	orrs	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e00b      	b.n	8005e04 <HAL_RCC_OscConfig+0xe0>
 8005dec:	4b9b      	ldr	r3, [pc, #620]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b9a      	ldr	r3, [pc, #616]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005df2:	499b      	ldr	r1, [pc, #620]	@ (8006060 <HAL_RCC_OscConfig+0x33c>)
 8005df4:	400a      	ands	r2, r1
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	4b98      	ldr	r3, [pc, #608]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4b97      	ldr	r3, [pc, #604]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005dfe:	4999      	ldr	r1, [pc, #612]	@ (8006064 <HAL_RCC_OscConfig+0x340>)
 8005e00:	400a      	ands	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d014      	beq.n	8005e36 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0c:	f7fd fa0a 	bl	8003224 <HAL_GetTick>
 8005e10:	0003      	movs	r3, r0
 8005e12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e16:	f7fd fa05 	bl	8003224 <HAL_GetTick>
 8005e1a:	0002      	movs	r2, r0
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b64      	cmp	r3, #100	@ 0x64
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e2fd      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e28:	4b8c      	ldr	r3, [pc, #560]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	@ 0x80
 8005e2e:	029b      	lsls	r3, r3, #10
 8005e30:	4013      	ands	r3, r2
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0xf2>
 8005e34:	e015      	b.n	8005e62 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e36:	f7fd f9f5 	bl	8003224 <HAL_GetTick>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e40:	f7fd f9f0 	bl	8003224 <HAL_GetTick>
 8005e44:	0002      	movs	r2, r0
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	@ 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e2e8      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e52:	4b82      	ldr	r3, [pc, #520]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	2380      	movs	r3, #128	@ 0x80
 8005e58:	029b      	lsls	r3, r3, #10
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d1f0      	bne.n	8005e40 <HAL_RCC_OscConfig+0x11c>
 8005e5e:	e000      	b.n	8005e62 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e60:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2202      	movs	r2, #2
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d100      	bne.n	8005e6e <HAL_RCC_OscConfig+0x14a>
 8005e6c:	e06c      	b.n	8005f48 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	220c      	movs	r2, #12
 8005e74:	4013      	ands	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005e78:	4b78      	ldr	r3, [pc, #480]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	220c      	movs	r2, #12
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d11f      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x1a0>
 8005e84:	4b75      	ldr	r3, [pc, #468]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	23c0      	movs	r3, #192	@ 0xc0
 8005e8a:	025b      	lsls	r3, r3, #9
 8005e8c:	401a      	ands	r2, r3
 8005e8e:	2380      	movs	r3, #128	@ 0x80
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d116      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e96:	4b71      	ldr	r3, [pc, #452]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d005      	beq.n	8005eac <HAL_RCC_OscConfig+0x188>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e2bb      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eac:	4b6b      	ldr	r3, [pc, #428]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	22f8      	movs	r2, #248	@ 0xf8
 8005eb2:	4393      	bics	r3, r2
 8005eb4:	0019      	movs	r1, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	00da      	lsls	r2, r3, #3
 8005ebc:	4b67      	ldr	r3, [pc, #412]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ec2:	e041      	b.n	8005f48 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d024      	beq.n	8005f16 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ecc:	4b63      	ldr	r3, [pc, #396]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	4b62      	ldr	r3, [pc, #392]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed8:	f7fd f9a4 	bl	8003224 <HAL_GetTick>
 8005edc:	0003      	movs	r3, r0
 8005ede:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ee2:	f7fd f99f 	bl	8003224 <HAL_GetTick>
 8005ee6:	0002      	movs	r2, r0
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e297      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef4:	4b59      	ldr	r3, [pc, #356]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	4013      	ands	r3, r2
 8005efc:	d0f1      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efe:	4b57      	ldr	r3, [pc, #348]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	22f8      	movs	r2, #248	@ 0xf8
 8005f04:	4393      	bics	r3, r2
 8005f06:	0019      	movs	r1, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	00da      	lsls	r2, r3, #3
 8005f0e:	4b53      	ldr	r3, [pc, #332]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e018      	b.n	8005f48 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f16:	4b51      	ldr	r3, [pc, #324]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b50      	ldr	r3, [pc, #320]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	438a      	bics	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f22:	f7fd f97f 	bl	8003224 <HAL_GetTick>
 8005f26:	0003      	movs	r3, r0
 8005f28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2c:	f7fd f97a 	bl	8003224 <HAL_GetTick>
 8005f30:	0002      	movs	r2, r0
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e272      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3e:	4b47      	ldr	r3, [pc, #284]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2202      	movs	r2, #2
 8005f44:	4013      	ands	r3, r2
 8005f46:	d1f1      	bne.n	8005f2c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d036      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d019      	beq.n	8005f8e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5a:	4b40      	ldr	r3, [pc, #256]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f60:	2101      	movs	r1, #1
 8005f62:	430a      	orrs	r2, r1
 8005f64:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f66:	f7fd f95d 	bl	8003224 <HAL_GetTick>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f70:	f7fd f958 	bl	8003224 <HAL_GetTick>
 8005f74:	0002      	movs	r2, r0
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e250      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f82:	4b36      	ldr	r3, [pc, #216]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	2202      	movs	r2, #2
 8005f88:	4013      	ands	r3, r2
 8005f8a:	d0f1      	beq.n	8005f70 <HAL_RCC_OscConfig+0x24c>
 8005f8c:	e018      	b.n	8005fc0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8e:	4b33      	ldr	r3, [pc, #204]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f92:	4b32      	ldr	r3, [pc, #200]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005f94:	2101      	movs	r1, #1
 8005f96:	438a      	bics	r2, r1
 8005f98:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f9a:	f7fd f943 	bl	8003224 <HAL_GetTick>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa4:	f7fd f93e 	bl	8003224 <HAL_GetTick>
 8005fa8:	0002      	movs	r2, r0
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e236      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb6:	4b29      	ldr	r3, [pc, #164]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fba:	2202      	movs	r2, #2
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	d1f1      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d100      	bne.n	8005fcc <HAL_RCC_OscConfig+0x2a8>
 8005fca:	e0b5      	b.n	8006138 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fcc:	201f      	movs	r0, #31
 8005fce:	183b      	adds	r3, r7, r0
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd4:	4b21      	ldr	r3, [pc, #132]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	055b      	lsls	r3, r3, #21
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d110      	bne.n	8006002 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005fe2:	69da      	ldr	r2, [r3, #28]
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005fe6:	2180      	movs	r1, #128	@ 0x80
 8005fe8:	0549      	lsls	r1, r1, #21
 8005fea:	430a      	orrs	r2, r1
 8005fec:	61da      	str	r2, [r3, #28]
 8005fee:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	2380      	movs	r3, #128	@ 0x80
 8005ff4:	055b      	lsls	r3, r3, #21
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ffc:	183b      	adds	r3, r7, r0
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006002:	4b19      	ldr	r3, [pc, #100]	@ (8006068 <HAL_RCC_OscConfig+0x344>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	2380      	movs	r3, #128	@ 0x80
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	4013      	ands	r3, r2
 800600c:	d11a      	bne.n	8006044 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600e:	4b16      	ldr	r3, [pc, #88]	@ (8006068 <HAL_RCC_OscConfig+0x344>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <HAL_RCC_OscConfig+0x344>)
 8006014:	2180      	movs	r1, #128	@ 0x80
 8006016:	0049      	lsls	r1, r1, #1
 8006018:	430a      	orrs	r2, r1
 800601a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601c:	f7fd f902 	bl	8003224 <HAL_GetTick>
 8006020:	0003      	movs	r3, r0
 8006022:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006026:	f7fd f8fd 	bl	8003224 <HAL_GetTick>
 800602a:	0002      	movs	r2, r0
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b64      	cmp	r3, #100	@ 0x64
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e1f5      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006038:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <HAL_RCC_OscConfig+0x344>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	2380      	movs	r3, #128	@ 0x80
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4013      	ands	r3, r2
 8006042:	d0f0      	beq.n	8006026 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d10f      	bne.n	800606c <HAL_RCC_OscConfig+0x348>
 800604c:	4b03      	ldr	r3, [pc, #12]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 800604e:	6a1a      	ldr	r2, [r3, #32]
 8006050:	4b02      	ldr	r3, [pc, #8]	@ (800605c <HAL_RCC_OscConfig+0x338>)
 8006052:	2101      	movs	r1, #1
 8006054:	430a      	orrs	r2, r1
 8006056:	621a      	str	r2, [r3, #32]
 8006058:	e036      	b.n	80060c8 <HAL_RCC_OscConfig+0x3a4>
 800605a:	46c0      	nop			@ (mov r8, r8)
 800605c:	40021000 	.word	0x40021000
 8006060:	fffeffff 	.word	0xfffeffff
 8006064:	fffbffff 	.word	0xfffbffff
 8006068:	40007000 	.word	0x40007000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10c      	bne.n	800608e <HAL_RCC_OscConfig+0x36a>
 8006074:	4bca      	ldr	r3, [pc, #808]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006076:	6a1a      	ldr	r2, [r3, #32]
 8006078:	4bc9      	ldr	r3, [pc, #804]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800607a:	2101      	movs	r1, #1
 800607c:	438a      	bics	r2, r1
 800607e:	621a      	str	r2, [r3, #32]
 8006080:	4bc7      	ldr	r3, [pc, #796]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006082:	6a1a      	ldr	r2, [r3, #32]
 8006084:	4bc6      	ldr	r3, [pc, #792]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006086:	2104      	movs	r1, #4
 8006088:	438a      	bics	r2, r1
 800608a:	621a      	str	r2, [r3, #32]
 800608c:	e01c      	b.n	80060c8 <HAL_RCC_OscConfig+0x3a4>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b05      	cmp	r3, #5
 8006094:	d10c      	bne.n	80060b0 <HAL_RCC_OscConfig+0x38c>
 8006096:	4bc2      	ldr	r3, [pc, #776]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	4bc1      	ldr	r3, [pc, #772]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800609c:	2104      	movs	r1, #4
 800609e:	430a      	orrs	r2, r1
 80060a0:	621a      	str	r2, [r3, #32]
 80060a2:	4bbf      	ldr	r3, [pc, #764]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	4bbe      	ldr	r3, [pc, #760]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80060a8:	2101      	movs	r1, #1
 80060aa:	430a      	orrs	r2, r1
 80060ac:	621a      	str	r2, [r3, #32]
 80060ae:	e00b      	b.n	80060c8 <HAL_RCC_OscConfig+0x3a4>
 80060b0:	4bbb      	ldr	r3, [pc, #748]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	4bba      	ldr	r3, [pc, #744]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80060b6:	2101      	movs	r1, #1
 80060b8:	438a      	bics	r2, r1
 80060ba:	621a      	str	r2, [r3, #32]
 80060bc:	4bb8      	ldr	r3, [pc, #736]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	4bb7      	ldr	r3, [pc, #732]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80060c2:	2104      	movs	r1, #4
 80060c4:	438a      	bics	r2, r1
 80060c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d014      	beq.n	80060fa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d0:	f7fd f8a8 	bl	8003224 <HAL_GetTick>
 80060d4:	0003      	movs	r3, r0
 80060d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d8:	e009      	b.n	80060ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060da:	f7fd f8a3 	bl	8003224 <HAL_GetTick>
 80060de:	0002      	movs	r2, r0
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	4aaf      	ldr	r2, [pc, #700]	@ (80063a4 <HAL_RCC_OscConfig+0x680>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e19a      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ee:	4bac      	ldr	r3, [pc, #688]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	2202      	movs	r2, #2
 80060f4:	4013      	ands	r3, r2
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x3b6>
 80060f8:	e013      	b.n	8006122 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fa:	f7fd f893 	bl	8003224 <HAL_GetTick>
 80060fe:	0003      	movs	r3, r0
 8006100:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006102:	e009      	b.n	8006118 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006104:	f7fd f88e 	bl	8003224 <HAL_GetTick>
 8006108:	0002      	movs	r2, r0
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	4aa5      	ldr	r2, [pc, #660]	@ (80063a4 <HAL_RCC_OscConfig+0x680>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e185      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006118:	4ba1      	ldr	r3, [pc, #644]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	2202      	movs	r2, #2
 800611e:	4013      	ands	r3, r2
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006122:	231f      	movs	r3, #31
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d105      	bne.n	8006138 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612c:	4b9c      	ldr	r3, [pc, #624]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	4b9b      	ldr	r3, [pc, #620]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006132:	499d      	ldr	r1, [pc, #628]	@ (80063a8 <HAL_RCC_OscConfig+0x684>)
 8006134:	400a      	ands	r2, r1
 8006136:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2210      	movs	r2, #16
 800613e:	4013      	ands	r3, r2
 8006140:	d063      	beq.n	800620a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d12a      	bne.n	80061a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800614a:	4b95      	ldr	r3, [pc, #596]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800614c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800614e:	4b94      	ldr	r3, [pc, #592]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006150:	2104      	movs	r1, #4
 8006152:	430a      	orrs	r2, r1
 8006154:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006156:	4b92      	ldr	r3, [pc, #584]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800615a:	4b91      	ldr	r3, [pc, #580]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800615c:	2101      	movs	r1, #1
 800615e:	430a      	orrs	r2, r1
 8006160:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006162:	f7fd f85f 	bl	8003224 <HAL_GetTick>
 8006166:	0003      	movs	r3, r0
 8006168:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800616c:	f7fd f85a 	bl	8003224 <HAL_GetTick>
 8006170:	0002      	movs	r2, r0
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e152      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800617e:	4b88      	ldr	r3, [pc, #544]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006182:	2202      	movs	r2, #2
 8006184:	4013      	ands	r3, r2
 8006186:	d0f1      	beq.n	800616c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006188:	4b85      	ldr	r3, [pc, #532]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800618a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618c:	22f8      	movs	r2, #248	@ 0xf8
 800618e:	4393      	bics	r3, r2
 8006190:	0019      	movs	r1, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	00da      	lsls	r2, r3, #3
 8006198:	4b81      	ldr	r3, [pc, #516]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800619a:	430a      	orrs	r2, r1
 800619c:	635a      	str	r2, [r3, #52]	@ 0x34
 800619e:	e034      	b.n	800620a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	3305      	adds	r3, #5
 80061a6:	d111      	bne.n	80061cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80061a8:	4b7d      	ldr	r3, [pc, #500]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80061aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ac:	4b7c      	ldr	r3, [pc, #496]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80061ae:	2104      	movs	r1, #4
 80061b0:	438a      	bics	r2, r1
 80061b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80061b4:	4b7a      	ldr	r3, [pc, #488]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80061b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b8:	22f8      	movs	r2, #248	@ 0xf8
 80061ba:	4393      	bics	r3, r2
 80061bc:	0019      	movs	r1, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	00da      	lsls	r2, r3, #3
 80061c4:	4b76      	ldr	r3, [pc, #472]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80061c6:	430a      	orrs	r2, r1
 80061c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80061ca:	e01e      	b.n	800620a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80061cc:	4b74      	ldr	r3, [pc, #464]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80061ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061d0:	4b73      	ldr	r3, [pc, #460]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80061d2:	2104      	movs	r1, #4
 80061d4:	430a      	orrs	r2, r1
 80061d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80061d8:	4b71      	ldr	r3, [pc, #452]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80061da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061dc:	4b70      	ldr	r3, [pc, #448]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80061de:	2101      	movs	r1, #1
 80061e0:	438a      	bics	r2, r1
 80061e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e4:	f7fd f81e 	bl	8003224 <HAL_GetTick>
 80061e8:	0003      	movs	r3, r0
 80061ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80061ee:	f7fd f819 	bl	8003224 <HAL_GetTick>
 80061f2:	0002      	movs	r2, r0
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e111      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006200:	4b67      	ldr	r3, [pc, #412]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006204:	2202      	movs	r2, #2
 8006206:	4013      	ands	r3, r2
 8006208:	d1f1      	bne.n	80061ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2220      	movs	r2, #32
 8006210:	4013      	ands	r3, r2
 8006212:	d05c      	beq.n	80062ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006214:	4b62      	ldr	r3, [pc, #392]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	220c      	movs	r2, #12
 800621a:	4013      	ands	r3, r2
 800621c:	2b0c      	cmp	r3, #12
 800621e:	d00e      	beq.n	800623e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006220:	4b5f      	ldr	r3, [pc, #380]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	220c      	movs	r2, #12
 8006226:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006228:	2b08      	cmp	r3, #8
 800622a:	d114      	bne.n	8006256 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800622c:	4b5c      	ldr	r3, [pc, #368]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	23c0      	movs	r3, #192	@ 0xc0
 8006232:	025b      	lsls	r3, r3, #9
 8006234:	401a      	ands	r2, r3
 8006236:	23c0      	movs	r3, #192	@ 0xc0
 8006238:	025b      	lsls	r3, r3, #9
 800623a:	429a      	cmp	r2, r3
 800623c:	d10b      	bne.n	8006256 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800623e:	4b58      	ldr	r3, [pc, #352]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006242:	2380      	movs	r3, #128	@ 0x80
 8006244:	029b      	lsls	r3, r3, #10
 8006246:	4013      	ands	r3, r2
 8006248:	d040      	beq.n	80062cc <HAL_RCC_OscConfig+0x5a8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d03c      	beq.n	80062cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e0e6      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01b      	beq.n	8006296 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800625e:	4b50      	ldr	r3, [pc, #320]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006262:	4b4f      	ldr	r3, [pc, #316]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006264:	2180      	movs	r1, #128	@ 0x80
 8006266:	0249      	lsls	r1, r1, #9
 8006268:	430a      	orrs	r2, r1
 800626a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626c:	f7fc ffda 	bl	8003224 <HAL_GetTick>
 8006270:	0003      	movs	r3, r0
 8006272:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006276:	f7fc ffd5 	bl	8003224 <HAL_GetTick>
 800627a:	0002      	movs	r2, r0
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e0cd      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006288:	4b45      	ldr	r3, [pc, #276]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800628a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800628c:	2380      	movs	r3, #128	@ 0x80
 800628e:	029b      	lsls	r3, r3, #10
 8006290:	4013      	ands	r3, r2
 8006292:	d0f0      	beq.n	8006276 <HAL_RCC_OscConfig+0x552>
 8006294:	e01b      	b.n	80062ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006296:	4b42      	ldr	r3, [pc, #264]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800629a:	4b41      	ldr	r3, [pc, #260]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800629c:	4943      	ldr	r1, [pc, #268]	@ (80063ac <HAL_RCC_OscConfig+0x688>)
 800629e:	400a      	ands	r2, r1
 80062a0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a2:	f7fc ffbf 	bl	8003224 <HAL_GetTick>
 80062a6:	0003      	movs	r3, r0
 80062a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062ac:	f7fc ffba 	bl	8003224 <HAL_GetTick>
 80062b0:	0002      	movs	r2, r0
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e0b2      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80062be:	4b38      	ldr	r3, [pc, #224]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80062c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062c2:	2380      	movs	r3, #128	@ 0x80
 80062c4:	029b      	lsls	r3, r3, #10
 80062c6:	4013      	ands	r3, r2
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x588>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80062cc:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d100      	bne.n	80062d8 <HAL_RCC_OscConfig+0x5b4>
 80062d6:	e0a4      	b.n	8006422 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062d8:	4b31      	ldr	r3, [pc, #196]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	220c      	movs	r2, #12
 80062de:	4013      	ands	r3, r2
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d100      	bne.n	80062e6 <HAL_RCC_OscConfig+0x5c2>
 80062e4:	e078      	b.n	80063d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d14c      	bne.n	8006388 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ee:	4b2c      	ldr	r3, [pc, #176]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b2b      	ldr	r3, [pc, #172]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 80062f4:	492e      	ldr	r1, [pc, #184]	@ (80063b0 <HAL_RCC_OscConfig+0x68c>)
 80062f6:	400a      	ands	r2, r1
 80062f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fa:	f7fc ff93 	bl	8003224 <HAL_GetTick>
 80062fe:	0003      	movs	r3, r0
 8006300:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006304:	f7fc ff8e 	bl	8003224 <HAL_GetTick>
 8006308:	0002      	movs	r2, r0
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e086      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006316:	4b22      	ldr	r3, [pc, #136]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	2380      	movs	r3, #128	@ 0x80
 800631c:	049b      	lsls	r3, r3, #18
 800631e:	4013      	ands	r3, r2
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006322:	4b1f      	ldr	r3, [pc, #124]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	220f      	movs	r2, #15
 8006328:	4393      	bics	r3, r2
 800632a:	0019      	movs	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006330:	4b1b      	ldr	r3, [pc, #108]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006332:	430a      	orrs	r2, r1
 8006334:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006336:	4b1a      	ldr	r3, [pc, #104]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	4a1e      	ldr	r2, [pc, #120]	@ (80063b4 <HAL_RCC_OscConfig+0x690>)
 800633c:	4013      	ands	r3, r2
 800633e:	0019      	movs	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	431a      	orrs	r2, r3
 800634a:	4b15      	ldr	r3, [pc, #84]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800634c:	430a      	orrs	r2, r1
 800634e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006350:	4b13      	ldr	r3, [pc, #76]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	4b12      	ldr	r3, [pc, #72]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 8006356:	2180      	movs	r1, #128	@ 0x80
 8006358:	0449      	lsls	r1, r1, #17
 800635a:	430a      	orrs	r2, r1
 800635c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635e:	f7fc ff61 	bl	8003224 <HAL_GetTick>
 8006362:	0003      	movs	r3, r0
 8006364:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006368:	f7fc ff5c 	bl	8003224 <HAL_GetTick>
 800636c:	0002      	movs	r2, r0
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e054      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800637a:	4b09      	ldr	r3, [pc, #36]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	2380      	movs	r3, #128	@ 0x80
 8006380:	049b      	lsls	r3, r3, #18
 8006382:	4013      	ands	r3, r2
 8006384:	d0f0      	beq.n	8006368 <HAL_RCC_OscConfig+0x644>
 8006386:	e04c      	b.n	8006422 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <HAL_RCC_OscConfig+0x67c>)
 800638e:	4908      	ldr	r1, [pc, #32]	@ (80063b0 <HAL_RCC_OscConfig+0x68c>)
 8006390:	400a      	ands	r2, r1
 8006392:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006394:	f7fc ff46 	bl	8003224 <HAL_GetTick>
 8006398:	0003      	movs	r3, r0
 800639a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800639c:	e015      	b.n	80063ca <HAL_RCC_OscConfig+0x6a6>
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	40021000 	.word	0x40021000
 80063a4:	00001388 	.word	0x00001388
 80063a8:	efffffff 	.word	0xefffffff
 80063ac:	fffeffff 	.word	0xfffeffff
 80063b0:	feffffff 	.word	0xfeffffff
 80063b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fc ff34 	bl	8003224 <HAL_GetTick>
 80063bc:	0002      	movs	r2, r0
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e02c      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ca:	4b18      	ldr	r3, [pc, #96]	@ (800642c <HAL_RCC_OscConfig+0x708>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	2380      	movs	r3, #128	@ 0x80
 80063d0:	049b      	lsls	r3, r3, #18
 80063d2:	4013      	ands	r3, r2
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x694>
 80063d6:	e024      	b.n	8006422 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e01f      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80063e4:	4b11      	ldr	r3, [pc, #68]	@ (800642c <HAL_RCC_OscConfig+0x708>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80063ea:	4b10      	ldr	r3, [pc, #64]	@ (800642c <HAL_RCC_OscConfig+0x708>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	23c0      	movs	r3, #192	@ 0xc0
 80063f4:	025b      	lsls	r3, r3, #9
 80063f6:	401a      	ands	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d10e      	bne.n	800641e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	220f      	movs	r2, #15
 8006404:	401a      	ands	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d107      	bne.n	800641e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	23f0      	movs	r3, #240	@ 0xf0
 8006412:	039b      	lsls	r3, r3, #14
 8006414:	401a      	ands	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d001      	beq.n	8006422 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	0018      	movs	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	b008      	add	sp, #32
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40021000 	.word	0x40021000

08006430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0bf      	b.n	80065c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006444:	4b61      	ldr	r3, [pc, #388]	@ (80065cc <HAL_RCC_ClockConfig+0x19c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2201      	movs	r2, #1
 800644a:	4013      	ands	r3, r2
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d911      	bls.n	8006476 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006452:	4b5e      	ldr	r3, [pc, #376]	@ (80065cc <HAL_RCC_ClockConfig+0x19c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2201      	movs	r2, #1
 8006458:	4393      	bics	r3, r2
 800645a:	0019      	movs	r1, r3
 800645c:	4b5b      	ldr	r3, [pc, #364]	@ (80065cc <HAL_RCC_ClockConfig+0x19c>)
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006464:	4b59      	ldr	r3, [pc, #356]	@ (80065cc <HAL_RCC_ClockConfig+0x19c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2201      	movs	r2, #1
 800646a:	4013      	ands	r3, r2
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d001      	beq.n	8006476 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e0a6      	b.n	80065c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2202      	movs	r2, #2
 800647c:	4013      	ands	r3, r2
 800647e:	d015      	beq.n	80064ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2204      	movs	r2, #4
 8006486:	4013      	ands	r3, r2
 8006488:	d006      	beq.n	8006498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800648a:	4b51      	ldr	r3, [pc, #324]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	4b50      	ldr	r3, [pc, #320]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 8006490:	21e0      	movs	r1, #224	@ 0xe0
 8006492:	00c9      	lsls	r1, r1, #3
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006498:	4b4d      	ldr	r3, [pc, #308]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	22f0      	movs	r2, #240	@ 0xf0
 800649e:	4393      	bics	r3, r2
 80064a0:	0019      	movs	r1, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	4b4a      	ldr	r3, [pc, #296]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 80064a8:	430a      	orrs	r2, r1
 80064aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2201      	movs	r2, #1
 80064b2:	4013      	ands	r3, r2
 80064b4:	d04c      	beq.n	8006550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d107      	bne.n	80064ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064be:	4b44      	ldr	r3, [pc, #272]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	2380      	movs	r3, #128	@ 0x80
 80064c4:	029b      	lsls	r3, r3, #10
 80064c6:	4013      	ands	r3, r2
 80064c8:	d120      	bne.n	800650c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e07a      	b.n	80065c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d107      	bne.n	80064e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064d6:	4b3e      	ldr	r3, [pc, #248]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	2380      	movs	r3, #128	@ 0x80
 80064dc:	049b      	lsls	r3, r3, #18
 80064de:	4013      	ands	r3, r2
 80064e0:	d114      	bne.n	800650c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e06e      	b.n	80065c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d107      	bne.n	80064fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80064ee:	4b38      	ldr	r3, [pc, #224]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 80064f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064f2:	2380      	movs	r3, #128	@ 0x80
 80064f4:	029b      	lsls	r3, r3, #10
 80064f6:	4013      	ands	r3, r2
 80064f8:	d108      	bne.n	800650c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e062      	b.n	80065c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064fe:	4b34      	ldr	r3, [pc, #208]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2202      	movs	r2, #2
 8006504:	4013      	ands	r3, r2
 8006506:	d101      	bne.n	800650c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e05b      	b.n	80065c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800650c:	4b30      	ldr	r3, [pc, #192]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2203      	movs	r2, #3
 8006512:	4393      	bics	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	4b2d      	ldr	r3, [pc, #180]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006520:	f7fc fe80 	bl	8003224 <HAL_GetTick>
 8006524:	0003      	movs	r3, r0
 8006526:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006528:	e009      	b.n	800653e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800652a:	f7fc fe7b 	bl	8003224 <HAL_GetTick>
 800652e:	0002      	movs	r2, r0
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	4a27      	ldr	r2, [pc, #156]	@ (80065d4 <HAL_RCC_ClockConfig+0x1a4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e042      	b.n	80065c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653e:	4b24      	ldr	r3, [pc, #144]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	220c      	movs	r2, #12
 8006544:	401a      	ands	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	429a      	cmp	r2, r3
 800654e:	d1ec      	bne.n	800652a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006550:	4b1e      	ldr	r3, [pc, #120]	@ (80065cc <HAL_RCC_ClockConfig+0x19c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2201      	movs	r2, #1
 8006556:	4013      	ands	r3, r2
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d211      	bcs.n	8006582 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b1b      	ldr	r3, [pc, #108]	@ (80065cc <HAL_RCC_ClockConfig+0x19c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	4393      	bics	r3, r2
 8006566:	0019      	movs	r1, r3
 8006568:	4b18      	ldr	r3, [pc, #96]	@ (80065cc <HAL_RCC_ClockConfig+0x19c>)
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006570:	4b16      	ldr	r3, [pc, #88]	@ (80065cc <HAL_RCC_ClockConfig+0x19c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2201      	movs	r2, #1
 8006576:	4013      	ands	r3, r2
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d001      	beq.n	8006582 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e020      	b.n	80065c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2204      	movs	r2, #4
 8006588:	4013      	ands	r3, r2
 800658a:	d009      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800658c:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4a11      	ldr	r2, [pc, #68]	@ (80065d8 <HAL_RCC_ClockConfig+0x1a8>)
 8006592:	4013      	ands	r3, r2
 8006594:	0019      	movs	r1, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 800659c:	430a      	orrs	r2, r1
 800659e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80065a0:	f000 f820 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 80065a4:	0001      	movs	r1, r0
 80065a6:	4b0a      	ldr	r3, [pc, #40]	@ (80065d0 <HAL_RCC_ClockConfig+0x1a0>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	091b      	lsrs	r3, r3, #4
 80065ac:	220f      	movs	r2, #15
 80065ae:	4013      	ands	r3, r2
 80065b0:	4a0a      	ldr	r2, [pc, #40]	@ (80065dc <HAL_RCC_ClockConfig+0x1ac>)
 80065b2:	5cd3      	ldrb	r3, [r2, r3]
 80065b4:	000a      	movs	r2, r1
 80065b6:	40da      	lsrs	r2, r3
 80065b8:	4b09      	ldr	r3, [pc, #36]	@ (80065e0 <HAL_RCC_ClockConfig+0x1b0>)
 80065ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80065bc:	2003      	movs	r0, #3
 80065be:	f7fc fdeb 	bl	8003198 <HAL_InitTick>
  
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	0018      	movs	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b004      	add	sp, #16
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40022000 	.word	0x40022000
 80065d0:	40021000 	.word	0x40021000
 80065d4:	00001388 	.word	0x00001388
 80065d8:	fffff8ff 	.word	0xfffff8ff
 80065dc:	0800fad8 	.word	0x0800fad8
 80065e0:	20000018 	.word	0x20000018

080065e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	2300      	movs	r3, #0
 80065f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80065fe:	4b2d      	ldr	r3, [pc, #180]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	220c      	movs	r2, #12
 8006608:	4013      	ands	r3, r2
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d046      	beq.n	800669c <HAL_RCC_GetSysClockFreq+0xb8>
 800660e:	d848      	bhi.n	80066a2 <HAL_RCC_GetSysClockFreq+0xbe>
 8006610:	2b04      	cmp	r3, #4
 8006612:	d002      	beq.n	800661a <HAL_RCC_GetSysClockFreq+0x36>
 8006614:	2b08      	cmp	r3, #8
 8006616:	d003      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0x3c>
 8006618:	e043      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800661a:	4b27      	ldr	r3, [pc, #156]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800661c:	613b      	str	r3, [r7, #16]
      break;
 800661e:	e043      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	0c9b      	lsrs	r3, r3, #18
 8006624:	220f      	movs	r2, #15
 8006626:	4013      	ands	r3, r2
 8006628:	4a24      	ldr	r2, [pc, #144]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xd8>)
 800662a:	5cd3      	ldrb	r3, [r2, r3]
 800662c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800662e:	4b21      	ldr	r3, [pc, #132]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	220f      	movs	r2, #15
 8006634:	4013      	ands	r3, r2
 8006636:	4a22      	ldr	r2, [pc, #136]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8006638:	5cd3      	ldrb	r3, [r2, r3]
 800663a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	23c0      	movs	r3, #192	@ 0xc0
 8006640:	025b      	lsls	r3, r3, #9
 8006642:	401a      	ands	r2, r3
 8006644:	2380      	movs	r3, #128	@ 0x80
 8006646:	025b      	lsls	r3, r3, #9
 8006648:	429a      	cmp	r2, r3
 800664a:	d109      	bne.n	8006660 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	481a      	ldr	r0, [pc, #104]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006650:	f7f9 fd76 	bl	8000140 <__udivsi3>
 8006654:	0003      	movs	r3, r0
 8006656:	001a      	movs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4353      	muls	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e01a      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	23c0      	movs	r3, #192	@ 0xc0
 8006664:	025b      	lsls	r3, r3, #9
 8006666:	401a      	ands	r2, r3
 8006668:	23c0      	movs	r3, #192	@ 0xc0
 800666a:	025b      	lsls	r3, r3, #9
 800666c:	429a      	cmp	r2, r3
 800666e:	d109      	bne.n	8006684 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	4814      	ldr	r0, [pc, #80]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8006674:	f7f9 fd64 	bl	8000140 <__udivsi3>
 8006678:	0003      	movs	r3, r0
 800667a:	001a      	movs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4353      	muls	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e008      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006684:	68b9      	ldr	r1, [r7, #8]
 8006686:	480c      	ldr	r0, [pc, #48]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006688:	f7f9 fd5a 	bl	8000140 <__udivsi3>
 800668c:	0003      	movs	r3, r0
 800668e:	001a      	movs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4353      	muls	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	613b      	str	r3, [r7, #16]
      break;
 800669a:	e005      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800669c:	4b09      	ldr	r3, [pc, #36]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800669e:	613b      	str	r3, [r7, #16]
      break;
 80066a0:	e002      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066a2:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80066a4:	613b      	str	r3, [r7, #16]
      break;
 80066a6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80066a8:	693b      	ldr	r3, [r7, #16]
}
 80066aa:	0018      	movs	r0, r3
 80066ac:	46bd      	mov	sp, r7
 80066ae:	b006      	add	sp, #24
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	40021000 	.word	0x40021000
 80066b8:	007a1200 	.word	0x007a1200
 80066bc:	0800faf0 	.word	0x0800faf0
 80066c0:	0800fb00 	.word	0x0800fb00
 80066c4:	02dc6c00 	.word	0x02dc6c00

080066c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066cc:	4b02      	ldr	r3, [pc, #8]	@ (80066d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80066ce:	681b      	ldr	r3, [r3, #0]
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	20000018 	.word	0x20000018

080066dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80066e0:	f7ff fff2 	bl	80066c8 <HAL_RCC_GetHCLKFreq>
 80066e4:	0001      	movs	r1, r0
 80066e6:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	2207      	movs	r2, #7
 80066ee:	4013      	ands	r3, r2
 80066f0:	4a04      	ldr	r2, [pc, #16]	@ (8006704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066f2:	5cd3      	ldrb	r3, [r2, r3]
 80066f4:	40d9      	lsrs	r1, r3
 80066f6:	000b      	movs	r3, r1
}    
 80066f8:	0018      	movs	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	46c0      	nop			@ (mov r8, r8)
 8006700:	40021000 	.word	0x40021000
 8006704:	0800fae8 	.word	0x0800fae8

08006708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	2380      	movs	r3, #128	@ 0x80
 800671e:	025b      	lsls	r3, r3, #9
 8006720:	4013      	ands	r3, r2
 8006722:	d100      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006724:	e08e      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006726:	2017      	movs	r0, #23
 8006728:	183b      	adds	r3, r7, r0
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800672e:	4b6e      	ldr	r3, [pc, #440]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006730:	69da      	ldr	r2, [r3, #28]
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	055b      	lsls	r3, r3, #21
 8006736:	4013      	ands	r3, r2
 8006738:	d110      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800673a:	4b6b      	ldr	r3, [pc, #428]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800673c:	69da      	ldr	r2, [r3, #28]
 800673e:	4b6a      	ldr	r3, [pc, #424]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006740:	2180      	movs	r1, #128	@ 0x80
 8006742:	0549      	lsls	r1, r1, #21
 8006744:	430a      	orrs	r2, r1
 8006746:	61da      	str	r2, [r3, #28]
 8006748:	4b67      	ldr	r3, [pc, #412]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	055b      	lsls	r3, r3, #21
 8006750:	4013      	ands	r3, r2
 8006752:	60bb      	str	r3, [r7, #8]
 8006754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006756:	183b      	adds	r3, r7, r0
 8006758:	2201      	movs	r2, #1
 800675a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675c:	4b63      	ldr	r3, [pc, #396]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	2380      	movs	r3, #128	@ 0x80
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	4013      	ands	r3, r2
 8006766:	d11a      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006768:	4b60      	ldr	r3, [pc, #384]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	4b5f      	ldr	r3, [pc, #380]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800676e:	2180      	movs	r1, #128	@ 0x80
 8006770:	0049      	lsls	r1, r1, #1
 8006772:	430a      	orrs	r2, r1
 8006774:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006776:	f7fc fd55 	bl	8003224 <HAL_GetTick>
 800677a:	0003      	movs	r3, r0
 800677c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800677e:	e008      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006780:	f7fc fd50 	bl	8003224 <HAL_GetTick>
 8006784:	0002      	movs	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b64      	cmp	r3, #100	@ 0x64
 800678c:	d901      	bls.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e0a6      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006792:	4b56      	ldr	r3, [pc, #344]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	2380      	movs	r3, #128	@ 0x80
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	4013      	ands	r3, r2
 800679c:	d0f0      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800679e:	4b52      	ldr	r3, [pc, #328]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	23c0      	movs	r3, #192	@ 0xc0
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4013      	ands	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d034      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	23c0      	movs	r3, #192	@ 0xc0
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4013      	ands	r3, r2
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d02c      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067c0:	4b49      	ldr	r3, [pc, #292]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	4a4a      	ldr	r2, [pc, #296]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067ca:	4b47      	ldr	r3, [pc, #284]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067cc:	6a1a      	ldr	r2, [r3, #32]
 80067ce:	4b46      	ldr	r3, [pc, #280]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067d0:	2180      	movs	r1, #128	@ 0x80
 80067d2:	0249      	lsls	r1, r1, #9
 80067d4:	430a      	orrs	r2, r1
 80067d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067d8:	4b43      	ldr	r3, [pc, #268]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067da:	6a1a      	ldr	r2, [r3, #32]
 80067dc:	4b42      	ldr	r3, [pc, #264]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067de:	4945      	ldr	r1, [pc, #276]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80067e0:	400a      	ands	r2, r1
 80067e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067e4:	4b40      	ldr	r3, [pc, #256]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	4013      	ands	r3, r2
 80067f0:	d013      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f2:	f7fc fd17 	bl	8003224 <HAL_GetTick>
 80067f6:	0003      	movs	r3, r0
 80067f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fa:	e009      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fc:	f7fc fd12 	bl	8003224 <HAL_GetTick>
 8006800:	0002      	movs	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	4a3c      	ldr	r2, [pc, #240]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d901      	bls.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e067      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006810:	4b35      	ldr	r3, [pc, #212]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	2202      	movs	r2, #2
 8006816:	4013      	ands	r3, r2
 8006818:	d0f0      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800681a:	4b33      	ldr	r3, [pc, #204]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	4a34      	ldr	r2, [pc, #208]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006820:	4013      	ands	r3, r2
 8006822:	0019      	movs	r1, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	4b2f      	ldr	r3, [pc, #188]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800682a:	430a      	orrs	r2, r1
 800682c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800682e:	2317      	movs	r3, #23
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d105      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006838:	4b2b      	ldr	r3, [pc, #172]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	4b2a      	ldr	r3, [pc, #168]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800683e:	492f      	ldr	r1, [pc, #188]	@ (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006840:	400a      	ands	r2, r1
 8006842:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2201      	movs	r2, #1
 800684a:	4013      	ands	r3, r2
 800684c:	d009      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800684e:	4b26      	ldr	r3, [pc, #152]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006852:	2203      	movs	r2, #3
 8006854:	4393      	bics	r3, r2
 8006856:	0019      	movs	r1, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	4b22      	ldr	r3, [pc, #136]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800685e:	430a      	orrs	r2, r1
 8006860:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2202      	movs	r2, #2
 8006868:	4013      	ands	r3, r2
 800686a:	d009      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800686c:	4b1e      	ldr	r3, [pc, #120]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800686e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006870:	4a23      	ldr	r2, [pc, #140]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006872:	4013      	ands	r3, r2
 8006874:	0019      	movs	r1, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	4b1b      	ldr	r3, [pc, #108]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800687c:	430a      	orrs	r2, r1
 800687e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2220      	movs	r2, #32
 8006886:	4013      	ands	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800688a:	4b17      	ldr	r3, [pc, #92]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688e:	2210      	movs	r2, #16
 8006890:	4393      	bics	r3, r2
 8006892:	0019      	movs	r1, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	4b13      	ldr	r3, [pc, #76]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800689a:	430a      	orrs	r2, r1
 800689c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	2380      	movs	r3, #128	@ 0x80
 80068a4:	029b      	lsls	r3, r3, #10
 80068a6:	4013      	ands	r3, r2
 80068a8:	d009      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068aa:	4b0f      	ldr	r3, [pc, #60]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ae:	2280      	movs	r2, #128	@ 0x80
 80068b0:	4393      	bics	r3, r2
 80068b2:	0019      	movs	r1, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699a      	ldr	r2, [r3, #24]
 80068b8:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068ba:	430a      	orrs	r2, r1
 80068bc:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	2380      	movs	r3, #128	@ 0x80
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4013      	ands	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068ca:	4b07      	ldr	r3, [pc, #28]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	2240      	movs	r2, #64	@ 0x40
 80068d0:	4393      	bics	r3, r2
 80068d2:	0019      	movs	r1, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	4b03      	ldr	r3, [pc, #12]	@ (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80068da:	430a      	orrs	r2, r1
 80068dc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	0018      	movs	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b006      	add	sp, #24
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40007000 	.word	0x40007000
 80068f0:	fffffcff 	.word	0xfffffcff
 80068f4:	fffeffff 	.word	0xfffeffff
 80068f8:	00001388 	.word	0x00001388
 80068fc:	efffffff 	.word	0xefffffff
 8006900:	fffcffff 	.word	0xfffcffff

08006904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e0a8      	b.n	8006a68 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	2382      	movs	r3, #130	@ 0x82
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	429a      	cmp	r2, r3
 8006928:	d009      	beq.n	800693e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	61da      	str	r2, [r3, #28]
 8006930:	e005      	b.n	800693e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	225d      	movs	r2, #93	@ 0x5d
 8006948:	5c9b      	ldrb	r3, [r3, r2]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d107      	bne.n	8006960 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	225c      	movs	r2, #92	@ 0x5c
 8006954:	2100      	movs	r1, #0
 8006956:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	0018      	movs	r0, r3
 800695c:	f7fc f974 	bl	8002c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	225d      	movs	r2, #93	@ 0x5d
 8006964:	2102      	movs	r1, #2
 8006966:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2140      	movs	r1, #64	@ 0x40
 8006974:	438a      	bics	r2, r1
 8006976:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	23e0      	movs	r3, #224	@ 0xe0
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	429a      	cmp	r2, r3
 8006982:	d902      	bls.n	800698a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e002      	b.n	8006990 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	015b      	lsls	r3, r3, #5
 800698e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	23f0      	movs	r3, #240	@ 0xf0
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	429a      	cmp	r2, r3
 800699a:	d008      	beq.n	80069ae <HAL_SPI_Init+0xaa>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	23e0      	movs	r3, #224	@ 0xe0
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d002      	beq.n	80069ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	2382      	movs	r3, #130	@ 0x82
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	401a      	ands	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6899      	ldr	r1, [r3, #8]
 80069bc:	2384      	movs	r3, #132	@ 0x84
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	400b      	ands	r3, r1
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2102      	movs	r1, #2
 80069ca:	400b      	ands	r3, r1
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	2101      	movs	r1, #1
 80069d4:	400b      	ands	r3, r1
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6999      	ldr	r1, [r3, #24]
 80069dc:	2380      	movs	r3, #128	@ 0x80
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	400b      	ands	r3, r1
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	2138      	movs	r1, #56	@ 0x38
 80069ea:	400b      	ands	r3, r1
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	2180      	movs	r1, #128	@ 0x80
 80069f4:	400b      	ands	r3, r1
 80069f6:	431a      	orrs	r2, r3
 80069f8:	0011      	movs	r1, r2
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069fe:	2380      	movs	r3, #128	@ 0x80
 8006a00:	019b      	lsls	r3, r3, #6
 8006a02:	401a      	ands	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	2204      	movs	r2, #4
 8006a14:	401a      	ands	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	2110      	movs	r1, #16
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a24:	2108      	movs	r1, #8
 8006a26:	400b      	ands	r3, r1
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68d9      	ldr	r1, [r3, #12]
 8006a2e:	23f0      	movs	r3, #240	@ 0xf0
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	400b      	ands	r3, r1
 8006a34:	431a      	orrs	r2, r3
 8006a36:	0011      	movs	r1, r2
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	2380      	movs	r3, #128	@ 0x80
 8006a3c:	015b      	lsls	r3, r3, #5
 8006a3e:	401a      	ands	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4907      	ldr	r1, [pc, #28]	@ (8006a70 <HAL_SPI_Init+0x16c>)
 8006a54:	400a      	ands	r2, r1
 8006a56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	225d      	movs	r2, #93	@ 0x5d
 8006a62:	2101      	movs	r1, #1
 8006a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	0018      	movs	r0, r3
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b004      	add	sp, #16
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	fffff7ff 	.word	0xfffff7ff

08006a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e042      	b.n	8006b0c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	223d      	movs	r2, #61	@ 0x3d
 8006a8a:	5c9b      	ldrb	r3, [r3, r2]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d107      	bne.n	8006aa2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	223c      	movs	r2, #60	@ 0x3c
 8006a96:	2100      	movs	r1, #0
 8006a98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7fc f975 	bl	8002d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	223d      	movs	r2, #61	@ 0x3d
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	0010      	movs	r0, r2
 8006ab6:	f000 fa17 	bl	8006ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2246      	movs	r2, #70	@ 0x46
 8006abe:	2101      	movs	r1, #1
 8006ac0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	223e      	movs	r2, #62	@ 0x3e
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	5499      	strb	r1, [r3, r2]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	223f      	movs	r2, #63	@ 0x3f
 8006ace:	2101      	movs	r1, #1
 8006ad0:	5499      	strb	r1, [r3, r2]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2240      	movs	r2, #64	@ 0x40
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	5499      	strb	r1, [r3, r2]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2241      	movs	r2, #65	@ 0x41
 8006ade:	2101      	movs	r1, #1
 8006ae0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2242      	movs	r2, #66	@ 0x42
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	5499      	strb	r1, [r3, r2]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2243      	movs	r2, #67	@ 0x43
 8006aee:	2101      	movs	r1, #1
 8006af0:	5499      	strb	r1, [r3, r2]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2244      	movs	r2, #68	@ 0x44
 8006af6:	2101      	movs	r1, #1
 8006af8:	5499      	strb	r1, [r3, r2]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2245      	movs	r2, #69	@ 0x45
 8006afe:	2101      	movs	r1, #1
 8006b00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	223d      	movs	r2, #61	@ 0x3d
 8006b06:	2101      	movs	r1, #1
 8006b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b002      	add	sp, #8
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	4013      	ands	r3, r2
 8006b32:	d021      	beq.n	8006b78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2202      	movs	r2, #2
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d01d      	beq.n	8006b78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2203      	movs	r2, #3
 8006b42:	4252      	negs	r2, r2
 8006b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	2203      	movs	r2, #3
 8006b54:	4013      	ands	r3, r2
 8006b56:	d004      	beq.n	8006b62 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f000 f9ac 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006b60:	e007      	b.n	8006b72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	0018      	movs	r0, r3
 8006b66:	f000 f99f 	bl	8006ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f000 f9ab 	bl	8006ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d022      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2204      	movs	r2, #4
 8006b84:	4013      	ands	r3, r2
 8006b86:	d01e      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2205      	movs	r2, #5
 8006b8e:	4252      	negs	r2, r2
 8006b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2202      	movs	r2, #2
 8006b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	23c0      	movs	r3, #192	@ 0xc0
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f000 f985 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006bae:	e007      	b.n	8006bc0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f000 f978 	bl	8006ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f000 f984 	bl	8006ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d021      	beq.n	8006c12 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	d01d      	beq.n	8006c12 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2209      	movs	r2, #9
 8006bdc:	4252      	negs	r2, r2
 8006bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2204      	movs	r2, #4
 8006be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	2203      	movs	r2, #3
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f000 f95f 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006bfa:	e007      	b.n	8006c0c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f000 f952 	bl	8006ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	0018      	movs	r0, r3
 8006c08:	f000 f95e 	bl	8006ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2210      	movs	r2, #16
 8006c16:	4013      	ands	r3, r2
 8006c18:	d022      	beq.n	8006c60 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d01e      	beq.n	8006c60 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2211      	movs	r2, #17
 8006c28:	4252      	negs	r2, r2
 8006c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	23c0      	movs	r3, #192	@ 0xc0
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	0018      	movs	r0, r3
 8006c44:	f000 f938 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006c48:	e007      	b.n	8006c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f000 f92b 	bl	8006ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 f937 	bl	8006ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2201      	movs	r2, #1
 8006c64:	4013      	ands	r3, r2
 8006c66:	d00c      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d008      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2202      	movs	r2, #2
 8006c76:	4252      	negs	r2, r2
 8006c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f000 f90b 	bl	8006e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2280      	movs	r2, #128	@ 0x80
 8006c86:	4013      	ands	r3, r2
 8006c88:	d00c      	beq.n	8006ca4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2280      	movs	r2, #128	@ 0x80
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d008      	beq.n	8006ca4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2281      	movs	r2, #129	@ 0x81
 8006c98:	4252      	negs	r2, r2
 8006c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 fab0 	bl	8007204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2240      	movs	r2, #64	@ 0x40
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d00c      	beq.n	8006cc6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2240      	movs	r2, #64	@ 0x40
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d008      	beq.n	8006cc6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2241      	movs	r2, #65	@ 0x41
 8006cba:	4252      	negs	r2, r2
 8006cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f000 f909 	bl	8006ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d00c      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	d008      	beq.n	8006ce8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2221      	movs	r2, #33	@ 0x21
 8006cdc:	4252      	negs	r2, r2
 8006cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 fa86 	bl	80071f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ce8:	46c0      	nop			@ (mov r8, r8)
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b004      	add	sp, #16
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cfa:	230f      	movs	r3, #15
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	223c      	movs	r2, #60	@ 0x3c
 8006d06:	5c9b      	ldrb	r3, [r3, r2]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_TIM_ConfigClockSource+0x20>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e0bc      	b.n	8006e8a <HAL_TIM_ConfigClockSource+0x19a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	223c      	movs	r2, #60	@ 0x3c
 8006d14:	2101      	movs	r1, #1
 8006d16:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	223d      	movs	r2, #61	@ 0x3d
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2277      	movs	r2, #119	@ 0x77
 8006d2c:	4393      	bics	r3, r2
 8006d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a58      	ldr	r2, [pc, #352]	@ (8006e94 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2280      	movs	r2, #128	@ 0x80
 8006d46:	0192      	lsls	r2, r2, #6
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d040      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0xde>
 8006d4c:	2280      	movs	r2, #128	@ 0x80
 8006d4e:	0192      	lsls	r2, r2, #6
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d900      	bls.n	8006d56 <HAL_TIM_ConfigClockSource+0x66>
 8006d54:	e088      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
 8006d56:	2280      	movs	r2, #128	@ 0x80
 8006d58:	0152      	lsls	r2, r2, #5
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d100      	bne.n	8006d60 <HAL_TIM_ConfigClockSource+0x70>
 8006d5e:	e088      	b.n	8006e72 <HAL_TIM_ConfigClockSource+0x182>
 8006d60:	2280      	movs	r2, #128	@ 0x80
 8006d62:	0152      	lsls	r2, r2, #5
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d900      	bls.n	8006d6a <HAL_TIM_ConfigClockSource+0x7a>
 8006d68:	e07e      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
 8006d6a:	2b70      	cmp	r3, #112	@ 0x70
 8006d6c:	d018      	beq.n	8006da0 <HAL_TIM_ConfigClockSource+0xb0>
 8006d6e:	d900      	bls.n	8006d72 <HAL_TIM_ConfigClockSource+0x82>
 8006d70:	e07a      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
 8006d72:	2b60      	cmp	r3, #96	@ 0x60
 8006d74:	d04f      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x126>
 8006d76:	d900      	bls.n	8006d7a <HAL_TIM_ConfigClockSource+0x8a>
 8006d78:	e076      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
 8006d7a:	2b50      	cmp	r3, #80	@ 0x50
 8006d7c:	d03b      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x106>
 8006d7e:	d900      	bls.n	8006d82 <HAL_TIM_ConfigClockSource+0x92>
 8006d80:	e072      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
 8006d82:	2b40      	cmp	r3, #64	@ 0x40
 8006d84:	d057      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x146>
 8006d86:	d900      	bls.n	8006d8a <HAL_TIM_ConfigClockSource+0x9a>
 8006d88:	e06e      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
 8006d8a:	2b30      	cmp	r3, #48	@ 0x30
 8006d8c:	d063      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x166>
 8006d8e:	d86b      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d060      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x166>
 8006d94:	d868      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d05d      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x166>
 8006d9a:	2b10      	cmp	r3, #16
 8006d9c:	d05b      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x166>
 8006d9e:	e063      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006db0:	f000 f9a2 	bl	80070f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2277      	movs	r2, #119	@ 0x77
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	609a      	str	r2, [r3, #8]
      break;
 8006dcc:	e052      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dde:	f000 f98b 	bl	80070f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2180      	movs	r1, #128	@ 0x80
 8006dee:	01c9      	lsls	r1, r1, #7
 8006df0:	430a      	orrs	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]
      break;
 8006df4:	e03e      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e02:	001a      	movs	r2, r3
 8006e04:	f000 f8fe 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2150      	movs	r1, #80	@ 0x50
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f000 f958 	bl	80070c4 <TIM_ITRx_SetConfig>
      break;
 8006e14:	e02e      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e22:	001a      	movs	r2, r3
 8006e24:	f000 f91c 	bl	8007060 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2160      	movs	r1, #96	@ 0x60
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f000 f948 	bl	80070c4 <TIM_ITRx_SetConfig>
      break;
 8006e34:	e01e      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e42:	001a      	movs	r2, r3
 8006e44:	f000 f8de 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2140      	movs	r1, #64	@ 0x40
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f000 f938 	bl	80070c4 <TIM_ITRx_SetConfig>
      break;
 8006e54:	e00e      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	0019      	movs	r1, r3
 8006e60:	0010      	movs	r0, r2
 8006e62:	f000 f92f 	bl	80070c4 <TIM_ITRx_SetConfig>
      break;
 8006e66:	e005      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006e68:	230f      	movs	r3, #15
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	701a      	strb	r2, [r3, #0]
      break;
 8006e70:	e000      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006e72:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	223d      	movs	r2, #61	@ 0x3d
 8006e78:	2101      	movs	r1, #1
 8006e7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	223c      	movs	r2, #60	@ 0x3c
 8006e80:	2100      	movs	r1, #0
 8006e82:	5499      	strb	r1, [r3, r2]

  return status;
 8006e84:	230f      	movs	r3, #15
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	781b      	ldrb	r3, [r3, #0]
}
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b004      	add	sp, #16
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	46c0      	nop			@ (mov r8, r8)
 8006e94:	ffff00ff 	.word	0xffff00ff

08006e98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ea0:	46c0      	nop			@ (mov r8, r8)
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b002      	add	sp, #8
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eb0:	46c0      	nop			@ (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ec0:	46c0      	nop			@ (mov r8, r8)
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed0:	46c0      	nop			@ (mov r8, r8)
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b002      	add	sp, #8
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee0:	46c0      	nop			@ (mov r8, r8)
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b002      	add	sp, #8
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3b      	ldr	r2, [pc, #236]	@ (8006fe8 <TIM_Base_SetConfig+0x100>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d008      	beq.n	8006f12 <TIM_Base_SetConfig+0x2a>
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	2380      	movs	r3, #128	@ 0x80
 8006f04:	05db      	lsls	r3, r3, #23
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d003      	beq.n	8006f12 <TIM_Base_SetConfig+0x2a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a37      	ldr	r2, [pc, #220]	@ (8006fec <TIM_Base_SetConfig+0x104>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d108      	bne.n	8006f24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2270      	movs	r2, #112	@ 0x70
 8006f16:	4393      	bics	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a30      	ldr	r2, [pc, #192]	@ (8006fe8 <TIM_Base_SetConfig+0x100>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d018      	beq.n	8006f5e <TIM_Base_SetConfig+0x76>
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	2380      	movs	r3, #128	@ 0x80
 8006f30:	05db      	lsls	r3, r3, #23
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d013      	beq.n	8006f5e <TIM_Base_SetConfig+0x76>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a2c      	ldr	r2, [pc, #176]	@ (8006fec <TIM_Base_SetConfig+0x104>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00f      	beq.n	8006f5e <TIM_Base_SetConfig+0x76>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2b      	ldr	r2, [pc, #172]	@ (8006ff0 <TIM_Base_SetConfig+0x108>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00b      	beq.n	8006f5e <TIM_Base_SetConfig+0x76>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2a      	ldr	r2, [pc, #168]	@ (8006ff4 <TIM_Base_SetConfig+0x10c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_Base_SetConfig+0x76>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a29      	ldr	r2, [pc, #164]	@ (8006ff8 <TIM_Base_SetConfig+0x110>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_Base_SetConfig+0x76>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a28      	ldr	r2, [pc, #160]	@ (8006ffc <TIM_Base_SetConfig+0x114>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d108      	bne.n	8006f70 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a27      	ldr	r2, [pc, #156]	@ (8007000 <TIM_Base_SetConfig+0x118>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2280      	movs	r2, #128	@ 0x80
 8006f74:	4393      	bics	r3, r2
 8006f76:	001a      	movs	r2, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a13      	ldr	r2, [pc, #76]	@ (8006fe8 <TIM_Base_SetConfig+0x100>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00b      	beq.n	8006fb6 <TIM_Base_SetConfig+0xce>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a14      	ldr	r2, [pc, #80]	@ (8006ff4 <TIM_Base_SetConfig+0x10c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d007      	beq.n	8006fb6 <TIM_Base_SetConfig+0xce>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a13      	ldr	r2, [pc, #76]	@ (8006ff8 <TIM_Base_SetConfig+0x110>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d003      	beq.n	8006fb6 <TIM_Base_SetConfig+0xce>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a12      	ldr	r2, [pc, #72]	@ (8006ffc <TIM_Base_SetConfig+0x114>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d103      	bne.n	8006fbe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d106      	bne.n	8006fde <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4393      	bics	r3, r2
 8006fd8:	001a      	movs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	611a      	str	r2, [r3, #16]
  }
}
 8006fde:	46c0      	nop			@ (mov r8, r8)
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b004      	add	sp, #16
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	46c0      	nop			@ (mov r8, r8)
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40002000 	.word	0x40002000
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40014400 	.word	0x40014400
 8006ffc:	40014800 	.word	0x40014800
 8007000:	fffffcff 	.word	0xfffffcff

08007004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	2201      	movs	r2, #1
 800701c:	4393      	bics	r3, r2
 800701e:	001a      	movs	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	22f0      	movs	r2, #240	@ 0xf0
 800702e:	4393      	bics	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	220a      	movs	r2, #10
 8007040:	4393      	bics	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	621a      	str	r2, [r3, #32]
}
 8007058:	46c0      	nop			@ (mov r8, r8)
 800705a:	46bd      	mov	sp, r7
 800705c:	b006      	add	sp, #24
 800705e:	bd80      	pop	{r7, pc}

08007060 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	2210      	movs	r2, #16
 8007078:	4393      	bics	r3, r2
 800707a:	001a      	movs	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4a0d      	ldr	r2, [pc, #52]	@ (80070c0 <TIM_TI2_ConfigInputStage+0x60>)
 800708a:	4013      	ands	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	22a0      	movs	r2, #160	@ 0xa0
 800709c:	4393      	bics	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	46c0      	nop			@ (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b006      	add	sp, #24
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	46c0      	nop			@ (mov r8, r8)
 80070c0:	ffff0fff 	.word	0xffff0fff

080070c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2270      	movs	r2, #112	@ 0x70
 80070d8:	4393      	bics	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	2207      	movs	r2, #7
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	609a      	str	r2, [r3, #8]
}
 80070ee:	46c0      	nop			@ (mov r8, r8)
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b004      	add	sp, #16
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	4a09      	ldr	r2, [pc, #36]	@ (8007134 <TIM_ETR_SetConfig+0x3c>)
 8007110:	4013      	ands	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	021a      	lsls	r2, r3, #8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	431a      	orrs	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4313      	orrs	r3, r2
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	46c0      	nop			@ (mov r8, r8)
 800712e:	46bd      	mov	sp, r7
 8007130:	b006      	add	sp, #24
 8007132:	bd80      	pop	{r7, pc}
 8007134:	ffff00ff 	.word	0xffff00ff

08007138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	223c      	movs	r2, #60	@ 0x3c
 8007146:	5c9b      	ldrb	r3, [r3, r2]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800714c:	2302      	movs	r3, #2
 800714e:	e047      	b.n	80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	223c      	movs	r2, #60	@ 0x3c
 8007154:	2101      	movs	r1, #1
 8007156:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	223d      	movs	r2, #61	@ 0x3d
 800715c:	2102      	movs	r1, #2
 800715e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2270      	movs	r2, #112	@ 0x70
 8007174:	4393      	bics	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a16      	ldr	r2, [pc, #88]	@ (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00f      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	05db      	lsls	r3, r3, #23
 800719c:	429a      	cmp	r2, r3
 800719e:	d009      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a11      	ldr	r2, [pc, #68]	@ (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a10      	ldr	r2, [pc, #64]	@ (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d10c      	bne.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2280      	movs	r2, #128	@ 0x80
 80071b8:	4393      	bics	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	223d      	movs	r2, #61	@ 0x3d
 80071d2:	2101      	movs	r1, #1
 80071d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	223c      	movs	r2, #60	@ 0x3c
 80071da:	2100      	movs	r1, #0
 80071dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	0018      	movs	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b004      	add	sp, #16
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40012c00 	.word	0x40012c00
 80071ec:	40000400 	.word	0x40000400
 80071f0:	40014000 	.word	0x40014000

080071f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071fc:	46c0      	nop			@ (mov r8, r8)
 80071fe:	46bd      	mov	sp, r7
 8007200:	b002      	add	sp, #8
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800720c:	46c0      	nop			@ (mov r8, r8)
 800720e:	46bd      	mov	sp, r7
 8007210:	b002      	add	sp, #8
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e053      	b.n	80072ce <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d116      	bne.n	800725c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2278      	movs	r2, #120	@ 0x78
 8007232:	2100      	movs	r1, #0
 8007234:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	0018      	movs	r0, r3
 800723a:	f000 fbeb 	bl	8007a14 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	22b0      	movs	r2, #176	@ 0xb0
 8007242:	589b      	ldr	r3, [r3, r2]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	21b0      	movs	r1, #176	@ 0xb0
 800724c:	4a22      	ldr	r2, [pc, #136]	@ (80072d8 <HAL_UART_Init+0xc4>)
 800724e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	22b0      	movs	r2, #176	@ 0xb0
 8007254:	589b      	ldr	r3, [r3, r2]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	0010      	movs	r0, r2
 800725a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2224      	movs	r2, #36	@ 0x24
 8007260:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2101      	movs	r1, #1
 800726e:	438a      	bics	r2, r1
 8007270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_UART_Init+0x6e>
  {
    UART_AdvFeatureConfig(huart);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	0018      	movs	r0, r3
 800727e:	f000 fd95 	bl	8007dac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0018      	movs	r0, r3
 8007286:	f000 fc09 	bl	8007a9c <UART_SetConfig>
 800728a:	0003      	movs	r3, r0
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_UART_Init+0x80>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e01c      	b.n	80072ce <HAL_UART_Init+0xba>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	490f      	ldr	r1, [pc, #60]	@ (80072dc <HAL_UART_Init+0xc8>)
 80072a0:	400a      	ands	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	212a      	movs	r1, #42	@ 0x2a
 80072b0:	438a      	bics	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2101      	movs	r1, #1
 80072c0:	430a      	orrs	r2, r1
 80072c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	0018      	movs	r0, r3
 80072c8:	f000 fe24 	bl	8007f14 <UART_CheckIdleState>
 80072cc:	0003      	movs	r3, r0
}
 80072ce:	0018      	movs	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	b002      	add	sp, #8
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	46c0      	nop			@ (mov r8, r8)
 80072d8:	08002dd9 	.word	0x08002dd9
 80072dc:	ffffb7ff 	.word	0xffffb7ff

080072e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	1dbb      	adds	r3, r7, #6
 80072ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d15b      	bne.n	80073ae <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_UART_Transmit_IT+0x24>
 80072fc:	1dbb      	adds	r3, r7, #6
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e053      	b.n	80073b0 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	2380      	movs	r3, #128	@ 0x80
 800730e:	015b      	lsls	r3, r3, #5
 8007310:	429a      	cmp	r2, r3
 8007312:	d109      	bne.n	8007328 <HAL_UART_Transmit_IT+0x48>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2201      	movs	r2, #1
 8007320:	4013      	ands	r3, r2
 8007322:	d001      	beq.n	8007328 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e043      	b.n	80073b0 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	1dba      	adds	r2, r7, #6
 8007332:	2150      	movs	r1, #80	@ 0x50
 8007334:	8812      	ldrh	r2, [r2, #0]
 8007336:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	1dba      	adds	r2, r7, #6
 800733c:	2152      	movs	r1, #82	@ 0x52
 800733e:	8812      	ldrh	r2, [r2, #0]
 8007340:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2284      	movs	r2, #132	@ 0x84
 800734c:	2100      	movs	r1, #0
 800734e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2221      	movs	r2, #33	@ 0x21
 8007354:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	2380      	movs	r3, #128	@ 0x80
 800735c:	015b      	lsls	r3, r3, #5
 800735e:	429a      	cmp	r2, r3
 8007360:	d107      	bne.n	8007372 <HAL_UART_Transmit_IT+0x92>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d103      	bne.n	8007372 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4a12      	ldr	r2, [pc, #72]	@ (80073b8 <HAL_UART_Transmit_IT+0xd8>)
 800736e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007370:	e002      	b.n	8007378 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4a11      	ldr	r2, [pc, #68]	@ (80073bc <HAL_UART_Transmit_IT+0xdc>)
 8007376:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007378:	f3ef 8310 	mrs	r3, PRIMASK
 800737c:	613b      	str	r3, [r7, #16]
  return(result);
 800737e:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	2301      	movs	r3, #1
 8007384:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f383 8810 	msr	PRIMASK, r3
}
 800738c:	46c0      	nop			@ (mov r8, r8)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2180      	movs	r1, #128	@ 0x80
 800739a:	430a      	orrs	r2, r1
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f383 8810 	msr	PRIMASK, r3
}
 80073a8:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e000      	b.n	80073b0 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
  }
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b008      	add	sp, #32
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	08008679 	.word	0x08008679
 80073bc:	080085c7 	.word	0x080085c7

080073c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b0ab      	sub	sp, #172	@ 0xac
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	22a4      	movs	r2, #164	@ 0xa4
 80073d0:	18b9      	adds	r1, r7, r2
 80073d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	20a0      	movs	r0, #160	@ 0xa0
 80073dc:	1839      	adds	r1, r7, r0
 80073de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	219c      	movs	r1, #156	@ 0x9c
 80073e8:	1879      	adds	r1, r7, r1
 80073ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073ec:	0011      	movs	r1, r2
 80073ee:	18bb      	adds	r3, r7, r2
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a9c      	ldr	r2, [pc, #624]	@ (8007664 <HAL_UART_IRQHandler+0x2a4>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	2298      	movs	r2, #152	@ 0x98
 80073f8:	18bc      	adds	r4, r7, r2
 80073fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80073fc:	18bb      	adds	r3, r7, r2
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d114      	bne.n	800742e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007404:	187b      	adds	r3, r7, r1
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2220      	movs	r2, #32
 800740a:	4013      	ands	r3, r2
 800740c:	d00f      	beq.n	800742e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800740e:	183b      	adds	r3, r7, r0
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2220      	movs	r2, #32
 8007414:	4013      	ands	r3, r2
 8007416:	d00a      	beq.n	800742e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800741c:	2b00      	cmp	r3, #0
 800741e:	d100      	bne.n	8007422 <HAL_UART_IRQHandler+0x62>
 8007420:	e2a8      	b.n	8007974 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	0010      	movs	r0, r2
 800742a:	4798      	blx	r3
      }
      return;
 800742c:	e2a2      	b.n	8007974 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800742e:	2398      	movs	r3, #152	@ 0x98
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d100      	bne.n	800743a <HAL_UART_IRQHandler+0x7a>
 8007438:	e11a      	b.n	8007670 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800743a:	239c      	movs	r3, #156	@ 0x9c
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2201      	movs	r2, #1
 8007442:	4013      	ands	r3, r2
 8007444:	d106      	bne.n	8007454 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007446:	23a0      	movs	r3, #160	@ 0xa0
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a86      	ldr	r2, [pc, #536]	@ (8007668 <HAL_UART_IRQHandler+0x2a8>)
 800744e:	4013      	ands	r3, r2
 8007450:	d100      	bne.n	8007454 <HAL_UART_IRQHandler+0x94>
 8007452:	e10d      	b.n	8007670 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007454:	23a4      	movs	r3, #164	@ 0xa4
 8007456:	18fb      	adds	r3, r7, r3
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2201      	movs	r2, #1
 800745c:	4013      	ands	r3, r2
 800745e:	d012      	beq.n	8007486 <HAL_UART_IRQHandler+0xc6>
 8007460:	23a0      	movs	r3, #160	@ 0xa0
 8007462:	18fb      	adds	r3, r7, r3
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	2380      	movs	r3, #128	@ 0x80
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4013      	ands	r3, r2
 800746c:	d00b      	beq.n	8007486 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2201      	movs	r2, #1
 8007474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2284      	movs	r2, #132	@ 0x84
 800747a:	589b      	ldr	r3, [r3, r2]
 800747c:	2201      	movs	r2, #1
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2184      	movs	r1, #132	@ 0x84
 8007484:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007486:	23a4      	movs	r3, #164	@ 0xa4
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2202      	movs	r2, #2
 800748e:	4013      	ands	r3, r2
 8007490:	d011      	beq.n	80074b6 <HAL_UART_IRQHandler+0xf6>
 8007492:	239c      	movs	r3, #156	@ 0x9c
 8007494:	18fb      	adds	r3, r7, r3
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2201      	movs	r2, #1
 800749a:	4013      	ands	r3, r2
 800749c:	d00b      	beq.n	80074b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2202      	movs	r2, #2
 80074a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2284      	movs	r2, #132	@ 0x84
 80074aa:	589b      	ldr	r3, [r3, r2]
 80074ac:	2204      	movs	r2, #4
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2184      	movs	r1, #132	@ 0x84
 80074b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b6:	23a4      	movs	r3, #164	@ 0xa4
 80074b8:	18fb      	adds	r3, r7, r3
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2204      	movs	r2, #4
 80074be:	4013      	ands	r3, r2
 80074c0:	d011      	beq.n	80074e6 <HAL_UART_IRQHandler+0x126>
 80074c2:	239c      	movs	r3, #156	@ 0x9c
 80074c4:	18fb      	adds	r3, r7, r3
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2201      	movs	r2, #1
 80074ca:	4013      	ands	r3, r2
 80074cc:	d00b      	beq.n	80074e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2204      	movs	r2, #4
 80074d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2284      	movs	r2, #132	@ 0x84
 80074da:	589b      	ldr	r3, [r3, r2]
 80074dc:	2202      	movs	r2, #2
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2184      	movs	r1, #132	@ 0x84
 80074e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074e6:	23a4      	movs	r3, #164	@ 0xa4
 80074e8:	18fb      	adds	r3, r7, r3
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2208      	movs	r2, #8
 80074ee:	4013      	ands	r3, r2
 80074f0:	d017      	beq.n	8007522 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074f2:	23a0      	movs	r3, #160	@ 0xa0
 80074f4:	18fb      	adds	r3, r7, r3
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2220      	movs	r2, #32
 80074fa:	4013      	ands	r3, r2
 80074fc:	d105      	bne.n	800750a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074fe:	239c      	movs	r3, #156	@ 0x9c
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2201      	movs	r2, #1
 8007506:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007508:	d00b      	beq.n	8007522 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2208      	movs	r2, #8
 8007510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2284      	movs	r2, #132	@ 0x84
 8007516:	589b      	ldr	r3, [r3, r2]
 8007518:	2208      	movs	r2, #8
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2184      	movs	r1, #132	@ 0x84
 8007520:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007522:	23a4      	movs	r3, #164	@ 0xa4
 8007524:	18fb      	adds	r3, r7, r3
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	2380      	movs	r3, #128	@ 0x80
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	4013      	ands	r3, r2
 800752e:	d013      	beq.n	8007558 <HAL_UART_IRQHandler+0x198>
 8007530:	23a0      	movs	r3, #160	@ 0xa0
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	2380      	movs	r3, #128	@ 0x80
 8007538:	04db      	lsls	r3, r3, #19
 800753a:	4013      	ands	r3, r2
 800753c:	d00c      	beq.n	8007558 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2280      	movs	r2, #128	@ 0x80
 8007544:	0112      	lsls	r2, r2, #4
 8007546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2284      	movs	r2, #132	@ 0x84
 800754c:	589b      	ldr	r3, [r3, r2]
 800754e:	2220      	movs	r2, #32
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2184      	movs	r1, #132	@ 0x84
 8007556:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2284      	movs	r2, #132	@ 0x84
 800755c:	589b      	ldr	r3, [r3, r2]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d100      	bne.n	8007564 <HAL_UART_IRQHandler+0x1a4>
 8007562:	e209      	b.n	8007978 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007564:	23a4      	movs	r3, #164	@ 0xa4
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2220      	movs	r2, #32
 800756c:	4013      	ands	r3, r2
 800756e:	d00e      	beq.n	800758e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007570:	23a0      	movs	r3, #160	@ 0xa0
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2220      	movs	r2, #32
 8007578:	4013      	ands	r3, r2
 800757a:	d008      	beq.n	800758e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	0010      	movs	r0, r2
 800758c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2284      	movs	r2, #132	@ 0x84
 8007592:	589b      	ldr	r3, [r3, r2]
 8007594:	2194      	movs	r1, #148	@ 0x94
 8007596:	187a      	adds	r2, r7, r1
 8007598:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2240      	movs	r2, #64	@ 0x40
 80075a2:	4013      	ands	r3, r2
 80075a4:	2b40      	cmp	r3, #64	@ 0x40
 80075a6:	d004      	beq.n	80075b2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075a8:	187b      	adds	r3, r7, r1
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2228      	movs	r2, #40	@ 0x28
 80075ae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075b0:	d04b      	beq.n	800764a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f000 fe89 	bl	80082cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2240      	movs	r2, #64	@ 0x40
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b40      	cmp	r3, #64	@ 0x40
 80075c6:	d139      	bne.n	800763c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c8:	f3ef 8310 	mrs	r3, PRIMASK
 80075cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80075ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075d0:	2090      	movs	r0, #144	@ 0x90
 80075d2:	183a      	adds	r2, r7, r0
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	2301      	movs	r3, #1
 80075d8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075dc:	f383 8810 	msr	PRIMASK, r3
}
 80075e0:	46c0      	nop			@ (mov r8, r8)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2140      	movs	r1, #64	@ 0x40
 80075ee:	438a      	bics	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
 80075f2:	183b      	adds	r3, r7, r0
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075fa:	f383 8810 	msr	PRIMASK, r3
}
 80075fe:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007604:	2b00      	cmp	r3, #0
 8007606:	d012      	beq.n	800762e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760c:	4a17      	ldr	r2, [pc, #92]	@ (800766c <HAL_UART_IRQHandler+0x2ac>)
 800760e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007614:	0018      	movs	r0, r3
 8007616:	f7fc fa45 	bl	8003aa4 <HAL_DMA_Abort_IT>
 800761a:	1e03      	subs	r3, r0, #0
 800761c:	d020      	beq.n	8007660 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007628:	0018      	movs	r0, r3
 800762a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762c:	e018      	b.n	8007660 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2298      	movs	r2, #152	@ 0x98
 8007632:	589b      	ldr	r3, [r3, r2]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	0010      	movs	r0, r2
 8007638:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763a:	e011      	b.n	8007660 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2298      	movs	r2, #152	@ 0x98
 8007640:	589b      	ldr	r3, [r3, r2]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	0010      	movs	r0, r2
 8007646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	e00a      	b.n	8007660 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2298      	movs	r2, #152	@ 0x98
 800764e:	589b      	ldr	r3, [r3, r2]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	0010      	movs	r0, r2
 8007654:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2284      	movs	r2, #132	@ 0x84
 800765a:	2100      	movs	r1, #0
 800765c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800765e:	e18b      	b.n	8007978 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	46c0      	nop			@ (mov r8, r8)
    return;
 8007662:	e189      	b.n	8007978 <HAL_UART_IRQHandler+0x5b8>
 8007664:	0000080f 	.word	0x0000080f
 8007668:	04000120 	.word	0x04000120
 800766c:	08008595 	.word	0x08008595

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007674:	2b01      	cmp	r3, #1
 8007676:	d000      	beq.n	800767a <HAL_UART_IRQHandler+0x2ba>
 8007678:	e13b      	b.n	80078f2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800767a:	23a4      	movs	r3, #164	@ 0xa4
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2210      	movs	r2, #16
 8007682:	4013      	ands	r3, r2
 8007684:	d100      	bne.n	8007688 <HAL_UART_IRQHandler+0x2c8>
 8007686:	e134      	b.n	80078f2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007688:	23a0      	movs	r3, #160	@ 0xa0
 800768a:	18fb      	adds	r3, r7, r3
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2210      	movs	r2, #16
 8007690:	4013      	ands	r3, r2
 8007692:	d100      	bne.n	8007696 <HAL_UART_IRQHandler+0x2d6>
 8007694:	e12d      	b.n	80078f2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2210      	movs	r2, #16
 800769c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2240      	movs	r2, #64	@ 0x40
 80076a6:	4013      	ands	r3, r2
 80076a8:	2b40      	cmp	r3, #64	@ 0x40
 80076aa:	d000      	beq.n	80076ae <HAL_UART_IRQHandler+0x2ee>
 80076ac:	e0a0      	b.n	80077f0 <HAL_UART_IRQHandler+0x430>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	217e      	movs	r1, #126	@ 0x7e
 80076b8:	187b      	adds	r3, r7, r1
 80076ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80076bc:	187b      	adds	r3, r7, r1
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d100      	bne.n	80076c6 <HAL_UART_IRQHandler+0x306>
 80076c4:	e15a      	b.n	800797c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2258      	movs	r2, #88	@ 0x58
 80076ca:	5a9b      	ldrh	r3, [r3, r2]
 80076cc:	187a      	adds	r2, r7, r1
 80076ce:	8812      	ldrh	r2, [r2, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d300      	bcc.n	80076d6 <HAL_UART_IRQHandler+0x316>
 80076d4:	e152      	b.n	800797c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	187a      	adds	r2, r7, r1
 80076da:	215a      	movs	r1, #90	@ 0x5a
 80076dc:	8812      	ldrh	r2, [r2, #0]
 80076de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d06f      	beq.n	80077ca <HAL_UART_IRQHandler+0x40a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ea:	f3ef 8310 	mrs	r3, PRIMASK
 80076ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076f4:	2301      	movs	r3, #1
 80076f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fa:	f383 8810 	msr	PRIMASK, r3
}
 80076fe:	46c0      	nop			@ (mov r8, r8)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	49a0      	ldr	r1, [pc, #640]	@ (800798c <HAL_UART_IRQHandler+0x5cc>)
 800770c:	400a      	ands	r2, r1
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007712:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007716:	f383 8810 	msr	PRIMASK, r3
}
 800771a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800771c:	f3ef 8310 	mrs	r3, PRIMASK
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8007722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007724:	677b      	str	r3, [r7, #116]	@ 0x74
 8007726:	2301      	movs	r3, #1
 8007728:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800772c:	f383 8810 	msr	PRIMASK, r3
}
 8007730:	46c0      	nop			@ (mov r8, r8)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2101      	movs	r1, #1
 800773e:	438a      	bics	r2, r1
 8007740:	609a      	str	r2, [r3, #8]
 8007742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007744:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007748:	f383 8810 	msr	PRIMASK, r3
}
 800774c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800774e:	f3ef 8310 	mrs	r3, PRIMASK
 8007752:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007756:	673b      	str	r3, [r7, #112]	@ 0x70
 8007758:	2301      	movs	r3, #1
 800775a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800775e:	f383 8810 	msr	PRIMASK, r3
}
 8007762:	46c0      	nop			@ (mov r8, r8)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2140      	movs	r1, #64	@ 0x40
 8007770:	438a      	bics	r2, r1
 8007772:	609a      	str	r2, [r3, #8]
 8007774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007776:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800777a:	f383 8810 	msr	PRIMASK, r3
}
 800777e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2280      	movs	r2, #128	@ 0x80
 8007784:	2120      	movs	r1, #32
 8007786:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800778e:	f3ef 8310 	mrs	r3, PRIMASK
 8007792:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8007794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007796:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007798:	2301      	movs	r3, #1
 800779a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800779e:	f383 8810 	msr	PRIMASK, r3
}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2110      	movs	r1, #16
 80077b0:	438a      	bics	r2, r1
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077ba:	f383 8810 	msr	PRIMASK, r3
}
 80077be:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c4:	0018      	movs	r0, r3
 80077c6:	f7fc f935 	bl	8003a34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	22ac      	movs	r2, #172	@ 0xac
 80077d4:	589b      	ldr	r3, [r3, r2]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	2158      	movs	r1, #88	@ 0x58
 80077da:	5a51      	ldrh	r1, [r2, r1]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	205a      	movs	r0, #90	@ 0x5a
 80077e0:	5a12      	ldrh	r2, [r2, r0]
 80077e2:	b292      	uxth	r2, r2
 80077e4:	1a8a      	subs	r2, r1, r2
 80077e6:	b291      	uxth	r1, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	0010      	movs	r0, r2
 80077ec:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077ee:	e0c5      	b.n	800797c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2258      	movs	r2, #88	@ 0x58
 80077f4:	5a99      	ldrh	r1, [r3, r2]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	225a      	movs	r2, #90	@ 0x5a
 80077fa:	5a9b      	ldrh	r3, [r3, r2]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	208e      	movs	r0, #142	@ 0x8e
 8007800:	183b      	adds	r3, r7, r0
 8007802:	1a8a      	subs	r2, r1, r2
 8007804:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	225a      	movs	r2, #90	@ 0x5a
 800780a:	5a9b      	ldrh	r3, [r3, r2]
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d100      	bne.n	8007814 <HAL_UART_IRQHandler+0x454>
 8007812:	e0b5      	b.n	8007980 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007814:	183b      	adds	r3, r7, r0
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d100      	bne.n	800781e <HAL_UART_IRQHandler+0x45e>
 800781c:	e0b0      	b.n	8007980 <HAL_UART_IRQHandler+0x5c0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800781e:	f3ef 8310 	mrs	r3, PRIMASK
 8007822:	60fb      	str	r3, [r7, #12]
  return(result);
 8007824:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007826:	2488      	movs	r4, #136	@ 0x88
 8007828:	193a      	adds	r2, r7, r4
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	2301      	movs	r3, #1
 800782e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f383 8810 	msr	PRIMASK, r3
}
 8007836:	46c0      	nop			@ (mov r8, r8)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4953      	ldr	r1, [pc, #332]	@ (8007990 <HAL_UART_IRQHandler+0x5d0>)
 8007844:	400a      	ands	r2, r1
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	193b      	adds	r3, r7, r4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f383 8810 	msr	PRIMASK, r3
}
 8007854:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007856:	f3ef 8310 	mrs	r3, PRIMASK
 800785a:	61bb      	str	r3, [r7, #24]
  return(result);
 800785c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	2484      	movs	r4, #132	@ 0x84
 8007860:	193a      	adds	r2, r7, r4
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	2301      	movs	r3, #1
 8007866:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f383 8810 	msr	PRIMASK, r3
}
 800786e:	46c0      	nop			@ (mov r8, r8)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2101      	movs	r1, #1
 800787c:	438a      	bics	r2, r1
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	193b      	adds	r3, r7, r4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	f383 8810 	msr	PRIMASK, r3
}
 800788c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2280      	movs	r2, #128	@ 0x80
 8007892:	2120      	movs	r1, #32
 8007894:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078a2:	f3ef 8310 	mrs	r3, PRIMASK
 80078a6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078aa:	2480      	movs	r4, #128	@ 0x80
 80078ac:	193a      	adds	r2, r7, r4
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	2301      	movs	r3, #1
 80078b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	f383 8810 	msr	PRIMASK, r3
}
 80078ba:	46c0      	nop			@ (mov r8, r8)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2110      	movs	r1, #16
 80078c8:	438a      	bics	r2, r1
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	193b      	adds	r3, r7, r4
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d4:	f383 8810 	msr	PRIMASK, r3
}
 80078d8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	22ac      	movs	r2, #172	@ 0xac
 80078e4:	589b      	ldr	r3, [r3, r2]
 80078e6:	183a      	adds	r2, r7, r0
 80078e8:	8811      	ldrh	r1, [r2, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	0010      	movs	r0, r2
 80078ee:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078f0:	e046      	b.n	8007980 <HAL_UART_IRQHandler+0x5c0>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078f2:	23a4      	movs	r3, #164	@ 0xa4
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	2380      	movs	r3, #128	@ 0x80
 80078fa:	035b      	lsls	r3, r3, #13
 80078fc:	4013      	ands	r3, r2
 80078fe:	d012      	beq.n	8007926 <HAL_UART_IRQHandler+0x566>
 8007900:	239c      	movs	r3, #156	@ 0x9c
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	2380      	movs	r3, #128	@ 0x80
 8007908:	03db      	lsls	r3, r3, #15
 800790a:	4013      	ands	r3, r2
 800790c:	d00b      	beq.n	8007926 <HAL_UART_IRQHandler+0x566>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2280      	movs	r2, #128	@ 0x80
 8007914:	0352      	lsls	r2, r2, #13
 8007916:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	22a8      	movs	r2, #168	@ 0xa8
 800791c:	589b      	ldr	r3, [r3, r2]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	0010      	movs	r0, r2
 8007922:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007924:	e02f      	b.n	8007986 <HAL_UART_IRQHandler+0x5c6>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007926:	23a4      	movs	r3, #164	@ 0xa4
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2280      	movs	r2, #128	@ 0x80
 800792e:	4013      	ands	r3, r2
 8007930:	d00f      	beq.n	8007952 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007932:	23a0      	movs	r3, #160	@ 0xa0
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2280      	movs	r2, #128	@ 0x80
 800793a:	4013      	ands	r3, r2
 800793c:	d009      	beq.n	8007952 <HAL_UART_IRQHandler+0x592>
  {
    if (huart->TxISR != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01e      	beq.n	8007984 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	0010      	movs	r0, r2
 800794e:	4798      	blx	r3
    }
    return;
 8007950:	e018      	b.n	8007984 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007952:	23a4      	movs	r3, #164	@ 0xa4
 8007954:	18fb      	adds	r3, r7, r3
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2240      	movs	r2, #64	@ 0x40
 800795a:	4013      	ands	r3, r2
 800795c:	d013      	beq.n	8007986 <HAL_UART_IRQHandler+0x5c6>
 800795e:	23a0      	movs	r3, #160	@ 0xa0
 8007960:	18fb      	adds	r3, r7, r3
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2240      	movs	r2, #64	@ 0x40
 8007966:	4013      	ands	r3, r2
 8007968:	d00d      	beq.n	8007986 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	0018      	movs	r0, r3
 800796e:	f000 fee1 	bl	8008734 <UART_EndTransmit_IT>
    return;
 8007972:	e008      	b.n	8007986 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007974:	46c0      	nop			@ (mov r8, r8)
 8007976:	e006      	b.n	8007986 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007978:	46c0      	nop			@ (mov r8, r8)
 800797a:	e004      	b.n	8007986 <HAL_UART_IRQHandler+0x5c6>
      return;
 800797c:	46c0      	nop			@ (mov r8, r8)
 800797e:	e002      	b.n	8007986 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007980:	46c0      	nop			@ (mov r8, r8)
 8007982:	e000      	b.n	8007986 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007984:	46c0      	nop			@ (mov r8, r8)
  }

}
 8007986:	46bd      	mov	sp, r7
 8007988:	b02b      	add	sp, #172	@ 0xac
 800798a:	bd90      	pop	{r4, r7, pc}
 800798c:	fffffeff 	.word	0xfffffeff
 8007990:	fffffedf 	.word	0xfffffedf

08007994 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800799c:	46c0      	nop			@ (mov r8, r8)
 800799e:	46bd      	mov	sp, r7
 80079a0:	b002      	add	sp, #8
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80079ac:	46c0      	nop			@ (mov r8, r8)
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b002      	add	sp, #8
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80079bc:	46c0      	nop			@ (mov r8, r8)
 80079be:	46bd      	mov	sp, r7
 80079c0:	b002      	add	sp, #8
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079cc:	46c0      	nop			@ (mov r8, r8)
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b002      	add	sp, #8
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079dc:	46c0      	nop			@ (mov r8, r8)
 80079de:	46bd      	mov	sp, r7
 80079e0:	b002      	add	sp, #8
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80079ec:	46c0      	nop			@ (mov r8, r8)
 80079ee:	46bd      	mov	sp, r7
 80079f0:	b002      	add	sp, #8
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80079fc:	46c0      	nop			@ (mov r8, r8)
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b002      	add	sp, #8
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007a0c:	46c0      	nop			@ (mov r8, r8)
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b002      	add	sp, #8
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2188      	movs	r1, #136	@ 0x88
 8007a20:	4a14      	ldr	r2, [pc, #80]	@ (8007a74 <UART_InitCallbacksToDefault+0x60>)
 8007a22:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	218c      	movs	r1, #140	@ 0x8c
 8007a28:	4a13      	ldr	r2, [pc, #76]	@ (8007a78 <UART_InitCallbacksToDefault+0x64>)
 8007a2a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2190      	movs	r1, #144	@ 0x90
 8007a30:	4a12      	ldr	r2, [pc, #72]	@ (8007a7c <UART_InitCallbacksToDefault+0x68>)
 8007a32:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2194      	movs	r1, #148	@ 0x94
 8007a38:	4a11      	ldr	r2, [pc, #68]	@ (8007a80 <UART_InitCallbacksToDefault+0x6c>)
 8007a3a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2198      	movs	r1, #152	@ 0x98
 8007a40:	4a10      	ldr	r2, [pc, #64]	@ (8007a84 <UART_InitCallbacksToDefault+0x70>)
 8007a42:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	219c      	movs	r1, #156	@ 0x9c
 8007a48:	4a0f      	ldr	r2, [pc, #60]	@ (8007a88 <UART_InitCallbacksToDefault+0x74>)
 8007a4a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	21a0      	movs	r1, #160	@ 0xa0
 8007a50:	4a0e      	ldr	r2, [pc, #56]	@ (8007a8c <UART_InitCallbacksToDefault+0x78>)
 8007a52:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	21a4      	movs	r1, #164	@ 0xa4
 8007a58:	4a0d      	ldr	r2, [pc, #52]	@ (8007a90 <UART_InitCallbacksToDefault+0x7c>)
 8007a5a:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	21a8      	movs	r1, #168	@ 0xa8
 8007a60:	4a0c      	ldr	r2, [pc, #48]	@ (8007a94 <UART_InitCallbacksToDefault+0x80>)
 8007a62:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	21ac      	movs	r1, #172	@ 0xac
 8007a68:	4a0b      	ldr	r2, [pc, #44]	@ (8007a98 <UART_InitCallbacksToDefault+0x84>)
 8007a6a:	505a      	str	r2, [r3, r1]

}
 8007a6c:	46c0      	nop			@ (mov r8, r8)
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b002      	add	sp, #8
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	080079a5 	.word	0x080079a5
 8007a78:	08007995 	.word	0x08007995
 8007a7c:	080079c5 	.word	0x080079c5
 8007a80:	080079b5 	.word	0x080079b5
 8007a84:	080079d5 	.word	0x080079d5
 8007a88:	080079e5 	.word	0x080079e5
 8007a8c:	080079f5 	.word	0x080079f5
 8007a90:	08007a05 	.word	0x08007a05
 8007a94:	0800878f 	.word	0x0800878f
 8007a98:	08002a81 	.word	0x08002a81

08007a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007aa4:	231e      	movs	r3, #30
 8007aa6:	18fb      	adds	r3, r7, r3
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4aaf      	ldr	r2, [pc, #700]	@ (8007d88 <UART_SetConfig+0x2ec>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	0019      	movs	r1, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4aaa      	ldr	r2, [pc, #680]	@ (8007d8c <UART_SetConfig+0x2f0>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	0019      	movs	r1, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	4aa1      	ldr	r2, [pc, #644]	@ (8007d90 <UART_SetConfig+0x2f4>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	0019      	movs	r1, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a9d      	ldr	r2, [pc, #628]	@ (8007d94 <UART_SetConfig+0x2f8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d127      	bne.n	8007b72 <UART_SetConfig+0xd6>
 8007b22:	4b9d      	ldr	r3, [pc, #628]	@ (8007d98 <UART_SetConfig+0x2fc>)
 8007b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b26:	2203      	movs	r2, #3
 8007b28:	4013      	ands	r3, r2
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d00d      	beq.n	8007b4a <UART_SetConfig+0xae>
 8007b2e:	d81b      	bhi.n	8007b68 <UART_SetConfig+0xcc>
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d014      	beq.n	8007b5e <UART_SetConfig+0xc2>
 8007b34:	d818      	bhi.n	8007b68 <UART_SetConfig+0xcc>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <UART_SetConfig+0xa4>
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d00a      	beq.n	8007b54 <UART_SetConfig+0xb8>
 8007b3e:	e013      	b.n	8007b68 <UART_SetConfig+0xcc>
 8007b40:	231f      	movs	r3, #31
 8007b42:	18fb      	adds	r3, r7, r3
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e065      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007b4a:	231f      	movs	r3, #31
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	2202      	movs	r2, #2
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	e060      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007b54:	231f      	movs	r3, #31
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	2204      	movs	r2, #4
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	e05b      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007b5e:	231f      	movs	r3, #31
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	2208      	movs	r2, #8
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e056      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007b68:	231f      	movs	r3, #31
 8007b6a:	18fb      	adds	r3, r7, r3
 8007b6c:	2210      	movs	r2, #16
 8007b6e:	701a      	strb	r2, [r3, #0]
 8007b70:	e051      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a89      	ldr	r2, [pc, #548]	@ (8007d9c <UART_SetConfig+0x300>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d134      	bne.n	8007be6 <UART_SetConfig+0x14a>
 8007b7c:	4b86      	ldr	r3, [pc, #536]	@ (8007d98 <UART_SetConfig+0x2fc>)
 8007b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b80:	23c0      	movs	r3, #192	@ 0xc0
 8007b82:	029b      	lsls	r3, r3, #10
 8007b84:	4013      	ands	r3, r2
 8007b86:	22c0      	movs	r2, #192	@ 0xc0
 8007b88:	0292      	lsls	r2, r2, #10
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d017      	beq.n	8007bbe <UART_SetConfig+0x122>
 8007b8e:	22c0      	movs	r2, #192	@ 0xc0
 8007b90:	0292      	lsls	r2, r2, #10
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d822      	bhi.n	8007bdc <UART_SetConfig+0x140>
 8007b96:	2280      	movs	r2, #128	@ 0x80
 8007b98:	0292      	lsls	r2, r2, #10
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d019      	beq.n	8007bd2 <UART_SetConfig+0x136>
 8007b9e:	2280      	movs	r2, #128	@ 0x80
 8007ba0:	0292      	lsls	r2, r2, #10
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d81a      	bhi.n	8007bdc <UART_SetConfig+0x140>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <UART_SetConfig+0x118>
 8007baa:	2280      	movs	r2, #128	@ 0x80
 8007bac:	0252      	lsls	r2, r2, #9
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00a      	beq.n	8007bc8 <UART_SetConfig+0x12c>
 8007bb2:	e013      	b.n	8007bdc <UART_SetConfig+0x140>
 8007bb4:	231f      	movs	r3, #31
 8007bb6:	18fb      	adds	r3, r7, r3
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	e02b      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007bbe:	231f      	movs	r3, #31
 8007bc0:	18fb      	adds	r3, r7, r3
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	e026      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007bc8:	231f      	movs	r3, #31
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	2204      	movs	r2, #4
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e021      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007bd2:	231f      	movs	r3, #31
 8007bd4:	18fb      	adds	r3, r7, r3
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	e01c      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007bdc:	231f      	movs	r3, #31
 8007bde:	18fb      	adds	r3, r7, r3
 8007be0:	2210      	movs	r2, #16
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e017      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a6d      	ldr	r2, [pc, #436]	@ (8007da0 <UART_SetConfig+0x304>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d104      	bne.n	8007bfa <UART_SetConfig+0x15e>
 8007bf0:	231f      	movs	r3, #31
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e00d      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a69      	ldr	r2, [pc, #420]	@ (8007da4 <UART_SetConfig+0x308>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d104      	bne.n	8007c0e <UART_SetConfig+0x172>
 8007c04:	231f      	movs	r3, #31
 8007c06:	18fb      	adds	r3, r7, r3
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
 8007c0c:	e003      	b.n	8007c16 <UART_SetConfig+0x17a>
 8007c0e:	231f      	movs	r3, #31
 8007c10:	18fb      	adds	r3, r7, r3
 8007c12:	2210      	movs	r2, #16
 8007c14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69da      	ldr	r2, [r3, #28]
 8007c1a:	2380      	movs	r3, #128	@ 0x80
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d15c      	bne.n	8007cdc <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8007c22:	231f      	movs	r3, #31
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d015      	beq.n	8007c58 <UART_SetConfig+0x1bc>
 8007c2c:	dc18      	bgt.n	8007c60 <UART_SetConfig+0x1c4>
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d00d      	beq.n	8007c4e <UART_SetConfig+0x1b2>
 8007c32:	dc15      	bgt.n	8007c60 <UART_SetConfig+0x1c4>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <UART_SetConfig+0x1a2>
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d005      	beq.n	8007c48 <UART_SetConfig+0x1ac>
 8007c3c:	e010      	b.n	8007c60 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c3e:	f7fe fd4d 	bl	80066dc <HAL_RCC_GetPCLK1Freq>
 8007c42:	0003      	movs	r3, r0
 8007c44:	61bb      	str	r3, [r7, #24]
        break;
 8007c46:	e012      	b.n	8007c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c48:	4b57      	ldr	r3, [pc, #348]	@ (8007da8 <UART_SetConfig+0x30c>)
 8007c4a:	61bb      	str	r3, [r7, #24]
        break;
 8007c4c:	e00f      	b.n	8007c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4e:	f7fe fcc9 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 8007c52:	0003      	movs	r3, r0
 8007c54:	61bb      	str	r3, [r7, #24]
        break;
 8007c56:	e00a      	b.n	8007c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c58:	2380      	movs	r3, #128	@ 0x80
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	61bb      	str	r3, [r7, #24]
        break;
 8007c5e:	e006      	b.n	8007c6e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c64:	231e      	movs	r3, #30
 8007c66:	18fb      	adds	r3, r7, r3
 8007c68:	2201      	movs	r2, #1
 8007c6a:	701a      	strb	r2, [r3, #0]
        break;
 8007c6c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d100      	bne.n	8007c76 <UART_SetConfig+0x1da>
 8007c74:	e07a      	b.n	8007d6c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	005a      	lsls	r2, r3, #1
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	18d2      	adds	r2, r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	0019      	movs	r1, r3
 8007c88:	0010      	movs	r0, r2
 8007c8a:	f7f8 fa59 	bl	8000140 <__udivsi3>
 8007c8e:	0003      	movs	r3, r0
 8007c90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b0f      	cmp	r3, #15
 8007c96:	d91c      	bls.n	8007cd2 <UART_SetConfig+0x236>
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	2380      	movs	r3, #128	@ 0x80
 8007c9c:	025b      	lsls	r3, r3, #9
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d217      	bcs.n	8007cd2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	200e      	movs	r0, #14
 8007ca8:	183b      	adds	r3, r7, r0
 8007caa:	210f      	movs	r1, #15
 8007cac:	438a      	bics	r2, r1
 8007cae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2207      	movs	r2, #7
 8007cb8:	4013      	ands	r3, r2
 8007cba:	b299      	uxth	r1, r3
 8007cbc:	183b      	adds	r3, r7, r0
 8007cbe:	183a      	adds	r2, r7, r0
 8007cc0:	8812      	ldrh	r2, [r2, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	183a      	adds	r2, r7, r0
 8007ccc:	8812      	ldrh	r2, [r2, #0]
 8007cce:	60da      	str	r2, [r3, #12]
 8007cd0:	e04c      	b.n	8007d6c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd2:	231e      	movs	r3, #30
 8007cd4:	18fb      	adds	r3, r7, r3
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e047      	b.n	8007d6c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cdc:	231f      	movs	r3, #31
 8007cde:	18fb      	adds	r3, r7, r3
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d015      	beq.n	8007d12 <UART_SetConfig+0x276>
 8007ce6:	dc18      	bgt.n	8007d1a <UART_SetConfig+0x27e>
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d00d      	beq.n	8007d08 <UART_SetConfig+0x26c>
 8007cec:	dc15      	bgt.n	8007d1a <UART_SetConfig+0x27e>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <UART_SetConfig+0x25c>
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d005      	beq.n	8007d02 <UART_SetConfig+0x266>
 8007cf6:	e010      	b.n	8007d1a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf8:	f7fe fcf0 	bl	80066dc <HAL_RCC_GetPCLK1Freq>
 8007cfc:	0003      	movs	r3, r0
 8007cfe:	61bb      	str	r3, [r7, #24]
        break;
 8007d00:	e012      	b.n	8007d28 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d02:	4b29      	ldr	r3, [pc, #164]	@ (8007da8 <UART_SetConfig+0x30c>)
 8007d04:	61bb      	str	r3, [r7, #24]
        break;
 8007d06:	e00f      	b.n	8007d28 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d08:	f7fe fc6c 	bl	80065e4 <HAL_RCC_GetSysClockFreq>
 8007d0c:	0003      	movs	r3, r0
 8007d0e:	61bb      	str	r3, [r7, #24]
        break;
 8007d10:	e00a      	b.n	8007d28 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d12:	2380      	movs	r3, #128	@ 0x80
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	61bb      	str	r3, [r7, #24]
        break;
 8007d18:	e006      	b.n	8007d28 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d1e:	231e      	movs	r3, #30
 8007d20:	18fb      	adds	r3, r7, r3
 8007d22:	2201      	movs	r2, #1
 8007d24:	701a      	strb	r2, [r3, #0]
        break;
 8007d26:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01e      	beq.n	8007d6c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	085a      	lsrs	r2, r3, #1
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	18d2      	adds	r2, r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	0019      	movs	r1, r3
 8007d3e:	0010      	movs	r0, r2
 8007d40:	f7f8 f9fe 	bl	8000140 <__udivsi3>
 8007d44:	0003      	movs	r3, r0
 8007d46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b0f      	cmp	r3, #15
 8007d4c:	d90a      	bls.n	8007d64 <UART_SetConfig+0x2c8>
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	2380      	movs	r3, #128	@ 0x80
 8007d52:	025b      	lsls	r3, r3, #9
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d205      	bcs.n	8007d64 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60da      	str	r2, [r3, #12]
 8007d62:	e003      	b.n	8007d6c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007d64:	231e      	movs	r3, #30
 8007d66:	18fb      	adds	r3, r7, r3
 8007d68:	2201      	movs	r2, #1
 8007d6a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d78:	231e      	movs	r3, #30
 8007d7a:	18fb      	adds	r3, r7, r3
 8007d7c:	781b      	ldrb	r3, [r3, #0]
}
 8007d7e:	0018      	movs	r0, r3
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b008      	add	sp, #32
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	46c0      	nop			@ (mov r8, r8)
 8007d88:	efff69f3 	.word	0xefff69f3
 8007d8c:	ffffcfff 	.word	0xffffcfff
 8007d90:	fffff4ff 	.word	0xfffff4ff
 8007d94:	40013800 	.word	0x40013800
 8007d98:	40021000 	.word	0x40021000
 8007d9c:	40004400 	.word	0x40004400
 8007da0:	40004800 	.word	0x40004800
 8007da4:	40004c00 	.word	0x40004c00
 8007da8:	007a1200 	.word	0x007a1200

08007dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db8:	2208      	movs	r2, #8
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d00b      	beq.n	8007dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8007ef0 <UART_AdvFeatureConfig+0x144>)
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	0019      	movs	r1, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dda:	2201      	movs	r2, #1
 8007ddc:	4013      	ands	r3, r2
 8007dde:	d00b      	beq.n	8007df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	4a43      	ldr	r2, [pc, #268]	@ (8007ef4 <UART_AdvFeatureConfig+0x148>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	0019      	movs	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	4013      	ands	r3, r2
 8007e00:	d00b      	beq.n	8007e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	4a3b      	ldr	r2, [pc, #236]	@ (8007ef8 <UART_AdvFeatureConfig+0x14c>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	0019      	movs	r1, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1e:	2204      	movs	r2, #4
 8007e20:	4013      	ands	r3, r2
 8007e22:	d00b      	beq.n	8007e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	4a34      	ldr	r2, [pc, #208]	@ (8007efc <UART_AdvFeatureConfig+0x150>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	0019      	movs	r1, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	2210      	movs	r2, #16
 8007e42:	4013      	ands	r3, r2
 8007e44:	d00b      	beq.n	8007e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f00 <UART_AdvFeatureConfig+0x154>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	0019      	movs	r1, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e62:	2220      	movs	r2, #32
 8007e64:	4013      	ands	r3, r2
 8007e66:	d00b      	beq.n	8007e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	4a25      	ldr	r2, [pc, #148]	@ (8007f04 <UART_AdvFeatureConfig+0x158>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	0019      	movs	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e84:	2240      	movs	r2, #64	@ 0x40
 8007e86:	4013      	ands	r3, r2
 8007e88:	d01d      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4a1d      	ldr	r2, [pc, #116]	@ (8007f08 <UART_AdvFeatureConfig+0x15c>)
 8007e92:	4013      	ands	r3, r2
 8007e94:	0019      	movs	r1, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ea6:	2380      	movs	r3, #128	@ 0x80
 8007ea8:	035b      	lsls	r3, r3, #13
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d10b      	bne.n	8007ec6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4a15      	ldr	r2, [pc, #84]	@ (8007f0c <UART_AdvFeatureConfig+0x160>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	0019      	movs	r1, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	2280      	movs	r2, #128	@ 0x80
 8007ecc:	4013      	ands	r3, r2
 8007ece:	d00b      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8007f10 <UART_AdvFeatureConfig+0x164>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	0019      	movs	r1, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }
}
 8007ee8:	46c0      	nop			@ (mov r8, r8)
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b002      	add	sp, #8
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	ffff7fff 	.word	0xffff7fff
 8007ef4:	fffdffff 	.word	0xfffdffff
 8007ef8:	fffeffff 	.word	0xfffeffff
 8007efc:	fffbffff 	.word	0xfffbffff
 8007f00:	ffffefff 	.word	0xffffefff
 8007f04:	ffffdfff 	.word	0xffffdfff
 8007f08:	ffefffff 	.word	0xffefffff
 8007f0c:	ff9fffff 	.word	0xff9fffff
 8007f10:	fff7ffff 	.word	0xfff7ffff

08007f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b092      	sub	sp, #72	@ 0x48
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2284      	movs	r2, #132	@ 0x84
 8007f20:	2100      	movs	r1, #0
 8007f22:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f24:	f7fb f97e 	bl	8003224 <HAL_GetTick>
 8007f28:	0003      	movs	r3, r0
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2208      	movs	r2, #8
 8007f34:	4013      	ands	r3, r2
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d12c      	bne.n	8007f94 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3c:	2280      	movs	r2, #128	@ 0x80
 8007f3e:	0391      	lsls	r1, r2, #14
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	4a46      	ldr	r2, [pc, #280]	@ (800805c <UART_CheckIdleState+0x148>)
 8007f44:	9200      	str	r2, [sp, #0]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f000 f88c 	bl	8008064 <UART_WaitOnFlagUntilTimeout>
 8007f4c:	1e03      	subs	r3, r0, #0
 8007f4e:	d021      	beq.n	8007f94 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f50:	f3ef 8310 	mrs	r3, PRIMASK
 8007f54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f60:	f383 8810 	msr	PRIMASK, r3
}
 8007f64:	46c0      	nop			@ (mov r8, r8)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2180      	movs	r1, #128	@ 0x80
 8007f72:	438a      	bics	r2, r1
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7c:	f383 8810 	msr	PRIMASK, r3
}
 8007f80:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2278      	movs	r2, #120	@ 0x78
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e05f      	b.n	8008054 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2204      	movs	r2, #4
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d146      	bne.n	8008030 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa4:	2280      	movs	r2, #128	@ 0x80
 8007fa6:	03d1      	lsls	r1, r2, #15
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4a2c      	ldr	r2, [pc, #176]	@ (800805c <UART_CheckIdleState+0x148>)
 8007fac:	9200      	str	r2, [sp, #0]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f000 f858 	bl	8008064 <UART_WaitOnFlagUntilTimeout>
 8007fb4:	1e03      	subs	r3, r0, #0
 8007fb6:	d03b      	beq.n	8008030 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f383 8810 	msr	PRIMASK, r3
}
 8007fcc:	46c0      	nop			@ (mov r8, r8)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4921      	ldr	r1, [pc, #132]	@ (8008060 <UART_CheckIdleState+0x14c>)
 8007fda:	400a      	ands	r2, r1
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f383 8810 	msr	PRIMASK, r3
}
 8007fe8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fea:	f3ef 8310 	mrs	r3, PRIMASK
 8007fee:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ff0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	f383 8810 	msr	PRIMASK, r3
}
 8007ffe:	46c0      	nop			@ (mov r8, r8)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2101      	movs	r1, #1
 800800c:	438a      	bics	r2, r1
 800800e:	609a      	str	r2, [r3, #8]
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	f383 8810 	msr	PRIMASK, r3
}
 800801a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2280      	movs	r2, #128	@ 0x80
 8008020:	2120      	movs	r1, #32
 8008022:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2278      	movs	r2, #120	@ 0x78
 8008028:	2100      	movs	r1, #0
 800802a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e011      	b.n	8008054 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2280      	movs	r2, #128	@ 0x80
 800803a:	2120      	movs	r1, #32
 800803c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2278      	movs	r2, #120	@ 0x78
 800804e:	2100      	movs	r1, #0
 8008050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	0018      	movs	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	b010      	add	sp, #64	@ 0x40
 800805a:	bd80      	pop	{r7, pc}
 800805c:	01ffffff 	.word	0x01ffffff
 8008060:	fffffedf 	.word	0xfffffedf

08008064 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	1dfb      	adds	r3, r7, #7
 8008072:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008074:	e051      	b.n	800811a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	3301      	adds	r3, #1
 800807a:	d04e      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800807c:	f7fb f8d2 	bl	8003224 <HAL_GetTick>
 8008080:	0002      	movs	r2, r0
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <UART_WaitOnFlagUntilTimeout+0x2e>
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e051      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2204      	movs	r2, #4
 800809e:	4013      	ands	r3, r2
 80080a0:	d03b      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb6>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b80      	cmp	r3, #128	@ 0x80
 80080a6:	d038      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb6>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b40      	cmp	r3, #64	@ 0x40
 80080ac:	d035      	beq.n	800811a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	2208      	movs	r2, #8
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d111      	bne.n	80080e0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2208      	movs	r2, #8
 80080c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	0018      	movs	r0, r3
 80080c8:	f000 f900 	bl	80082cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2284      	movs	r2, #132	@ 0x84
 80080d0:	2108      	movs	r1, #8
 80080d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2278      	movs	r2, #120	@ 0x78
 80080d8:	2100      	movs	r1, #0
 80080da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e02c      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69da      	ldr	r2, [r3, #28]
 80080e6:	2380      	movs	r3, #128	@ 0x80
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	401a      	ands	r2, r3
 80080ec:	2380      	movs	r3, #128	@ 0x80
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d112      	bne.n	800811a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2280      	movs	r2, #128	@ 0x80
 80080fa:	0112      	lsls	r2, r2, #4
 80080fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	0018      	movs	r0, r3
 8008102:	f000 f8e3 	bl	80082cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2284      	movs	r2, #132	@ 0x84
 800810a:	2120      	movs	r1, #32
 800810c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2278      	movs	r2, #120	@ 0x78
 8008112:	2100      	movs	r1, #0
 8008114:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e00f      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	4013      	ands	r3, r2
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	425a      	negs	r2, r3
 800812a:	4153      	adcs	r3, r2
 800812c:	b2db      	uxtb	r3, r3
 800812e:	001a      	movs	r2, r3
 8008130:	1dfb      	adds	r3, r7, #7
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	429a      	cmp	r2, r3
 8008136:	d09e      	beq.n	8008076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	0018      	movs	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	b004      	add	sp, #16
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b090      	sub	sp, #64	@ 0x40
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	1dbb      	adds	r3, r7, #6
 8008150:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	1dba      	adds	r2, r7, #6
 800815c:	2158      	movs	r1, #88	@ 0x58
 800815e:	8812      	ldrh	r2, [r2, #0]
 8008160:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2284      	movs	r2, #132	@ 0x84
 8008166:	2100      	movs	r1, #0
 8008168:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2280      	movs	r2, #128	@ 0x80
 800816e:	2122      	movs	r1, #34	@ 0x22
 8008170:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008176:	2b00      	cmp	r3, #0
 8008178:	d028      	beq.n	80081cc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800817e:	4a3e      	ldr	r2, [pc, #248]	@ (8008278 <UART_Start_Receive_DMA+0x134>)
 8008180:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008186:	4a3d      	ldr	r2, [pc, #244]	@ (800827c <UART_Start_Receive_DMA+0x138>)
 8008188:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800818e:	4a3c      	ldr	r2, [pc, #240]	@ (8008280 <UART_Start_Receive_DMA+0x13c>)
 8008190:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008196:	2200      	movs	r2, #0
 8008198:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3324      	adds	r3, #36	@ 0x24
 80081a4:	0019      	movs	r1, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081aa:	001a      	movs	r2, r3
 80081ac:	1dbb      	adds	r3, r7, #6
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	f7fb fbda 	bl	8003968 <HAL_DMA_Start_IT>
 80081b4:	1e03      	subs	r3, r0, #0
 80081b6:	d009      	beq.n	80081cc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2284      	movs	r2, #132	@ 0x84
 80081bc:	2110      	movs	r1, #16
 80081be:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2280      	movs	r2, #128	@ 0x80
 80081c4:	2120      	movs	r1, #32
 80081c6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e050      	b.n	800826e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d019      	beq.n	8008208 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d4:	f3ef 8310 	mrs	r3, PRIMASK
 80081d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081de:	2301      	movs	r3, #1
 80081e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e4:	f383 8810 	msr	PRIMASK, r3
}
 80081e8:	46c0      	nop			@ (mov r8, r8)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2180      	movs	r1, #128	@ 0x80
 80081f6:	0049      	lsls	r1, r1, #1
 80081f8:	430a      	orrs	r2, r1
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	f383 8810 	msr	PRIMASK, r3
}
 8008206:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008208:	f3ef 8310 	mrs	r3, PRIMASK
 800820c:	613b      	str	r3, [r7, #16]
  return(result);
 800820e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008212:	2301      	movs	r3, #1
 8008214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f383 8810 	msr	PRIMASK, r3
}
 800821c:	46c0      	nop			@ (mov r8, r8)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2101      	movs	r1, #1
 800822a:	430a      	orrs	r2, r1
 800822c:	609a      	str	r2, [r3, #8]
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f383 8810 	msr	PRIMASK, r3
}
 8008238:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800823a:	f3ef 8310 	mrs	r3, PRIMASK
 800823e:	61fb      	str	r3, [r7, #28]
  return(result);
 8008240:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008242:	637b      	str	r3, [r7, #52]	@ 0x34
 8008244:	2301      	movs	r3, #1
 8008246:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	f383 8810 	msr	PRIMASK, r3
}
 800824e:	46c0      	nop			@ (mov r8, r8)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2140      	movs	r1, #64	@ 0x40
 800825c:	430a      	orrs	r2, r1
 800825e:	609a      	str	r2, [r3, #8]
 8008260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	f383 8810 	msr	PRIMASK, r3
}
 800826a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	0018      	movs	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	b010      	add	sp, #64	@ 0x40
 8008274:	bd80      	pop	{r7, pc}
 8008276:	46c0      	nop			@ (mov r8, r8)
 8008278:	08008395 	.word	0x08008395
 800827c:	080084c5 	.word	0x080084c5
 8008280:	0800850d 	.word	0x0800850d

08008284 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800828c:	f3ef 8310 	mrs	r3, PRIMASK
 8008290:	60bb      	str	r3, [r7, #8]
  return(result);
 8008292:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	2301      	movs	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f383 8810 	msr	PRIMASK, r3
}
 80082a0:	46c0      	nop			@ (mov r8, r8)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	21c0      	movs	r1, #192	@ 0xc0
 80082ae:	438a      	bics	r2, r1
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f383 8810 	msr	PRIMASK, r3
}
 80082bc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80082c4:	46c0      	nop			@ (mov r8, r8)
 80082c6:	46bd      	mov	sp, r7
 80082c8:	b006      	add	sp, #24
 80082ca:	bd80      	pop	{r7, pc}

080082cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08e      	sub	sp, #56	@ 0x38
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d4:	f3ef 8310 	mrs	r3, PRIMASK
 80082d8:	617b      	str	r3, [r7, #20]
  return(result);
 80082da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082de:	2301      	movs	r3, #1
 80082e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	f383 8810 	msr	PRIMASK, r3
}
 80082e8:	46c0      	nop			@ (mov r8, r8)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4926      	ldr	r1, [pc, #152]	@ (8008390 <UART_EndRxTransfer+0xc4>)
 80082f6:	400a      	ands	r2, r1
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f383 8810 	msr	PRIMASK, r3
}
 8008304:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008306:	f3ef 8310 	mrs	r3, PRIMASK
 800830a:	623b      	str	r3, [r7, #32]
  return(result);
 800830c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008310:	2301      	movs	r3, #1
 8008312:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	f383 8810 	msr	PRIMASK, r3
}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2101      	movs	r1, #1
 8008328:	438a      	bics	r2, r1
 800832a:	609a      	str	r2, [r3, #8]
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008332:	f383 8810 	msr	PRIMASK, r3
}
 8008336:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800833c:	2b01      	cmp	r3, #1
 800833e:	d118      	bne.n	8008372 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008340:	f3ef 8310 	mrs	r3, PRIMASK
 8008344:	60bb      	str	r3, [r7, #8]
  return(result);
 8008346:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800834a:	2301      	movs	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f383 8810 	msr	PRIMASK, r3
}
 8008354:	46c0      	nop			@ (mov r8, r8)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2110      	movs	r1, #16
 8008362:	438a      	bics	r2, r1
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f383 8810 	msr	PRIMASK, r3
}
 8008370:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2280      	movs	r2, #128	@ 0x80
 8008376:	2120      	movs	r1, #32
 8008378:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008386:	46c0      	nop			@ (mov r8, r8)
 8008388:	46bd      	mov	sp, r7
 800838a:	b00e      	add	sp, #56	@ 0x38
 800838c:	bd80      	pop	{r7, pc}
 800838e:	46c0      	nop			@ (mov r8, r8)
 8008390:	fffffedf 	.word	0xfffffedf

08008394 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b094      	sub	sp, #80	@ 0x50
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d06f      	beq.n	800848a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80083aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ac:	225a      	movs	r2, #90	@ 0x5a
 80083ae:	2100      	movs	r1, #0
 80083b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083b2:	f3ef 8310 	mrs	r3, PRIMASK
 80083b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80083b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083bc:	2301      	movs	r3, #1
 80083be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f383 8810 	msr	PRIMASK, r3
}
 80083c6:	46c0      	nop			@ (mov r8, r8)
 80083c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	493b      	ldr	r1, [pc, #236]	@ (80084c0 <UART_DMAReceiveCplt+0x12c>)
 80083d4:	400a      	ands	r2, r1
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	f383 8810 	msr	PRIMASK, r3
}
 80083e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e4:	f3ef 8310 	mrs	r3, PRIMASK
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ee:	2301      	movs	r3, #1
 80083f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f4:	f383 8810 	msr	PRIMASK, r3
}
 80083f8:	46c0      	nop			@ (mov r8, r8)
 80083fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2101      	movs	r1, #1
 8008406:	438a      	bics	r2, r1
 8008408:	609a      	str	r2, [r3, #8]
 800840a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800840c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800840e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008410:	f383 8810 	msr	PRIMASK, r3
}
 8008414:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008416:	f3ef 8310 	mrs	r3, PRIMASK
 800841a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800841c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008420:	2301      	movs	r3, #1
 8008422:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	f383 8810 	msr	PRIMASK, r3
}
 800842a:	46c0      	nop			@ (mov r8, r8)
 800842c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2140      	movs	r1, #64	@ 0x40
 8008438:	438a      	bics	r2, r1
 800843a:	609a      	str	r2, [r3, #8]
 800843c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800843e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008442:	f383 8810 	msr	PRIMASK, r3
}
 8008446:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800844a:	2280      	movs	r2, #128	@ 0x80
 800844c:	2120      	movs	r1, #32
 800844e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008454:	2b01      	cmp	r3, #1
 8008456:	d118      	bne.n	800848a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008458:	f3ef 8310 	mrs	r3, PRIMASK
 800845c:	60fb      	str	r3, [r7, #12]
  return(result);
 800845e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008462:	2301      	movs	r3, #1
 8008464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f383 8810 	msr	PRIMASK, r3
}
 800846c:	46c0      	nop			@ (mov r8, r8)
 800846e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2110      	movs	r1, #16
 800847a:	438a      	bics	r2, r1
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008480:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f383 8810 	msr	PRIMASK, r3
}
 8008488:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800848a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800848c:	2200      	movs	r2, #0
 800848e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008494:	2b01      	cmp	r3, #1
 8008496:	d109      	bne.n	80084ac <UART_DMAReceiveCplt+0x118>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800849a:	22ac      	movs	r2, #172	@ 0xac
 800849c:	589b      	ldr	r3, [r3, r2]
 800849e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084a0:	2158      	movs	r1, #88	@ 0x58
 80084a2:	5a51      	ldrh	r1, [r2, r1]
 80084a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084a6:	0010      	movs	r0, r2
 80084a8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084aa:	e005      	b.n	80084b8 <UART_DMAReceiveCplt+0x124>
    huart->RxCpltCallback(huart);
 80084ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ae:	2294      	movs	r2, #148	@ 0x94
 80084b0:	589b      	ldr	r3, [r3, r2]
 80084b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084b4:	0010      	movs	r0, r2
 80084b6:	4798      	blx	r3
}
 80084b8:	46c0      	nop			@ (mov r8, r8)
 80084ba:	46bd      	mov	sp, r7
 80084bc:	b014      	add	sp, #80	@ 0x50
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	fffffeff 	.word	0xfffffeff

080084c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d10b      	bne.n	80084f8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	22ac      	movs	r2, #172	@ 0xac
 80084e4:	589b      	ldr	r3, [r3, r2]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	2158      	movs	r1, #88	@ 0x58
 80084ea:	5a52      	ldrh	r2, [r2, r1]
 80084ec:	0852      	lsrs	r2, r2, #1
 80084ee:	b291      	uxth	r1, r2
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	0010      	movs	r0, r2
 80084f4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084f6:	e005      	b.n	8008504 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2290      	movs	r2, #144	@ 0x90
 80084fc:	589b      	ldr	r3, [r3, r2]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	0010      	movs	r0, r2
 8008502:	4798      	blx	r3
}
 8008504:	46c0      	nop			@ (mov r8, r8)
 8008506:	46bd      	mov	sp, r7
 8008508:	b004      	add	sp, #16
 800850a:	bd80      	pop	{r7, pc}

0800850c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008518:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800851e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2280      	movs	r2, #128	@ 0x80
 8008524:	589b      	ldr	r3, [r3, r2]
 8008526:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2280      	movs	r2, #128	@ 0x80
 8008530:	4013      	ands	r3, r2
 8008532:	2b80      	cmp	r3, #128	@ 0x80
 8008534:	d10a      	bne.n	800854c <UART_DMAError+0x40>
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b21      	cmp	r3, #33	@ 0x21
 800853a:	d107      	bne.n	800854c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2252      	movs	r2, #82	@ 0x52
 8008540:	2100      	movs	r1, #0
 8008542:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	0018      	movs	r0, r3
 8008548:	f7ff fe9c 	bl	8008284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	2240      	movs	r2, #64	@ 0x40
 8008554:	4013      	ands	r3, r2
 8008556:	2b40      	cmp	r3, #64	@ 0x40
 8008558:	d10a      	bne.n	8008570 <UART_DMAError+0x64>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b22      	cmp	r3, #34	@ 0x22
 800855e:	d107      	bne.n	8008570 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	225a      	movs	r2, #90	@ 0x5a
 8008564:	2100      	movs	r1, #0
 8008566:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	0018      	movs	r0, r3
 800856c:	f7ff feae 	bl	80082cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2284      	movs	r2, #132	@ 0x84
 8008574:	589b      	ldr	r3, [r3, r2]
 8008576:	2210      	movs	r2, #16
 8008578:	431a      	orrs	r2, r3
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2184      	movs	r1, #132	@ 0x84
 800857e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2298      	movs	r2, #152	@ 0x98
 8008584:	589b      	ldr	r3, [r3, r2]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	0010      	movs	r0, r2
 800858a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800858c:	46c0      	nop			@ (mov r8, r8)
 800858e:	46bd      	mov	sp, r7
 8008590:	b006      	add	sp, #24
 8008592:	bd80      	pop	{r7, pc}

08008594 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	225a      	movs	r2, #90	@ 0x5a
 80085a6:	2100      	movs	r1, #0
 80085a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2252      	movs	r2, #82	@ 0x52
 80085ae:	2100      	movs	r1, #0
 80085b0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2298      	movs	r2, #152	@ 0x98
 80085b6:	589b      	ldr	r3, [r3, r2]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	0010      	movs	r0, r2
 80085bc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085be:	46c0      	nop			@ (mov r8, r8)
 80085c0:	46bd      	mov	sp, r7
 80085c2:	b004      	add	sp, #16
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b08a      	sub	sp, #40	@ 0x28
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085d2:	2b21      	cmp	r3, #33	@ 0x21
 80085d4:	d14c      	bne.n	8008670 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2252      	movs	r2, #82	@ 0x52
 80085da:	5a9b      	ldrh	r3, [r3, r2]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d132      	bne.n	8008648 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e2:	f3ef 8310 	mrs	r3, PRIMASK
 80085e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80085e8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ec:	2301      	movs	r3, #1
 80085ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f383 8810 	msr	PRIMASK, r3
}
 80085f6:	46c0      	nop			@ (mov r8, r8)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2180      	movs	r1, #128	@ 0x80
 8008604:	438a      	bics	r2, r1
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f383 8810 	msr	PRIMASK, r3
}
 8008612:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008614:	f3ef 8310 	mrs	r3, PRIMASK
 8008618:	617b      	str	r3, [r7, #20]
  return(result);
 800861a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800861c:	623b      	str	r3, [r7, #32]
 800861e:	2301      	movs	r3, #1
 8008620:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	f383 8810 	msr	PRIMASK, r3
}
 8008628:	46c0      	nop			@ (mov r8, r8)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2140      	movs	r1, #64	@ 0x40
 8008636:	430a      	orrs	r2, r1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	f383 8810 	msr	PRIMASK, r3
}
 8008644:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008646:	e013      	b.n	8008670 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800864c:	781a      	ldrb	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2252      	movs	r2, #82	@ 0x52
 8008662:	5a9b      	ldrh	r3, [r3, r2]
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b299      	uxth	r1, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2252      	movs	r2, #82	@ 0x52
 800866e:	5299      	strh	r1, [r3, r2]
}
 8008670:	46c0      	nop			@ (mov r8, r8)
 8008672:	46bd      	mov	sp, r7
 8008674:	b00a      	add	sp, #40	@ 0x28
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08c      	sub	sp, #48	@ 0x30
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008684:	2b21      	cmp	r3, #33	@ 0x21
 8008686:	d151      	bne.n	800872c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2252      	movs	r2, #82	@ 0x52
 800868c:	5a9b      	ldrh	r3, [r3, r2]
 800868e:	b29b      	uxth	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d132      	bne.n	80086fa <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008694:	f3ef 8310 	mrs	r3, PRIMASK
 8008698:	60fb      	str	r3, [r7, #12]
  return(result);
 800869a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800869c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800869e:	2301      	movs	r3, #1
 80086a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f383 8810 	msr	PRIMASK, r3
}
 80086a8:	46c0      	nop			@ (mov r8, r8)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2180      	movs	r1, #128	@ 0x80
 80086b6:	438a      	bics	r2, r1
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f383 8810 	msr	PRIMASK, r3
}
 80086c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c6:	f3ef 8310 	mrs	r3, PRIMASK
 80086ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80086cc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80086d0:	2301      	movs	r3, #1
 80086d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f383 8810 	msr	PRIMASK, r3
}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2140      	movs	r1, #64	@ 0x40
 80086e8:	430a      	orrs	r2, r1
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	f383 8810 	msr	PRIMASK, r3
}
 80086f6:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80086f8:	e018      	b.n	800872c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	881a      	ldrh	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	05d2      	lsls	r2, r2, #23
 800870a:	0dd2      	lsrs	r2, r2, #23
 800870c:	b292      	uxth	r2, r2
 800870e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008714:	1c9a      	adds	r2, r3, #2
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2252      	movs	r2, #82	@ 0x52
 800871e:	5a9b      	ldrh	r3, [r3, r2]
 8008720:	b29b      	uxth	r3, r3
 8008722:	3b01      	subs	r3, #1
 8008724:	b299      	uxth	r1, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2252      	movs	r2, #82	@ 0x52
 800872a:	5299      	strh	r1, [r3, r2]
}
 800872c:	46c0      	nop			@ (mov r8, r8)
 800872e:	46bd      	mov	sp, r7
 8008730:	b00c      	add	sp, #48	@ 0x30
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800873c:	f3ef 8310 	mrs	r3, PRIMASK
 8008740:	60bb      	str	r3, [r7, #8]
  return(result);
 8008742:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	2301      	movs	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f383 8810 	msr	PRIMASK, r3
}
 8008750:	46c0      	nop			@ (mov r8, r8)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2140      	movs	r1, #64	@ 0x40
 800875e:	438a      	bics	r2, r1
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f383 8810 	msr	PRIMASK, r3
}
 800876c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	228c      	movs	r2, #140	@ 0x8c
 800877e:	589b      	ldr	r3, [r3, r2]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	0010      	movs	r0, r2
 8008784:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008786:	46c0      	nop			@ (mov r8, r8)
 8008788:	46bd      	mov	sp, r7
 800878a:	b006      	add	sp, #24
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	46bd      	mov	sp, r7
 800879a:	b002      	add	sp, #8
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800879e:	b5b0      	push	{r4, r5, r7, lr}
 80087a0:	b08a      	sub	sp, #40	@ 0x28
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	1dbb      	adds	r3, r7, #6
 80087aa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2280      	movs	r2, #128	@ 0x80
 80087b0:	589b      	ldr	r3, [r3, r2]
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d156      	bne.n	8008864 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80087bc:	1dbb      	adds	r3, r7, #6
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e04e      	b.n	8008866 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	2380      	movs	r3, #128	@ 0x80
 80087ce:	015b      	lsls	r3, r3, #5
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d109      	bne.n	80087e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2201      	movs	r2, #1
 80087e0:	4013      	ands	r3, r2
 80087e2:	d001      	beq.n	80087e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e03e      	b.n	8008866 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80087f4:	2527      	movs	r5, #39	@ 0x27
 80087f6:	197c      	adds	r4, r7, r5
 80087f8:	1dbb      	adds	r3, r7, #6
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	0018      	movs	r0, r3
 8008802:	f7ff fc9f 	bl	8008144 <UART_Start_Receive_DMA>
 8008806:	0003      	movs	r3, r0
 8008808:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800880a:	197b      	adds	r3, r7, r5
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d124      	bne.n	800885c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008816:	2b01      	cmp	r3, #1
 8008818:	d11c      	bne.n	8008854 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2210      	movs	r2, #16
 8008820:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008822:	f3ef 8310 	mrs	r3, PRIMASK
 8008826:	617b      	str	r3, [r7, #20]
  return(result);
 8008828:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882a:	623b      	str	r3, [r7, #32]
 800882c:	2301      	movs	r3, #1
 800882e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f383 8810 	msr	PRIMASK, r3
}
 8008836:	46c0      	nop			@ (mov r8, r8)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2110      	movs	r1, #16
 8008844:	430a      	orrs	r2, r1
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	f383 8810 	msr	PRIMASK, r3
}
 8008852:	e003      	b.n	800885c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008854:	2327      	movs	r3, #39	@ 0x27
 8008856:	18fb      	adds	r3, r7, r3
 8008858:	2201      	movs	r2, #1
 800885a:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800885c:	2327      	movs	r3, #39	@ 0x27
 800885e:	18fb      	adds	r3, r7, r3
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	e000      	b.n	8008866 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8008864:	2302      	movs	r3, #2
  }
}
 8008866:	0018      	movs	r0, r3
 8008868:	46bd      	mov	sp, r7
 800886a:	b00a      	add	sp, #40	@ 0x28
 800886c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008870 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2244      	movs	r2, #68	@ 0x44
 800887c:	2100      	movs	r1, #0
 800887e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008880:	4b05      	ldr	r3, [pc, #20]	@ (8008898 <USB_EnableGlobalInt+0x28>)
 8008882:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	b299      	uxth	r1, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2240      	movs	r2, #64	@ 0x40
 800888c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	0018      	movs	r0, r3
 8008892:	46bd      	mov	sp, r7
 8008894:	b004      	add	sp, #16
 8008896:	bd80      	pop	{r7, pc}
 8008898:	0000bf80 	.word	0x0000bf80

0800889c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80088a4:	4b09      	ldr	r3, [pc, #36]	@ (80088cc <USB_DisableGlobalInt+0x30>)
 80088a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2240      	movs	r2, #64	@ 0x40
 80088ac:	5a9b      	ldrh	r3, [r3, r2]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	b292      	uxth	r2, r2
 80088b4:	43d2      	mvns	r2, r2
 80088b6:	b292      	uxth	r2, r2
 80088b8:	4013      	ands	r3, r2
 80088ba:	b299      	uxth	r1, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2240      	movs	r2, #64	@ 0x40
 80088c0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	0018      	movs	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b004      	add	sp, #16
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	0000bf80 	.word	0x0000bf80

080088d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	1d3b      	adds	r3, r7, #4
 80088da:	6019      	str	r1, [r3, #0]
 80088dc:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2240      	movs	r2, #64	@ 0x40
 80088e2:	2101      	movs	r1, #1
 80088e4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2240      	movs	r2, #64	@ 0x40
 80088ea:	2100      	movs	r1, #0
 80088ec:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2244      	movs	r2, #68	@ 0x44
 80088f2:	2100      	movs	r1, #0
 80088f4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2250      	movs	r2, #80	@ 0x50
 80088fa:	2100      	movs	r1, #0
 80088fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	0018      	movs	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	b004      	add	sp, #16
 8008906:	bd80      	pop	{r7, pc}

08008908 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b09c      	sub	sp, #112	@ 0x70
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008912:	236f      	movs	r3, #111	@ 0x6f
 8008914:	18fb      	adds	r3, r7, r3
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	18d3      	adds	r3, r2, r3
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29a      	uxth	r2, r3
 8008928:	236c      	movs	r3, #108	@ 0x6c
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	49a1      	ldr	r1, [pc, #644]	@ (8008bb4 <USB_ActivateEndpoint+0x2ac>)
 800892e:	400a      	ands	r2, r1
 8008930:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	78db      	ldrb	r3, [r3, #3]
 8008936:	2b03      	cmp	r3, #3
 8008938:	d017      	beq.n	800896a <USB_ActivateEndpoint+0x62>
 800893a:	dc28      	bgt.n	800898e <USB_ActivateEndpoint+0x86>
 800893c:	2b02      	cmp	r3, #2
 800893e:	d00e      	beq.n	800895e <USB_ActivateEndpoint+0x56>
 8008940:	dc25      	bgt.n	800898e <USB_ActivateEndpoint+0x86>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <USB_ActivateEndpoint+0x44>
 8008946:	2b01      	cmp	r3, #1
 8008948:	d018      	beq.n	800897c <USB_ActivateEndpoint+0x74>
 800894a:	e020      	b.n	800898e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800894c:	226c      	movs	r2, #108	@ 0x6c
 800894e:	18bb      	adds	r3, r7, r2
 8008950:	18ba      	adds	r2, r7, r2
 8008952:	8812      	ldrh	r2, [r2, #0]
 8008954:	2180      	movs	r1, #128	@ 0x80
 8008956:	0089      	lsls	r1, r1, #2
 8008958:	430a      	orrs	r2, r1
 800895a:	801a      	strh	r2, [r3, #0]
      break;
 800895c:	e01c      	b.n	8008998 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800895e:	226c      	movs	r2, #108	@ 0x6c
 8008960:	18bb      	adds	r3, r7, r2
 8008962:	18ba      	adds	r2, r7, r2
 8008964:	8812      	ldrh	r2, [r2, #0]
 8008966:	801a      	strh	r2, [r3, #0]
      break;
 8008968:	e016      	b.n	8008998 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800896a:	226c      	movs	r2, #108	@ 0x6c
 800896c:	18bb      	adds	r3, r7, r2
 800896e:	18ba      	adds	r2, r7, r2
 8008970:	8812      	ldrh	r2, [r2, #0]
 8008972:	21c0      	movs	r1, #192	@ 0xc0
 8008974:	00c9      	lsls	r1, r1, #3
 8008976:	430a      	orrs	r2, r1
 8008978:	801a      	strh	r2, [r3, #0]
      break;
 800897a:	e00d      	b.n	8008998 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800897c:	226c      	movs	r2, #108	@ 0x6c
 800897e:	18bb      	adds	r3, r7, r2
 8008980:	18ba      	adds	r2, r7, r2
 8008982:	8812      	ldrh	r2, [r2, #0]
 8008984:	2180      	movs	r1, #128	@ 0x80
 8008986:	00c9      	lsls	r1, r1, #3
 8008988:	430a      	orrs	r2, r1
 800898a:	801a      	strh	r2, [r3, #0]
      break;
 800898c:	e004      	b.n	8008998 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800898e:	236f      	movs	r3, #111	@ 0x6f
 8008990:	18fb      	adds	r3, r7, r3
 8008992:	2201      	movs	r2, #1
 8008994:	701a      	strb	r2, [r3, #0]
      break;
 8008996:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	18d3      	adds	r3, r2, r3
 80089a2:	226c      	movs	r2, #108	@ 0x6c
 80089a4:	18ba      	adds	r2, r7, r2
 80089a6:	8812      	ldrh	r2, [r2, #0]
 80089a8:	4983      	ldr	r1, [pc, #524]	@ (8008bb8 <USB_ActivateEndpoint+0x2b0>)
 80089aa:	430a      	orrs	r2, r1
 80089ac:	b292      	uxth	r2, r2
 80089ae:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	18d3      	adds	r3, r2, r3
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	b21b      	sxth	r3, r3
 80089c0:	4a7e      	ldr	r2, [pc, #504]	@ (8008bbc <USB_ActivateEndpoint+0x2b4>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	b21a      	sxth	r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b21b      	sxth	r3, r3
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b21a      	sxth	r2, r3
 80089d0:	2166      	movs	r1, #102	@ 0x66
 80089d2:	187b      	adds	r3, r7, r1
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	18d3      	adds	r3, r2, r3
 80089e0:	187a      	adds	r2, r7, r1
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	4974      	ldr	r1, [pc, #464]	@ (8008bb8 <USB_ActivateEndpoint+0x2b0>)
 80089e6:	430a      	orrs	r2, r1
 80089e8:	b292      	uxth	r2, r2
 80089ea:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	7b1b      	ldrb	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d000      	beq.n	80089f6 <USB_ActivateEndpoint+0xee>
 80089f4:	e177      	b.n	8008ce6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d100      	bne.n	8008a00 <USB_ActivateEndpoint+0xf8>
 80089fe:	e07a      	b.n	8008af6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	61bb      	str	r3, [r7, #24]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2250      	movs	r2, #80	@ 0x50
 8008a08:	5a9b      	ldrh	r3, [r3, r2]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	001a      	movs	r2, r3
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	189b      	adds	r3, r3, r2
 8008a12:	61bb      	str	r3, [r7, #24]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	00da      	lsls	r2, r3, #3
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	18d3      	adds	r3, r2, r3
 8008a1e:	2280      	movs	r2, #128	@ 0x80
 8008a20:	00d2      	lsls	r2, r2, #3
 8008a22:	4694      	mov	ip, r2
 8008a24:	4463      	add	r3, ip
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	085b      	lsrs	r3, r3, #1
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	18db      	adds	r3, r3, r3
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	18d2      	adds	r2, r2, r3
 8008a42:	2112      	movs	r1, #18
 8008a44:	187b      	adds	r3, r7, r1
 8008a46:	8812      	ldrh	r2, [r2, #0]
 8008a48:	801a      	strh	r2, [r3, #0]
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	2240      	movs	r2, #64	@ 0x40
 8008a50:	4013      	ands	r3, r2
 8008a52:	d016      	beq.n	8008a82 <USB_ActivateEndpoint+0x17a>
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	18d3      	adds	r3, r2, r3
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	2010      	movs	r0, #16
 8008a64:	183b      	adds	r3, r7, r0
 8008a66:	4955      	ldr	r1, [pc, #340]	@ (8008bbc <USB_ActivateEndpoint+0x2b4>)
 8008a68:	400a      	ands	r2, r1
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	18d3      	adds	r3, r2, r3
 8008a76:	183a      	adds	r2, r7, r0
 8008a78:	8812      	ldrh	r2, [r2, #0]
 8008a7a:	4951      	ldr	r1, [pc, #324]	@ (8008bc0 <USB_ActivateEndpoint+0x2b8>)
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	b292      	uxth	r2, r2
 8008a80:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	78db      	ldrb	r3, [r3, #3]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d01d      	beq.n	8008ac6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	18d3      	adds	r3, r2, r3
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	200c      	movs	r0, #12
 8008a9a:	183b      	adds	r3, r7, r0
 8008a9c:	4949      	ldr	r1, [pc, #292]	@ (8008bc4 <USB_ActivateEndpoint+0x2bc>)
 8008a9e:	400a      	ands	r2, r1
 8008aa0:	801a      	strh	r2, [r3, #0]
 8008aa2:	183b      	adds	r3, r7, r0
 8008aa4:	183a      	adds	r2, r7, r0
 8008aa6:	8812      	ldrh	r2, [r2, #0]
 8008aa8:	2120      	movs	r1, #32
 8008aaa:	404a      	eors	r2, r1
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	18d3      	adds	r3, r2, r3
 8008ab8:	183a      	adds	r2, r7, r0
 8008aba:	8812      	ldrh	r2, [r2, #0]
 8008abc:	493e      	ldr	r1, [pc, #248]	@ (8008bb8 <USB_ActivateEndpoint+0x2b0>)
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	b292      	uxth	r2, r2
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	e2b5      	b.n	8009032 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	18d3      	adds	r3, r2, r3
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	200e      	movs	r0, #14
 8008ad6:	183b      	adds	r3, r7, r0
 8008ad8:	493a      	ldr	r1, [pc, #232]	@ (8008bc4 <USB_ActivateEndpoint+0x2bc>)
 8008ada:	400a      	ands	r2, r1
 8008adc:	801a      	strh	r2, [r3, #0]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	18d3      	adds	r3, r2, r3
 8008ae8:	183a      	adds	r2, r7, r0
 8008aea:	8812      	ldrh	r2, [r2, #0]
 8008aec:	4932      	ldr	r1, [pc, #200]	@ (8008bb8 <USB_ActivateEndpoint+0x2b0>)
 8008aee:	430a      	orrs	r2, r1
 8008af0:	b292      	uxth	r2, r2
 8008af2:	801a      	strh	r2, [r3, #0]
 8008af4:	e29d      	b.n	8009032 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2250      	movs	r2, #80	@ 0x50
 8008afe:	5a9b      	ldrh	r3, [r3, r2]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	001a      	movs	r2, r3
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	189b      	adds	r3, r3, r2
 8008b08:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	00da      	lsls	r2, r3, #3
 8008b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b12:	18d3      	adds	r3, r2, r3
 8008b14:	4a2c      	ldr	r2, [pc, #176]	@ (8008bc8 <USB_ActivateEndpoint+0x2c0>)
 8008b16:	4694      	mov	ip, r2
 8008b18:	4463      	add	r3, ip
 8008b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	88db      	ldrh	r3, [r3, #6]
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	18db      	adds	r3, r3, r3
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2250      	movs	r2, #80	@ 0x50
 8008b34:	5a9b      	ldrh	r3, [r3, r2]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	001a      	movs	r2, r3
 8008b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3c:	189b      	adds	r3, r3, r2
 8008b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	00da      	lsls	r2, r3, #3
 8008b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b48:	18d3      	adds	r3, r2, r3
 8008b4a:	4a20      	ldr	r2, [pc, #128]	@ (8008bcc <USB_ActivateEndpoint+0x2c4>)
 8008b4c:	4694      	mov	ip, r2
 8008b4e:	4463      	add	r3, ip
 8008b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	0d9b      	lsrs	r3, r3, #22
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d108      	bne.n	8008b7c <USB_ActivateEndpoint+0x274>
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	4a17      	ldr	r2, [pc, #92]	@ (8008bd0 <USB_ActivateEndpoint+0x2c8>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b78:	801a      	strh	r2, [r3, #0]
 8008b7a:	e045      	b.n	8008c08 <USB_ActivateEndpoint+0x300>
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b82:	d827      	bhi.n	8008bd4 <USB_ActivateEndpoint+0x2cc>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2201      	movs	r2, #1
 8008b92:	4013      	ands	r3, r2
 8008b94:	d002      	beq.n	8008b9c <USB_ActivateEndpoint+0x294>
 8008b96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b98:	3301      	adds	r3, #1
 8008b9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	029b      	lsls	r3, r3, #10
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	4313      	orrs	r3, r2
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	801a      	strh	r2, [r3, #0]
 8008bb2:	e029      	b.n	8008c08 <USB_ActivateEndpoint+0x300>
 8008bb4:	ffff898f 	.word	0xffff898f
 8008bb8:	ffff8080 	.word	0xffff8080
 8008bbc:	ffff8f8f 	.word	0xffff8f8f
 8008bc0:	ffff80c0 	.word	0xffff80c0
 8008bc4:	ffff8fbf 	.word	0xffff8fbf
 8008bc8:	00000404 	.word	0x00000404
 8008bcc:	00000406 	.word	0x00000406
 8008bd0:	ffff8000 	.word	0xffff8000
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	221f      	movs	r2, #31
 8008be2:	4013      	ands	r3, r2
 8008be4:	d102      	bne.n	8008bec <USB_ActivateEndpoint+0x2e4>
 8008be6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008be8:	3b01      	subs	r3, #1
 8008bea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	029b      	lsls	r3, r3, #10
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	4ab5      	ldr	r2, [pc, #724]	@ (8008ed4 <USB_ActivateEndpoint+0x5cc>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	18d2      	adds	r2, r2, r3
 8008c12:	2122      	movs	r1, #34	@ 0x22
 8008c14:	187b      	adds	r3, r7, r1
 8008c16:	8812      	ldrh	r2, [r2, #0]
 8008c18:	801a      	strh	r2, [r3, #0]
 8008c1a:	187b      	adds	r3, r7, r1
 8008c1c:	881a      	ldrh	r2, [r3, #0]
 8008c1e:	2380      	movs	r3, #128	@ 0x80
 8008c20:	01db      	lsls	r3, r3, #7
 8008c22:	4013      	ands	r3, r2
 8008c24:	d016      	beq.n	8008c54 <USB_ActivateEndpoint+0x34c>
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	18d3      	adds	r3, r2, r3
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	2020      	movs	r0, #32
 8008c36:	183b      	adds	r3, r7, r0
 8008c38:	49a7      	ldr	r1, [pc, #668]	@ (8008ed8 <USB_ActivateEndpoint+0x5d0>)
 8008c3a:	400a      	ands	r2, r1
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	183a      	adds	r2, r7, r0
 8008c4a:	8812      	ldrh	r2, [r2, #0]
 8008c4c:	49a3      	ldr	r1, [pc, #652]	@ (8008edc <USB_ActivateEndpoint+0x5d4>)
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	b292      	uxth	r2, r2
 8008c52:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d125      	bne.n	8008ca8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	18d3      	adds	r3, r2, r3
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	201c      	movs	r0, #28
 8008c6c:	183b      	adds	r3, r7, r0
 8008c6e:	499c      	ldr	r1, [pc, #624]	@ (8008ee0 <USB_ActivateEndpoint+0x5d8>)
 8008c70:	400a      	ands	r2, r1
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	183b      	adds	r3, r7, r0
 8008c76:	183a      	adds	r2, r7, r0
 8008c78:	8812      	ldrh	r2, [r2, #0]
 8008c7a:	2180      	movs	r1, #128	@ 0x80
 8008c7c:	0149      	lsls	r1, r1, #5
 8008c7e:	404a      	eors	r2, r1
 8008c80:	801a      	strh	r2, [r3, #0]
 8008c82:	183b      	adds	r3, r7, r0
 8008c84:	183a      	adds	r2, r7, r0
 8008c86:	8812      	ldrh	r2, [r2, #0]
 8008c88:	2180      	movs	r1, #128	@ 0x80
 8008c8a:	0189      	lsls	r1, r1, #6
 8008c8c:	404a      	eors	r2, r1
 8008c8e:	801a      	strh	r2, [r3, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	18d3      	adds	r3, r2, r3
 8008c9a:	183a      	adds	r2, r7, r0
 8008c9c:	8812      	ldrh	r2, [r2, #0]
 8008c9e:	4991      	ldr	r1, [pc, #580]	@ (8008ee4 <USB_ActivateEndpoint+0x5dc>)
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	b292      	uxth	r2, r2
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	e1c4      	b.n	8009032 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	18d3      	adds	r3, r2, r3
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	201e      	movs	r0, #30
 8008cb8:	183b      	adds	r3, r7, r0
 8008cba:	4989      	ldr	r1, [pc, #548]	@ (8008ee0 <USB_ActivateEndpoint+0x5d8>)
 8008cbc:	400a      	ands	r2, r1
 8008cbe:	801a      	strh	r2, [r3, #0]
 8008cc0:	183b      	adds	r3, r7, r0
 8008cc2:	183a      	adds	r2, r7, r0
 8008cc4:	8812      	ldrh	r2, [r2, #0]
 8008cc6:	2180      	movs	r1, #128	@ 0x80
 8008cc8:	0189      	lsls	r1, r1, #6
 8008cca:	404a      	eors	r2, r1
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	18d3      	adds	r3, r2, r3
 8008cd8:	183a      	adds	r2, r7, r0
 8008cda:	8812      	ldrh	r2, [r2, #0]
 8008cdc:	4981      	ldr	r1, [pc, #516]	@ (8008ee4 <USB_ActivateEndpoint+0x5dc>)
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	b292      	uxth	r2, r2
 8008ce2:	801a      	strh	r2, [r3, #0]
 8008ce4:	e1a5      	b.n	8009032 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	78db      	ldrb	r3, [r3, #3]
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d117      	bne.n	8008d1e <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	18d3      	adds	r3, r2, r3
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	2062      	movs	r0, #98	@ 0x62
 8008cfe:	183b      	adds	r3, r7, r0
 8008d00:	4975      	ldr	r1, [pc, #468]	@ (8008ed8 <USB_ActivateEndpoint+0x5d0>)
 8008d02:	400a      	ands	r2, r1
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	18d3      	adds	r3, r2, r3
 8008d10:	183a      	adds	r2, r7, r0
 8008d12:	8812      	ldrh	r2, [r2, #0]
 8008d14:	4974      	ldr	r1, [pc, #464]	@ (8008ee8 <USB_ActivateEndpoint+0x5e0>)
 8008d16:	430a      	orrs	r2, r1
 8008d18:	b292      	uxth	r2, r2
 8008d1a:	801a      	strh	r2, [r3, #0]
 8008d1c:	e016      	b.n	8008d4c <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	18d3      	adds	r3, r2, r3
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	2064      	movs	r0, #100	@ 0x64
 8008d2e:	183b      	adds	r3, r7, r0
 8008d30:	496e      	ldr	r1, [pc, #440]	@ (8008eec <USB_ActivateEndpoint+0x5e4>)
 8008d32:	400a      	ands	r2, r1
 8008d34:	801a      	strh	r2, [r3, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	18d3      	adds	r3, r2, r3
 8008d40:	183a      	adds	r2, r7, r0
 8008d42:	8812      	ldrh	r2, [r2, #0]
 8008d44:	4967      	ldr	r1, [pc, #412]	@ (8008ee4 <USB_ActivateEndpoint+0x5dc>)
 8008d46:	430a      	orrs	r2, r1
 8008d48:	b292      	uxth	r2, r2
 8008d4a:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2250      	movs	r2, #80	@ 0x50
 8008d54:	5a9b      	ldrh	r3, [r3, r2]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	001a      	movs	r2, r3
 8008d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d5c:	189b      	adds	r3, r3, r2
 8008d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	00da      	lsls	r2, r3, #3
 8008d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d68:	18d3      	adds	r3, r2, r3
 8008d6a:	2280      	movs	r2, #128	@ 0x80
 8008d6c:	00d2      	lsls	r2, r2, #3
 8008d6e:	4694      	mov	ip, r2
 8008d70:	4463      	add	r3, ip
 8008d72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	891b      	ldrh	r3, [r3, #8]
 8008d78:	085b      	lsrs	r3, r3, #1
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	18db      	adds	r3, r3, r3
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2250      	movs	r2, #80	@ 0x50
 8008d8c:	5a9b      	ldrh	r3, [r3, r2]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	001a      	movs	r2, r3
 8008d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d94:	189b      	adds	r3, r3, r2
 8008d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	00da      	lsls	r2, r3, #3
 8008d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008da0:	18d3      	adds	r3, r2, r3
 8008da2:	4a53      	ldr	r2, [pc, #332]	@ (8008ef0 <USB_ActivateEndpoint+0x5e8>)
 8008da4:	4694      	mov	ip, r2
 8008da6:	4463      	add	r3, ip
 8008da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	895b      	ldrh	r3, [r3, #10]
 8008dae:	085b      	lsrs	r3, r3, #1
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	18db      	adds	r3, r3, r3
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008db8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	785b      	ldrb	r3, [r3, #1]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d000      	beq.n	8008dc4 <USB_ActivateEndpoint+0x4bc>
 8008dc2:	e09b      	b.n	8008efc <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	18d2      	adds	r2, r2, r3
 8008dce:	2140      	movs	r1, #64	@ 0x40
 8008dd0:	187b      	adds	r3, r7, r1
 8008dd2:	8812      	ldrh	r2, [r2, #0]
 8008dd4:	801a      	strh	r2, [r3, #0]
 8008dd6:	187b      	adds	r3, r7, r1
 8008dd8:	881a      	ldrh	r2, [r3, #0]
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	01db      	lsls	r3, r3, #7
 8008dde:	4013      	ands	r3, r2
 8008de0:	d016      	beq.n	8008e10 <USB_ActivateEndpoint+0x508>
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	18d3      	adds	r3, r2, r3
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	203e      	movs	r0, #62	@ 0x3e
 8008df2:	183b      	adds	r3, r7, r0
 8008df4:	4938      	ldr	r1, [pc, #224]	@ (8008ed8 <USB_ActivateEndpoint+0x5d0>)
 8008df6:	400a      	ands	r2, r1
 8008df8:	801a      	strh	r2, [r3, #0]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	18d3      	adds	r3, r2, r3
 8008e04:	183a      	adds	r2, r7, r0
 8008e06:	8812      	ldrh	r2, [r2, #0]
 8008e08:	4934      	ldr	r1, [pc, #208]	@ (8008edc <USB_ActivateEndpoint+0x5d4>)
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	b292      	uxth	r2, r2
 8008e0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	18d2      	adds	r2, r2, r3
 8008e1a:	213c      	movs	r1, #60	@ 0x3c
 8008e1c:	187b      	adds	r3, r7, r1
 8008e1e:	8812      	ldrh	r2, [r2, #0]
 8008e20:	801a      	strh	r2, [r3, #0]
 8008e22:	187b      	adds	r3, r7, r1
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	2240      	movs	r2, #64	@ 0x40
 8008e28:	4013      	ands	r3, r2
 8008e2a:	d016      	beq.n	8008e5a <USB_ActivateEndpoint+0x552>
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	18d3      	adds	r3, r2, r3
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	203a      	movs	r0, #58	@ 0x3a
 8008e3c:	183b      	adds	r3, r7, r0
 8008e3e:	4926      	ldr	r1, [pc, #152]	@ (8008ed8 <USB_ActivateEndpoint+0x5d0>)
 8008e40:	400a      	ands	r2, r1
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	18d3      	adds	r3, r2, r3
 8008e4e:	183a      	adds	r2, r7, r0
 8008e50:	8812      	ldrh	r2, [r2, #0]
 8008e52:	4928      	ldr	r1, [pc, #160]	@ (8008ef4 <USB_ActivateEndpoint+0x5ec>)
 8008e54:	430a      	orrs	r2, r1
 8008e56:	b292      	uxth	r2, r2
 8008e58:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	18d3      	adds	r3, r2, r3
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	2038      	movs	r0, #56	@ 0x38
 8008e6a:	183b      	adds	r3, r7, r0
 8008e6c:	491c      	ldr	r1, [pc, #112]	@ (8008ee0 <USB_ActivateEndpoint+0x5d8>)
 8008e6e:	400a      	ands	r2, r1
 8008e70:	801a      	strh	r2, [r3, #0]
 8008e72:	183b      	adds	r3, r7, r0
 8008e74:	183a      	adds	r2, r7, r0
 8008e76:	8812      	ldrh	r2, [r2, #0]
 8008e78:	2180      	movs	r1, #128	@ 0x80
 8008e7a:	0149      	lsls	r1, r1, #5
 8008e7c:	404a      	eors	r2, r1
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	183b      	adds	r3, r7, r0
 8008e82:	183a      	adds	r2, r7, r0
 8008e84:	8812      	ldrh	r2, [r2, #0]
 8008e86:	2180      	movs	r1, #128	@ 0x80
 8008e88:	0189      	lsls	r1, r1, #6
 8008e8a:	404a      	eors	r2, r1
 8008e8c:	801a      	strh	r2, [r3, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	18d3      	adds	r3, r2, r3
 8008e98:	183a      	adds	r2, r7, r0
 8008e9a:	8812      	ldrh	r2, [r2, #0]
 8008e9c:	4911      	ldr	r1, [pc, #68]	@ (8008ee4 <USB_ActivateEndpoint+0x5dc>)
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	b292      	uxth	r2, r2
 8008ea2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	18d3      	adds	r3, r2, r3
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	2036      	movs	r0, #54	@ 0x36
 8008eb4:	183b      	adds	r3, r7, r0
 8008eb6:	4910      	ldr	r1, [pc, #64]	@ (8008ef8 <USB_ActivateEndpoint+0x5f0>)
 8008eb8:	400a      	ands	r2, r1
 8008eba:	801a      	strh	r2, [r3, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	18d3      	adds	r3, r2, r3
 8008ec6:	183a      	adds	r2, r7, r0
 8008ec8:	8812      	ldrh	r2, [r2, #0]
 8008eca:	4906      	ldr	r1, [pc, #24]	@ (8008ee4 <USB_ActivateEndpoint+0x5dc>)
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	b292      	uxth	r2, r2
 8008ed0:	801a      	strh	r2, [r3, #0]
 8008ed2:	e0ae      	b.n	8009032 <USB_ActivateEndpoint+0x72a>
 8008ed4:	ffff8000 	.word	0xffff8000
 8008ed8:	ffff8f8f 	.word	0xffff8f8f
 8008edc:	ffffc080 	.word	0xffffc080
 8008ee0:	ffffbf8f 	.word	0xffffbf8f
 8008ee4:	ffff8080 	.word	0xffff8080
 8008ee8:	ffff8180 	.word	0xffff8180
 8008eec:	ffff8e8f 	.word	0xffff8e8f
 8008ef0:	00000404 	.word	0x00000404
 8008ef4:	ffff80c0 	.word	0xffff80c0
 8008ef8:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	18d2      	adds	r2, r2, r3
 8008f06:	214e      	movs	r1, #78	@ 0x4e
 8008f08:	187b      	adds	r3, r7, r1
 8008f0a:	8812      	ldrh	r2, [r2, #0]
 8008f0c:	801a      	strh	r2, [r3, #0]
 8008f0e:	187b      	adds	r3, r7, r1
 8008f10:	881a      	ldrh	r2, [r3, #0]
 8008f12:	2380      	movs	r3, #128	@ 0x80
 8008f14:	01db      	lsls	r3, r3, #7
 8008f16:	4013      	ands	r3, r2
 8008f18:	d016      	beq.n	8008f48 <USB_ActivateEndpoint+0x640>
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	18d3      	adds	r3, r2, r3
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	204c      	movs	r0, #76	@ 0x4c
 8008f2a:	183b      	adds	r3, r7, r0
 8008f2c:	4944      	ldr	r1, [pc, #272]	@ (8009040 <USB_ActivateEndpoint+0x738>)
 8008f2e:	400a      	ands	r2, r1
 8008f30:	801a      	strh	r2, [r3, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	18d3      	adds	r3, r2, r3
 8008f3c:	183a      	adds	r2, r7, r0
 8008f3e:	8812      	ldrh	r2, [r2, #0]
 8008f40:	4940      	ldr	r1, [pc, #256]	@ (8009044 <USB_ActivateEndpoint+0x73c>)
 8008f42:	430a      	orrs	r2, r1
 8008f44:	b292      	uxth	r2, r2
 8008f46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	18d2      	adds	r2, r2, r3
 8008f52:	214a      	movs	r1, #74	@ 0x4a
 8008f54:	187b      	adds	r3, r7, r1
 8008f56:	8812      	ldrh	r2, [r2, #0]
 8008f58:	801a      	strh	r2, [r3, #0]
 8008f5a:	187b      	adds	r3, r7, r1
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	2240      	movs	r2, #64	@ 0x40
 8008f60:	4013      	ands	r3, r2
 8008f62:	d016      	beq.n	8008f92 <USB_ActivateEndpoint+0x68a>
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	18d3      	adds	r3, r2, r3
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	2048      	movs	r0, #72	@ 0x48
 8008f74:	183b      	adds	r3, r7, r0
 8008f76:	4932      	ldr	r1, [pc, #200]	@ (8009040 <USB_ActivateEndpoint+0x738>)
 8008f78:	400a      	ands	r2, r1
 8008f7a:	801a      	strh	r2, [r3, #0]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	18d3      	adds	r3, r2, r3
 8008f86:	183a      	adds	r2, r7, r0
 8008f88:	8812      	ldrh	r2, [r2, #0]
 8008f8a:	492f      	ldr	r1, [pc, #188]	@ (8009048 <USB_ActivateEndpoint+0x740>)
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	b292      	uxth	r2, r2
 8008f90:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	78db      	ldrb	r3, [r3, #3]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d01d      	beq.n	8008fd6 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	18d3      	adds	r3, r2, r3
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	2044      	movs	r0, #68	@ 0x44
 8008faa:	183b      	adds	r3, r7, r0
 8008fac:	4927      	ldr	r1, [pc, #156]	@ (800904c <USB_ActivateEndpoint+0x744>)
 8008fae:	400a      	ands	r2, r1
 8008fb0:	801a      	strh	r2, [r3, #0]
 8008fb2:	183b      	adds	r3, r7, r0
 8008fb4:	183a      	adds	r2, r7, r0
 8008fb6:	8812      	ldrh	r2, [r2, #0]
 8008fb8:	2120      	movs	r1, #32
 8008fba:	404a      	eors	r2, r1
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	18d3      	adds	r3, r2, r3
 8008fc8:	183a      	adds	r2, r7, r0
 8008fca:	8812      	ldrh	r2, [r2, #0]
 8008fcc:	4920      	ldr	r1, [pc, #128]	@ (8009050 <USB_ActivateEndpoint+0x748>)
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	b292      	uxth	r2, r2
 8008fd2:	801a      	strh	r2, [r3, #0]
 8008fd4:	e016      	b.n	8009004 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	18d3      	adds	r3, r2, r3
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	2046      	movs	r0, #70	@ 0x46
 8008fe6:	183b      	adds	r3, r7, r0
 8008fe8:	4918      	ldr	r1, [pc, #96]	@ (800904c <USB_ActivateEndpoint+0x744>)
 8008fea:	400a      	ands	r2, r1
 8008fec:	801a      	strh	r2, [r3, #0]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	18d3      	adds	r3, r2, r3
 8008ff8:	183a      	adds	r2, r7, r0
 8008ffa:	8812      	ldrh	r2, [r2, #0]
 8008ffc:	4914      	ldr	r1, [pc, #80]	@ (8009050 <USB_ActivateEndpoint+0x748>)
 8008ffe:	430a      	orrs	r2, r1
 8009000:	b292      	uxth	r2, r2
 8009002:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	18d3      	adds	r3, r2, r3
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29a      	uxth	r2, r3
 8009012:	2042      	movs	r0, #66	@ 0x42
 8009014:	183b      	adds	r3, r7, r0
 8009016:	490f      	ldr	r1, [pc, #60]	@ (8009054 <USB_ActivateEndpoint+0x74c>)
 8009018:	400a      	ands	r2, r1
 800901a:	801a      	strh	r2, [r3, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	18d3      	adds	r3, r2, r3
 8009026:	183a      	adds	r2, r7, r0
 8009028:	8812      	ldrh	r2, [r2, #0]
 800902a:	4909      	ldr	r1, [pc, #36]	@ (8009050 <USB_ActivateEndpoint+0x748>)
 800902c:	430a      	orrs	r2, r1
 800902e:	b292      	uxth	r2, r2
 8009030:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009032:	236f      	movs	r3, #111	@ 0x6f
 8009034:	18fb      	adds	r3, r7, r3
 8009036:	781b      	ldrb	r3, [r3, #0]
}
 8009038:	0018      	movs	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	b01c      	add	sp, #112	@ 0x70
 800903e:	bd80      	pop	{r7, pc}
 8009040:	ffff8f8f 	.word	0xffff8f8f
 8009044:	ffffc080 	.word	0xffffc080
 8009048:	ffff80c0 	.word	0xffff80c0
 800904c:	ffff8fbf 	.word	0xffff8fbf
 8009050:	ffff8080 	.word	0xffff8080
 8009054:	ffffbf8f 	.word	0xffffbf8f

08009058 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08c      	sub	sp, #48	@ 0x30
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	7b1b      	ldrb	r3, [r3, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d000      	beq.n	800906c <USB_DeactivateEndpoint+0x14>
 800906a:	e07e      	b.n	800916a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	785b      	ldrb	r3, [r3, #1]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d03c      	beq.n	80090ee <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	18d2      	adds	r2, r2, r3
 800907e:	210c      	movs	r1, #12
 8009080:	187b      	adds	r3, r7, r1
 8009082:	8812      	ldrh	r2, [r2, #0]
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	187b      	adds	r3, r7, r1
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	2240      	movs	r2, #64	@ 0x40
 800908c:	4013      	ands	r3, r2
 800908e:	d016      	beq.n	80090be <USB_DeactivateEndpoint+0x66>
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	18d3      	adds	r3, r2, r3
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	b29a      	uxth	r2, r3
 800909e:	200a      	movs	r0, #10
 80090a0:	183b      	adds	r3, r7, r0
 80090a2:	49c7      	ldr	r1, [pc, #796]	@ (80093c0 <USB_DeactivateEndpoint+0x368>)
 80090a4:	400a      	ands	r2, r1
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	18d3      	adds	r3, r2, r3
 80090b2:	183a      	adds	r2, r7, r0
 80090b4:	8812      	ldrh	r2, [r2, #0]
 80090b6:	49c3      	ldr	r1, [pc, #780]	@ (80093c4 <USB_DeactivateEndpoint+0x36c>)
 80090b8:	430a      	orrs	r2, r1
 80090ba:	b292      	uxth	r2, r2
 80090bc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	18d3      	adds	r3, r2, r3
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	2008      	movs	r0, #8
 80090ce:	183b      	adds	r3, r7, r0
 80090d0:	49bd      	ldr	r1, [pc, #756]	@ (80093c8 <USB_DeactivateEndpoint+0x370>)
 80090d2:	400a      	ands	r2, r1
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	18d3      	adds	r3, r2, r3
 80090e0:	183a      	adds	r2, r7, r0
 80090e2:	8812      	ldrh	r2, [r2, #0]
 80090e4:	49b9      	ldr	r1, [pc, #740]	@ (80093cc <USB_DeactivateEndpoint+0x374>)
 80090e6:	430a      	orrs	r2, r1
 80090e8:	b292      	uxth	r2, r2
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	e163      	b.n	80093b6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	18d2      	adds	r2, r2, r3
 80090f8:	2112      	movs	r1, #18
 80090fa:	187b      	adds	r3, r7, r1
 80090fc:	8812      	ldrh	r2, [r2, #0]
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	187b      	adds	r3, r7, r1
 8009102:	881a      	ldrh	r2, [r3, #0]
 8009104:	2380      	movs	r3, #128	@ 0x80
 8009106:	01db      	lsls	r3, r3, #7
 8009108:	4013      	ands	r3, r2
 800910a:	d016      	beq.n	800913a <USB_DeactivateEndpoint+0xe2>
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	18d3      	adds	r3, r2, r3
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29a      	uxth	r2, r3
 800911a:	2010      	movs	r0, #16
 800911c:	183b      	adds	r3, r7, r0
 800911e:	49a8      	ldr	r1, [pc, #672]	@ (80093c0 <USB_DeactivateEndpoint+0x368>)
 8009120:	400a      	ands	r2, r1
 8009122:	801a      	strh	r2, [r3, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	18d3      	adds	r3, r2, r3
 800912e:	183a      	adds	r2, r7, r0
 8009130:	8812      	ldrh	r2, [r2, #0]
 8009132:	49a7      	ldr	r1, [pc, #668]	@ (80093d0 <USB_DeactivateEndpoint+0x378>)
 8009134:	430a      	orrs	r2, r1
 8009136:	b292      	uxth	r2, r2
 8009138:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	18d3      	adds	r3, r2, r3
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	b29a      	uxth	r2, r3
 8009148:	200e      	movs	r0, #14
 800914a:	183b      	adds	r3, r7, r0
 800914c:	49a1      	ldr	r1, [pc, #644]	@ (80093d4 <USB_DeactivateEndpoint+0x37c>)
 800914e:	400a      	ands	r2, r1
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	18d3      	adds	r3, r2, r3
 800915c:	183a      	adds	r2, r7, r0
 800915e:	8812      	ldrh	r2, [r2, #0]
 8009160:	499a      	ldr	r1, [pc, #616]	@ (80093cc <USB_DeactivateEndpoint+0x374>)
 8009162:	430a      	orrs	r2, r1
 8009164:	b292      	uxth	r2, r2
 8009166:	801a      	strh	r2, [r3, #0]
 8009168:	e125      	b.n	80093b6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d000      	beq.n	8009174 <USB_DeactivateEndpoint+0x11c>
 8009172:	e090      	b.n	8009296 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	18d2      	adds	r2, r2, r3
 800917e:	2120      	movs	r1, #32
 8009180:	187b      	adds	r3, r7, r1
 8009182:	8812      	ldrh	r2, [r2, #0]
 8009184:	801a      	strh	r2, [r3, #0]
 8009186:	187b      	adds	r3, r7, r1
 8009188:	881a      	ldrh	r2, [r3, #0]
 800918a:	2380      	movs	r3, #128	@ 0x80
 800918c:	01db      	lsls	r3, r3, #7
 800918e:	4013      	ands	r3, r2
 8009190:	d016      	beq.n	80091c0 <USB_DeactivateEndpoint+0x168>
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	18d3      	adds	r3, r2, r3
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	b29a      	uxth	r2, r3
 80091a0:	201e      	movs	r0, #30
 80091a2:	183b      	adds	r3, r7, r0
 80091a4:	4986      	ldr	r1, [pc, #536]	@ (80093c0 <USB_DeactivateEndpoint+0x368>)
 80091a6:	400a      	ands	r2, r1
 80091a8:	801a      	strh	r2, [r3, #0]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	18d3      	adds	r3, r2, r3
 80091b4:	183a      	adds	r2, r7, r0
 80091b6:	8812      	ldrh	r2, [r2, #0]
 80091b8:	4985      	ldr	r1, [pc, #532]	@ (80093d0 <USB_DeactivateEndpoint+0x378>)
 80091ba:	430a      	orrs	r2, r1
 80091bc:	b292      	uxth	r2, r2
 80091be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	18d2      	adds	r2, r2, r3
 80091ca:	211c      	movs	r1, #28
 80091cc:	187b      	adds	r3, r7, r1
 80091ce:	8812      	ldrh	r2, [r2, #0]
 80091d0:	801a      	strh	r2, [r3, #0]
 80091d2:	187b      	adds	r3, r7, r1
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	2240      	movs	r2, #64	@ 0x40
 80091d8:	4013      	ands	r3, r2
 80091da:	d016      	beq.n	800920a <USB_DeactivateEndpoint+0x1b2>
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	18d3      	adds	r3, r2, r3
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	201a      	movs	r0, #26
 80091ec:	183b      	adds	r3, r7, r0
 80091ee:	4974      	ldr	r1, [pc, #464]	@ (80093c0 <USB_DeactivateEndpoint+0x368>)
 80091f0:	400a      	ands	r2, r1
 80091f2:	801a      	strh	r2, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	18d3      	adds	r3, r2, r3
 80091fe:	183a      	adds	r2, r7, r0
 8009200:	8812      	ldrh	r2, [r2, #0]
 8009202:	4970      	ldr	r1, [pc, #448]	@ (80093c4 <USB_DeactivateEndpoint+0x36c>)
 8009204:	430a      	orrs	r2, r1
 8009206:	b292      	uxth	r2, r2
 8009208:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	18d3      	adds	r3, r2, r3
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29a      	uxth	r2, r3
 8009218:	2018      	movs	r0, #24
 800921a:	183b      	adds	r3, r7, r0
 800921c:	4968      	ldr	r1, [pc, #416]	@ (80093c0 <USB_DeactivateEndpoint+0x368>)
 800921e:	400a      	ands	r2, r1
 8009220:	801a      	strh	r2, [r3, #0]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	18d3      	adds	r3, r2, r3
 800922c:	183a      	adds	r2, r7, r0
 800922e:	8812      	ldrh	r2, [r2, #0]
 8009230:	4964      	ldr	r1, [pc, #400]	@ (80093c4 <USB_DeactivateEndpoint+0x36c>)
 8009232:	430a      	orrs	r2, r1
 8009234:	b292      	uxth	r2, r2
 8009236:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	18d3      	adds	r3, r2, r3
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	b29a      	uxth	r2, r3
 8009246:	2016      	movs	r0, #22
 8009248:	183b      	adds	r3, r7, r0
 800924a:	4962      	ldr	r1, [pc, #392]	@ (80093d4 <USB_DeactivateEndpoint+0x37c>)
 800924c:	400a      	ands	r2, r1
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	18d3      	adds	r3, r2, r3
 800925a:	183a      	adds	r2, r7, r0
 800925c:	8812      	ldrh	r2, [r2, #0]
 800925e:	495b      	ldr	r1, [pc, #364]	@ (80093cc <USB_DeactivateEndpoint+0x374>)
 8009260:	430a      	orrs	r2, r1
 8009262:	b292      	uxth	r2, r2
 8009264:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	18d3      	adds	r3, r2, r3
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29a      	uxth	r2, r3
 8009274:	2014      	movs	r0, #20
 8009276:	183b      	adds	r3, r7, r0
 8009278:	4953      	ldr	r1, [pc, #332]	@ (80093c8 <USB_DeactivateEndpoint+0x370>)
 800927a:	400a      	ands	r2, r1
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	18d3      	adds	r3, r2, r3
 8009288:	183a      	adds	r2, r7, r0
 800928a:	8812      	ldrh	r2, [r2, #0]
 800928c:	494f      	ldr	r1, [pc, #316]	@ (80093cc <USB_DeactivateEndpoint+0x374>)
 800928e:	430a      	orrs	r2, r1
 8009290:	b292      	uxth	r2, r2
 8009292:	801a      	strh	r2, [r3, #0]
 8009294:	e08f      	b.n	80093b6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	18d2      	adds	r2, r2, r3
 80092a0:	212e      	movs	r1, #46	@ 0x2e
 80092a2:	187b      	adds	r3, r7, r1
 80092a4:	8812      	ldrh	r2, [r2, #0]
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	187b      	adds	r3, r7, r1
 80092aa:	881a      	ldrh	r2, [r3, #0]
 80092ac:	2380      	movs	r3, #128	@ 0x80
 80092ae:	01db      	lsls	r3, r3, #7
 80092b0:	4013      	ands	r3, r2
 80092b2:	d016      	beq.n	80092e2 <USB_DeactivateEndpoint+0x28a>
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	18d3      	adds	r3, r2, r3
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	202c      	movs	r0, #44	@ 0x2c
 80092c4:	183b      	adds	r3, r7, r0
 80092c6:	493e      	ldr	r1, [pc, #248]	@ (80093c0 <USB_DeactivateEndpoint+0x368>)
 80092c8:	400a      	ands	r2, r1
 80092ca:	801a      	strh	r2, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	18d3      	adds	r3, r2, r3
 80092d6:	183a      	adds	r2, r7, r0
 80092d8:	8812      	ldrh	r2, [r2, #0]
 80092da:	493d      	ldr	r1, [pc, #244]	@ (80093d0 <USB_DeactivateEndpoint+0x378>)
 80092dc:	430a      	orrs	r2, r1
 80092de:	b292      	uxth	r2, r2
 80092e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	18d2      	adds	r2, r2, r3
 80092ec:	212a      	movs	r1, #42	@ 0x2a
 80092ee:	187b      	adds	r3, r7, r1
 80092f0:	8812      	ldrh	r2, [r2, #0]
 80092f2:	801a      	strh	r2, [r3, #0]
 80092f4:	187b      	adds	r3, r7, r1
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	2240      	movs	r2, #64	@ 0x40
 80092fa:	4013      	ands	r3, r2
 80092fc:	d016      	beq.n	800932c <USB_DeactivateEndpoint+0x2d4>
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	18d3      	adds	r3, r2, r3
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29a      	uxth	r2, r3
 800930c:	2028      	movs	r0, #40	@ 0x28
 800930e:	183b      	adds	r3, r7, r0
 8009310:	492b      	ldr	r1, [pc, #172]	@ (80093c0 <USB_DeactivateEndpoint+0x368>)
 8009312:	400a      	ands	r2, r1
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	18d3      	adds	r3, r2, r3
 8009320:	183a      	adds	r2, r7, r0
 8009322:	8812      	ldrh	r2, [r2, #0]
 8009324:	4927      	ldr	r1, [pc, #156]	@ (80093c4 <USB_DeactivateEndpoint+0x36c>)
 8009326:	430a      	orrs	r2, r1
 8009328:	b292      	uxth	r2, r2
 800932a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	18d3      	adds	r3, r2, r3
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29a      	uxth	r2, r3
 800933a:	2026      	movs	r0, #38	@ 0x26
 800933c:	183b      	adds	r3, r7, r0
 800933e:	4920      	ldr	r1, [pc, #128]	@ (80093c0 <USB_DeactivateEndpoint+0x368>)
 8009340:	400a      	ands	r2, r1
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	18d3      	adds	r3, r2, r3
 800934e:	183a      	adds	r2, r7, r0
 8009350:	8812      	ldrh	r2, [r2, #0]
 8009352:	491f      	ldr	r1, [pc, #124]	@ (80093d0 <USB_DeactivateEndpoint+0x378>)
 8009354:	430a      	orrs	r2, r1
 8009356:	b292      	uxth	r2, r2
 8009358:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	18d3      	adds	r3, r2, r3
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29a      	uxth	r2, r3
 8009368:	2024      	movs	r0, #36	@ 0x24
 800936a:	183b      	adds	r3, r7, r0
 800936c:	4916      	ldr	r1, [pc, #88]	@ (80093c8 <USB_DeactivateEndpoint+0x370>)
 800936e:	400a      	ands	r2, r1
 8009370:	801a      	strh	r2, [r3, #0]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	18d3      	adds	r3, r2, r3
 800937c:	183a      	adds	r2, r7, r0
 800937e:	8812      	ldrh	r2, [r2, #0]
 8009380:	4912      	ldr	r1, [pc, #72]	@ (80093cc <USB_DeactivateEndpoint+0x374>)
 8009382:	430a      	orrs	r2, r1
 8009384:	b292      	uxth	r2, r2
 8009386:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	18d3      	adds	r3, r2, r3
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	b29a      	uxth	r2, r3
 8009396:	2022      	movs	r0, #34	@ 0x22
 8009398:	183b      	adds	r3, r7, r0
 800939a:	490e      	ldr	r1, [pc, #56]	@ (80093d4 <USB_DeactivateEndpoint+0x37c>)
 800939c:	400a      	ands	r2, r1
 800939e:	801a      	strh	r2, [r3, #0]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	18d3      	adds	r3, r2, r3
 80093aa:	183a      	adds	r2, r7, r0
 80093ac:	8812      	ldrh	r2, [r2, #0]
 80093ae:	4907      	ldr	r1, [pc, #28]	@ (80093cc <USB_DeactivateEndpoint+0x374>)
 80093b0:	430a      	orrs	r2, r1
 80093b2:	b292      	uxth	r2, r2
 80093b4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	0018      	movs	r0, r3
 80093ba:	46bd      	mov	sp, r7
 80093bc:	b00c      	add	sp, #48	@ 0x30
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	ffff8f8f 	.word	0xffff8f8f
 80093c4:	ffff80c0 	.word	0xffff80c0
 80093c8:	ffff8fbf 	.word	0xffff8fbf
 80093cc:	ffff8080 	.word	0xffff8080
 80093d0:	ffffc080 	.word	0xffffc080
 80093d4:	ffffbf8f 	.word	0xffffbf8f

080093d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093d8:	b590      	push	{r4, r7, lr}
 80093da:	b0c3      	sub	sp, #268	@ 0x10c
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d001      	beq.n	80093ee <USB_EPStartXfer+0x16>
 80093ea:	f000 fd2d 	bl	8009e48 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	699a      	ldr	r2, [r3, #24]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d905      	bls.n	8009406 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	1d7a      	adds	r2, r7, #5
 8009400:	32ff      	adds	r2, #255	@ 0xff
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	e004      	b.n	8009410 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	1d7a      	adds	r2, r7, #5
 800940c:	32ff      	adds	r2, #255	@ 0xff
 800940e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	7b1b      	ldrb	r3, [r3, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d125      	bne.n	8009464 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	6959      	ldr	r1, [r3, #20]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	88da      	ldrh	r2, [r3, #6]
 8009420:	1d7b      	adds	r3, r7, #5
 8009422:	33ff      	adds	r3, #255	@ 0xff
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 fa3f 	bl	800a8ac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	613b      	str	r3, [r7, #16]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2250      	movs	r2, #80	@ 0x50
 8009436:	5a9b      	ldrh	r3, [r3, r2]
 8009438:	b29b      	uxth	r3, r3
 800943a:	001a      	movs	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	189b      	adds	r3, r3, r2
 8009440:	613b      	str	r3, [r7, #16]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	00da      	lsls	r2, r3, #3
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	18d3      	adds	r3, r2, r3
 800944c:	4ad7      	ldr	r2, [pc, #860]	@ (80097ac <USB_EPStartXfer+0x3d4>)
 800944e:	4694      	mov	ip, r2
 8009450:	4463      	add	r3, ip
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	1d7b      	adds	r3, r7, #5
 8009456:	33ff      	adds	r3, #255	@ 0xff
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	b29a      	uxth	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	801a      	strh	r2, [r3, #0]
 8009460:	f000 fccd 	bl	8009dfe <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	78db      	ldrb	r3, [r3, #3]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d000      	beq.n	800946e <USB_EPStartXfer+0x96>
 800946c:	e362      	b.n	8009b34 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	6a1a      	ldr	r2, [r3, #32]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	429a      	cmp	r2, r3
 8009478:	d800      	bhi.n	800947c <USB_EPStartXfer+0xa4>
 800947a:	e309      	b.n	8009a90 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	18d3      	adds	r3, r2, r3
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b29a      	uxth	r2, r3
 800948a:	2056      	movs	r0, #86	@ 0x56
 800948c:	183b      	adds	r3, r7, r0
 800948e:	49c8      	ldr	r1, [pc, #800]	@ (80097b0 <USB_EPStartXfer+0x3d8>)
 8009490:	400a      	ands	r2, r1
 8009492:	801a      	strh	r2, [r3, #0]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	18d3      	adds	r3, r2, r3
 800949e:	183a      	adds	r2, r7, r0
 80094a0:	8812      	ldrh	r2, [r2, #0]
 80094a2:	49c4      	ldr	r1, [pc, #784]	@ (80097b4 <USB_EPStartXfer+0x3dc>)
 80094a4:	430a      	orrs	r2, r1
 80094a6:	b292      	uxth	r2, r2
 80094a8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	6a1a      	ldr	r2, [r3, #32]
 80094ae:	1d7b      	adds	r3, r7, #5
 80094b0:	33ff      	adds	r3, #255	@ 0xff
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	18d3      	adds	r3, r2, r3
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	001a      	movs	r2, r3
 80094ca:	2340      	movs	r3, #64	@ 0x40
 80094cc:	4013      	ands	r3, r2
 80094ce:	d100      	bne.n	80094d2 <USB_EPStartXfer+0xfa>
 80094d0:	e176      	b.n	80097c0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d000      	beq.n	80094e0 <USB_EPStartXfer+0x108>
 80094de:	e074      	b.n	80095ca <USB_EPStartXfer+0x1f2>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2250      	movs	r2, #80	@ 0x50
 80094e8:	5a9b      	ldrh	r3, [r3, r2]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	001a      	movs	r2, r3
 80094ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f0:	189b      	adds	r3, r3, r2
 80094f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	00da      	lsls	r2, r3, #3
 80094fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fc:	18d3      	adds	r3, r2, r3
 80094fe:	4aae      	ldr	r2, [pc, #696]	@ (80097b8 <USB_EPStartXfer+0x3e0>)
 8009500:	4694      	mov	ip, r2
 8009502:	4463      	add	r3, ip
 8009504:	627b      	str	r3, [r7, #36]	@ 0x24
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	b29b      	uxth	r3, r3
 800950c:	059b      	lsls	r3, r3, #22
 800950e:	0d9b      	lsrs	r3, r3, #22
 8009510:	b29a      	uxth	r2, r3
 8009512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009514:	801a      	strh	r2, [r3, #0]
 8009516:	1d7b      	adds	r3, r7, #5
 8009518:	33ff      	adds	r3, #255	@ 0xff
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d108      	bne.n	8009532 <USB_EPStartXfer+0x15a>
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b29b      	uxth	r3, r3
 8009526:	4aa5      	ldr	r2, [pc, #660]	@ (80097bc <USB_EPStartXfer+0x3e4>)
 8009528:	4313      	orrs	r3, r2
 800952a:	b29a      	uxth	r2, r3
 800952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952e:	801a      	strh	r2, [r3, #0]
 8009530:	e066      	b.n	8009600 <USB_EPStartXfer+0x228>
 8009532:	1d7b      	adds	r3, r7, #5
 8009534:	33ff      	adds	r3, #255	@ 0xff
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b3e      	cmp	r3, #62	@ 0x3e
 800953a:	d821      	bhi.n	8009580 <USB_EPStartXfer+0x1a8>
 800953c:	1d7b      	adds	r3, r7, #5
 800953e:	33ff      	adds	r3, #255	@ 0xff
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	085b      	lsrs	r3, r3, #1
 8009544:	1c7a      	adds	r2, r7, #1
 8009546:	32ff      	adds	r2, #255	@ 0xff
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	1d7b      	adds	r3, r7, #5
 800954c:	33ff      	adds	r3, #255	@ 0xff
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2201      	movs	r2, #1
 8009552:	4013      	ands	r3, r2
 8009554:	d006      	beq.n	8009564 <USB_EPStartXfer+0x18c>
 8009556:	1c7b      	adds	r3, r7, #1
 8009558:	33ff      	adds	r3, #255	@ 0xff
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3301      	adds	r3, #1
 800955e:	1c7a      	adds	r2, r7, #1
 8009560:	32ff      	adds	r2, #255	@ 0xff
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	b29a      	uxth	r2, r3
 800956a:	1c7b      	adds	r3, r7, #1
 800956c:	33ff      	adds	r3, #255	@ 0xff
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	b29b      	uxth	r3, r3
 8009572:	029b      	lsls	r3, r3, #10
 8009574:	b29b      	uxth	r3, r3
 8009576:	4313      	orrs	r3, r2
 8009578:	b29a      	uxth	r2, r3
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	e03f      	b.n	8009600 <USB_EPStartXfer+0x228>
 8009580:	1d7b      	adds	r3, r7, #5
 8009582:	33ff      	adds	r3, #255	@ 0xff
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	1c7a      	adds	r2, r7, #1
 800958a:	32ff      	adds	r2, #255	@ 0xff
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	1d7b      	adds	r3, r7, #5
 8009590:	33ff      	adds	r3, #255	@ 0xff
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	221f      	movs	r2, #31
 8009596:	4013      	ands	r3, r2
 8009598:	d106      	bne.n	80095a8 <USB_EPStartXfer+0x1d0>
 800959a:	1c7b      	adds	r3, r7, #1
 800959c:	33ff      	adds	r3, #255	@ 0xff
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	1c7a      	adds	r2, r7, #1
 80095a4:	32ff      	adds	r2, #255	@ 0xff
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	1c7b      	adds	r3, r7, #1
 80095b0:	33ff      	adds	r3, #255	@ 0xff
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	029b      	lsls	r3, r3, #10
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	4313      	orrs	r3, r2
 80095bc:	b29b      	uxth	r3, r3
 80095be:	4a7f      	ldr	r2, [pc, #508]	@ (80097bc <USB_EPStartXfer+0x3e4>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c6:	801a      	strh	r2, [r3, #0]
 80095c8:	e01a      	b.n	8009600 <USB_EPStartXfer+0x228>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	785b      	ldrb	r3, [r3, #1]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d116      	bne.n	8009600 <USB_EPStartXfer+0x228>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2250      	movs	r2, #80	@ 0x50
 80095d6:	5a9b      	ldrh	r3, [r3, r2]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	001a      	movs	r2, r3
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	189b      	adds	r3, r3, r2
 80095e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	00da      	lsls	r2, r3, #3
 80095e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ea:	18d3      	adds	r3, r2, r3
 80095ec:	4a72      	ldr	r2, [pc, #456]	@ (80097b8 <USB_EPStartXfer+0x3e0>)
 80095ee:	4694      	mov	ip, r2
 80095f0:	4463      	add	r3, ip
 80095f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095f4:	1d7b      	adds	r3, r7, #5
 80095f6:	33ff      	adds	r3, #255	@ 0xff
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009600:	2076      	movs	r0, #118	@ 0x76
 8009602:	183b      	adds	r3, r7, r0
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	8952      	ldrh	r2, [r2, #10]
 8009608:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	6959      	ldr	r1, [r3, #20]
 800960e:	1d7b      	adds	r3, r7, #5
 8009610:	33ff      	adds	r3, #255	@ 0xff
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	b29c      	uxth	r4, r3
 8009616:	183b      	adds	r3, r7, r0
 8009618:	881a      	ldrh	r2, [r3, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	0023      	movs	r3, r4
 800961e:	f001 f945 	bl	800a8ac <USB_WritePMA>
            ep->xfer_buff += len;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695a      	ldr	r2, [r3, #20]
 8009626:	1d7b      	adds	r3, r7, #5
 8009628:	33ff      	adds	r3, #255	@ 0xff
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	18d2      	adds	r2, r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6a1a      	ldr	r2, [r3, #32]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	429a      	cmp	r2, r3
 800963c:	d908      	bls.n	8009650 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	6a1a      	ldr	r2, [r3, #32]
 8009642:	1d7b      	adds	r3, r7, #5
 8009644:	33ff      	adds	r3, #255	@ 0xff
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	1ad2      	subs	r2, r2, r3
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	621a      	str	r2, [r3, #32]
 800964e:	e007      	b.n	8009660 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	1d7a      	adds	r2, r7, #5
 8009656:	32ff      	adds	r2, #255	@ 0xff
 8009658:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2200      	movs	r2, #0
 800965e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d000      	beq.n	800966a <USB_EPStartXfer+0x292>
 8009668:	e070      	b.n	800974c <USB_EPStartXfer+0x374>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	61bb      	str	r3, [r7, #24]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2250      	movs	r2, #80	@ 0x50
 8009672:	5a9b      	ldrh	r3, [r3, r2]
 8009674:	b29b      	uxth	r3, r3
 8009676:	001a      	movs	r2, r3
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	189b      	adds	r3, r3, r2
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	00da      	lsls	r2, r3, #3
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	18d3      	adds	r3, r2, r3
 8009688:	4a48      	ldr	r2, [pc, #288]	@ (80097ac <USB_EPStartXfer+0x3d4>)
 800968a:	4694      	mov	ip, r2
 800968c:	4463      	add	r3, ip
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	059b      	lsls	r3, r3, #22
 8009698:	0d9b      	lsrs	r3, r3, #22
 800969a:	b29a      	uxth	r2, r3
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	1d7b      	adds	r3, r7, #5
 80096a2:	33ff      	adds	r3, #255	@ 0xff
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d108      	bne.n	80096bc <USB_EPStartXfer+0x2e4>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4a42      	ldr	r2, [pc, #264]	@ (80097bc <USB_EPStartXfer+0x3e4>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	801a      	strh	r2, [r3, #0]
 80096ba:	e064      	b.n	8009786 <USB_EPStartXfer+0x3ae>
 80096bc:	1d7b      	adds	r3, r7, #5
 80096be:	33ff      	adds	r3, #255	@ 0xff
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80096c4:	d81f      	bhi.n	8009706 <USB_EPStartXfer+0x32e>
 80096c6:	1d7b      	adds	r3, r7, #5
 80096c8:	33ff      	adds	r3, #255	@ 0xff
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	085b      	lsrs	r3, r3, #1
 80096ce:	21fc      	movs	r1, #252	@ 0xfc
 80096d0:	187a      	adds	r2, r7, r1
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	1d7b      	adds	r3, r7, #5
 80096d6:	33ff      	adds	r3, #255	@ 0xff
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2201      	movs	r2, #1
 80096dc:	4013      	ands	r3, r2
 80096de:	d004      	beq.n	80096ea <USB_EPStartXfer+0x312>
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	187a      	adds	r2, r7, r1
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	23fc      	movs	r3, #252	@ 0xfc
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	029b      	lsls	r3, r3, #10
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b29a      	uxth	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	801a      	strh	r2, [r3, #0]
 8009704:	e03f      	b.n	8009786 <USB_EPStartXfer+0x3ae>
 8009706:	1d7b      	adds	r3, r7, #5
 8009708:	33ff      	adds	r3, #255	@ 0xff
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	095b      	lsrs	r3, r3, #5
 800970e:	21fc      	movs	r1, #252	@ 0xfc
 8009710:	187a      	adds	r2, r7, r1
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	1d7b      	adds	r3, r7, #5
 8009716:	33ff      	adds	r3, #255	@ 0xff
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	221f      	movs	r2, #31
 800971c:	4013      	ands	r3, r2
 800971e:	d104      	bne.n	800972a <USB_EPStartXfer+0x352>
 8009720:	187b      	adds	r3, r7, r1
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3b01      	subs	r3, #1
 8009726:	187a      	adds	r2, r7, r1
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	b29a      	uxth	r2, r3
 8009730:	23fc      	movs	r3, #252	@ 0xfc
 8009732:	18fb      	adds	r3, r7, r3
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	029b      	lsls	r3, r3, #10
 800973a:	b29b      	uxth	r3, r3
 800973c:	4313      	orrs	r3, r2
 800973e:	b29b      	uxth	r3, r3
 8009740:	4a1e      	ldr	r2, [pc, #120]	@ (80097bc <USB_EPStartXfer+0x3e4>)
 8009742:	4313      	orrs	r3, r2
 8009744:	b29a      	uxth	r2, r3
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	801a      	strh	r2, [r3, #0]
 800974a:	e01c      	b.n	8009786 <USB_EPStartXfer+0x3ae>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	785b      	ldrb	r3, [r3, #1]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d118      	bne.n	8009786 <USB_EPStartXfer+0x3ae>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	623b      	str	r3, [r7, #32]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2250      	movs	r2, #80	@ 0x50
 800975c:	5a9b      	ldrh	r3, [r3, r2]
 800975e:	b29b      	uxth	r3, r3
 8009760:	001a      	movs	r2, r3
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	189b      	adds	r3, r3, r2
 8009766:	623b      	str	r3, [r7, #32]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	00da      	lsls	r2, r3, #3
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	18d3      	adds	r3, r2, r3
 8009772:	4a0e      	ldr	r2, [pc, #56]	@ (80097ac <USB_EPStartXfer+0x3d4>)
 8009774:	4694      	mov	ip, r2
 8009776:	4463      	add	r3, ip
 8009778:	61fb      	str	r3, [r7, #28]
 800977a:	1d7b      	adds	r3, r7, #5
 800977c:	33ff      	adds	r3, #255	@ 0xff
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	b29a      	uxth	r2, r3
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009786:	2076      	movs	r0, #118	@ 0x76
 8009788:	183b      	adds	r3, r7, r0
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	8912      	ldrh	r2, [r2, #8]
 800978e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	6959      	ldr	r1, [r3, #20]
 8009794:	1d7b      	adds	r3, r7, #5
 8009796:	33ff      	adds	r3, #255	@ 0xff
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	b29c      	uxth	r4, r3
 800979c:	183b      	adds	r3, r7, r0
 800979e:	881a      	ldrh	r2, [r3, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	0023      	movs	r3, r4
 80097a4:	f001 f882 	bl	800a8ac <USB_WritePMA>
 80097a8:	e329      	b.n	8009dfe <USB_EPStartXfer+0xa26>
 80097aa:	46c0      	nop			@ (mov r8, r8)
 80097ac:	00000402 	.word	0x00000402
 80097b0:	ffff8f8f 	.word	0xffff8f8f
 80097b4:	ffff8180 	.word	0xffff8180
 80097b8:	00000406 	.word	0x00000406
 80097bc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	785b      	ldrb	r3, [r3, #1]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d000      	beq.n	80097ca <USB_EPStartXfer+0x3f2>
 80097c8:	e070      	b.n	80098ac <USB_EPStartXfer+0x4d4>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2250      	movs	r2, #80	@ 0x50
 80097d2:	5a9b      	ldrh	r3, [r3, r2]
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	001a      	movs	r2, r3
 80097d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097da:	189b      	adds	r3, r3, r2
 80097dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	00da      	lsls	r2, r3, #3
 80097e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097e6:	18d3      	adds	r3, r2, r3
 80097e8:	4acd      	ldr	r2, [pc, #820]	@ (8009b20 <USB_EPStartXfer+0x748>)
 80097ea:	4694      	mov	ip, r2
 80097ec:	4463      	add	r3, ip
 80097ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80097f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	059b      	lsls	r3, r3, #22
 80097f8:	0d9b      	lsrs	r3, r3, #22
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097fe:	801a      	strh	r2, [r3, #0]
 8009800:	1d7b      	adds	r3, r7, #5
 8009802:	33ff      	adds	r3, #255	@ 0xff
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d108      	bne.n	800981c <USB_EPStartXfer+0x444>
 800980a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	4ac4      	ldr	r2, [pc, #784]	@ (8009b24 <USB_EPStartXfer+0x74c>)
 8009812:	4313      	orrs	r3, r2
 8009814:	b29a      	uxth	r2, r3
 8009816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009818:	801a      	strh	r2, [r3, #0]
 800981a:	e064      	b.n	80098e6 <USB_EPStartXfer+0x50e>
 800981c:	1d7b      	adds	r3, r7, #5
 800981e:	33ff      	adds	r3, #255	@ 0xff
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b3e      	cmp	r3, #62	@ 0x3e
 8009824:	d81f      	bhi.n	8009866 <USB_EPStartXfer+0x48e>
 8009826:	1d7b      	adds	r3, r7, #5
 8009828:	33ff      	adds	r3, #255	@ 0xff
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	21f8      	movs	r1, #248	@ 0xf8
 8009830:	187a      	adds	r2, r7, r1
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	1d7b      	adds	r3, r7, #5
 8009836:	33ff      	adds	r3, #255	@ 0xff
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2201      	movs	r2, #1
 800983c:	4013      	ands	r3, r2
 800983e:	d004      	beq.n	800984a <USB_EPStartXfer+0x472>
 8009840:	187b      	adds	r3, r7, r1
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3301      	adds	r3, #1
 8009846:	187a      	adds	r2, r7, r1
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29a      	uxth	r2, r3
 8009850:	23f8      	movs	r3, #248	@ 0xf8
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	b29b      	uxth	r3, r3
 8009858:	029b      	lsls	r3, r3, #10
 800985a:	b29b      	uxth	r3, r3
 800985c:	4313      	orrs	r3, r2
 800985e:	b29a      	uxth	r2, r3
 8009860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	e03f      	b.n	80098e6 <USB_EPStartXfer+0x50e>
 8009866:	1d7b      	adds	r3, r7, #5
 8009868:	33ff      	adds	r3, #255	@ 0xff
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	095b      	lsrs	r3, r3, #5
 800986e:	21f8      	movs	r1, #248	@ 0xf8
 8009870:	187a      	adds	r2, r7, r1
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	1d7b      	adds	r3, r7, #5
 8009876:	33ff      	adds	r3, #255	@ 0xff
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	221f      	movs	r2, #31
 800987c:	4013      	ands	r3, r2
 800987e:	d104      	bne.n	800988a <USB_EPStartXfer+0x4b2>
 8009880:	187b      	adds	r3, r7, r1
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3b01      	subs	r3, #1
 8009886:	187a      	adds	r2, r7, r1
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	b29a      	uxth	r2, r3
 8009890:	23f8      	movs	r3, #248	@ 0xf8
 8009892:	18fb      	adds	r3, r7, r3
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	029b      	lsls	r3, r3, #10
 800989a:	b29b      	uxth	r3, r3
 800989c:	4313      	orrs	r3, r2
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4aa0      	ldr	r2, [pc, #640]	@ (8009b24 <USB_EPStartXfer+0x74c>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098a8:	801a      	strh	r2, [r3, #0]
 80098aa:	e01c      	b.n	80098e6 <USB_EPStartXfer+0x50e>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	785b      	ldrb	r3, [r3, #1]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d118      	bne.n	80098e6 <USB_EPStartXfer+0x50e>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2250      	movs	r2, #80	@ 0x50
 80098bc:	5a9b      	ldrh	r3, [r3, r2]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	001a      	movs	r2, r3
 80098c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098c4:	189b      	adds	r3, r3, r2
 80098c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	00da      	lsls	r2, r3, #3
 80098ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098d0:	18d3      	adds	r3, r2, r3
 80098d2:	4a93      	ldr	r2, [pc, #588]	@ (8009b20 <USB_EPStartXfer+0x748>)
 80098d4:	4694      	mov	ip, r2
 80098d6:	4463      	add	r3, ip
 80098d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098da:	1d7b      	adds	r3, r7, #5
 80098dc:	33ff      	adds	r3, #255	@ 0xff
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098e6:	2076      	movs	r0, #118	@ 0x76
 80098e8:	183b      	adds	r3, r7, r0
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	8912      	ldrh	r2, [r2, #8]
 80098ee:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	6959      	ldr	r1, [r3, #20]
 80098f4:	1d7b      	adds	r3, r7, #5
 80098f6:	33ff      	adds	r3, #255	@ 0xff
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	b29c      	uxth	r4, r3
 80098fc:	183b      	adds	r3, r7, r0
 80098fe:	881a      	ldrh	r2, [r3, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	0023      	movs	r3, r4
 8009904:	f000 ffd2 	bl	800a8ac <USB_WritePMA>
            ep->xfer_buff += len;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	695a      	ldr	r2, [r3, #20]
 800990c:	1d7b      	adds	r3, r7, #5
 800990e:	33ff      	adds	r3, #255	@ 0xff
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	18d2      	adds	r2, r2, r3
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	6a1a      	ldr	r2, [r3, #32]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	429a      	cmp	r2, r3
 8009922:	d908      	bls.n	8009936 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	6a1a      	ldr	r2, [r3, #32]
 8009928:	1d7b      	adds	r3, r7, #5
 800992a:	33ff      	adds	r3, #255	@ 0xff
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	1ad2      	subs	r2, r2, r3
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	621a      	str	r2, [r3, #32]
 8009934:	e007      	b.n	8009946 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	1d7a      	adds	r2, r7, #5
 800993c:	32ff      	adds	r2, #255	@ 0xff
 800993e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2200      	movs	r2, #0
 8009944:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	643b      	str	r3, [r7, #64]	@ 0x40
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	785b      	ldrb	r3, [r3, #1]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d000      	beq.n	8009954 <USB_EPStartXfer+0x57c>
 8009952:	e070      	b.n	8009a36 <USB_EPStartXfer+0x65e>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2250      	movs	r2, #80	@ 0x50
 800995c:	5a9b      	ldrh	r3, [r3, r2]
 800995e:	b29b      	uxth	r3, r3
 8009960:	001a      	movs	r2, r3
 8009962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009964:	189b      	adds	r3, r3, r2
 8009966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	00da      	lsls	r2, r3, #3
 800996e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009970:	18d3      	adds	r3, r2, r3
 8009972:	4a6d      	ldr	r2, [pc, #436]	@ (8009b28 <USB_EPStartXfer+0x750>)
 8009974:	4694      	mov	ip, r2
 8009976:	4463      	add	r3, ip
 8009978:	637b      	str	r3, [r7, #52]	@ 0x34
 800997a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	b29b      	uxth	r3, r3
 8009980:	059b      	lsls	r3, r3, #22
 8009982:	0d9b      	lsrs	r3, r3, #22
 8009984:	b29a      	uxth	r2, r3
 8009986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	1d7b      	adds	r3, r7, #5
 800998c:	33ff      	adds	r3, #255	@ 0xff
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d108      	bne.n	80099a6 <USB_EPStartXfer+0x5ce>
 8009994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	b29b      	uxth	r3, r3
 800999a:	4a62      	ldr	r2, [pc, #392]	@ (8009b24 <USB_EPStartXfer+0x74c>)
 800999c:	4313      	orrs	r3, r2
 800999e:	b29a      	uxth	r2, r3
 80099a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a2:	801a      	strh	r2, [r3, #0]
 80099a4:	e062      	b.n	8009a6c <USB_EPStartXfer+0x694>
 80099a6:	1d7b      	adds	r3, r7, #5
 80099a8:	33ff      	adds	r3, #255	@ 0xff
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80099ae:	d81f      	bhi.n	80099f0 <USB_EPStartXfer+0x618>
 80099b0:	1d7b      	adds	r3, r7, #5
 80099b2:	33ff      	adds	r3, #255	@ 0xff
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	21f4      	movs	r1, #244	@ 0xf4
 80099ba:	187a      	adds	r2, r7, r1
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	1d7b      	adds	r3, r7, #5
 80099c0:	33ff      	adds	r3, #255	@ 0xff
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2201      	movs	r2, #1
 80099c6:	4013      	ands	r3, r2
 80099c8:	d004      	beq.n	80099d4 <USB_EPStartXfer+0x5fc>
 80099ca:	187b      	adds	r3, r7, r1
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3301      	adds	r3, #1
 80099d0:	187a      	adds	r2, r7, r1
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29a      	uxth	r2, r3
 80099da:	23f4      	movs	r3, #244	@ 0xf4
 80099dc:	18fb      	adds	r3, r7, r3
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	029b      	lsls	r3, r3, #10
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4313      	orrs	r3, r2
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	e03d      	b.n	8009a6c <USB_EPStartXfer+0x694>
 80099f0:	1d7b      	adds	r3, r7, #5
 80099f2:	33ff      	adds	r3, #255	@ 0xff
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	095b      	lsrs	r3, r3, #5
 80099f8:	21f4      	movs	r1, #244	@ 0xf4
 80099fa:	187a      	adds	r2, r7, r1
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	1d7b      	adds	r3, r7, #5
 8009a00:	33ff      	adds	r3, #255	@ 0xff
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	221f      	movs	r2, #31
 8009a06:	4013      	ands	r3, r2
 8009a08:	d104      	bne.n	8009a14 <USB_EPStartXfer+0x63c>
 8009a0a:	187b      	adds	r3, r7, r1
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	187a      	adds	r2, r7, r1
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	23f4      	movs	r3, #244	@ 0xf4
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	029b      	lsls	r3, r3, #10
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	4313      	orrs	r3, r2
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8009b24 <USB_EPStartXfer+0x74c>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a32:	801a      	strh	r2, [r3, #0]
 8009a34:	e01a      	b.n	8009a6c <USB_EPStartXfer+0x694>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	785b      	ldrb	r3, [r3, #1]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d116      	bne.n	8009a6c <USB_EPStartXfer+0x694>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2250      	movs	r2, #80	@ 0x50
 8009a42:	5a9b      	ldrh	r3, [r3, r2]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	001a      	movs	r2, r3
 8009a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a4a:	189b      	adds	r3, r3, r2
 8009a4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	00da      	lsls	r2, r3, #3
 8009a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a56:	18d3      	adds	r3, r2, r3
 8009a58:	4a33      	ldr	r2, [pc, #204]	@ (8009b28 <USB_EPStartXfer+0x750>)
 8009a5a:	4694      	mov	ip, r2
 8009a5c:	4463      	add	r3, ip
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a60:	1d7b      	adds	r3, r7, #5
 8009a62:	33ff      	adds	r3, #255	@ 0xff
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a6c:	2076      	movs	r0, #118	@ 0x76
 8009a6e:	183b      	adds	r3, r7, r0
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	8952      	ldrh	r2, [r2, #10]
 8009a74:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	6959      	ldr	r1, [r3, #20]
 8009a7a:	1d7b      	adds	r3, r7, #5
 8009a7c:	33ff      	adds	r3, #255	@ 0xff
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	b29c      	uxth	r4, r3
 8009a82:	183b      	adds	r3, r7, r0
 8009a84:	881a      	ldrh	r2, [r3, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	0023      	movs	r3, r4
 8009a8a:	f000 ff0f 	bl	800a8ac <USB_WritePMA>
 8009a8e:	e1b6      	b.n	8009dfe <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	1d7a      	adds	r2, r7, #5
 8009a96:	32ff      	adds	r2, #255	@ 0xff
 8009a98:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	18d3      	adds	r3, r2, r3
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	2062      	movs	r0, #98	@ 0x62
 8009aaa:	183b      	adds	r3, r7, r0
 8009aac:	491f      	ldr	r1, [pc, #124]	@ (8009b2c <USB_EPStartXfer+0x754>)
 8009aae:	400a      	ands	r2, r1
 8009ab0:	801a      	strh	r2, [r3, #0]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	18d3      	adds	r3, r2, r3
 8009abc:	183a      	adds	r2, r7, r0
 8009abe:	8812      	ldrh	r2, [r2, #0]
 8009ac0:	491b      	ldr	r1, [pc, #108]	@ (8009b30 <USB_EPStartXfer+0x758>)
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	b292      	uxth	r2, r2
 8009ac6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2250      	movs	r2, #80	@ 0x50
 8009ad0:	5a9b      	ldrh	r3, [r3, r2]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	001a      	movs	r2, r3
 8009ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ad8:	189b      	adds	r3, r3, r2
 8009ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	00da      	lsls	r2, r3, #3
 8009ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ae4:	18d3      	adds	r3, r2, r3
 8009ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8009b20 <USB_EPStartXfer+0x748>)
 8009ae8:	4694      	mov	ip, r2
 8009aea:	4463      	add	r3, ip
 8009aec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009aee:	1d7b      	adds	r3, r7, #5
 8009af0:	33ff      	adds	r3, #255	@ 0xff
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009af8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009afa:	2076      	movs	r0, #118	@ 0x76
 8009afc:	183b      	adds	r3, r7, r0
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	8912      	ldrh	r2, [r2, #8]
 8009b02:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	6959      	ldr	r1, [r3, #20]
 8009b08:	1d7b      	adds	r3, r7, #5
 8009b0a:	33ff      	adds	r3, #255	@ 0xff
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	b29c      	uxth	r4, r3
 8009b10:	183b      	adds	r3, r7, r0
 8009b12:	881a      	ldrh	r2, [r3, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	0023      	movs	r3, r4
 8009b18:	f000 fec8 	bl	800a8ac <USB_WritePMA>
 8009b1c:	e16f      	b.n	8009dfe <USB_EPStartXfer+0xa26>
 8009b1e:	46c0      	nop			@ (mov r8, r8)
 8009b20:	00000402 	.word	0x00000402
 8009b24:	ffff8000 	.word	0xffff8000
 8009b28:	00000406 	.word	0x00000406
 8009b2c:	ffff8e8f 	.word	0xffff8e8f
 8009b30:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6a1a      	ldr	r2, [r3, #32]
 8009b38:	1d7b      	adds	r3, r7, #5
 8009b3a:	33ff      	adds	r3, #255	@ 0xff
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	1ad2      	subs	r2, r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	18d3      	adds	r3, r2, r3
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	001a      	movs	r2, r3
 8009b54:	2340      	movs	r3, #64	@ 0x40
 8009b56:	4013      	ands	r3, r2
 8009b58:	d100      	bne.n	8009b5c <USB_EPStartXfer+0x784>
 8009b5a:	e0a4      	b.n	8009ca6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d000      	beq.n	8009b6a <USB_EPStartXfer+0x792>
 8009b68:	e070      	b.n	8009c4c <USB_EPStartXfer+0x874>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2250      	movs	r2, #80	@ 0x50
 8009b72:	5a9b      	ldrh	r3, [r3, r2]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	001a      	movs	r2, r3
 8009b78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b7a:	189b      	adds	r3, r3, r2
 8009b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	00da      	lsls	r2, r3, #3
 8009b84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b86:	18d3      	adds	r3, r2, r3
 8009b88:	4ada      	ldr	r2, [pc, #872]	@ (8009ef4 <USB_EPStartXfer+0xb1c>)
 8009b8a:	4694      	mov	ip, r2
 8009b8c:	4463      	add	r3, ip
 8009b8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	059b      	lsls	r3, r3, #22
 8009b98:	0d9b      	lsrs	r3, r3, #22
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	1d7b      	adds	r3, r7, #5
 8009ba2:	33ff      	adds	r3, #255	@ 0xff
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d108      	bne.n	8009bbc <USB_EPStartXfer+0x7e4>
 8009baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	4ad1      	ldr	r2, [pc, #836]	@ (8009ef8 <USB_EPStartXfer+0xb20>)
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bb8:	801a      	strh	r2, [r3, #0]
 8009bba:	e062      	b.n	8009c82 <USB_EPStartXfer+0x8aa>
 8009bbc:	1d7b      	adds	r3, r7, #5
 8009bbe:	33ff      	adds	r3, #255	@ 0xff
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bc4:	d81f      	bhi.n	8009c06 <USB_EPStartXfer+0x82e>
 8009bc6:	1d7b      	adds	r3, r7, #5
 8009bc8:	33ff      	adds	r3, #255	@ 0xff
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	085b      	lsrs	r3, r3, #1
 8009bce:	21f0      	movs	r1, #240	@ 0xf0
 8009bd0:	187a      	adds	r2, r7, r1
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	1d7b      	adds	r3, r7, #5
 8009bd6:	33ff      	adds	r3, #255	@ 0xff
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4013      	ands	r3, r2
 8009bde:	d004      	beq.n	8009bea <USB_EPStartXfer+0x812>
 8009be0:	187b      	adds	r3, r7, r1
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3301      	adds	r3, #1
 8009be6:	187a      	adds	r2, r7, r1
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	23f0      	movs	r3, #240	@ 0xf0
 8009bf2:	18fb      	adds	r3, r7, r3
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	029b      	lsls	r3, r3, #10
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c02:	801a      	strh	r2, [r3, #0]
 8009c04:	e03d      	b.n	8009c82 <USB_EPStartXfer+0x8aa>
 8009c06:	1d7b      	adds	r3, r7, #5
 8009c08:	33ff      	adds	r3, #255	@ 0xff
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	095b      	lsrs	r3, r3, #5
 8009c0e:	21f0      	movs	r1, #240	@ 0xf0
 8009c10:	187a      	adds	r2, r7, r1
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	1d7b      	adds	r3, r7, #5
 8009c16:	33ff      	adds	r3, #255	@ 0xff
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	221f      	movs	r2, #31
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	d104      	bne.n	8009c2a <USB_EPStartXfer+0x852>
 8009c20:	187b      	adds	r3, r7, r1
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	187a      	adds	r2, r7, r1
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	23f0      	movs	r3, #240	@ 0xf0
 8009c32:	18fb      	adds	r3, r7, r3
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	029b      	lsls	r3, r3, #10
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	4aad      	ldr	r2, [pc, #692]	@ (8009ef8 <USB_EPStartXfer+0xb20>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c48:	801a      	strh	r2, [r3, #0]
 8009c4a:	e01a      	b.n	8009c82 <USB_EPStartXfer+0x8aa>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d116      	bne.n	8009c82 <USB_EPStartXfer+0x8aa>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2250      	movs	r2, #80	@ 0x50
 8009c58:	5a9b      	ldrh	r3, [r3, r2]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	001a      	movs	r2, r3
 8009c5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c60:	189b      	adds	r3, r3, r2
 8009c62:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	00da      	lsls	r2, r3, #3
 8009c6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c6c:	18d3      	adds	r3, r2, r3
 8009c6e:	4aa1      	ldr	r2, [pc, #644]	@ (8009ef4 <USB_EPStartXfer+0xb1c>)
 8009c70:	4694      	mov	ip, r2
 8009c72:	4463      	add	r3, ip
 8009c74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c76:	1d7b      	adds	r3, r7, #5
 8009c78:	33ff      	adds	r3, #255	@ 0xff
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009c82:	2076      	movs	r0, #118	@ 0x76
 8009c84:	183b      	adds	r3, r7, r0
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	8952      	ldrh	r2, [r2, #10]
 8009c8a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	6959      	ldr	r1, [r3, #20]
 8009c90:	1d7b      	adds	r3, r7, #5
 8009c92:	33ff      	adds	r3, #255	@ 0xff
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	b29c      	uxth	r4, r3
 8009c98:	183b      	adds	r3, r7, r0
 8009c9a:	881a      	ldrh	r2, [r3, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	0023      	movs	r3, r4
 8009ca0:	f000 fe04 	bl	800a8ac <USB_WritePMA>
 8009ca4:	e0ab      	b.n	8009dfe <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d000      	beq.n	8009cb0 <USB_EPStartXfer+0x8d8>
 8009cae:	e070      	b.n	8009d92 <USB_EPStartXfer+0x9ba>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2250      	movs	r2, #80	@ 0x50
 8009cb8:	5a9b      	ldrh	r3, [r3, r2]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	001a      	movs	r2, r3
 8009cbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009cc0:	189b      	adds	r3, r3, r2
 8009cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	00da      	lsls	r2, r3, #3
 8009cca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ccc:	18d3      	adds	r3, r2, r3
 8009cce:	4a8b      	ldr	r2, [pc, #556]	@ (8009efc <USB_EPStartXfer+0xb24>)
 8009cd0:	4694      	mov	ip, r2
 8009cd2:	4463      	add	r3, ip
 8009cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	059b      	lsls	r3, r3, #22
 8009cde:	0d9b      	lsrs	r3, r3, #22
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ce4:	801a      	strh	r2, [r3, #0]
 8009ce6:	1d7b      	adds	r3, r7, #5
 8009ce8:	33ff      	adds	r3, #255	@ 0xff
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d108      	bne.n	8009d02 <USB_EPStartXfer+0x92a>
 8009cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	4a80      	ldr	r2, [pc, #512]	@ (8009ef8 <USB_EPStartXfer+0xb20>)
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cfe:	801a      	strh	r2, [r3, #0]
 8009d00:	e06c      	b.n	8009ddc <USB_EPStartXfer+0xa04>
 8009d02:	1d7b      	adds	r3, r7, #5
 8009d04:	33ff      	adds	r3, #255	@ 0xff
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d0a:	d81f      	bhi.n	8009d4c <USB_EPStartXfer+0x974>
 8009d0c:	1d7b      	adds	r3, r7, #5
 8009d0e:	33ff      	adds	r3, #255	@ 0xff
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	085b      	lsrs	r3, r3, #1
 8009d14:	21ec      	movs	r1, #236	@ 0xec
 8009d16:	187a      	adds	r2, r7, r1
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	1d7b      	adds	r3, r7, #5
 8009d1c:	33ff      	adds	r3, #255	@ 0xff
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2201      	movs	r2, #1
 8009d22:	4013      	ands	r3, r2
 8009d24:	d004      	beq.n	8009d30 <USB_EPStartXfer+0x958>
 8009d26:	187b      	adds	r3, r7, r1
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	187a      	adds	r2, r7, r1
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	23ec      	movs	r3, #236	@ 0xec
 8009d38:	18fb      	adds	r3, r7, r3
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	029b      	lsls	r3, r3, #10
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	4313      	orrs	r3, r2
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d48:	801a      	strh	r2, [r3, #0]
 8009d4a:	e047      	b.n	8009ddc <USB_EPStartXfer+0xa04>
 8009d4c:	1d7b      	adds	r3, r7, #5
 8009d4e:	33ff      	adds	r3, #255	@ 0xff
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	21ec      	movs	r1, #236	@ 0xec
 8009d56:	187a      	adds	r2, r7, r1
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	1d7b      	adds	r3, r7, #5
 8009d5c:	33ff      	adds	r3, #255	@ 0xff
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	221f      	movs	r2, #31
 8009d62:	4013      	ands	r3, r2
 8009d64:	d104      	bne.n	8009d70 <USB_EPStartXfer+0x998>
 8009d66:	187b      	adds	r3, r7, r1
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	187a      	adds	r2, r7, r1
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	23ec      	movs	r3, #236	@ 0xec
 8009d78:	18fb      	adds	r3, r7, r3
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	029b      	lsls	r3, r3, #10
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	4313      	orrs	r3, r2
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4a5c      	ldr	r2, [pc, #368]	@ (8009ef8 <USB_EPStartXfer+0xb20>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d8e:	801a      	strh	r2, [r3, #0]
 8009d90:	e024      	b.n	8009ddc <USB_EPStartXfer+0xa04>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	785b      	ldrb	r3, [r3, #1]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d120      	bne.n	8009ddc <USB_EPStartXfer+0xa04>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2184      	movs	r1, #132	@ 0x84
 8009d9e:	187a      	adds	r2, r7, r1
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2250      	movs	r2, #80	@ 0x50
 8009da6:	5a9b      	ldrh	r3, [r3, r2]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	001a      	movs	r2, r3
 8009dac:	187b      	adds	r3, r7, r1
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	189b      	adds	r3, r3, r2
 8009db2:	187a      	adds	r2, r7, r1
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	00da      	lsls	r2, r3, #3
 8009dbc:	187b      	adds	r3, r7, r1
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	18d3      	adds	r3, r2, r3
 8009dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8009efc <USB_EPStartXfer+0xb24>)
 8009dc4:	4694      	mov	ip, r2
 8009dc6:	4463      	add	r3, ip
 8009dc8:	2180      	movs	r1, #128	@ 0x80
 8009dca:	187a      	adds	r2, r7, r1
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	1d7b      	adds	r3, r7, #5
 8009dd0:	33ff      	adds	r3, #255	@ 0xff
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	187b      	adds	r3, r7, r1
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ddc:	2076      	movs	r0, #118	@ 0x76
 8009dde:	183b      	adds	r3, r7, r0
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	8912      	ldrh	r2, [r2, #8]
 8009de4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6959      	ldr	r1, [r3, #20]
 8009dea:	1d7b      	adds	r3, r7, #5
 8009dec:	33ff      	adds	r3, #255	@ 0xff
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	b29c      	uxth	r4, r3
 8009df2:	183b      	adds	r3, r7, r0
 8009df4:	881a      	ldrh	r2, [r3, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	0023      	movs	r3, r4
 8009dfa:	f000 fd57 	bl	800a8ac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	18d3      	adds	r3, r2, r3
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	200a      	movs	r0, #10
 8009e0e:	183b      	adds	r3, r7, r0
 8009e10:	493b      	ldr	r1, [pc, #236]	@ (8009f00 <USB_EPStartXfer+0xb28>)
 8009e12:	400a      	ands	r2, r1
 8009e14:	801a      	strh	r2, [r3, #0]
 8009e16:	183b      	adds	r3, r7, r0
 8009e18:	183a      	adds	r2, r7, r0
 8009e1a:	8812      	ldrh	r2, [r2, #0]
 8009e1c:	2110      	movs	r1, #16
 8009e1e:	404a      	eors	r2, r1
 8009e20:	801a      	strh	r2, [r3, #0]
 8009e22:	183b      	adds	r3, r7, r0
 8009e24:	183a      	adds	r2, r7, r0
 8009e26:	8812      	ldrh	r2, [r2, #0]
 8009e28:	2120      	movs	r1, #32
 8009e2a:	404a      	eors	r2, r1
 8009e2c:	801a      	strh	r2, [r3, #0]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	18d3      	adds	r3, r2, r3
 8009e38:	183a      	adds	r2, r7, r0
 8009e3a:	8812      	ldrh	r2, [r2, #0]
 8009e3c:	4931      	ldr	r1, [pc, #196]	@ (8009f04 <USB_EPStartXfer+0xb2c>)
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	b292      	uxth	r2, r2
 8009e42:	801a      	strh	r2, [r3, #0]
 8009e44:	f000 fbe9 	bl	800a61a <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	7b1b      	ldrb	r3, [r3, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d000      	beq.n	8009e52 <USB_EPStartXfer+0xa7a>
 8009e50:	e0a8      	b.n	8009fa4 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	699a      	ldr	r2, [r3, #24]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d90d      	bls.n	8009e7a <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	1d7a      	adds	r2, r7, #5
 8009e64:	32ff      	adds	r2, #255	@ 0xff
 8009e66:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	699a      	ldr	r2, [r3, #24]
 8009e6c:	1d7b      	adds	r3, r7, #5
 8009e6e:	33ff      	adds	r3, #255	@ 0xff
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	1ad2      	subs	r2, r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	619a      	str	r2, [r3, #24]
 8009e78:	e007      	b.n	8009e8a <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	1d7a      	adds	r2, r7, #5
 8009e80:	32ff      	adds	r2, #255	@ 0xff
 8009e82:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2190      	movs	r1, #144	@ 0x90
 8009e8e:	187a      	adds	r2, r7, r1
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2250      	movs	r2, #80	@ 0x50
 8009e96:	5a9b      	ldrh	r3, [r3, r2]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	001a      	movs	r2, r3
 8009e9c:	187b      	adds	r3, r7, r1
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	189b      	adds	r3, r3, r2
 8009ea2:	187a      	adds	r2, r7, r1
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	00da      	lsls	r2, r3, #3
 8009eac:	187b      	adds	r3, r7, r1
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	18d3      	adds	r3, r2, r3
 8009eb2:	4a10      	ldr	r2, [pc, #64]	@ (8009ef4 <USB_EPStartXfer+0xb1c>)
 8009eb4:	4694      	mov	ip, r2
 8009eb6:	4463      	add	r3, ip
 8009eb8:	218c      	movs	r1, #140	@ 0x8c
 8009eba:	187a      	adds	r2, r7, r1
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	187b      	adds	r3, r7, r1
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	059b      	lsls	r3, r3, #22
 8009ec8:	0d9b      	lsrs	r3, r3, #22
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	187b      	adds	r3, r7, r1
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	801a      	strh	r2, [r3, #0]
 8009ed2:	1d7b      	adds	r3, r7, #5
 8009ed4:	33ff      	adds	r3, #255	@ 0xff
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d115      	bne.n	8009f08 <USB_EPStartXfer+0xb30>
 8009edc:	187b      	adds	r3, r7, r1
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	4a04      	ldr	r2, [pc, #16]	@ (8009ef8 <USB_EPStartXfer+0xb20>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	187b      	adds	r3, r7, r1
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	801a      	strh	r2, [r3, #0]
 8009ef0:	e36e      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
 8009ef2:	46c0      	nop			@ (mov r8, r8)
 8009ef4:	00000406 	.word	0x00000406
 8009ef8:	ffff8000 	.word	0xffff8000
 8009efc:	00000402 	.word	0x00000402
 8009f00:	ffff8fbf 	.word	0xffff8fbf
 8009f04:	ffff8080 	.word	0xffff8080
 8009f08:	1d7b      	adds	r3, r7, #5
 8009f0a:	33ff      	adds	r3, #255	@ 0xff
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f10:	d822      	bhi.n	8009f58 <USB_EPStartXfer+0xb80>
 8009f12:	1d7b      	adds	r3, r7, #5
 8009f14:	33ff      	adds	r3, #255	@ 0xff
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	085b      	lsrs	r3, r3, #1
 8009f1a:	21e8      	movs	r1, #232	@ 0xe8
 8009f1c:	187a      	adds	r2, r7, r1
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	1d7b      	adds	r3, r7, #5
 8009f22:	33ff      	adds	r3, #255	@ 0xff
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2201      	movs	r2, #1
 8009f28:	4013      	ands	r3, r2
 8009f2a:	d004      	beq.n	8009f36 <USB_EPStartXfer+0xb5e>
 8009f2c:	187b      	adds	r3, r7, r1
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	187a      	adds	r2, r7, r1
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	218c      	movs	r1, #140	@ 0x8c
 8009f38:	187b      	adds	r3, r7, r1
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	23e8      	movs	r3, #232	@ 0xe8
 8009f42:	18fb      	adds	r3, r7, r3
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	029b      	lsls	r3, r3, #10
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	187b      	adds	r3, r7, r1
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	801a      	strh	r2, [r3, #0]
 8009f56:	e33b      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
 8009f58:	1d7b      	adds	r3, r7, #5
 8009f5a:	33ff      	adds	r3, #255	@ 0xff
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	21e8      	movs	r1, #232	@ 0xe8
 8009f62:	187a      	adds	r2, r7, r1
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	1d7b      	adds	r3, r7, #5
 8009f68:	33ff      	adds	r3, #255	@ 0xff
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	221f      	movs	r2, #31
 8009f6e:	4013      	ands	r3, r2
 8009f70:	d104      	bne.n	8009f7c <USB_EPStartXfer+0xba4>
 8009f72:	187b      	adds	r3, r7, r1
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	187a      	adds	r2, r7, r1
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	218c      	movs	r1, #140	@ 0x8c
 8009f7e:	187b      	adds	r3, r7, r1
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	23e8      	movs	r3, #232	@ 0xe8
 8009f88:	18fb      	adds	r3, r7, r3
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	029b      	lsls	r3, r3, #10
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	4313      	orrs	r3, r2
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	4ad7      	ldr	r2, [pc, #860]	@ (800a2f4 <USB_EPStartXfer+0xf1c>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	187b      	adds	r3, r7, r1
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	e315      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	78db      	ldrb	r3, [r3, #3]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d000      	beq.n	8009fae <USB_EPStartXfer+0xbd6>
 8009fac:	e189      	b.n	800a2c2 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	785b      	ldrb	r3, [r3, #1]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d000      	beq.n	8009fb8 <USB_EPStartXfer+0xbe0>
 8009fb6:	e07b      	b.n	800a0b0 <USB_EPStartXfer+0xcd8>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	21ac      	movs	r1, #172	@ 0xac
 8009fbc:	187a      	adds	r2, r7, r1
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2250      	movs	r2, #80	@ 0x50
 8009fc4:	5a9b      	ldrh	r3, [r3, r2]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	001a      	movs	r2, r3
 8009fca:	187b      	adds	r3, r7, r1
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	189b      	adds	r3, r3, r2
 8009fd0:	187a      	adds	r2, r7, r1
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	00da      	lsls	r2, r3, #3
 8009fda:	187b      	adds	r3, r7, r1
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	18d3      	adds	r3, r2, r3
 8009fe0:	4ac5      	ldr	r2, [pc, #788]	@ (800a2f8 <USB_EPStartXfer+0xf20>)
 8009fe2:	4694      	mov	ip, r2
 8009fe4:	4463      	add	r3, ip
 8009fe6:	21a8      	movs	r1, #168	@ 0xa8
 8009fe8:	187a      	adds	r2, r7, r1
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	187b      	adds	r3, r7, r1
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	059b      	lsls	r3, r3, #22
 8009ff6:	0d9b      	lsrs	r3, r3, #22
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	187b      	adds	r3, r7, r1
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <USB_EPStartXfer+0xc46>
 800a008:	187b      	adds	r3, r7, r1
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	4ab8      	ldr	r2, [pc, #736]	@ (800a2f4 <USB_EPStartXfer+0xf1c>)
 800a012:	4313      	orrs	r3, r2
 800a014:	b29a      	uxth	r2, r3
 800a016:	187b      	adds	r3, r7, r1
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	801a      	strh	r2, [r3, #0]
 800a01c:	e06c      	b.n	800a0f8 <USB_EPStartXfer+0xd20>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b3e      	cmp	r3, #62	@ 0x3e
 800a024:	d820      	bhi.n	800a068 <USB_EPStartXfer+0xc90>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	085b      	lsrs	r3, r3, #1
 800a02c:	21e4      	movs	r1, #228	@ 0xe4
 800a02e:	187a      	adds	r2, r7, r1
 800a030:	6013      	str	r3, [r2, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	2201      	movs	r2, #1
 800a038:	4013      	ands	r3, r2
 800a03a:	d004      	beq.n	800a046 <USB_EPStartXfer+0xc6e>
 800a03c:	187b      	adds	r3, r7, r1
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	187a      	adds	r2, r7, r1
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	21a8      	movs	r1, #168	@ 0xa8
 800a048:	187b      	adds	r3, r7, r1
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	23e4      	movs	r3, #228	@ 0xe4
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	029b      	lsls	r3, r3, #10
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4313      	orrs	r3, r2
 800a05e:	b29a      	uxth	r2, r3
 800a060:	187b      	adds	r3, r7, r1
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	801a      	strh	r2, [r3, #0]
 800a066:	e047      	b.n	800a0f8 <USB_EPStartXfer+0xd20>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	095b      	lsrs	r3, r3, #5
 800a06e:	21e4      	movs	r1, #228	@ 0xe4
 800a070:	187a      	adds	r2, r7, r1
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	221f      	movs	r2, #31
 800a07a:	4013      	ands	r3, r2
 800a07c:	d104      	bne.n	800a088 <USB_EPStartXfer+0xcb0>
 800a07e:	187b      	adds	r3, r7, r1
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3b01      	subs	r3, #1
 800a084:	187a      	adds	r2, r7, r1
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	21a8      	movs	r1, #168	@ 0xa8
 800a08a:	187b      	adds	r3, r7, r1
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	b29a      	uxth	r2, r3
 800a092:	23e4      	movs	r3, #228	@ 0xe4
 800a094:	18fb      	adds	r3, r7, r3
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	029b      	lsls	r3, r3, #10
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	4a94      	ldr	r2, [pc, #592]	@ (800a2f4 <USB_EPStartXfer+0xf1c>)
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	187b      	adds	r3, r7, r1
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	801a      	strh	r2, [r3, #0]
 800a0ae:	e023      	b.n	800a0f8 <USB_EPStartXfer+0xd20>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	785b      	ldrb	r3, [r3, #1]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d11f      	bne.n	800a0f8 <USB_EPStartXfer+0xd20>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	21b4      	movs	r1, #180	@ 0xb4
 800a0bc:	187a      	adds	r2, r7, r1
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2250      	movs	r2, #80	@ 0x50
 800a0c4:	5a9b      	ldrh	r3, [r3, r2]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	001a      	movs	r2, r3
 800a0ca:	187b      	adds	r3, r7, r1
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	187a      	adds	r2, r7, r1
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	00da      	lsls	r2, r3, #3
 800a0da:	187b      	adds	r3, r7, r1
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	18d3      	adds	r3, r2, r3
 800a0e0:	4a85      	ldr	r2, [pc, #532]	@ (800a2f8 <USB_EPStartXfer+0xf20>)
 800a0e2:	4694      	mov	ip, r2
 800a0e4:	4463      	add	r3, ip
 800a0e6:	21b0      	movs	r1, #176	@ 0xb0
 800a0e8:	187a      	adds	r2, r7, r1
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	187b      	adds	r3, r7, r1
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	801a      	strh	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	22a4      	movs	r2, #164	@ 0xa4
 800a0fc:	18ba      	adds	r2, r7, r2
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d000      	beq.n	800a10a <USB_EPStartXfer+0xd32>
 800a108:	e07b      	b.n	800a202 <USB_EPStartXfer+0xe2a>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	219c      	movs	r1, #156	@ 0x9c
 800a10e:	187a      	adds	r2, r7, r1
 800a110:	6013      	str	r3, [r2, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2250      	movs	r2, #80	@ 0x50
 800a116:	5a9b      	ldrh	r3, [r3, r2]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	001a      	movs	r2, r3
 800a11c:	187b      	adds	r3, r7, r1
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	189b      	adds	r3, r3, r2
 800a122:	187a      	adds	r2, r7, r1
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	00da      	lsls	r2, r3, #3
 800a12c:	187b      	adds	r3, r7, r1
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	18d3      	adds	r3, r2, r3
 800a132:	4a72      	ldr	r2, [pc, #456]	@ (800a2fc <USB_EPStartXfer+0xf24>)
 800a134:	4694      	mov	ip, r2
 800a136:	4463      	add	r3, ip
 800a138:	2198      	movs	r1, #152	@ 0x98
 800a13a:	187a      	adds	r2, r7, r1
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	187b      	adds	r3, r7, r1
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	b29b      	uxth	r3, r3
 800a146:	059b      	lsls	r3, r3, #22
 800a148:	0d9b      	lsrs	r3, r3, #22
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	187b      	adds	r3, r7, r1
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	801a      	strh	r2, [r3, #0]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10a      	bne.n	800a170 <USB_EPStartXfer+0xd98>
 800a15a:	187b      	adds	r3, r7, r1
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	b29b      	uxth	r3, r3
 800a162:	4a64      	ldr	r2, [pc, #400]	@ (800a2f4 <USB_EPStartXfer+0xf1c>)
 800a164:	4313      	orrs	r3, r2
 800a166:	b29a      	uxth	r2, r3
 800a168:	187b      	adds	r3, r7, r1
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	e069      	b.n	800a244 <USB_EPStartXfer+0xe6c>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	2b3e      	cmp	r3, #62	@ 0x3e
 800a176:	d820      	bhi.n	800a1ba <USB_EPStartXfer+0xde2>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	085b      	lsrs	r3, r3, #1
 800a17e:	21e0      	movs	r1, #224	@ 0xe0
 800a180:	187a      	adds	r2, r7, r1
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	2201      	movs	r2, #1
 800a18a:	4013      	ands	r3, r2
 800a18c:	d004      	beq.n	800a198 <USB_EPStartXfer+0xdc0>
 800a18e:	187b      	adds	r3, r7, r1
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3301      	adds	r3, #1
 800a194:	187a      	adds	r2, r7, r1
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	2198      	movs	r1, #152	@ 0x98
 800a19a:	187b      	adds	r3, r7, r1
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	23e0      	movs	r3, #224	@ 0xe0
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	029b      	lsls	r3, r3, #10
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	187b      	adds	r3, r7, r1
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	801a      	strh	r2, [r3, #0]
 800a1b8:	e044      	b.n	800a244 <USB_EPStartXfer+0xe6c>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	21e0      	movs	r1, #224	@ 0xe0
 800a1c2:	187a      	adds	r2, r7, r1
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	221f      	movs	r2, #31
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	d104      	bne.n	800a1da <USB_EPStartXfer+0xe02>
 800a1d0:	187b      	adds	r3, r7, r1
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	187a      	adds	r2, r7, r1
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	2198      	movs	r1, #152	@ 0x98
 800a1dc:	187b      	adds	r3, r7, r1
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	23e0      	movs	r3, #224	@ 0xe0
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	029b      	lsls	r3, r3, #10
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4a3f      	ldr	r2, [pc, #252]	@ (800a2f4 <USB_EPStartXfer+0xf1c>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	187b      	adds	r3, r7, r1
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	801a      	strh	r2, [r3, #0]
 800a200:	e020      	b.n	800a244 <USB_EPStartXfer+0xe6c>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d11c      	bne.n	800a244 <USB_EPStartXfer+0xe6c>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2250      	movs	r2, #80	@ 0x50
 800a20e:	5a9b      	ldrh	r3, [r3, r2]
 800a210:	b29b      	uxth	r3, r3
 800a212:	001a      	movs	r2, r3
 800a214:	21a4      	movs	r1, #164	@ 0xa4
 800a216:	187b      	adds	r3, r7, r1
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	189b      	adds	r3, r3, r2
 800a21c:	187a      	adds	r2, r7, r1
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	00da      	lsls	r2, r3, #3
 800a226:	187b      	adds	r3, r7, r1
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	18d3      	adds	r3, r2, r3
 800a22c:	4a33      	ldr	r2, [pc, #204]	@ (800a2fc <USB_EPStartXfer+0xf24>)
 800a22e:	4694      	mov	ip, r2
 800a230:	4463      	add	r3, ip
 800a232:	21a0      	movs	r1, #160	@ 0xa0
 800a234:	187a      	adds	r2, r7, r1
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	187b      	adds	r3, r7, r1
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d100      	bne.n	800a24e <USB_EPStartXfer+0xe76>
 800a24c:	e1c0      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	18d2      	adds	r2, r2, r3
 800a258:	2196      	movs	r1, #150	@ 0x96
 800a25a:	187b      	adds	r3, r7, r1
 800a25c:	8812      	ldrh	r2, [r2, #0]
 800a25e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a260:	187b      	adds	r3, r7, r1
 800a262:	881a      	ldrh	r2, [r3, #0]
 800a264:	2380      	movs	r3, #128	@ 0x80
 800a266:	01db      	lsls	r3, r3, #7
 800a268:	4013      	ands	r3, r2
 800a26a:	d004      	beq.n	800a276 <USB_EPStartXfer+0xe9e>
 800a26c:	187b      	adds	r3, r7, r1
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	2240      	movs	r2, #64	@ 0x40
 800a272:	4013      	ands	r3, r2
 800a274:	d10d      	bne.n	800a292 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a276:	2196      	movs	r1, #150	@ 0x96
 800a278:	187b      	adds	r3, r7, r1
 800a27a:	881a      	ldrh	r2, [r3, #0]
 800a27c:	2380      	movs	r3, #128	@ 0x80
 800a27e:	01db      	lsls	r3, r3, #7
 800a280:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a282:	d000      	beq.n	800a286 <USB_EPStartXfer+0xeae>
 800a284:	e1a4      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a286:	187b      	adds	r3, r7, r1
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	2240      	movs	r2, #64	@ 0x40
 800a28c:	4013      	ands	r3, r2
 800a28e:	d000      	beq.n	800a292 <USB_EPStartXfer+0xeba>
 800a290:	e19e      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	18d3      	adds	r3, r2, r3
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	2094      	movs	r0, #148	@ 0x94
 800a2a2:	183b      	adds	r3, r7, r0
 800a2a4:	4916      	ldr	r1, [pc, #88]	@ (800a300 <USB_EPStartXfer+0xf28>)
 800a2a6:	400a      	ands	r2, r1
 800a2a8:	801a      	strh	r2, [r3, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	18d3      	adds	r3, r2, r3
 800a2b4:	183a      	adds	r2, r7, r0
 800a2b6:	8812      	ldrh	r2, [r2, #0]
 800a2b8:	4912      	ldr	r1, [pc, #72]	@ (800a304 <USB_EPStartXfer+0xf2c>)
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	b292      	uxth	r2, r2
 800a2be:	801a      	strh	r2, [r3, #0]
 800a2c0:	e186      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	78db      	ldrb	r3, [r3, #3]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d000      	beq.n	800a2cc <USB_EPStartXfer+0xef4>
 800a2ca:	e17f      	b.n	800a5cc <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	699a      	ldr	r2, [r3, #24]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d917      	bls.n	800a308 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	1d7a      	adds	r2, r7, #5
 800a2de:	32ff      	adds	r2, #255	@ 0xff
 800a2e0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	699a      	ldr	r2, [r3, #24]
 800a2e6:	1d7b      	adds	r3, r7, #5
 800a2e8:	33ff      	adds	r3, #255	@ 0xff
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	1ad2      	subs	r2, r2, r3
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	619a      	str	r2, [r3, #24]
 800a2f2:	e011      	b.n	800a318 <USB_EPStartXfer+0xf40>
 800a2f4:	ffff8000 	.word	0xffff8000
 800a2f8:	00000402 	.word	0x00000402
 800a2fc:	00000406 	.word	0x00000406
 800a300:	ffff8f8f 	.word	0xffff8f8f
 800a304:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	1d7a      	adds	r2, r7, #5
 800a30e:	32ff      	adds	r2, #255	@ 0xff
 800a310:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2200      	movs	r2, #0
 800a316:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d000      	beq.n	800a322 <USB_EPStartXfer+0xf4a>
 800a320:	e081      	b.n	800a426 <USB_EPStartXfer+0x104e>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	21cc      	movs	r1, #204	@ 0xcc
 800a326:	187a      	adds	r2, r7, r1
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2250      	movs	r2, #80	@ 0x50
 800a32e:	5a9b      	ldrh	r3, [r3, r2]
 800a330:	b29b      	uxth	r3, r3
 800a332:	001a      	movs	r2, r3
 800a334:	187b      	adds	r3, r7, r1
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	189b      	adds	r3, r3, r2
 800a33a:	187a      	adds	r2, r7, r1
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	00da      	lsls	r2, r3, #3
 800a344:	187b      	adds	r3, r7, r1
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	18d3      	adds	r3, r2, r3
 800a34a:	4ab6      	ldr	r2, [pc, #728]	@ (800a624 <USB_EPStartXfer+0x124c>)
 800a34c:	4694      	mov	ip, r2
 800a34e:	4463      	add	r3, ip
 800a350:	21c8      	movs	r1, #200	@ 0xc8
 800a352:	187a      	adds	r2, r7, r1
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	187b      	adds	r3, r7, r1
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	059b      	lsls	r3, r3, #22
 800a360:	0d9b      	lsrs	r3, r3, #22
 800a362:	b29a      	uxth	r2, r3
 800a364:	187b      	adds	r3, r7, r1
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	801a      	strh	r2, [r3, #0]
 800a36a:	1d7b      	adds	r3, r7, #5
 800a36c:	33ff      	adds	r3, #255	@ 0xff
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <USB_EPStartXfer+0xfb2>
 800a374:	187b      	adds	r3, r7, r1
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	4aaa      	ldr	r2, [pc, #680]	@ (800a628 <USB_EPStartXfer+0x1250>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	b29a      	uxth	r2, r3
 800a382:	187b      	adds	r3, r7, r1
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	801a      	strh	r2, [r3, #0]
 800a388:	e072      	b.n	800a470 <USB_EPStartXfer+0x1098>
 800a38a:	1d7b      	adds	r3, r7, #5
 800a38c:	33ff      	adds	r3, #255	@ 0xff
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b3e      	cmp	r3, #62	@ 0x3e
 800a392:	d822      	bhi.n	800a3da <USB_EPStartXfer+0x1002>
 800a394:	1d7b      	adds	r3, r7, #5
 800a396:	33ff      	adds	r3, #255	@ 0xff
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	085b      	lsrs	r3, r3, #1
 800a39c:	21dc      	movs	r1, #220	@ 0xdc
 800a39e:	187a      	adds	r2, r7, r1
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	1d7b      	adds	r3, r7, #5
 800a3a4:	33ff      	adds	r3, #255	@ 0xff
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	d004      	beq.n	800a3b8 <USB_EPStartXfer+0xfe0>
 800a3ae:	187b      	adds	r3, r7, r1
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	187a      	adds	r2, r7, r1
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	21c8      	movs	r1, #200	@ 0xc8
 800a3ba:	187b      	adds	r3, r7, r1
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	23dc      	movs	r3, #220	@ 0xdc
 800a3c4:	18fb      	adds	r3, r7, r3
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	029b      	lsls	r3, r3, #10
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	187b      	adds	r3, r7, r1
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	801a      	strh	r2, [r3, #0]
 800a3d8:	e04a      	b.n	800a470 <USB_EPStartXfer+0x1098>
 800a3da:	1d7b      	adds	r3, r7, #5
 800a3dc:	33ff      	adds	r3, #255	@ 0xff
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	095b      	lsrs	r3, r3, #5
 800a3e2:	21dc      	movs	r1, #220	@ 0xdc
 800a3e4:	187a      	adds	r2, r7, r1
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	1d7b      	adds	r3, r7, #5
 800a3ea:	33ff      	adds	r3, #255	@ 0xff
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	221f      	movs	r2, #31
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	d104      	bne.n	800a3fe <USB_EPStartXfer+0x1026>
 800a3f4:	187b      	adds	r3, r7, r1
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	187a      	adds	r2, r7, r1
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	21c8      	movs	r1, #200	@ 0xc8
 800a400:	187b      	adds	r3, r7, r1
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	b29a      	uxth	r2, r3
 800a408:	23dc      	movs	r3, #220	@ 0xdc
 800a40a:	18fb      	adds	r3, r7, r3
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	029b      	lsls	r3, r3, #10
 800a412:	b29b      	uxth	r3, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	b29b      	uxth	r3, r3
 800a418:	4a83      	ldr	r2, [pc, #524]	@ (800a628 <USB_EPStartXfer+0x1250>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	187b      	adds	r3, r7, r1
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	801a      	strh	r2, [r3, #0]
 800a424:	e024      	b.n	800a470 <USB_EPStartXfer+0x1098>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d120      	bne.n	800a470 <USB_EPStartXfer+0x1098>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	21d4      	movs	r1, #212	@ 0xd4
 800a432:	187a      	adds	r2, r7, r1
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2250      	movs	r2, #80	@ 0x50
 800a43a:	5a9b      	ldrh	r3, [r3, r2]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	001a      	movs	r2, r3
 800a440:	187b      	adds	r3, r7, r1
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	189b      	adds	r3, r3, r2
 800a446:	187a      	adds	r2, r7, r1
 800a448:	6013      	str	r3, [r2, #0]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	00da      	lsls	r2, r3, #3
 800a450:	187b      	adds	r3, r7, r1
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	18d3      	adds	r3, r2, r3
 800a456:	4a73      	ldr	r2, [pc, #460]	@ (800a624 <USB_EPStartXfer+0x124c>)
 800a458:	4694      	mov	ip, r2
 800a45a:	4463      	add	r3, ip
 800a45c:	21d0      	movs	r1, #208	@ 0xd0
 800a45e:	187a      	adds	r2, r7, r1
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	1d7b      	adds	r3, r7, #5
 800a464:	33ff      	adds	r3, #255	@ 0xff
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	b29a      	uxth	r2, r3
 800a46a:	187b      	adds	r3, r7, r1
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	801a      	strh	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	22c4      	movs	r2, #196	@ 0xc4
 800a474:	18ba      	adds	r2, r7, r2
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	785b      	ldrb	r3, [r3, #1]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d000      	beq.n	800a482 <USB_EPStartXfer+0x10aa>
 800a480:	e081      	b.n	800a586 <USB_EPStartXfer+0x11ae>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	21bc      	movs	r1, #188	@ 0xbc
 800a486:	187a      	adds	r2, r7, r1
 800a488:	6013      	str	r3, [r2, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2250      	movs	r2, #80	@ 0x50
 800a48e:	5a9b      	ldrh	r3, [r3, r2]
 800a490:	b29b      	uxth	r3, r3
 800a492:	001a      	movs	r2, r3
 800a494:	187b      	adds	r3, r7, r1
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	189b      	adds	r3, r3, r2
 800a49a:	187a      	adds	r2, r7, r1
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	00da      	lsls	r2, r3, #3
 800a4a4:	187b      	adds	r3, r7, r1
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	18d3      	adds	r3, r2, r3
 800a4aa:	4a60      	ldr	r2, [pc, #384]	@ (800a62c <USB_EPStartXfer+0x1254>)
 800a4ac:	4694      	mov	ip, r2
 800a4ae:	4463      	add	r3, ip
 800a4b0:	21b8      	movs	r1, #184	@ 0xb8
 800a4b2:	187a      	adds	r2, r7, r1
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	187b      	adds	r3, r7, r1
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	059b      	lsls	r3, r3, #22
 800a4c0:	0d9b      	lsrs	r3, r3, #22
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	187b      	adds	r3, r7, r1
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	1d7b      	adds	r3, r7, #5
 800a4cc:	33ff      	adds	r3, #255	@ 0xff
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <USB_EPStartXfer+0x1112>
 800a4d4:	187b      	adds	r3, r7, r1
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	4a52      	ldr	r2, [pc, #328]	@ (800a628 <USB_EPStartXfer+0x1250>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	187b      	adds	r3, r7, r1
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	801a      	strh	r2, [r3, #0]
 800a4e8:	e072      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
 800a4ea:	1d7b      	adds	r3, r7, #5
 800a4ec:	33ff      	adds	r3, #255	@ 0xff
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4f2:	d822      	bhi.n	800a53a <USB_EPStartXfer+0x1162>
 800a4f4:	1d7b      	adds	r3, r7, #5
 800a4f6:	33ff      	adds	r3, #255	@ 0xff
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	085b      	lsrs	r3, r3, #1
 800a4fc:	21d8      	movs	r1, #216	@ 0xd8
 800a4fe:	187a      	adds	r2, r7, r1
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	1d7b      	adds	r3, r7, #5
 800a504:	33ff      	adds	r3, #255	@ 0xff
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2201      	movs	r2, #1
 800a50a:	4013      	ands	r3, r2
 800a50c:	d004      	beq.n	800a518 <USB_EPStartXfer+0x1140>
 800a50e:	187b      	adds	r3, r7, r1
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3301      	adds	r3, #1
 800a514:	187a      	adds	r2, r7, r1
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	21b8      	movs	r1, #184	@ 0xb8
 800a51a:	187b      	adds	r3, r7, r1
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	b29a      	uxth	r2, r3
 800a522:	23d8      	movs	r3, #216	@ 0xd8
 800a524:	18fb      	adds	r3, r7, r3
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	029b      	lsls	r3, r3, #10
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	4313      	orrs	r3, r2
 800a530:	b29a      	uxth	r2, r3
 800a532:	187b      	adds	r3, r7, r1
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	801a      	strh	r2, [r3, #0]
 800a538:	e04a      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
 800a53a:	1d7b      	adds	r3, r7, #5
 800a53c:	33ff      	adds	r3, #255	@ 0xff
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	095b      	lsrs	r3, r3, #5
 800a542:	21d8      	movs	r1, #216	@ 0xd8
 800a544:	187a      	adds	r2, r7, r1
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	1d7b      	adds	r3, r7, #5
 800a54a:	33ff      	adds	r3, #255	@ 0xff
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	221f      	movs	r2, #31
 800a550:	4013      	ands	r3, r2
 800a552:	d104      	bne.n	800a55e <USB_EPStartXfer+0x1186>
 800a554:	187b      	adds	r3, r7, r1
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3b01      	subs	r3, #1
 800a55a:	187a      	adds	r2, r7, r1
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	21b8      	movs	r1, #184	@ 0xb8
 800a560:	187b      	adds	r3, r7, r1
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	b29a      	uxth	r2, r3
 800a568:	23d8      	movs	r3, #216	@ 0xd8
 800a56a:	18fb      	adds	r3, r7, r3
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	029b      	lsls	r3, r3, #10
 800a572:	b29b      	uxth	r3, r3
 800a574:	4313      	orrs	r3, r2
 800a576:	b29b      	uxth	r3, r3
 800a578:	4a2b      	ldr	r2, [pc, #172]	@ (800a628 <USB_EPStartXfer+0x1250>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	187b      	adds	r3, r7, r1
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	801a      	strh	r2, [r3, #0]
 800a584:	e024      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d120      	bne.n	800a5d0 <USB_EPStartXfer+0x11f8>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2250      	movs	r2, #80	@ 0x50
 800a592:	5a9b      	ldrh	r3, [r3, r2]
 800a594:	b29b      	uxth	r3, r3
 800a596:	001a      	movs	r2, r3
 800a598:	21c4      	movs	r1, #196	@ 0xc4
 800a59a:	187b      	adds	r3, r7, r1
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	189b      	adds	r3, r3, r2
 800a5a0:	187a      	adds	r2, r7, r1
 800a5a2:	6013      	str	r3, [r2, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	00da      	lsls	r2, r3, #3
 800a5aa:	187b      	adds	r3, r7, r1
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	18d3      	adds	r3, r2, r3
 800a5b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a62c <USB_EPStartXfer+0x1254>)
 800a5b2:	4694      	mov	ip, r2
 800a5b4:	4463      	add	r3, ip
 800a5b6:	21c0      	movs	r1, #192	@ 0xc0
 800a5b8:	187a      	adds	r2, r7, r1
 800a5ba:	6013      	str	r3, [r2, #0]
 800a5bc:	1d7b      	adds	r3, r7, #5
 800a5be:	33ff      	adds	r3, #255	@ 0xff
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	187b      	adds	r3, r7, r1
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	801a      	strh	r2, [r3, #0]
 800a5ca:	e001      	b.n	800a5d0 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e025      	b.n	800a61c <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	18d3      	adds	r3, r2, r3
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	208a      	movs	r0, #138	@ 0x8a
 800a5e0:	183b      	adds	r3, r7, r0
 800a5e2:	4913      	ldr	r1, [pc, #76]	@ (800a630 <USB_EPStartXfer+0x1258>)
 800a5e4:	400a      	ands	r2, r1
 800a5e6:	801a      	strh	r2, [r3, #0]
 800a5e8:	183b      	adds	r3, r7, r0
 800a5ea:	183a      	adds	r2, r7, r0
 800a5ec:	8812      	ldrh	r2, [r2, #0]
 800a5ee:	2180      	movs	r1, #128	@ 0x80
 800a5f0:	0149      	lsls	r1, r1, #5
 800a5f2:	404a      	eors	r2, r1
 800a5f4:	801a      	strh	r2, [r3, #0]
 800a5f6:	183b      	adds	r3, r7, r0
 800a5f8:	183a      	adds	r2, r7, r0
 800a5fa:	8812      	ldrh	r2, [r2, #0]
 800a5fc:	2180      	movs	r1, #128	@ 0x80
 800a5fe:	0189      	lsls	r1, r1, #6
 800a600:	404a      	eors	r2, r1
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	18d3      	adds	r3, r2, r3
 800a60e:	183a      	adds	r2, r7, r0
 800a610:	8812      	ldrh	r2, [r2, #0]
 800a612:	4908      	ldr	r1, [pc, #32]	@ (800a634 <USB_EPStartXfer+0x125c>)
 800a614:	430a      	orrs	r2, r1
 800a616:	b292      	uxth	r2, r2
 800a618:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	0018      	movs	r0, r3
 800a61e:	46bd      	mov	sp, r7
 800a620:	b043      	add	sp, #268	@ 0x10c
 800a622:	bd90      	pop	{r4, r7, pc}
 800a624:	00000402 	.word	0x00000402
 800a628:	ffff8000 	.word	0xffff8000
 800a62c:	00000406 	.word	0x00000406
 800a630:	ffffbf8f 	.word	0xffffbf8f
 800a634:	ffff8080 	.word	0xffff8080

0800a638 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d01d      	beq.n	800a686 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	18d3      	adds	r3, r2, r3
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	b29a      	uxth	r2, r3
 800a658:	200c      	movs	r0, #12
 800a65a:	183b      	adds	r3, r7, r0
 800a65c:	491b      	ldr	r1, [pc, #108]	@ (800a6cc <USB_EPSetStall+0x94>)
 800a65e:	400a      	ands	r2, r1
 800a660:	801a      	strh	r2, [r3, #0]
 800a662:	183b      	adds	r3, r7, r0
 800a664:	183a      	adds	r2, r7, r0
 800a666:	8812      	ldrh	r2, [r2, #0]
 800a668:	2110      	movs	r1, #16
 800a66a:	404a      	eors	r2, r1
 800a66c:	801a      	strh	r2, [r3, #0]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	18d3      	adds	r3, r2, r3
 800a678:	183a      	adds	r2, r7, r0
 800a67a:	8812      	ldrh	r2, [r2, #0]
 800a67c:	4914      	ldr	r1, [pc, #80]	@ (800a6d0 <USB_EPSetStall+0x98>)
 800a67e:	430a      	orrs	r2, r1
 800a680:	b292      	uxth	r2, r2
 800a682:	801a      	strh	r2, [r3, #0]
 800a684:	e01d      	b.n	800a6c2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	18d3      	adds	r3, r2, r3
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29a      	uxth	r2, r3
 800a694:	200e      	movs	r0, #14
 800a696:	183b      	adds	r3, r7, r0
 800a698:	490e      	ldr	r1, [pc, #56]	@ (800a6d4 <USB_EPSetStall+0x9c>)
 800a69a:	400a      	ands	r2, r1
 800a69c:	801a      	strh	r2, [r3, #0]
 800a69e:	183b      	adds	r3, r7, r0
 800a6a0:	183a      	adds	r2, r7, r0
 800a6a2:	8812      	ldrh	r2, [r2, #0]
 800a6a4:	2180      	movs	r1, #128	@ 0x80
 800a6a6:	0149      	lsls	r1, r1, #5
 800a6a8:	404a      	eors	r2, r1
 800a6aa:	801a      	strh	r2, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	18d3      	adds	r3, r2, r3
 800a6b6:	183a      	adds	r2, r7, r0
 800a6b8:	8812      	ldrh	r2, [r2, #0]
 800a6ba:	4905      	ldr	r1, [pc, #20]	@ (800a6d0 <USB_EPSetStall+0x98>)
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	b292      	uxth	r2, r2
 800a6c0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	b004      	add	sp, #16
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	ffff8fbf 	.word	0xffff8fbf
 800a6d0:	ffff8080 	.word	0xffff8080
 800a6d4:	ffffbf8f 	.word	0xffffbf8f

0800a6d8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	7b1b      	ldrb	r3, [r3, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d000      	beq.n	800a6ec <USB_EPClearStall+0x14>
 800a6ea:	e095      	b.n	800a818 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	785b      	ldrb	r3, [r3, #1]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d046      	beq.n	800a782 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	18d2      	adds	r2, r2, r3
 800a6fe:	2110      	movs	r1, #16
 800a700:	187b      	adds	r3, r7, r1
 800a702:	8812      	ldrh	r2, [r2, #0]
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	187b      	adds	r3, r7, r1
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	2240      	movs	r2, #64	@ 0x40
 800a70c:	4013      	ands	r3, r2
 800a70e:	d016      	beq.n	800a73e <USB_EPClearStall+0x66>
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	18d3      	adds	r3, r2, r3
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	200e      	movs	r0, #14
 800a720:	183b      	adds	r3, r7, r0
 800a722:	4940      	ldr	r1, [pc, #256]	@ (800a824 <USB_EPClearStall+0x14c>)
 800a724:	400a      	ands	r2, r1
 800a726:	801a      	strh	r2, [r3, #0]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	18d3      	adds	r3, r2, r3
 800a732:	183a      	adds	r2, r7, r0
 800a734:	8812      	ldrh	r2, [r2, #0]
 800a736:	493c      	ldr	r1, [pc, #240]	@ (800a828 <USB_EPClearStall+0x150>)
 800a738:	430a      	orrs	r2, r1
 800a73a:	b292      	uxth	r2, r2
 800a73c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	78db      	ldrb	r3, [r3, #3]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d068      	beq.n	800a818 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	18d3      	adds	r3, r2, r3
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29a      	uxth	r2, r3
 800a754:	200c      	movs	r0, #12
 800a756:	183b      	adds	r3, r7, r0
 800a758:	4934      	ldr	r1, [pc, #208]	@ (800a82c <USB_EPClearStall+0x154>)
 800a75a:	400a      	ands	r2, r1
 800a75c:	801a      	strh	r2, [r3, #0]
 800a75e:	183b      	adds	r3, r7, r0
 800a760:	183a      	adds	r2, r7, r0
 800a762:	8812      	ldrh	r2, [r2, #0]
 800a764:	2120      	movs	r1, #32
 800a766:	404a      	eors	r2, r1
 800a768:	801a      	strh	r2, [r3, #0]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	18d3      	adds	r3, r2, r3
 800a774:	183a      	adds	r2, r7, r0
 800a776:	8812      	ldrh	r2, [r2, #0]
 800a778:	492d      	ldr	r1, [pc, #180]	@ (800a830 <USB_EPClearStall+0x158>)
 800a77a:	430a      	orrs	r2, r1
 800a77c:	b292      	uxth	r2, r2
 800a77e:	801a      	strh	r2, [r3, #0]
 800a780:	e04a      	b.n	800a818 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	18d2      	adds	r2, r2, r3
 800a78c:	2116      	movs	r1, #22
 800a78e:	187b      	adds	r3, r7, r1
 800a790:	8812      	ldrh	r2, [r2, #0]
 800a792:	801a      	strh	r2, [r3, #0]
 800a794:	187b      	adds	r3, r7, r1
 800a796:	881a      	ldrh	r2, [r3, #0]
 800a798:	2380      	movs	r3, #128	@ 0x80
 800a79a:	01db      	lsls	r3, r3, #7
 800a79c:	4013      	ands	r3, r2
 800a79e:	d016      	beq.n	800a7ce <USB_EPClearStall+0xf6>
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	18d3      	adds	r3, r2, r3
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	2014      	movs	r0, #20
 800a7b0:	183b      	adds	r3, r7, r0
 800a7b2:	491c      	ldr	r1, [pc, #112]	@ (800a824 <USB_EPClearStall+0x14c>)
 800a7b4:	400a      	ands	r2, r1
 800a7b6:	801a      	strh	r2, [r3, #0]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	18d3      	adds	r3, r2, r3
 800a7c2:	183a      	adds	r2, r7, r0
 800a7c4:	8812      	ldrh	r2, [r2, #0]
 800a7c6:	491b      	ldr	r1, [pc, #108]	@ (800a834 <USB_EPClearStall+0x15c>)
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	b292      	uxth	r2, r2
 800a7cc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	18d3      	adds	r3, r2, r3
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	2012      	movs	r0, #18
 800a7de:	183b      	adds	r3, r7, r0
 800a7e0:	4915      	ldr	r1, [pc, #84]	@ (800a838 <USB_EPClearStall+0x160>)
 800a7e2:	400a      	ands	r2, r1
 800a7e4:	801a      	strh	r2, [r3, #0]
 800a7e6:	183b      	adds	r3, r7, r0
 800a7e8:	183a      	adds	r2, r7, r0
 800a7ea:	8812      	ldrh	r2, [r2, #0]
 800a7ec:	2180      	movs	r1, #128	@ 0x80
 800a7ee:	0149      	lsls	r1, r1, #5
 800a7f0:	404a      	eors	r2, r1
 800a7f2:	801a      	strh	r2, [r3, #0]
 800a7f4:	183b      	adds	r3, r7, r0
 800a7f6:	183a      	adds	r2, r7, r0
 800a7f8:	8812      	ldrh	r2, [r2, #0]
 800a7fa:	2180      	movs	r1, #128	@ 0x80
 800a7fc:	0189      	lsls	r1, r1, #6
 800a7fe:	404a      	eors	r2, r1
 800a800:	801a      	strh	r2, [r3, #0]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	18d3      	adds	r3, r2, r3
 800a80c:	183a      	adds	r2, r7, r0
 800a80e:	8812      	ldrh	r2, [r2, #0]
 800a810:	4907      	ldr	r1, [pc, #28]	@ (800a830 <USB_EPClearStall+0x158>)
 800a812:	430a      	orrs	r2, r1
 800a814:	b292      	uxth	r2, r2
 800a816:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	0018      	movs	r0, r3
 800a81c:	46bd      	mov	sp, r7
 800a81e:	b006      	add	sp, #24
 800a820:	bd80      	pop	{r7, pc}
 800a822:	46c0      	nop			@ (mov r8, r8)
 800a824:	ffff8f8f 	.word	0xffff8f8f
 800a828:	ffff80c0 	.word	0xffff80c0
 800a82c:	ffff8fbf 	.word	0xffff8fbf
 800a830:	ffff8080 	.word	0xffff8080
 800a834:	ffffc080 	.word	0xffffc080
 800a838:	ffffbf8f 	.word	0xffffbf8f

0800a83c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	000a      	movs	r2, r1
 800a846:	1cfb      	adds	r3, r7, #3
 800a848:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a84a:	1cfb      	adds	r3, r7, #3
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d103      	bne.n	800a85a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	224c      	movs	r2, #76	@ 0x4c
 800a856:	2180      	movs	r1, #128	@ 0x80
 800a858:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	0018      	movs	r0, r3
 800a85e:	46bd      	mov	sp, r7
 800a860:	b002      	add	sp, #8
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2258      	movs	r2, #88	@ 0x58
 800a870:	5a9b      	ldrh	r3, [r3, r2]
 800a872:	b29b      	uxth	r3, r3
 800a874:	4a05      	ldr	r2, [pc, #20]	@ (800a88c <USB_DevConnect+0x28>)
 800a876:	4313      	orrs	r3, r2
 800a878:	b299      	uxth	r1, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2258      	movs	r2, #88	@ 0x58
 800a87e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	0018      	movs	r0, r3
 800a884:	46bd      	mov	sp, r7
 800a886:	b002      	add	sp, #8
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	46c0      	nop			@ (mov r8, r8)
 800a88c:	ffff8000 	.word	0xffff8000

0800a890 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2244      	movs	r2, #68	@ 0x44
 800a89c:	5a9b      	ldrh	r3, [r3, r2]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
}
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	b004      	add	sp, #16
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08a      	sub	sp, #40	@ 0x28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	0019      	movs	r1, r3
 800a8b8:	1dbb      	adds	r3, r7, #6
 800a8ba:	801a      	strh	r2, [r3, #0]
 800a8bc:	1d3b      	adds	r3, r7, #4
 800a8be:	1c0a      	adds	r2, r1, #0
 800a8c0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a8c2:	1d3b      	adds	r3, r7, #4
 800a8c4:	881b      	ldrh	r3, [r3, #0]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	085b      	lsrs	r3, r3, #1
 800a8ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8d4:	1dbb      	adds	r3, r7, #6
 800a8d6:	881a      	ldrh	r2, [r3, #0]
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	18d3      	adds	r3, r2, r3
 800a8dc:	2280      	movs	r2, #128	@ 0x80
 800a8de:	00d2      	lsls	r2, r2, #3
 800a8e0:	4694      	mov	ip, r2
 800a8e2:	4463      	add	r3, ip
 800a8e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8ea:	e021      	b.n	800a930 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	781a      	ldrb	r2, [r3, #0]
 800a8f0:	2112      	movs	r1, #18
 800a8f2:	187b      	adds	r3, r7, r1
 800a8f4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	b21b      	sxth	r3, r3
 800a8fe:	021b      	lsls	r3, r3, #8
 800a900:	b21a      	sxth	r2, r3
 800a902:	187b      	adds	r3, r7, r1
 800a904:	2000      	movs	r0, #0
 800a906:	5e1b      	ldrsh	r3, [r3, r0]
 800a908:	4313      	orrs	r3, r2
 800a90a:	b21a      	sxth	r2, r3
 800a90c:	187b      	adds	r3, r7, r1
 800a90e:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	187a      	adds	r2, r7, r1
 800a914:	8812      	ldrh	r2, [r2, #0]
 800a916:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	3302      	adds	r3, #2
 800a91c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	3301      	adds	r3, #1
 800a922:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	3301      	adds	r3, #1
 800a928:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	3b01      	subs	r3, #1
 800a92e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1da      	bne.n	800a8ec <USB_WritePMA+0x40>
  }
}
 800a936:	46c0      	nop			@ (mov r8, r8)
 800a938:	46c0      	nop			@ (mov r8, r8)
 800a93a:	46bd      	mov	sp, r7
 800a93c:	b00a      	add	sp, #40	@ 0x28
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08a      	sub	sp, #40	@ 0x28
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	0019      	movs	r1, r3
 800a94c:	1dbb      	adds	r3, r7, #6
 800a94e:	801a      	strh	r2, [r3, #0]
 800a950:	1d3b      	adds	r3, r7, #4
 800a952:	1c0a      	adds	r2, r1, #0
 800a954:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a956:	1d3b      	adds	r3, r7, #4
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	085b      	lsrs	r3, r3, #1
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a968:	1dbb      	adds	r3, r7, #6
 800a96a:	881a      	ldrh	r2, [r3, #0]
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	18d3      	adds	r3, r2, r3
 800a970:	2280      	movs	r2, #128	@ 0x80
 800a972:	00d2      	lsls	r2, r2, #3
 800a974:	4694      	mov	ip, r2
 800a976:	4463      	add	r3, ip
 800a978:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a97e:	e018      	b.n	800a9b2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	b29b      	uxth	r3, r3
 800a986:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	3302      	adds	r3, #2
 800a98c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	b2da      	uxtb	r2, r3
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	3301      	adds	r3, #1
 800a99a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	0a1b      	lsrs	r3, r3, #8
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e3      	bne.n	800a980 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a9b8:	1d3b      	adds	r3, r7, #4
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	4013      	ands	r3, r2
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	701a      	strb	r2, [r3, #0]
  }
}
 800a9d6:	46c0      	nop			@ (mov r8, r8)
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	b00a      	add	sp, #40	@ 0x28
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	000a      	movs	r2, r1
 800a9e8:	1cfb      	adds	r3, r7, #3
 800a9ea:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a9ec:	230f      	movs	r3, #15
 800a9ee:	18fb      	adds	r3, r7, r3
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	7c1b      	ldrb	r3, [r3, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d116      	bne.n	800aa2a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a9fc:	2380      	movs	r3, #128	@ 0x80
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	2181      	movs	r1, #129	@ 0x81
 800aa06:	f002 f88c 	bl	800cb22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa10:	2380      	movs	r3, #128	@ 0x80
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	2202      	movs	r2, #2
 800aa18:	2101      	movs	r1, #1
 800aa1a:	f002 f882 	bl	800cb22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	23b6      	movs	r3, #182	@ 0xb6
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	2101      	movs	r1, #1
 800aa26:	50d1      	str	r1, [r2, r3]
 800aa28:	e013      	b.n	800aa52 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	2340      	movs	r3, #64	@ 0x40
 800aa2e:	2202      	movs	r2, #2
 800aa30:	2181      	movs	r1, #129	@ 0x81
 800aa32:	f002 f876 	bl	800cb22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	2340      	movs	r3, #64	@ 0x40
 800aa40:	2202      	movs	r2, #2
 800aa42:	2101      	movs	r1, #1
 800aa44:	f002 f86d 	bl	800cb22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	23b6      	movs	r3, #182	@ 0xb6
 800aa4c:	005b      	lsls	r3, r3, #1
 800aa4e:	2101      	movs	r1, #1
 800aa50:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	2308      	movs	r3, #8
 800aa56:	2203      	movs	r2, #3
 800aa58:	2182      	movs	r1, #130	@ 0x82
 800aa5a:	f002 f862 	bl	800cb22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa64:	2387      	movs	r3, #135	@ 0x87
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	0018      	movs	r0, r3
 800aa6a:	f002 f9f1 	bl	800ce50 <USBD_static_malloc>
 800aa6e:	0001      	movs	r1, r0
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	23ae      	movs	r3, #174	@ 0xae
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	23ae      	movs	r3, #174	@ 0xae
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	58d3      	ldr	r3, [r2, r3]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d104      	bne.n	800aa8e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800aa84:	230f      	movs	r3, #15
 800aa86:	18fb      	adds	r3, r7, r3
 800aa88:	2201      	movs	r2, #1
 800aa8a:	701a      	strb	r2, [r3, #0]
 800aa8c:	e02c      	b.n	800aae8 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	23ae      	movs	r3, #174	@ 0xae
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	58d3      	ldr	r3, [r2, r3]
 800aa96:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	23af      	movs	r3, #175	@ 0xaf
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	58d3      	ldr	r3, [r2, r3]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	2385      	movs	r3, #133	@ 0x85
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	2100      	movs	r1, #0
 800aaac:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	2386      	movs	r3, #134	@ 0x86
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	2100      	movs	r1, #0
 800aab6:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	7c1b      	ldrb	r3, [r3, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10a      	bne.n	800aad6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	2381      	movs	r3, #129	@ 0x81
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	58d2      	ldr	r2, [r2, r3]
 800aac8:	2380      	movs	r3, #128	@ 0x80
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	2101      	movs	r1, #1
 800aad0:	f002 f971 	bl	800cdb6 <USBD_LL_PrepareReceive>
 800aad4:	e008      	b.n	800aae8 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	2381      	movs	r3, #129	@ 0x81
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	58d2      	ldr	r2, [r2, r3]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	2340      	movs	r3, #64	@ 0x40
 800aae2:	2101      	movs	r1, #1
 800aae4:	f002 f967 	bl	800cdb6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800aae8:	230f      	movs	r3, #15
 800aaea:	18fb      	adds	r3, r7, r3
 800aaec:	781b      	ldrb	r3, [r3, #0]
}
 800aaee:	0018      	movs	r0, r3
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b004      	add	sp, #16
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b084      	sub	sp, #16
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	000a      	movs	r2, r1
 800ab00:	1cfb      	adds	r3, r7, #3
 800ab02:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ab04:	230f      	movs	r3, #15
 800ab06:	18fb      	adds	r3, r7, r3
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2181      	movs	r1, #129	@ 0x81
 800ab10:	0018      	movs	r0, r3
 800ab12:	f002 f83d 	bl	800cb90 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2101      	movs	r1, #1
 800ab20:	0018      	movs	r0, r3
 800ab22:	f002 f835 	bl	800cb90 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	23b6      	movs	r3, #182	@ 0xb6
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2182      	movs	r1, #130	@ 0x82
 800ab34:	0018      	movs	r0, r3
 800ab36:	f002 f82b 	bl	800cb90 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	23ae      	movs	r3, #174	@ 0xae
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	58d3      	ldr	r3, [r2, r3]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d011      	beq.n	800ab70 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	23af      	movs	r3, #175	@ 0xaf
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	58d3      	ldr	r3, [r2, r3]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	23ae      	movs	r3, #174	@ 0xae
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	58d3      	ldr	r3, [r2, r3]
 800ab60:	0018      	movs	r0, r3
 800ab62:	f002 f981 	bl	800ce68 <USBD_static_free>
    pdev->pClassData = NULL;
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	23ae      	movs	r3, #174	@ 0xae
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800ab70:	230f      	movs	r3, #15
 800ab72:	18fb      	adds	r3, r7, r3
 800ab74:	781b      	ldrb	r3, [r3, #0]
}
 800ab76:	0018      	movs	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	b004      	add	sp, #16
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	23ae      	movs	r3, #174	@ 0xae
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	58d3      	ldr	r3, [r2, r3]
 800ab92:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ab94:	230f      	movs	r3, #15
 800ab96:	18fb      	adds	r3, r7, r3
 800ab98:	2200      	movs	r2, #0
 800ab9a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800ab9c:	230c      	movs	r3, #12
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	2200      	movs	r2, #0
 800aba2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800aba4:	2317      	movs	r3, #23
 800aba6:	18fb      	adds	r3, r7, r3
 800aba8:	2200      	movs	r2, #0
 800abaa:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	001a      	movs	r2, r3
 800abb2:	2360      	movs	r3, #96	@ 0x60
 800abb4:	4013      	ands	r3, r2
 800abb6:	d03d      	beq.n	800ac34 <USBD_CDC_Setup+0xb4>
 800abb8:	2b20      	cmp	r3, #32
 800abba:	d000      	beq.n	800abbe <USBD_CDC_Setup+0x3e>
 800abbc:	e094      	b.n	800ace8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	88db      	ldrh	r3, [r3, #6]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d02b      	beq.n	800ac1e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	b25b      	sxtb	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	da12      	bge.n	800abf6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	23af      	movs	r3, #175	@ 0xaf
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	58d3      	ldr	r3, [r2, r3]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800abde:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	88d2      	ldrh	r2, [r2, #6]
 800abe4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800abe6:	6939      	ldr	r1, [r7, #16]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	88da      	ldrh	r2, [r3, #6]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	0018      	movs	r0, r3
 800abf0:	f001 fbaf 	bl	800c352 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800abf4:	e083      	b.n	800acfe <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	7859      	ldrb	r1, [r3, #1]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	2380      	movs	r3, #128	@ 0x80
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	88db      	ldrh	r3, [r3, #6]
 800ac06:	b2d9      	uxtb	r1, r3
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	4a40      	ldr	r2, [pc, #256]	@ (800ad0c <USBD_CDC_Setup+0x18c>)
 800ac0c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac0e:	6939      	ldr	r1, [r7, #16]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	88da      	ldrh	r2, [r3, #6]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	0018      	movs	r0, r3
 800ac18:	f001 fbce 	bl	800c3b8 <USBD_CtlPrepareRx>
      break;
 800ac1c:	e06f      	b.n	800acfe <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	23af      	movs	r3, #175	@ 0xaf
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	58d3      	ldr	r3, [r2, r3]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	7850      	ldrb	r0, [r2, #1]
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	4798      	blx	r3
      break;
 800ac32:	e064      	b.n	800acfe <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	2b0b      	cmp	r3, #11
 800ac3a:	d037      	beq.n	800acac <USBD_CDC_Setup+0x12c>
 800ac3c:	dc47      	bgt.n	800acce <USBD_CDC_Setup+0x14e>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <USBD_CDC_Setup+0xc8>
 800ac42:	2b0a      	cmp	r3, #10
 800ac44:	d019      	beq.n	800ac7a <USBD_CDC_Setup+0xfa>
 800ac46:	e042      	b.n	800acce <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	23a7      	movs	r3, #167	@ 0xa7
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	5cd3      	ldrb	r3, [r2, r3]
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d107      	bne.n	800ac64 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ac54:	230c      	movs	r3, #12
 800ac56:	18f9      	adds	r1, r7, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	f001 fb78 	bl	800c352 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac62:	e040      	b.n	800ace6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	0011      	movs	r1, r2
 800ac6a:	0018      	movs	r0, r3
 800ac6c:	f001 faf3 	bl	800c256 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac70:	2317      	movs	r3, #23
 800ac72:	18fb      	adds	r3, r7, r3
 800ac74:	2202      	movs	r2, #2
 800ac76:	701a      	strb	r2, [r3, #0]
          break;
 800ac78:	e035      	b.n	800ace6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	23a7      	movs	r3, #167	@ 0xa7
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	5cd3      	ldrb	r3, [r2, r3]
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d107      	bne.n	800ac96 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac86:	230f      	movs	r3, #15
 800ac88:	18f9      	adds	r1, r7, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	0018      	movs	r0, r3
 800ac90:	f001 fb5f 	bl	800c352 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac94:	e027      	b.n	800ace6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	0011      	movs	r1, r2
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	f001 fada 	bl	800c256 <USBD_CtlError>
            ret = USBD_FAIL;
 800aca2:	2317      	movs	r3, #23
 800aca4:	18fb      	adds	r3, r7, r3
 800aca6:	2202      	movs	r2, #2
 800aca8:	701a      	strb	r2, [r3, #0]
          break;
 800acaa:	e01c      	b.n	800ace6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	23a7      	movs	r3, #167	@ 0xa7
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	5cd3      	ldrb	r3, [r2, r3]
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d015      	beq.n	800ace4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	0011      	movs	r1, r2
 800acbe:	0018      	movs	r0, r3
 800acc0:	f001 fac9 	bl	800c256 <USBD_CtlError>
            ret = USBD_FAIL;
 800acc4:	2317      	movs	r3, #23
 800acc6:	18fb      	adds	r3, r7, r3
 800acc8:	2202      	movs	r2, #2
 800acca:	701a      	strb	r2, [r3, #0]
          }
          break;
 800accc:	e00a      	b.n	800ace4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	0011      	movs	r1, r2
 800acd4:	0018      	movs	r0, r3
 800acd6:	f001 fabe 	bl	800c256 <USBD_CtlError>
          ret = USBD_FAIL;
 800acda:	2317      	movs	r3, #23
 800acdc:	18fb      	adds	r3, r7, r3
 800acde:	2202      	movs	r2, #2
 800ace0:	701a      	strb	r2, [r3, #0]
          break;
 800ace2:	e000      	b.n	800ace6 <USBD_CDC_Setup+0x166>
          break;
 800ace4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800ace6:	e00a      	b.n	800acfe <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	0011      	movs	r1, r2
 800acee:	0018      	movs	r0, r3
 800acf0:	f001 fab1 	bl	800c256 <USBD_CtlError>
      ret = USBD_FAIL;
 800acf4:	2317      	movs	r3, #23
 800acf6:	18fb      	adds	r3, r7, r3
 800acf8:	2202      	movs	r2, #2
 800acfa:	701a      	strb	r2, [r3, #0]
      break;
 800acfc:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800acfe:	2317      	movs	r3, #23
 800ad00:	18fb      	adds	r3, r7, r3
 800ad02:	781b      	ldrb	r3, [r3, #0]
}
 800ad04:	0018      	movs	r0, r3
 800ad06:	46bd      	mov	sp, r7
 800ad08:	b006      	add	sp, #24
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	00000201 	.word	0x00000201

0800ad10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	000a      	movs	r2, r1
 800ad1a:	1cfb      	adds	r3, r7, #3
 800ad1c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	23ae      	movs	r3, #174	@ 0xae
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	58d3      	ldr	r3, [r2, r3]
 800ad26:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	23b0      	movs	r3, #176	@ 0xb0
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	58d3      	ldr	r3, [r2, r3]
 800ad30:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	23ae      	movs	r3, #174	@ 0xae
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	58d3      	ldr	r3, [r2, r3]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d03e      	beq.n	800adbc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ad3e:	1cfb      	adds	r3, r7, #3
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	0013      	movs	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	189b      	adds	r3, r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	18cb      	adds	r3, r1, r3
 800ad4e:	331c      	adds	r3, #28
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d02b      	beq.n	800adae <USBD_CDC_DataIn+0x9e>
 800ad56:	1cfb      	adds	r3, r7, #3
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	0013      	movs	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	189b      	adds	r3, r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	18cb      	adds	r3, r1, r3
 800ad66:	331c      	adds	r3, #28
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	1cfb      	adds	r3, r7, #3
 800ad6c:	781a      	ldrb	r2, [r3, #0]
 800ad6e:	68b9      	ldr	r1, [r7, #8]
 800ad70:	0013      	movs	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	189b      	adds	r3, r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	18cb      	adds	r3, r1, r3
 800ad7a:	3320      	adds	r3, #32
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	0019      	movs	r1, r3
 800ad80:	f7f5 fa64 	bl	800024c <__aeabi_uidivmod>
 800ad84:	1e0b      	subs	r3, r1, #0
 800ad86:	d112      	bne.n	800adae <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ad88:	1cfb      	adds	r3, r7, #3
 800ad8a:	781a      	ldrb	r2, [r3, #0]
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	0013      	movs	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	189b      	adds	r3, r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	18cb      	adds	r3, r1, r3
 800ad98:	331c      	adds	r3, #28
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad9e:	1cfb      	adds	r3, r7, #3
 800ada0:	7819      	ldrb	r1, [r3, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	2300      	movs	r3, #0
 800ada6:	2200      	movs	r2, #0
 800ada8:	f001 ffce 	bl	800cd48 <USBD_LL_Transmit>
 800adac:	e004      	b.n	800adb8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	2385      	movs	r3, #133	@ 0x85
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	2100      	movs	r1, #0
 800adb6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	e000      	b.n	800adbe <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800adbc:	2302      	movs	r3, #2
  }
}
 800adbe:	0018      	movs	r0, r3
 800adc0:	46bd      	mov	sp, r7
 800adc2:	b004      	add	sp, #16
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	000a      	movs	r2, r1
 800add0:	1cfb      	adds	r3, r7, #3
 800add2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	23ae      	movs	r3, #174	@ 0xae
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	58d3      	ldr	r3, [r2, r3]
 800addc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adde:	1cfb      	adds	r3, r7, #3
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	0011      	movs	r1, r2
 800ade6:	0018      	movs	r0, r3
 800ade8:	f002 f81c 	bl	800ce24 <USBD_LL_GetRxDataSize>
 800adec:	0001      	movs	r1, r0
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	2383      	movs	r3, #131	@ 0x83
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	23ae      	movs	r3, #174	@ 0xae
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	58d3      	ldr	r3, [r2, r3]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d011      	beq.n	800ae26 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	23af      	movs	r3, #175	@ 0xaf
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	58d3      	ldr	r3, [r2, r3]
 800ae0a:	68da      	ldr	r2, [r3, #12]
 800ae0c:	68f9      	ldr	r1, [r7, #12]
 800ae0e:	2381      	movs	r3, #129	@ 0x81
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	58c8      	ldr	r0, [r1, r3]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2183      	movs	r1, #131	@ 0x83
 800ae18:	0089      	lsls	r1, r1, #2
 800ae1a:	468c      	mov	ip, r1
 800ae1c:	4463      	add	r3, ip
 800ae1e:	0019      	movs	r1, r3
 800ae20:	4790      	blx	r2

    return USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	e000      	b.n	800ae28 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800ae26:	2302      	movs	r3, #2
  }
}
 800ae28:	0018      	movs	r0, r3
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	b004      	add	sp, #16
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae30:	b590      	push	{r4, r7, lr}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	23ae      	movs	r3, #174	@ 0xae
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	58d3      	ldr	r3, [r2, r3]
 800ae40:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	23af      	movs	r3, #175	@ 0xaf
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	58d3      	ldr	r3, [r2, r3]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d018      	beq.n	800ae80 <USBD_CDC_EP0_RxReady+0x50>
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	2380      	movs	r3, #128	@ 0x80
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	5cd3      	ldrb	r3, [r2, r3]
 800ae56:	2bff      	cmp	r3, #255	@ 0xff
 800ae58:	d012      	beq.n	800ae80 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	23af      	movs	r3, #175	@ 0xaf
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	58d3      	ldr	r3, [r2, r3]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	68f9      	ldr	r1, [r7, #12]
 800ae66:	2280      	movs	r2, #128	@ 0x80
 800ae68:	0092      	lsls	r2, r2, #2
 800ae6a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800ae6c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4c06      	ldr	r4, [pc, #24]	@ (800ae8c <USBD_CDC_EP0_RxReady+0x5c>)
 800ae72:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	2380      	movs	r3, #128	@ 0x80
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	21ff      	movs	r1, #255	@ 0xff
 800ae7e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	0018      	movs	r0, r3
 800ae84:	46bd      	mov	sp, r7
 800ae86:	b005      	add	sp, #20
 800ae88:	bd90      	pop	{r4, r7, pc}
 800ae8a:	46c0      	nop			@ (mov r8, r8)
 800ae8c:	00000201 	.word	0x00000201

0800ae90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2243      	movs	r2, #67	@ 0x43
 800ae9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ae9e:	4b02      	ldr	r3, [pc, #8]	@ (800aea8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800aea0:	0018      	movs	r0, r3
 800aea2:	46bd      	mov	sp, r7
 800aea4:	b002      	add	sp, #8
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	200000ac 	.word	0x200000ac

0800aeac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2243      	movs	r2, #67	@ 0x43
 800aeb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800aeba:	4b02      	ldr	r3, [pc, #8]	@ (800aec4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800aebc:	0018      	movs	r0, r3
 800aebe:	46bd      	mov	sp, r7
 800aec0:	b002      	add	sp, #8
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	20000068 	.word	0x20000068

0800aec8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2243      	movs	r2, #67	@ 0x43
 800aed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800aed6:	4b02      	ldr	r3, [pc, #8]	@ (800aee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800aed8:	0018      	movs	r0, r3
 800aeda:	46bd      	mov	sp, r7
 800aedc:	b002      	add	sp, #8
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	200000f0 	.word	0x200000f0

0800aee4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	220a      	movs	r2, #10
 800aef0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800aef2:	4b02      	ldr	r3, [pc, #8]	@ (800aefc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800aef4:	0018      	movs	r0, r3
 800aef6:	46bd      	mov	sp, r7
 800aef8:	b002      	add	sp, #8
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20000024 	.word	0x20000024

0800af00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800af0a:	200f      	movs	r0, #15
 800af0c:	183b      	adds	r3, r7, r0
 800af0e:	2202      	movs	r2, #2
 800af10:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d007      	beq.n	800af28 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	23af      	movs	r3, #175	@ 0xaf
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800af22:	183b      	adds	r3, r7, r0
 800af24:	2200      	movs	r2, #0
 800af26:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800af28:	230f      	movs	r3, #15
 800af2a:	18fb      	adds	r3, r7, r3
 800af2c:	781b      	ldrb	r3, [r3, #0]
}
 800af2e:	0018      	movs	r0, r3
 800af30:	46bd      	mov	sp, r7
 800af32:	b004      	add	sp, #16
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b086      	sub	sp, #24
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	1dbb      	adds	r3, r7, #6
 800af42:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	23ae      	movs	r3, #174	@ 0xae
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	58d3      	ldr	r3, [r2, r3]
 800af4c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	2382      	movs	r3, #130	@ 0x82
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	68b9      	ldr	r1, [r7, #8]
 800af56:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800af58:	1dbb      	adds	r3, r7, #6
 800af5a:	8819      	ldrh	r1, [r3, #0]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	2384      	movs	r3, #132	@ 0x84
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	0018      	movs	r0, r3
 800af68:	46bd      	mov	sp, r7
 800af6a:	b006      	add	sp, #24
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	23ae      	movs	r3, #174	@ 0xae
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	58d3      	ldr	r3, [r2, r3]
 800af80:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	2381      	movs	r3, #129	@ 0x81
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	0018      	movs	r0, r3
 800af90:	46bd      	mov	sp, r7
 800af92:	b004      	add	sp, #16
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	23ae      	movs	r3, #174	@ 0xae
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	58d3      	ldr	r3, [r2, r3]
 800afa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	23ae      	movs	r3, #174	@ 0xae
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	58d3      	ldr	r3, [r2, r3]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d022      	beq.n	800affa <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	2385      	movs	r3, #133	@ 0x85
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	58d3      	ldr	r3, [r2, r3]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d11a      	bne.n	800aff6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	2385      	movs	r3, #133	@ 0x85
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	2101      	movs	r1, #1
 800afc8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	2384      	movs	r3, #132	@ 0x84
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	58d2      	ldr	r2, [r2, r3]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	2382      	movs	r3, #130	@ 0x82
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	2384      	movs	r3, #132	@ 0x84
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	000a      	movs	r2, r1
 800afec:	2181      	movs	r1, #129	@ 0x81
 800afee:	f001 feab 	bl	800cd48 <USBD_LL_Transmit>

      return USBD_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	e002      	b.n	800affc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800affa:	2302      	movs	r3, #2
  }
}
 800affc:	0018      	movs	r0, r3
 800affe:	46bd      	mov	sp, r7
 800b000:	b004      	add	sp, #16
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	23ae      	movs	r3, #174	@ 0xae
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	58d3      	ldr	r3, [r2, r3]
 800b014:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	23ae      	movs	r3, #174	@ 0xae
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	58d3      	ldr	r3, [r2, r3]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d019      	beq.n	800b056 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7c1b      	ldrb	r3, [r3, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	2381      	movs	r3, #129	@ 0x81
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	58d2      	ldr	r2, [r2, r3]
 800b032:	2380      	movs	r3, #128	@ 0x80
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	2101      	movs	r1, #1
 800b03a:	f001 febc 	bl	800cdb6 <USBD_LL_PrepareReceive>
 800b03e:	e008      	b.n	800b052 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	2381      	movs	r3, #129	@ 0x81
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	58d2      	ldr	r2, [r2, r3]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	2340      	movs	r3, #64	@ 0x40
 800b04c:	2101      	movs	r1, #1
 800b04e:	f001 feb2 	bl	800cdb6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	e000      	b.n	800b058 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b056:	2302      	movs	r3, #2
  }
}
 800b058:	0018      	movs	r0, r3
 800b05a:	46bd      	mov	sp, r7
 800b05c:	b004      	add	sp, #16
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	1dfb      	adds	r3, r7, #7
 800b06c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b074:	2302      	movs	r3, #2
 800b076:	e020      	b.n	800b0ba <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	23ad      	movs	r3, #173	@ 0xad
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	58d3      	ldr	r3, [r2, r3]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d004      	beq.n	800b08e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	23ad      	movs	r3, #173	@ 0xad
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	2100      	movs	r1, #0
 800b08c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	23ac      	movs	r3, #172	@ 0xac
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	68b9      	ldr	r1, [r7, #8]
 800b09c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	23a7      	movs	r3, #167	@ 0xa7
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	1dfa      	adds	r2, r7, #7
 800b0ac:	7812      	ldrb	r2, [r2, #0]
 800b0ae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	0018      	movs	r0, r3
 800b0b4:	f001 fcac 	bl	800ca10 <USBD_LL_Init>

  return USBD_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	0018      	movs	r0, r3
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	b004      	add	sp, #16
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b0cc:	200f      	movs	r0, #15
 800b0ce:	183b      	adds	r3, r7, r0
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d008      	beq.n	800b0ec <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	23ad      	movs	r3, #173	@ 0xad
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b0e4:	183b      	adds	r3, r7, r0
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	e003      	b.n	800b0f4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b0ec:	230f      	movs	r3, #15
 800b0ee:	18fb      	adds	r3, r7, r3
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b0f4:	230f      	movs	r3, #15
 800b0f6:	18fb      	adds	r3, r7, r3
 800b0f8:	781b      	ldrb	r3, [r3, #0]
}
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	b004      	add	sp, #16
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b082      	sub	sp, #8
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	0018      	movs	r0, r3
 800b10e:	f001 fce3 	bl	800cad8 <USBD_LL_Start>

  return USBD_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	0018      	movs	r0, r3
 800b116:	46bd      	mov	sp, r7
 800b118:	b002      	add	sp, #8
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	0018      	movs	r0, r3
 800b128:	46bd      	mov	sp, r7
 800b12a:	b002      	add	sp, #8
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b12e:	b590      	push	{r4, r7, lr}
 800b130:	b085      	sub	sp, #20
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	000a      	movs	r2, r1
 800b138:	1cfb      	adds	r3, r7, #3
 800b13a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b13c:	240f      	movs	r4, #15
 800b13e:	193b      	adds	r3, r7, r4
 800b140:	2202      	movs	r2, #2
 800b142:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	23ad      	movs	r3, #173	@ 0xad
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	58d3      	ldr	r3, [r2, r3]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00e      	beq.n	800b16e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	23ad      	movs	r3, #173	@ 0xad
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	58d3      	ldr	r3, [r2, r3]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	1cfa      	adds	r2, r7, #3
 800b15c:	7811      	ldrb	r1, [r2, #0]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	0010      	movs	r0, r2
 800b162:	4798      	blx	r3
 800b164:	1e03      	subs	r3, r0, #0
 800b166:	d102      	bne.n	800b16e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b168:	193b      	adds	r3, r7, r4
 800b16a:	2200      	movs	r2, #0
 800b16c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b16e:	230f      	movs	r3, #15
 800b170:	18fb      	adds	r3, r7, r3
 800b172:	781b      	ldrb	r3, [r3, #0]
}
 800b174:	0018      	movs	r0, r3
 800b176:	46bd      	mov	sp, r7
 800b178:	b005      	add	sp, #20
 800b17a:	bd90      	pop	{r4, r7, pc}

0800b17c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	000a      	movs	r2, r1
 800b186:	1cfb      	adds	r3, r7, #3
 800b188:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	23ad      	movs	r3, #173	@ 0xad
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	58d3      	ldr	r3, [r2, r3]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	1cfa      	adds	r2, r7, #3
 800b196:	7811      	ldrb	r1, [r2, #0]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	0010      	movs	r0, r2
 800b19c:	4798      	blx	r3

  return USBD_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	0018      	movs	r0, r3
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	b002      	add	sp, #8
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	22aa      	movs	r2, #170	@ 0xaa
 800b1b6:	0092      	lsls	r2, r2, #2
 800b1b8:	4694      	mov	ip, r2
 800b1ba:	4463      	add	r3, ip
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	0011      	movs	r1, r2
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f001 f810 	bl	800c1e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	23a5      	movs	r3, #165	@ 0xa5
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a23      	ldr	r2, [pc, #140]	@ (800b260 <USBD_LL_SetupStage+0xb8>)
 800b1d4:	5a9b      	ldrh	r3, [r3, r2]
 800b1d6:	0019      	movs	r1, r3
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	23a6      	movs	r3, #166	@ 0xa6
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	23aa      	movs	r3, #170	@ 0xaa
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	5cd3      	ldrb	r3, [r2, r3]
 800b1e8:	001a      	movs	r2, r3
 800b1ea:	231f      	movs	r3, #31
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d019      	beq.n	800b226 <USBD_LL_SetupStage+0x7e>
 800b1f2:	d822      	bhi.n	800b23a <USBD_LL_SetupStage+0x92>
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <USBD_LL_SetupStage+0x56>
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d00a      	beq.n	800b212 <USBD_LL_SetupStage+0x6a>
 800b1fc:	e01d      	b.n	800b23a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	22aa      	movs	r2, #170	@ 0xaa
 800b202:	0092      	lsls	r2, r2, #2
 800b204:	189a      	adds	r2, r3, r2
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	0011      	movs	r1, r2
 800b20a:	0018      	movs	r0, r3
 800b20c:	f000 fa10 	bl	800b630 <USBD_StdDevReq>
      break;
 800b210:	e020      	b.n	800b254 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	22aa      	movs	r2, #170	@ 0xaa
 800b216:	0092      	lsls	r2, r2, #2
 800b218:	189a      	adds	r2, r3, r2
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	0011      	movs	r1, r2
 800b21e:	0018      	movs	r0, r3
 800b220:	f000 fa78 	bl	800b714 <USBD_StdItfReq>
      break;
 800b224:	e016      	b.n	800b254 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	22aa      	movs	r2, #170	@ 0xaa
 800b22a:	0092      	lsls	r2, r2, #2
 800b22c:	189a      	adds	r2, r3, r2
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	0011      	movs	r1, r2
 800b232:	0018      	movs	r0, r3
 800b234:	f000 fac5 	bl	800b7c2 <USBD_StdEPReq>
      break;
 800b238:	e00c      	b.n	800b254 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	23aa      	movs	r3, #170	@ 0xaa
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	5cd3      	ldrb	r3, [r2, r3]
 800b242:	227f      	movs	r2, #127	@ 0x7f
 800b244:	4393      	bics	r3, r2
 800b246:	b2da      	uxtb	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	0011      	movs	r1, r2
 800b24c:	0018      	movs	r0, r3
 800b24e:	f001 fcca 	bl	800cbe6 <USBD_LL_StallEP>
      break;
 800b252:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	0018      	movs	r0, r3
 800b258:	46bd      	mov	sp, r7
 800b25a:	b002      	add	sp, #8
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	46c0      	nop			@ (mov r8, r8)
 800b260:	000002ae 	.word	0x000002ae

0800b264 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	200b      	movs	r0, #11
 800b270:	183b      	adds	r3, r7, r0
 800b272:	1c0a      	adds	r2, r1, #0
 800b274:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b276:	183b      	adds	r3, r7, r0
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d154      	bne.n	800b328 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	3355      	adds	r3, #85	@ 0x55
 800b282:	33ff      	adds	r3, #255	@ 0xff
 800b284:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	23a5      	movs	r3, #165	@ 0xa5
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	58d3      	ldr	r3, [r2, r3]
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d139      	bne.n	800b306 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d919      	bls.n	800b2d2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	68da      	ldr	r2, [r3, #12]
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	1ad2      	subs	r2, r2, r3
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	68da      	ldr	r2, [r3, #12]
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d203      	bcs.n	800b2c0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	e002      	b.n	800b2c6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	001a      	movs	r2, r3
 800b2cc:	f001 f898 	bl	800c400 <USBD_CtlContinueRx>
 800b2d0:	e045      	b.n	800b35e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	23ad      	movs	r3, #173	@ 0xad
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	58d3      	ldr	r3, [r2, r3]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00d      	beq.n	800b2fc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	23a7      	movs	r3, #167	@ 0xa7
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d107      	bne.n	800b2fc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	23ad      	movs	r3, #173	@ 0xad
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	58d3      	ldr	r3, [r2, r3]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	0010      	movs	r0, r2
 800b2fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	0018      	movs	r0, r3
 800b300:	f001 f891 	bl	800c426 <USBD_CtlSendStatus>
 800b304:	e02b      	b.n	800b35e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	23a5      	movs	r3, #165	@ 0xa5
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	58d3      	ldr	r3, [r2, r3]
 800b30e:	2b05      	cmp	r3, #5
 800b310:	d125      	bne.n	800b35e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	23a5      	movs	r3, #165	@ 0xa5
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	2100      	movs	r1, #0
 800b31a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2100      	movs	r1, #0
 800b320:	0018      	movs	r0, r3
 800b322:	f001 fc60 	bl	800cbe6 <USBD_LL_StallEP>
 800b326:	e01a      	b.n	800b35e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	23ad      	movs	r3, #173	@ 0xad
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	58d3      	ldr	r3, [r2, r3]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d011      	beq.n	800b35a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	23a7      	movs	r3, #167	@ 0xa7
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d10b      	bne.n	800b35a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	23ad      	movs	r3, #173	@ 0xad
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	58d3      	ldr	r3, [r2, r3]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	220b      	movs	r2, #11
 800b34e:	18ba      	adds	r2, r7, r2
 800b350:	7811      	ldrb	r1, [r2, #0]
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	0010      	movs	r0, r2
 800b356:	4798      	blx	r3
 800b358:	e001      	b.n	800b35e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b35a:	2302      	movs	r3, #2
 800b35c:	e000      	b.n	800b360 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	0018      	movs	r0, r3
 800b362:	46bd      	mov	sp, r7
 800b364:	b006      	add	sp, #24
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	200b      	movs	r0, #11
 800b374:	183b      	adds	r3, r7, r0
 800b376:	1c0a      	adds	r2, r1, #0
 800b378:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b37a:	183b      	adds	r3, r7, r0
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d000      	beq.n	800b384 <USBD_LL_DataInStage+0x1c>
 800b382:	e08e      	b.n	800b4a2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3314      	adds	r3, #20
 800b388:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	23a5      	movs	r3, #165	@ 0xa5
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	58d3      	ldr	r3, [r2, r3]
 800b392:	2b02      	cmp	r3, #2
 800b394:	d164      	bne.n	800b460 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	68da      	ldr	r2, [r3, #12]
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d915      	bls.n	800b3ce <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	68da      	ldr	r2, [r3, #12]
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	1ad2      	subs	r2, r2, r3
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	0018      	movs	r0, r3
 800b3bc:	f000 ffe9 	bl	800c392 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	f001 fcf5 	bl	800cdb6 <USBD_LL_PrepareReceive>
 800b3cc:	e059      	b.n	800b482 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	0019      	movs	r1, r3
 800b3d8:	0010      	movs	r0, r2
 800b3da:	f7f4 ff37 	bl	800024c <__aeabi_uidivmod>
 800b3de:	1e0b      	subs	r3, r1, #0
 800b3e0:	d11f      	bne.n	800b422 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	689a      	ldr	r2, [r3, #8]
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d319      	bcc.n	800b422 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	689a      	ldr	r2, [r3, #8]
 800b3f2:	68f9      	ldr	r1, [r7, #12]
 800b3f4:	23a6      	movs	r3, #166	@ 0xa6
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d211      	bcs.n	800b422 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	2100      	movs	r1, #0
 800b404:	0018      	movs	r0, r3
 800b406:	f000 ffc4 	bl	800c392 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	23a6      	movs	r3, #166	@ 0xa6
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	2100      	movs	r1, #0
 800b412:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	2300      	movs	r3, #0
 800b418:	2200      	movs	r2, #0
 800b41a:	2100      	movs	r1, #0
 800b41c:	f001 fccb 	bl	800cdb6 <USBD_LL_PrepareReceive>
 800b420:	e02f      	b.n	800b482 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	23ad      	movs	r3, #173	@ 0xad
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	58d3      	ldr	r3, [r2, r3]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00d      	beq.n	800b44c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	23a7      	movs	r3, #167	@ 0xa7
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b438:	2b03      	cmp	r3, #3
 800b43a:	d107      	bne.n	800b44c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	23ad      	movs	r3, #173	@ 0xad
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	58d3      	ldr	r3, [r2, r3]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	0010      	movs	r0, r2
 800b44a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2180      	movs	r1, #128	@ 0x80
 800b450:	0018      	movs	r0, r3
 800b452:	f001 fbc8 	bl	800cbe6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	0018      	movs	r0, r3
 800b45a:	f000 fff8 	bl	800c44e <USBD_CtlReceiveStatus>
 800b45e:	e010      	b.n	800b482 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	23a5      	movs	r3, #165	@ 0xa5
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	58d3      	ldr	r3, [r2, r3]
 800b468:	2b04      	cmp	r3, #4
 800b46a:	d005      	beq.n	800b478 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	23a5      	movs	r3, #165	@ 0xa5
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b474:	2b00      	cmp	r3, #0
 800b476:	d104      	bne.n	800b482 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2180      	movs	r1, #128	@ 0x80
 800b47c:	0018      	movs	r0, r3
 800b47e:	f001 fbb2 	bl	800cbe6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	23a8      	movs	r3, #168	@ 0xa8
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	5cd3      	ldrb	r3, [r2, r3]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d124      	bne.n	800b4d8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	0018      	movs	r0, r3
 800b492:	f7ff fe43 	bl	800b11c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	23a8      	movs	r3, #168	@ 0xa8
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	2100      	movs	r1, #0
 800b49e:	54d1      	strb	r1, [r2, r3]
 800b4a0:	e01a      	b.n	800b4d8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	23ad      	movs	r3, #173	@ 0xad
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	58d3      	ldr	r3, [r2, r3]
 800b4aa:	695b      	ldr	r3, [r3, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d011      	beq.n	800b4d4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	23a7      	movs	r3, #167	@ 0xa7
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d10b      	bne.n	800b4d4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	23ad      	movs	r3, #173	@ 0xad
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	58d3      	ldr	r3, [r2, r3]
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	220b      	movs	r2, #11
 800b4c8:	18ba      	adds	r2, r7, r2
 800b4ca:	7811      	ldrb	r1, [r2, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	0010      	movs	r0, r2
 800b4d0:	4798      	blx	r3
 800b4d2:	e001      	b.n	800b4d8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e000      	b.n	800b4da <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	0018      	movs	r0, r3
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	b006      	add	sp, #24
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b082      	sub	sp, #8
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	2340      	movs	r3, #64	@ 0x40
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	f001 fb16 	bl	800cb22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	23ac      	movs	r3, #172	@ 0xac
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	23b2      	movs	r3, #178	@ 0xb2
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	2140      	movs	r1, #64	@ 0x40
 800b508:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	2340      	movs	r3, #64	@ 0x40
 800b50e:	2200      	movs	r2, #0
 800b510:	2180      	movs	r1, #128	@ 0x80
 800b512:	f001 fb06 	bl	800cb22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2240      	movs	r2, #64	@ 0x40
 800b520:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	23a7      	movs	r3, #167	@ 0xa7
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	2101      	movs	r1, #1
 800b52a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	23a5      	movs	r3, #165	@ 0xa5
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	2100      	movs	r1, #0
 800b534:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	23a9      	movs	r3, #169	@ 0xa9
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	2100      	movs	r1, #0
 800b544:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	23ae      	movs	r3, #174	@ 0xae
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	58d3      	ldr	r3, [r2, r3]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	23ad      	movs	r3, #173	@ 0xad
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	58d3      	ldr	r3, [r2, r3]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	b2d9      	uxtb	r1, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	0018      	movs	r0, r3
 800b566:	4790      	blx	r2
  }

  return USBD_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	0018      	movs	r0, r3
 800b56c:	46bd      	mov	sp, r7
 800b56e:	b002      	add	sp, #8
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b082      	sub	sp, #8
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	000a      	movs	r2, r1
 800b57c:	1cfb      	adds	r3, r7, #3
 800b57e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	1cfa      	adds	r2, r7, #3
 800b584:	7812      	ldrb	r2, [r2, #0]
 800b586:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	0018      	movs	r0, r3
 800b58c:	46bd      	mov	sp, r7
 800b58e:	b002      	add	sp, #8
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	23a7      	movs	r3, #167	@ 0xa7
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	5cd1      	ldrb	r1, [r2, r3]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a06      	ldr	r2, [pc, #24]	@ (800b5c0 <USBD_LL_Suspend+0x2c>)
 800b5a8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	23a7      	movs	r3, #167	@ 0xa7
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	2104      	movs	r1, #4
 800b5b2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	0018      	movs	r0, r3
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	b002      	add	sp, #8
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	46c0      	nop			@ (mov r8, r8)
 800b5c0:	0000029d 	.word	0x0000029d

0800b5c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	23a7      	movs	r3, #167	@ 0xa7
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	5cd3      	ldrb	r3, [r2, r3]
 800b5d4:	2b04      	cmp	r3, #4
 800b5d6:	d106      	bne.n	800b5e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a05      	ldr	r2, [pc, #20]	@ (800b5f0 <USBD_LL_Resume+0x2c>)
 800b5dc:	5c99      	ldrb	r1, [r3, r2]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	23a7      	movs	r3, #167	@ 0xa7
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	b002      	add	sp, #8
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	0000029d 	.word	0x0000029d

0800b5f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	23a7      	movs	r3, #167	@ 0xa7
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	5cd3      	ldrb	r3, [r2, r3]
 800b604:	2b03      	cmp	r3, #3
 800b606:	d10e      	bne.n	800b626 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	23ad      	movs	r3, #173	@ 0xad
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	58d3      	ldr	r3, [r2, r3]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d007      	beq.n	800b626 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	23ad      	movs	r3, #173	@ 0xad
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	58d3      	ldr	r3, [r2, r3]
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	0010      	movs	r0, r2
 800b624:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	0018      	movs	r0, r3
 800b62a:	46bd      	mov	sp, r7
 800b62c:	b002      	add	sp, #8
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b63a:	230f      	movs	r3, #15
 800b63c:	18fb      	adds	r3, r7, r3
 800b63e:	2200      	movs	r2, #0
 800b640:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	001a      	movs	r2, r3
 800b648:	2360      	movs	r3, #96	@ 0x60
 800b64a:	4013      	ands	r3, r2
 800b64c:	2b40      	cmp	r3, #64	@ 0x40
 800b64e:	d004      	beq.n	800b65a <USBD_StdDevReq+0x2a>
 800b650:	d84f      	bhi.n	800b6f2 <USBD_StdDevReq+0xc2>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <USBD_StdDevReq+0x3e>
 800b656:	2b20      	cmp	r3, #32
 800b658:	d14b      	bne.n	800b6f2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	23ad      	movs	r3, #173	@ 0xad
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	58d3      	ldr	r3, [r2, r3]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	0010      	movs	r0, r2
 800b66a:	4798      	blx	r3
      break;
 800b66c:	e048      	b.n	800b700 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	785b      	ldrb	r3, [r3, #1]
 800b672:	2b09      	cmp	r3, #9
 800b674:	d835      	bhi.n	800b6e2 <USBD_StdDevReq+0xb2>
 800b676:	009a      	lsls	r2, r3, #2
 800b678:	4b25      	ldr	r3, [pc, #148]	@ (800b710 <USBD_StdDevReq+0xe0>)
 800b67a:	18d3      	adds	r3, r2, r3
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	0011      	movs	r1, r2
 800b686:	0018      	movs	r0, r3
 800b688:	f000 fa52 	bl	800bb30 <USBD_GetDescriptor>
          break;
 800b68c:	e030      	b.n	800b6f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	0011      	movs	r1, r2
 800b694:	0018      	movs	r0, r3
 800b696:	f000 fbfd 	bl	800be94 <USBD_SetAddress>
          break;
 800b69a:	e029      	b.n	800b6f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	0011      	movs	r1, r2
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f000 fc4a 	bl	800bf3c <USBD_SetConfig>
          break;
 800b6a8:	e022      	b.n	800b6f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	0011      	movs	r1, r2
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f000 fce7 	bl	800c084 <USBD_GetConfig>
          break;
 800b6b6:	e01b      	b.n	800b6f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	0011      	movs	r1, r2
 800b6be:	0018      	movs	r0, r3
 800b6c0:	f000 fd1b 	bl	800c0fa <USBD_GetStatus>
          break;
 800b6c4:	e014      	b.n	800b6f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	0011      	movs	r1, r2
 800b6cc:	0018      	movs	r0, r3
 800b6ce:	f000 fd4e 	bl	800c16e <USBD_SetFeature>
          break;
 800b6d2:	e00d      	b.n	800b6f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	0011      	movs	r1, r2
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f000 fd5d 	bl	800c19a <USBD_ClrFeature>
          break;
 800b6e0:	e006      	b.n	800b6f0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	0011      	movs	r1, r2
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f000 fdb4 	bl	800c256 <USBD_CtlError>
          break;
 800b6ee:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b6f0:	e006      	b.n	800b700 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	0011      	movs	r1, r2
 800b6f8:	0018      	movs	r0, r3
 800b6fa:	f000 fdac 	bl	800c256 <USBD_CtlError>
      break;
 800b6fe:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800b700:	230f      	movs	r3, #15
 800b702:	18fb      	adds	r3, r7, r3
 800b704:	781b      	ldrb	r3, [r3, #0]
}
 800b706:	0018      	movs	r0, r3
 800b708:	46bd      	mov	sp, r7
 800b70a:	b004      	add	sp, #16
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	46c0      	nop			@ (mov r8, r8)
 800b710:	0800fb10 	.word	0x0800fb10

0800b714 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b714:	b5b0      	push	{r4, r5, r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b71e:	230f      	movs	r3, #15
 800b720:	18fb      	adds	r3, r7, r3
 800b722:	2200      	movs	r2, #0
 800b724:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	001a      	movs	r2, r3
 800b72c:	2360      	movs	r3, #96	@ 0x60
 800b72e:	4013      	ands	r3, r2
 800b730:	2b40      	cmp	r3, #64	@ 0x40
 800b732:	d004      	beq.n	800b73e <USBD_StdItfReq+0x2a>
 800b734:	d839      	bhi.n	800b7aa <USBD_StdItfReq+0x96>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <USBD_StdItfReq+0x2a>
 800b73a:	2b20      	cmp	r3, #32
 800b73c:	d135      	bne.n	800b7aa <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	23a7      	movs	r3, #167	@ 0xa7
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	5cd3      	ldrb	r3, [r2, r3]
 800b746:	3b01      	subs	r3, #1
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d825      	bhi.n	800b798 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	889b      	ldrh	r3, [r3, #4]
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b01      	cmp	r3, #1
 800b754:	d819      	bhi.n	800b78a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	23ad      	movs	r3, #173	@ 0xad
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	58d3      	ldr	r3, [r2, r3]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	250f      	movs	r5, #15
 800b762:	197c      	adds	r4, r7, r5
 800b764:	6839      	ldr	r1, [r7, #0]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	0010      	movs	r0, r2
 800b76a:	4798      	blx	r3
 800b76c:	0003      	movs	r3, r0
 800b76e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	88db      	ldrh	r3, [r3, #6]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d116      	bne.n	800b7a6 <USBD_StdItfReq+0x92>
 800b778:	197b      	adds	r3, r7, r5
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d112      	bne.n	800b7a6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	0018      	movs	r0, r3
 800b784:	f000 fe4f 	bl	800c426 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b788:	e00d      	b.n	800b7a6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	0011      	movs	r1, r2
 800b790:	0018      	movs	r0, r3
 800b792:	f000 fd60 	bl	800c256 <USBD_CtlError>
          break;
 800b796:	e006      	b.n	800b7a6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	0011      	movs	r1, r2
 800b79e:	0018      	movs	r0, r3
 800b7a0:	f000 fd59 	bl	800c256 <USBD_CtlError>
          break;
 800b7a4:	e000      	b.n	800b7a8 <USBD_StdItfReq+0x94>
          break;
 800b7a6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b7a8:	e006      	b.n	800b7b8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	0011      	movs	r1, r2
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	f000 fd50 	bl	800c256 <USBD_CtlError>
      break;
 800b7b6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	0018      	movs	r0, r3
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	b004      	add	sp, #16
 800b7c0:	bdb0      	pop	{r4, r5, r7, pc}

0800b7c2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b7c2:	b5b0      	push	{r4, r5, r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7cc:	230f      	movs	r3, #15
 800b7ce:	18fb      	adds	r3, r7, r3
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	889a      	ldrh	r2, [r3, #4]
 800b7d8:	230e      	movs	r3, #14
 800b7da:	18fb      	adds	r3, r7, r3
 800b7dc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	001a      	movs	r2, r3
 800b7e4:	2360      	movs	r3, #96	@ 0x60
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	2b40      	cmp	r3, #64	@ 0x40
 800b7ea:	d006      	beq.n	800b7fa <USBD_StdEPReq+0x38>
 800b7ec:	d900      	bls.n	800b7f0 <USBD_StdEPReq+0x2e>
 800b7ee:	e190      	b.n	800bb12 <USBD_StdEPReq+0x350>
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00c      	beq.n	800b80e <USBD_StdEPReq+0x4c>
 800b7f4:	2b20      	cmp	r3, #32
 800b7f6:	d000      	beq.n	800b7fa <USBD_StdEPReq+0x38>
 800b7f8:	e18b      	b.n	800bb12 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	23ad      	movs	r3, #173	@ 0xad
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	58d3      	ldr	r3, [r2, r3]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	0010      	movs	r0, r2
 800b80a:	4798      	blx	r3
      break;
 800b80c:	e188      	b.n	800bb20 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	001a      	movs	r2, r3
 800b814:	2360      	movs	r3, #96	@ 0x60
 800b816:	4013      	ands	r3, r2
 800b818:	2b20      	cmp	r3, #32
 800b81a:	d10f      	bne.n	800b83c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	23ad      	movs	r3, #173	@ 0xad
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	58d3      	ldr	r3, [r2, r3]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	250f      	movs	r5, #15
 800b828:	197c      	adds	r4, r7, r5
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	0010      	movs	r0, r2
 800b830:	4798      	blx	r3
 800b832:	0003      	movs	r3, r0
 800b834:	7023      	strb	r3, [r4, #0]

        return ret;
 800b836:	197b      	adds	r3, r7, r5
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	e174      	b.n	800bb26 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	785b      	ldrb	r3, [r3, #1]
 800b840:	2b03      	cmp	r3, #3
 800b842:	d007      	beq.n	800b854 <USBD_StdEPReq+0x92>
 800b844:	dd00      	ble.n	800b848 <USBD_StdEPReq+0x86>
 800b846:	e15c      	b.n	800bb02 <USBD_StdEPReq+0x340>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d100      	bne.n	800b84e <USBD_StdEPReq+0x8c>
 800b84c:	e092      	b.n	800b974 <USBD_StdEPReq+0x1b2>
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d04b      	beq.n	800b8ea <USBD_StdEPReq+0x128>
 800b852:	e156      	b.n	800bb02 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	23a7      	movs	r3, #167	@ 0xa7
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	5cd3      	ldrb	r3, [r2, r3]
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d002      	beq.n	800b866 <USBD_StdEPReq+0xa4>
 800b860:	2b03      	cmp	r3, #3
 800b862:	d01d      	beq.n	800b8a0 <USBD_StdEPReq+0xde>
 800b864:	e039      	b.n	800b8da <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b866:	220e      	movs	r2, #14
 800b868:	18bb      	adds	r3, r7, r2
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d010      	beq.n	800b892 <USBD_StdEPReq+0xd0>
 800b870:	18bb      	adds	r3, r7, r2
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b80      	cmp	r3, #128	@ 0x80
 800b876:	d00c      	beq.n	800b892 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b878:	18bb      	adds	r3, r7, r2
 800b87a:	781a      	ldrb	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	0011      	movs	r1, r2
 800b880:	0018      	movs	r0, r3
 800b882:	f001 f9b0 	bl	800cbe6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2180      	movs	r1, #128	@ 0x80
 800b88a:	0018      	movs	r0, r3
 800b88c:	f001 f9ab 	bl	800cbe6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b890:	e02a      	b.n	800b8e8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	0011      	movs	r1, r2
 800b898:	0018      	movs	r0, r3
 800b89a:	f000 fcdc 	bl	800c256 <USBD_CtlError>
              break;
 800b89e:	e023      	b.n	800b8e8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	885b      	ldrh	r3, [r3, #2]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d113      	bne.n	800b8d0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b8a8:	220e      	movs	r2, #14
 800b8aa:	18bb      	adds	r3, r7, r2
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00e      	beq.n	800b8d0 <USBD_StdEPReq+0x10e>
 800b8b2:	18bb      	adds	r3, r7, r2
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	2b80      	cmp	r3, #128	@ 0x80
 800b8b8:	d00a      	beq.n	800b8d0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	88db      	ldrh	r3, [r3, #6]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b8c2:	18bb      	adds	r3, r7, r2
 800b8c4:	781a      	ldrb	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	0011      	movs	r1, r2
 800b8ca:	0018      	movs	r0, r3
 800b8cc:	f001 f98b 	bl	800cbe6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	f000 fda7 	bl	800c426 <USBD_CtlSendStatus>

              break;
 800b8d8:	e006      	b.n	800b8e8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	0011      	movs	r1, r2
 800b8e0:	0018      	movs	r0, r3
 800b8e2:	f000 fcb8 	bl	800c256 <USBD_CtlError>
              break;
 800b8e6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800b8e8:	e112      	b.n	800bb10 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	23a7      	movs	r3, #167	@ 0xa7
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	5cd3      	ldrb	r3, [r2, r3]
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d002      	beq.n	800b8fc <USBD_StdEPReq+0x13a>
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d01d      	beq.n	800b936 <USBD_StdEPReq+0x174>
 800b8fa:	e032      	b.n	800b962 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8fc:	220e      	movs	r2, #14
 800b8fe:	18bb      	adds	r3, r7, r2
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d010      	beq.n	800b928 <USBD_StdEPReq+0x166>
 800b906:	18bb      	adds	r3, r7, r2
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	2b80      	cmp	r3, #128	@ 0x80
 800b90c:	d00c      	beq.n	800b928 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b90e:	18bb      	adds	r3, r7, r2
 800b910:	781a      	ldrb	r2, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	0011      	movs	r1, r2
 800b916:	0018      	movs	r0, r3
 800b918:	f001 f965 	bl	800cbe6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2180      	movs	r1, #128	@ 0x80
 800b920:	0018      	movs	r0, r3
 800b922:	f001 f960 	bl	800cbe6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b926:	e024      	b.n	800b972 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	0011      	movs	r1, r2
 800b92e:	0018      	movs	r0, r3
 800b930:	f000 fc91 	bl	800c256 <USBD_CtlError>
              break;
 800b934:	e01d      	b.n	800b972 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	885b      	ldrh	r3, [r3, #2]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d118      	bne.n	800b970 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b93e:	210e      	movs	r1, #14
 800b940:	187b      	adds	r3, r7, r1
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	227f      	movs	r2, #127	@ 0x7f
 800b946:	4013      	ands	r3, r2
 800b948:	d006      	beq.n	800b958 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b94a:	187b      	adds	r3, r7, r1
 800b94c:	781a      	ldrb	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	0011      	movs	r1, r2
 800b952:	0018      	movs	r0, r3
 800b954:	f001 f972 	bl	800cc3c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	0018      	movs	r0, r3
 800b95c:	f000 fd63 	bl	800c426 <USBD_CtlSendStatus>
              }
              break;
 800b960:	e006      	b.n	800b970 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	0011      	movs	r1, r2
 800b968:	0018      	movs	r0, r3
 800b96a:	f000 fc74 	bl	800c256 <USBD_CtlError>
              break;
 800b96e:	e000      	b.n	800b972 <USBD_StdEPReq+0x1b0>
              break;
 800b970:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800b972:	e0cd      	b.n	800bb10 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	23a7      	movs	r3, #167	@ 0xa7
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	5cd3      	ldrb	r3, [r2, r3]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d002      	beq.n	800b986 <USBD_StdEPReq+0x1c4>
 800b980:	2b03      	cmp	r3, #3
 800b982:	d03c      	beq.n	800b9fe <USBD_StdEPReq+0x23c>
 800b984:	e0b5      	b.n	800baf2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b986:	220e      	movs	r2, #14
 800b988:	18bb      	adds	r3, r7, r2
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00a      	beq.n	800b9a6 <USBD_StdEPReq+0x1e4>
 800b990:	18bb      	adds	r3, r7, r2
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	2b80      	cmp	r3, #128	@ 0x80
 800b996:	d006      	beq.n	800b9a6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	0011      	movs	r1, r2
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f000 fc59 	bl	800c256 <USBD_CtlError>
                break;
 800b9a4:	e0ac      	b.n	800bb00 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9a6:	220e      	movs	r2, #14
 800b9a8:	18bb      	adds	r3, r7, r2
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b25b      	sxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	da0c      	bge.n	800b9cc <USBD_StdEPReq+0x20a>
 800b9b2:	18bb      	adds	r3, r7, r2
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	227f      	movs	r2, #127	@ 0x7f
 800b9b8:	401a      	ands	r2, r3
 800b9ba:	0013      	movs	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	189b      	adds	r3, r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	3310      	adds	r3, #16
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	18d3      	adds	r3, r2, r3
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	e00d      	b.n	800b9e8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9cc:	230e      	movs	r3, #14
 800b9ce:	18fb      	adds	r3, r7, r3
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	227f      	movs	r2, #127	@ 0x7f
 800b9d4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d6:	0013      	movs	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	189b      	adds	r3, r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	3351      	adds	r3, #81	@ 0x51
 800b9e0:	33ff      	adds	r3, #255	@ 0xff
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	18d3      	adds	r3, r2, r3
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b9f0:	68b9      	ldr	r1, [r7, #8]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	0018      	movs	r0, r3
 800b9f8:	f000 fcab 	bl	800c352 <USBD_CtlSendData>
              break;
 800b9fc:	e080      	b.n	800bb00 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9fe:	220e      	movs	r2, #14
 800ba00:	18bb      	adds	r3, r7, r2
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	b25b      	sxtb	r3, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	da14      	bge.n	800ba34 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba0a:	18bb      	adds	r3, r7, r2
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	220f      	movs	r2, #15
 800ba10:	401a      	ands	r2, r3
 800ba12:	6879      	ldr	r1, [r7, #4]
 800ba14:	0013      	movs	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	189b      	adds	r3, r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	18cb      	adds	r3, r1, r3
 800ba1e:	3318      	adds	r3, #24
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d11e      	bne.n	800ba64 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	0011      	movs	r1, r2
 800ba2c:	0018      	movs	r0, r3
 800ba2e:	f000 fc12 	bl	800c256 <USBD_CtlError>
                  break;
 800ba32:	e065      	b.n	800bb00 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba34:	230e      	movs	r3, #14
 800ba36:	18fb      	adds	r3, r7, r3
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	220f      	movs	r2, #15
 800ba3c:	401a      	ands	r2, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	23ac      	movs	r3, #172	@ 0xac
 800ba42:	0059      	lsls	r1, r3, #1
 800ba44:	0013      	movs	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	189b      	adds	r3, r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	18c3      	adds	r3, r0, r3
 800ba4e:	185b      	adds	r3, r3, r1
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d106      	bne.n	800ba64 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	0011      	movs	r1, r2
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	f000 fbfa 	bl	800c256 <USBD_CtlError>
                  break;
 800ba62:	e04d      	b.n	800bb00 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba64:	220e      	movs	r2, #14
 800ba66:	18bb      	adds	r3, r7, r2
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	b25b      	sxtb	r3, r3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	da0c      	bge.n	800ba8a <USBD_StdEPReq+0x2c8>
 800ba70:	18bb      	adds	r3, r7, r2
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	227f      	movs	r2, #127	@ 0x7f
 800ba76:	401a      	ands	r2, r3
 800ba78:	0013      	movs	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	189b      	adds	r3, r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	3310      	adds	r3, #16
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	18d3      	adds	r3, r2, r3
 800ba86:	3304      	adds	r3, #4
 800ba88:	e00d      	b.n	800baa6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba8a:	230e      	movs	r3, #14
 800ba8c:	18fb      	adds	r3, r7, r3
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	227f      	movs	r2, #127	@ 0x7f
 800ba92:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba94:	0013      	movs	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	189b      	adds	r3, r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	3351      	adds	r3, #81	@ 0x51
 800ba9e:	33ff      	adds	r3, #255	@ 0xff
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	18d3      	adds	r3, r2, r3
 800baa4:	3304      	adds	r3, #4
 800baa6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800baa8:	220e      	movs	r2, #14
 800baaa:	18bb      	adds	r3, r7, r2
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <USBD_StdEPReq+0x2f8>
 800bab2:	18bb      	adds	r3, r7, r2
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b80      	cmp	r3, #128	@ 0x80
 800bab8:	d103      	bne.n	800bac2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	2200      	movs	r2, #0
 800babe:	601a      	str	r2, [r3, #0]
 800bac0:	e010      	b.n	800bae4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bac2:	230e      	movs	r3, #14
 800bac4:	18fb      	adds	r3, r7, r3
 800bac6:	781a      	ldrb	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	0011      	movs	r1, r2
 800bacc:	0018      	movs	r0, r3
 800bace:	f001 f8e0 	bl	800cc92 <USBD_LL_IsStallEP>
 800bad2:	1e03      	subs	r3, r0, #0
 800bad4:	d003      	beq.n	800bade <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2201      	movs	r2, #1
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	e002      	b.n	800bae4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bae4:	68b9      	ldr	r1, [r7, #8]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2202      	movs	r2, #2
 800baea:	0018      	movs	r0, r3
 800baec:	f000 fc31 	bl	800c352 <USBD_CtlSendData>
              break;
 800baf0:	e006      	b.n	800bb00 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	0011      	movs	r1, r2
 800baf8:	0018      	movs	r0, r3
 800bafa:	f000 fbac 	bl	800c256 <USBD_CtlError>
              break;
 800bafe:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bb00:	e006      	b.n	800bb10 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	0011      	movs	r1, r2
 800bb08:	0018      	movs	r0, r3
 800bb0a:	f000 fba4 	bl	800c256 <USBD_CtlError>
          break;
 800bb0e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bb10:	e006      	b.n	800bb20 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	0011      	movs	r1, r2
 800bb18:	0018      	movs	r0, r3
 800bb1a:	f000 fb9c 	bl	800c256 <USBD_CtlError>
      break;
 800bb1e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bb20:	230f      	movs	r3, #15
 800bb22:	18fb      	adds	r3, r7, r3
 800bb24:	781b      	ldrb	r3, [r3, #0]
}
 800bb26:	0018      	movs	r0, r3
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	b004      	add	sp, #16
 800bb2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bb30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb3a:	2308      	movs	r3, #8
 800bb3c:	18fb      	adds	r3, r7, r3
 800bb3e:	2200      	movs	r2, #0
 800bb40:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb46:	230b      	movs	r3, #11
 800bb48:	18fb      	adds	r3, r7, r3
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	885b      	ldrh	r3, [r3, #2]
 800bb52:	0a1b      	lsrs	r3, r3, #8
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	2b07      	cmp	r3, #7
 800bb58:	d900      	bls.n	800bb5c <USBD_GetDescriptor+0x2c>
 800bb5a:	e159      	b.n	800be10 <USBD_GetDescriptor+0x2e0>
 800bb5c:	009a      	lsls	r2, r3, #2
 800bb5e:	4bcb      	ldr	r3, [pc, #812]	@ (800be8c <USBD_GetDescriptor+0x35c>)
 800bb60:	18d3      	adds	r3, r2, r3
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	23ac      	movs	r3, #172	@ 0xac
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	58d3      	ldr	r3, [r2, r3]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	7c12      	ldrb	r2, [r2, #16]
 800bb74:	2108      	movs	r1, #8
 800bb76:	1879      	adds	r1, r7, r1
 800bb78:	0010      	movs	r0, r2
 800bb7a:	4798      	blx	r3
 800bb7c:	0003      	movs	r3, r0
 800bb7e:	60fb      	str	r3, [r7, #12]
      break;
 800bb80:	e153      	b.n	800be2a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	7c1b      	ldrb	r3, [r3, #16]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10f      	bne.n	800bbaa <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	23ad      	movs	r3, #173	@ 0xad
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	58d3      	ldr	r3, [r2, r3]
 800bb92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb94:	2208      	movs	r2, #8
 800bb96:	18ba      	adds	r2, r7, r2
 800bb98:	0010      	movs	r0, r2
 800bb9a:	4798      	blx	r3
 800bb9c:	0003      	movs	r3, r0
 800bb9e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	3301      	adds	r3, #1
 800bba4:	2202      	movs	r2, #2
 800bba6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bba8:	e13f      	b.n	800be2a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	23ad      	movs	r3, #173	@ 0xad
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	58d3      	ldr	r3, [r2, r3]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb4:	2208      	movs	r2, #8
 800bbb6:	18ba      	adds	r2, r7, r2
 800bbb8:	0010      	movs	r0, r2
 800bbba:	4798      	blx	r3
 800bbbc:	0003      	movs	r3, r0
 800bbbe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	701a      	strb	r2, [r3, #0]
      break;
 800bbc8:	e12f      	b.n	800be2a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	885b      	ldrh	r3, [r3, #2]
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b05      	cmp	r3, #5
 800bbd2:	d900      	bls.n	800bbd6 <USBD_GetDescriptor+0xa6>
 800bbd4:	e0d0      	b.n	800bd78 <USBD_GetDescriptor+0x248>
 800bbd6:	009a      	lsls	r2, r3, #2
 800bbd8:	4bad      	ldr	r3, [pc, #692]	@ (800be90 <USBD_GetDescriptor+0x360>)
 800bbda:	18d3      	adds	r3, r2, r3
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	23ac      	movs	r3, #172	@ 0xac
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	58d3      	ldr	r3, [r2, r3]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00d      	beq.n	800bc0a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	23ac      	movs	r3, #172	@ 0xac
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	58d3      	ldr	r3, [r2, r3]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	7c12      	ldrb	r2, [r2, #16]
 800bbfc:	2108      	movs	r1, #8
 800bbfe:	1879      	adds	r1, r7, r1
 800bc00:	0010      	movs	r0, r2
 800bc02:	4798      	blx	r3
 800bc04:	0003      	movs	r3, r0
 800bc06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc08:	e0c3      	b.n	800bd92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	0011      	movs	r1, r2
 800bc10:	0018      	movs	r0, r3
 800bc12:	f000 fb20 	bl	800c256 <USBD_CtlError>
            err++;
 800bc16:	210b      	movs	r1, #11
 800bc18:	187b      	adds	r3, r7, r1
 800bc1a:	781a      	ldrb	r2, [r3, #0]
 800bc1c:	187b      	adds	r3, r7, r1
 800bc1e:	3201      	adds	r2, #1
 800bc20:	701a      	strb	r2, [r3, #0]
          break;
 800bc22:	e0b6      	b.n	800bd92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	23ac      	movs	r3, #172	@ 0xac
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	58d3      	ldr	r3, [r2, r3]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00d      	beq.n	800bc4e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	23ac      	movs	r3, #172	@ 0xac
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	58d3      	ldr	r3, [r2, r3]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	7c12      	ldrb	r2, [r2, #16]
 800bc40:	2108      	movs	r1, #8
 800bc42:	1879      	adds	r1, r7, r1
 800bc44:	0010      	movs	r0, r2
 800bc46:	4798      	blx	r3
 800bc48:	0003      	movs	r3, r0
 800bc4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc4c:	e0a1      	b.n	800bd92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	0011      	movs	r1, r2
 800bc54:	0018      	movs	r0, r3
 800bc56:	f000 fafe 	bl	800c256 <USBD_CtlError>
            err++;
 800bc5a:	210b      	movs	r1, #11
 800bc5c:	187b      	adds	r3, r7, r1
 800bc5e:	781a      	ldrb	r2, [r3, #0]
 800bc60:	187b      	adds	r3, r7, r1
 800bc62:	3201      	adds	r2, #1
 800bc64:	701a      	strb	r2, [r3, #0]
          break;
 800bc66:	e094      	b.n	800bd92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	23ac      	movs	r3, #172	@ 0xac
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	58d3      	ldr	r3, [r2, r3]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00d      	beq.n	800bc92 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	23ac      	movs	r3, #172	@ 0xac
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	58d3      	ldr	r3, [r2, r3]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	7c12      	ldrb	r2, [r2, #16]
 800bc84:	2108      	movs	r1, #8
 800bc86:	1879      	adds	r1, r7, r1
 800bc88:	0010      	movs	r0, r2
 800bc8a:	4798      	blx	r3
 800bc8c:	0003      	movs	r3, r0
 800bc8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc90:	e07f      	b.n	800bd92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	0011      	movs	r1, r2
 800bc98:	0018      	movs	r0, r3
 800bc9a:	f000 fadc 	bl	800c256 <USBD_CtlError>
            err++;
 800bc9e:	210b      	movs	r1, #11
 800bca0:	187b      	adds	r3, r7, r1
 800bca2:	781a      	ldrb	r2, [r3, #0]
 800bca4:	187b      	adds	r3, r7, r1
 800bca6:	3201      	adds	r2, #1
 800bca8:	701a      	strb	r2, [r3, #0]
          break;
 800bcaa:	e072      	b.n	800bd92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	23ac      	movs	r3, #172	@ 0xac
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	58d3      	ldr	r3, [r2, r3]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00d      	beq.n	800bcd6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	23ac      	movs	r3, #172	@ 0xac
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	58d3      	ldr	r3, [r2, r3]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	7c12      	ldrb	r2, [r2, #16]
 800bcc8:	2108      	movs	r1, #8
 800bcca:	1879      	adds	r1, r7, r1
 800bccc:	0010      	movs	r0, r2
 800bcce:	4798      	blx	r3
 800bcd0:	0003      	movs	r3, r0
 800bcd2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcd4:	e05d      	b.n	800bd92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	0011      	movs	r1, r2
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f000 faba 	bl	800c256 <USBD_CtlError>
            err++;
 800bce2:	210b      	movs	r1, #11
 800bce4:	187b      	adds	r3, r7, r1
 800bce6:	781a      	ldrb	r2, [r3, #0]
 800bce8:	187b      	adds	r3, r7, r1
 800bcea:	3201      	adds	r2, #1
 800bcec:	701a      	strb	r2, [r3, #0]
          break;
 800bcee:	e050      	b.n	800bd92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	23ac      	movs	r3, #172	@ 0xac
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	58d3      	ldr	r3, [r2, r3]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00d      	beq.n	800bd1a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	23ac      	movs	r3, #172	@ 0xac
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	58d3      	ldr	r3, [r2, r3]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	7c12      	ldrb	r2, [r2, #16]
 800bd0c:	2108      	movs	r1, #8
 800bd0e:	1879      	adds	r1, r7, r1
 800bd10:	0010      	movs	r0, r2
 800bd12:	4798      	blx	r3
 800bd14:	0003      	movs	r3, r0
 800bd16:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd18:	e03b      	b.n	800bd92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	0011      	movs	r1, r2
 800bd20:	0018      	movs	r0, r3
 800bd22:	f000 fa98 	bl	800c256 <USBD_CtlError>
            err++;
 800bd26:	210b      	movs	r1, #11
 800bd28:	187b      	adds	r3, r7, r1
 800bd2a:	781a      	ldrb	r2, [r3, #0]
 800bd2c:	187b      	adds	r3, r7, r1
 800bd2e:	3201      	adds	r2, #1
 800bd30:	701a      	strb	r2, [r3, #0]
          break;
 800bd32:	e02e      	b.n	800bd92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	23ac      	movs	r3, #172	@ 0xac
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	58d3      	ldr	r3, [r2, r3]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00d      	beq.n	800bd5e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	23ac      	movs	r3, #172	@ 0xac
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	58d3      	ldr	r3, [r2, r3]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	7c12      	ldrb	r2, [r2, #16]
 800bd50:	2108      	movs	r1, #8
 800bd52:	1879      	adds	r1, r7, r1
 800bd54:	0010      	movs	r0, r2
 800bd56:	4798      	blx	r3
 800bd58:	0003      	movs	r3, r0
 800bd5a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd5c:	e019      	b.n	800bd92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	0011      	movs	r1, r2
 800bd64:	0018      	movs	r0, r3
 800bd66:	f000 fa76 	bl	800c256 <USBD_CtlError>
            err++;
 800bd6a:	210b      	movs	r1, #11
 800bd6c:	187b      	adds	r3, r7, r1
 800bd6e:	781a      	ldrb	r2, [r3, #0]
 800bd70:	187b      	adds	r3, r7, r1
 800bd72:	3201      	adds	r2, #1
 800bd74:	701a      	strb	r2, [r3, #0]
          break;
 800bd76:	e00c      	b.n	800bd92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	0011      	movs	r1, r2
 800bd7e:	0018      	movs	r0, r3
 800bd80:	f000 fa69 	bl	800c256 <USBD_CtlError>
          err++;
 800bd84:	210b      	movs	r1, #11
 800bd86:	187b      	adds	r3, r7, r1
 800bd88:	781a      	ldrb	r2, [r3, #0]
 800bd8a:	187b      	adds	r3, r7, r1
 800bd8c:	3201      	adds	r2, #1
 800bd8e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800bd90:	e04b      	b.n	800be2a <USBD_GetDescriptor+0x2fa>
 800bd92:	e04a      	b.n	800be2a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	7c1b      	ldrb	r3, [r3, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10b      	bne.n	800bdb4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	23ad      	movs	r3, #173	@ 0xad
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	58d3      	ldr	r3, [r2, r3]
 800bda4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bda6:	2208      	movs	r2, #8
 800bda8:	18ba      	adds	r2, r7, r2
 800bdaa:	0010      	movs	r0, r2
 800bdac:	4798      	blx	r3
 800bdae:	0003      	movs	r3, r0
 800bdb0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdb2:	e03a      	b.n	800be2a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	0011      	movs	r1, r2
 800bdba:	0018      	movs	r0, r3
 800bdbc:	f000 fa4b 	bl	800c256 <USBD_CtlError>
        err++;
 800bdc0:	210b      	movs	r1, #11
 800bdc2:	187b      	adds	r3, r7, r1
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	187b      	adds	r3, r7, r1
 800bdc8:	3201      	adds	r2, #1
 800bdca:	701a      	strb	r2, [r3, #0]
      break;
 800bdcc:	e02d      	b.n	800be2a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	7c1b      	ldrb	r3, [r3, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10f      	bne.n	800bdf6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	23ad      	movs	r3, #173	@ 0xad
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	58d3      	ldr	r3, [r2, r3]
 800bdde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bde0:	2208      	movs	r2, #8
 800bde2:	18ba      	adds	r2, r7, r2
 800bde4:	0010      	movs	r0, r2
 800bde6:	4798      	blx	r3
 800bde8:	0003      	movs	r3, r0
 800bdea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	2207      	movs	r2, #7
 800bdf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdf4:	e019      	b.n	800be2a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	0011      	movs	r1, r2
 800bdfc:	0018      	movs	r0, r3
 800bdfe:	f000 fa2a 	bl	800c256 <USBD_CtlError>
        err++;
 800be02:	210b      	movs	r1, #11
 800be04:	187b      	adds	r3, r7, r1
 800be06:	781a      	ldrb	r2, [r3, #0]
 800be08:	187b      	adds	r3, r7, r1
 800be0a:	3201      	adds	r2, #1
 800be0c:	701a      	strb	r2, [r3, #0]
      break;
 800be0e:	e00c      	b.n	800be2a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	0011      	movs	r1, r2
 800be16:	0018      	movs	r0, r3
 800be18:	f000 fa1d 	bl	800c256 <USBD_CtlError>
      err++;
 800be1c:	210b      	movs	r1, #11
 800be1e:	187b      	adds	r3, r7, r1
 800be20:	781a      	ldrb	r2, [r3, #0]
 800be22:	187b      	adds	r3, r7, r1
 800be24:	3201      	adds	r2, #1
 800be26:	701a      	strb	r2, [r3, #0]
      break;
 800be28:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800be2a:	230b      	movs	r3, #11
 800be2c:	18fb      	adds	r3, r7, r3
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d127      	bne.n	800be84 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be34:	2108      	movs	r1, #8
 800be36:	187b      	adds	r3, r7, r1
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d019      	beq.n	800be72 <USBD_GetDescriptor+0x342>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	88db      	ldrh	r3, [r3, #6]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d015      	beq.n	800be72 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	88da      	ldrh	r2, [r3, #6]
 800be4a:	187b      	adds	r3, r7, r1
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	1c18      	adds	r0, r3, #0
 800be50:	1c11      	adds	r1, r2, #0
 800be52:	b28a      	uxth	r2, r1
 800be54:	b283      	uxth	r3, r0
 800be56:	429a      	cmp	r2, r3
 800be58:	d900      	bls.n	800be5c <USBD_GetDescriptor+0x32c>
 800be5a:	1c01      	adds	r1, r0, #0
 800be5c:	b28a      	uxth	r2, r1
 800be5e:	2108      	movs	r1, #8
 800be60:	187b      	adds	r3, r7, r1
 800be62:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be64:	187b      	adds	r3, r7, r1
 800be66:	881a      	ldrh	r2, [r3, #0]
 800be68:	68f9      	ldr	r1, [r7, #12]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	0018      	movs	r0, r3
 800be6e:	f000 fa70 	bl	800c352 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	88db      	ldrh	r3, [r3, #6]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d105      	bne.n	800be86 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	0018      	movs	r0, r3
 800be7e:	f000 fad2 	bl	800c426 <USBD_CtlSendStatus>
 800be82:	e000      	b.n	800be86 <USBD_GetDescriptor+0x356>
    return;
 800be84:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800be86:	46bd      	mov	sp, r7
 800be88:	b004      	add	sp, #16
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	0800fb38 	.word	0x0800fb38
 800be90:	0800fb58 	.word	0x0800fb58

0800be94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800be94:	b590      	push	{r4, r7, lr}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	889b      	ldrh	r3, [r3, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d13d      	bne.n	800bf22 <USBD_SetAddress+0x8e>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	88db      	ldrh	r3, [r3, #6]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d139      	bne.n	800bf22 <USBD_SetAddress+0x8e>
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	885b      	ldrh	r3, [r3, #2]
 800beb2:	2b7f      	cmp	r3, #127	@ 0x7f
 800beb4:	d835      	bhi.n	800bf22 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	885b      	ldrh	r3, [r3, #2]
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	230f      	movs	r3, #15
 800bebe:	18fb      	adds	r3, r7, r3
 800bec0:	217f      	movs	r1, #127	@ 0x7f
 800bec2:	400a      	ands	r2, r1
 800bec4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	23a7      	movs	r3, #167	@ 0xa7
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	5cd3      	ldrb	r3, [r2, r3]
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d106      	bne.n	800bee0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	0011      	movs	r1, r2
 800bed8:	0018      	movs	r0, r3
 800beda:	f000 f9bc 	bl	800c256 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bede:	e027      	b.n	800bf30 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	240f      	movs	r4, #15
 800bee4:	193a      	adds	r2, r7, r4
 800bee6:	4914      	ldr	r1, [pc, #80]	@ (800bf38 <USBD_SetAddress+0xa4>)
 800bee8:	7812      	ldrb	r2, [r2, #0]
 800beea:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800beec:	193b      	adds	r3, r7, r4
 800beee:	781a      	ldrb	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	0011      	movs	r1, r2
 800bef4:	0018      	movs	r0, r3
 800bef6:	f000 fefc 	bl	800ccf2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	0018      	movs	r0, r3
 800befe:	f000 fa92 	bl	800c426 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf02:	193b      	adds	r3, r7, r4
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	23a7      	movs	r3, #167	@ 0xa7
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	2102      	movs	r1, #2
 800bf12:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf14:	e00c      	b.n	800bf30 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	23a7      	movs	r3, #167	@ 0xa7
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf20:	e006      	b.n	800bf30 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	0011      	movs	r1, r2
 800bf28:	0018      	movs	r0, r3
 800bf2a:	f000 f994 	bl	800c256 <USBD_CtlError>
  }
}
 800bf2e:	46c0      	nop			@ (mov r8, r8)
 800bf30:	46c0      	nop			@ (mov r8, r8)
 800bf32:	46bd      	mov	sp, r7
 800bf34:	b005      	add	sp, #20
 800bf36:	bd90      	pop	{r4, r7, pc}
 800bf38:	0000029e 	.word	0x0000029e

0800bf3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	885b      	ldrh	r3, [r3, #2]
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	4b4c      	ldr	r3, [pc, #304]	@ (800c080 <USBD_SetConfig+0x144>)
 800bf4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf50:	4b4b      	ldr	r3, [pc, #300]	@ (800c080 <USBD_SetConfig+0x144>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d906      	bls.n	800bf66 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	0011      	movs	r1, r2
 800bf5e:	0018      	movs	r0, r3
 800bf60:	f000 f979 	bl	800c256 <USBD_CtlError>
 800bf64:	e088      	b.n	800c078 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	23a7      	movs	r3, #167	@ 0xa7
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	5cd3      	ldrb	r3, [r2, r3]
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d002      	beq.n	800bf78 <USBD_SetConfig+0x3c>
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d029      	beq.n	800bfca <USBD_SetConfig+0x8e>
 800bf76:	e071      	b.n	800c05c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bf78:	4b41      	ldr	r3, [pc, #260]	@ (800c080 <USBD_SetConfig+0x144>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01f      	beq.n	800bfc0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800bf80:	4b3f      	ldr	r3, [pc, #252]	@ (800c080 <USBD_SetConfig+0x144>)
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	001a      	movs	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	23a7      	movs	r3, #167	@ 0xa7
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	2103      	movs	r1, #3
 800bf92:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf94:	4b3a      	ldr	r3, [pc, #232]	@ (800c080 <USBD_SetConfig+0x144>)
 800bf96:	781a      	ldrb	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	0011      	movs	r1, r2
 800bf9c:	0018      	movs	r0, r3
 800bf9e:	f7ff f8c6 	bl	800b12e <USBD_SetClassConfig>
 800bfa2:	0003      	movs	r3, r0
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d106      	bne.n	800bfb6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	0011      	movs	r1, r2
 800bfae:	0018      	movs	r0, r3
 800bfb0:	f000 f951 	bl	800c256 <USBD_CtlError>
            return;
 800bfb4:	e060      	b.n	800c078 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	0018      	movs	r0, r3
 800bfba:	f000 fa34 	bl	800c426 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfbe:	e05b      	b.n	800c078 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	0018      	movs	r0, r3
 800bfc4:	f000 fa2f 	bl	800c426 <USBD_CtlSendStatus>
        break;
 800bfc8:	e056      	b.n	800c078 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bfca:	4b2d      	ldr	r3, [pc, #180]	@ (800c080 <USBD_SetConfig+0x144>)
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d115      	bne.n	800bffe <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	23a7      	movs	r3, #167	@ 0xa7
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	2102      	movs	r1, #2
 800bfda:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800bfdc:	4b28      	ldr	r3, [pc, #160]	@ (800c080 <USBD_SetConfig+0x144>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	001a      	movs	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bfe6:	4b26      	ldr	r3, [pc, #152]	@ (800c080 <USBD_SetConfig+0x144>)
 800bfe8:	781a      	ldrb	r2, [r3, #0]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	0011      	movs	r1, r2
 800bfee:	0018      	movs	r0, r3
 800bff0:	f7ff f8c4 	bl	800b17c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	0018      	movs	r0, r3
 800bff8:	f000 fa15 	bl	800c426 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bffc:	e03c      	b.n	800c078 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800bffe:	4b20      	ldr	r3, [pc, #128]	@ (800c080 <USBD_SetConfig+0x144>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	001a      	movs	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d022      	beq.n	800c052 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	b2da      	uxtb	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	0011      	movs	r1, r2
 800c016:	0018      	movs	r0, r3
 800c018:	f7ff f8b0 	bl	800b17c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c01c:	4b18      	ldr	r3, [pc, #96]	@ (800c080 <USBD_SetConfig+0x144>)
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	001a      	movs	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c026:	4b16      	ldr	r3, [pc, #88]	@ (800c080 <USBD_SetConfig+0x144>)
 800c028:	781a      	ldrb	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	0011      	movs	r1, r2
 800c02e:	0018      	movs	r0, r3
 800c030:	f7ff f87d 	bl	800b12e <USBD_SetClassConfig>
 800c034:	0003      	movs	r3, r0
 800c036:	2b02      	cmp	r3, #2
 800c038:	d106      	bne.n	800c048 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	0011      	movs	r1, r2
 800c040:	0018      	movs	r0, r3
 800c042:	f000 f908 	bl	800c256 <USBD_CtlError>
            return;
 800c046:	e017      	b.n	800c078 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	0018      	movs	r0, r3
 800c04c:	f000 f9eb 	bl	800c426 <USBD_CtlSendStatus>
        break;
 800c050:	e012      	b.n	800c078 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	0018      	movs	r0, r3
 800c056:	f000 f9e6 	bl	800c426 <USBD_CtlSendStatus>
        break;
 800c05a:	e00d      	b.n	800c078 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	0011      	movs	r1, r2
 800c062:	0018      	movs	r0, r3
 800c064:	f000 f8f7 	bl	800c256 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c068:	4b05      	ldr	r3, [pc, #20]	@ (800c080 <USBD_SetConfig+0x144>)
 800c06a:	781a      	ldrb	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	0011      	movs	r1, r2
 800c070:	0018      	movs	r0, r3
 800c072:	f7ff f883 	bl	800b17c <USBD_ClrClassConfig>
        break;
 800c076:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c078:	46bd      	mov	sp, r7
 800c07a:	b002      	add	sp, #8
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	46c0      	nop			@ (mov r8, r8)
 800c080:	200009d4 	.word	0x200009d4

0800c084 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	88db      	ldrh	r3, [r3, #6]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d006      	beq.n	800c0a4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	0011      	movs	r1, r2
 800c09c:	0018      	movs	r0, r3
 800c09e:	f000 f8da 	bl	800c256 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0a2:	e026      	b.n	800c0f2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	23a7      	movs	r3, #167	@ 0xa7
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	5cd3      	ldrb	r3, [r2, r3]
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	dc02      	bgt.n	800c0b6 <USBD_GetConfig+0x32>
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	dc03      	bgt.n	800c0bc <USBD_GetConfig+0x38>
 800c0b4:	e016      	b.n	800c0e4 <USBD_GetConfig+0x60>
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d00c      	beq.n	800c0d4 <USBD_GetConfig+0x50>
 800c0ba:	e013      	b.n	800c0e4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3308      	adds	r3, #8
 800c0c6:	0019      	movs	r1, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	0018      	movs	r0, r3
 800c0ce:	f000 f940 	bl	800c352 <USBD_CtlSendData>
        break;
 800c0d2:	e00e      	b.n	800c0f2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	1d19      	adds	r1, r3, #4
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	0018      	movs	r0, r3
 800c0de:	f000 f938 	bl	800c352 <USBD_CtlSendData>
        break;
 800c0e2:	e006      	b.n	800c0f2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	0011      	movs	r1, r2
 800c0ea:	0018      	movs	r0, r3
 800c0ec:	f000 f8b3 	bl	800c256 <USBD_CtlError>
        break;
 800c0f0:	46c0      	nop			@ (mov r8, r8)
}
 800c0f2:	46c0      	nop			@ (mov r8, r8)
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	b002      	add	sp, #8
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	23a7      	movs	r3, #167	@ 0xa7
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	5cd3      	ldrb	r3, [r2, r3]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d822      	bhi.n	800c158 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	88db      	ldrh	r3, [r3, #6]
 800c116:	2b02      	cmp	r3, #2
 800c118:	d006      	beq.n	800c128 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	0011      	movs	r1, r2
 800c120:	0018      	movs	r0, r3
 800c122:	f000 f898 	bl	800c256 <USBD_CtlError>
        break;
 800c126:	e01e      	b.n	800c166 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	23a9      	movs	r3, #169	@ 0xa9
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	58d3      	ldr	r3, [r2, r3]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	2202      	movs	r2, #2
 800c140:	431a      	orrs	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	330c      	adds	r3, #12
 800c14a:	0019      	movs	r1, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2202      	movs	r2, #2
 800c150:	0018      	movs	r0, r3
 800c152:	f000 f8fe 	bl	800c352 <USBD_CtlSendData>
      break;
 800c156:	e006      	b.n	800c166 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	0011      	movs	r1, r2
 800c15e:	0018      	movs	r0, r3
 800c160:	f000 f879 	bl	800c256 <USBD_CtlError>
      break;
 800c164:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c166:	46c0      	nop			@ (mov r8, r8)
 800c168:	46bd      	mov	sp, r7
 800c16a:	b002      	add	sp, #8
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b082      	sub	sp, #8
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	885b      	ldrh	r3, [r3, #2]
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d108      	bne.n	800c192 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	23a9      	movs	r3, #169	@ 0xa9
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	2101      	movs	r1, #1
 800c188:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	0018      	movs	r0, r3
 800c18e:	f000 f94a 	bl	800c426 <USBD_CtlSendStatus>
  }
}
 800c192:	46c0      	nop			@ (mov r8, r8)
 800c194:	46bd      	mov	sp, r7
 800c196:	b002      	add	sp, #8
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	23a7      	movs	r3, #167	@ 0xa7
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	5cd3      	ldrb	r3, [r2, r3]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d80d      	bhi.n	800c1ce <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d110      	bne.n	800c1dc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	23a9      	movs	r3, #169	@ 0xa9
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	0018      	movs	r0, r3
 800c1c8:	f000 f92d 	bl	800c426 <USBD_CtlSendStatus>
      }
      break;
 800c1cc:	e006      	b.n	800c1dc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	0011      	movs	r1, r2
 800c1d4:	0018      	movs	r0, r3
 800c1d6:	f000 f83e 	bl	800c256 <USBD_CtlError>
      break;
 800c1da:	e000      	b.n	800c1de <USBD_ClrFeature+0x44>
      break;
 800c1dc:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c1de:	46c0      	nop			@ (mov r8, r8)
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	b002      	add	sp, #8
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	781a      	ldrb	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	785a      	ldrb	r2, [r3, #1]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	3302      	adds	r3, #2
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	001a      	movs	r2, r3
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	3303      	adds	r3, #3
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	021b      	lsls	r3, r3, #8
 800c210:	b29b      	uxth	r3, r3
 800c212:	18d3      	adds	r3, r2, r3
 800c214:	b29a      	uxth	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	3304      	adds	r3, #4
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	001a      	movs	r2, r3
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	3305      	adds	r3, #5
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	021b      	lsls	r3, r3, #8
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	18d3      	adds	r3, r2, r3
 800c22e:	b29a      	uxth	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	3306      	adds	r3, #6
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	001a      	movs	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	3307      	adds	r3, #7
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	021b      	lsls	r3, r3, #8
 800c244:	b29b      	uxth	r3, r3
 800c246:	18d3      	adds	r3, r2, r3
 800c248:	b29a      	uxth	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	80da      	strh	r2, [r3, #6]

}
 800c24e:	46c0      	nop			@ (mov r8, r8)
 800c250:	46bd      	mov	sp, r7
 800c252:	b002      	add	sp, #8
 800c254:	bd80      	pop	{r7, pc}

0800c256 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b082      	sub	sp, #8
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2180      	movs	r1, #128	@ 0x80
 800c264:	0018      	movs	r0, r3
 800c266:	f000 fcbe 	bl	800cbe6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2100      	movs	r1, #0
 800c26e:	0018      	movs	r0, r3
 800c270:	f000 fcb9 	bl	800cbe6 <USBD_LL_StallEP>
}
 800c274:	46c0      	nop			@ (mov r8, r8)
 800c276:	46bd      	mov	sp, r7
 800c278:	b002      	add	sp, #8
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c27c:	b590      	push	{r4, r7, lr}
 800c27e:	b087      	sub	sp, #28
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c288:	2417      	movs	r4, #23
 800c28a:	193b      	adds	r3, r7, r4
 800c28c:	2200      	movs	r2, #0
 800c28e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d03c      	beq.n	800c310 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	0018      	movs	r0, r3
 800c29a:	f000 f83d 	bl	800c318 <USBD_GetLen>
 800c29e:	0003      	movs	r3, r0
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	18db      	adds	r3, r3, r3
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c2ac:	193b      	adds	r3, r7, r4
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	193a      	adds	r2, r7, r4
 800c2b2:	1c59      	adds	r1, r3, #1
 800c2b4:	7011      	strb	r1, [r2, #0]
 800c2b6:	001a      	movs	r2, r3
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	189b      	adds	r3, r3, r2
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	7812      	ldrb	r2, [r2, #0]
 800c2c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c2c2:	193b      	adds	r3, r7, r4
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	193a      	adds	r2, r7, r4
 800c2c8:	1c59      	adds	r1, r3, #1
 800c2ca:	7011      	strb	r1, [r2, #0]
 800c2cc:	001a      	movs	r2, r3
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	189b      	adds	r3, r3, r2
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c2d6:	e017      	b.n	800c308 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	1c5a      	adds	r2, r3, #1
 800c2dc:	60fa      	str	r2, [r7, #12]
 800c2de:	2417      	movs	r4, #23
 800c2e0:	193a      	adds	r2, r7, r4
 800c2e2:	7812      	ldrb	r2, [r2, #0]
 800c2e4:	1939      	adds	r1, r7, r4
 800c2e6:	1c50      	adds	r0, r2, #1
 800c2e8:	7008      	strb	r0, [r1, #0]
 800c2ea:	0011      	movs	r1, r2
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	1852      	adds	r2, r2, r1
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c2f4:	193b      	adds	r3, r7, r4
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	193a      	adds	r2, r7, r4
 800c2fa:	1c59      	adds	r1, r3, #1
 800c2fc:	7011      	strb	r1, [r2, #0]
 800c2fe:	001a      	movs	r2, r3
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	189b      	adds	r3, r3, r2
 800c304:	2200      	movs	r2, #0
 800c306:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e3      	bne.n	800c2d8 <USBD_GetString+0x5c>
    }
  }
}
 800c310:	46c0      	nop			@ (mov r8, r8)
 800c312:	46bd      	mov	sp, r7
 800c314:	b007      	add	sp, #28
 800c316:	bd90      	pop	{r4, r7, pc}

0800c318 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c320:	230f      	movs	r3, #15
 800c322:	18fb      	adds	r3, r7, r3
 800c324:	2200      	movs	r2, #0
 800c326:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800c328:	e008      	b.n	800c33c <USBD_GetLen+0x24>
  {
    len++;
 800c32a:	210f      	movs	r1, #15
 800c32c:	187b      	adds	r3, r7, r1
 800c32e:	781a      	ldrb	r2, [r3, #0]
 800c330:	187b      	adds	r3, r7, r1
 800c332:	3201      	adds	r2, #1
 800c334:	701a      	strb	r2, [r3, #0]
    buf++;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	3301      	adds	r3, #1
 800c33a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1f2      	bne.n	800c32a <USBD_GetLen+0x12>
  }

  return len;
 800c344:	230f      	movs	r3, #15
 800c346:	18fb      	adds	r3, r7, r3
 800c348:	781b      	ldrb	r3, [r3, #0]
}
 800c34a:	0018      	movs	r0, r3
 800c34c:	46bd      	mov	sp, r7
 800c34e:	b004      	add	sp, #16
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	1dbb      	adds	r3, r7, #6
 800c35e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	23a5      	movs	r3, #165	@ 0xa5
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	2102      	movs	r1, #2
 800c368:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c36a:	1dbb      	adds	r3, r7, #6
 800c36c:	881a      	ldrh	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c372:	1dbb      	adds	r3, r7, #6
 800c374:	881a      	ldrh	r2, [r3, #0]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c37a:	1dbb      	adds	r3, r7, #6
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	2100      	movs	r1, #0
 800c384:	f000 fce0 	bl	800cd48 <USBD_LL_Transmit>

  return USBD_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	0018      	movs	r0, r3
 800c38c:	46bd      	mov	sp, r7
 800c38e:	b004      	add	sp, #16
 800c390:	bd80      	pop	{r7, pc}

0800c392 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	60f8      	str	r0, [r7, #12]
 800c39a:	60b9      	str	r1, [r7, #8]
 800c39c:	1dbb      	adds	r3, r7, #6
 800c39e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3a0:	1dbb      	adds	r3, r7, #6
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	f000 fccd 	bl	800cd48 <USBD_LL_Transmit>

  return USBD_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	0018      	movs	r0, r3
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	b004      	add	sp, #16
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	1dbb      	adds	r3, r7, #6
 800c3c4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	23a5      	movs	r3, #165	@ 0xa5
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	2103      	movs	r1, #3
 800c3ce:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c3d0:	1dbb      	adds	r3, r7, #6
 800c3d2:	8819      	ldrh	r1, [r3, #0]
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	23ae      	movs	r3, #174	@ 0xae
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c3dc:	1dbb      	adds	r3, r7, #6
 800c3de:	8819      	ldrh	r1, [r3, #0]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	23b0      	movs	r3, #176	@ 0xb0
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3e8:	1dbb      	adds	r3, r7, #6
 800c3ea:	881b      	ldrh	r3, [r3, #0]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	f000 fce0 	bl	800cdb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	b004      	add	sp, #16
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	1dbb      	adds	r3, r7, #6
 800c40c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c40e:	1dbb      	adds	r3, r7, #6
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	2100      	movs	r1, #0
 800c418:	f000 fccd 	bl	800cdb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	0018      	movs	r0, r3
 800c420:	46bd      	mov	sp, r7
 800c422:	b004      	add	sp, #16
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b082      	sub	sp, #8
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	23a5      	movs	r3, #165	@ 0xa5
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	2104      	movs	r1, #4
 800c436:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	2300      	movs	r3, #0
 800c43c:	2200      	movs	r2, #0
 800c43e:	2100      	movs	r1, #0
 800c440:	f000 fc82 	bl	800cd48 <USBD_LL_Transmit>

  return USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	0018      	movs	r0, r3
 800c448:	46bd      	mov	sp, r7
 800c44a:	b002      	add	sp, #8
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b082      	sub	sp, #8
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	23a5      	movs	r3, #165	@ 0xa5
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	2105      	movs	r1, #5
 800c45e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	2300      	movs	r3, #0
 800c464:	2200      	movs	r2, #0
 800c466:	2100      	movs	r1, #0
 800c468:	f000 fca5 	bl	800cdb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	0018      	movs	r0, r3
 800c470:	46bd      	mov	sp, r7
 800c472:	b002      	add	sp, #8
 800c474:	bd80      	pop	{r7, pc}
	...

0800c478 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c47c:	4914      	ldr	r1, [pc, #80]	@ (800c4d0 <MX_USB_DEVICE_Init+0x58>)
 800c47e:	4b15      	ldr	r3, [pc, #84]	@ (800c4d4 <MX_USB_DEVICE_Init+0x5c>)
 800c480:	2200      	movs	r2, #0
 800c482:	0018      	movs	r0, r3
 800c484:	f7fe fdec 	bl	800b060 <USBD_Init>
 800c488:	1e03      	subs	r3, r0, #0
 800c48a:	d001      	beq.n	800c490 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c48c:	f7f6 fb64 	bl	8002b58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c490:	4a11      	ldr	r2, [pc, #68]	@ (800c4d8 <MX_USB_DEVICE_Init+0x60>)
 800c492:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <MX_USB_DEVICE_Init+0x5c>)
 800c494:	0011      	movs	r1, r2
 800c496:	0018      	movs	r0, r3
 800c498:	f7fe fe13 	bl	800b0c2 <USBD_RegisterClass>
 800c49c:	1e03      	subs	r3, r0, #0
 800c49e:	d001      	beq.n	800c4a4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c4a0:	f7f6 fb5a 	bl	8002b58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4a4:	4a0d      	ldr	r2, [pc, #52]	@ (800c4dc <MX_USB_DEVICE_Init+0x64>)
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d4 <MX_USB_DEVICE_Init+0x5c>)
 800c4a8:	0011      	movs	r1, r2
 800c4aa:	0018      	movs	r0, r3
 800c4ac:	f7fe fd28 	bl	800af00 <USBD_CDC_RegisterInterface>
 800c4b0:	1e03      	subs	r3, r0, #0
 800c4b2:	d001      	beq.n	800c4b8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c4b4:	f7f6 fb50 	bl	8002b58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4b8:	4b06      	ldr	r3, [pc, #24]	@ (800c4d4 <MX_USB_DEVICE_Init+0x5c>)
 800c4ba:	0018      	movs	r0, r3
 800c4bc:	f7fe fe21 	bl	800b102 <USBD_Start>
 800c4c0:	1e03      	subs	r3, r0, #0
 800c4c2:	d001      	beq.n	800c4c8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c4c4:	f7f6 fb48 	bl	8002b58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4c8:	46c0      	nop			@ (mov r8, r8)
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	46c0      	nop			@ (mov r8, r8)
 800c4d0:	20000144 	.word	0x20000144
 800c4d4:	200009d8 	.word	0x200009d8
 800c4d8:	20000030 	.word	0x20000030
 800c4dc:	20000134 	.word	0x20000134

0800c4e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c4e4:	4907      	ldr	r1, [pc, #28]	@ (800c504 <CDC_Init_FS+0x24>)
 800c4e6:	4b08      	ldr	r3, [pc, #32]	@ (800c508 <CDC_Init_FS+0x28>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	0018      	movs	r0, r3
 800c4ec:	f7fe fd23 	bl	800af36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c4f0:	4a06      	ldr	r2, [pc, #24]	@ (800c50c <CDC_Init_FS+0x2c>)
 800c4f2:	4b05      	ldr	r3, [pc, #20]	@ (800c508 <CDC_Init_FS+0x28>)
 800c4f4:	0011      	movs	r1, r2
 800c4f6:	0018      	movs	r0, r3
 800c4f8:	f7fe fd39 	bl	800af6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c4fc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c4fe:	0018      	movs	r0, r3
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	2000109c 	.word	0x2000109c
 800c508:	200009d8 	.word	0x200009d8
 800c50c:	20000c9c 	.word	0x20000c9c

0800c510 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c514:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c516:	0018      	movs	r0, r3
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6039      	str	r1, [r7, #0]
 800c524:	0011      	movs	r1, r2
 800c526:	1dfb      	adds	r3, r7, #7
 800c528:	1c02      	adds	r2, r0, #0
 800c52a:	701a      	strb	r2, [r3, #0]
 800c52c:	1d3b      	adds	r3, r7, #4
 800c52e:	1c0a      	adds	r2, r1, #0
 800c530:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c532:	1dfb      	adds	r3, r7, #7
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b23      	cmp	r3, #35	@ 0x23
 800c538:	d804      	bhi.n	800c544 <CDC_Control_FS+0x28>
 800c53a:	009a      	lsls	r2, r3, #2
 800c53c:	4b04      	ldr	r3, [pc, #16]	@ (800c550 <CDC_Control_FS+0x34>)
 800c53e:	18d3      	adds	r3, r2, r3
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c544:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800c546:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c548:	0018      	movs	r0, r3
 800c54a:	46bd      	mov	sp, r7
 800c54c:	b002      	add	sp, #8
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	0800fb70 	.word	0x0800fb70

0800c554 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	4b06      	ldr	r3, [pc, #24]	@ (800c57c <CDC_Receive_FS+0x28>)
 800c562:	0011      	movs	r1, r2
 800c564:	0018      	movs	r0, r3
 800c566:	f7fe fd02 	bl	800af6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c56a:	4b04      	ldr	r3, [pc, #16]	@ (800c57c <CDC_Receive_FS+0x28>)
 800c56c:	0018      	movs	r0, r3
 800c56e:	f7fe fd49 	bl	800b004 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c572:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c574:	0018      	movs	r0, r3
 800c576:	46bd      	mov	sp, r7
 800c578:	b002      	add	sp, #8
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	200009d8 	.word	0x200009d8

0800c580 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c580:	b5b0      	push	{r4, r5, r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	000a      	movs	r2, r1
 800c58a:	1cbb      	adds	r3, r7, #2
 800c58c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800c58e:	230f      	movs	r3, #15
 800c590:	18fb      	adds	r3, r7, r3
 800c592:	2200      	movs	r2, #0
 800c594:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c596:	4a11      	ldr	r2, [pc, #68]	@ (800c5dc <CDC_Transmit_FS+0x5c>)
 800c598:	23ae      	movs	r3, #174	@ 0xae
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	58d3      	ldr	r3, [r2, r3]
 800c59e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	2385      	movs	r3, #133	@ 0x85
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	58d3      	ldr	r3, [r2, r3]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d001      	beq.n	800c5b0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e010      	b.n	800c5d2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c5b0:	1cbb      	adds	r3, r7, #2
 800c5b2:	881a      	ldrh	r2, [r3, #0]
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	4b09      	ldr	r3, [pc, #36]	@ (800c5dc <CDC_Transmit_FS+0x5c>)
 800c5b8:	0018      	movs	r0, r3
 800c5ba:	f7fe fcbc 	bl	800af36 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c5be:	250f      	movs	r5, #15
 800c5c0:	197c      	adds	r4, r7, r5
 800c5c2:	4b06      	ldr	r3, [pc, #24]	@ (800c5dc <CDC_Transmit_FS+0x5c>)
 800c5c4:	0018      	movs	r0, r3
 800c5c6:	f7fe fce6 	bl	800af96 <USBD_CDC_TransmitPacket>
 800c5ca:	0003      	movs	r3, r0
 800c5cc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800c5ce:	197b      	adds	r3, r7, r5
 800c5d0:	781b      	ldrb	r3, [r3, #0]
}
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	b004      	add	sp, #16
 800c5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c5da:	46c0      	nop			@ (mov r8, r8)
 800c5dc:	200009d8 	.word	0x200009d8

0800c5e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	0002      	movs	r2, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	1dfb      	adds	r3, r7, #7
 800c5ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2212      	movs	r2, #18
 800c5f2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c5f4:	4b02      	ldr	r3, [pc, #8]	@ (800c600 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	46c0      	nop			@ (mov r8, r8)
 800c600:	20000160 	.word	0x20000160

0800c604 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	0002      	movs	r2, r0
 800c60c:	6039      	str	r1, [r7, #0]
 800c60e:	1dfb      	adds	r3, r7, #7
 800c610:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2204      	movs	r2, #4
 800c616:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c618:	4b02      	ldr	r3, [pc, #8]	@ (800c624 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c61a:	0018      	movs	r0, r3
 800c61c:	46bd      	mov	sp, r7
 800c61e:	b002      	add	sp, #8
 800c620:	bd80      	pop	{r7, pc}
 800c622:	46c0      	nop			@ (mov r8, r8)
 800c624:	20000174 	.word	0x20000174

0800c628 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	0002      	movs	r2, r0
 800c630:	6039      	str	r1, [r7, #0]
 800c632:	1dfb      	adds	r3, r7, #7
 800c634:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c636:	1dfb      	adds	r3, r7, #7
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d106      	bne.n	800c64c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	4908      	ldr	r1, [pc, #32]	@ (800c664 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c642:	4b09      	ldr	r3, [pc, #36]	@ (800c668 <USBD_FS_ProductStrDescriptor+0x40>)
 800c644:	0018      	movs	r0, r3
 800c646:	f7ff fe19 	bl	800c27c <USBD_GetString>
 800c64a:	e005      	b.n	800c658 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c64c:	683a      	ldr	r2, [r7, #0]
 800c64e:	4905      	ldr	r1, [pc, #20]	@ (800c664 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c650:	4b05      	ldr	r3, [pc, #20]	@ (800c668 <USBD_FS_ProductStrDescriptor+0x40>)
 800c652:	0018      	movs	r0, r3
 800c654:	f7ff fe12 	bl	800c27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c658:	4b02      	ldr	r3, [pc, #8]	@ (800c664 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c65a:	0018      	movs	r0, r3
 800c65c:	46bd      	mov	sp, r7
 800c65e:	b002      	add	sp, #8
 800c660:	bd80      	pop	{r7, pc}
 800c662:	46c0      	nop			@ (mov r8, r8)
 800c664:	2000149c 	.word	0x2000149c
 800c668:	0800fa50 	.word	0x0800fa50

0800c66c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	0002      	movs	r2, r0
 800c674:	6039      	str	r1, [r7, #0]
 800c676:	1dfb      	adds	r3, r7, #7
 800c678:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	4904      	ldr	r1, [pc, #16]	@ (800c690 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c67e:	4b05      	ldr	r3, [pc, #20]	@ (800c694 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c680:	0018      	movs	r0, r3
 800c682:	f7ff fdfb 	bl	800c27c <USBD_GetString>
  return USBD_StrDesc;
 800c686:	4b02      	ldr	r3, [pc, #8]	@ (800c690 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c688:	0018      	movs	r0, r3
 800c68a:	46bd      	mov	sp, r7
 800c68c:	b002      	add	sp, #8
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	2000149c 	.word	0x2000149c
 800c694:	0800fa68 	.word	0x0800fa68

0800c698 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	0002      	movs	r2, r0
 800c6a0:	6039      	str	r1, [r7, #0]
 800c6a2:	1dfb      	adds	r3, r7, #7
 800c6a4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	221a      	movs	r2, #26
 800c6aa:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6ac:	f000 f84c 	bl	800c748 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c6b0:	4b02      	ldr	r3, [pc, #8]	@ (800c6bc <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c6b2:	0018      	movs	r0, r3
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	b002      	add	sp, #8
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	46c0      	nop			@ (mov r8, r8)
 800c6bc:	20000178 	.word	0x20000178

0800c6c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	0002      	movs	r2, r0
 800c6c8:	6039      	str	r1, [r7, #0]
 800c6ca:	1dfb      	adds	r3, r7, #7
 800c6cc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c6ce:	1dfb      	adds	r3, r7, #7
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d106      	bne.n	800c6e4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	4908      	ldr	r1, [pc, #32]	@ (800c6fc <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c6da:	4b09      	ldr	r3, [pc, #36]	@ (800c700 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c6dc:	0018      	movs	r0, r3
 800c6de:	f7ff fdcd 	bl	800c27c <USBD_GetString>
 800c6e2:	e005      	b.n	800c6f0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	4905      	ldr	r1, [pc, #20]	@ (800c6fc <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c6e8:	4b05      	ldr	r3, [pc, #20]	@ (800c700 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	f7ff fdc6 	bl	800c27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6f0:	4b02      	ldr	r3, [pc, #8]	@ (800c6fc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	b002      	add	sp, #8
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	46c0      	nop			@ (mov r8, r8)
 800c6fc:	2000149c 	.word	0x2000149c
 800c700:	0800fa7c 	.word	0x0800fa7c

0800c704 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	0002      	movs	r2, r0
 800c70c:	6039      	str	r1, [r7, #0]
 800c70e:	1dfb      	adds	r3, r7, #7
 800c710:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c712:	1dfb      	adds	r3, r7, #7
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d106      	bne.n	800c728 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	4908      	ldr	r1, [pc, #32]	@ (800c740 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c71e:	4b09      	ldr	r3, [pc, #36]	@ (800c744 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c720:	0018      	movs	r0, r3
 800c722:	f7ff fdab 	bl	800c27c <USBD_GetString>
 800c726:	e005      	b.n	800c734 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	4905      	ldr	r1, [pc, #20]	@ (800c740 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c72c:	4b05      	ldr	r3, [pc, #20]	@ (800c744 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c72e:	0018      	movs	r0, r3
 800c730:	f7ff fda4 	bl	800c27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c734:	4b02      	ldr	r3, [pc, #8]	@ (800c740 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c736:	0018      	movs	r0, r3
 800c738:	46bd      	mov	sp, r7
 800c73a:	b002      	add	sp, #8
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	46c0      	nop			@ (mov r8, r8)
 800c740:	2000149c 	.word	0x2000149c
 800c744:	0800fa88 	.word	0x0800fa88

0800c748 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c74e:	4b10      	ldr	r3, [pc, #64]	@ (800c790 <Get_SerialNum+0x48>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c754:	4b0f      	ldr	r3, [pc, #60]	@ (800c794 <Get_SerialNum+0x4c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c75a:	4b0f      	ldr	r3, [pc, #60]	@ (800c798 <Get_SerialNum+0x50>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	18d3      	adds	r3, r2, r3
 800c766:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00b      	beq.n	800c786 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c76e:	490b      	ldr	r1, [pc, #44]	@ (800c79c <Get_SerialNum+0x54>)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2208      	movs	r2, #8
 800c774:	0018      	movs	r0, r3
 800c776:	f000 f815 	bl	800c7a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c77a:	4909      	ldr	r1, [pc, #36]	@ (800c7a0 <Get_SerialNum+0x58>)
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2204      	movs	r2, #4
 800c780:	0018      	movs	r0, r3
 800c782:	f000 f80f 	bl	800c7a4 <IntToUnicode>
  }
}
 800c786:	46c0      	nop			@ (mov r8, r8)
 800c788:	46bd      	mov	sp, r7
 800c78a:	b004      	add	sp, #16
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	46c0      	nop			@ (mov r8, r8)
 800c790:	1ffff7ac 	.word	0x1ffff7ac
 800c794:	1ffff7b0 	.word	0x1ffff7b0
 800c798:	1ffff7b4 	.word	0x1ffff7b4
 800c79c:	2000017a 	.word	0x2000017a
 800c7a0:	2000018a 	.word	0x2000018a

0800c7a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b086      	sub	sp, #24
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	1dfb      	adds	r3, r7, #7
 800c7b0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c7b2:	2117      	movs	r1, #23
 800c7b4:	187b      	adds	r3, r7, r1
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c7ba:	187b      	adds	r3, r7, r1
 800c7bc:	2200      	movs	r2, #0
 800c7be:	701a      	strb	r2, [r3, #0]
 800c7c0:	e02f      	b.n	800c822 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	0f1b      	lsrs	r3, r3, #28
 800c7c6:	2b09      	cmp	r3, #9
 800c7c8:	d80d      	bhi.n	800c7e6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	0f1b      	lsrs	r3, r3, #28
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	2317      	movs	r3, #23
 800c7d2:	18fb      	adds	r3, r7, r3
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	0019      	movs	r1, r3
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	185b      	adds	r3, r3, r1
 800c7de:	3230      	adds	r2, #48	@ 0x30
 800c7e0:	b2d2      	uxtb	r2, r2
 800c7e2:	701a      	strb	r2, [r3, #0]
 800c7e4:	e00c      	b.n	800c800 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	0f1b      	lsrs	r3, r3, #28
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	2317      	movs	r3, #23
 800c7ee:	18fb      	adds	r3, r7, r3
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	0019      	movs	r1, r3
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	185b      	adds	r3, r3, r1
 800c7fa:	3237      	adds	r2, #55	@ 0x37
 800c7fc:	b2d2      	uxtb	r2, r2
 800c7fe:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	011b      	lsls	r3, r3, #4
 800c804:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c806:	2117      	movs	r1, #23
 800c808:	187b      	adds	r3, r7, r1
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	3301      	adds	r3, #1
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	18d3      	adds	r3, r2, r3
 800c814:	2200      	movs	r2, #0
 800c816:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c818:	187b      	adds	r3, r7, r1
 800c81a:	781a      	ldrb	r2, [r3, #0]
 800c81c:	187b      	adds	r3, r7, r1
 800c81e:	3201      	adds	r2, #1
 800c820:	701a      	strb	r2, [r3, #0]
 800c822:	2317      	movs	r3, #23
 800c824:	18fa      	adds	r2, r7, r3
 800c826:	1dfb      	adds	r3, r7, #7
 800c828:	7812      	ldrb	r2, [r2, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d3c8      	bcc.n	800c7c2 <IntToUnicode+0x1e>
  }
}
 800c830:	46c0      	nop			@ (mov r8, r8)
 800c832:	46c0      	nop			@ (mov r8, r8)
 800c834:	46bd      	mov	sp, r7
 800c836:	b006      	add	sp, #24
 800c838:	bd80      	pop	{r7, pc}
	...

0800c83c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a0e      	ldr	r2, [pc, #56]	@ (800c884 <HAL_PCD_MspInit+0x48>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d115      	bne.n	800c87a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c84e:	4b0e      	ldr	r3, [pc, #56]	@ (800c888 <HAL_PCD_MspInit+0x4c>)
 800c850:	69da      	ldr	r2, [r3, #28]
 800c852:	4b0d      	ldr	r3, [pc, #52]	@ (800c888 <HAL_PCD_MspInit+0x4c>)
 800c854:	2180      	movs	r1, #128	@ 0x80
 800c856:	0409      	lsls	r1, r1, #16
 800c858:	430a      	orrs	r2, r1
 800c85a:	61da      	str	r2, [r3, #28]
 800c85c:	4b0a      	ldr	r3, [pc, #40]	@ (800c888 <HAL_PCD_MspInit+0x4c>)
 800c85e:	69da      	ldr	r2, [r3, #28]
 800c860:	2380      	movs	r3, #128	@ 0x80
 800c862:	041b      	lsls	r3, r3, #16
 800c864:	4013      	ands	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
 800c868:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c86a:	2200      	movs	r2, #0
 800c86c:	2100      	movs	r1, #0
 800c86e:	201f      	movs	r0, #31
 800c870:	f7f7 f800 	bl	8003874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c874:	201f      	movs	r0, #31
 800c876:	f7f7 f812 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c87a:	46c0      	nop			@ (mov r8, r8)
 800c87c:	46bd      	mov	sp, r7
 800c87e:	b004      	add	sp, #16
 800c880:	bd80      	pop	{r7, pc}
 800c882:	46c0      	nop			@ (mov r8, r8)
 800c884:	40005c00 	.word	0x40005c00
 800c888:	40021000 	.word	0x40021000

0800c88c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	23b6      	movs	r3, #182	@ 0xb6
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	58d2      	ldr	r2, [r2, r3]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	21a6      	movs	r1, #166	@ 0xa6
 800c8a0:	0089      	lsls	r1, r1, #2
 800c8a2:	468c      	mov	ip, r1
 800c8a4:	4463      	add	r3, ip
 800c8a6:	0019      	movs	r1, r3
 800c8a8:	0010      	movs	r0, r2
 800c8aa:	f7fe fc7d 	bl	800b1a8 <USBD_LL_SetupStage>
}
 800c8ae:	46c0      	nop			@ (mov r8, r8)
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	b002      	add	sp, #8
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b6:	b590      	push	{r4, r7, lr}
 800c8b8:	b083      	sub	sp, #12
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	000a      	movs	r2, r1
 800c8c0:	1cfb      	adds	r3, r7, #3
 800c8c2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	23b6      	movs	r3, #182	@ 0xb6
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	58d4      	ldr	r4, [r2, r3]
 800c8cc:	1cfb      	adds	r3, r7, #3
 800c8ce:	781a      	ldrb	r2, [r3, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	23b2      	movs	r3, #178	@ 0xb2
 800c8d4:	0059      	lsls	r1, r3, #1
 800c8d6:	0013      	movs	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	189b      	adds	r3, r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	18c3      	adds	r3, r0, r3
 800c8e0:	185b      	adds	r3, r3, r1
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	1cfb      	adds	r3, r7, #3
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	0019      	movs	r1, r3
 800c8ea:	0020      	movs	r0, r4
 800c8ec:	f7fe fcba 	bl	800b264 <USBD_LL_DataOutStage>
}
 800c8f0:	46c0      	nop			@ (mov r8, r8)
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	b003      	add	sp, #12
 800c8f6:	bd90      	pop	{r4, r7, pc}

0800c8f8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	000a      	movs	r2, r1
 800c902:	1cfb      	adds	r3, r7, #3
 800c904:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	23b6      	movs	r3, #182	@ 0xb6
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	58d0      	ldr	r0, [r2, r3]
 800c90e:	1cfb      	adds	r3, r7, #3
 800c910:	781a      	ldrb	r2, [r3, #0]
 800c912:	6879      	ldr	r1, [r7, #4]
 800c914:	0013      	movs	r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	189b      	adds	r3, r3, r2
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	18cb      	adds	r3, r1, r3
 800c91e:	3324      	adds	r3, #36	@ 0x24
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	1cfb      	adds	r3, r7, #3
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	0019      	movs	r1, r3
 800c928:	f7fe fd1e 	bl	800b368 <USBD_LL_DataInStage>
}
 800c92c:	46c0      	nop			@ (mov r8, r8)
 800c92e:	46bd      	mov	sp, r7
 800c930:	b002      	add	sp, #8
 800c932:	bd80      	pop	{r7, pc}

0800c934 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	23b6      	movs	r3, #182	@ 0xb6
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	58d3      	ldr	r3, [r2, r3]
 800c944:	0018      	movs	r0, r3
 800c946:	f7fe fe55 	bl	800b5f4 <USBD_LL_SOF>
}
 800c94a:	46c0      	nop			@ (mov r8, r8)
 800c94c:	46bd      	mov	sp, r7
 800c94e:	b002      	add	sp, #8
 800c950:	bd80      	pop	{r7, pc}

0800c952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b084      	sub	sp, #16
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c95a:	230f      	movs	r3, #15
 800c95c:	18fb      	adds	r3, r7, r3
 800c95e:	2201      	movs	r2, #1
 800c960:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	795b      	ldrb	r3, [r3, #5]
 800c966:	2b02      	cmp	r3, #2
 800c968:	d001      	beq.n	800c96e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c96a:	f7f6 f8f5 	bl	8002b58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	23b6      	movs	r3, #182	@ 0xb6
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	58d2      	ldr	r2, [r2, r3]
 800c976:	230f      	movs	r3, #15
 800c978:	18fb      	adds	r3, r7, r3
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	0019      	movs	r1, r3
 800c97e:	0010      	movs	r0, r2
 800c980:	f7fe fdf7 	bl	800b572 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	23b6      	movs	r3, #182	@ 0xb6
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	58d3      	ldr	r3, [r2, r3]
 800c98c:	0018      	movs	r0, r3
 800c98e:	f7fe fda8 	bl	800b4e2 <USBD_LL_Reset>
}
 800c992:	46c0      	nop			@ (mov r8, r8)
 800c994:	46bd      	mov	sp, r7
 800c996:	b004      	add	sp, #16
 800c998:	bd80      	pop	{r7, pc}
	...

0800c99c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	23b6      	movs	r3, #182	@ 0xb6
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	58d3      	ldr	r3, [r2, r3]
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	f7fe fdf1 	bl	800b594 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	7a5b      	ldrb	r3, [r3, #9]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d005      	beq.n	800c9c6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9ba:	4b05      	ldr	r3, [pc, #20]	@ (800c9d0 <HAL_PCD_SuspendCallback+0x34>)
 800c9bc:	691a      	ldr	r2, [r3, #16]
 800c9be:	4b04      	ldr	r3, [pc, #16]	@ (800c9d0 <HAL_PCD_SuspendCallback+0x34>)
 800c9c0:	2106      	movs	r1, #6
 800c9c2:	430a      	orrs	r2, r1
 800c9c4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c9c6:	46c0      	nop			@ (mov r8, r8)
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	b002      	add	sp, #8
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	46c0      	nop			@ (mov r8, r8)
 800c9d0:	e000ed00 	.word	0xe000ed00

0800c9d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7a5b      	ldrb	r3, [r3, #9]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d007      	beq.n	800c9f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9e4:	4b09      	ldr	r3, [pc, #36]	@ (800ca0c <HAL_PCD_ResumeCallback+0x38>)
 800c9e6:	691a      	ldr	r2, [r3, #16]
 800c9e8:	4b08      	ldr	r3, [pc, #32]	@ (800ca0c <HAL_PCD_ResumeCallback+0x38>)
 800c9ea:	2106      	movs	r1, #6
 800c9ec:	438a      	bics	r2, r1
 800c9ee:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c9f0:	f000 fa42 	bl	800ce78 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	23b6      	movs	r3, #182	@ 0xb6
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	58d3      	ldr	r3, [r2, r3]
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	f7fe fde1 	bl	800b5c4 <USBD_LL_Resume>
}
 800ca02:	46c0      	nop			@ (mov r8, r8)
 800ca04:	46bd      	mov	sp, r7
 800ca06:	b002      	add	sp, #8
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	46c0      	nop			@ (mov r8, r8)
 800ca0c:	e000ed00 	.word	0xe000ed00

0800ca10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca18:	4a2d      	ldr	r2, [pc, #180]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca1a:	23b6      	movs	r3, #182	@ 0xb6
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	23b0      	movs	r3, #176	@ 0xb0
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4929      	ldr	r1, [pc, #164]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca2a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800ca2c:	4b28      	ldr	r3, [pc, #160]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca2e:	4a29      	ldr	r2, [pc, #164]	@ (800cad4 <USBD_LL_Init+0xc4>)
 800ca30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca32:	4b27      	ldr	r3, [pc, #156]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca34:	2208      	movs	r2, #8
 800ca36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca38:	4b25      	ldr	r3, [pc, #148]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca3e:	4b24      	ldr	r3, [pc, #144]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca40:	2202      	movs	r2, #2
 800ca42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca44:	4b22      	ldr	r3, [pc, #136]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca4a:	4b21      	ldr	r3, [pc, #132]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca50:	4b1f      	ldr	r3, [pc, #124]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca56:	4b1e      	ldr	r3, [pc, #120]	@ (800cad0 <USBD_LL_Init+0xc0>)
 800ca58:	0018      	movs	r0, r3
 800ca5a:	f7f7 fb21 	bl	80040a0 <HAL_PCD_Init>
 800ca5e:	1e03      	subs	r3, r0, #0
 800ca60:	d001      	beq.n	800ca66 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800ca62:	f7f6 f879 	bl	8002b58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	23b0      	movs	r3, #176	@ 0xb0
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	58d0      	ldr	r0, [r2, r3]
 800ca6e:	2318      	movs	r3, #24
 800ca70:	2200      	movs	r2, #0
 800ca72:	2100      	movs	r1, #0
 800ca74:	f7f9 f8d2 	bl	8005c1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	23b0      	movs	r3, #176	@ 0xb0
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	58d0      	ldr	r0, [r2, r3]
 800ca80:	2358      	movs	r3, #88	@ 0x58
 800ca82:	2200      	movs	r2, #0
 800ca84:	2180      	movs	r1, #128	@ 0x80
 800ca86:	f7f9 f8c9 	bl	8005c1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	23b0      	movs	r3, #176	@ 0xb0
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	58d0      	ldr	r0, [r2, r3]
 800ca92:	23c0      	movs	r3, #192	@ 0xc0
 800ca94:	2200      	movs	r2, #0
 800ca96:	2181      	movs	r1, #129	@ 0x81
 800ca98:	f7f9 f8c0 	bl	8005c1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	23b0      	movs	r3, #176	@ 0xb0
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	58d0      	ldr	r0, [r2, r3]
 800caa4:	2388      	movs	r3, #136	@ 0x88
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	2200      	movs	r2, #0
 800caaa:	2101      	movs	r1, #1
 800caac:	f7f9 f8b6 	bl	8005c1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	23b0      	movs	r3, #176	@ 0xb0
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	58d0      	ldr	r0, [r2, r3]
 800cab8:	2380      	movs	r3, #128	@ 0x80
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	2200      	movs	r2, #0
 800cabe:	2182      	movs	r1, #130	@ 0x82
 800cac0:	f7f9 f8ac 	bl	8005c1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	0018      	movs	r0, r3
 800cac8:	46bd      	mov	sp, r7
 800caca:	b002      	add	sp, #8
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	46c0      	nop			@ (mov r8, r8)
 800cad0:	2000169c 	.word	0x2000169c
 800cad4:	40005c00 	.word	0x40005c00

0800cad8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cae0:	210f      	movs	r1, #15
 800cae2:	187b      	adds	r3, r7, r1
 800cae4:	2200      	movs	r2, #0
 800cae6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cae8:	260e      	movs	r6, #14
 800caea:	19bb      	adds	r3, r7, r6
 800caec:	2200      	movs	r2, #0
 800caee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	23b0      	movs	r3, #176	@ 0xb0
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	58d3      	ldr	r3, [r2, r3]
 800caf8:	000d      	movs	r5, r1
 800cafa:	187c      	adds	r4, r7, r1
 800cafc:	0018      	movs	r0, r3
 800cafe:	f7f7 fbc3 	bl	8004288 <HAL_PCD_Start>
 800cb02:	0003      	movs	r3, r0
 800cb04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb06:	19bc      	adds	r4, r7, r6
 800cb08:	197b      	adds	r3, r7, r5
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	f000 f9ba 	bl	800ce86 <USBD_Get_USB_Status>
 800cb12:	0003      	movs	r3, r0
 800cb14:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cb16:	19bb      	adds	r3, r7, r6
 800cb18:	781b      	ldrb	r3, [r3, #0]
}
 800cb1a:	0018      	movs	r0, r3
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	b005      	add	sp, #20
 800cb20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb24:	b085      	sub	sp, #20
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	000c      	movs	r4, r1
 800cb2c:	0010      	movs	r0, r2
 800cb2e:	0019      	movs	r1, r3
 800cb30:	1cfb      	adds	r3, r7, #3
 800cb32:	1c22      	adds	r2, r4, #0
 800cb34:	701a      	strb	r2, [r3, #0]
 800cb36:	1cbb      	adds	r3, r7, #2
 800cb38:	1c02      	adds	r2, r0, #0
 800cb3a:	701a      	strb	r2, [r3, #0]
 800cb3c:	003b      	movs	r3, r7
 800cb3e:	1c0a      	adds	r2, r1, #0
 800cb40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb42:	260f      	movs	r6, #15
 800cb44:	19bb      	adds	r3, r7, r6
 800cb46:	2200      	movs	r2, #0
 800cb48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb4a:	250e      	movs	r5, #14
 800cb4c:	197b      	adds	r3, r7, r5
 800cb4e:	2200      	movs	r2, #0
 800cb50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	23b0      	movs	r3, #176	@ 0xb0
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	58d0      	ldr	r0, [r2, r3]
 800cb5a:	19bc      	adds	r4, r7, r6
 800cb5c:	1cbb      	adds	r3, r7, #2
 800cb5e:	781d      	ldrb	r5, [r3, #0]
 800cb60:	003b      	movs	r3, r7
 800cb62:	881a      	ldrh	r2, [r3, #0]
 800cb64:	1cfb      	adds	r3, r7, #3
 800cb66:	7819      	ldrb	r1, [r3, #0]
 800cb68:	002b      	movs	r3, r5
 800cb6a:	f7f7 fd21 	bl	80045b0 <HAL_PCD_EP_Open>
 800cb6e:	0003      	movs	r3, r0
 800cb70:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb72:	250e      	movs	r5, #14
 800cb74:	197c      	adds	r4, r7, r5
 800cb76:	19bb      	adds	r3, r7, r6
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	0018      	movs	r0, r3
 800cb7c:	f000 f983 	bl	800ce86 <USBD_Get_USB_Status>
 800cb80:	0003      	movs	r3, r0
 800cb82:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cb84:	197b      	adds	r3, r7, r5
 800cb86:	781b      	ldrb	r3, [r3, #0]
}
 800cb88:	0018      	movs	r0, r3
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	b005      	add	sp, #20
 800cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb90 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	000a      	movs	r2, r1
 800cb9a:	1cfb      	adds	r3, r7, #3
 800cb9c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9e:	210f      	movs	r1, #15
 800cba0:	187b      	adds	r3, r7, r1
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba6:	260e      	movs	r6, #14
 800cba8:	19bb      	adds	r3, r7, r6
 800cbaa:	2200      	movs	r2, #0
 800cbac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	23b0      	movs	r3, #176	@ 0xb0
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	58d2      	ldr	r2, [r2, r3]
 800cbb6:	000d      	movs	r5, r1
 800cbb8:	187c      	adds	r4, r7, r1
 800cbba:	1cfb      	adds	r3, r7, #3
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	0019      	movs	r1, r3
 800cbc0:	0010      	movs	r0, r2
 800cbc2:	f7f7 fd64 	bl	800468e <HAL_PCD_EP_Close>
 800cbc6:	0003      	movs	r3, r0
 800cbc8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbca:	19bc      	adds	r4, r7, r6
 800cbcc:	197b      	adds	r3, r7, r5
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	f000 f958 	bl	800ce86 <USBD_Get_USB_Status>
 800cbd6:	0003      	movs	r3, r0
 800cbd8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cbda:	19bb      	adds	r3, r7, r6
 800cbdc:	781b      	ldrb	r3, [r3, #0]
}
 800cbde:	0018      	movs	r0, r3
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	b005      	add	sp, #20
 800cbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbe6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe8:	b085      	sub	sp, #20
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	000a      	movs	r2, r1
 800cbf0:	1cfb      	adds	r3, r7, #3
 800cbf2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf4:	210f      	movs	r1, #15
 800cbf6:	187b      	adds	r3, r7, r1
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbfc:	260e      	movs	r6, #14
 800cbfe:	19bb      	adds	r3, r7, r6
 800cc00:	2200      	movs	r2, #0
 800cc02:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	23b0      	movs	r3, #176	@ 0xb0
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	58d2      	ldr	r2, [r2, r3]
 800cc0c:	000d      	movs	r5, r1
 800cc0e:	187c      	adds	r4, r7, r1
 800cc10:	1cfb      	adds	r3, r7, #3
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	0019      	movs	r1, r3
 800cc16:	0010      	movs	r0, r2
 800cc18:	f7f7 fe16 	bl	8004848 <HAL_PCD_EP_SetStall>
 800cc1c:	0003      	movs	r3, r0
 800cc1e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc20:	19bc      	adds	r4, r7, r6
 800cc22:	197b      	adds	r3, r7, r5
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	0018      	movs	r0, r3
 800cc28:	f000 f92d 	bl	800ce86 <USBD_Get_USB_Status>
 800cc2c:	0003      	movs	r3, r0
 800cc2e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cc30:	19bb      	adds	r3, r7, r6
 800cc32:	781b      	ldrb	r3, [r3, #0]
}
 800cc34:	0018      	movs	r0, r3
 800cc36:	46bd      	mov	sp, r7
 800cc38:	b005      	add	sp, #20
 800cc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	000a      	movs	r2, r1
 800cc46:	1cfb      	adds	r3, r7, #3
 800cc48:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc4a:	210f      	movs	r1, #15
 800cc4c:	187b      	adds	r3, r7, r1
 800cc4e:	2200      	movs	r2, #0
 800cc50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc52:	260e      	movs	r6, #14
 800cc54:	19bb      	adds	r3, r7, r6
 800cc56:	2200      	movs	r2, #0
 800cc58:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	23b0      	movs	r3, #176	@ 0xb0
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	58d2      	ldr	r2, [r2, r3]
 800cc62:	000d      	movs	r5, r1
 800cc64:	187c      	adds	r4, r7, r1
 800cc66:	1cfb      	adds	r3, r7, #3
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	0019      	movs	r1, r3
 800cc6c:	0010      	movs	r0, r2
 800cc6e:	f7f7 fe47 	bl	8004900 <HAL_PCD_EP_ClrStall>
 800cc72:	0003      	movs	r3, r0
 800cc74:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc76:	19bc      	adds	r4, r7, r6
 800cc78:	197b      	adds	r3, r7, r5
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	0018      	movs	r0, r3
 800cc7e:	f000 f902 	bl	800ce86 <USBD_Get_USB_Status>
 800cc82:	0003      	movs	r3, r0
 800cc84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cc86:	19bb      	adds	r3, r7, r6
 800cc88:	781b      	ldrb	r3, [r3, #0]
}
 800cc8a:	0018      	movs	r0, r3
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	b005      	add	sp, #20
 800cc90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc92 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b084      	sub	sp, #16
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	000a      	movs	r2, r1
 800cc9c:	1cfb      	adds	r3, r7, #3
 800cc9e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	23b0      	movs	r3, #176	@ 0xb0
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	58d3      	ldr	r3, [r2, r3]
 800cca8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccaa:	1cfb      	adds	r3, r7, #3
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	b25b      	sxtb	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	da0c      	bge.n	800ccce <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccb4:	1cfb      	adds	r3, r7, #3
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	227f      	movs	r2, #127	@ 0x7f
 800ccba:	401a      	ands	r2, r3
 800ccbc:	68f9      	ldr	r1, [r7, #12]
 800ccbe:	0013      	movs	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	189b      	adds	r3, r3, r2
 800ccc4:	00db      	lsls	r3, r3, #3
 800ccc6:	18cb      	adds	r3, r1, r3
 800ccc8:	3312      	adds	r3, #18
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	e00d      	b.n	800ccea <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccce:	1cfb      	adds	r3, r7, #3
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	227f      	movs	r2, #127	@ 0x7f
 800ccd4:	401a      	ands	r2, r3
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	23a9      	movs	r3, #169	@ 0xa9
 800ccda:	0059      	lsls	r1, r3, #1
 800ccdc:	0013      	movs	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	189b      	adds	r3, r3, r2
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	18c3      	adds	r3, r0, r3
 800cce6:	185b      	adds	r3, r3, r1
 800cce8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccea:	0018      	movs	r0, r3
 800ccec:	46bd      	mov	sp, r7
 800ccee:	b004      	add	sp, #16
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccf4:	b085      	sub	sp, #20
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	000a      	movs	r2, r1
 800ccfc:	1cfb      	adds	r3, r7, #3
 800ccfe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd00:	210f      	movs	r1, #15
 800cd02:	187b      	adds	r3, r7, r1
 800cd04:	2200      	movs	r2, #0
 800cd06:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd08:	260e      	movs	r6, #14
 800cd0a:	19bb      	adds	r3, r7, r6
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	23b0      	movs	r3, #176	@ 0xb0
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	58d2      	ldr	r2, [r2, r3]
 800cd18:	000d      	movs	r5, r1
 800cd1a:	187c      	adds	r4, r7, r1
 800cd1c:	1cfb      	adds	r3, r7, #3
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	0019      	movs	r1, r3
 800cd22:	0010      	movs	r0, r2
 800cd24:	f7f7 fc1a 	bl	800455c <HAL_PCD_SetAddress>
 800cd28:	0003      	movs	r3, r0
 800cd2a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2c:	19bc      	adds	r4, r7, r6
 800cd2e:	197b      	adds	r3, r7, r5
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	0018      	movs	r0, r3
 800cd34:	f000 f8a7 	bl	800ce86 <USBD_Get_USB_Status>
 800cd38:	0003      	movs	r3, r0
 800cd3a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cd3c:	19bb      	adds	r3, r7, r6
 800cd3e:	781b      	ldrb	r3, [r3, #0]
}
 800cd40:	0018      	movs	r0, r3
 800cd42:	46bd      	mov	sp, r7
 800cd44:	b005      	add	sp, #20
 800cd46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	0008      	movs	r0, r1
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	0019      	movs	r1, r3
 800cd56:	230b      	movs	r3, #11
 800cd58:	18fb      	adds	r3, r7, r3
 800cd5a:	1c02      	adds	r2, r0, #0
 800cd5c:	701a      	strb	r2, [r3, #0]
 800cd5e:	2408      	movs	r4, #8
 800cd60:	193b      	adds	r3, r7, r4
 800cd62:	1c0a      	adds	r2, r1, #0
 800cd64:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd66:	2117      	movs	r1, #23
 800cd68:	187b      	adds	r3, r7, r1
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd6e:	2516      	movs	r5, #22
 800cd70:	197b      	adds	r3, r7, r5
 800cd72:	2200      	movs	r2, #0
 800cd74:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	23b0      	movs	r3, #176	@ 0xb0
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	58d0      	ldr	r0, [r2, r3]
 800cd7e:	193b      	adds	r3, r7, r4
 800cd80:	881d      	ldrh	r5, [r3, #0]
 800cd82:	000e      	movs	r6, r1
 800cd84:	187c      	adds	r4, r7, r1
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	230b      	movs	r3, #11
 800cd8a:	18fb      	adds	r3, r7, r3
 800cd8c:	7819      	ldrb	r1, [r3, #0]
 800cd8e:	002b      	movs	r3, r5
 800cd90:	f7f7 fd1e 	bl	80047d0 <HAL_PCD_EP_Transmit>
 800cd94:	0003      	movs	r3, r0
 800cd96:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd98:	2516      	movs	r5, #22
 800cd9a:	197c      	adds	r4, r7, r5
 800cd9c:	19bb      	adds	r3, r7, r6
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	0018      	movs	r0, r3
 800cda2:	f000 f870 	bl	800ce86 <USBD_Get_USB_Status>
 800cda6:	0003      	movs	r3, r0
 800cda8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cdaa:	197b      	adds	r3, r7, r5
 800cdac:	781b      	ldrb	r3, [r3, #0]
}
 800cdae:	0018      	movs	r0, r3
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	b007      	add	sp, #28
 800cdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdb6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb8:	b087      	sub	sp, #28
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	60f8      	str	r0, [r7, #12]
 800cdbe:	0008      	movs	r0, r1
 800cdc0:	607a      	str	r2, [r7, #4]
 800cdc2:	0019      	movs	r1, r3
 800cdc4:	230b      	movs	r3, #11
 800cdc6:	18fb      	adds	r3, r7, r3
 800cdc8:	1c02      	adds	r2, r0, #0
 800cdca:	701a      	strb	r2, [r3, #0]
 800cdcc:	2408      	movs	r4, #8
 800cdce:	193b      	adds	r3, r7, r4
 800cdd0:	1c0a      	adds	r2, r1, #0
 800cdd2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd4:	2117      	movs	r1, #23
 800cdd6:	187b      	adds	r3, r7, r1
 800cdd8:	2200      	movs	r2, #0
 800cdda:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cddc:	2516      	movs	r5, #22
 800cdde:	197b      	adds	r3, r7, r5
 800cde0:	2200      	movs	r2, #0
 800cde2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	23b0      	movs	r3, #176	@ 0xb0
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	58d0      	ldr	r0, [r2, r3]
 800cdec:	193b      	adds	r3, r7, r4
 800cdee:	881d      	ldrh	r5, [r3, #0]
 800cdf0:	000e      	movs	r6, r1
 800cdf2:	187c      	adds	r4, r7, r1
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	230b      	movs	r3, #11
 800cdf8:	18fb      	adds	r3, r7, r3
 800cdfa:	7819      	ldrb	r1, [r3, #0]
 800cdfc:	002b      	movs	r3, r5
 800cdfe:	f7f7 fc97 	bl	8004730 <HAL_PCD_EP_Receive>
 800ce02:	0003      	movs	r3, r0
 800ce04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce06:	2516      	movs	r5, #22
 800ce08:	197c      	adds	r4, r7, r5
 800ce0a:	19bb      	adds	r3, r7, r6
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	0018      	movs	r0, r3
 800ce10:	f000 f839 	bl	800ce86 <USBD_Get_USB_Status>
 800ce14:	0003      	movs	r3, r0
 800ce16:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ce18:	197b      	adds	r3, r7, r5
 800ce1a:	781b      	ldrb	r3, [r3, #0]
}
 800ce1c:	0018      	movs	r0, r3
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	b007      	add	sp, #28
 800ce22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	000a      	movs	r2, r1
 800ce2e:	1cfb      	adds	r3, r7, #3
 800ce30:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	23b0      	movs	r3, #176	@ 0xb0
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	58d2      	ldr	r2, [r2, r3]
 800ce3a:	1cfb      	adds	r3, r7, #3
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	0019      	movs	r1, r3
 800ce40:	0010      	movs	r0, r2
 800ce42:	f7f7 fcac 	bl	800479e <HAL_PCD_EP_GetRxCount>
 800ce46:	0003      	movs	r3, r0
}
 800ce48:	0018      	movs	r0, r3
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	b002      	add	sp, #8
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce58:	4b02      	ldr	r3, [pc, #8]	@ (800ce64 <USBD_static_malloc+0x14>)
}
 800ce5a:	0018      	movs	r0, r3
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	b002      	add	sp, #8
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	46c0      	nop			@ (mov r8, r8)
 800ce64:	20001978 	.word	0x20001978

0800ce68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]

}
 800ce70:	46c0      	nop			@ (mov r8, r8)
 800ce72:	46bd      	mov	sp, r7
 800ce74:	b002      	add	sp, #8
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ce7c:	f7f5 fb48 	bl	8002510 <SystemClock_Config>
}
 800ce80:	46c0      	nop			@ (mov r8, r8)
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b084      	sub	sp, #16
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	0002      	movs	r2, r0
 800ce8e:	1dfb      	adds	r3, r7, #7
 800ce90:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce92:	230f      	movs	r3, #15
 800ce94:	18fb      	adds	r3, r7, r3
 800ce96:	2200      	movs	r2, #0
 800ce98:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800ce9a:	1dfb      	adds	r3, r7, #7
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d017      	beq.n	800ced2 <USBD_Get_USB_Status+0x4c>
 800cea2:	dc1b      	bgt.n	800cedc <USBD_Get_USB_Status+0x56>
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d00f      	beq.n	800cec8 <USBD_Get_USB_Status+0x42>
 800cea8:	dc18      	bgt.n	800cedc <USBD_Get_USB_Status+0x56>
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d002      	beq.n	800ceb4 <USBD_Get_USB_Status+0x2e>
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d005      	beq.n	800cebe <USBD_Get_USB_Status+0x38>
 800ceb2:	e013      	b.n	800cedc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ceb4:	230f      	movs	r3, #15
 800ceb6:	18fb      	adds	r3, r7, r3
 800ceb8:	2200      	movs	r2, #0
 800ceba:	701a      	strb	r2, [r3, #0]
    break;
 800cebc:	e013      	b.n	800cee6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cebe:	230f      	movs	r3, #15
 800cec0:	18fb      	adds	r3, r7, r3
 800cec2:	2202      	movs	r2, #2
 800cec4:	701a      	strb	r2, [r3, #0]
    break;
 800cec6:	e00e      	b.n	800cee6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cec8:	230f      	movs	r3, #15
 800ceca:	18fb      	adds	r3, r7, r3
 800cecc:	2201      	movs	r2, #1
 800cece:	701a      	strb	r2, [r3, #0]
    break;
 800ced0:	e009      	b.n	800cee6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ced2:	230f      	movs	r3, #15
 800ced4:	18fb      	adds	r3, r7, r3
 800ced6:	2202      	movs	r2, #2
 800ced8:	701a      	strb	r2, [r3, #0]
    break;
 800ceda:	e004      	b.n	800cee6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800cedc:	230f      	movs	r3, #15
 800cede:	18fb      	adds	r3, r7, r3
 800cee0:	2202      	movs	r2, #2
 800cee2:	701a      	strb	r2, [r3, #0]
    break;
 800cee4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800cee6:	230f      	movs	r3, #15
 800cee8:	18fb      	adds	r3, r7, r3
 800ceea:	781b      	ldrb	r3, [r3, #0]
}
 800ceec:	0018      	movs	r0, r3
 800ceee:	46bd      	mov	sp, r7
 800cef0:	b004      	add	sp, #16
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	0002      	movs	r2, r0
 800cefc:	1dbb      	adds	r3, r7, #6
 800cefe:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == DW_IRQn_Pin)
 800cf00:	1dbb      	adds	r3, r7, #6
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	2b20      	cmp	r3, #32
 800cf06:	d101      	bne.n	800cf0c <HAL_GPIO_EXTI_Callback+0x18>
    {
        process_deca_irq();
 800cf08:	f000 f804 	bl	800cf14 <process_deca_irq>
    }
}
 800cf0c:	46c0      	nop			@ (mov r8, r8)
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	b002      	add	sp, #8
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800cf18:	e002      	b.n	800cf20 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800cf1a:	4b05      	ldr	r3, [pc, #20]	@ (800cf30 <process_deca_irq+0x1c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 800cf20:	f000 f808 	bl	800cf34 <port_CheckEXT_IRQ>
 800cf24:	1e03      	subs	r3, r0, #0
 800cf26:	d1f8      	bne.n	800cf1a <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800cf28:	46c0      	nop			@ (mov r8, r8)
 800cf2a:	46c0      	nop			@ (mov r8, r8)
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20001b98 	.word	0x20001b98

0800cf34 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 800cf38:	4b04      	ldr	r3, [pc, #16]	@ (800cf4c <port_CheckEXT_IRQ+0x18>)
 800cf3a:	2120      	movs	r1, #32
 800cf3c:	0018      	movs	r0, r3
 800cf3e:	f7f7 f859 	bl	8003ff4 <HAL_GPIO_ReadPin>
 800cf42:	0003      	movs	r3, r0
}
 800cf44:	0018      	movs	r0, r3
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	46c0      	nop			@ (mov r8, r8)
 800cf4c:	48000400 	.word	0x48000400

0800cf50 <__cvt>:
 800cf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf52:	001f      	movs	r7, r3
 800cf54:	2300      	movs	r3, #0
 800cf56:	0016      	movs	r6, r2
 800cf58:	b08b      	sub	sp, #44	@ 0x2c
 800cf5a:	429f      	cmp	r7, r3
 800cf5c:	da04      	bge.n	800cf68 <__cvt+0x18>
 800cf5e:	2180      	movs	r1, #128	@ 0x80
 800cf60:	0609      	lsls	r1, r1, #24
 800cf62:	187b      	adds	r3, r7, r1
 800cf64:	001f      	movs	r7, r3
 800cf66:	232d      	movs	r3, #45	@ 0x2d
 800cf68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cf6a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800cf6c:	7013      	strb	r3, [r2, #0]
 800cf6e:	2320      	movs	r3, #32
 800cf70:	2203      	movs	r2, #3
 800cf72:	439d      	bics	r5, r3
 800cf74:	2d46      	cmp	r5, #70	@ 0x46
 800cf76:	d007      	beq.n	800cf88 <__cvt+0x38>
 800cf78:	002b      	movs	r3, r5
 800cf7a:	3b45      	subs	r3, #69	@ 0x45
 800cf7c:	4259      	negs	r1, r3
 800cf7e:	414b      	adcs	r3, r1
 800cf80:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800cf82:	3a01      	subs	r2, #1
 800cf84:	18cb      	adds	r3, r1, r3
 800cf86:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf88:	ab09      	add	r3, sp, #36	@ 0x24
 800cf8a:	9304      	str	r3, [sp, #16]
 800cf8c:	ab08      	add	r3, sp, #32
 800cf8e:	9303      	str	r3, [sp, #12]
 800cf90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf92:	9200      	str	r2, [sp, #0]
 800cf94:	9302      	str	r3, [sp, #8]
 800cf96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf98:	0032      	movs	r2, r6
 800cf9a:	9301      	str	r3, [sp, #4]
 800cf9c:	003b      	movs	r3, r7
 800cf9e:	f000 fe6d 	bl	800dc7c <_dtoa_r>
 800cfa2:	0004      	movs	r4, r0
 800cfa4:	2d47      	cmp	r5, #71	@ 0x47
 800cfa6:	d11b      	bne.n	800cfe0 <__cvt+0x90>
 800cfa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfaa:	07db      	lsls	r3, r3, #31
 800cfac:	d511      	bpl.n	800cfd2 <__cvt+0x82>
 800cfae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfb0:	18c3      	adds	r3, r0, r3
 800cfb2:	9307      	str	r3, [sp, #28]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	0030      	movs	r0, r6
 800cfba:	0039      	movs	r1, r7
 800cfbc:	f7f3 fa46 	bl	800044c <__aeabi_dcmpeq>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d001      	beq.n	800cfc8 <__cvt+0x78>
 800cfc4:	9b07      	ldr	r3, [sp, #28]
 800cfc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfc8:	2230      	movs	r2, #48	@ 0x30
 800cfca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfcc:	9907      	ldr	r1, [sp, #28]
 800cfce:	428b      	cmp	r3, r1
 800cfd0:	d320      	bcc.n	800d014 <__cvt+0xc4>
 800cfd2:	0020      	movs	r0, r4
 800cfd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cfd8:	1b1b      	subs	r3, r3, r4
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	b00b      	add	sp, #44	@ 0x2c
 800cfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfe0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfe2:	18c3      	adds	r3, r0, r3
 800cfe4:	9307      	str	r3, [sp, #28]
 800cfe6:	2d46      	cmp	r5, #70	@ 0x46
 800cfe8:	d1e4      	bne.n	800cfb4 <__cvt+0x64>
 800cfea:	7803      	ldrb	r3, [r0, #0]
 800cfec:	2b30      	cmp	r3, #48	@ 0x30
 800cfee:	d10c      	bne.n	800d00a <__cvt+0xba>
 800cff0:	2200      	movs	r2, #0
 800cff2:	2300      	movs	r3, #0
 800cff4:	0030      	movs	r0, r6
 800cff6:	0039      	movs	r1, r7
 800cff8:	f7f3 fa28 	bl	800044c <__aeabi_dcmpeq>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d104      	bne.n	800d00a <__cvt+0xba>
 800d000:	2301      	movs	r3, #1
 800d002:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d008:	6013      	str	r3, [r2, #0]
 800d00a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d00c:	9a07      	ldr	r2, [sp, #28]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	18d3      	adds	r3, r2, r3
 800d012:	e7ce      	b.n	800cfb2 <__cvt+0x62>
 800d014:	1c59      	adds	r1, r3, #1
 800d016:	9109      	str	r1, [sp, #36]	@ 0x24
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e7d6      	b.n	800cfca <__cvt+0x7a>

0800d01c <__exponent>:
 800d01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01e:	232b      	movs	r3, #43	@ 0x2b
 800d020:	b085      	sub	sp, #20
 800d022:	0005      	movs	r5, r0
 800d024:	1e0c      	subs	r4, r1, #0
 800d026:	7002      	strb	r2, [r0, #0]
 800d028:	da01      	bge.n	800d02e <__exponent+0x12>
 800d02a:	424c      	negs	r4, r1
 800d02c:	3302      	adds	r3, #2
 800d02e:	706b      	strb	r3, [r5, #1]
 800d030:	2c09      	cmp	r4, #9
 800d032:	dd2c      	ble.n	800d08e <__exponent+0x72>
 800d034:	ab02      	add	r3, sp, #8
 800d036:	1dde      	adds	r6, r3, #7
 800d038:	0020      	movs	r0, r4
 800d03a:	210a      	movs	r1, #10
 800d03c:	f7f3 f9f0 	bl	8000420 <__aeabi_idivmod>
 800d040:	0037      	movs	r7, r6
 800d042:	3130      	adds	r1, #48	@ 0x30
 800d044:	3e01      	subs	r6, #1
 800d046:	0020      	movs	r0, r4
 800d048:	7031      	strb	r1, [r6, #0]
 800d04a:	210a      	movs	r1, #10
 800d04c:	9401      	str	r4, [sp, #4]
 800d04e:	f7f3 f901 	bl	8000254 <__divsi3>
 800d052:	9b01      	ldr	r3, [sp, #4]
 800d054:	0004      	movs	r4, r0
 800d056:	2b63      	cmp	r3, #99	@ 0x63
 800d058:	dcee      	bgt.n	800d038 <__exponent+0x1c>
 800d05a:	1eba      	subs	r2, r7, #2
 800d05c:	1ca8      	adds	r0, r5, #2
 800d05e:	0001      	movs	r1, r0
 800d060:	0013      	movs	r3, r2
 800d062:	3430      	adds	r4, #48	@ 0x30
 800d064:	7014      	strb	r4, [r2, #0]
 800d066:	ac02      	add	r4, sp, #8
 800d068:	3407      	adds	r4, #7
 800d06a:	429c      	cmp	r4, r3
 800d06c:	d80a      	bhi.n	800d084 <__exponent+0x68>
 800d06e:	2300      	movs	r3, #0
 800d070:	4294      	cmp	r4, r2
 800d072:	d303      	bcc.n	800d07c <__exponent+0x60>
 800d074:	3309      	adds	r3, #9
 800d076:	aa02      	add	r2, sp, #8
 800d078:	189b      	adds	r3, r3, r2
 800d07a:	1bdb      	subs	r3, r3, r7
 800d07c:	18c0      	adds	r0, r0, r3
 800d07e:	1b40      	subs	r0, r0, r5
 800d080:	b005      	add	sp, #20
 800d082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d084:	781c      	ldrb	r4, [r3, #0]
 800d086:	3301      	adds	r3, #1
 800d088:	700c      	strb	r4, [r1, #0]
 800d08a:	3101      	adds	r1, #1
 800d08c:	e7eb      	b.n	800d066 <__exponent+0x4a>
 800d08e:	2330      	movs	r3, #48	@ 0x30
 800d090:	18e4      	adds	r4, r4, r3
 800d092:	70ab      	strb	r3, [r5, #2]
 800d094:	1d28      	adds	r0, r5, #4
 800d096:	70ec      	strb	r4, [r5, #3]
 800d098:	e7f1      	b.n	800d07e <__exponent+0x62>
	...

0800d09c <_printf_float>:
 800d09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d09e:	b097      	sub	sp, #92	@ 0x5c
 800d0a0:	000d      	movs	r5, r1
 800d0a2:	920a      	str	r2, [sp, #40]	@ 0x28
 800d0a4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800d0a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0a8:	9009      	str	r0, [sp, #36]	@ 0x24
 800d0aa:	f000 fcd7 	bl	800da5c <_localeconv_r>
 800d0ae:	6803      	ldr	r3, [r0, #0]
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	930d      	str	r3, [sp, #52]	@ 0x34
 800d0b4:	f7f3 f828 	bl	8000108 <strlen>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d0bc:	9314      	str	r3, [sp, #80]	@ 0x50
 800d0be:	7e2b      	ldrb	r3, [r5, #24]
 800d0c0:	2207      	movs	r2, #7
 800d0c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	930e      	str	r3, [sp, #56]	@ 0x38
 800d0c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	05c9      	lsls	r1, r1, #23
 800d0ce:	d545      	bpl.n	800d15c <_printf_float+0xc0>
 800d0d0:	189b      	adds	r3, r3, r2
 800d0d2:	4393      	bics	r3, r2
 800d0d4:	001a      	movs	r2, r3
 800d0d6:	3208      	adds	r2, #8
 800d0d8:	6022      	str	r2, [r4, #0]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	681e      	ldr	r6, [r3, #0]
 800d0de:	685f      	ldr	r7, [r3, #4]
 800d0e0:	007b      	lsls	r3, r7, #1
 800d0e2:	085b      	lsrs	r3, r3, #1
 800d0e4:	9311      	str	r3, [sp, #68]	@ 0x44
 800d0e6:	9610      	str	r6, [sp, #64]	@ 0x40
 800d0e8:	64ae      	str	r6, [r5, #72]	@ 0x48
 800d0ea:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800d0ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d0ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d0f0:	4ba7      	ldr	r3, [pc, #668]	@ (800d390 <_printf_float+0x2f4>)
 800d0f2:	4252      	negs	r2, r2
 800d0f4:	f7f5 f8c8 	bl	8002288 <__aeabi_dcmpun>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d131      	bne.n	800d160 <_printf_float+0xc4>
 800d0fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d0fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d100:	2201      	movs	r2, #1
 800d102:	4ba3      	ldr	r3, [pc, #652]	@ (800d390 <_printf_float+0x2f4>)
 800d104:	4252      	negs	r2, r2
 800d106:	f7f3 f9b1 	bl	800046c <__aeabi_dcmple>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d128      	bne.n	800d160 <_printf_float+0xc4>
 800d10e:	2200      	movs	r2, #0
 800d110:	2300      	movs	r3, #0
 800d112:	0030      	movs	r0, r6
 800d114:	0039      	movs	r1, r7
 800d116:	f7f3 f99f 	bl	8000458 <__aeabi_dcmplt>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d003      	beq.n	800d126 <_printf_float+0x8a>
 800d11e:	002b      	movs	r3, r5
 800d120:	222d      	movs	r2, #45	@ 0x2d
 800d122:	3343      	adds	r3, #67	@ 0x43
 800d124:	701a      	strb	r2, [r3, #0]
 800d126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d128:	4f9a      	ldr	r7, [pc, #616]	@ (800d394 <_printf_float+0x2f8>)
 800d12a:	2b47      	cmp	r3, #71	@ 0x47
 800d12c:	d800      	bhi.n	800d130 <_printf_float+0x94>
 800d12e:	4f9a      	ldr	r7, [pc, #616]	@ (800d398 <_printf_float+0x2fc>)
 800d130:	2303      	movs	r3, #3
 800d132:	2400      	movs	r4, #0
 800d134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d136:	612b      	str	r3, [r5, #16]
 800d138:	3301      	adds	r3, #1
 800d13a:	439a      	bics	r2, r3
 800d13c:	602a      	str	r2, [r5, #0]
 800d13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d140:	0029      	movs	r1, r5
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d148:	aa15      	add	r2, sp, #84	@ 0x54
 800d14a:	f000 f9e5 	bl	800d518 <_printf_common>
 800d14e:	3001      	adds	r0, #1
 800d150:	d000      	beq.n	800d154 <_printf_float+0xb8>
 800d152:	e09e      	b.n	800d292 <_printf_float+0x1f6>
 800d154:	2001      	movs	r0, #1
 800d156:	4240      	negs	r0, r0
 800d158:	b017      	add	sp, #92	@ 0x5c
 800d15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15c:	3307      	adds	r3, #7
 800d15e:	e7b8      	b.n	800d0d2 <_printf_float+0x36>
 800d160:	0032      	movs	r2, r6
 800d162:	003b      	movs	r3, r7
 800d164:	0030      	movs	r0, r6
 800d166:	0039      	movs	r1, r7
 800d168:	f7f5 f88e 	bl	8002288 <__aeabi_dcmpun>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d00b      	beq.n	800d188 <_printf_float+0xec>
 800d170:	2f00      	cmp	r7, #0
 800d172:	da03      	bge.n	800d17c <_printf_float+0xe0>
 800d174:	002b      	movs	r3, r5
 800d176:	222d      	movs	r2, #45	@ 0x2d
 800d178:	3343      	adds	r3, #67	@ 0x43
 800d17a:	701a      	strb	r2, [r3, #0]
 800d17c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d17e:	4f87      	ldr	r7, [pc, #540]	@ (800d39c <_printf_float+0x300>)
 800d180:	2b47      	cmp	r3, #71	@ 0x47
 800d182:	d8d5      	bhi.n	800d130 <_printf_float+0x94>
 800d184:	4f86      	ldr	r7, [pc, #536]	@ (800d3a0 <_printf_float+0x304>)
 800d186:	e7d3      	b.n	800d130 <_printf_float+0x94>
 800d188:	2220      	movs	r2, #32
 800d18a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d18c:	686b      	ldr	r3, [r5, #4]
 800d18e:	4394      	bics	r4, r2
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	d146      	bne.n	800d222 <_printf_float+0x186>
 800d194:	3307      	adds	r3, #7
 800d196:	606b      	str	r3, [r5, #4]
 800d198:	2380      	movs	r3, #128	@ 0x80
 800d19a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	602b      	str	r3, [r5, #0]
 800d1a4:	9206      	str	r2, [sp, #24]
 800d1a6:	aa14      	add	r2, sp, #80	@ 0x50
 800d1a8:	9205      	str	r2, [sp, #20]
 800d1aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d1ac:	a90a      	add	r1, sp, #40	@ 0x28
 800d1ae:	9204      	str	r2, [sp, #16]
 800d1b0:	aa13      	add	r2, sp, #76	@ 0x4c
 800d1b2:	9203      	str	r2, [sp, #12]
 800d1b4:	2223      	movs	r2, #35	@ 0x23
 800d1b6:	1852      	adds	r2, r2, r1
 800d1b8:	9202      	str	r2, [sp, #8]
 800d1ba:	9301      	str	r3, [sp, #4]
 800d1bc:	686b      	ldr	r3, [r5, #4]
 800d1be:	0032      	movs	r2, r6
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1c4:	003b      	movs	r3, r7
 800d1c6:	f7ff fec3 	bl	800cf50 <__cvt>
 800d1ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1cc:	0007      	movs	r7, r0
 800d1ce:	2c47      	cmp	r4, #71	@ 0x47
 800d1d0:	d12d      	bne.n	800d22e <_printf_float+0x192>
 800d1d2:	1cd3      	adds	r3, r2, #3
 800d1d4:	db02      	blt.n	800d1dc <_printf_float+0x140>
 800d1d6:	686b      	ldr	r3, [r5, #4]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	dd47      	ble.n	800d26c <_printf_float+0x1d0>
 800d1dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1de:	3b02      	subs	r3, #2
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1e4:	0028      	movs	r0, r5
 800d1e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d1e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d1ea:	3901      	subs	r1, #1
 800d1ec:	3050      	adds	r0, #80	@ 0x50
 800d1ee:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d1f0:	f7ff ff14 	bl	800d01c <__exponent>
 800d1f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d1f6:	0004      	movs	r4, r0
 800d1f8:	1813      	adds	r3, r2, r0
 800d1fa:	612b      	str	r3, [r5, #16]
 800d1fc:	2a01      	cmp	r2, #1
 800d1fe:	dc02      	bgt.n	800d206 <_printf_float+0x16a>
 800d200:	682a      	ldr	r2, [r5, #0]
 800d202:	07d2      	lsls	r2, r2, #31
 800d204:	d501      	bpl.n	800d20a <_printf_float+0x16e>
 800d206:	3301      	adds	r3, #1
 800d208:	612b      	str	r3, [r5, #16]
 800d20a:	2323      	movs	r3, #35	@ 0x23
 800d20c:	aa0a      	add	r2, sp, #40	@ 0x28
 800d20e:	189b      	adds	r3, r3, r2
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d100      	bne.n	800d218 <_printf_float+0x17c>
 800d216:	e792      	b.n	800d13e <_printf_float+0xa2>
 800d218:	002b      	movs	r3, r5
 800d21a:	222d      	movs	r2, #45	@ 0x2d
 800d21c:	3343      	adds	r3, #67	@ 0x43
 800d21e:	701a      	strb	r2, [r3, #0]
 800d220:	e78d      	b.n	800d13e <_printf_float+0xa2>
 800d222:	2c47      	cmp	r4, #71	@ 0x47
 800d224:	d1b8      	bne.n	800d198 <_printf_float+0xfc>
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1b6      	bne.n	800d198 <_printf_float+0xfc>
 800d22a:	3301      	adds	r3, #1
 800d22c:	e7b3      	b.n	800d196 <_printf_float+0xfa>
 800d22e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d230:	2b65      	cmp	r3, #101	@ 0x65
 800d232:	d9d7      	bls.n	800d1e4 <_printf_float+0x148>
 800d234:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d236:	2b66      	cmp	r3, #102	@ 0x66
 800d238:	d11a      	bne.n	800d270 <_printf_float+0x1d4>
 800d23a:	686b      	ldr	r3, [r5, #4]
 800d23c:	2a00      	cmp	r2, #0
 800d23e:	dd09      	ble.n	800d254 <_printf_float+0x1b8>
 800d240:	612a      	str	r2, [r5, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <_printf_float+0x1b0>
 800d246:	6829      	ldr	r1, [r5, #0]
 800d248:	07c9      	lsls	r1, r1, #31
 800d24a:	d50b      	bpl.n	800d264 <_printf_float+0x1c8>
 800d24c:	3301      	adds	r3, #1
 800d24e:	189b      	adds	r3, r3, r2
 800d250:	612b      	str	r3, [r5, #16]
 800d252:	e007      	b.n	800d264 <_printf_float+0x1c8>
 800d254:	2b00      	cmp	r3, #0
 800d256:	d103      	bne.n	800d260 <_printf_float+0x1c4>
 800d258:	2201      	movs	r2, #1
 800d25a:	6829      	ldr	r1, [r5, #0]
 800d25c:	4211      	tst	r1, r2
 800d25e:	d000      	beq.n	800d262 <_printf_float+0x1c6>
 800d260:	1c9a      	adds	r2, r3, #2
 800d262:	612a      	str	r2, [r5, #16]
 800d264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d266:	2400      	movs	r4, #0
 800d268:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d26a:	e7ce      	b.n	800d20a <_printf_float+0x16e>
 800d26c:	2367      	movs	r3, #103	@ 0x67
 800d26e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d270:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d272:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d274:	4299      	cmp	r1, r3
 800d276:	db06      	blt.n	800d286 <_printf_float+0x1ea>
 800d278:	682b      	ldr	r3, [r5, #0]
 800d27a:	6129      	str	r1, [r5, #16]
 800d27c:	07db      	lsls	r3, r3, #31
 800d27e:	d5f1      	bpl.n	800d264 <_printf_float+0x1c8>
 800d280:	3101      	adds	r1, #1
 800d282:	6129      	str	r1, [r5, #16]
 800d284:	e7ee      	b.n	800d264 <_printf_float+0x1c8>
 800d286:	2201      	movs	r2, #1
 800d288:	2900      	cmp	r1, #0
 800d28a:	dce0      	bgt.n	800d24e <_printf_float+0x1b2>
 800d28c:	1892      	adds	r2, r2, r2
 800d28e:	1a52      	subs	r2, r2, r1
 800d290:	e7dd      	b.n	800d24e <_printf_float+0x1b2>
 800d292:	682a      	ldr	r2, [r5, #0]
 800d294:	0553      	lsls	r3, r2, #21
 800d296:	d408      	bmi.n	800d2aa <_printf_float+0x20e>
 800d298:	692b      	ldr	r3, [r5, #16]
 800d29a:	003a      	movs	r2, r7
 800d29c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d2a2:	47a0      	blx	r4
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	d129      	bne.n	800d2fc <_printf_float+0x260>
 800d2a8:	e754      	b.n	800d154 <_printf_float+0xb8>
 800d2aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2ac:	2b65      	cmp	r3, #101	@ 0x65
 800d2ae:	d800      	bhi.n	800d2b2 <_printf_float+0x216>
 800d2b0:	e0db      	b.n	800d46a <_printf_float+0x3ce>
 800d2b2:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d2b4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f7f3 f8c7 	bl	800044c <__aeabi_dcmpeq>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d033      	beq.n	800d32a <_printf_float+0x28e>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	4a37      	ldr	r2, [pc, #220]	@ (800d3a4 <_printf_float+0x308>)
 800d2c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d2cc:	47a0      	blx	r4
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	d100      	bne.n	800d2d4 <_printf_float+0x238>
 800d2d2:	e73f      	b.n	800d154 <_printf_float+0xb8>
 800d2d4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d2d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d2d8:	42b3      	cmp	r3, r6
 800d2da:	db02      	blt.n	800d2e2 <_printf_float+0x246>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	07db      	lsls	r3, r3, #31
 800d2e0:	d50c      	bpl.n	800d2fc <_printf_float+0x260>
 800d2e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2ec:	47a0      	blx	r4
 800d2ee:	2400      	movs	r4, #0
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d100      	bne.n	800d2f6 <_printf_float+0x25a>
 800d2f4:	e72e      	b.n	800d154 <_printf_float+0xb8>
 800d2f6:	1e73      	subs	r3, r6, #1
 800d2f8:	42a3      	cmp	r3, r4
 800d2fa:	dc0a      	bgt.n	800d312 <_printf_float+0x276>
 800d2fc:	682b      	ldr	r3, [r5, #0]
 800d2fe:	079b      	lsls	r3, r3, #30
 800d300:	d500      	bpl.n	800d304 <_printf_float+0x268>
 800d302:	e106      	b.n	800d512 <_printf_float+0x476>
 800d304:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d306:	68e8      	ldr	r0, [r5, #12]
 800d308:	4298      	cmp	r0, r3
 800d30a:	db00      	blt.n	800d30e <_printf_float+0x272>
 800d30c:	e724      	b.n	800d158 <_printf_float+0xbc>
 800d30e:	0018      	movs	r0, r3
 800d310:	e722      	b.n	800d158 <_printf_float+0xbc>
 800d312:	002a      	movs	r2, r5
 800d314:	2301      	movs	r3, #1
 800d316:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d318:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d31a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d31c:	321a      	adds	r2, #26
 800d31e:	47b8      	blx	r7
 800d320:	3001      	adds	r0, #1
 800d322:	d100      	bne.n	800d326 <_printf_float+0x28a>
 800d324:	e716      	b.n	800d154 <_printf_float+0xb8>
 800d326:	3401      	adds	r4, #1
 800d328:	e7e5      	b.n	800d2f6 <_printf_float+0x25a>
 800d32a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	dc3b      	bgt.n	800d3a8 <_printf_float+0x30c>
 800d330:	2301      	movs	r3, #1
 800d332:	4a1c      	ldr	r2, [pc, #112]	@ (800d3a4 <_printf_float+0x308>)
 800d334:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d338:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d33a:	47a0      	blx	r4
 800d33c:	3001      	adds	r0, #1
 800d33e:	d100      	bne.n	800d342 <_printf_float+0x2a6>
 800d340:	e708      	b.n	800d154 <_printf_float+0xb8>
 800d342:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d346:	4333      	orrs	r3, r6
 800d348:	d102      	bne.n	800d350 <_printf_float+0x2b4>
 800d34a:	682b      	ldr	r3, [r5, #0]
 800d34c:	07db      	lsls	r3, r3, #31
 800d34e:	d5d5      	bpl.n	800d2fc <_printf_float+0x260>
 800d350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d352:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d358:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d35a:	47a0      	blx	r4
 800d35c:	2300      	movs	r3, #0
 800d35e:	3001      	adds	r0, #1
 800d360:	d100      	bne.n	800d364 <_printf_float+0x2c8>
 800d362:	e6f7      	b.n	800d154 <_printf_float+0xb8>
 800d364:	930c      	str	r3, [sp, #48]	@ 0x30
 800d366:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d368:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d36a:	425b      	negs	r3, r3
 800d36c:	4293      	cmp	r3, r2
 800d36e:	dc01      	bgt.n	800d374 <_printf_float+0x2d8>
 800d370:	0033      	movs	r3, r6
 800d372:	e792      	b.n	800d29a <_printf_float+0x1fe>
 800d374:	002a      	movs	r2, r5
 800d376:	2301      	movs	r3, #1
 800d378:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d37c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d37e:	321a      	adds	r2, #26
 800d380:	47a0      	blx	r4
 800d382:	3001      	adds	r0, #1
 800d384:	d100      	bne.n	800d388 <_printf_float+0x2ec>
 800d386:	e6e5      	b.n	800d154 <_printf_float+0xb8>
 800d388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d38a:	3301      	adds	r3, #1
 800d38c:	e7ea      	b.n	800d364 <_printf_float+0x2c8>
 800d38e:	46c0      	nop			@ (mov r8, r8)
 800d390:	7fefffff 	.word	0x7fefffff
 800d394:	0800fc04 	.word	0x0800fc04
 800d398:	0800fc00 	.word	0x0800fc00
 800d39c:	0800fc0c 	.word	0x0800fc0c
 800d3a0:	0800fc08 	.word	0x0800fc08
 800d3a4:	0800fc10 	.word	0x0800fc10
 800d3a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3aa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d3ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800d3ae:	429e      	cmp	r6, r3
 800d3b0:	dd00      	ble.n	800d3b4 <_printf_float+0x318>
 800d3b2:	001e      	movs	r6, r3
 800d3b4:	2e00      	cmp	r6, #0
 800d3b6:	dc31      	bgt.n	800d41c <_printf_float+0x380>
 800d3b8:	43f3      	mvns	r3, r6
 800d3ba:	2400      	movs	r4, #0
 800d3bc:	17db      	asrs	r3, r3, #31
 800d3be:	4033      	ands	r3, r6
 800d3c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800d3c2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d3c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3c6:	1af3      	subs	r3, r6, r3
 800d3c8:	42a3      	cmp	r3, r4
 800d3ca:	dc30      	bgt.n	800d42e <_printf_float+0x392>
 800d3cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	dc38      	bgt.n	800d446 <_printf_float+0x3aa>
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	07db      	lsls	r3, r3, #31
 800d3d8:	d435      	bmi.n	800d446 <_printf_float+0x3aa>
 800d3da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d3dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3e0:	1b9b      	subs	r3, r3, r6
 800d3e2:	1b14      	subs	r4, r2, r4
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	dd00      	ble.n	800d3ea <_printf_float+0x34e>
 800d3e8:	001c      	movs	r4, r3
 800d3ea:	2c00      	cmp	r4, #0
 800d3ec:	dc34      	bgt.n	800d458 <_printf_float+0x3bc>
 800d3ee:	43e3      	mvns	r3, r4
 800d3f0:	2600      	movs	r6, #0
 800d3f2:	17db      	asrs	r3, r3, #31
 800d3f4:	401c      	ands	r4, r3
 800d3f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d3fa:	1ad3      	subs	r3, r2, r3
 800d3fc:	1b1b      	subs	r3, r3, r4
 800d3fe:	42b3      	cmp	r3, r6
 800d400:	dc00      	bgt.n	800d404 <_printf_float+0x368>
 800d402:	e77b      	b.n	800d2fc <_printf_float+0x260>
 800d404:	002a      	movs	r2, r5
 800d406:	2301      	movs	r3, #1
 800d408:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d40a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d40c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d40e:	321a      	adds	r2, #26
 800d410:	47b8      	blx	r7
 800d412:	3001      	adds	r0, #1
 800d414:	d100      	bne.n	800d418 <_printf_float+0x37c>
 800d416:	e69d      	b.n	800d154 <_printf_float+0xb8>
 800d418:	3601      	adds	r6, #1
 800d41a:	e7ec      	b.n	800d3f6 <_printf_float+0x35a>
 800d41c:	0033      	movs	r3, r6
 800d41e:	003a      	movs	r2, r7
 800d420:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d424:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d426:	47a0      	blx	r4
 800d428:	3001      	adds	r0, #1
 800d42a:	d1c5      	bne.n	800d3b8 <_printf_float+0x31c>
 800d42c:	e692      	b.n	800d154 <_printf_float+0xb8>
 800d42e:	002a      	movs	r2, r5
 800d430:	2301      	movs	r3, #1
 800d432:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d434:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d436:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d438:	321a      	adds	r2, #26
 800d43a:	47b0      	blx	r6
 800d43c:	3001      	adds	r0, #1
 800d43e:	d100      	bne.n	800d442 <_printf_float+0x3a6>
 800d440:	e688      	b.n	800d154 <_printf_float+0xb8>
 800d442:	3401      	adds	r4, #1
 800d444:	e7bd      	b.n	800d3c2 <_printf_float+0x326>
 800d446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d448:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d44a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d44c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d44e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d450:	47a0      	blx	r4
 800d452:	3001      	adds	r0, #1
 800d454:	d1c1      	bne.n	800d3da <_printf_float+0x33e>
 800d456:	e67d      	b.n	800d154 <_printf_float+0xb8>
 800d458:	19ba      	adds	r2, r7, r6
 800d45a:	0023      	movs	r3, r4
 800d45c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d45e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d460:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d462:	47b0      	blx	r6
 800d464:	3001      	adds	r0, #1
 800d466:	d1c2      	bne.n	800d3ee <_printf_float+0x352>
 800d468:	e674      	b.n	800d154 <_printf_float+0xb8>
 800d46a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d46c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d46e:	2b01      	cmp	r3, #1
 800d470:	dc02      	bgt.n	800d478 <_printf_float+0x3dc>
 800d472:	2301      	movs	r3, #1
 800d474:	421a      	tst	r2, r3
 800d476:	d039      	beq.n	800d4ec <_printf_float+0x450>
 800d478:	2301      	movs	r3, #1
 800d47a:	003a      	movs	r2, r7
 800d47c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d47e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d480:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d482:	47b0      	blx	r6
 800d484:	3001      	adds	r0, #1
 800d486:	d100      	bne.n	800d48a <_printf_float+0x3ee>
 800d488:	e664      	b.n	800d154 <_printf_float+0xb8>
 800d48a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d48c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d48e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d490:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d492:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d494:	47b0      	blx	r6
 800d496:	3001      	adds	r0, #1
 800d498:	d100      	bne.n	800d49c <_printf_float+0x400>
 800d49a:	e65b      	b.n	800d154 <_printf_float+0xb8>
 800d49c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d49e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d4a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f7f2 ffcf 	bl	800044c <__aeabi_dcmpeq>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d11a      	bne.n	800d4e8 <_printf_float+0x44c>
 800d4b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4b4:	1c7a      	adds	r2, r7, #1
 800d4b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4ba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d4bc:	47b0      	blx	r6
 800d4be:	3001      	adds	r0, #1
 800d4c0:	d10e      	bne.n	800d4e0 <_printf_float+0x444>
 800d4c2:	e647      	b.n	800d154 <_printf_float+0xb8>
 800d4c4:	002a      	movs	r2, r5
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d4ce:	321a      	adds	r2, #26
 800d4d0:	47b8      	blx	r7
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	d100      	bne.n	800d4d8 <_printf_float+0x43c>
 800d4d6:	e63d      	b.n	800d154 <_printf_float+0xb8>
 800d4d8:	3601      	adds	r6, #1
 800d4da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4dc:	429e      	cmp	r6, r3
 800d4de:	dbf1      	blt.n	800d4c4 <_printf_float+0x428>
 800d4e0:	002a      	movs	r2, r5
 800d4e2:	0023      	movs	r3, r4
 800d4e4:	3250      	adds	r2, #80	@ 0x50
 800d4e6:	e6d9      	b.n	800d29c <_printf_float+0x200>
 800d4e8:	2600      	movs	r6, #0
 800d4ea:	e7f6      	b.n	800d4da <_printf_float+0x43e>
 800d4ec:	003a      	movs	r2, r7
 800d4ee:	e7e2      	b.n	800d4b6 <_printf_float+0x41a>
 800d4f0:	002a      	movs	r2, r5
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d4fa:	3219      	adds	r2, #25
 800d4fc:	47b0      	blx	r6
 800d4fe:	3001      	adds	r0, #1
 800d500:	d100      	bne.n	800d504 <_printf_float+0x468>
 800d502:	e627      	b.n	800d154 <_printf_float+0xb8>
 800d504:	3401      	adds	r4, #1
 800d506:	68eb      	ldr	r3, [r5, #12]
 800d508:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d50a:	1a9b      	subs	r3, r3, r2
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	dcef      	bgt.n	800d4f0 <_printf_float+0x454>
 800d510:	e6f8      	b.n	800d304 <_printf_float+0x268>
 800d512:	2400      	movs	r4, #0
 800d514:	e7f7      	b.n	800d506 <_printf_float+0x46a>
 800d516:	46c0      	nop			@ (mov r8, r8)

0800d518 <_printf_common>:
 800d518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d51a:	0016      	movs	r6, r2
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	688a      	ldr	r2, [r1, #8]
 800d520:	690b      	ldr	r3, [r1, #16]
 800d522:	000c      	movs	r4, r1
 800d524:	9000      	str	r0, [sp, #0]
 800d526:	4293      	cmp	r3, r2
 800d528:	da00      	bge.n	800d52c <_printf_common+0x14>
 800d52a:	0013      	movs	r3, r2
 800d52c:	0022      	movs	r2, r4
 800d52e:	6033      	str	r3, [r6, #0]
 800d530:	3243      	adds	r2, #67	@ 0x43
 800d532:	7812      	ldrb	r2, [r2, #0]
 800d534:	2a00      	cmp	r2, #0
 800d536:	d001      	beq.n	800d53c <_printf_common+0x24>
 800d538:	3301      	adds	r3, #1
 800d53a:	6033      	str	r3, [r6, #0]
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	069b      	lsls	r3, r3, #26
 800d540:	d502      	bpl.n	800d548 <_printf_common+0x30>
 800d542:	6833      	ldr	r3, [r6, #0]
 800d544:	3302      	adds	r3, #2
 800d546:	6033      	str	r3, [r6, #0]
 800d548:	6822      	ldr	r2, [r4, #0]
 800d54a:	2306      	movs	r3, #6
 800d54c:	0015      	movs	r5, r2
 800d54e:	401d      	ands	r5, r3
 800d550:	421a      	tst	r2, r3
 800d552:	d027      	beq.n	800d5a4 <_printf_common+0x8c>
 800d554:	0023      	movs	r3, r4
 800d556:	3343      	adds	r3, #67	@ 0x43
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	1e5a      	subs	r2, r3, #1
 800d55c:	4193      	sbcs	r3, r2
 800d55e:	6822      	ldr	r2, [r4, #0]
 800d560:	0692      	lsls	r2, r2, #26
 800d562:	d430      	bmi.n	800d5c6 <_printf_common+0xae>
 800d564:	0022      	movs	r2, r4
 800d566:	9901      	ldr	r1, [sp, #4]
 800d568:	9800      	ldr	r0, [sp, #0]
 800d56a:	9d08      	ldr	r5, [sp, #32]
 800d56c:	3243      	adds	r2, #67	@ 0x43
 800d56e:	47a8      	blx	r5
 800d570:	3001      	adds	r0, #1
 800d572:	d025      	beq.n	800d5c0 <_printf_common+0xa8>
 800d574:	2206      	movs	r2, #6
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	2500      	movs	r5, #0
 800d57a:	4013      	ands	r3, r2
 800d57c:	2b04      	cmp	r3, #4
 800d57e:	d105      	bne.n	800d58c <_printf_common+0x74>
 800d580:	6833      	ldr	r3, [r6, #0]
 800d582:	68e5      	ldr	r5, [r4, #12]
 800d584:	1aed      	subs	r5, r5, r3
 800d586:	43eb      	mvns	r3, r5
 800d588:	17db      	asrs	r3, r3, #31
 800d58a:	401d      	ands	r5, r3
 800d58c:	68a3      	ldr	r3, [r4, #8]
 800d58e:	6922      	ldr	r2, [r4, #16]
 800d590:	4293      	cmp	r3, r2
 800d592:	dd01      	ble.n	800d598 <_printf_common+0x80>
 800d594:	1a9b      	subs	r3, r3, r2
 800d596:	18ed      	adds	r5, r5, r3
 800d598:	2600      	movs	r6, #0
 800d59a:	42b5      	cmp	r5, r6
 800d59c:	d120      	bne.n	800d5e0 <_printf_common+0xc8>
 800d59e:	2000      	movs	r0, #0
 800d5a0:	e010      	b.n	800d5c4 <_printf_common+0xac>
 800d5a2:	3501      	adds	r5, #1
 800d5a4:	68e3      	ldr	r3, [r4, #12]
 800d5a6:	6832      	ldr	r2, [r6, #0]
 800d5a8:	1a9b      	subs	r3, r3, r2
 800d5aa:	42ab      	cmp	r3, r5
 800d5ac:	ddd2      	ble.n	800d554 <_printf_common+0x3c>
 800d5ae:	0022      	movs	r2, r4
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	9901      	ldr	r1, [sp, #4]
 800d5b4:	9800      	ldr	r0, [sp, #0]
 800d5b6:	9f08      	ldr	r7, [sp, #32]
 800d5b8:	3219      	adds	r2, #25
 800d5ba:	47b8      	blx	r7
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d1f0      	bne.n	800d5a2 <_printf_common+0x8a>
 800d5c0:	2001      	movs	r0, #1
 800d5c2:	4240      	negs	r0, r0
 800d5c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5c6:	2030      	movs	r0, #48	@ 0x30
 800d5c8:	18e1      	adds	r1, r4, r3
 800d5ca:	3143      	adds	r1, #67	@ 0x43
 800d5cc:	7008      	strb	r0, [r1, #0]
 800d5ce:	0021      	movs	r1, r4
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	3145      	adds	r1, #69	@ 0x45
 800d5d4:	7809      	ldrb	r1, [r1, #0]
 800d5d6:	18a2      	adds	r2, r4, r2
 800d5d8:	3243      	adds	r2, #67	@ 0x43
 800d5da:	3302      	adds	r3, #2
 800d5dc:	7011      	strb	r1, [r2, #0]
 800d5de:	e7c1      	b.n	800d564 <_printf_common+0x4c>
 800d5e0:	0022      	movs	r2, r4
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	9901      	ldr	r1, [sp, #4]
 800d5e6:	9800      	ldr	r0, [sp, #0]
 800d5e8:	9f08      	ldr	r7, [sp, #32]
 800d5ea:	321a      	adds	r2, #26
 800d5ec:	47b8      	blx	r7
 800d5ee:	3001      	adds	r0, #1
 800d5f0:	d0e6      	beq.n	800d5c0 <_printf_common+0xa8>
 800d5f2:	3601      	adds	r6, #1
 800d5f4:	e7d1      	b.n	800d59a <_printf_common+0x82>
	...

0800d5f8 <_printf_i>:
 800d5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5fa:	b08b      	sub	sp, #44	@ 0x2c
 800d5fc:	9206      	str	r2, [sp, #24]
 800d5fe:	000a      	movs	r2, r1
 800d600:	3243      	adds	r2, #67	@ 0x43
 800d602:	9307      	str	r3, [sp, #28]
 800d604:	9005      	str	r0, [sp, #20]
 800d606:	9203      	str	r2, [sp, #12]
 800d608:	7e0a      	ldrb	r2, [r1, #24]
 800d60a:	000c      	movs	r4, r1
 800d60c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d60e:	2a78      	cmp	r2, #120	@ 0x78
 800d610:	d809      	bhi.n	800d626 <_printf_i+0x2e>
 800d612:	2a62      	cmp	r2, #98	@ 0x62
 800d614:	d80b      	bhi.n	800d62e <_printf_i+0x36>
 800d616:	2a00      	cmp	r2, #0
 800d618:	d100      	bne.n	800d61c <_printf_i+0x24>
 800d61a:	e0ba      	b.n	800d792 <_printf_i+0x19a>
 800d61c:	497a      	ldr	r1, [pc, #488]	@ (800d808 <_printf_i+0x210>)
 800d61e:	9104      	str	r1, [sp, #16]
 800d620:	2a58      	cmp	r2, #88	@ 0x58
 800d622:	d100      	bne.n	800d626 <_printf_i+0x2e>
 800d624:	e08e      	b.n	800d744 <_printf_i+0x14c>
 800d626:	0025      	movs	r5, r4
 800d628:	3542      	adds	r5, #66	@ 0x42
 800d62a:	702a      	strb	r2, [r5, #0]
 800d62c:	e022      	b.n	800d674 <_printf_i+0x7c>
 800d62e:	0010      	movs	r0, r2
 800d630:	3863      	subs	r0, #99	@ 0x63
 800d632:	2815      	cmp	r0, #21
 800d634:	d8f7      	bhi.n	800d626 <_printf_i+0x2e>
 800d636:	f7f2 fd79 	bl	800012c <__gnu_thumb1_case_shi>
 800d63a:	0016      	.short	0x0016
 800d63c:	fff6001f 	.word	0xfff6001f
 800d640:	fff6fff6 	.word	0xfff6fff6
 800d644:	001ffff6 	.word	0x001ffff6
 800d648:	fff6fff6 	.word	0xfff6fff6
 800d64c:	fff6fff6 	.word	0xfff6fff6
 800d650:	0036009f 	.word	0x0036009f
 800d654:	fff6007e 	.word	0xfff6007e
 800d658:	00b0fff6 	.word	0x00b0fff6
 800d65c:	0036fff6 	.word	0x0036fff6
 800d660:	fff6fff6 	.word	0xfff6fff6
 800d664:	0082      	.short	0x0082
 800d666:	0025      	movs	r5, r4
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	3542      	adds	r5, #66	@ 0x42
 800d66c:	1d11      	adds	r1, r2, #4
 800d66e:	6019      	str	r1, [r3, #0]
 800d670:	6813      	ldr	r3, [r2, #0]
 800d672:	702b      	strb	r3, [r5, #0]
 800d674:	2301      	movs	r3, #1
 800d676:	e09e      	b.n	800d7b6 <_printf_i+0x1be>
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	6809      	ldr	r1, [r1, #0]
 800d67c:	1d02      	adds	r2, r0, #4
 800d67e:	060d      	lsls	r5, r1, #24
 800d680:	d50b      	bpl.n	800d69a <_printf_i+0xa2>
 800d682:	6806      	ldr	r6, [r0, #0]
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	2e00      	cmp	r6, #0
 800d688:	da03      	bge.n	800d692 <_printf_i+0x9a>
 800d68a:	232d      	movs	r3, #45	@ 0x2d
 800d68c:	9a03      	ldr	r2, [sp, #12]
 800d68e:	4276      	negs	r6, r6
 800d690:	7013      	strb	r3, [r2, #0]
 800d692:	4b5d      	ldr	r3, [pc, #372]	@ (800d808 <_printf_i+0x210>)
 800d694:	270a      	movs	r7, #10
 800d696:	9304      	str	r3, [sp, #16]
 800d698:	e018      	b.n	800d6cc <_printf_i+0xd4>
 800d69a:	6806      	ldr	r6, [r0, #0]
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	0649      	lsls	r1, r1, #25
 800d6a0:	d5f1      	bpl.n	800d686 <_printf_i+0x8e>
 800d6a2:	b236      	sxth	r6, r6
 800d6a4:	e7ef      	b.n	800d686 <_printf_i+0x8e>
 800d6a6:	6808      	ldr	r0, [r1, #0]
 800d6a8:	6819      	ldr	r1, [r3, #0]
 800d6aa:	c940      	ldmia	r1!, {r6}
 800d6ac:	0605      	lsls	r5, r0, #24
 800d6ae:	d402      	bmi.n	800d6b6 <_printf_i+0xbe>
 800d6b0:	0640      	lsls	r0, r0, #25
 800d6b2:	d500      	bpl.n	800d6b6 <_printf_i+0xbe>
 800d6b4:	b2b6      	uxth	r6, r6
 800d6b6:	6019      	str	r1, [r3, #0]
 800d6b8:	4b53      	ldr	r3, [pc, #332]	@ (800d808 <_printf_i+0x210>)
 800d6ba:	270a      	movs	r7, #10
 800d6bc:	9304      	str	r3, [sp, #16]
 800d6be:	2a6f      	cmp	r2, #111	@ 0x6f
 800d6c0:	d100      	bne.n	800d6c4 <_printf_i+0xcc>
 800d6c2:	3f02      	subs	r7, #2
 800d6c4:	0023      	movs	r3, r4
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	3343      	adds	r3, #67	@ 0x43
 800d6ca:	701a      	strb	r2, [r3, #0]
 800d6cc:	6863      	ldr	r3, [r4, #4]
 800d6ce:	60a3      	str	r3, [r4, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	db06      	blt.n	800d6e2 <_printf_i+0xea>
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	6822      	ldr	r2, [r4, #0]
 800d6d8:	9d03      	ldr	r5, [sp, #12]
 800d6da:	438a      	bics	r2, r1
 800d6dc:	6022      	str	r2, [r4, #0]
 800d6de:	4333      	orrs	r3, r6
 800d6e0:	d00c      	beq.n	800d6fc <_printf_i+0x104>
 800d6e2:	9d03      	ldr	r5, [sp, #12]
 800d6e4:	0030      	movs	r0, r6
 800d6e6:	0039      	movs	r1, r7
 800d6e8:	f7f2 fdb0 	bl	800024c <__aeabi_uidivmod>
 800d6ec:	9b04      	ldr	r3, [sp, #16]
 800d6ee:	3d01      	subs	r5, #1
 800d6f0:	5c5b      	ldrb	r3, [r3, r1]
 800d6f2:	702b      	strb	r3, [r5, #0]
 800d6f4:	0033      	movs	r3, r6
 800d6f6:	0006      	movs	r6, r0
 800d6f8:	429f      	cmp	r7, r3
 800d6fa:	d9f3      	bls.n	800d6e4 <_printf_i+0xec>
 800d6fc:	2f08      	cmp	r7, #8
 800d6fe:	d109      	bne.n	800d714 <_printf_i+0x11c>
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	07db      	lsls	r3, r3, #31
 800d704:	d506      	bpl.n	800d714 <_printf_i+0x11c>
 800d706:	6862      	ldr	r2, [r4, #4]
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	dc02      	bgt.n	800d714 <_printf_i+0x11c>
 800d70e:	2330      	movs	r3, #48	@ 0x30
 800d710:	3d01      	subs	r5, #1
 800d712:	702b      	strb	r3, [r5, #0]
 800d714:	9b03      	ldr	r3, [sp, #12]
 800d716:	1b5b      	subs	r3, r3, r5
 800d718:	6123      	str	r3, [r4, #16]
 800d71a:	9b07      	ldr	r3, [sp, #28]
 800d71c:	0021      	movs	r1, r4
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	9805      	ldr	r0, [sp, #20]
 800d722:	9b06      	ldr	r3, [sp, #24]
 800d724:	aa09      	add	r2, sp, #36	@ 0x24
 800d726:	f7ff fef7 	bl	800d518 <_printf_common>
 800d72a:	3001      	adds	r0, #1
 800d72c:	d148      	bne.n	800d7c0 <_printf_i+0x1c8>
 800d72e:	2001      	movs	r0, #1
 800d730:	4240      	negs	r0, r0
 800d732:	b00b      	add	sp, #44	@ 0x2c
 800d734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d736:	2220      	movs	r2, #32
 800d738:	6809      	ldr	r1, [r1, #0]
 800d73a:	430a      	orrs	r2, r1
 800d73c:	6022      	str	r2, [r4, #0]
 800d73e:	2278      	movs	r2, #120	@ 0x78
 800d740:	4932      	ldr	r1, [pc, #200]	@ (800d80c <_printf_i+0x214>)
 800d742:	9104      	str	r1, [sp, #16]
 800d744:	0021      	movs	r1, r4
 800d746:	3145      	adds	r1, #69	@ 0x45
 800d748:	700a      	strb	r2, [r1, #0]
 800d74a:	6819      	ldr	r1, [r3, #0]
 800d74c:	6822      	ldr	r2, [r4, #0]
 800d74e:	c940      	ldmia	r1!, {r6}
 800d750:	0610      	lsls	r0, r2, #24
 800d752:	d402      	bmi.n	800d75a <_printf_i+0x162>
 800d754:	0650      	lsls	r0, r2, #25
 800d756:	d500      	bpl.n	800d75a <_printf_i+0x162>
 800d758:	b2b6      	uxth	r6, r6
 800d75a:	6019      	str	r1, [r3, #0]
 800d75c:	07d3      	lsls	r3, r2, #31
 800d75e:	d502      	bpl.n	800d766 <_printf_i+0x16e>
 800d760:	2320      	movs	r3, #32
 800d762:	4313      	orrs	r3, r2
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	2e00      	cmp	r6, #0
 800d768:	d001      	beq.n	800d76e <_printf_i+0x176>
 800d76a:	2710      	movs	r7, #16
 800d76c:	e7aa      	b.n	800d6c4 <_printf_i+0xcc>
 800d76e:	2220      	movs	r2, #32
 800d770:	6823      	ldr	r3, [r4, #0]
 800d772:	4393      	bics	r3, r2
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	e7f8      	b.n	800d76a <_printf_i+0x172>
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	680d      	ldr	r5, [r1, #0]
 800d77c:	1d10      	adds	r0, r2, #4
 800d77e:	6949      	ldr	r1, [r1, #20]
 800d780:	6018      	str	r0, [r3, #0]
 800d782:	6813      	ldr	r3, [r2, #0]
 800d784:	062e      	lsls	r6, r5, #24
 800d786:	d501      	bpl.n	800d78c <_printf_i+0x194>
 800d788:	6019      	str	r1, [r3, #0]
 800d78a:	e002      	b.n	800d792 <_printf_i+0x19a>
 800d78c:	066d      	lsls	r5, r5, #25
 800d78e:	d5fb      	bpl.n	800d788 <_printf_i+0x190>
 800d790:	8019      	strh	r1, [r3, #0]
 800d792:	2300      	movs	r3, #0
 800d794:	9d03      	ldr	r5, [sp, #12]
 800d796:	6123      	str	r3, [r4, #16]
 800d798:	e7bf      	b.n	800d71a <_printf_i+0x122>
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	1d11      	adds	r1, r2, #4
 800d79e:	6019      	str	r1, [r3, #0]
 800d7a0:	6815      	ldr	r5, [r2, #0]
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	0028      	movs	r0, r5
 800d7a6:	6862      	ldr	r2, [r4, #4]
 800d7a8:	f000 f9d7 	bl	800db5a <memchr>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d001      	beq.n	800d7b4 <_printf_i+0x1bc>
 800d7b0:	1b40      	subs	r0, r0, r5
 800d7b2:	6060      	str	r0, [r4, #4]
 800d7b4:	6863      	ldr	r3, [r4, #4]
 800d7b6:	6123      	str	r3, [r4, #16]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	9a03      	ldr	r2, [sp, #12]
 800d7bc:	7013      	strb	r3, [r2, #0]
 800d7be:	e7ac      	b.n	800d71a <_printf_i+0x122>
 800d7c0:	002a      	movs	r2, r5
 800d7c2:	6923      	ldr	r3, [r4, #16]
 800d7c4:	9906      	ldr	r1, [sp, #24]
 800d7c6:	9805      	ldr	r0, [sp, #20]
 800d7c8:	9d07      	ldr	r5, [sp, #28]
 800d7ca:	47a8      	blx	r5
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d0ae      	beq.n	800d72e <_printf_i+0x136>
 800d7d0:	6823      	ldr	r3, [r4, #0]
 800d7d2:	079b      	lsls	r3, r3, #30
 800d7d4:	d415      	bmi.n	800d802 <_printf_i+0x20a>
 800d7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7d8:	68e0      	ldr	r0, [r4, #12]
 800d7da:	4298      	cmp	r0, r3
 800d7dc:	daa9      	bge.n	800d732 <_printf_i+0x13a>
 800d7de:	0018      	movs	r0, r3
 800d7e0:	e7a7      	b.n	800d732 <_printf_i+0x13a>
 800d7e2:	0022      	movs	r2, r4
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	9906      	ldr	r1, [sp, #24]
 800d7e8:	9805      	ldr	r0, [sp, #20]
 800d7ea:	9e07      	ldr	r6, [sp, #28]
 800d7ec:	3219      	adds	r2, #25
 800d7ee:	47b0      	blx	r6
 800d7f0:	3001      	adds	r0, #1
 800d7f2:	d09c      	beq.n	800d72e <_printf_i+0x136>
 800d7f4:	3501      	adds	r5, #1
 800d7f6:	68e3      	ldr	r3, [r4, #12]
 800d7f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7fa:	1a9b      	subs	r3, r3, r2
 800d7fc:	42ab      	cmp	r3, r5
 800d7fe:	dcf0      	bgt.n	800d7e2 <_printf_i+0x1ea>
 800d800:	e7e9      	b.n	800d7d6 <_printf_i+0x1de>
 800d802:	2500      	movs	r5, #0
 800d804:	e7f7      	b.n	800d7f6 <_printf_i+0x1fe>
 800d806:	46c0      	nop			@ (mov r8, r8)
 800d808:	0800fc12 	.word	0x0800fc12
 800d80c:	0800fc23 	.word	0x0800fc23

0800d810 <std>:
 800d810:	2300      	movs	r3, #0
 800d812:	b510      	push	{r4, lr}
 800d814:	0004      	movs	r4, r0
 800d816:	6003      	str	r3, [r0, #0]
 800d818:	6043      	str	r3, [r0, #4]
 800d81a:	6083      	str	r3, [r0, #8]
 800d81c:	8181      	strh	r1, [r0, #12]
 800d81e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d820:	81c2      	strh	r2, [r0, #14]
 800d822:	6103      	str	r3, [r0, #16]
 800d824:	6143      	str	r3, [r0, #20]
 800d826:	6183      	str	r3, [r0, #24]
 800d828:	0019      	movs	r1, r3
 800d82a:	2208      	movs	r2, #8
 800d82c:	305c      	adds	r0, #92	@ 0x5c
 800d82e:	f000 f90d 	bl	800da4c <memset>
 800d832:	4b0b      	ldr	r3, [pc, #44]	@ (800d860 <std+0x50>)
 800d834:	6224      	str	r4, [r4, #32]
 800d836:	6263      	str	r3, [r4, #36]	@ 0x24
 800d838:	4b0a      	ldr	r3, [pc, #40]	@ (800d864 <std+0x54>)
 800d83a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d83c:	4b0a      	ldr	r3, [pc, #40]	@ (800d868 <std+0x58>)
 800d83e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d840:	4b0a      	ldr	r3, [pc, #40]	@ (800d86c <std+0x5c>)
 800d842:	6323      	str	r3, [r4, #48]	@ 0x30
 800d844:	4b0a      	ldr	r3, [pc, #40]	@ (800d870 <std+0x60>)
 800d846:	429c      	cmp	r4, r3
 800d848:	d005      	beq.n	800d856 <std+0x46>
 800d84a:	4b0a      	ldr	r3, [pc, #40]	@ (800d874 <std+0x64>)
 800d84c:	429c      	cmp	r4, r3
 800d84e:	d002      	beq.n	800d856 <std+0x46>
 800d850:	4b09      	ldr	r3, [pc, #36]	@ (800d878 <std+0x68>)
 800d852:	429c      	cmp	r4, r3
 800d854:	d103      	bne.n	800d85e <std+0x4e>
 800d856:	0020      	movs	r0, r4
 800d858:	3058      	adds	r0, #88	@ 0x58
 800d85a:	f000 f97b 	bl	800db54 <__retarget_lock_init_recursive>
 800d85e:	bd10      	pop	{r4, pc}
 800d860:	0800d999 	.word	0x0800d999
 800d864:	0800d9c1 	.word	0x0800d9c1
 800d868:	0800d9f9 	.word	0x0800d9f9
 800d86c:	0800da25 	.word	0x0800da25
 800d870:	20001b9c 	.word	0x20001b9c
 800d874:	20001c04 	.word	0x20001c04
 800d878:	20001c6c 	.word	0x20001c6c

0800d87c <stdio_exit_handler>:
 800d87c:	b510      	push	{r4, lr}
 800d87e:	4a03      	ldr	r2, [pc, #12]	@ (800d88c <stdio_exit_handler+0x10>)
 800d880:	4903      	ldr	r1, [pc, #12]	@ (800d890 <stdio_exit_handler+0x14>)
 800d882:	4804      	ldr	r0, [pc, #16]	@ (800d894 <stdio_exit_handler+0x18>)
 800d884:	f000 f86c 	bl	800d960 <_fwalk_sglue>
 800d888:	bd10      	pop	{r4, pc}
 800d88a:	46c0      	nop			@ (mov r8, r8)
 800d88c:	20000194 	.word	0x20000194
 800d890:	0800f2ad 	.word	0x0800f2ad
 800d894:	200001a4 	.word	0x200001a4

0800d898 <cleanup_stdio>:
 800d898:	6841      	ldr	r1, [r0, #4]
 800d89a:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c8 <cleanup_stdio+0x30>)
 800d89c:	b510      	push	{r4, lr}
 800d89e:	0004      	movs	r4, r0
 800d8a0:	4299      	cmp	r1, r3
 800d8a2:	d001      	beq.n	800d8a8 <cleanup_stdio+0x10>
 800d8a4:	f001 fd02 	bl	800f2ac <_fflush_r>
 800d8a8:	68a1      	ldr	r1, [r4, #8]
 800d8aa:	4b08      	ldr	r3, [pc, #32]	@ (800d8cc <cleanup_stdio+0x34>)
 800d8ac:	4299      	cmp	r1, r3
 800d8ae:	d002      	beq.n	800d8b6 <cleanup_stdio+0x1e>
 800d8b0:	0020      	movs	r0, r4
 800d8b2:	f001 fcfb 	bl	800f2ac <_fflush_r>
 800d8b6:	68e1      	ldr	r1, [r4, #12]
 800d8b8:	4b05      	ldr	r3, [pc, #20]	@ (800d8d0 <cleanup_stdio+0x38>)
 800d8ba:	4299      	cmp	r1, r3
 800d8bc:	d002      	beq.n	800d8c4 <cleanup_stdio+0x2c>
 800d8be:	0020      	movs	r0, r4
 800d8c0:	f001 fcf4 	bl	800f2ac <_fflush_r>
 800d8c4:	bd10      	pop	{r4, pc}
 800d8c6:	46c0      	nop			@ (mov r8, r8)
 800d8c8:	20001b9c 	.word	0x20001b9c
 800d8cc:	20001c04 	.word	0x20001c04
 800d8d0:	20001c6c 	.word	0x20001c6c

0800d8d4 <global_stdio_init.part.0>:
 800d8d4:	b510      	push	{r4, lr}
 800d8d6:	4b09      	ldr	r3, [pc, #36]	@ (800d8fc <global_stdio_init.part.0+0x28>)
 800d8d8:	4a09      	ldr	r2, [pc, #36]	@ (800d900 <global_stdio_init.part.0+0x2c>)
 800d8da:	2104      	movs	r1, #4
 800d8dc:	601a      	str	r2, [r3, #0]
 800d8de:	4809      	ldr	r0, [pc, #36]	@ (800d904 <global_stdio_init.part.0+0x30>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f7ff ff95 	bl	800d810 <std>
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	2109      	movs	r1, #9
 800d8ea:	4807      	ldr	r0, [pc, #28]	@ (800d908 <global_stdio_init.part.0+0x34>)
 800d8ec:	f7ff ff90 	bl	800d810 <std>
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	2112      	movs	r1, #18
 800d8f4:	4805      	ldr	r0, [pc, #20]	@ (800d90c <global_stdio_init.part.0+0x38>)
 800d8f6:	f7ff ff8b 	bl	800d810 <std>
 800d8fa:	bd10      	pop	{r4, pc}
 800d8fc:	20001cd4 	.word	0x20001cd4
 800d900:	0800d87d 	.word	0x0800d87d
 800d904:	20001b9c 	.word	0x20001b9c
 800d908:	20001c04 	.word	0x20001c04
 800d90c:	20001c6c 	.word	0x20001c6c

0800d910 <__sfp_lock_acquire>:
 800d910:	b510      	push	{r4, lr}
 800d912:	4802      	ldr	r0, [pc, #8]	@ (800d91c <__sfp_lock_acquire+0xc>)
 800d914:	f000 f91f 	bl	800db56 <__retarget_lock_acquire_recursive>
 800d918:	bd10      	pop	{r4, pc}
 800d91a:	46c0      	nop			@ (mov r8, r8)
 800d91c:	20001cdd 	.word	0x20001cdd

0800d920 <__sfp_lock_release>:
 800d920:	b510      	push	{r4, lr}
 800d922:	4802      	ldr	r0, [pc, #8]	@ (800d92c <__sfp_lock_release+0xc>)
 800d924:	f000 f918 	bl	800db58 <__retarget_lock_release_recursive>
 800d928:	bd10      	pop	{r4, pc}
 800d92a:	46c0      	nop			@ (mov r8, r8)
 800d92c:	20001cdd 	.word	0x20001cdd

0800d930 <__sinit>:
 800d930:	b510      	push	{r4, lr}
 800d932:	0004      	movs	r4, r0
 800d934:	f7ff ffec 	bl	800d910 <__sfp_lock_acquire>
 800d938:	6a23      	ldr	r3, [r4, #32]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d002      	beq.n	800d944 <__sinit+0x14>
 800d93e:	f7ff ffef 	bl	800d920 <__sfp_lock_release>
 800d942:	bd10      	pop	{r4, pc}
 800d944:	4b04      	ldr	r3, [pc, #16]	@ (800d958 <__sinit+0x28>)
 800d946:	6223      	str	r3, [r4, #32]
 800d948:	4b04      	ldr	r3, [pc, #16]	@ (800d95c <__sinit+0x2c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1f6      	bne.n	800d93e <__sinit+0xe>
 800d950:	f7ff ffc0 	bl	800d8d4 <global_stdio_init.part.0>
 800d954:	e7f3      	b.n	800d93e <__sinit+0xe>
 800d956:	46c0      	nop			@ (mov r8, r8)
 800d958:	0800d899 	.word	0x0800d899
 800d95c:	20001cd4 	.word	0x20001cd4

0800d960 <_fwalk_sglue>:
 800d960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d962:	0014      	movs	r4, r2
 800d964:	2600      	movs	r6, #0
 800d966:	9000      	str	r0, [sp, #0]
 800d968:	9101      	str	r1, [sp, #4]
 800d96a:	68a5      	ldr	r5, [r4, #8]
 800d96c:	6867      	ldr	r7, [r4, #4]
 800d96e:	3f01      	subs	r7, #1
 800d970:	d504      	bpl.n	800d97c <_fwalk_sglue+0x1c>
 800d972:	6824      	ldr	r4, [r4, #0]
 800d974:	2c00      	cmp	r4, #0
 800d976:	d1f8      	bne.n	800d96a <_fwalk_sglue+0xa>
 800d978:	0030      	movs	r0, r6
 800d97a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d97c:	89ab      	ldrh	r3, [r5, #12]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d908      	bls.n	800d994 <_fwalk_sglue+0x34>
 800d982:	220e      	movs	r2, #14
 800d984:	5eab      	ldrsh	r3, [r5, r2]
 800d986:	3301      	adds	r3, #1
 800d988:	d004      	beq.n	800d994 <_fwalk_sglue+0x34>
 800d98a:	0029      	movs	r1, r5
 800d98c:	9800      	ldr	r0, [sp, #0]
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	4798      	blx	r3
 800d992:	4306      	orrs	r6, r0
 800d994:	3568      	adds	r5, #104	@ 0x68
 800d996:	e7ea      	b.n	800d96e <_fwalk_sglue+0xe>

0800d998 <__sread>:
 800d998:	b570      	push	{r4, r5, r6, lr}
 800d99a:	000c      	movs	r4, r1
 800d99c:	250e      	movs	r5, #14
 800d99e:	5f49      	ldrsh	r1, [r1, r5]
 800d9a0:	f000 f886 	bl	800dab0 <_read_r>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	db03      	blt.n	800d9b0 <__sread+0x18>
 800d9a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d9aa:	181b      	adds	r3, r3, r0
 800d9ac:	6563      	str	r3, [r4, #84]	@ 0x54
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	4a02      	ldr	r2, [pc, #8]	@ (800d9bc <__sread+0x24>)
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	81a3      	strh	r3, [r4, #12]
 800d9b8:	e7f9      	b.n	800d9ae <__sread+0x16>
 800d9ba:	46c0      	nop			@ (mov r8, r8)
 800d9bc:	ffffefff 	.word	0xffffefff

0800d9c0 <__swrite>:
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c2:	001f      	movs	r7, r3
 800d9c4:	898b      	ldrh	r3, [r1, #12]
 800d9c6:	0005      	movs	r5, r0
 800d9c8:	000c      	movs	r4, r1
 800d9ca:	0016      	movs	r6, r2
 800d9cc:	05db      	lsls	r3, r3, #23
 800d9ce:	d505      	bpl.n	800d9dc <__swrite+0x1c>
 800d9d0:	230e      	movs	r3, #14
 800d9d2:	5ec9      	ldrsh	r1, [r1, r3]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	f000 f856 	bl	800da88 <_lseek_r>
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	4a05      	ldr	r2, [pc, #20]	@ (800d9f4 <__swrite+0x34>)
 800d9e0:	0028      	movs	r0, r5
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	81a3      	strh	r3, [r4, #12]
 800d9e6:	0032      	movs	r2, r6
 800d9e8:	230e      	movs	r3, #14
 800d9ea:	5ee1      	ldrsh	r1, [r4, r3]
 800d9ec:	003b      	movs	r3, r7
 800d9ee:	f000 f873 	bl	800dad8 <_write_r>
 800d9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9f4:	ffffefff 	.word	0xffffefff

0800d9f8 <__sseek>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	000c      	movs	r4, r1
 800d9fc:	250e      	movs	r5, #14
 800d9fe:	5f49      	ldrsh	r1, [r1, r5]
 800da00:	f000 f842 	bl	800da88 <_lseek_r>
 800da04:	89a3      	ldrh	r3, [r4, #12]
 800da06:	1c42      	adds	r2, r0, #1
 800da08:	d103      	bne.n	800da12 <__sseek+0x1a>
 800da0a:	4a05      	ldr	r2, [pc, #20]	@ (800da20 <__sseek+0x28>)
 800da0c:	4013      	ands	r3, r2
 800da0e:	81a3      	strh	r3, [r4, #12]
 800da10:	bd70      	pop	{r4, r5, r6, pc}
 800da12:	2280      	movs	r2, #128	@ 0x80
 800da14:	0152      	lsls	r2, r2, #5
 800da16:	4313      	orrs	r3, r2
 800da18:	81a3      	strh	r3, [r4, #12]
 800da1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800da1c:	e7f8      	b.n	800da10 <__sseek+0x18>
 800da1e:	46c0      	nop			@ (mov r8, r8)
 800da20:	ffffefff 	.word	0xffffefff

0800da24 <__sclose>:
 800da24:	b510      	push	{r4, lr}
 800da26:	230e      	movs	r3, #14
 800da28:	5ec9      	ldrsh	r1, [r1, r3]
 800da2a:	f000 f81b 	bl	800da64 <_close_r>
 800da2e:	bd10      	pop	{r4, pc}

0800da30 <memcmp>:
 800da30:	b530      	push	{r4, r5, lr}
 800da32:	2400      	movs	r4, #0
 800da34:	3901      	subs	r1, #1
 800da36:	42a2      	cmp	r2, r4
 800da38:	d101      	bne.n	800da3e <memcmp+0xe>
 800da3a:	2000      	movs	r0, #0
 800da3c:	e005      	b.n	800da4a <memcmp+0x1a>
 800da3e:	5d03      	ldrb	r3, [r0, r4]
 800da40:	3401      	adds	r4, #1
 800da42:	5d0d      	ldrb	r5, [r1, r4]
 800da44:	42ab      	cmp	r3, r5
 800da46:	d0f6      	beq.n	800da36 <memcmp+0x6>
 800da48:	1b58      	subs	r0, r3, r5
 800da4a:	bd30      	pop	{r4, r5, pc}

0800da4c <memset>:
 800da4c:	0003      	movs	r3, r0
 800da4e:	1882      	adds	r2, r0, r2
 800da50:	4293      	cmp	r3, r2
 800da52:	d100      	bne.n	800da56 <memset+0xa>
 800da54:	4770      	bx	lr
 800da56:	7019      	strb	r1, [r3, #0]
 800da58:	3301      	adds	r3, #1
 800da5a:	e7f9      	b.n	800da50 <memset+0x4>

0800da5c <_localeconv_r>:
 800da5c:	4800      	ldr	r0, [pc, #0]	@ (800da60 <_localeconv_r+0x4>)
 800da5e:	4770      	bx	lr
 800da60:	200002e0 	.word	0x200002e0

0800da64 <_close_r>:
 800da64:	2300      	movs	r3, #0
 800da66:	b570      	push	{r4, r5, r6, lr}
 800da68:	4d06      	ldr	r5, [pc, #24]	@ (800da84 <_close_r+0x20>)
 800da6a:	0004      	movs	r4, r0
 800da6c:	0008      	movs	r0, r1
 800da6e:	602b      	str	r3, [r5, #0]
 800da70:	f7f5 faec 	bl	800304c <_close>
 800da74:	1c43      	adds	r3, r0, #1
 800da76:	d103      	bne.n	800da80 <_close_r+0x1c>
 800da78:	682b      	ldr	r3, [r5, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d000      	beq.n	800da80 <_close_r+0x1c>
 800da7e:	6023      	str	r3, [r4, #0]
 800da80:	bd70      	pop	{r4, r5, r6, pc}
 800da82:	46c0      	nop			@ (mov r8, r8)
 800da84:	20001cd8 	.word	0x20001cd8

0800da88 <_lseek_r>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	0004      	movs	r4, r0
 800da8c:	0008      	movs	r0, r1
 800da8e:	0011      	movs	r1, r2
 800da90:	001a      	movs	r2, r3
 800da92:	2300      	movs	r3, #0
 800da94:	4d05      	ldr	r5, [pc, #20]	@ (800daac <_lseek_r+0x24>)
 800da96:	602b      	str	r3, [r5, #0]
 800da98:	f7f5 faf9 	bl	800308e <_lseek>
 800da9c:	1c43      	adds	r3, r0, #1
 800da9e:	d103      	bne.n	800daa8 <_lseek_r+0x20>
 800daa0:	682b      	ldr	r3, [r5, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d000      	beq.n	800daa8 <_lseek_r+0x20>
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	bd70      	pop	{r4, r5, r6, pc}
 800daaa:	46c0      	nop			@ (mov r8, r8)
 800daac:	20001cd8 	.word	0x20001cd8

0800dab0 <_read_r>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	0004      	movs	r4, r0
 800dab4:	0008      	movs	r0, r1
 800dab6:	0011      	movs	r1, r2
 800dab8:	001a      	movs	r2, r3
 800daba:	2300      	movs	r3, #0
 800dabc:	4d05      	ldr	r5, [pc, #20]	@ (800dad4 <_read_r+0x24>)
 800dabe:	602b      	str	r3, [r5, #0]
 800dac0:	f7f5 fa8b 	bl	8002fda <_read>
 800dac4:	1c43      	adds	r3, r0, #1
 800dac6:	d103      	bne.n	800dad0 <_read_r+0x20>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d000      	beq.n	800dad0 <_read_r+0x20>
 800dace:	6023      	str	r3, [r4, #0]
 800dad0:	bd70      	pop	{r4, r5, r6, pc}
 800dad2:	46c0      	nop			@ (mov r8, r8)
 800dad4:	20001cd8 	.word	0x20001cd8

0800dad8 <_write_r>:
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	0004      	movs	r4, r0
 800dadc:	0008      	movs	r0, r1
 800dade:	0011      	movs	r1, r2
 800dae0:	001a      	movs	r2, r3
 800dae2:	2300      	movs	r3, #0
 800dae4:	4d05      	ldr	r5, [pc, #20]	@ (800dafc <_write_r+0x24>)
 800dae6:	602b      	str	r3, [r5, #0]
 800dae8:	f7f5 fa94 	bl	8003014 <_write>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d103      	bne.n	800daf8 <_write_r+0x20>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d000      	beq.n	800daf8 <_write_r+0x20>
 800daf6:	6023      	str	r3, [r4, #0]
 800daf8:	bd70      	pop	{r4, r5, r6, pc}
 800dafa:	46c0      	nop			@ (mov r8, r8)
 800dafc:	20001cd8 	.word	0x20001cd8

0800db00 <__errno>:
 800db00:	4b01      	ldr	r3, [pc, #4]	@ (800db08 <__errno+0x8>)
 800db02:	6818      	ldr	r0, [r3, #0]
 800db04:	4770      	bx	lr
 800db06:	46c0      	nop			@ (mov r8, r8)
 800db08:	200001a0 	.word	0x200001a0

0800db0c <__libc_init_array>:
 800db0c:	b570      	push	{r4, r5, r6, lr}
 800db0e:	2600      	movs	r6, #0
 800db10:	4c0c      	ldr	r4, [pc, #48]	@ (800db44 <__libc_init_array+0x38>)
 800db12:	4d0d      	ldr	r5, [pc, #52]	@ (800db48 <__libc_init_array+0x3c>)
 800db14:	1b64      	subs	r4, r4, r5
 800db16:	10a4      	asrs	r4, r4, #2
 800db18:	42a6      	cmp	r6, r4
 800db1a:	d109      	bne.n	800db30 <__libc_init_array+0x24>
 800db1c:	2600      	movs	r6, #0
 800db1e:	f001 ff4b 	bl	800f9b8 <_init>
 800db22:	4c0a      	ldr	r4, [pc, #40]	@ (800db4c <__libc_init_array+0x40>)
 800db24:	4d0a      	ldr	r5, [pc, #40]	@ (800db50 <__libc_init_array+0x44>)
 800db26:	1b64      	subs	r4, r4, r5
 800db28:	10a4      	asrs	r4, r4, #2
 800db2a:	42a6      	cmp	r6, r4
 800db2c:	d105      	bne.n	800db3a <__libc_init_array+0x2e>
 800db2e:	bd70      	pop	{r4, r5, r6, pc}
 800db30:	00b3      	lsls	r3, r6, #2
 800db32:	58eb      	ldr	r3, [r5, r3]
 800db34:	4798      	blx	r3
 800db36:	3601      	adds	r6, #1
 800db38:	e7ee      	b.n	800db18 <__libc_init_array+0xc>
 800db3a:	00b3      	lsls	r3, r6, #2
 800db3c:	58eb      	ldr	r3, [r5, r3]
 800db3e:	4798      	blx	r3
 800db40:	3601      	adds	r6, #1
 800db42:	e7f2      	b.n	800db2a <__libc_init_array+0x1e>
 800db44:	0800ff74 	.word	0x0800ff74
 800db48:	0800ff74 	.word	0x0800ff74
 800db4c:	0800ff78 	.word	0x0800ff78
 800db50:	0800ff74 	.word	0x0800ff74

0800db54 <__retarget_lock_init_recursive>:
 800db54:	4770      	bx	lr

0800db56 <__retarget_lock_acquire_recursive>:
 800db56:	4770      	bx	lr

0800db58 <__retarget_lock_release_recursive>:
 800db58:	4770      	bx	lr

0800db5a <memchr>:
 800db5a:	b2c9      	uxtb	r1, r1
 800db5c:	1882      	adds	r2, r0, r2
 800db5e:	4290      	cmp	r0, r2
 800db60:	d101      	bne.n	800db66 <memchr+0xc>
 800db62:	2000      	movs	r0, #0
 800db64:	4770      	bx	lr
 800db66:	7803      	ldrb	r3, [r0, #0]
 800db68:	428b      	cmp	r3, r1
 800db6a:	d0fb      	beq.n	800db64 <memchr+0xa>
 800db6c:	3001      	adds	r0, #1
 800db6e:	e7f6      	b.n	800db5e <memchr+0x4>

0800db70 <quorem>:
 800db70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db72:	6903      	ldr	r3, [r0, #16]
 800db74:	690c      	ldr	r4, [r1, #16]
 800db76:	b089      	sub	sp, #36	@ 0x24
 800db78:	9003      	str	r0, [sp, #12]
 800db7a:	9106      	str	r1, [sp, #24]
 800db7c:	2000      	movs	r0, #0
 800db7e:	42a3      	cmp	r3, r4
 800db80:	db63      	blt.n	800dc4a <quorem+0xda>
 800db82:	000b      	movs	r3, r1
 800db84:	3c01      	subs	r4, #1
 800db86:	3314      	adds	r3, #20
 800db88:	00a5      	lsls	r5, r4, #2
 800db8a:	9304      	str	r3, [sp, #16]
 800db8c:	195b      	adds	r3, r3, r5
 800db8e:	9305      	str	r3, [sp, #20]
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	3314      	adds	r3, #20
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	195d      	adds	r5, r3, r5
 800db98:	9b05      	ldr	r3, [sp, #20]
 800db9a:	682f      	ldr	r7, [r5, #0]
 800db9c:	681e      	ldr	r6, [r3, #0]
 800db9e:	0038      	movs	r0, r7
 800dba0:	3601      	adds	r6, #1
 800dba2:	0031      	movs	r1, r6
 800dba4:	f7f2 facc 	bl	8000140 <__udivsi3>
 800dba8:	9002      	str	r0, [sp, #8]
 800dbaa:	42b7      	cmp	r7, r6
 800dbac:	d327      	bcc.n	800dbfe <quorem+0x8e>
 800dbae:	9b04      	ldr	r3, [sp, #16]
 800dbb0:	2700      	movs	r7, #0
 800dbb2:	469c      	mov	ip, r3
 800dbb4:	9e01      	ldr	r6, [sp, #4]
 800dbb6:	9707      	str	r7, [sp, #28]
 800dbb8:	4662      	mov	r2, ip
 800dbba:	ca08      	ldmia	r2!, {r3}
 800dbbc:	6830      	ldr	r0, [r6, #0]
 800dbbe:	4694      	mov	ip, r2
 800dbc0:	9a02      	ldr	r2, [sp, #8]
 800dbc2:	b299      	uxth	r1, r3
 800dbc4:	4351      	muls	r1, r2
 800dbc6:	0c1b      	lsrs	r3, r3, #16
 800dbc8:	4353      	muls	r3, r2
 800dbca:	19c9      	adds	r1, r1, r7
 800dbcc:	0c0a      	lsrs	r2, r1, #16
 800dbce:	189b      	adds	r3, r3, r2
 800dbd0:	b289      	uxth	r1, r1
 800dbd2:	b282      	uxth	r2, r0
 800dbd4:	1a52      	subs	r2, r2, r1
 800dbd6:	9907      	ldr	r1, [sp, #28]
 800dbd8:	0c1f      	lsrs	r7, r3, #16
 800dbda:	1852      	adds	r2, r2, r1
 800dbdc:	0c00      	lsrs	r0, r0, #16
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	1411      	asrs	r1, r2, #16
 800dbe2:	1ac3      	subs	r3, r0, r3
 800dbe4:	185b      	adds	r3, r3, r1
 800dbe6:	1419      	asrs	r1, r3, #16
 800dbe8:	b292      	uxth	r2, r2
 800dbea:	041b      	lsls	r3, r3, #16
 800dbec:	431a      	orrs	r2, r3
 800dbee:	9b05      	ldr	r3, [sp, #20]
 800dbf0:	9107      	str	r1, [sp, #28]
 800dbf2:	c604      	stmia	r6!, {r2}
 800dbf4:	4563      	cmp	r3, ip
 800dbf6:	d2df      	bcs.n	800dbb8 <quorem+0x48>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d02b      	beq.n	800dc56 <quorem+0xe6>
 800dbfe:	9906      	ldr	r1, [sp, #24]
 800dc00:	9803      	ldr	r0, [sp, #12]
 800dc02:	f001 f9b7 	bl	800ef74 <__mcmp>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	db1e      	blt.n	800dc48 <quorem+0xd8>
 800dc0a:	2600      	movs	r6, #0
 800dc0c:	9d01      	ldr	r5, [sp, #4]
 800dc0e:	9904      	ldr	r1, [sp, #16]
 800dc10:	c901      	ldmia	r1!, {r0}
 800dc12:	682b      	ldr	r3, [r5, #0]
 800dc14:	b287      	uxth	r7, r0
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	1bd2      	subs	r2, r2, r7
 800dc1a:	1992      	adds	r2, r2, r6
 800dc1c:	0c00      	lsrs	r0, r0, #16
 800dc1e:	0c1b      	lsrs	r3, r3, #16
 800dc20:	1a1b      	subs	r3, r3, r0
 800dc22:	1410      	asrs	r0, r2, #16
 800dc24:	181b      	adds	r3, r3, r0
 800dc26:	141e      	asrs	r6, r3, #16
 800dc28:	b292      	uxth	r2, r2
 800dc2a:	041b      	lsls	r3, r3, #16
 800dc2c:	431a      	orrs	r2, r3
 800dc2e:	9b05      	ldr	r3, [sp, #20]
 800dc30:	c504      	stmia	r5!, {r2}
 800dc32:	428b      	cmp	r3, r1
 800dc34:	d2ec      	bcs.n	800dc10 <quorem+0xa0>
 800dc36:	9a01      	ldr	r2, [sp, #4]
 800dc38:	00a3      	lsls	r3, r4, #2
 800dc3a:	18d3      	adds	r3, r2, r3
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	2a00      	cmp	r2, #0
 800dc40:	d014      	beq.n	800dc6c <quorem+0xfc>
 800dc42:	9b02      	ldr	r3, [sp, #8]
 800dc44:	3301      	adds	r3, #1
 800dc46:	9302      	str	r3, [sp, #8]
 800dc48:	9802      	ldr	r0, [sp, #8]
 800dc4a:	b009      	add	sp, #36	@ 0x24
 800dc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc4e:	682b      	ldr	r3, [r5, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d104      	bne.n	800dc5e <quorem+0xee>
 800dc54:	3c01      	subs	r4, #1
 800dc56:	9b01      	ldr	r3, [sp, #4]
 800dc58:	3d04      	subs	r5, #4
 800dc5a:	42ab      	cmp	r3, r5
 800dc5c:	d3f7      	bcc.n	800dc4e <quorem+0xde>
 800dc5e:	9b03      	ldr	r3, [sp, #12]
 800dc60:	611c      	str	r4, [r3, #16]
 800dc62:	e7cc      	b.n	800dbfe <quorem+0x8e>
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	2a00      	cmp	r2, #0
 800dc68:	d104      	bne.n	800dc74 <quorem+0x104>
 800dc6a:	3c01      	subs	r4, #1
 800dc6c:	9a01      	ldr	r2, [sp, #4]
 800dc6e:	3b04      	subs	r3, #4
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d3f7      	bcc.n	800dc64 <quorem+0xf4>
 800dc74:	9b03      	ldr	r3, [sp, #12]
 800dc76:	611c      	str	r4, [r3, #16]
 800dc78:	e7e3      	b.n	800dc42 <quorem+0xd2>
	...

0800dc7c <_dtoa_r>:
 800dc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc7e:	0014      	movs	r4, r2
 800dc80:	001d      	movs	r5, r3
 800dc82:	69c6      	ldr	r6, [r0, #28]
 800dc84:	b09d      	sub	sp, #116	@ 0x74
 800dc86:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc88:	950b      	str	r5, [sp, #44]	@ 0x2c
 800dc8a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800dc8c:	9003      	str	r0, [sp, #12]
 800dc8e:	2e00      	cmp	r6, #0
 800dc90:	d10f      	bne.n	800dcb2 <_dtoa_r+0x36>
 800dc92:	2010      	movs	r0, #16
 800dc94:	f000 fe2c 	bl	800e8f0 <malloc>
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	1e02      	subs	r2, r0, #0
 800dc9c:	61d8      	str	r0, [r3, #28]
 800dc9e:	d104      	bne.n	800dcaa <_dtoa_r+0x2e>
 800dca0:	21ef      	movs	r1, #239	@ 0xef
 800dca2:	4bc7      	ldr	r3, [pc, #796]	@ (800dfc0 <_dtoa_r+0x344>)
 800dca4:	48c7      	ldr	r0, [pc, #796]	@ (800dfc4 <_dtoa_r+0x348>)
 800dca6:	f001 fb49 	bl	800f33c <__assert_func>
 800dcaa:	6046      	str	r6, [r0, #4]
 800dcac:	6086      	str	r6, [r0, #8]
 800dcae:	6006      	str	r6, [r0, #0]
 800dcb0:	60c6      	str	r6, [r0, #12]
 800dcb2:	9b03      	ldr	r3, [sp, #12]
 800dcb4:	69db      	ldr	r3, [r3, #28]
 800dcb6:	6819      	ldr	r1, [r3, #0]
 800dcb8:	2900      	cmp	r1, #0
 800dcba:	d00b      	beq.n	800dcd4 <_dtoa_r+0x58>
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	4093      	lsls	r3, r2
 800dcc2:	604a      	str	r2, [r1, #4]
 800dcc4:	608b      	str	r3, [r1, #8]
 800dcc6:	9803      	ldr	r0, [sp, #12]
 800dcc8:	f000 ff12 	bl	800eaf0 <_Bfree>
 800dccc:	2200      	movs	r2, #0
 800dcce:	9b03      	ldr	r3, [sp, #12]
 800dcd0:	69db      	ldr	r3, [r3, #28]
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	2d00      	cmp	r5, #0
 800dcd6:	da1e      	bge.n	800dd16 <_dtoa_r+0x9a>
 800dcd8:	2301      	movs	r3, #1
 800dcda:	603b      	str	r3, [r7, #0]
 800dcdc:	006b      	lsls	r3, r5, #1
 800dcde:	085b      	lsrs	r3, r3, #1
 800dce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dce2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800dce4:	4bb8      	ldr	r3, [pc, #736]	@ (800dfc8 <_dtoa_r+0x34c>)
 800dce6:	4ab8      	ldr	r2, [pc, #736]	@ (800dfc8 <_dtoa_r+0x34c>)
 800dce8:	403b      	ands	r3, r7
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d116      	bne.n	800dd1c <_dtoa_r+0xa0>
 800dcee:	4bb7      	ldr	r3, [pc, #732]	@ (800dfcc <_dtoa_r+0x350>)
 800dcf0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dcf2:	6013      	str	r3, [r2, #0]
 800dcf4:	033b      	lsls	r3, r7, #12
 800dcf6:	0b1b      	lsrs	r3, r3, #12
 800dcf8:	4323      	orrs	r3, r4
 800dcfa:	d101      	bne.n	800dd00 <_dtoa_r+0x84>
 800dcfc:	f000 fd80 	bl	800e800 <_dtoa_r+0xb84>
 800dd00:	4bb3      	ldr	r3, [pc, #716]	@ (800dfd0 <_dtoa_r+0x354>)
 800dd02:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dd04:	9308      	str	r3, [sp, #32]
 800dd06:	2a00      	cmp	r2, #0
 800dd08:	d002      	beq.n	800dd10 <_dtoa_r+0x94>
 800dd0a:	4bb2      	ldr	r3, [pc, #712]	@ (800dfd4 <_dtoa_r+0x358>)
 800dd0c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dd0e:	6013      	str	r3, [r2, #0]
 800dd10:	9808      	ldr	r0, [sp, #32]
 800dd12:	b01d      	add	sp, #116	@ 0x74
 800dd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd16:	2300      	movs	r3, #0
 800dd18:	603b      	str	r3, [r7, #0]
 800dd1a:	e7e2      	b.n	800dce2 <_dtoa_r+0x66>
 800dd1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd20:	9212      	str	r2, [sp, #72]	@ 0x48
 800dd22:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd24:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dd26:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dd28:	2200      	movs	r2, #0
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	f7f2 fb8e 	bl	800044c <__aeabi_dcmpeq>
 800dd30:	1e06      	subs	r6, r0, #0
 800dd32:	d00b      	beq.n	800dd4c <_dtoa_r+0xd0>
 800dd34:	2301      	movs	r3, #1
 800dd36:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dd38:	6013      	str	r3, [r2, #0]
 800dd3a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d002      	beq.n	800dd46 <_dtoa_r+0xca>
 800dd40:	4ba5      	ldr	r3, [pc, #660]	@ (800dfd8 <_dtoa_r+0x35c>)
 800dd42:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	4ba5      	ldr	r3, [pc, #660]	@ (800dfdc <_dtoa_r+0x360>)
 800dd48:	9308      	str	r3, [sp, #32]
 800dd4a:	e7e1      	b.n	800dd10 <_dtoa_r+0x94>
 800dd4c:	ab1a      	add	r3, sp, #104	@ 0x68
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	9803      	ldr	r0, [sp, #12]
 800dd56:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dd58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd5a:	f001 f9c1 	bl	800f0e0 <__d2b>
 800dd5e:	007a      	lsls	r2, r7, #1
 800dd60:	9005      	str	r0, [sp, #20]
 800dd62:	0d52      	lsrs	r2, r2, #21
 800dd64:	d100      	bne.n	800dd68 <_dtoa_r+0xec>
 800dd66:	e07b      	b.n	800de60 <_dtoa_r+0x1e4>
 800dd68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd6a:	9618      	str	r6, [sp, #96]	@ 0x60
 800dd6c:	0319      	lsls	r1, r3, #12
 800dd6e:	4b9c      	ldr	r3, [pc, #624]	@ (800dfe0 <_dtoa_r+0x364>)
 800dd70:	0b09      	lsrs	r1, r1, #12
 800dd72:	430b      	orrs	r3, r1
 800dd74:	499b      	ldr	r1, [pc, #620]	@ (800dfe4 <_dtoa_r+0x368>)
 800dd76:	1857      	adds	r7, r2, r1
 800dd78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dd7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dd7c:	0019      	movs	r1, r3
 800dd7e:	2200      	movs	r2, #0
 800dd80:	4b99      	ldr	r3, [pc, #612]	@ (800dfe8 <_dtoa_r+0x36c>)
 800dd82:	f7f3 fe77 	bl	8001a74 <__aeabi_dsub>
 800dd86:	4a99      	ldr	r2, [pc, #612]	@ (800dfec <_dtoa_r+0x370>)
 800dd88:	4b99      	ldr	r3, [pc, #612]	@ (800dff0 <_dtoa_r+0x374>)
 800dd8a:	f7f3 fb8d 	bl	80014a8 <__aeabi_dmul>
 800dd8e:	4a99      	ldr	r2, [pc, #612]	@ (800dff4 <_dtoa_r+0x378>)
 800dd90:	4b99      	ldr	r3, [pc, #612]	@ (800dff8 <_dtoa_r+0x37c>)
 800dd92:	f7f2 fb89 	bl	80004a8 <__aeabi_dadd>
 800dd96:	0004      	movs	r4, r0
 800dd98:	0038      	movs	r0, r7
 800dd9a:	000d      	movs	r5, r1
 800dd9c:	f7f4 fad2 	bl	8002344 <__aeabi_i2d>
 800dda0:	4a96      	ldr	r2, [pc, #600]	@ (800dffc <_dtoa_r+0x380>)
 800dda2:	4b97      	ldr	r3, [pc, #604]	@ (800e000 <_dtoa_r+0x384>)
 800dda4:	f7f3 fb80 	bl	80014a8 <__aeabi_dmul>
 800dda8:	0002      	movs	r2, r0
 800ddaa:	000b      	movs	r3, r1
 800ddac:	0020      	movs	r0, r4
 800ddae:	0029      	movs	r1, r5
 800ddb0:	f7f2 fb7a 	bl	80004a8 <__aeabi_dadd>
 800ddb4:	0004      	movs	r4, r0
 800ddb6:	000d      	movs	r5, r1
 800ddb8:	f7f4 fa88 	bl	80022cc <__aeabi_d2iz>
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	9004      	str	r0, [sp, #16]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	0020      	movs	r0, r4
 800ddc4:	0029      	movs	r1, r5
 800ddc6:	f7f2 fb47 	bl	8000458 <__aeabi_dcmplt>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d00b      	beq.n	800dde6 <_dtoa_r+0x16a>
 800ddce:	9804      	ldr	r0, [sp, #16]
 800ddd0:	f7f4 fab8 	bl	8002344 <__aeabi_i2d>
 800ddd4:	002b      	movs	r3, r5
 800ddd6:	0022      	movs	r2, r4
 800ddd8:	f7f2 fb38 	bl	800044c <__aeabi_dcmpeq>
 800dddc:	4243      	negs	r3, r0
 800ddde:	4158      	adcs	r0, r3
 800dde0:	9b04      	ldr	r3, [sp, #16]
 800dde2:	1a1b      	subs	r3, r3, r0
 800dde4:	9304      	str	r3, [sp, #16]
 800dde6:	2301      	movs	r3, #1
 800dde8:	9315      	str	r3, [sp, #84]	@ 0x54
 800ddea:	9b04      	ldr	r3, [sp, #16]
 800ddec:	2b16      	cmp	r3, #22
 800ddee:	d810      	bhi.n	800de12 <_dtoa_r+0x196>
 800ddf0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ddf2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ddf4:	9a04      	ldr	r2, [sp, #16]
 800ddf6:	4b83      	ldr	r3, [pc, #524]	@ (800e004 <_dtoa_r+0x388>)
 800ddf8:	00d2      	lsls	r2, r2, #3
 800ddfa:	189b      	adds	r3, r3, r2
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	f7f2 fb2a 	bl	8000458 <__aeabi_dcmplt>
 800de04:	2800      	cmp	r0, #0
 800de06:	d047      	beq.n	800de98 <_dtoa_r+0x21c>
 800de08:	9b04      	ldr	r3, [sp, #16]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	9304      	str	r3, [sp, #16]
 800de0e:	2300      	movs	r3, #0
 800de10:	9315      	str	r3, [sp, #84]	@ 0x54
 800de12:	2200      	movs	r2, #0
 800de14:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800de16:	9206      	str	r2, [sp, #24]
 800de18:	1bdb      	subs	r3, r3, r7
 800de1a:	1e5a      	subs	r2, r3, #1
 800de1c:	d53e      	bpl.n	800de9c <_dtoa_r+0x220>
 800de1e:	2201      	movs	r2, #1
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	9306      	str	r3, [sp, #24]
 800de24:	2300      	movs	r3, #0
 800de26:	930d      	str	r3, [sp, #52]	@ 0x34
 800de28:	9b04      	ldr	r3, [sp, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	db38      	blt.n	800dea0 <_dtoa_r+0x224>
 800de2e:	9a04      	ldr	r2, [sp, #16]
 800de30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de32:	4694      	mov	ip, r2
 800de34:	4463      	add	r3, ip
 800de36:	930d      	str	r3, [sp, #52]	@ 0x34
 800de38:	2300      	movs	r3, #0
 800de3a:	9214      	str	r2, [sp, #80]	@ 0x50
 800de3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de3e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800de40:	2401      	movs	r4, #1
 800de42:	2b09      	cmp	r3, #9
 800de44:	d862      	bhi.n	800df0c <_dtoa_r+0x290>
 800de46:	2b05      	cmp	r3, #5
 800de48:	dd02      	ble.n	800de50 <_dtoa_r+0x1d4>
 800de4a:	2400      	movs	r4, #0
 800de4c:	3b04      	subs	r3, #4
 800de4e:	9322      	str	r3, [sp, #136]	@ 0x88
 800de50:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800de52:	1e98      	subs	r0, r3, #2
 800de54:	2803      	cmp	r0, #3
 800de56:	d863      	bhi.n	800df20 <_dtoa_r+0x2a4>
 800de58:	f7f2 f95e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800de5c:	2b385654 	.word	0x2b385654
 800de60:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800de62:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800de64:	18f6      	adds	r6, r6, r3
 800de66:	4b68      	ldr	r3, [pc, #416]	@ (800e008 <_dtoa_r+0x38c>)
 800de68:	18f2      	adds	r2, r6, r3
 800de6a:	2a20      	cmp	r2, #32
 800de6c:	dd0f      	ble.n	800de8e <_dtoa_r+0x212>
 800de6e:	2340      	movs	r3, #64	@ 0x40
 800de70:	1a9b      	subs	r3, r3, r2
 800de72:	409f      	lsls	r7, r3
 800de74:	4b65      	ldr	r3, [pc, #404]	@ (800e00c <_dtoa_r+0x390>)
 800de76:	0038      	movs	r0, r7
 800de78:	18f3      	adds	r3, r6, r3
 800de7a:	40dc      	lsrs	r4, r3
 800de7c:	4320      	orrs	r0, r4
 800de7e:	f7f4 fa8f 	bl	80023a0 <__aeabi_ui2d>
 800de82:	2201      	movs	r2, #1
 800de84:	4b62      	ldr	r3, [pc, #392]	@ (800e010 <_dtoa_r+0x394>)
 800de86:	1e77      	subs	r7, r6, #1
 800de88:	18cb      	adds	r3, r1, r3
 800de8a:	9218      	str	r2, [sp, #96]	@ 0x60
 800de8c:	e776      	b.n	800dd7c <_dtoa_r+0x100>
 800de8e:	2320      	movs	r3, #32
 800de90:	0020      	movs	r0, r4
 800de92:	1a9b      	subs	r3, r3, r2
 800de94:	4098      	lsls	r0, r3
 800de96:	e7f2      	b.n	800de7e <_dtoa_r+0x202>
 800de98:	9015      	str	r0, [sp, #84]	@ 0x54
 800de9a:	e7ba      	b.n	800de12 <_dtoa_r+0x196>
 800de9c:	920d      	str	r2, [sp, #52]	@ 0x34
 800de9e:	e7c3      	b.n	800de28 <_dtoa_r+0x1ac>
 800dea0:	9b06      	ldr	r3, [sp, #24]
 800dea2:	9a04      	ldr	r2, [sp, #16]
 800dea4:	1a9b      	subs	r3, r3, r2
 800dea6:	9306      	str	r3, [sp, #24]
 800dea8:	4253      	negs	r3, r2
 800deaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800deac:	2300      	movs	r3, #0
 800deae:	9314      	str	r3, [sp, #80]	@ 0x50
 800deb0:	e7c5      	b.n	800de3e <_dtoa_r+0x1c2>
 800deb2:	2301      	movs	r3, #1
 800deb4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800deb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800deb8:	4694      	mov	ip, r2
 800deba:	9b04      	ldr	r3, [sp, #16]
 800debc:	4463      	add	r3, ip
 800debe:	930e      	str	r3, [sp, #56]	@ 0x38
 800dec0:	3301      	adds	r3, #1
 800dec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dc08      	bgt.n	800deda <_dtoa_r+0x25e>
 800dec8:	2301      	movs	r3, #1
 800deca:	e006      	b.n	800deda <_dtoa_r+0x25e>
 800decc:	2301      	movs	r3, #1
 800dece:	9310      	str	r3, [sp, #64]	@ 0x40
 800ded0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	dd28      	ble.n	800df28 <_dtoa_r+0x2ac>
 800ded6:	930e      	str	r3, [sp, #56]	@ 0x38
 800ded8:	9309      	str	r3, [sp, #36]	@ 0x24
 800deda:	9a03      	ldr	r2, [sp, #12]
 800dedc:	2100      	movs	r1, #0
 800dede:	69d0      	ldr	r0, [r2, #28]
 800dee0:	2204      	movs	r2, #4
 800dee2:	0015      	movs	r5, r2
 800dee4:	3514      	adds	r5, #20
 800dee6:	429d      	cmp	r5, r3
 800dee8:	d923      	bls.n	800df32 <_dtoa_r+0x2b6>
 800deea:	6041      	str	r1, [r0, #4]
 800deec:	9803      	ldr	r0, [sp, #12]
 800deee:	f000 fdbb 	bl	800ea68 <_Balloc>
 800def2:	9008      	str	r0, [sp, #32]
 800def4:	2800      	cmp	r0, #0
 800def6:	d11f      	bne.n	800df38 <_dtoa_r+0x2bc>
 800def8:	21b0      	movs	r1, #176	@ 0xb0
 800defa:	4b46      	ldr	r3, [pc, #280]	@ (800e014 <_dtoa_r+0x398>)
 800defc:	4831      	ldr	r0, [pc, #196]	@ (800dfc4 <_dtoa_r+0x348>)
 800defe:	9a08      	ldr	r2, [sp, #32]
 800df00:	31ff      	adds	r1, #255	@ 0xff
 800df02:	e6d0      	b.n	800dca6 <_dtoa_r+0x2a>
 800df04:	2300      	movs	r3, #0
 800df06:	e7e2      	b.n	800dece <_dtoa_r+0x252>
 800df08:	2300      	movs	r3, #0
 800df0a:	e7d3      	b.n	800deb4 <_dtoa_r+0x238>
 800df0c:	2300      	movs	r3, #0
 800df0e:	9410      	str	r4, [sp, #64]	@ 0x40
 800df10:	9322      	str	r3, [sp, #136]	@ 0x88
 800df12:	3b01      	subs	r3, #1
 800df14:	2200      	movs	r2, #0
 800df16:	930e      	str	r3, [sp, #56]	@ 0x38
 800df18:	9309      	str	r3, [sp, #36]	@ 0x24
 800df1a:	3313      	adds	r3, #19
 800df1c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800df1e:	e7dc      	b.n	800deda <_dtoa_r+0x25e>
 800df20:	2301      	movs	r3, #1
 800df22:	9310      	str	r3, [sp, #64]	@ 0x40
 800df24:	3b02      	subs	r3, #2
 800df26:	e7f5      	b.n	800df14 <_dtoa_r+0x298>
 800df28:	2301      	movs	r3, #1
 800df2a:	001a      	movs	r2, r3
 800df2c:	930e      	str	r3, [sp, #56]	@ 0x38
 800df2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800df30:	e7f4      	b.n	800df1c <_dtoa_r+0x2a0>
 800df32:	3101      	adds	r1, #1
 800df34:	0052      	lsls	r2, r2, #1
 800df36:	e7d4      	b.n	800dee2 <_dtoa_r+0x266>
 800df38:	9b03      	ldr	r3, [sp, #12]
 800df3a:	9a08      	ldr	r2, [sp, #32]
 800df3c:	69db      	ldr	r3, [r3, #28]
 800df3e:	601a      	str	r2, [r3, #0]
 800df40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df42:	2b0e      	cmp	r3, #14
 800df44:	d900      	bls.n	800df48 <_dtoa_r+0x2cc>
 800df46:	e0d6      	b.n	800e0f6 <_dtoa_r+0x47a>
 800df48:	2c00      	cmp	r4, #0
 800df4a:	d100      	bne.n	800df4e <_dtoa_r+0x2d2>
 800df4c:	e0d3      	b.n	800e0f6 <_dtoa_r+0x47a>
 800df4e:	9b04      	ldr	r3, [sp, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	dd63      	ble.n	800e01c <_dtoa_r+0x3a0>
 800df54:	210f      	movs	r1, #15
 800df56:	9a04      	ldr	r2, [sp, #16]
 800df58:	4b2a      	ldr	r3, [pc, #168]	@ (800e004 <_dtoa_r+0x388>)
 800df5a:	400a      	ands	r2, r1
 800df5c:	00d2      	lsls	r2, r2, #3
 800df5e:	189b      	adds	r3, r3, r2
 800df60:	681e      	ldr	r6, [r3, #0]
 800df62:	685f      	ldr	r7, [r3, #4]
 800df64:	9b04      	ldr	r3, [sp, #16]
 800df66:	2402      	movs	r4, #2
 800df68:	111d      	asrs	r5, r3, #4
 800df6a:	05db      	lsls	r3, r3, #23
 800df6c:	d50a      	bpl.n	800df84 <_dtoa_r+0x308>
 800df6e:	4b2a      	ldr	r3, [pc, #168]	@ (800e018 <_dtoa_r+0x39c>)
 800df70:	400d      	ands	r5, r1
 800df72:	6a1a      	ldr	r2, [r3, #32]
 800df74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df76:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800df78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800df7a:	f7f2 fe5b 	bl	8000c34 <__aeabi_ddiv>
 800df7e:	900a      	str	r0, [sp, #40]	@ 0x28
 800df80:	910b      	str	r1, [sp, #44]	@ 0x2c
 800df82:	3401      	adds	r4, #1
 800df84:	4b24      	ldr	r3, [pc, #144]	@ (800e018 <_dtoa_r+0x39c>)
 800df86:	930c      	str	r3, [sp, #48]	@ 0x30
 800df88:	2d00      	cmp	r5, #0
 800df8a:	d108      	bne.n	800df9e <_dtoa_r+0x322>
 800df8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df8e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df90:	0032      	movs	r2, r6
 800df92:	003b      	movs	r3, r7
 800df94:	f7f2 fe4e 	bl	8000c34 <__aeabi_ddiv>
 800df98:	900a      	str	r0, [sp, #40]	@ 0x28
 800df9a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800df9c:	e059      	b.n	800e052 <_dtoa_r+0x3d6>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	421d      	tst	r5, r3
 800dfa2:	d009      	beq.n	800dfb8 <_dtoa_r+0x33c>
 800dfa4:	18e4      	adds	r4, r4, r3
 800dfa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfa8:	0030      	movs	r0, r6
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	0039      	movs	r1, r7
 800dfb0:	f7f3 fa7a 	bl	80014a8 <__aeabi_dmul>
 800dfb4:	0006      	movs	r6, r0
 800dfb6:	000f      	movs	r7, r1
 800dfb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfba:	106d      	asrs	r5, r5, #1
 800dfbc:	3308      	adds	r3, #8
 800dfbe:	e7e2      	b.n	800df86 <_dtoa_r+0x30a>
 800dfc0:	0800fc41 	.word	0x0800fc41
 800dfc4:	0800fc58 	.word	0x0800fc58
 800dfc8:	7ff00000 	.word	0x7ff00000
 800dfcc:	0000270f 	.word	0x0000270f
 800dfd0:	0800fc3d 	.word	0x0800fc3d
 800dfd4:	0800fc40 	.word	0x0800fc40
 800dfd8:	0800fc11 	.word	0x0800fc11
 800dfdc:	0800fc10 	.word	0x0800fc10
 800dfe0:	3ff00000 	.word	0x3ff00000
 800dfe4:	fffffc01 	.word	0xfffffc01
 800dfe8:	3ff80000 	.word	0x3ff80000
 800dfec:	636f4361 	.word	0x636f4361
 800dff0:	3fd287a7 	.word	0x3fd287a7
 800dff4:	8b60c8b3 	.word	0x8b60c8b3
 800dff8:	3fc68a28 	.word	0x3fc68a28
 800dffc:	509f79fb 	.word	0x509f79fb
 800e000:	3fd34413 	.word	0x3fd34413
 800e004:	0800fda8 	.word	0x0800fda8
 800e008:	00000432 	.word	0x00000432
 800e00c:	00000412 	.word	0x00000412
 800e010:	fe100000 	.word	0xfe100000
 800e014:	0800fcb0 	.word	0x0800fcb0
 800e018:	0800fd80 	.word	0x0800fd80
 800e01c:	9b04      	ldr	r3, [sp, #16]
 800e01e:	2402      	movs	r4, #2
 800e020:	2b00      	cmp	r3, #0
 800e022:	d016      	beq.n	800e052 <_dtoa_r+0x3d6>
 800e024:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e026:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e028:	220f      	movs	r2, #15
 800e02a:	425d      	negs	r5, r3
 800e02c:	402a      	ands	r2, r5
 800e02e:	4bd5      	ldr	r3, [pc, #852]	@ (800e384 <_dtoa_r+0x708>)
 800e030:	00d2      	lsls	r2, r2, #3
 800e032:	189b      	adds	r3, r3, r2
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	f7f3 fa36 	bl	80014a8 <__aeabi_dmul>
 800e03c:	2701      	movs	r7, #1
 800e03e:	2300      	movs	r3, #0
 800e040:	900a      	str	r0, [sp, #40]	@ 0x28
 800e042:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e044:	4ed0      	ldr	r6, [pc, #832]	@ (800e388 <_dtoa_r+0x70c>)
 800e046:	112d      	asrs	r5, r5, #4
 800e048:	2d00      	cmp	r5, #0
 800e04a:	d000      	beq.n	800e04e <_dtoa_r+0x3d2>
 800e04c:	e095      	b.n	800e17a <_dtoa_r+0x4fe>
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1a2      	bne.n	800df98 <_dtoa_r+0x31c>
 800e052:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e054:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e056:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d100      	bne.n	800e05e <_dtoa_r+0x3e2>
 800e05c:	e098      	b.n	800e190 <_dtoa_r+0x514>
 800e05e:	2200      	movs	r2, #0
 800e060:	0030      	movs	r0, r6
 800e062:	0039      	movs	r1, r7
 800e064:	4bc9      	ldr	r3, [pc, #804]	@ (800e38c <_dtoa_r+0x710>)
 800e066:	f7f2 f9f7 	bl	8000458 <__aeabi_dcmplt>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d100      	bne.n	800e070 <_dtoa_r+0x3f4>
 800e06e:	e08f      	b.n	800e190 <_dtoa_r+0x514>
 800e070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e072:	2b00      	cmp	r3, #0
 800e074:	d100      	bne.n	800e078 <_dtoa_r+0x3fc>
 800e076:	e08b      	b.n	800e190 <_dtoa_r+0x514>
 800e078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	dd37      	ble.n	800e0ee <_dtoa_r+0x472>
 800e07e:	9b04      	ldr	r3, [sp, #16]
 800e080:	2200      	movs	r2, #0
 800e082:	3b01      	subs	r3, #1
 800e084:	930c      	str	r3, [sp, #48]	@ 0x30
 800e086:	0030      	movs	r0, r6
 800e088:	4bc1      	ldr	r3, [pc, #772]	@ (800e390 <_dtoa_r+0x714>)
 800e08a:	0039      	movs	r1, r7
 800e08c:	f7f3 fa0c 	bl	80014a8 <__aeabi_dmul>
 800e090:	900a      	str	r0, [sp, #40]	@ 0x28
 800e092:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e096:	3401      	adds	r4, #1
 800e098:	0020      	movs	r0, r4
 800e09a:	9311      	str	r3, [sp, #68]	@ 0x44
 800e09c:	f7f4 f952 	bl	8002344 <__aeabi_i2d>
 800e0a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0a4:	f7f3 fa00 	bl	80014a8 <__aeabi_dmul>
 800e0a8:	4bba      	ldr	r3, [pc, #744]	@ (800e394 <_dtoa_r+0x718>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f7f2 f9fc 	bl	80004a8 <__aeabi_dadd>
 800e0b0:	4bb9      	ldr	r3, [pc, #740]	@ (800e398 <_dtoa_r+0x71c>)
 800e0b2:	0006      	movs	r6, r0
 800e0b4:	18cf      	adds	r7, r1, r3
 800e0b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d16d      	bne.n	800e198 <_dtoa_r+0x51c>
 800e0bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e0be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	4bb6      	ldr	r3, [pc, #728]	@ (800e39c <_dtoa_r+0x720>)
 800e0c4:	f7f3 fcd6 	bl	8001a74 <__aeabi_dsub>
 800e0c8:	0032      	movs	r2, r6
 800e0ca:	003b      	movs	r3, r7
 800e0cc:	0004      	movs	r4, r0
 800e0ce:	000d      	movs	r5, r1
 800e0d0:	f7f2 f9d6 	bl	8000480 <__aeabi_dcmpgt>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d000      	beq.n	800e0da <_dtoa_r+0x45e>
 800e0d8:	e2b6      	b.n	800e648 <_dtoa_r+0x9cc>
 800e0da:	2180      	movs	r1, #128	@ 0x80
 800e0dc:	0609      	lsls	r1, r1, #24
 800e0de:	187b      	adds	r3, r7, r1
 800e0e0:	0032      	movs	r2, r6
 800e0e2:	0020      	movs	r0, r4
 800e0e4:	0029      	movs	r1, r5
 800e0e6:	f7f2 f9b7 	bl	8000458 <__aeabi_dcmplt>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d128      	bne.n	800e140 <_dtoa_r+0x4c4>
 800e0ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e0f0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e0f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e0f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	da00      	bge.n	800e0fe <_dtoa_r+0x482>
 800e0fc:	e174      	b.n	800e3e8 <_dtoa_r+0x76c>
 800e0fe:	9a04      	ldr	r2, [sp, #16]
 800e100:	2a0e      	cmp	r2, #14
 800e102:	dd00      	ble.n	800e106 <_dtoa_r+0x48a>
 800e104:	e170      	b.n	800e3e8 <_dtoa_r+0x76c>
 800e106:	4b9f      	ldr	r3, [pc, #636]	@ (800e384 <_dtoa_r+0x708>)
 800e108:	00d2      	lsls	r2, r2, #3
 800e10a:	189b      	adds	r3, r3, r2
 800e10c:	685c      	ldr	r4, [r3, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	9306      	str	r3, [sp, #24]
 800e112:	9407      	str	r4, [sp, #28]
 800e114:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e116:	2b00      	cmp	r3, #0
 800e118:	db00      	blt.n	800e11c <_dtoa_r+0x4a0>
 800e11a:	e0e7      	b.n	800e2ec <_dtoa_r+0x670>
 800e11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e11e:	2b00      	cmp	r3, #0
 800e120:	dd00      	ble.n	800e124 <_dtoa_r+0x4a8>
 800e122:	e0e3      	b.n	800e2ec <_dtoa_r+0x670>
 800e124:	d10c      	bne.n	800e140 <_dtoa_r+0x4c4>
 800e126:	9806      	ldr	r0, [sp, #24]
 800e128:	9907      	ldr	r1, [sp, #28]
 800e12a:	2200      	movs	r2, #0
 800e12c:	4b9b      	ldr	r3, [pc, #620]	@ (800e39c <_dtoa_r+0x720>)
 800e12e:	f7f3 f9bb 	bl	80014a8 <__aeabi_dmul>
 800e132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e136:	f7f2 f9ad 	bl	8000494 <__aeabi_dcmpge>
 800e13a:	2800      	cmp	r0, #0
 800e13c:	d100      	bne.n	800e140 <_dtoa_r+0x4c4>
 800e13e:	e286      	b.n	800e64e <_dtoa_r+0x9d2>
 800e140:	2600      	movs	r6, #0
 800e142:	0037      	movs	r7, r6
 800e144:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e146:	9c08      	ldr	r4, [sp, #32]
 800e148:	43db      	mvns	r3, r3
 800e14a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e14c:	9704      	str	r7, [sp, #16]
 800e14e:	2700      	movs	r7, #0
 800e150:	0031      	movs	r1, r6
 800e152:	9803      	ldr	r0, [sp, #12]
 800e154:	f000 fccc 	bl	800eaf0 <_Bfree>
 800e158:	9b04      	ldr	r3, [sp, #16]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d100      	bne.n	800e160 <_dtoa_r+0x4e4>
 800e15e:	e0bb      	b.n	800e2d8 <_dtoa_r+0x65c>
 800e160:	2f00      	cmp	r7, #0
 800e162:	d005      	beq.n	800e170 <_dtoa_r+0x4f4>
 800e164:	429f      	cmp	r7, r3
 800e166:	d003      	beq.n	800e170 <_dtoa_r+0x4f4>
 800e168:	0039      	movs	r1, r7
 800e16a:	9803      	ldr	r0, [sp, #12]
 800e16c:	f000 fcc0 	bl	800eaf0 <_Bfree>
 800e170:	9904      	ldr	r1, [sp, #16]
 800e172:	9803      	ldr	r0, [sp, #12]
 800e174:	f000 fcbc 	bl	800eaf0 <_Bfree>
 800e178:	e0ae      	b.n	800e2d8 <_dtoa_r+0x65c>
 800e17a:	423d      	tst	r5, r7
 800e17c:	d005      	beq.n	800e18a <_dtoa_r+0x50e>
 800e17e:	6832      	ldr	r2, [r6, #0]
 800e180:	6873      	ldr	r3, [r6, #4]
 800e182:	f7f3 f991 	bl	80014a8 <__aeabi_dmul>
 800e186:	003b      	movs	r3, r7
 800e188:	3401      	adds	r4, #1
 800e18a:	106d      	asrs	r5, r5, #1
 800e18c:	3608      	adds	r6, #8
 800e18e:	e75b      	b.n	800e048 <_dtoa_r+0x3cc>
 800e190:	9b04      	ldr	r3, [sp, #16]
 800e192:	930c      	str	r3, [sp, #48]	@ 0x30
 800e194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e196:	e77f      	b.n	800e098 <_dtoa_r+0x41c>
 800e198:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e19a:	4b7a      	ldr	r3, [pc, #488]	@ (800e384 <_dtoa_r+0x708>)
 800e19c:	3a01      	subs	r2, #1
 800e19e:	00d2      	lsls	r2, r2, #3
 800e1a0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e1a2:	189b      	adds	r3, r3, r2
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	2900      	cmp	r1, #0
 800e1aa:	d04c      	beq.n	800e246 <_dtoa_r+0x5ca>
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	497c      	ldr	r1, [pc, #496]	@ (800e3a0 <_dtoa_r+0x724>)
 800e1b0:	f7f2 fd40 	bl	8000c34 <__aeabi_ddiv>
 800e1b4:	0032      	movs	r2, r6
 800e1b6:	003b      	movs	r3, r7
 800e1b8:	f7f3 fc5c 	bl	8001a74 <__aeabi_dsub>
 800e1bc:	9a08      	ldr	r2, [sp, #32]
 800e1be:	0006      	movs	r6, r0
 800e1c0:	4694      	mov	ip, r2
 800e1c2:	000f      	movs	r7, r1
 800e1c4:	9b08      	ldr	r3, [sp, #32]
 800e1c6:	9316      	str	r3, [sp, #88]	@ 0x58
 800e1c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1ca:	4463      	add	r3, ip
 800e1cc:	9311      	str	r3, [sp, #68]	@ 0x44
 800e1ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e1d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1d2:	f7f4 f87b 	bl	80022cc <__aeabi_d2iz>
 800e1d6:	0005      	movs	r5, r0
 800e1d8:	f7f4 f8b4 	bl	8002344 <__aeabi_i2d>
 800e1dc:	0002      	movs	r2, r0
 800e1de:	000b      	movs	r3, r1
 800e1e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e1e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1e4:	f7f3 fc46 	bl	8001a74 <__aeabi_dsub>
 800e1e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e1ea:	3530      	adds	r5, #48	@ 0x30
 800e1ec:	1c5c      	adds	r4, r3, #1
 800e1ee:	701d      	strb	r5, [r3, #0]
 800e1f0:	0032      	movs	r2, r6
 800e1f2:	003b      	movs	r3, r7
 800e1f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1f8:	f7f2 f92e 	bl	8000458 <__aeabi_dcmplt>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	d16b      	bne.n	800e2d8 <_dtoa_r+0x65c>
 800e200:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e204:	2000      	movs	r0, #0
 800e206:	4961      	ldr	r1, [pc, #388]	@ (800e38c <_dtoa_r+0x710>)
 800e208:	f7f3 fc34 	bl	8001a74 <__aeabi_dsub>
 800e20c:	0032      	movs	r2, r6
 800e20e:	003b      	movs	r3, r7
 800e210:	f7f2 f922 	bl	8000458 <__aeabi_dcmplt>
 800e214:	2800      	cmp	r0, #0
 800e216:	d000      	beq.n	800e21a <_dtoa_r+0x59e>
 800e218:	e0c6      	b.n	800e3a8 <_dtoa_r+0x72c>
 800e21a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e21c:	42a3      	cmp	r3, r4
 800e21e:	d100      	bne.n	800e222 <_dtoa_r+0x5a6>
 800e220:	e765      	b.n	800e0ee <_dtoa_r+0x472>
 800e222:	2200      	movs	r2, #0
 800e224:	0030      	movs	r0, r6
 800e226:	0039      	movs	r1, r7
 800e228:	4b59      	ldr	r3, [pc, #356]	@ (800e390 <_dtoa_r+0x714>)
 800e22a:	f7f3 f93d 	bl	80014a8 <__aeabi_dmul>
 800e22e:	2200      	movs	r2, #0
 800e230:	0006      	movs	r6, r0
 800e232:	000f      	movs	r7, r1
 800e234:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e236:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e238:	4b55      	ldr	r3, [pc, #340]	@ (800e390 <_dtoa_r+0x714>)
 800e23a:	f7f3 f935 	bl	80014a8 <__aeabi_dmul>
 800e23e:	9416      	str	r4, [sp, #88]	@ 0x58
 800e240:	900a      	str	r0, [sp, #40]	@ 0x28
 800e242:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e244:	e7c3      	b.n	800e1ce <_dtoa_r+0x552>
 800e246:	0030      	movs	r0, r6
 800e248:	0039      	movs	r1, r7
 800e24a:	f7f3 f92d 	bl	80014a8 <__aeabi_dmul>
 800e24e:	9d08      	ldr	r5, [sp, #32]
 800e250:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e252:	002b      	movs	r3, r5
 800e254:	4694      	mov	ip, r2
 800e256:	9016      	str	r0, [sp, #88]	@ 0x58
 800e258:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e25a:	4463      	add	r3, ip
 800e25c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e25e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e262:	f7f4 f833 	bl	80022cc <__aeabi_d2iz>
 800e266:	0004      	movs	r4, r0
 800e268:	f7f4 f86c 	bl	8002344 <__aeabi_i2d>
 800e26c:	000b      	movs	r3, r1
 800e26e:	0002      	movs	r2, r0
 800e270:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e272:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e274:	f7f3 fbfe 	bl	8001a74 <__aeabi_dsub>
 800e278:	3430      	adds	r4, #48	@ 0x30
 800e27a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e27c:	702c      	strb	r4, [r5, #0]
 800e27e:	3501      	adds	r5, #1
 800e280:	0006      	movs	r6, r0
 800e282:	000f      	movs	r7, r1
 800e284:	42ab      	cmp	r3, r5
 800e286:	d12a      	bne.n	800e2de <_dtoa_r+0x662>
 800e288:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e28a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e28c:	9b08      	ldr	r3, [sp, #32]
 800e28e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e290:	469c      	mov	ip, r3
 800e292:	2200      	movs	r2, #0
 800e294:	4b42      	ldr	r3, [pc, #264]	@ (800e3a0 <_dtoa_r+0x724>)
 800e296:	4464      	add	r4, ip
 800e298:	f7f2 f906 	bl	80004a8 <__aeabi_dadd>
 800e29c:	0002      	movs	r2, r0
 800e29e:	000b      	movs	r3, r1
 800e2a0:	0030      	movs	r0, r6
 800e2a2:	0039      	movs	r1, r7
 800e2a4:	f7f2 f8ec 	bl	8000480 <__aeabi_dcmpgt>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d000      	beq.n	800e2ae <_dtoa_r+0x632>
 800e2ac:	e07c      	b.n	800e3a8 <_dtoa_r+0x72c>
 800e2ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e2b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	493a      	ldr	r1, [pc, #232]	@ (800e3a0 <_dtoa_r+0x724>)
 800e2b6:	f7f3 fbdd 	bl	8001a74 <__aeabi_dsub>
 800e2ba:	0002      	movs	r2, r0
 800e2bc:	000b      	movs	r3, r1
 800e2be:	0030      	movs	r0, r6
 800e2c0:	0039      	movs	r1, r7
 800e2c2:	f7f2 f8c9 	bl	8000458 <__aeabi_dcmplt>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d100      	bne.n	800e2cc <_dtoa_r+0x650>
 800e2ca:	e710      	b.n	800e0ee <_dtoa_r+0x472>
 800e2cc:	0023      	movs	r3, r4
 800e2ce:	3c01      	subs	r4, #1
 800e2d0:	7822      	ldrb	r2, [r4, #0]
 800e2d2:	2a30      	cmp	r2, #48	@ 0x30
 800e2d4:	d0fa      	beq.n	800e2cc <_dtoa_r+0x650>
 800e2d6:	001c      	movs	r4, r3
 800e2d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2da:	9304      	str	r3, [sp, #16]
 800e2dc:	e042      	b.n	800e364 <_dtoa_r+0x6e8>
 800e2de:	2200      	movs	r2, #0
 800e2e0:	4b2b      	ldr	r3, [pc, #172]	@ (800e390 <_dtoa_r+0x714>)
 800e2e2:	f7f3 f8e1 	bl	80014a8 <__aeabi_dmul>
 800e2e6:	900a      	str	r0, [sp, #40]	@ 0x28
 800e2e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e2ea:	e7b8      	b.n	800e25e <_dtoa_r+0x5e2>
 800e2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ee:	9d08      	ldr	r5, [sp, #32]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	195b      	adds	r3, r3, r5
 800e2f4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e2f6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e2f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2fa:	9a06      	ldr	r2, [sp, #24]
 800e2fc:	9b07      	ldr	r3, [sp, #28]
 800e2fe:	0030      	movs	r0, r6
 800e300:	0039      	movs	r1, r7
 800e302:	f7f2 fc97 	bl	8000c34 <__aeabi_ddiv>
 800e306:	f7f3 ffe1 	bl	80022cc <__aeabi_d2iz>
 800e30a:	9009      	str	r0, [sp, #36]	@ 0x24
 800e30c:	f7f4 f81a 	bl	8002344 <__aeabi_i2d>
 800e310:	9a06      	ldr	r2, [sp, #24]
 800e312:	9b07      	ldr	r3, [sp, #28]
 800e314:	f7f3 f8c8 	bl	80014a8 <__aeabi_dmul>
 800e318:	0002      	movs	r2, r0
 800e31a:	000b      	movs	r3, r1
 800e31c:	0030      	movs	r0, r6
 800e31e:	0039      	movs	r1, r7
 800e320:	f7f3 fba8 	bl	8001a74 <__aeabi_dsub>
 800e324:	002b      	movs	r3, r5
 800e326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e328:	3501      	adds	r5, #1
 800e32a:	3230      	adds	r2, #48	@ 0x30
 800e32c:	701a      	strb	r2, [r3, #0]
 800e32e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e330:	002c      	movs	r4, r5
 800e332:	429a      	cmp	r2, r3
 800e334:	d14b      	bne.n	800e3ce <_dtoa_r+0x752>
 800e336:	0002      	movs	r2, r0
 800e338:	000b      	movs	r3, r1
 800e33a:	f7f2 f8b5 	bl	80004a8 <__aeabi_dadd>
 800e33e:	9a06      	ldr	r2, [sp, #24]
 800e340:	9b07      	ldr	r3, [sp, #28]
 800e342:	0006      	movs	r6, r0
 800e344:	000f      	movs	r7, r1
 800e346:	f7f2 f89b 	bl	8000480 <__aeabi_dcmpgt>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d12a      	bne.n	800e3a4 <_dtoa_r+0x728>
 800e34e:	9a06      	ldr	r2, [sp, #24]
 800e350:	9b07      	ldr	r3, [sp, #28]
 800e352:	0030      	movs	r0, r6
 800e354:	0039      	movs	r1, r7
 800e356:	f7f2 f879 	bl	800044c <__aeabi_dcmpeq>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d002      	beq.n	800e364 <_dtoa_r+0x6e8>
 800e35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e360:	07dd      	lsls	r5, r3, #31
 800e362:	d41f      	bmi.n	800e3a4 <_dtoa_r+0x728>
 800e364:	9905      	ldr	r1, [sp, #20]
 800e366:	9803      	ldr	r0, [sp, #12]
 800e368:	f000 fbc2 	bl	800eaf0 <_Bfree>
 800e36c:	2300      	movs	r3, #0
 800e36e:	7023      	strb	r3, [r4, #0]
 800e370:	9b04      	ldr	r3, [sp, #16]
 800e372:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e374:	3301      	adds	r3, #1
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d100      	bne.n	800e380 <_dtoa_r+0x704>
 800e37e:	e4c7      	b.n	800dd10 <_dtoa_r+0x94>
 800e380:	601c      	str	r4, [r3, #0]
 800e382:	e4c5      	b.n	800dd10 <_dtoa_r+0x94>
 800e384:	0800fda8 	.word	0x0800fda8
 800e388:	0800fd80 	.word	0x0800fd80
 800e38c:	3ff00000 	.word	0x3ff00000
 800e390:	40240000 	.word	0x40240000
 800e394:	401c0000 	.word	0x401c0000
 800e398:	fcc00000 	.word	0xfcc00000
 800e39c:	40140000 	.word	0x40140000
 800e3a0:	3fe00000 	.word	0x3fe00000
 800e3a4:	9b04      	ldr	r3, [sp, #16]
 800e3a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3a8:	0023      	movs	r3, r4
 800e3aa:	001c      	movs	r4, r3
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	781a      	ldrb	r2, [r3, #0]
 800e3b0:	2a39      	cmp	r2, #57	@ 0x39
 800e3b2:	d108      	bne.n	800e3c6 <_dtoa_r+0x74a>
 800e3b4:	9a08      	ldr	r2, [sp, #32]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d1f7      	bne.n	800e3aa <_dtoa_r+0x72e>
 800e3ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e3bc:	9908      	ldr	r1, [sp, #32]
 800e3be:	3201      	adds	r2, #1
 800e3c0:	920c      	str	r2, [sp, #48]	@ 0x30
 800e3c2:	2230      	movs	r2, #48	@ 0x30
 800e3c4:	700a      	strb	r2, [r1, #0]
 800e3c6:	781a      	ldrb	r2, [r3, #0]
 800e3c8:	3201      	adds	r2, #1
 800e3ca:	701a      	strb	r2, [r3, #0]
 800e3cc:	e784      	b.n	800e2d8 <_dtoa_r+0x65c>
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	4bc6      	ldr	r3, [pc, #792]	@ (800e6ec <_dtoa_r+0xa70>)
 800e3d2:	f7f3 f869 	bl	80014a8 <__aeabi_dmul>
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2300      	movs	r3, #0
 800e3da:	0006      	movs	r6, r0
 800e3dc:	000f      	movs	r7, r1
 800e3de:	f7f2 f835 	bl	800044c <__aeabi_dcmpeq>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d089      	beq.n	800e2fa <_dtoa_r+0x67e>
 800e3e6:	e7bd      	b.n	800e364 <_dtoa_r+0x6e8>
 800e3e8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e3ea:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e3ec:	9c06      	ldr	r4, [sp, #24]
 800e3ee:	2f00      	cmp	r7, #0
 800e3f0:	d014      	beq.n	800e41c <_dtoa_r+0x7a0>
 800e3f2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e3f4:	2a01      	cmp	r2, #1
 800e3f6:	dd00      	ble.n	800e3fa <_dtoa_r+0x77e>
 800e3f8:	e0e4      	b.n	800e5c4 <_dtoa_r+0x948>
 800e3fa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e3fc:	2a00      	cmp	r2, #0
 800e3fe:	d100      	bne.n	800e402 <_dtoa_r+0x786>
 800e400:	e0da      	b.n	800e5b8 <_dtoa_r+0x93c>
 800e402:	4abb      	ldr	r2, [pc, #748]	@ (800e6f0 <_dtoa_r+0xa74>)
 800e404:	189b      	adds	r3, r3, r2
 800e406:	9a06      	ldr	r2, [sp, #24]
 800e408:	2101      	movs	r1, #1
 800e40a:	18d2      	adds	r2, r2, r3
 800e40c:	9206      	str	r2, [sp, #24]
 800e40e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e410:	9803      	ldr	r0, [sp, #12]
 800e412:	18d3      	adds	r3, r2, r3
 800e414:	930d      	str	r3, [sp, #52]	@ 0x34
 800e416:	f000 fc23 	bl	800ec60 <__i2b>
 800e41a:	0007      	movs	r7, r0
 800e41c:	2c00      	cmp	r4, #0
 800e41e:	d00e      	beq.n	800e43e <_dtoa_r+0x7c2>
 800e420:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e422:	2b00      	cmp	r3, #0
 800e424:	dd0b      	ble.n	800e43e <_dtoa_r+0x7c2>
 800e426:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e428:	0023      	movs	r3, r4
 800e42a:	4294      	cmp	r4, r2
 800e42c:	dd00      	ble.n	800e430 <_dtoa_r+0x7b4>
 800e42e:	0013      	movs	r3, r2
 800e430:	9a06      	ldr	r2, [sp, #24]
 800e432:	1ae4      	subs	r4, r4, r3
 800e434:	1ad2      	subs	r2, r2, r3
 800e436:	9206      	str	r2, [sp, #24]
 800e438:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e43e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e440:	2b00      	cmp	r3, #0
 800e442:	d021      	beq.n	800e488 <_dtoa_r+0x80c>
 800e444:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e446:	2b00      	cmp	r3, #0
 800e448:	d100      	bne.n	800e44c <_dtoa_r+0x7d0>
 800e44a:	e0d3      	b.n	800e5f4 <_dtoa_r+0x978>
 800e44c:	9e05      	ldr	r6, [sp, #20]
 800e44e:	2d00      	cmp	r5, #0
 800e450:	d014      	beq.n	800e47c <_dtoa_r+0x800>
 800e452:	0039      	movs	r1, r7
 800e454:	002a      	movs	r2, r5
 800e456:	9803      	ldr	r0, [sp, #12]
 800e458:	f000 fcc4 	bl	800ede4 <__pow5mult>
 800e45c:	9a05      	ldr	r2, [sp, #20]
 800e45e:	0001      	movs	r1, r0
 800e460:	0007      	movs	r7, r0
 800e462:	9803      	ldr	r0, [sp, #12]
 800e464:	f000 fc14 	bl	800ec90 <__multiply>
 800e468:	0006      	movs	r6, r0
 800e46a:	9905      	ldr	r1, [sp, #20]
 800e46c:	9803      	ldr	r0, [sp, #12]
 800e46e:	f000 fb3f 	bl	800eaf0 <_Bfree>
 800e472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e474:	9605      	str	r6, [sp, #20]
 800e476:	1b5b      	subs	r3, r3, r5
 800e478:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e47a:	d005      	beq.n	800e488 <_dtoa_r+0x80c>
 800e47c:	0031      	movs	r1, r6
 800e47e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e480:	9803      	ldr	r0, [sp, #12]
 800e482:	f000 fcaf 	bl	800ede4 <__pow5mult>
 800e486:	9005      	str	r0, [sp, #20]
 800e488:	2101      	movs	r1, #1
 800e48a:	9803      	ldr	r0, [sp, #12]
 800e48c:	f000 fbe8 	bl	800ec60 <__i2b>
 800e490:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e492:	0006      	movs	r6, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d100      	bne.n	800e49a <_dtoa_r+0x81e>
 800e498:	e1bc      	b.n	800e814 <_dtoa_r+0xb98>
 800e49a:	001a      	movs	r2, r3
 800e49c:	0001      	movs	r1, r0
 800e49e:	9803      	ldr	r0, [sp, #12]
 800e4a0:	f000 fca0 	bl	800ede4 <__pow5mult>
 800e4a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e4a6:	0006      	movs	r6, r0
 800e4a8:	2500      	movs	r5, #0
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	dc16      	bgt.n	800e4dc <_dtoa_r+0x860>
 800e4ae:	2500      	movs	r5, #0
 800e4b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4b2:	42ab      	cmp	r3, r5
 800e4b4:	d10e      	bne.n	800e4d4 <_dtoa_r+0x858>
 800e4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4b8:	031b      	lsls	r3, r3, #12
 800e4ba:	42ab      	cmp	r3, r5
 800e4bc:	d10a      	bne.n	800e4d4 <_dtoa_r+0x858>
 800e4be:	4b8d      	ldr	r3, [pc, #564]	@ (800e6f4 <_dtoa_r+0xa78>)
 800e4c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e4c2:	4213      	tst	r3, r2
 800e4c4:	d006      	beq.n	800e4d4 <_dtoa_r+0x858>
 800e4c6:	9b06      	ldr	r3, [sp, #24]
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	9306      	str	r3, [sp, #24]
 800e4ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	930d      	str	r3, [sp, #52]	@ 0x34
 800e4d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e4d6:	2001      	movs	r0, #1
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d008      	beq.n	800e4ee <_dtoa_r+0x872>
 800e4dc:	6933      	ldr	r3, [r6, #16]
 800e4de:	3303      	adds	r3, #3
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	18f3      	adds	r3, r6, r3
 800e4e4:	6858      	ldr	r0, [r3, #4]
 800e4e6:	f000 fb6b 	bl	800ebc0 <__hi0bits>
 800e4ea:	2320      	movs	r3, #32
 800e4ec:	1a18      	subs	r0, r3, r0
 800e4ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4f0:	1818      	adds	r0, r3, r0
 800e4f2:	0002      	movs	r2, r0
 800e4f4:	231f      	movs	r3, #31
 800e4f6:	401a      	ands	r2, r3
 800e4f8:	4218      	tst	r0, r3
 800e4fa:	d100      	bne.n	800e4fe <_dtoa_r+0x882>
 800e4fc:	e081      	b.n	800e602 <_dtoa_r+0x986>
 800e4fe:	3301      	adds	r3, #1
 800e500:	1a9b      	subs	r3, r3, r2
 800e502:	2b04      	cmp	r3, #4
 800e504:	dd79      	ble.n	800e5fa <_dtoa_r+0x97e>
 800e506:	231c      	movs	r3, #28
 800e508:	1a9b      	subs	r3, r3, r2
 800e50a:	9a06      	ldr	r2, [sp, #24]
 800e50c:	18e4      	adds	r4, r4, r3
 800e50e:	18d2      	adds	r2, r2, r3
 800e510:	9206      	str	r2, [sp, #24]
 800e512:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e514:	18d3      	adds	r3, r2, r3
 800e516:	930d      	str	r3, [sp, #52]	@ 0x34
 800e518:	9b06      	ldr	r3, [sp, #24]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	dd05      	ble.n	800e52a <_dtoa_r+0x8ae>
 800e51e:	001a      	movs	r2, r3
 800e520:	9905      	ldr	r1, [sp, #20]
 800e522:	9803      	ldr	r0, [sp, #12]
 800e524:	f000 fcba 	bl	800ee9c <__lshift>
 800e528:	9005      	str	r0, [sp, #20]
 800e52a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dd05      	ble.n	800e53c <_dtoa_r+0x8c0>
 800e530:	0031      	movs	r1, r6
 800e532:	001a      	movs	r2, r3
 800e534:	9803      	ldr	r0, [sp, #12]
 800e536:	f000 fcb1 	bl	800ee9c <__lshift>
 800e53a:	0006      	movs	r6, r0
 800e53c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d061      	beq.n	800e606 <_dtoa_r+0x98a>
 800e542:	0031      	movs	r1, r6
 800e544:	9805      	ldr	r0, [sp, #20]
 800e546:	f000 fd15 	bl	800ef74 <__mcmp>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	da5b      	bge.n	800e606 <_dtoa_r+0x98a>
 800e54e:	9b04      	ldr	r3, [sp, #16]
 800e550:	220a      	movs	r2, #10
 800e552:	3b01      	subs	r3, #1
 800e554:	930c      	str	r3, [sp, #48]	@ 0x30
 800e556:	9905      	ldr	r1, [sp, #20]
 800e558:	2300      	movs	r3, #0
 800e55a:	9803      	ldr	r0, [sp, #12]
 800e55c:	f000 faec 	bl	800eb38 <__multadd>
 800e560:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e562:	9005      	str	r0, [sp, #20]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d100      	bne.n	800e56a <_dtoa_r+0x8ee>
 800e568:	e15b      	b.n	800e822 <_dtoa_r+0xba6>
 800e56a:	2300      	movs	r3, #0
 800e56c:	0039      	movs	r1, r7
 800e56e:	220a      	movs	r2, #10
 800e570:	9803      	ldr	r0, [sp, #12]
 800e572:	f000 fae1 	bl	800eb38 <__multadd>
 800e576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e578:	0007      	movs	r7, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	dc4d      	bgt.n	800e61a <_dtoa_r+0x99e>
 800e57e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e580:	2b02      	cmp	r3, #2
 800e582:	dd46      	ble.n	800e612 <_dtoa_r+0x996>
 800e584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e586:	2b00      	cmp	r3, #0
 800e588:	d000      	beq.n	800e58c <_dtoa_r+0x910>
 800e58a:	e5db      	b.n	800e144 <_dtoa_r+0x4c8>
 800e58c:	0031      	movs	r1, r6
 800e58e:	2205      	movs	r2, #5
 800e590:	9803      	ldr	r0, [sp, #12]
 800e592:	f000 fad1 	bl	800eb38 <__multadd>
 800e596:	0006      	movs	r6, r0
 800e598:	0001      	movs	r1, r0
 800e59a:	9805      	ldr	r0, [sp, #20]
 800e59c:	f000 fcea 	bl	800ef74 <__mcmp>
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	dc00      	bgt.n	800e5a6 <_dtoa_r+0x92a>
 800e5a4:	e5ce      	b.n	800e144 <_dtoa_r+0x4c8>
 800e5a6:	9b08      	ldr	r3, [sp, #32]
 800e5a8:	9a08      	ldr	r2, [sp, #32]
 800e5aa:	1c5c      	adds	r4, r3, #1
 800e5ac:	2331      	movs	r3, #49	@ 0x31
 800e5ae:	7013      	strb	r3, [r2, #0]
 800e5b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5b6:	e5c9      	b.n	800e14c <_dtoa_r+0x4d0>
 800e5b8:	2336      	movs	r3, #54	@ 0x36
 800e5ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e5bc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e5be:	1a9b      	subs	r3, r3, r2
 800e5c0:	9c06      	ldr	r4, [sp, #24]
 800e5c2:	e720      	b.n	800e406 <_dtoa_r+0x78a>
 800e5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c6:	1e5d      	subs	r5, r3, #1
 800e5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ca:	42ab      	cmp	r3, r5
 800e5cc:	db08      	blt.n	800e5e0 <_dtoa_r+0x964>
 800e5ce:	1b5d      	subs	r5, r3, r5
 800e5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	daf4      	bge.n	800e5c0 <_dtoa_r+0x944>
 800e5d6:	9b06      	ldr	r3, [sp, #24]
 800e5d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5da:	1a9c      	subs	r4, r3, r2
 800e5dc:	2300      	movs	r3, #0
 800e5de:	e712      	b.n	800e406 <_dtoa_r+0x78a>
 800e5e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e5e4:	1aeb      	subs	r3, r5, r3
 800e5e6:	18d3      	adds	r3, r2, r3
 800e5e8:	9314      	str	r3, [sp, #80]	@ 0x50
 800e5ea:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e5ec:	9c06      	ldr	r4, [sp, #24]
 800e5ee:	2500      	movs	r5, #0
 800e5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f2:	e708      	b.n	800e406 <_dtoa_r+0x78a>
 800e5f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e5f6:	9905      	ldr	r1, [sp, #20]
 800e5f8:	e742      	b.n	800e480 <_dtoa_r+0x804>
 800e5fa:	2b04      	cmp	r3, #4
 800e5fc:	d08c      	beq.n	800e518 <_dtoa_r+0x89c>
 800e5fe:	331c      	adds	r3, #28
 800e600:	e783      	b.n	800e50a <_dtoa_r+0x88e>
 800e602:	0013      	movs	r3, r2
 800e604:	e7fb      	b.n	800e5fe <_dtoa_r+0x982>
 800e606:	9b04      	ldr	r3, [sp, #16]
 800e608:	930c      	str	r3, [sp, #48]	@ 0x30
 800e60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e60c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e60e:	2b00      	cmp	r3, #0
 800e610:	ddb5      	ble.n	800e57e <_dtoa_r+0x902>
 800e612:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e614:	2b00      	cmp	r3, #0
 800e616:	d100      	bne.n	800e61a <_dtoa_r+0x99e>
 800e618:	e107      	b.n	800e82a <_dtoa_r+0xbae>
 800e61a:	2c00      	cmp	r4, #0
 800e61c:	dd05      	ble.n	800e62a <_dtoa_r+0x9ae>
 800e61e:	0039      	movs	r1, r7
 800e620:	0022      	movs	r2, r4
 800e622:	9803      	ldr	r0, [sp, #12]
 800e624:	f000 fc3a 	bl	800ee9c <__lshift>
 800e628:	0007      	movs	r7, r0
 800e62a:	9704      	str	r7, [sp, #16]
 800e62c:	2d00      	cmp	r5, #0
 800e62e:	d020      	beq.n	800e672 <_dtoa_r+0x9f6>
 800e630:	6879      	ldr	r1, [r7, #4]
 800e632:	9803      	ldr	r0, [sp, #12]
 800e634:	f000 fa18 	bl	800ea68 <_Balloc>
 800e638:	1e04      	subs	r4, r0, #0
 800e63a:	d10c      	bne.n	800e656 <_dtoa_r+0x9da>
 800e63c:	0022      	movs	r2, r4
 800e63e:	4b2e      	ldr	r3, [pc, #184]	@ (800e6f8 <_dtoa_r+0xa7c>)
 800e640:	482e      	ldr	r0, [pc, #184]	@ (800e6fc <_dtoa_r+0xa80>)
 800e642:	492f      	ldr	r1, [pc, #188]	@ (800e700 <_dtoa_r+0xa84>)
 800e644:	f7ff fb2f 	bl	800dca6 <_dtoa_r+0x2a>
 800e648:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e64a:	0037      	movs	r7, r6
 800e64c:	e7ab      	b.n	800e5a6 <_dtoa_r+0x92a>
 800e64e:	9b04      	ldr	r3, [sp, #16]
 800e650:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e652:	930c      	str	r3, [sp, #48]	@ 0x30
 800e654:	e7f9      	b.n	800e64a <_dtoa_r+0x9ce>
 800e656:	0039      	movs	r1, r7
 800e658:	693a      	ldr	r2, [r7, #16]
 800e65a:	310c      	adds	r1, #12
 800e65c:	3202      	adds	r2, #2
 800e65e:	0092      	lsls	r2, r2, #2
 800e660:	300c      	adds	r0, #12
 800e662:	f000 fe61 	bl	800f328 <memcpy>
 800e666:	2201      	movs	r2, #1
 800e668:	0021      	movs	r1, r4
 800e66a:	9803      	ldr	r0, [sp, #12]
 800e66c:	f000 fc16 	bl	800ee9c <__lshift>
 800e670:	9004      	str	r0, [sp, #16]
 800e672:	9b08      	ldr	r3, [sp, #32]
 800e674:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e676:	9306      	str	r3, [sp, #24]
 800e678:	3b01      	subs	r3, #1
 800e67a:	189b      	adds	r3, r3, r2
 800e67c:	2201      	movs	r2, #1
 800e67e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e682:	4013      	ands	r3, r2
 800e684:	930e      	str	r3, [sp, #56]	@ 0x38
 800e686:	0031      	movs	r1, r6
 800e688:	9805      	ldr	r0, [sp, #20]
 800e68a:	f7ff fa71 	bl	800db70 <quorem>
 800e68e:	0039      	movs	r1, r7
 800e690:	0005      	movs	r5, r0
 800e692:	900a      	str	r0, [sp, #40]	@ 0x28
 800e694:	9805      	ldr	r0, [sp, #20]
 800e696:	f000 fc6d 	bl	800ef74 <__mcmp>
 800e69a:	9a04      	ldr	r2, [sp, #16]
 800e69c:	900d      	str	r0, [sp, #52]	@ 0x34
 800e69e:	0031      	movs	r1, r6
 800e6a0:	9803      	ldr	r0, [sp, #12]
 800e6a2:	f000 fc83 	bl	800efac <__mdiff>
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	68c3      	ldr	r3, [r0, #12]
 800e6aa:	0004      	movs	r4, r0
 800e6ac:	3530      	adds	r5, #48	@ 0x30
 800e6ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d104      	bne.n	800e6be <_dtoa_r+0xa42>
 800e6b4:	0001      	movs	r1, r0
 800e6b6:	9805      	ldr	r0, [sp, #20]
 800e6b8:	f000 fc5c 	bl	800ef74 <__mcmp>
 800e6bc:	9009      	str	r0, [sp, #36]	@ 0x24
 800e6be:	0021      	movs	r1, r4
 800e6c0:	9803      	ldr	r0, [sp, #12]
 800e6c2:	f000 fa15 	bl	800eaf0 <_Bfree>
 800e6c6:	9b06      	ldr	r3, [sp, #24]
 800e6c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e6ca:	1c5c      	adds	r4, r3, #1
 800e6cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	d116      	bne.n	800e704 <_dtoa_r+0xa88>
 800e6d6:	2d39      	cmp	r5, #57	@ 0x39
 800e6d8:	d02f      	beq.n	800e73a <_dtoa_r+0xabe>
 800e6da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	dd01      	ble.n	800e6e4 <_dtoa_r+0xa68>
 800e6e0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e6e2:	3531      	adds	r5, #49	@ 0x31
 800e6e4:	9b06      	ldr	r3, [sp, #24]
 800e6e6:	701d      	strb	r5, [r3, #0]
 800e6e8:	e532      	b.n	800e150 <_dtoa_r+0x4d4>
 800e6ea:	46c0      	nop			@ (mov r8, r8)
 800e6ec:	40240000 	.word	0x40240000
 800e6f0:	00000433 	.word	0x00000433
 800e6f4:	7ff00000 	.word	0x7ff00000
 800e6f8:	0800fcb0 	.word	0x0800fcb0
 800e6fc:	0800fc58 	.word	0x0800fc58
 800e700:	000002ef 	.word	0x000002ef
 800e704:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e706:	2b00      	cmp	r3, #0
 800e708:	db04      	blt.n	800e714 <_dtoa_r+0xa98>
 800e70a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e70c:	4313      	orrs	r3, r2
 800e70e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e710:	4313      	orrs	r3, r2
 800e712:	d11e      	bne.n	800e752 <_dtoa_r+0xad6>
 800e714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e716:	2b00      	cmp	r3, #0
 800e718:	dde4      	ble.n	800e6e4 <_dtoa_r+0xa68>
 800e71a:	9905      	ldr	r1, [sp, #20]
 800e71c:	2201      	movs	r2, #1
 800e71e:	9803      	ldr	r0, [sp, #12]
 800e720:	f000 fbbc 	bl	800ee9c <__lshift>
 800e724:	0031      	movs	r1, r6
 800e726:	9005      	str	r0, [sp, #20]
 800e728:	f000 fc24 	bl	800ef74 <__mcmp>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	dc02      	bgt.n	800e736 <_dtoa_r+0xaba>
 800e730:	d1d8      	bne.n	800e6e4 <_dtoa_r+0xa68>
 800e732:	07eb      	lsls	r3, r5, #31
 800e734:	d5d6      	bpl.n	800e6e4 <_dtoa_r+0xa68>
 800e736:	2d39      	cmp	r5, #57	@ 0x39
 800e738:	d1d2      	bne.n	800e6e0 <_dtoa_r+0xa64>
 800e73a:	2339      	movs	r3, #57	@ 0x39
 800e73c:	9a06      	ldr	r2, [sp, #24]
 800e73e:	7013      	strb	r3, [r2, #0]
 800e740:	0023      	movs	r3, r4
 800e742:	001c      	movs	r4, r3
 800e744:	3b01      	subs	r3, #1
 800e746:	781a      	ldrb	r2, [r3, #0]
 800e748:	2a39      	cmp	r2, #57	@ 0x39
 800e74a:	d050      	beq.n	800e7ee <_dtoa_r+0xb72>
 800e74c:	3201      	adds	r2, #1
 800e74e:	701a      	strb	r2, [r3, #0]
 800e750:	e4fe      	b.n	800e150 <_dtoa_r+0x4d4>
 800e752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e754:	2b00      	cmp	r3, #0
 800e756:	dd03      	ble.n	800e760 <_dtoa_r+0xae4>
 800e758:	2d39      	cmp	r5, #57	@ 0x39
 800e75a:	d0ee      	beq.n	800e73a <_dtoa_r+0xabe>
 800e75c:	3501      	adds	r5, #1
 800e75e:	e7c1      	b.n	800e6e4 <_dtoa_r+0xa68>
 800e760:	9b06      	ldr	r3, [sp, #24]
 800e762:	9a06      	ldr	r2, [sp, #24]
 800e764:	701d      	strb	r5, [r3, #0]
 800e766:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e768:	4293      	cmp	r3, r2
 800e76a:	d02b      	beq.n	800e7c4 <_dtoa_r+0xb48>
 800e76c:	2300      	movs	r3, #0
 800e76e:	220a      	movs	r2, #10
 800e770:	9905      	ldr	r1, [sp, #20]
 800e772:	9803      	ldr	r0, [sp, #12]
 800e774:	f000 f9e0 	bl	800eb38 <__multadd>
 800e778:	9b04      	ldr	r3, [sp, #16]
 800e77a:	9005      	str	r0, [sp, #20]
 800e77c:	429f      	cmp	r7, r3
 800e77e:	d109      	bne.n	800e794 <_dtoa_r+0xb18>
 800e780:	0039      	movs	r1, r7
 800e782:	2300      	movs	r3, #0
 800e784:	220a      	movs	r2, #10
 800e786:	9803      	ldr	r0, [sp, #12]
 800e788:	f000 f9d6 	bl	800eb38 <__multadd>
 800e78c:	0007      	movs	r7, r0
 800e78e:	9004      	str	r0, [sp, #16]
 800e790:	9406      	str	r4, [sp, #24]
 800e792:	e778      	b.n	800e686 <_dtoa_r+0xa0a>
 800e794:	0039      	movs	r1, r7
 800e796:	2300      	movs	r3, #0
 800e798:	220a      	movs	r2, #10
 800e79a:	9803      	ldr	r0, [sp, #12]
 800e79c:	f000 f9cc 	bl	800eb38 <__multadd>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	0007      	movs	r7, r0
 800e7a4:	220a      	movs	r2, #10
 800e7a6:	9904      	ldr	r1, [sp, #16]
 800e7a8:	9803      	ldr	r0, [sp, #12]
 800e7aa:	f000 f9c5 	bl	800eb38 <__multadd>
 800e7ae:	9004      	str	r0, [sp, #16]
 800e7b0:	e7ee      	b.n	800e790 <_dtoa_r+0xb14>
 800e7b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7b4:	2401      	movs	r4, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	dd00      	ble.n	800e7bc <_dtoa_r+0xb40>
 800e7ba:	001c      	movs	r4, r3
 800e7bc:	9704      	str	r7, [sp, #16]
 800e7be:	2700      	movs	r7, #0
 800e7c0:	9b08      	ldr	r3, [sp, #32]
 800e7c2:	191c      	adds	r4, r3, r4
 800e7c4:	9905      	ldr	r1, [sp, #20]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	9803      	ldr	r0, [sp, #12]
 800e7ca:	f000 fb67 	bl	800ee9c <__lshift>
 800e7ce:	0031      	movs	r1, r6
 800e7d0:	9005      	str	r0, [sp, #20]
 800e7d2:	f000 fbcf 	bl	800ef74 <__mcmp>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	dcb2      	bgt.n	800e740 <_dtoa_r+0xac4>
 800e7da:	d101      	bne.n	800e7e0 <_dtoa_r+0xb64>
 800e7dc:	07ed      	lsls	r5, r5, #31
 800e7de:	d4af      	bmi.n	800e740 <_dtoa_r+0xac4>
 800e7e0:	0023      	movs	r3, r4
 800e7e2:	001c      	movs	r4, r3
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	781a      	ldrb	r2, [r3, #0]
 800e7e8:	2a30      	cmp	r2, #48	@ 0x30
 800e7ea:	d0fa      	beq.n	800e7e2 <_dtoa_r+0xb66>
 800e7ec:	e4b0      	b.n	800e150 <_dtoa_r+0x4d4>
 800e7ee:	9a08      	ldr	r2, [sp, #32]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d1a6      	bne.n	800e742 <_dtoa_r+0xac6>
 800e7f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e7fa:	2331      	movs	r3, #49	@ 0x31
 800e7fc:	7013      	strb	r3, [r2, #0]
 800e7fe:	e4a7      	b.n	800e150 <_dtoa_r+0x4d4>
 800e800:	4b14      	ldr	r3, [pc, #80]	@ (800e854 <_dtoa_r+0xbd8>)
 800e802:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e804:	9308      	str	r3, [sp, #32]
 800e806:	4b14      	ldr	r3, [pc, #80]	@ (800e858 <_dtoa_r+0xbdc>)
 800e808:	2a00      	cmp	r2, #0
 800e80a:	d001      	beq.n	800e810 <_dtoa_r+0xb94>
 800e80c:	f7ff fa7e 	bl	800dd0c <_dtoa_r+0x90>
 800e810:	f7ff fa7e 	bl	800dd10 <_dtoa_r+0x94>
 800e814:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e816:	2b01      	cmp	r3, #1
 800e818:	dc00      	bgt.n	800e81c <_dtoa_r+0xba0>
 800e81a:	e648      	b.n	800e4ae <_dtoa_r+0x832>
 800e81c:	2001      	movs	r0, #1
 800e81e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e820:	e665      	b.n	800e4ee <_dtoa_r+0x872>
 800e822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e824:	2b00      	cmp	r3, #0
 800e826:	dc00      	bgt.n	800e82a <_dtoa_r+0xbae>
 800e828:	e6a9      	b.n	800e57e <_dtoa_r+0x902>
 800e82a:	2400      	movs	r4, #0
 800e82c:	0031      	movs	r1, r6
 800e82e:	9805      	ldr	r0, [sp, #20]
 800e830:	f7ff f99e 	bl	800db70 <quorem>
 800e834:	9b08      	ldr	r3, [sp, #32]
 800e836:	3030      	adds	r0, #48	@ 0x30
 800e838:	5518      	strb	r0, [r3, r4]
 800e83a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e83c:	3401      	adds	r4, #1
 800e83e:	0005      	movs	r5, r0
 800e840:	42a3      	cmp	r3, r4
 800e842:	ddb6      	ble.n	800e7b2 <_dtoa_r+0xb36>
 800e844:	2300      	movs	r3, #0
 800e846:	220a      	movs	r2, #10
 800e848:	9905      	ldr	r1, [sp, #20]
 800e84a:	9803      	ldr	r0, [sp, #12]
 800e84c:	f000 f974 	bl	800eb38 <__multadd>
 800e850:	9005      	str	r0, [sp, #20]
 800e852:	e7eb      	b.n	800e82c <_dtoa_r+0xbb0>
 800e854:	0800fc34 	.word	0x0800fc34
 800e858:	0800fc3c 	.word	0x0800fc3c

0800e85c <_free_r>:
 800e85c:	b570      	push	{r4, r5, r6, lr}
 800e85e:	0005      	movs	r5, r0
 800e860:	1e0c      	subs	r4, r1, #0
 800e862:	d010      	beq.n	800e886 <_free_r+0x2a>
 800e864:	3c04      	subs	r4, #4
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	da00      	bge.n	800e86e <_free_r+0x12>
 800e86c:	18e4      	adds	r4, r4, r3
 800e86e:	0028      	movs	r0, r5
 800e870:	f000 f8ea 	bl	800ea48 <__malloc_lock>
 800e874:	4a1d      	ldr	r2, [pc, #116]	@ (800e8ec <_free_r+0x90>)
 800e876:	6813      	ldr	r3, [r2, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d105      	bne.n	800e888 <_free_r+0x2c>
 800e87c:	6063      	str	r3, [r4, #4]
 800e87e:	6014      	str	r4, [r2, #0]
 800e880:	0028      	movs	r0, r5
 800e882:	f000 f8e9 	bl	800ea58 <__malloc_unlock>
 800e886:	bd70      	pop	{r4, r5, r6, pc}
 800e888:	42a3      	cmp	r3, r4
 800e88a:	d908      	bls.n	800e89e <_free_r+0x42>
 800e88c:	6820      	ldr	r0, [r4, #0]
 800e88e:	1821      	adds	r1, r4, r0
 800e890:	428b      	cmp	r3, r1
 800e892:	d1f3      	bne.n	800e87c <_free_r+0x20>
 800e894:	6819      	ldr	r1, [r3, #0]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	1809      	adds	r1, r1, r0
 800e89a:	6021      	str	r1, [r4, #0]
 800e89c:	e7ee      	b.n	800e87c <_free_r+0x20>
 800e89e:	001a      	movs	r2, r3
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d001      	beq.n	800e8aa <_free_r+0x4e>
 800e8a6:	42a3      	cmp	r3, r4
 800e8a8:	d9f9      	bls.n	800e89e <_free_r+0x42>
 800e8aa:	6811      	ldr	r1, [r2, #0]
 800e8ac:	1850      	adds	r0, r2, r1
 800e8ae:	42a0      	cmp	r0, r4
 800e8b0:	d10b      	bne.n	800e8ca <_free_r+0x6e>
 800e8b2:	6820      	ldr	r0, [r4, #0]
 800e8b4:	1809      	adds	r1, r1, r0
 800e8b6:	1850      	adds	r0, r2, r1
 800e8b8:	6011      	str	r1, [r2, #0]
 800e8ba:	4283      	cmp	r3, r0
 800e8bc:	d1e0      	bne.n	800e880 <_free_r+0x24>
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	1841      	adds	r1, r0, r1
 800e8c4:	6011      	str	r1, [r2, #0]
 800e8c6:	6053      	str	r3, [r2, #4]
 800e8c8:	e7da      	b.n	800e880 <_free_r+0x24>
 800e8ca:	42a0      	cmp	r0, r4
 800e8cc:	d902      	bls.n	800e8d4 <_free_r+0x78>
 800e8ce:	230c      	movs	r3, #12
 800e8d0:	602b      	str	r3, [r5, #0]
 800e8d2:	e7d5      	b.n	800e880 <_free_r+0x24>
 800e8d4:	6820      	ldr	r0, [r4, #0]
 800e8d6:	1821      	adds	r1, r4, r0
 800e8d8:	428b      	cmp	r3, r1
 800e8da:	d103      	bne.n	800e8e4 <_free_r+0x88>
 800e8dc:	6819      	ldr	r1, [r3, #0]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	1809      	adds	r1, r1, r0
 800e8e2:	6021      	str	r1, [r4, #0]
 800e8e4:	6063      	str	r3, [r4, #4]
 800e8e6:	6054      	str	r4, [r2, #4]
 800e8e8:	e7ca      	b.n	800e880 <_free_r+0x24>
 800e8ea:	46c0      	nop			@ (mov r8, r8)
 800e8ec:	20001ce4 	.word	0x20001ce4

0800e8f0 <malloc>:
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	4b03      	ldr	r3, [pc, #12]	@ (800e900 <malloc+0x10>)
 800e8f4:	0001      	movs	r1, r0
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	f000 f826 	bl	800e948 <_malloc_r>
 800e8fc:	bd10      	pop	{r4, pc}
 800e8fe:	46c0      	nop			@ (mov r8, r8)
 800e900:	200001a0 	.word	0x200001a0

0800e904 <sbrk_aligned>:
 800e904:	b570      	push	{r4, r5, r6, lr}
 800e906:	4e0f      	ldr	r6, [pc, #60]	@ (800e944 <sbrk_aligned+0x40>)
 800e908:	000d      	movs	r5, r1
 800e90a:	6831      	ldr	r1, [r6, #0]
 800e90c:	0004      	movs	r4, r0
 800e90e:	2900      	cmp	r1, #0
 800e910:	d102      	bne.n	800e918 <sbrk_aligned+0x14>
 800e912:	f000 fcf7 	bl	800f304 <_sbrk_r>
 800e916:	6030      	str	r0, [r6, #0]
 800e918:	0029      	movs	r1, r5
 800e91a:	0020      	movs	r0, r4
 800e91c:	f000 fcf2 	bl	800f304 <_sbrk_r>
 800e920:	1c43      	adds	r3, r0, #1
 800e922:	d103      	bne.n	800e92c <sbrk_aligned+0x28>
 800e924:	2501      	movs	r5, #1
 800e926:	426d      	negs	r5, r5
 800e928:	0028      	movs	r0, r5
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	2303      	movs	r3, #3
 800e92e:	1cc5      	adds	r5, r0, #3
 800e930:	439d      	bics	r5, r3
 800e932:	42a8      	cmp	r0, r5
 800e934:	d0f8      	beq.n	800e928 <sbrk_aligned+0x24>
 800e936:	1a29      	subs	r1, r5, r0
 800e938:	0020      	movs	r0, r4
 800e93a:	f000 fce3 	bl	800f304 <_sbrk_r>
 800e93e:	3001      	adds	r0, #1
 800e940:	d1f2      	bne.n	800e928 <sbrk_aligned+0x24>
 800e942:	e7ef      	b.n	800e924 <sbrk_aligned+0x20>
 800e944:	20001ce0 	.word	0x20001ce0

0800e948 <_malloc_r>:
 800e948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e94a:	2203      	movs	r2, #3
 800e94c:	1ccb      	adds	r3, r1, #3
 800e94e:	4393      	bics	r3, r2
 800e950:	3308      	adds	r3, #8
 800e952:	0005      	movs	r5, r0
 800e954:	001f      	movs	r7, r3
 800e956:	2b0c      	cmp	r3, #12
 800e958:	d234      	bcs.n	800e9c4 <_malloc_r+0x7c>
 800e95a:	270c      	movs	r7, #12
 800e95c:	42b9      	cmp	r1, r7
 800e95e:	d833      	bhi.n	800e9c8 <_malloc_r+0x80>
 800e960:	0028      	movs	r0, r5
 800e962:	f000 f871 	bl	800ea48 <__malloc_lock>
 800e966:	4e37      	ldr	r6, [pc, #220]	@ (800ea44 <_malloc_r+0xfc>)
 800e968:	6833      	ldr	r3, [r6, #0]
 800e96a:	001c      	movs	r4, r3
 800e96c:	2c00      	cmp	r4, #0
 800e96e:	d12f      	bne.n	800e9d0 <_malloc_r+0x88>
 800e970:	0039      	movs	r1, r7
 800e972:	0028      	movs	r0, r5
 800e974:	f7ff ffc6 	bl	800e904 <sbrk_aligned>
 800e978:	0004      	movs	r4, r0
 800e97a:	1c43      	adds	r3, r0, #1
 800e97c:	d15f      	bne.n	800ea3e <_malloc_r+0xf6>
 800e97e:	6834      	ldr	r4, [r6, #0]
 800e980:	9400      	str	r4, [sp, #0]
 800e982:	9b00      	ldr	r3, [sp, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d14a      	bne.n	800ea1e <_malloc_r+0xd6>
 800e988:	2c00      	cmp	r4, #0
 800e98a:	d052      	beq.n	800ea32 <_malloc_r+0xea>
 800e98c:	6823      	ldr	r3, [r4, #0]
 800e98e:	0028      	movs	r0, r5
 800e990:	18e3      	adds	r3, r4, r3
 800e992:	9900      	ldr	r1, [sp, #0]
 800e994:	9301      	str	r3, [sp, #4]
 800e996:	f000 fcb5 	bl	800f304 <_sbrk_r>
 800e99a:	9b01      	ldr	r3, [sp, #4]
 800e99c:	4283      	cmp	r3, r0
 800e99e:	d148      	bne.n	800ea32 <_malloc_r+0xea>
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	0028      	movs	r0, r5
 800e9a4:	1aff      	subs	r7, r7, r3
 800e9a6:	0039      	movs	r1, r7
 800e9a8:	f7ff ffac 	bl	800e904 <sbrk_aligned>
 800e9ac:	3001      	adds	r0, #1
 800e9ae:	d040      	beq.n	800ea32 <_malloc_r+0xea>
 800e9b0:	6823      	ldr	r3, [r4, #0]
 800e9b2:	19db      	adds	r3, r3, r7
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	6833      	ldr	r3, [r6, #0]
 800e9b8:	685a      	ldr	r2, [r3, #4]
 800e9ba:	2a00      	cmp	r2, #0
 800e9bc:	d133      	bne.n	800ea26 <_malloc_r+0xde>
 800e9be:	9b00      	ldr	r3, [sp, #0]
 800e9c0:	6033      	str	r3, [r6, #0]
 800e9c2:	e019      	b.n	800e9f8 <_malloc_r+0xb0>
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	dac9      	bge.n	800e95c <_malloc_r+0x14>
 800e9c8:	230c      	movs	r3, #12
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e9d0:	6821      	ldr	r1, [r4, #0]
 800e9d2:	1bc9      	subs	r1, r1, r7
 800e9d4:	d420      	bmi.n	800ea18 <_malloc_r+0xd0>
 800e9d6:	290b      	cmp	r1, #11
 800e9d8:	d90a      	bls.n	800e9f0 <_malloc_r+0xa8>
 800e9da:	19e2      	adds	r2, r4, r7
 800e9dc:	6027      	str	r7, [r4, #0]
 800e9de:	42a3      	cmp	r3, r4
 800e9e0:	d104      	bne.n	800e9ec <_malloc_r+0xa4>
 800e9e2:	6032      	str	r2, [r6, #0]
 800e9e4:	6863      	ldr	r3, [r4, #4]
 800e9e6:	6011      	str	r1, [r2, #0]
 800e9e8:	6053      	str	r3, [r2, #4]
 800e9ea:	e005      	b.n	800e9f8 <_malloc_r+0xb0>
 800e9ec:	605a      	str	r2, [r3, #4]
 800e9ee:	e7f9      	b.n	800e9e4 <_malloc_r+0x9c>
 800e9f0:	6862      	ldr	r2, [r4, #4]
 800e9f2:	42a3      	cmp	r3, r4
 800e9f4:	d10e      	bne.n	800ea14 <_malloc_r+0xcc>
 800e9f6:	6032      	str	r2, [r6, #0]
 800e9f8:	0028      	movs	r0, r5
 800e9fa:	f000 f82d 	bl	800ea58 <__malloc_unlock>
 800e9fe:	0020      	movs	r0, r4
 800ea00:	2207      	movs	r2, #7
 800ea02:	300b      	adds	r0, #11
 800ea04:	1d23      	adds	r3, r4, #4
 800ea06:	4390      	bics	r0, r2
 800ea08:	1ac2      	subs	r2, r0, r3
 800ea0a:	4298      	cmp	r0, r3
 800ea0c:	d0df      	beq.n	800e9ce <_malloc_r+0x86>
 800ea0e:	1a1b      	subs	r3, r3, r0
 800ea10:	50a3      	str	r3, [r4, r2]
 800ea12:	e7dc      	b.n	800e9ce <_malloc_r+0x86>
 800ea14:	605a      	str	r2, [r3, #4]
 800ea16:	e7ef      	b.n	800e9f8 <_malloc_r+0xb0>
 800ea18:	0023      	movs	r3, r4
 800ea1a:	6864      	ldr	r4, [r4, #4]
 800ea1c:	e7a6      	b.n	800e96c <_malloc_r+0x24>
 800ea1e:	9c00      	ldr	r4, [sp, #0]
 800ea20:	6863      	ldr	r3, [r4, #4]
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	e7ad      	b.n	800e982 <_malloc_r+0x3a>
 800ea26:	001a      	movs	r2, r3
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	42a3      	cmp	r3, r4
 800ea2c:	d1fb      	bne.n	800ea26 <_malloc_r+0xde>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e7da      	b.n	800e9e8 <_malloc_r+0xa0>
 800ea32:	230c      	movs	r3, #12
 800ea34:	0028      	movs	r0, r5
 800ea36:	602b      	str	r3, [r5, #0]
 800ea38:	f000 f80e 	bl	800ea58 <__malloc_unlock>
 800ea3c:	e7c6      	b.n	800e9cc <_malloc_r+0x84>
 800ea3e:	6007      	str	r7, [r0, #0]
 800ea40:	e7da      	b.n	800e9f8 <_malloc_r+0xb0>
 800ea42:	46c0      	nop			@ (mov r8, r8)
 800ea44:	20001ce4 	.word	0x20001ce4

0800ea48 <__malloc_lock>:
 800ea48:	b510      	push	{r4, lr}
 800ea4a:	4802      	ldr	r0, [pc, #8]	@ (800ea54 <__malloc_lock+0xc>)
 800ea4c:	f7ff f883 	bl	800db56 <__retarget_lock_acquire_recursive>
 800ea50:	bd10      	pop	{r4, pc}
 800ea52:	46c0      	nop			@ (mov r8, r8)
 800ea54:	20001cdc 	.word	0x20001cdc

0800ea58 <__malloc_unlock>:
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	4802      	ldr	r0, [pc, #8]	@ (800ea64 <__malloc_unlock+0xc>)
 800ea5c:	f7ff f87c 	bl	800db58 <__retarget_lock_release_recursive>
 800ea60:	bd10      	pop	{r4, pc}
 800ea62:	46c0      	nop			@ (mov r8, r8)
 800ea64:	20001cdc 	.word	0x20001cdc

0800ea68 <_Balloc>:
 800ea68:	b570      	push	{r4, r5, r6, lr}
 800ea6a:	69c5      	ldr	r5, [r0, #28]
 800ea6c:	0006      	movs	r6, r0
 800ea6e:	000c      	movs	r4, r1
 800ea70:	2d00      	cmp	r5, #0
 800ea72:	d10e      	bne.n	800ea92 <_Balloc+0x2a>
 800ea74:	2010      	movs	r0, #16
 800ea76:	f7ff ff3b 	bl	800e8f0 <malloc>
 800ea7a:	1e02      	subs	r2, r0, #0
 800ea7c:	61f0      	str	r0, [r6, #28]
 800ea7e:	d104      	bne.n	800ea8a <_Balloc+0x22>
 800ea80:	216b      	movs	r1, #107	@ 0x6b
 800ea82:	4b19      	ldr	r3, [pc, #100]	@ (800eae8 <_Balloc+0x80>)
 800ea84:	4819      	ldr	r0, [pc, #100]	@ (800eaec <_Balloc+0x84>)
 800ea86:	f000 fc59 	bl	800f33c <__assert_func>
 800ea8a:	6045      	str	r5, [r0, #4]
 800ea8c:	6085      	str	r5, [r0, #8]
 800ea8e:	6005      	str	r5, [r0, #0]
 800ea90:	60c5      	str	r5, [r0, #12]
 800ea92:	69f5      	ldr	r5, [r6, #28]
 800ea94:	68eb      	ldr	r3, [r5, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d013      	beq.n	800eac2 <_Balloc+0x5a>
 800ea9a:	69f3      	ldr	r3, [r6, #28]
 800ea9c:	00a2      	lsls	r2, r4, #2
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	189b      	adds	r3, r3, r2
 800eaa2:	6818      	ldr	r0, [r3, #0]
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d118      	bne.n	800eada <_Balloc+0x72>
 800eaa8:	2101      	movs	r1, #1
 800eaaa:	000d      	movs	r5, r1
 800eaac:	40a5      	lsls	r5, r4
 800eaae:	1d6a      	adds	r2, r5, #5
 800eab0:	0030      	movs	r0, r6
 800eab2:	0092      	lsls	r2, r2, #2
 800eab4:	f000 fc60 	bl	800f378 <_calloc_r>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d00c      	beq.n	800ead6 <_Balloc+0x6e>
 800eabc:	6044      	str	r4, [r0, #4]
 800eabe:	6085      	str	r5, [r0, #8]
 800eac0:	e00d      	b.n	800eade <_Balloc+0x76>
 800eac2:	2221      	movs	r2, #33	@ 0x21
 800eac4:	2104      	movs	r1, #4
 800eac6:	0030      	movs	r0, r6
 800eac8:	f000 fc56 	bl	800f378 <_calloc_r>
 800eacc:	69f3      	ldr	r3, [r6, #28]
 800eace:	60e8      	str	r0, [r5, #12]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1e1      	bne.n	800ea9a <_Balloc+0x32>
 800ead6:	2000      	movs	r0, #0
 800ead8:	bd70      	pop	{r4, r5, r6, pc}
 800eada:	6802      	ldr	r2, [r0, #0]
 800eadc:	601a      	str	r2, [r3, #0]
 800eade:	2300      	movs	r3, #0
 800eae0:	6103      	str	r3, [r0, #16]
 800eae2:	60c3      	str	r3, [r0, #12]
 800eae4:	e7f8      	b.n	800ead8 <_Balloc+0x70>
 800eae6:	46c0      	nop			@ (mov r8, r8)
 800eae8:	0800fc41 	.word	0x0800fc41
 800eaec:	0800fcc1 	.word	0x0800fcc1

0800eaf0 <_Bfree>:
 800eaf0:	b570      	push	{r4, r5, r6, lr}
 800eaf2:	69c6      	ldr	r6, [r0, #28]
 800eaf4:	0005      	movs	r5, r0
 800eaf6:	000c      	movs	r4, r1
 800eaf8:	2e00      	cmp	r6, #0
 800eafa:	d10e      	bne.n	800eb1a <_Bfree+0x2a>
 800eafc:	2010      	movs	r0, #16
 800eafe:	f7ff fef7 	bl	800e8f0 <malloc>
 800eb02:	1e02      	subs	r2, r0, #0
 800eb04:	61e8      	str	r0, [r5, #28]
 800eb06:	d104      	bne.n	800eb12 <_Bfree+0x22>
 800eb08:	218f      	movs	r1, #143	@ 0x8f
 800eb0a:	4b09      	ldr	r3, [pc, #36]	@ (800eb30 <_Bfree+0x40>)
 800eb0c:	4809      	ldr	r0, [pc, #36]	@ (800eb34 <_Bfree+0x44>)
 800eb0e:	f000 fc15 	bl	800f33c <__assert_func>
 800eb12:	6046      	str	r6, [r0, #4]
 800eb14:	6086      	str	r6, [r0, #8]
 800eb16:	6006      	str	r6, [r0, #0]
 800eb18:	60c6      	str	r6, [r0, #12]
 800eb1a:	2c00      	cmp	r4, #0
 800eb1c:	d007      	beq.n	800eb2e <_Bfree+0x3e>
 800eb1e:	69eb      	ldr	r3, [r5, #28]
 800eb20:	6862      	ldr	r2, [r4, #4]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	0092      	lsls	r2, r2, #2
 800eb26:	189b      	adds	r3, r3, r2
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	6022      	str	r2, [r4, #0]
 800eb2c:	601c      	str	r4, [r3, #0]
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	0800fc41 	.word	0x0800fc41
 800eb34:	0800fcc1 	.word	0x0800fcc1

0800eb38 <__multadd>:
 800eb38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb3a:	000f      	movs	r7, r1
 800eb3c:	9001      	str	r0, [sp, #4]
 800eb3e:	000c      	movs	r4, r1
 800eb40:	001e      	movs	r6, r3
 800eb42:	2000      	movs	r0, #0
 800eb44:	690d      	ldr	r5, [r1, #16]
 800eb46:	3714      	adds	r7, #20
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	b299      	uxth	r1, r3
 800eb4e:	4351      	muls	r1, r2
 800eb50:	0c1b      	lsrs	r3, r3, #16
 800eb52:	4353      	muls	r3, r2
 800eb54:	1989      	adds	r1, r1, r6
 800eb56:	0c0e      	lsrs	r6, r1, #16
 800eb58:	199b      	adds	r3, r3, r6
 800eb5a:	0c1e      	lsrs	r6, r3, #16
 800eb5c:	b289      	uxth	r1, r1
 800eb5e:	041b      	lsls	r3, r3, #16
 800eb60:	185b      	adds	r3, r3, r1
 800eb62:	c708      	stmia	r7!, {r3}
 800eb64:	4285      	cmp	r5, r0
 800eb66:	dcef      	bgt.n	800eb48 <__multadd+0x10>
 800eb68:	2e00      	cmp	r6, #0
 800eb6a:	d022      	beq.n	800ebb2 <__multadd+0x7a>
 800eb6c:	68a3      	ldr	r3, [r4, #8]
 800eb6e:	42ab      	cmp	r3, r5
 800eb70:	dc19      	bgt.n	800eba6 <__multadd+0x6e>
 800eb72:	6861      	ldr	r1, [r4, #4]
 800eb74:	9801      	ldr	r0, [sp, #4]
 800eb76:	3101      	adds	r1, #1
 800eb78:	f7ff ff76 	bl	800ea68 <_Balloc>
 800eb7c:	1e07      	subs	r7, r0, #0
 800eb7e:	d105      	bne.n	800eb8c <__multadd+0x54>
 800eb80:	003a      	movs	r2, r7
 800eb82:	21ba      	movs	r1, #186	@ 0xba
 800eb84:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb8 <__multadd+0x80>)
 800eb86:	480d      	ldr	r0, [pc, #52]	@ (800ebbc <__multadd+0x84>)
 800eb88:	f000 fbd8 	bl	800f33c <__assert_func>
 800eb8c:	0021      	movs	r1, r4
 800eb8e:	6922      	ldr	r2, [r4, #16]
 800eb90:	310c      	adds	r1, #12
 800eb92:	3202      	adds	r2, #2
 800eb94:	0092      	lsls	r2, r2, #2
 800eb96:	300c      	adds	r0, #12
 800eb98:	f000 fbc6 	bl	800f328 <memcpy>
 800eb9c:	0021      	movs	r1, r4
 800eb9e:	9801      	ldr	r0, [sp, #4]
 800eba0:	f7ff ffa6 	bl	800eaf0 <_Bfree>
 800eba4:	003c      	movs	r4, r7
 800eba6:	1d2b      	adds	r3, r5, #4
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	18e3      	adds	r3, r4, r3
 800ebac:	3501      	adds	r5, #1
 800ebae:	605e      	str	r6, [r3, #4]
 800ebb0:	6125      	str	r5, [r4, #16]
 800ebb2:	0020      	movs	r0, r4
 800ebb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ebb6:	46c0      	nop			@ (mov r8, r8)
 800ebb8:	0800fcb0 	.word	0x0800fcb0
 800ebbc:	0800fcc1 	.word	0x0800fcc1

0800ebc0 <__hi0bits>:
 800ebc0:	2280      	movs	r2, #128	@ 0x80
 800ebc2:	0003      	movs	r3, r0
 800ebc4:	0252      	lsls	r2, r2, #9
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d201      	bcs.n	800ebd0 <__hi0bits+0x10>
 800ebcc:	041b      	lsls	r3, r3, #16
 800ebce:	3010      	adds	r0, #16
 800ebd0:	2280      	movs	r2, #128	@ 0x80
 800ebd2:	0452      	lsls	r2, r2, #17
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d201      	bcs.n	800ebdc <__hi0bits+0x1c>
 800ebd8:	3008      	adds	r0, #8
 800ebda:	021b      	lsls	r3, r3, #8
 800ebdc:	2280      	movs	r2, #128	@ 0x80
 800ebde:	0552      	lsls	r2, r2, #21
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d201      	bcs.n	800ebe8 <__hi0bits+0x28>
 800ebe4:	3004      	adds	r0, #4
 800ebe6:	011b      	lsls	r3, r3, #4
 800ebe8:	2280      	movs	r2, #128	@ 0x80
 800ebea:	05d2      	lsls	r2, r2, #23
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d201      	bcs.n	800ebf4 <__hi0bits+0x34>
 800ebf0:	3002      	adds	r0, #2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	db03      	blt.n	800ec00 <__hi0bits+0x40>
 800ebf8:	3001      	adds	r0, #1
 800ebfa:	4213      	tst	r3, r2
 800ebfc:	d100      	bne.n	800ec00 <__hi0bits+0x40>
 800ebfe:	2020      	movs	r0, #32
 800ec00:	4770      	bx	lr

0800ec02 <__lo0bits>:
 800ec02:	6803      	ldr	r3, [r0, #0]
 800ec04:	0001      	movs	r1, r0
 800ec06:	2207      	movs	r2, #7
 800ec08:	0018      	movs	r0, r3
 800ec0a:	4010      	ands	r0, r2
 800ec0c:	4213      	tst	r3, r2
 800ec0e:	d00d      	beq.n	800ec2c <__lo0bits+0x2a>
 800ec10:	3a06      	subs	r2, #6
 800ec12:	2000      	movs	r0, #0
 800ec14:	4213      	tst	r3, r2
 800ec16:	d105      	bne.n	800ec24 <__lo0bits+0x22>
 800ec18:	3002      	adds	r0, #2
 800ec1a:	4203      	tst	r3, r0
 800ec1c:	d003      	beq.n	800ec26 <__lo0bits+0x24>
 800ec1e:	40d3      	lsrs	r3, r2
 800ec20:	0010      	movs	r0, r2
 800ec22:	600b      	str	r3, [r1, #0]
 800ec24:	4770      	bx	lr
 800ec26:	089b      	lsrs	r3, r3, #2
 800ec28:	600b      	str	r3, [r1, #0]
 800ec2a:	e7fb      	b.n	800ec24 <__lo0bits+0x22>
 800ec2c:	b29a      	uxth	r2, r3
 800ec2e:	2a00      	cmp	r2, #0
 800ec30:	d101      	bne.n	800ec36 <__lo0bits+0x34>
 800ec32:	2010      	movs	r0, #16
 800ec34:	0c1b      	lsrs	r3, r3, #16
 800ec36:	b2da      	uxtb	r2, r3
 800ec38:	2a00      	cmp	r2, #0
 800ec3a:	d101      	bne.n	800ec40 <__lo0bits+0x3e>
 800ec3c:	3008      	adds	r0, #8
 800ec3e:	0a1b      	lsrs	r3, r3, #8
 800ec40:	071a      	lsls	r2, r3, #28
 800ec42:	d101      	bne.n	800ec48 <__lo0bits+0x46>
 800ec44:	3004      	adds	r0, #4
 800ec46:	091b      	lsrs	r3, r3, #4
 800ec48:	079a      	lsls	r2, r3, #30
 800ec4a:	d101      	bne.n	800ec50 <__lo0bits+0x4e>
 800ec4c:	3002      	adds	r0, #2
 800ec4e:	089b      	lsrs	r3, r3, #2
 800ec50:	07da      	lsls	r2, r3, #31
 800ec52:	d4e9      	bmi.n	800ec28 <__lo0bits+0x26>
 800ec54:	3001      	adds	r0, #1
 800ec56:	085b      	lsrs	r3, r3, #1
 800ec58:	d1e6      	bne.n	800ec28 <__lo0bits+0x26>
 800ec5a:	2020      	movs	r0, #32
 800ec5c:	e7e2      	b.n	800ec24 <__lo0bits+0x22>
	...

0800ec60 <__i2b>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	000c      	movs	r4, r1
 800ec64:	2101      	movs	r1, #1
 800ec66:	f7ff feff 	bl	800ea68 <_Balloc>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d107      	bne.n	800ec7e <__i2b+0x1e>
 800ec6e:	2146      	movs	r1, #70	@ 0x46
 800ec70:	4c05      	ldr	r4, [pc, #20]	@ (800ec88 <__i2b+0x28>)
 800ec72:	0002      	movs	r2, r0
 800ec74:	4b05      	ldr	r3, [pc, #20]	@ (800ec8c <__i2b+0x2c>)
 800ec76:	0020      	movs	r0, r4
 800ec78:	31ff      	adds	r1, #255	@ 0xff
 800ec7a:	f000 fb5f 	bl	800f33c <__assert_func>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	6144      	str	r4, [r0, #20]
 800ec82:	6103      	str	r3, [r0, #16]
 800ec84:	bd10      	pop	{r4, pc}
 800ec86:	46c0      	nop			@ (mov r8, r8)
 800ec88:	0800fcc1 	.word	0x0800fcc1
 800ec8c:	0800fcb0 	.word	0x0800fcb0

0800ec90 <__multiply>:
 800ec90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec92:	0014      	movs	r4, r2
 800ec94:	690a      	ldr	r2, [r1, #16]
 800ec96:	6923      	ldr	r3, [r4, #16]
 800ec98:	000d      	movs	r5, r1
 800ec9a:	b089      	sub	sp, #36	@ 0x24
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	db02      	blt.n	800eca6 <__multiply+0x16>
 800eca0:	0023      	movs	r3, r4
 800eca2:	000c      	movs	r4, r1
 800eca4:	001d      	movs	r5, r3
 800eca6:	6927      	ldr	r7, [r4, #16]
 800eca8:	692e      	ldr	r6, [r5, #16]
 800ecaa:	6861      	ldr	r1, [r4, #4]
 800ecac:	19bb      	adds	r3, r7, r6
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	68a3      	ldr	r3, [r4, #8]
 800ecb2:	19ba      	adds	r2, r7, r6
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	da00      	bge.n	800ecba <__multiply+0x2a>
 800ecb8:	3101      	adds	r1, #1
 800ecba:	f7ff fed5 	bl	800ea68 <_Balloc>
 800ecbe:	4684      	mov	ip, r0
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d106      	bne.n	800ecd2 <__multiply+0x42>
 800ecc4:	21b1      	movs	r1, #177	@ 0xb1
 800ecc6:	4662      	mov	r2, ip
 800ecc8:	4b44      	ldr	r3, [pc, #272]	@ (800eddc <__multiply+0x14c>)
 800ecca:	4845      	ldr	r0, [pc, #276]	@ (800ede0 <__multiply+0x150>)
 800eccc:	0049      	lsls	r1, r1, #1
 800ecce:	f000 fb35 	bl	800f33c <__assert_func>
 800ecd2:	0002      	movs	r2, r0
 800ecd4:	19bb      	adds	r3, r7, r6
 800ecd6:	3214      	adds	r2, #20
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	18d3      	adds	r3, r2, r3
 800ecdc:	9301      	str	r3, [sp, #4]
 800ecde:	2100      	movs	r1, #0
 800ece0:	0013      	movs	r3, r2
 800ece2:	9801      	ldr	r0, [sp, #4]
 800ece4:	4283      	cmp	r3, r0
 800ece6:	d328      	bcc.n	800ed3a <__multiply+0xaa>
 800ece8:	0023      	movs	r3, r4
 800ecea:	00bf      	lsls	r7, r7, #2
 800ecec:	3314      	adds	r3, #20
 800ecee:	9304      	str	r3, [sp, #16]
 800ecf0:	3514      	adds	r5, #20
 800ecf2:	19db      	adds	r3, r3, r7
 800ecf4:	00b6      	lsls	r6, r6, #2
 800ecf6:	9302      	str	r3, [sp, #8]
 800ecf8:	19ab      	adds	r3, r5, r6
 800ecfa:	9307      	str	r3, [sp, #28]
 800ecfc:	2304      	movs	r3, #4
 800ecfe:	9305      	str	r3, [sp, #20]
 800ed00:	0023      	movs	r3, r4
 800ed02:	9902      	ldr	r1, [sp, #8]
 800ed04:	3315      	adds	r3, #21
 800ed06:	4299      	cmp	r1, r3
 800ed08:	d305      	bcc.n	800ed16 <__multiply+0x86>
 800ed0a:	1b0c      	subs	r4, r1, r4
 800ed0c:	3c15      	subs	r4, #21
 800ed0e:	08a4      	lsrs	r4, r4, #2
 800ed10:	3401      	adds	r4, #1
 800ed12:	00a3      	lsls	r3, r4, #2
 800ed14:	9305      	str	r3, [sp, #20]
 800ed16:	9b07      	ldr	r3, [sp, #28]
 800ed18:	429d      	cmp	r5, r3
 800ed1a:	d310      	bcc.n	800ed3e <__multiply+0xae>
 800ed1c:	9b00      	ldr	r3, [sp, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	dd05      	ble.n	800ed2e <__multiply+0x9e>
 800ed22:	9b01      	ldr	r3, [sp, #4]
 800ed24:	3b04      	subs	r3, #4
 800ed26:	9301      	str	r3, [sp, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d052      	beq.n	800edd4 <__multiply+0x144>
 800ed2e:	4663      	mov	r3, ip
 800ed30:	4660      	mov	r0, ip
 800ed32:	9a00      	ldr	r2, [sp, #0]
 800ed34:	611a      	str	r2, [r3, #16]
 800ed36:	b009      	add	sp, #36	@ 0x24
 800ed38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed3a:	c302      	stmia	r3!, {r1}
 800ed3c:	e7d1      	b.n	800ece2 <__multiply+0x52>
 800ed3e:	682c      	ldr	r4, [r5, #0]
 800ed40:	b2a4      	uxth	r4, r4
 800ed42:	2c00      	cmp	r4, #0
 800ed44:	d01f      	beq.n	800ed86 <__multiply+0xf6>
 800ed46:	2300      	movs	r3, #0
 800ed48:	0017      	movs	r7, r2
 800ed4a:	9e04      	ldr	r6, [sp, #16]
 800ed4c:	9303      	str	r3, [sp, #12]
 800ed4e:	ce08      	ldmia	r6!, {r3}
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	9306      	str	r3, [sp, #24]
 800ed54:	466b      	mov	r3, sp
 800ed56:	8b1b      	ldrh	r3, [r3, #24]
 800ed58:	b288      	uxth	r0, r1
 800ed5a:	4363      	muls	r3, r4
 800ed5c:	181b      	adds	r3, r3, r0
 800ed5e:	9803      	ldr	r0, [sp, #12]
 800ed60:	0c09      	lsrs	r1, r1, #16
 800ed62:	181b      	adds	r3, r3, r0
 800ed64:	9806      	ldr	r0, [sp, #24]
 800ed66:	0c00      	lsrs	r0, r0, #16
 800ed68:	4360      	muls	r0, r4
 800ed6a:	1840      	adds	r0, r0, r1
 800ed6c:	0c19      	lsrs	r1, r3, #16
 800ed6e:	1841      	adds	r1, r0, r1
 800ed70:	0c08      	lsrs	r0, r1, #16
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	0409      	lsls	r1, r1, #16
 800ed76:	4319      	orrs	r1, r3
 800ed78:	9b02      	ldr	r3, [sp, #8]
 800ed7a:	9003      	str	r0, [sp, #12]
 800ed7c:	c702      	stmia	r7!, {r1}
 800ed7e:	42b3      	cmp	r3, r6
 800ed80:	d8e5      	bhi.n	800ed4e <__multiply+0xbe>
 800ed82:	9b05      	ldr	r3, [sp, #20]
 800ed84:	50d0      	str	r0, [r2, r3]
 800ed86:	682c      	ldr	r4, [r5, #0]
 800ed88:	0c24      	lsrs	r4, r4, #16
 800ed8a:	d020      	beq.n	800edce <__multiply+0x13e>
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	0010      	movs	r0, r2
 800ed90:	6813      	ldr	r3, [r2, #0]
 800ed92:	9e04      	ldr	r6, [sp, #16]
 800ed94:	9103      	str	r1, [sp, #12]
 800ed96:	6831      	ldr	r1, [r6, #0]
 800ed98:	6807      	ldr	r7, [r0, #0]
 800ed9a:	b289      	uxth	r1, r1
 800ed9c:	4361      	muls	r1, r4
 800ed9e:	0c3f      	lsrs	r7, r7, #16
 800eda0:	19c9      	adds	r1, r1, r7
 800eda2:	9f03      	ldr	r7, [sp, #12]
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	19c9      	adds	r1, r1, r7
 800eda8:	040f      	lsls	r7, r1, #16
 800edaa:	431f      	orrs	r7, r3
 800edac:	6007      	str	r7, [r0, #0]
 800edae:	ce80      	ldmia	r6!, {r7}
 800edb0:	6843      	ldr	r3, [r0, #4]
 800edb2:	0c3f      	lsrs	r7, r7, #16
 800edb4:	4367      	muls	r7, r4
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	0c09      	lsrs	r1, r1, #16
 800edba:	18fb      	adds	r3, r7, r3
 800edbc:	185b      	adds	r3, r3, r1
 800edbe:	0c19      	lsrs	r1, r3, #16
 800edc0:	9103      	str	r1, [sp, #12]
 800edc2:	9902      	ldr	r1, [sp, #8]
 800edc4:	3004      	adds	r0, #4
 800edc6:	42b1      	cmp	r1, r6
 800edc8:	d8e5      	bhi.n	800ed96 <__multiply+0x106>
 800edca:	9905      	ldr	r1, [sp, #20]
 800edcc:	5053      	str	r3, [r2, r1]
 800edce:	3504      	adds	r5, #4
 800edd0:	3204      	adds	r2, #4
 800edd2:	e7a0      	b.n	800ed16 <__multiply+0x86>
 800edd4:	9b00      	ldr	r3, [sp, #0]
 800edd6:	3b01      	subs	r3, #1
 800edd8:	9300      	str	r3, [sp, #0]
 800edda:	e79f      	b.n	800ed1c <__multiply+0x8c>
 800eddc:	0800fcb0 	.word	0x0800fcb0
 800ede0:	0800fcc1 	.word	0x0800fcc1

0800ede4 <__pow5mult>:
 800ede4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ede6:	2303      	movs	r3, #3
 800ede8:	0015      	movs	r5, r2
 800edea:	0007      	movs	r7, r0
 800edec:	000e      	movs	r6, r1
 800edee:	401a      	ands	r2, r3
 800edf0:	421d      	tst	r5, r3
 800edf2:	d008      	beq.n	800ee06 <__pow5mult+0x22>
 800edf4:	4925      	ldr	r1, [pc, #148]	@ (800ee8c <__pow5mult+0xa8>)
 800edf6:	3a01      	subs	r2, #1
 800edf8:	0092      	lsls	r2, r2, #2
 800edfa:	5852      	ldr	r2, [r2, r1]
 800edfc:	2300      	movs	r3, #0
 800edfe:	0031      	movs	r1, r6
 800ee00:	f7ff fe9a 	bl	800eb38 <__multadd>
 800ee04:	0006      	movs	r6, r0
 800ee06:	10ad      	asrs	r5, r5, #2
 800ee08:	d03d      	beq.n	800ee86 <__pow5mult+0xa2>
 800ee0a:	69fc      	ldr	r4, [r7, #28]
 800ee0c:	2c00      	cmp	r4, #0
 800ee0e:	d10f      	bne.n	800ee30 <__pow5mult+0x4c>
 800ee10:	2010      	movs	r0, #16
 800ee12:	f7ff fd6d 	bl	800e8f0 <malloc>
 800ee16:	1e02      	subs	r2, r0, #0
 800ee18:	61f8      	str	r0, [r7, #28]
 800ee1a:	d105      	bne.n	800ee28 <__pow5mult+0x44>
 800ee1c:	21b4      	movs	r1, #180	@ 0xb4
 800ee1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ee90 <__pow5mult+0xac>)
 800ee20:	481c      	ldr	r0, [pc, #112]	@ (800ee94 <__pow5mult+0xb0>)
 800ee22:	31ff      	adds	r1, #255	@ 0xff
 800ee24:	f000 fa8a 	bl	800f33c <__assert_func>
 800ee28:	6044      	str	r4, [r0, #4]
 800ee2a:	6084      	str	r4, [r0, #8]
 800ee2c:	6004      	str	r4, [r0, #0]
 800ee2e:	60c4      	str	r4, [r0, #12]
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	689c      	ldr	r4, [r3, #8]
 800ee34:	9301      	str	r3, [sp, #4]
 800ee36:	2c00      	cmp	r4, #0
 800ee38:	d108      	bne.n	800ee4c <__pow5mult+0x68>
 800ee3a:	0038      	movs	r0, r7
 800ee3c:	4916      	ldr	r1, [pc, #88]	@ (800ee98 <__pow5mult+0xb4>)
 800ee3e:	f7ff ff0f 	bl	800ec60 <__i2b>
 800ee42:	9b01      	ldr	r3, [sp, #4]
 800ee44:	0004      	movs	r4, r0
 800ee46:	6098      	str	r0, [r3, #8]
 800ee48:	2300      	movs	r3, #0
 800ee4a:	6003      	str	r3, [r0, #0]
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	421d      	tst	r5, r3
 800ee50:	d00a      	beq.n	800ee68 <__pow5mult+0x84>
 800ee52:	0031      	movs	r1, r6
 800ee54:	0022      	movs	r2, r4
 800ee56:	0038      	movs	r0, r7
 800ee58:	f7ff ff1a 	bl	800ec90 <__multiply>
 800ee5c:	0031      	movs	r1, r6
 800ee5e:	9001      	str	r0, [sp, #4]
 800ee60:	0038      	movs	r0, r7
 800ee62:	f7ff fe45 	bl	800eaf0 <_Bfree>
 800ee66:	9e01      	ldr	r6, [sp, #4]
 800ee68:	106d      	asrs	r5, r5, #1
 800ee6a:	d00c      	beq.n	800ee86 <__pow5mult+0xa2>
 800ee6c:	6820      	ldr	r0, [r4, #0]
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d107      	bne.n	800ee82 <__pow5mult+0x9e>
 800ee72:	0022      	movs	r2, r4
 800ee74:	0021      	movs	r1, r4
 800ee76:	0038      	movs	r0, r7
 800ee78:	f7ff ff0a 	bl	800ec90 <__multiply>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	6020      	str	r0, [r4, #0]
 800ee80:	6003      	str	r3, [r0, #0]
 800ee82:	0004      	movs	r4, r0
 800ee84:	e7e2      	b.n	800ee4c <__pow5mult+0x68>
 800ee86:	0030      	movs	r0, r6
 800ee88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee8a:	46c0      	nop			@ (mov r8, r8)
 800ee8c:	0800fd74 	.word	0x0800fd74
 800ee90:	0800fc41 	.word	0x0800fc41
 800ee94:	0800fcc1 	.word	0x0800fcc1
 800ee98:	00000271 	.word	0x00000271

0800ee9c <__lshift>:
 800ee9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee9e:	000c      	movs	r4, r1
 800eea0:	0016      	movs	r6, r2
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	1157      	asrs	r7, r2, #5
 800eea6:	b085      	sub	sp, #20
 800eea8:	18fb      	adds	r3, r7, r3
 800eeaa:	9301      	str	r3, [sp, #4]
 800eeac:	3301      	adds	r3, #1
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	6849      	ldr	r1, [r1, #4]
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	9002      	str	r0, [sp, #8]
 800eeb6:	9a00      	ldr	r2, [sp, #0]
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	db10      	blt.n	800eede <__lshift+0x42>
 800eebc:	9802      	ldr	r0, [sp, #8]
 800eebe:	f7ff fdd3 	bl	800ea68 <_Balloc>
 800eec2:	2300      	movs	r3, #0
 800eec4:	0001      	movs	r1, r0
 800eec6:	0005      	movs	r5, r0
 800eec8:	001a      	movs	r2, r3
 800eeca:	3114      	adds	r1, #20
 800eecc:	4298      	cmp	r0, r3
 800eece:	d10c      	bne.n	800eeea <__lshift+0x4e>
 800eed0:	21ef      	movs	r1, #239	@ 0xef
 800eed2:	002a      	movs	r2, r5
 800eed4:	4b25      	ldr	r3, [pc, #148]	@ (800ef6c <__lshift+0xd0>)
 800eed6:	4826      	ldr	r0, [pc, #152]	@ (800ef70 <__lshift+0xd4>)
 800eed8:	0049      	lsls	r1, r1, #1
 800eeda:	f000 fa2f 	bl	800f33c <__assert_func>
 800eede:	3101      	adds	r1, #1
 800eee0:	005b      	lsls	r3, r3, #1
 800eee2:	e7e8      	b.n	800eeb6 <__lshift+0x1a>
 800eee4:	0098      	lsls	r0, r3, #2
 800eee6:	500a      	str	r2, [r1, r0]
 800eee8:	3301      	adds	r3, #1
 800eeea:	42bb      	cmp	r3, r7
 800eeec:	dbfa      	blt.n	800eee4 <__lshift+0x48>
 800eeee:	43fb      	mvns	r3, r7
 800eef0:	17db      	asrs	r3, r3, #31
 800eef2:	401f      	ands	r7, r3
 800eef4:	00bf      	lsls	r7, r7, #2
 800eef6:	0023      	movs	r3, r4
 800eef8:	201f      	movs	r0, #31
 800eefa:	19c9      	adds	r1, r1, r7
 800eefc:	0037      	movs	r7, r6
 800eefe:	6922      	ldr	r2, [r4, #16]
 800ef00:	3314      	adds	r3, #20
 800ef02:	0092      	lsls	r2, r2, #2
 800ef04:	189a      	adds	r2, r3, r2
 800ef06:	4007      	ands	r7, r0
 800ef08:	4206      	tst	r6, r0
 800ef0a:	d029      	beq.n	800ef60 <__lshift+0xc4>
 800ef0c:	3001      	adds	r0, #1
 800ef0e:	1bc0      	subs	r0, r0, r7
 800ef10:	9003      	str	r0, [sp, #12]
 800ef12:	468c      	mov	ip, r1
 800ef14:	2000      	movs	r0, #0
 800ef16:	681e      	ldr	r6, [r3, #0]
 800ef18:	40be      	lsls	r6, r7
 800ef1a:	4306      	orrs	r6, r0
 800ef1c:	4660      	mov	r0, ip
 800ef1e:	c040      	stmia	r0!, {r6}
 800ef20:	4684      	mov	ip, r0
 800ef22:	9e03      	ldr	r6, [sp, #12]
 800ef24:	cb01      	ldmia	r3!, {r0}
 800ef26:	40f0      	lsrs	r0, r6
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d8f4      	bhi.n	800ef16 <__lshift+0x7a>
 800ef2c:	0026      	movs	r6, r4
 800ef2e:	3615      	adds	r6, #21
 800ef30:	2304      	movs	r3, #4
 800ef32:	42b2      	cmp	r2, r6
 800ef34:	d304      	bcc.n	800ef40 <__lshift+0xa4>
 800ef36:	1b13      	subs	r3, r2, r4
 800ef38:	3b15      	subs	r3, #21
 800ef3a:	089b      	lsrs	r3, r3, #2
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	50c8      	str	r0, [r1, r3]
 800ef42:	2800      	cmp	r0, #0
 800ef44:	d002      	beq.n	800ef4c <__lshift+0xb0>
 800ef46:	9b01      	ldr	r3, [sp, #4]
 800ef48:	3302      	adds	r3, #2
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	9b00      	ldr	r3, [sp, #0]
 800ef4e:	9802      	ldr	r0, [sp, #8]
 800ef50:	3b01      	subs	r3, #1
 800ef52:	0021      	movs	r1, r4
 800ef54:	612b      	str	r3, [r5, #16]
 800ef56:	f7ff fdcb 	bl	800eaf0 <_Bfree>
 800ef5a:	0028      	movs	r0, r5
 800ef5c:	b005      	add	sp, #20
 800ef5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef60:	cb01      	ldmia	r3!, {r0}
 800ef62:	c101      	stmia	r1!, {r0}
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d8fb      	bhi.n	800ef60 <__lshift+0xc4>
 800ef68:	e7f0      	b.n	800ef4c <__lshift+0xb0>
 800ef6a:	46c0      	nop			@ (mov r8, r8)
 800ef6c:	0800fcb0 	.word	0x0800fcb0
 800ef70:	0800fcc1 	.word	0x0800fcc1

0800ef74 <__mcmp>:
 800ef74:	b530      	push	{r4, r5, lr}
 800ef76:	690b      	ldr	r3, [r1, #16]
 800ef78:	6904      	ldr	r4, [r0, #16]
 800ef7a:	0002      	movs	r2, r0
 800ef7c:	1ae0      	subs	r0, r4, r3
 800ef7e:	429c      	cmp	r4, r3
 800ef80:	d10f      	bne.n	800efa2 <__mcmp+0x2e>
 800ef82:	3214      	adds	r2, #20
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	3114      	adds	r1, #20
 800ef88:	0014      	movs	r4, r2
 800ef8a:	18c9      	adds	r1, r1, r3
 800ef8c:	18d2      	adds	r2, r2, r3
 800ef8e:	3a04      	subs	r2, #4
 800ef90:	3904      	subs	r1, #4
 800ef92:	6815      	ldr	r5, [r2, #0]
 800ef94:	680b      	ldr	r3, [r1, #0]
 800ef96:	429d      	cmp	r5, r3
 800ef98:	d004      	beq.n	800efa4 <__mcmp+0x30>
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	429d      	cmp	r5, r3
 800ef9e:	d200      	bcs.n	800efa2 <__mcmp+0x2e>
 800efa0:	3802      	subs	r0, #2
 800efa2:	bd30      	pop	{r4, r5, pc}
 800efa4:	4294      	cmp	r4, r2
 800efa6:	d3f2      	bcc.n	800ef8e <__mcmp+0x1a>
 800efa8:	e7fb      	b.n	800efa2 <__mcmp+0x2e>
	...

0800efac <__mdiff>:
 800efac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efae:	000c      	movs	r4, r1
 800efb0:	b087      	sub	sp, #28
 800efb2:	9000      	str	r0, [sp, #0]
 800efb4:	0011      	movs	r1, r2
 800efb6:	0020      	movs	r0, r4
 800efb8:	0017      	movs	r7, r2
 800efba:	f7ff ffdb 	bl	800ef74 <__mcmp>
 800efbe:	1e05      	subs	r5, r0, #0
 800efc0:	d110      	bne.n	800efe4 <__mdiff+0x38>
 800efc2:	0001      	movs	r1, r0
 800efc4:	9800      	ldr	r0, [sp, #0]
 800efc6:	f7ff fd4f 	bl	800ea68 <_Balloc>
 800efca:	1e02      	subs	r2, r0, #0
 800efcc:	d104      	bne.n	800efd8 <__mdiff+0x2c>
 800efce:	4b40      	ldr	r3, [pc, #256]	@ (800f0d0 <__mdiff+0x124>)
 800efd0:	4840      	ldr	r0, [pc, #256]	@ (800f0d4 <__mdiff+0x128>)
 800efd2:	4941      	ldr	r1, [pc, #260]	@ (800f0d8 <__mdiff+0x12c>)
 800efd4:	f000 f9b2 	bl	800f33c <__assert_func>
 800efd8:	2301      	movs	r3, #1
 800efda:	6145      	str	r5, [r0, #20]
 800efdc:	6103      	str	r3, [r0, #16]
 800efde:	0010      	movs	r0, r2
 800efe0:	b007      	add	sp, #28
 800efe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efe4:	2600      	movs	r6, #0
 800efe6:	42b0      	cmp	r0, r6
 800efe8:	da03      	bge.n	800eff2 <__mdiff+0x46>
 800efea:	0023      	movs	r3, r4
 800efec:	003c      	movs	r4, r7
 800efee:	001f      	movs	r7, r3
 800eff0:	3601      	adds	r6, #1
 800eff2:	6861      	ldr	r1, [r4, #4]
 800eff4:	9800      	ldr	r0, [sp, #0]
 800eff6:	f7ff fd37 	bl	800ea68 <_Balloc>
 800effa:	1e02      	subs	r2, r0, #0
 800effc:	d103      	bne.n	800f006 <__mdiff+0x5a>
 800effe:	4b34      	ldr	r3, [pc, #208]	@ (800f0d0 <__mdiff+0x124>)
 800f000:	4834      	ldr	r0, [pc, #208]	@ (800f0d4 <__mdiff+0x128>)
 800f002:	4936      	ldr	r1, [pc, #216]	@ (800f0dc <__mdiff+0x130>)
 800f004:	e7e6      	b.n	800efd4 <__mdiff+0x28>
 800f006:	6923      	ldr	r3, [r4, #16]
 800f008:	3414      	adds	r4, #20
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	18e3      	adds	r3, r4, r3
 800f010:	0021      	movs	r1, r4
 800f012:	9401      	str	r4, [sp, #4]
 800f014:	003c      	movs	r4, r7
 800f016:	9302      	str	r3, [sp, #8]
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	3414      	adds	r4, #20
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	18e3      	adds	r3, r4, r3
 800f020:	9303      	str	r3, [sp, #12]
 800f022:	0003      	movs	r3, r0
 800f024:	60c6      	str	r6, [r0, #12]
 800f026:	468c      	mov	ip, r1
 800f028:	2000      	movs	r0, #0
 800f02a:	3314      	adds	r3, #20
 800f02c:	9304      	str	r3, [sp, #16]
 800f02e:	9305      	str	r3, [sp, #20]
 800f030:	4663      	mov	r3, ip
 800f032:	cb20      	ldmia	r3!, {r5}
 800f034:	b2a9      	uxth	r1, r5
 800f036:	000e      	movs	r6, r1
 800f038:	469c      	mov	ip, r3
 800f03a:	cc08      	ldmia	r4!, {r3}
 800f03c:	0c2d      	lsrs	r5, r5, #16
 800f03e:	b299      	uxth	r1, r3
 800f040:	1a71      	subs	r1, r6, r1
 800f042:	1809      	adds	r1, r1, r0
 800f044:	0c1b      	lsrs	r3, r3, #16
 800f046:	1408      	asrs	r0, r1, #16
 800f048:	1aeb      	subs	r3, r5, r3
 800f04a:	181b      	adds	r3, r3, r0
 800f04c:	1418      	asrs	r0, r3, #16
 800f04e:	b289      	uxth	r1, r1
 800f050:	041b      	lsls	r3, r3, #16
 800f052:	4319      	orrs	r1, r3
 800f054:	9b05      	ldr	r3, [sp, #20]
 800f056:	c302      	stmia	r3!, {r1}
 800f058:	9305      	str	r3, [sp, #20]
 800f05a:	9b03      	ldr	r3, [sp, #12]
 800f05c:	42a3      	cmp	r3, r4
 800f05e:	d8e7      	bhi.n	800f030 <__mdiff+0x84>
 800f060:	0039      	movs	r1, r7
 800f062:	9c03      	ldr	r4, [sp, #12]
 800f064:	3115      	adds	r1, #21
 800f066:	2304      	movs	r3, #4
 800f068:	428c      	cmp	r4, r1
 800f06a:	d304      	bcc.n	800f076 <__mdiff+0xca>
 800f06c:	1be3      	subs	r3, r4, r7
 800f06e:	3b15      	subs	r3, #21
 800f070:	089b      	lsrs	r3, r3, #2
 800f072:	3301      	adds	r3, #1
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	9901      	ldr	r1, [sp, #4]
 800f078:	18cd      	adds	r5, r1, r3
 800f07a:	9904      	ldr	r1, [sp, #16]
 800f07c:	002e      	movs	r6, r5
 800f07e:	18cb      	adds	r3, r1, r3
 800f080:	001f      	movs	r7, r3
 800f082:	9902      	ldr	r1, [sp, #8]
 800f084:	428e      	cmp	r6, r1
 800f086:	d311      	bcc.n	800f0ac <__mdiff+0x100>
 800f088:	9c02      	ldr	r4, [sp, #8]
 800f08a:	1ee9      	subs	r1, r5, #3
 800f08c:	2000      	movs	r0, #0
 800f08e:	428c      	cmp	r4, r1
 800f090:	d304      	bcc.n	800f09c <__mdiff+0xf0>
 800f092:	0021      	movs	r1, r4
 800f094:	3103      	adds	r1, #3
 800f096:	1b49      	subs	r1, r1, r5
 800f098:	0889      	lsrs	r1, r1, #2
 800f09a:	0088      	lsls	r0, r1, #2
 800f09c:	181b      	adds	r3, r3, r0
 800f09e:	3b04      	subs	r3, #4
 800f0a0:	6819      	ldr	r1, [r3, #0]
 800f0a2:	2900      	cmp	r1, #0
 800f0a4:	d010      	beq.n	800f0c8 <__mdiff+0x11c>
 800f0a6:	9b00      	ldr	r3, [sp, #0]
 800f0a8:	6113      	str	r3, [r2, #16]
 800f0aa:	e798      	b.n	800efde <__mdiff+0x32>
 800f0ac:	4684      	mov	ip, r0
 800f0ae:	ce02      	ldmia	r6!, {r1}
 800f0b0:	b288      	uxth	r0, r1
 800f0b2:	4460      	add	r0, ip
 800f0b4:	1400      	asrs	r0, r0, #16
 800f0b6:	0c0c      	lsrs	r4, r1, #16
 800f0b8:	1904      	adds	r4, r0, r4
 800f0ba:	4461      	add	r1, ip
 800f0bc:	1420      	asrs	r0, r4, #16
 800f0be:	b289      	uxth	r1, r1
 800f0c0:	0424      	lsls	r4, r4, #16
 800f0c2:	4321      	orrs	r1, r4
 800f0c4:	c702      	stmia	r7!, {r1}
 800f0c6:	e7dc      	b.n	800f082 <__mdiff+0xd6>
 800f0c8:	9900      	ldr	r1, [sp, #0]
 800f0ca:	3901      	subs	r1, #1
 800f0cc:	9100      	str	r1, [sp, #0]
 800f0ce:	e7e6      	b.n	800f09e <__mdiff+0xf2>
 800f0d0:	0800fcb0 	.word	0x0800fcb0
 800f0d4:	0800fcc1 	.word	0x0800fcc1
 800f0d8:	00000237 	.word	0x00000237
 800f0dc:	00000245 	.word	0x00000245

0800f0e0 <__d2b>:
 800f0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0e2:	2101      	movs	r1, #1
 800f0e4:	0016      	movs	r6, r2
 800f0e6:	001f      	movs	r7, r3
 800f0e8:	f7ff fcbe 	bl	800ea68 <_Balloc>
 800f0ec:	1e04      	subs	r4, r0, #0
 800f0ee:	d105      	bne.n	800f0fc <__d2b+0x1c>
 800f0f0:	0022      	movs	r2, r4
 800f0f2:	4b25      	ldr	r3, [pc, #148]	@ (800f188 <__d2b+0xa8>)
 800f0f4:	4825      	ldr	r0, [pc, #148]	@ (800f18c <__d2b+0xac>)
 800f0f6:	4926      	ldr	r1, [pc, #152]	@ (800f190 <__d2b+0xb0>)
 800f0f8:	f000 f920 	bl	800f33c <__assert_func>
 800f0fc:	033b      	lsls	r3, r7, #12
 800f0fe:	007d      	lsls	r5, r7, #1
 800f100:	0b1b      	lsrs	r3, r3, #12
 800f102:	0d6d      	lsrs	r5, r5, #21
 800f104:	d002      	beq.n	800f10c <__d2b+0x2c>
 800f106:	2280      	movs	r2, #128	@ 0x80
 800f108:	0352      	lsls	r2, r2, #13
 800f10a:	4313      	orrs	r3, r2
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	2e00      	cmp	r6, #0
 800f110:	d025      	beq.n	800f15e <__d2b+0x7e>
 800f112:	4668      	mov	r0, sp
 800f114:	9600      	str	r6, [sp, #0]
 800f116:	f7ff fd74 	bl	800ec02 <__lo0bits>
 800f11a:	9b01      	ldr	r3, [sp, #4]
 800f11c:	9900      	ldr	r1, [sp, #0]
 800f11e:	2800      	cmp	r0, #0
 800f120:	d01b      	beq.n	800f15a <__d2b+0x7a>
 800f122:	2220      	movs	r2, #32
 800f124:	001e      	movs	r6, r3
 800f126:	1a12      	subs	r2, r2, r0
 800f128:	4096      	lsls	r6, r2
 800f12a:	0032      	movs	r2, r6
 800f12c:	40c3      	lsrs	r3, r0
 800f12e:	430a      	orrs	r2, r1
 800f130:	6162      	str	r2, [r4, #20]
 800f132:	9301      	str	r3, [sp, #4]
 800f134:	9e01      	ldr	r6, [sp, #4]
 800f136:	61a6      	str	r6, [r4, #24]
 800f138:	1e73      	subs	r3, r6, #1
 800f13a:	419e      	sbcs	r6, r3
 800f13c:	3601      	adds	r6, #1
 800f13e:	6126      	str	r6, [r4, #16]
 800f140:	2d00      	cmp	r5, #0
 800f142:	d014      	beq.n	800f16e <__d2b+0x8e>
 800f144:	2635      	movs	r6, #53	@ 0x35
 800f146:	4b13      	ldr	r3, [pc, #76]	@ (800f194 <__d2b+0xb4>)
 800f148:	18ed      	adds	r5, r5, r3
 800f14a:	9b08      	ldr	r3, [sp, #32]
 800f14c:	182d      	adds	r5, r5, r0
 800f14e:	601d      	str	r5, [r3, #0]
 800f150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f152:	1a36      	subs	r6, r6, r0
 800f154:	601e      	str	r6, [r3, #0]
 800f156:	0020      	movs	r0, r4
 800f158:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f15a:	6161      	str	r1, [r4, #20]
 800f15c:	e7ea      	b.n	800f134 <__d2b+0x54>
 800f15e:	a801      	add	r0, sp, #4
 800f160:	f7ff fd4f 	bl	800ec02 <__lo0bits>
 800f164:	9b01      	ldr	r3, [sp, #4]
 800f166:	2601      	movs	r6, #1
 800f168:	6163      	str	r3, [r4, #20]
 800f16a:	3020      	adds	r0, #32
 800f16c:	e7e7      	b.n	800f13e <__d2b+0x5e>
 800f16e:	4b0a      	ldr	r3, [pc, #40]	@ (800f198 <__d2b+0xb8>)
 800f170:	18c0      	adds	r0, r0, r3
 800f172:	9b08      	ldr	r3, [sp, #32]
 800f174:	6018      	str	r0, [r3, #0]
 800f176:	4b09      	ldr	r3, [pc, #36]	@ (800f19c <__d2b+0xbc>)
 800f178:	18f3      	adds	r3, r6, r3
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	18e3      	adds	r3, r4, r3
 800f17e:	6958      	ldr	r0, [r3, #20]
 800f180:	f7ff fd1e 	bl	800ebc0 <__hi0bits>
 800f184:	0176      	lsls	r6, r6, #5
 800f186:	e7e3      	b.n	800f150 <__d2b+0x70>
 800f188:	0800fcb0 	.word	0x0800fcb0
 800f18c:	0800fcc1 	.word	0x0800fcc1
 800f190:	0000030f 	.word	0x0000030f
 800f194:	fffffbcd 	.word	0xfffffbcd
 800f198:	fffffbce 	.word	0xfffffbce
 800f19c:	3fffffff 	.word	0x3fffffff

0800f1a0 <__sflush_r>:
 800f1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1a2:	220c      	movs	r2, #12
 800f1a4:	5e8b      	ldrsh	r3, [r1, r2]
 800f1a6:	0005      	movs	r5, r0
 800f1a8:	000c      	movs	r4, r1
 800f1aa:	071a      	lsls	r2, r3, #28
 800f1ac:	d456      	bmi.n	800f25c <__sflush_r+0xbc>
 800f1ae:	684a      	ldr	r2, [r1, #4]
 800f1b0:	2a00      	cmp	r2, #0
 800f1b2:	dc02      	bgt.n	800f1ba <__sflush_r+0x1a>
 800f1b4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f1b6:	2a00      	cmp	r2, #0
 800f1b8:	dd4e      	ble.n	800f258 <__sflush_r+0xb8>
 800f1ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f1bc:	2f00      	cmp	r7, #0
 800f1be:	d04b      	beq.n	800f258 <__sflush_r+0xb8>
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	2080      	movs	r0, #128	@ 0x80
 800f1c4:	682e      	ldr	r6, [r5, #0]
 800f1c6:	602a      	str	r2, [r5, #0]
 800f1c8:	001a      	movs	r2, r3
 800f1ca:	0140      	lsls	r0, r0, #5
 800f1cc:	6a21      	ldr	r1, [r4, #32]
 800f1ce:	4002      	ands	r2, r0
 800f1d0:	4203      	tst	r3, r0
 800f1d2:	d033      	beq.n	800f23c <__sflush_r+0x9c>
 800f1d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	075b      	lsls	r3, r3, #29
 800f1da:	d506      	bpl.n	800f1ea <__sflush_r+0x4a>
 800f1dc:	6863      	ldr	r3, [r4, #4]
 800f1de:	1ad2      	subs	r2, r2, r3
 800f1e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <__sflush_r+0x4a>
 800f1e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f1e8:	1ad2      	subs	r2, r2, r3
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	0028      	movs	r0, r5
 800f1ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f1f0:	6a21      	ldr	r1, [r4, #32]
 800f1f2:	47b8      	blx	r7
 800f1f4:	89a2      	ldrh	r2, [r4, #12]
 800f1f6:	1c43      	adds	r3, r0, #1
 800f1f8:	d106      	bne.n	800f208 <__sflush_r+0x68>
 800f1fa:	6829      	ldr	r1, [r5, #0]
 800f1fc:	291d      	cmp	r1, #29
 800f1fe:	d846      	bhi.n	800f28e <__sflush_r+0xee>
 800f200:	4b29      	ldr	r3, [pc, #164]	@ (800f2a8 <__sflush_r+0x108>)
 800f202:	40cb      	lsrs	r3, r1
 800f204:	07db      	lsls	r3, r3, #31
 800f206:	d542      	bpl.n	800f28e <__sflush_r+0xee>
 800f208:	2300      	movs	r3, #0
 800f20a:	6063      	str	r3, [r4, #4]
 800f20c:	6923      	ldr	r3, [r4, #16]
 800f20e:	6023      	str	r3, [r4, #0]
 800f210:	04d2      	lsls	r2, r2, #19
 800f212:	d505      	bpl.n	800f220 <__sflush_r+0x80>
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	d102      	bne.n	800f21e <__sflush_r+0x7e>
 800f218:	682b      	ldr	r3, [r5, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d100      	bne.n	800f220 <__sflush_r+0x80>
 800f21e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f222:	602e      	str	r6, [r5, #0]
 800f224:	2900      	cmp	r1, #0
 800f226:	d017      	beq.n	800f258 <__sflush_r+0xb8>
 800f228:	0023      	movs	r3, r4
 800f22a:	3344      	adds	r3, #68	@ 0x44
 800f22c:	4299      	cmp	r1, r3
 800f22e:	d002      	beq.n	800f236 <__sflush_r+0x96>
 800f230:	0028      	movs	r0, r5
 800f232:	f7ff fb13 	bl	800e85c <_free_r>
 800f236:	2300      	movs	r3, #0
 800f238:	6363      	str	r3, [r4, #52]	@ 0x34
 800f23a:	e00d      	b.n	800f258 <__sflush_r+0xb8>
 800f23c:	2301      	movs	r3, #1
 800f23e:	0028      	movs	r0, r5
 800f240:	47b8      	blx	r7
 800f242:	0002      	movs	r2, r0
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	d1c6      	bne.n	800f1d6 <__sflush_r+0x36>
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d0c3      	beq.n	800f1d6 <__sflush_r+0x36>
 800f24e:	2b1d      	cmp	r3, #29
 800f250:	d001      	beq.n	800f256 <__sflush_r+0xb6>
 800f252:	2b16      	cmp	r3, #22
 800f254:	d11a      	bne.n	800f28c <__sflush_r+0xec>
 800f256:	602e      	str	r6, [r5, #0]
 800f258:	2000      	movs	r0, #0
 800f25a:	e01e      	b.n	800f29a <__sflush_r+0xfa>
 800f25c:	690e      	ldr	r6, [r1, #16]
 800f25e:	2e00      	cmp	r6, #0
 800f260:	d0fa      	beq.n	800f258 <__sflush_r+0xb8>
 800f262:	680f      	ldr	r7, [r1, #0]
 800f264:	600e      	str	r6, [r1, #0]
 800f266:	1bba      	subs	r2, r7, r6
 800f268:	9201      	str	r2, [sp, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	079b      	lsls	r3, r3, #30
 800f26e:	d100      	bne.n	800f272 <__sflush_r+0xd2>
 800f270:	694a      	ldr	r2, [r1, #20]
 800f272:	60a2      	str	r2, [r4, #8]
 800f274:	9b01      	ldr	r3, [sp, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	ddee      	ble.n	800f258 <__sflush_r+0xb8>
 800f27a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f27c:	0032      	movs	r2, r6
 800f27e:	001f      	movs	r7, r3
 800f280:	0028      	movs	r0, r5
 800f282:	9b01      	ldr	r3, [sp, #4]
 800f284:	6a21      	ldr	r1, [r4, #32]
 800f286:	47b8      	blx	r7
 800f288:	2800      	cmp	r0, #0
 800f28a:	dc07      	bgt.n	800f29c <__sflush_r+0xfc>
 800f28c:	89a2      	ldrh	r2, [r4, #12]
 800f28e:	2340      	movs	r3, #64	@ 0x40
 800f290:	2001      	movs	r0, #1
 800f292:	4313      	orrs	r3, r2
 800f294:	b21b      	sxth	r3, r3
 800f296:	81a3      	strh	r3, [r4, #12]
 800f298:	4240      	negs	r0, r0
 800f29a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f29c:	9b01      	ldr	r3, [sp, #4]
 800f29e:	1836      	adds	r6, r6, r0
 800f2a0:	1a1b      	subs	r3, r3, r0
 800f2a2:	9301      	str	r3, [sp, #4]
 800f2a4:	e7e6      	b.n	800f274 <__sflush_r+0xd4>
 800f2a6:	46c0      	nop			@ (mov r8, r8)
 800f2a8:	20400001 	.word	0x20400001

0800f2ac <_fflush_r>:
 800f2ac:	690b      	ldr	r3, [r1, #16]
 800f2ae:	b570      	push	{r4, r5, r6, lr}
 800f2b0:	0005      	movs	r5, r0
 800f2b2:	000c      	movs	r4, r1
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d102      	bne.n	800f2be <_fflush_r+0x12>
 800f2b8:	2500      	movs	r5, #0
 800f2ba:	0028      	movs	r0, r5
 800f2bc:	bd70      	pop	{r4, r5, r6, pc}
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	d004      	beq.n	800f2cc <_fflush_r+0x20>
 800f2c2:	6a03      	ldr	r3, [r0, #32]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d101      	bne.n	800f2cc <_fflush_r+0x20>
 800f2c8:	f7fe fb32 	bl	800d930 <__sinit>
 800f2cc:	220c      	movs	r2, #12
 800f2ce:	5ea3      	ldrsh	r3, [r4, r2]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d0f1      	beq.n	800f2b8 <_fflush_r+0xc>
 800f2d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f2d6:	07d2      	lsls	r2, r2, #31
 800f2d8:	d404      	bmi.n	800f2e4 <_fflush_r+0x38>
 800f2da:	059b      	lsls	r3, r3, #22
 800f2dc:	d402      	bmi.n	800f2e4 <_fflush_r+0x38>
 800f2de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2e0:	f7fe fc39 	bl	800db56 <__retarget_lock_acquire_recursive>
 800f2e4:	0028      	movs	r0, r5
 800f2e6:	0021      	movs	r1, r4
 800f2e8:	f7ff ff5a 	bl	800f1a0 <__sflush_r>
 800f2ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2ee:	0005      	movs	r5, r0
 800f2f0:	07db      	lsls	r3, r3, #31
 800f2f2:	d4e2      	bmi.n	800f2ba <_fflush_r+0xe>
 800f2f4:	89a3      	ldrh	r3, [r4, #12]
 800f2f6:	059b      	lsls	r3, r3, #22
 800f2f8:	d4df      	bmi.n	800f2ba <_fflush_r+0xe>
 800f2fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2fc:	f7fe fc2c 	bl	800db58 <__retarget_lock_release_recursive>
 800f300:	e7db      	b.n	800f2ba <_fflush_r+0xe>
	...

0800f304 <_sbrk_r>:
 800f304:	2300      	movs	r3, #0
 800f306:	b570      	push	{r4, r5, r6, lr}
 800f308:	4d06      	ldr	r5, [pc, #24]	@ (800f324 <_sbrk_r+0x20>)
 800f30a:	0004      	movs	r4, r0
 800f30c:	0008      	movs	r0, r1
 800f30e:	602b      	str	r3, [r5, #0]
 800f310:	f7f3 fec8 	bl	80030a4 <_sbrk>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d103      	bne.n	800f320 <_sbrk_r+0x1c>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d000      	beq.n	800f320 <_sbrk_r+0x1c>
 800f31e:	6023      	str	r3, [r4, #0]
 800f320:	bd70      	pop	{r4, r5, r6, pc}
 800f322:	46c0      	nop			@ (mov r8, r8)
 800f324:	20001cd8 	.word	0x20001cd8

0800f328 <memcpy>:
 800f328:	2300      	movs	r3, #0
 800f32a:	b510      	push	{r4, lr}
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d100      	bne.n	800f332 <memcpy+0xa>
 800f330:	bd10      	pop	{r4, pc}
 800f332:	5ccc      	ldrb	r4, [r1, r3]
 800f334:	54c4      	strb	r4, [r0, r3]
 800f336:	3301      	adds	r3, #1
 800f338:	e7f8      	b.n	800f32c <memcpy+0x4>
	...

0800f33c <__assert_func>:
 800f33c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f33e:	0014      	movs	r4, r2
 800f340:	001a      	movs	r2, r3
 800f342:	4b09      	ldr	r3, [pc, #36]	@ (800f368 <__assert_func+0x2c>)
 800f344:	0005      	movs	r5, r0
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	000e      	movs	r6, r1
 800f34a:	68d8      	ldr	r0, [r3, #12]
 800f34c:	4b07      	ldr	r3, [pc, #28]	@ (800f36c <__assert_func+0x30>)
 800f34e:	2c00      	cmp	r4, #0
 800f350:	d101      	bne.n	800f356 <__assert_func+0x1a>
 800f352:	4b07      	ldr	r3, [pc, #28]	@ (800f370 <__assert_func+0x34>)
 800f354:	001c      	movs	r4, r3
 800f356:	4907      	ldr	r1, [pc, #28]	@ (800f374 <__assert_func+0x38>)
 800f358:	9301      	str	r3, [sp, #4]
 800f35a:	9402      	str	r4, [sp, #8]
 800f35c:	002b      	movs	r3, r5
 800f35e:	9600      	str	r6, [sp, #0]
 800f360:	f000 f856 	bl	800f410 <fiprintf>
 800f364:	f000 f864 	bl	800f430 <abort>
 800f368:	200001a0 	.word	0x200001a0
 800f36c:	0800fd24 	.word	0x0800fd24
 800f370:	0800fd5f 	.word	0x0800fd5f
 800f374:	0800fd31 	.word	0x0800fd31

0800f378 <_calloc_r>:
 800f378:	b570      	push	{r4, r5, r6, lr}
 800f37a:	0c0b      	lsrs	r3, r1, #16
 800f37c:	0c15      	lsrs	r5, r2, #16
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d11e      	bne.n	800f3c0 <_calloc_r+0x48>
 800f382:	2d00      	cmp	r5, #0
 800f384:	d10c      	bne.n	800f3a0 <_calloc_r+0x28>
 800f386:	b289      	uxth	r1, r1
 800f388:	b294      	uxth	r4, r2
 800f38a:	434c      	muls	r4, r1
 800f38c:	0021      	movs	r1, r4
 800f38e:	f7ff fadb 	bl	800e948 <_malloc_r>
 800f392:	1e05      	subs	r5, r0, #0
 800f394:	d01b      	beq.n	800f3ce <_calloc_r+0x56>
 800f396:	0022      	movs	r2, r4
 800f398:	2100      	movs	r1, #0
 800f39a:	f7fe fb57 	bl	800da4c <memset>
 800f39e:	e016      	b.n	800f3ce <_calloc_r+0x56>
 800f3a0:	1c2b      	adds	r3, r5, #0
 800f3a2:	1c0c      	adds	r4, r1, #0
 800f3a4:	b289      	uxth	r1, r1
 800f3a6:	b292      	uxth	r2, r2
 800f3a8:	434a      	muls	r2, r1
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	b2a1      	uxth	r1, r4
 800f3ae:	4359      	muls	r1, r3
 800f3b0:	0c14      	lsrs	r4, r2, #16
 800f3b2:	190c      	adds	r4, r1, r4
 800f3b4:	0c23      	lsrs	r3, r4, #16
 800f3b6:	d107      	bne.n	800f3c8 <_calloc_r+0x50>
 800f3b8:	0424      	lsls	r4, r4, #16
 800f3ba:	b292      	uxth	r2, r2
 800f3bc:	4314      	orrs	r4, r2
 800f3be:	e7e5      	b.n	800f38c <_calloc_r+0x14>
 800f3c0:	2d00      	cmp	r5, #0
 800f3c2:	d101      	bne.n	800f3c8 <_calloc_r+0x50>
 800f3c4:	1c14      	adds	r4, r2, #0
 800f3c6:	e7ed      	b.n	800f3a4 <_calloc_r+0x2c>
 800f3c8:	230c      	movs	r3, #12
 800f3ca:	2500      	movs	r5, #0
 800f3cc:	6003      	str	r3, [r0, #0]
 800f3ce:	0028      	movs	r0, r5
 800f3d0:	bd70      	pop	{r4, r5, r6, pc}

0800f3d2 <__ascii_mbtowc>:
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	2900      	cmp	r1, #0
 800f3d6:	d100      	bne.n	800f3da <__ascii_mbtowc+0x8>
 800f3d8:	a901      	add	r1, sp, #4
 800f3da:	1e10      	subs	r0, r2, #0
 800f3dc:	d006      	beq.n	800f3ec <__ascii_mbtowc+0x1a>
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d006      	beq.n	800f3f0 <__ascii_mbtowc+0x1e>
 800f3e2:	7813      	ldrb	r3, [r2, #0]
 800f3e4:	600b      	str	r3, [r1, #0]
 800f3e6:	7810      	ldrb	r0, [r2, #0]
 800f3e8:	1e43      	subs	r3, r0, #1
 800f3ea:	4198      	sbcs	r0, r3
 800f3ec:	b002      	add	sp, #8
 800f3ee:	4770      	bx	lr
 800f3f0:	2002      	movs	r0, #2
 800f3f2:	4240      	negs	r0, r0
 800f3f4:	e7fa      	b.n	800f3ec <__ascii_mbtowc+0x1a>

0800f3f6 <__ascii_wctomb>:
 800f3f6:	0003      	movs	r3, r0
 800f3f8:	1e08      	subs	r0, r1, #0
 800f3fa:	d005      	beq.n	800f408 <__ascii_wctomb+0x12>
 800f3fc:	2aff      	cmp	r2, #255	@ 0xff
 800f3fe:	d904      	bls.n	800f40a <__ascii_wctomb+0x14>
 800f400:	228a      	movs	r2, #138	@ 0x8a
 800f402:	2001      	movs	r0, #1
 800f404:	601a      	str	r2, [r3, #0]
 800f406:	4240      	negs	r0, r0
 800f408:	4770      	bx	lr
 800f40a:	2001      	movs	r0, #1
 800f40c:	700a      	strb	r2, [r1, #0]
 800f40e:	e7fb      	b.n	800f408 <__ascii_wctomb+0x12>

0800f410 <fiprintf>:
 800f410:	b40e      	push	{r1, r2, r3}
 800f412:	b517      	push	{r0, r1, r2, r4, lr}
 800f414:	4c05      	ldr	r4, [pc, #20]	@ (800f42c <fiprintf+0x1c>)
 800f416:	ab05      	add	r3, sp, #20
 800f418:	cb04      	ldmia	r3!, {r2}
 800f41a:	0001      	movs	r1, r0
 800f41c:	6820      	ldr	r0, [r4, #0]
 800f41e:	9301      	str	r3, [sp, #4]
 800f420:	f000 f834 	bl	800f48c <_vfiprintf_r>
 800f424:	bc1e      	pop	{r1, r2, r3, r4}
 800f426:	bc08      	pop	{r3}
 800f428:	b003      	add	sp, #12
 800f42a:	4718      	bx	r3
 800f42c:	200001a0 	.word	0x200001a0

0800f430 <abort>:
 800f430:	2006      	movs	r0, #6
 800f432:	b510      	push	{r4, lr}
 800f434:	f000 fa10 	bl	800f858 <raise>
 800f438:	2001      	movs	r0, #1
 800f43a:	f7f3 fdc1 	bl	8002fc0 <_exit>

0800f43e <__sfputc_r>:
 800f43e:	6893      	ldr	r3, [r2, #8]
 800f440:	b510      	push	{r4, lr}
 800f442:	3b01      	subs	r3, #1
 800f444:	6093      	str	r3, [r2, #8]
 800f446:	2b00      	cmp	r3, #0
 800f448:	da04      	bge.n	800f454 <__sfputc_r+0x16>
 800f44a:	6994      	ldr	r4, [r2, #24]
 800f44c:	42a3      	cmp	r3, r4
 800f44e:	db07      	blt.n	800f460 <__sfputc_r+0x22>
 800f450:	290a      	cmp	r1, #10
 800f452:	d005      	beq.n	800f460 <__sfputc_r+0x22>
 800f454:	6813      	ldr	r3, [r2, #0]
 800f456:	1c58      	adds	r0, r3, #1
 800f458:	6010      	str	r0, [r2, #0]
 800f45a:	7019      	strb	r1, [r3, #0]
 800f45c:	0008      	movs	r0, r1
 800f45e:	bd10      	pop	{r4, pc}
 800f460:	f000 f930 	bl	800f6c4 <__swbuf_r>
 800f464:	0001      	movs	r1, r0
 800f466:	e7f9      	b.n	800f45c <__sfputc_r+0x1e>

0800f468 <__sfputs_r>:
 800f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46a:	0006      	movs	r6, r0
 800f46c:	000f      	movs	r7, r1
 800f46e:	0014      	movs	r4, r2
 800f470:	18d5      	adds	r5, r2, r3
 800f472:	42ac      	cmp	r4, r5
 800f474:	d101      	bne.n	800f47a <__sfputs_r+0x12>
 800f476:	2000      	movs	r0, #0
 800f478:	e007      	b.n	800f48a <__sfputs_r+0x22>
 800f47a:	7821      	ldrb	r1, [r4, #0]
 800f47c:	003a      	movs	r2, r7
 800f47e:	0030      	movs	r0, r6
 800f480:	f7ff ffdd 	bl	800f43e <__sfputc_r>
 800f484:	3401      	adds	r4, #1
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	d1f3      	bne.n	800f472 <__sfputs_r+0xa>
 800f48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f48c <_vfiprintf_r>:
 800f48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f48e:	b0a1      	sub	sp, #132	@ 0x84
 800f490:	000f      	movs	r7, r1
 800f492:	0015      	movs	r5, r2
 800f494:	001e      	movs	r6, r3
 800f496:	9003      	str	r0, [sp, #12]
 800f498:	2800      	cmp	r0, #0
 800f49a:	d004      	beq.n	800f4a6 <_vfiprintf_r+0x1a>
 800f49c:	6a03      	ldr	r3, [r0, #32]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d101      	bne.n	800f4a6 <_vfiprintf_r+0x1a>
 800f4a2:	f7fe fa45 	bl	800d930 <__sinit>
 800f4a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4a8:	07db      	lsls	r3, r3, #31
 800f4aa:	d405      	bmi.n	800f4b8 <_vfiprintf_r+0x2c>
 800f4ac:	89bb      	ldrh	r3, [r7, #12]
 800f4ae:	059b      	lsls	r3, r3, #22
 800f4b0:	d402      	bmi.n	800f4b8 <_vfiprintf_r+0x2c>
 800f4b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f4b4:	f7fe fb4f 	bl	800db56 <__retarget_lock_acquire_recursive>
 800f4b8:	89bb      	ldrh	r3, [r7, #12]
 800f4ba:	071b      	lsls	r3, r3, #28
 800f4bc:	d502      	bpl.n	800f4c4 <_vfiprintf_r+0x38>
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d113      	bne.n	800f4ec <_vfiprintf_r+0x60>
 800f4c4:	0039      	movs	r1, r7
 800f4c6:	9803      	ldr	r0, [sp, #12]
 800f4c8:	f000 f93e 	bl	800f748 <__swsetup_r>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d00d      	beq.n	800f4ec <_vfiprintf_r+0x60>
 800f4d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4d2:	07db      	lsls	r3, r3, #31
 800f4d4:	d503      	bpl.n	800f4de <_vfiprintf_r+0x52>
 800f4d6:	2001      	movs	r0, #1
 800f4d8:	4240      	negs	r0, r0
 800f4da:	b021      	add	sp, #132	@ 0x84
 800f4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4de:	89bb      	ldrh	r3, [r7, #12]
 800f4e0:	059b      	lsls	r3, r3, #22
 800f4e2:	d4f8      	bmi.n	800f4d6 <_vfiprintf_r+0x4a>
 800f4e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f4e6:	f7fe fb37 	bl	800db58 <__retarget_lock_release_recursive>
 800f4ea:	e7f4      	b.n	800f4d6 <_vfiprintf_r+0x4a>
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	ac08      	add	r4, sp, #32
 800f4f0:	6163      	str	r3, [r4, #20]
 800f4f2:	3320      	adds	r3, #32
 800f4f4:	7663      	strb	r3, [r4, #25]
 800f4f6:	3310      	adds	r3, #16
 800f4f8:	76a3      	strb	r3, [r4, #26]
 800f4fa:	9607      	str	r6, [sp, #28]
 800f4fc:	002e      	movs	r6, r5
 800f4fe:	7833      	ldrb	r3, [r6, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <_vfiprintf_r+0x7c>
 800f504:	2b25      	cmp	r3, #37	@ 0x25
 800f506:	d148      	bne.n	800f59a <_vfiprintf_r+0x10e>
 800f508:	1b73      	subs	r3, r6, r5
 800f50a:	9305      	str	r3, [sp, #20]
 800f50c:	42ae      	cmp	r6, r5
 800f50e:	d00b      	beq.n	800f528 <_vfiprintf_r+0x9c>
 800f510:	002a      	movs	r2, r5
 800f512:	0039      	movs	r1, r7
 800f514:	9803      	ldr	r0, [sp, #12]
 800f516:	f7ff ffa7 	bl	800f468 <__sfputs_r>
 800f51a:	3001      	adds	r0, #1
 800f51c:	d100      	bne.n	800f520 <_vfiprintf_r+0x94>
 800f51e:	e0ae      	b.n	800f67e <_vfiprintf_r+0x1f2>
 800f520:	6963      	ldr	r3, [r4, #20]
 800f522:	9a05      	ldr	r2, [sp, #20]
 800f524:	189b      	adds	r3, r3, r2
 800f526:	6163      	str	r3, [r4, #20]
 800f528:	7833      	ldrb	r3, [r6, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d100      	bne.n	800f530 <_vfiprintf_r+0xa4>
 800f52e:	e0a6      	b.n	800f67e <_vfiprintf_r+0x1f2>
 800f530:	2201      	movs	r2, #1
 800f532:	2300      	movs	r3, #0
 800f534:	4252      	negs	r2, r2
 800f536:	6062      	str	r2, [r4, #4]
 800f538:	a904      	add	r1, sp, #16
 800f53a:	3254      	adds	r2, #84	@ 0x54
 800f53c:	1852      	adds	r2, r2, r1
 800f53e:	1c75      	adds	r5, r6, #1
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	60e3      	str	r3, [r4, #12]
 800f544:	60a3      	str	r3, [r4, #8]
 800f546:	7013      	strb	r3, [r2, #0]
 800f548:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f54a:	4b59      	ldr	r3, [pc, #356]	@ (800f6b0 <_vfiprintf_r+0x224>)
 800f54c:	2205      	movs	r2, #5
 800f54e:	0018      	movs	r0, r3
 800f550:	7829      	ldrb	r1, [r5, #0]
 800f552:	9305      	str	r3, [sp, #20]
 800f554:	f7fe fb01 	bl	800db5a <memchr>
 800f558:	1c6e      	adds	r6, r5, #1
 800f55a:	2800      	cmp	r0, #0
 800f55c:	d11f      	bne.n	800f59e <_vfiprintf_r+0x112>
 800f55e:	6822      	ldr	r2, [r4, #0]
 800f560:	06d3      	lsls	r3, r2, #27
 800f562:	d504      	bpl.n	800f56e <_vfiprintf_r+0xe2>
 800f564:	2353      	movs	r3, #83	@ 0x53
 800f566:	a904      	add	r1, sp, #16
 800f568:	185b      	adds	r3, r3, r1
 800f56a:	2120      	movs	r1, #32
 800f56c:	7019      	strb	r1, [r3, #0]
 800f56e:	0713      	lsls	r3, r2, #28
 800f570:	d504      	bpl.n	800f57c <_vfiprintf_r+0xf0>
 800f572:	2353      	movs	r3, #83	@ 0x53
 800f574:	a904      	add	r1, sp, #16
 800f576:	185b      	adds	r3, r3, r1
 800f578:	212b      	movs	r1, #43	@ 0x2b
 800f57a:	7019      	strb	r1, [r3, #0]
 800f57c:	782b      	ldrb	r3, [r5, #0]
 800f57e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f580:	d016      	beq.n	800f5b0 <_vfiprintf_r+0x124>
 800f582:	002e      	movs	r6, r5
 800f584:	2100      	movs	r1, #0
 800f586:	200a      	movs	r0, #10
 800f588:	68e3      	ldr	r3, [r4, #12]
 800f58a:	7832      	ldrb	r2, [r6, #0]
 800f58c:	1c75      	adds	r5, r6, #1
 800f58e:	3a30      	subs	r2, #48	@ 0x30
 800f590:	2a09      	cmp	r2, #9
 800f592:	d950      	bls.n	800f636 <_vfiprintf_r+0x1aa>
 800f594:	2900      	cmp	r1, #0
 800f596:	d111      	bne.n	800f5bc <_vfiprintf_r+0x130>
 800f598:	e017      	b.n	800f5ca <_vfiprintf_r+0x13e>
 800f59a:	3601      	adds	r6, #1
 800f59c:	e7af      	b.n	800f4fe <_vfiprintf_r+0x72>
 800f59e:	9b05      	ldr	r3, [sp, #20]
 800f5a0:	6822      	ldr	r2, [r4, #0]
 800f5a2:	1ac0      	subs	r0, r0, r3
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	4083      	lsls	r3, r0
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	0035      	movs	r5, r6
 800f5ac:	6023      	str	r3, [r4, #0]
 800f5ae:	e7cc      	b.n	800f54a <_vfiprintf_r+0xbe>
 800f5b0:	9b07      	ldr	r3, [sp, #28]
 800f5b2:	1d19      	adds	r1, r3, #4
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	9107      	str	r1, [sp, #28]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	db01      	blt.n	800f5c0 <_vfiprintf_r+0x134>
 800f5bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5be:	e004      	b.n	800f5ca <_vfiprintf_r+0x13e>
 800f5c0:	425b      	negs	r3, r3
 800f5c2:	60e3      	str	r3, [r4, #12]
 800f5c4:	2302      	movs	r3, #2
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	6023      	str	r3, [r4, #0]
 800f5ca:	7833      	ldrb	r3, [r6, #0]
 800f5cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5ce:	d10c      	bne.n	800f5ea <_vfiprintf_r+0x15e>
 800f5d0:	7873      	ldrb	r3, [r6, #1]
 800f5d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5d4:	d134      	bne.n	800f640 <_vfiprintf_r+0x1b4>
 800f5d6:	9b07      	ldr	r3, [sp, #28]
 800f5d8:	3602      	adds	r6, #2
 800f5da:	1d1a      	adds	r2, r3, #4
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	9207      	str	r2, [sp, #28]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	da01      	bge.n	800f5e8 <_vfiprintf_r+0x15c>
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	425b      	negs	r3, r3
 800f5e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5ea:	4d32      	ldr	r5, [pc, #200]	@ (800f6b4 <_vfiprintf_r+0x228>)
 800f5ec:	2203      	movs	r2, #3
 800f5ee:	0028      	movs	r0, r5
 800f5f0:	7831      	ldrb	r1, [r6, #0]
 800f5f2:	f7fe fab2 	bl	800db5a <memchr>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d006      	beq.n	800f608 <_vfiprintf_r+0x17c>
 800f5fa:	2340      	movs	r3, #64	@ 0x40
 800f5fc:	1b40      	subs	r0, r0, r5
 800f5fe:	4083      	lsls	r3, r0
 800f600:	6822      	ldr	r2, [r4, #0]
 800f602:	3601      	adds	r6, #1
 800f604:	4313      	orrs	r3, r2
 800f606:	6023      	str	r3, [r4, #0]
 800f608:	7831      	ldrb	r1, [r6, #0]
 800f60a:	2206      	movs	r2, #6
 800f60c:	482a      	ldr	r0, [pc, #168]	@ (800f6b8 <_vfiprintf_r+0x22c>)
 800f60e:	1c75      	adds	r5, r6, #1
 800f610:	7621      	strb	r1, [r4, #24]
 800f612:	f7fe faa2 	bl	800db5a <memchr>
 800f616:	2800      	cmp	r0, #0
 800f618:	d040      	beq.n	800f69c <_vfiprintf_r+0x210>
 800f61a:	4b28      	ldr	r3, [pc, #160]	@ (800f6bc <_vfiprintf_r+0x230>)
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d122      	bne.n	800f666 <_vfiprintf_r+0x1da>
 800f620:	2207      	movs	r2, #7
 800f622:	9b07      	ldr	r3, [sp, #28]
 800f624:	3307      	adds	r3, #7
 800f626:	4393      	bics	r3, r2
 800f628:	3308      	adds	r3, #8
 800f62a:	9307      	str	r3, [sp, #28]
 800f62c:	6963      	ldr	r3, [r4, #20]
 800f62e:	9a04      	ldr	r2, [sp, #16]
 800f630:	189b      	adds	r3, r3, r2
 800f632:	6163      	str	r3, [r4, #20]
 800f634:	e762      	b.n	800f4fc <_vfiprintf_r+0x70>
 800f636:	4343      	muls	r3, r0
 800f638:	002e      	movs	r6, r5
 800f63a:	2101      	movs	r1, #1
 800f63c:	189b      	adds	r3, r3, r2
 800f63e:	e7a4      	b.n	800f58a <_vfiprintf_r+0xfe>
 800f640:	2300      	movs	r3, #0
 800f642:	200a      	movs	r0, #10
 800f644:	0019      	movs	r1, r3
 800f646:	3601      	adds	r6, #1
 800f648:	6063      	str	r3, [r4, #4]
 800f64a:	7832      	ldrb	r2, [r6, #0]
 800f64c:	1c75      	adds	r5, r6, #1
 800f64e:	3a30      	subs	r2, #48	@ 0x30
 800f650:	2a09      	cmp	r2, #9
 800f652:	d903      	bls.n	800f65c <_vfiprintf_r+0x1d0>
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0c8      	beq.n	800f5ea <_vfiprintf_r+0x15e>
 800f658:	9109      	str	r1, [sp, #36]	@ 0x24
 800f65a:	e7c6      	b.n	800f5ea <_vfiprintf_r+0x15e>
 800f65c:	4341      	muls	r1, r0
 800f65e:	002e      	movs	r6, r5
 800f660:	2301      	movs	r3, #1
 800f662:	1889      	adds	r1, r1, r2
 800f664:	e7f1      	b.n	800f64a <_vfiprintf_r+0x1be>
 800f666:	aa07      	add	r2, sp, #28
 800f668:	9200      	str	r2, [sp, #0]
 800f66a:	0021      	movs	r1, r4
 800f66c:	003a      	movs	r2, r7
 800f66e:	4b14      	ldr	r3, [pc, #80]	@ (800f6c0 <_vfiprintf_r+0x234>)
 800f670:	9803      	ldr	r0, [sp, #12]
 800f672:	f7fd fd13 	bl	800d09c <_printf_float>
 800f676:	9004      	str	r0, [sp, #16]
 800f678:	9b04      	ldr	r3, [sp, #16]
 800f67a:	3301      	adds	r3, #1
 800f67c:	d1d6      	bne.n	800f62c <_vfiprintf_r+0x1a0>
 800f67e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f680:	07db      	lsls	r3, r3, #31
 800f682:	d405      	bmi.n	800f690 <_vfiprintf_r+0x204>
 800f684:	89bb      	ldrh	r3, [r7, #12]
 800f686:	059b      	lsls	r3, r3, #22
 800f688:	d402      	bmi.n	800f690 <_vfiprintf_r+0x204>
 800f68a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f68c:	f7fe fa64 	bl	800db58 <__retarget_lock_release_recursive>
 800f690:	89bb      	ldrh	r3, [r7, #12]
 800f692:	065b      	lsls	r3, r3, #25
 800f694:	d500      	bpl.n	800f698 <_vfiprintf_r+0x20c>
 800f696:	e71e      	b.n	800f4d6 <_vfiprintf_r+0x4a>
 800f698:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f69a:	e71e      	b.n	800f4da <_vfiprintf_r+0x4e>
 800f69c:	aa07      	add	r2, sp, #28
 800f69e:	9200      	str	r2, [sp, #0]
 800f6a0:	0021      	movs	r1, r4
 800f6a2:	003a      	movs	r2, r7
 800f6a4:	4b06      	ldr	r3, [pc, #24]	@ (800f6c0 <_vfiprintf_r+0x234>)
 800f6a6:	9803      	ldr	r0, [sp, #12]
 800f6a8:	f7fd ffa6 	bl	800d5f8 <_printf_i>
 800f6ac:	e7e3      	b.n	800f676 <_vfiprintf_r+0x1ea>
 800f6ae:	46c0      	nop			@ (mov r8, r8)
 800f6b0:	0800fd60 	.word	0x0800fd60
 800f6b4:	0800fd66 	.word	0x0800fd66
 800f6b8:	0800fd6a 	.word	0x0800fd6a
 800f6bc:	0800d09d 	.word	0x0800d09d
 800f6c0:	0800f469 	.word	0x0800f469

0800f6c4 <__swbuf_r>:
 800f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c6:	0006      	movs	r6, r0
 800f6c8:	000d      	movs	r5, r1
 800f6ca:	0014      	movs	r4, r2
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d004      	beq.n	800f6da <__swbuf_r+0x16>
 800f6d0:	6a03      	ldr	r3, [r0, #32]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d101      	bne.n	800f6da <__swbuf_r+0x16>
 800f6d6:	f7fe f92b 	bl	800d930 <__sinit>
 800f6da:	69a3      	ldr	r3, [r4, #24]
 800f6dc:	60a3      	str	r3, [r4, #8]
 800f6de:	89a3      	ldrh	r3, [r4, #12]
 800f6e0:	071b      	lsls	r3, r3, #28
 800f6e2:	d502      	bpl.n	800f6ea <__swbuf_r+0x26>
 800f6e4:	6923      	ldr	r3, [r4, #16]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d109      	bne.n	800f6fe <__swbuf_r+0x3a>
 800f6ea:	0021      	movs	r1, r4
 800f6ec:	0030      	movs	r0, r6
 800f6ee:	f000 f82b 	bl	800f748 <__swsetup_r>
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d003      	beq.n	800f6fe <__swbuf_r+0x3a>
 800f6f6:	2501      	movs	r5, #1
 800f6f8:	426d      	negs	r5, r5
 800f6fa:	0028      	movs	r0, r5
 800f6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6fe:	6923      	ldr	r3, [r4, #16]
 800f700:	6820      	ldr	r0, [r4, #0]
 800f702:	b2ef      	uxtb	r7, r5
 800f704:	1ac0      	subs	r0, r0, r3
 800f706:	6963      	ldr	r3, [r4, #20]
 800f708:	b2ed      	uxtb	r5, r5
 800f70a:	4283      	cmp	r3, r0
 800f70c:	dc05      	bgt.n	800f71a <__swbuf_r+0x56>
 800f70e:	0021      	movs	r1, r4
 800f710:	0030      	movs	r0, r6
 800f712:	f7ff fdcb 	bl	800f2ac <_fflush_r>
 800f716:	2800      	cmp	r0, #0
 800f718:	d1ed      	bne.n	800f6f6 <__swbuf_r+0x32>
 800f71a:	68a3      	ldr	r3, [r4, #8]
 800f71c:	3001      	adds	r0, #1
 800f71e:	3b01      	subs	r3, #1
 800f720:	60a3      	str	r3, [r4, #8]
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	1c5a      	adds	r2, r3, #1
 800f726:	6022      	str	r2, [r4, #0]
 800f728:	701f      	strb	r7, [r3, #0]
 800f72a:	6963      	ldr	r3, [r4, #20]
 800f72c:	4283      	cmp	r3, r0
 800f72e:	d004      	beq.n	800f73a <__swbuf_r+0x76>
 800f730:	89a3      	ldrh	r3, [r4, #12]
 800f732:	07db      	lsls	r3, r3, #31
 800f734:	d5e1      	bpl.n	800f6fa <__swbuf_r+0x36>
 800f736:	2d0a      	cmp	r5, #10
 800f738:	d1df      	bne.n	800f6fa <__swbuf_r+0x36>
 800f73a:	0021      	movs	r1, r4
 800f73c:	0030      	movs	r0, r6
 800f73e:	f7ff fdb5 	bl	800f2ac <_fflush_r>
 800f742:	2800      	cmp	r0, #0
 800f744:	d0d9      	beq.n	800f6fa <__swbuf_r+0x36>
 800f746:	e7d6      	b.n	800f6f6 <__swbuf_r+0x32>

0800f748 <__swsetup_r>:
 800f748:	4b2d      	ldr	r3, [pc, #180]	@ (800f800 <__swsetup_r+0xb8>)
 800f74a:	b570      	push	{r4, r5, r6, lr}
 800f74c:	0005      	movs	r5, r0
 800f74e:	6818      	ldr	r0, [r3, #0]
 800f750:	000c      	movs	r4, r1
 800f752:	2800      	cmp	r0, #0
 800f754:	d004      	beq.n	800f760 <__swsetup_r+0x18>
 800f756:	6a03      	ldr	r3, [r0, #32]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d101      	bne.n	800f760 <__swsetup_r+0x18>
 800f75c:	f7fe f8e8 	bl	800d930 <__sinit>
 800f760:	220c      	movs	r2, #12
 800f762:	5ea3      	ldrsh	r3, [r4, r2]
 800f764:	071a      	lsls	r2, r3, #28
 800f766:	d423      	bmi.n	800f7b0 <__swsetup_r+0x68>
 800f768:	06da      	lsls	r2, r3, #27
 800f76a:	d407      	bmi.n	800f77c <__swsetup_r+0x34>
 800f76c:	2209      	movs	r2, #9
 800f76e:	602a      	str	r2, [r5, #0]
 800f770:	2240      	movs	r2, #64	@ 0x40
 800f772:	2001      	movs	r0, #1
 800f774:	4313      	orrs	r3, r2
 800f776:	81a3      	strh	r3, [r4, #12]
 800f778:	4240      	negs	r0, r0
 800f77a:	e03a      	b.n	800f7f2 <__swsetup_r+0xaa>
 800f77c:	075b      	lsls	r3, r3, #29
 800f77e:	d513      	bpl.n	800f7a8 <__swsetup_r+0x60>
 800f780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f782:	2900      	cmp	r1, #0
 800f784:	d008      	beq.n	800f798 <__swsetup_r+0x50>
 800f786:	0023      	movs	r3, r4
 800f788:	3344      	adds	r3, #68	@ 0x44
 800f78a:	4299      	cmp	r1, r3
 800f78c:	d002      	beq.n	800f794 <__swsetup_r+0x4c>
 800f78e:	0028      	movs	r0, r5
 800f790:	f7ff f864 	bl	800e85c <_free_r>
 800f794:	2300      	movs	r3, #0
 800f796:	6363      	str	r3, [r4, #52]	@ 0x34
 800f798:	2224      	movs	r2, #36	@ 0x24
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	4393      	bics	r3, r2
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	6063      	str	r3, [r4, #4]
 800f7a4:	6923      	ldr	r3, [r4, #16]
 800f7a6:	6023      	str	r3, [r4, #0]
 800f7a8:	2308      	movs	r3, #8
 800f7aa:	89a2      	ldrh	r2, [r4, #12]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	81a3      	strh	r3, [r4, #12]
 800f7b0:	6923      	ldr	r3, [r4, #16]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d10b      	bne.n	800f7ce <__swsetup_r+0x86>
 800f7b6:	21a0      	movs	r1, #160	@ 0xa0
 800f7b8:	2280      	movs	r2, #128	@ 0x80
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	0089      	lsls	r1, r1, #2
 800f7be:	0092      	lsls	r2, r2, #2
 800f7c0:	400b      	ands	r3, r1
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d003      	beq.n	800f7ce <__swsetup_r+0x86>
 800f7c6:	0021      	movs	r1, r4
 800f7c8:	0028      	movs	r0, r5
 800f7ca:	f000 f88f 	bl	800f8ec <__smakebuf_r>
 800f7ce:	220c      	movs	r2, #12
 800f7d0:	5ea3      	ldrsh	r3, [r4, r2]
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	001a      	movs	r2, r3
 800f7d6:	400a      	ands	r2, r1
 800f7d8:	420b      	tst	r3, r1
 800f7da:	d00b      	beq.n	800f7f4 <__swsetup_r+0xac>
 800f7dc:	2200      	movs	r2, #0
 800f7de:	60a2      	str	r2, [r4, #8]
 800f7e0:	6962      	ldr	r2, [r4, #20]
 800f7e2:	4252      	negs	r2, r2
 800f7e4:	61a2      	str	r2, [r4, #24]
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	6922      	ldr	r2, [r4, #16]
 800f7ea:	4282      	cmp	r2, r0
 800f7ec:	d101      	bne.n	800f7f2 <__swsetup_r+0xaa>
 800f7ee:	061a      	lsls	r2, r3, #24
 800f7f0:	d4be      	bmi.n	800f770 <__swsetup_r+0x28>
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
 800f7f4:	0799      	lsls	r1, r3, #30
 800f7f6:	d400      	bmi.n	800f7fa <__swsetup_r+0xb2>
 800f7f8:	6962      	ldr	r2, [r4, #20]
 800f7fa:	60a2      	str	r2, [r4, #8]
 800f7fc:	e7f3      	b.n	800f7e6 <__swsetup_r+0x9e>
 800f7fe:	46c0      	nop			@ (mov r8, r8)
 800f800:	200001a0 	.word	0x200001a0

0800f804 <_raise_r>:
 800f804:	b570      	push	{r4, r5, r6, lr}
 800f806:	0004      	movs	r4, r0
 800f808:	000d      	movs	r5, r1
 800f80a:	291f      	cmp	r1, #31
 800f80c:	d904      	bls.n	800f818 <_raise_r+0x14>
 800f80e:	2316      	movs	r3, #22
 800f810:	6003      	str	r3, [r0, #0]
 800f812:	2001      	movs	r0, #1
 800f814:	4240      	negs	r0, r0
 800f816:	bd70      	pop	{r4, r5, r6, pc}
 800f818:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d004      	beq.n	800f828 <_raise_r+0x24>
 800f81e:	008a      	lsls	r2, r1, #2
 800f820:	189b      	adds	r3, r3, r2
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	2a00      	cmp	r2, #0
 800f826:	d108      	bne.n	800f83a <_raise_r+0x36>
 800f828:	0020      	movs	r0, r4
 800f82a:	f000 f831 	bl	800f890 <_getpid_r>
 800f82e:	002a      	movs	r2, r5
 800f830:	0001      	movs	r1, r0
 800f832:	0020      	movs	r0, r4
 800f834:	f000 f81a 	bl	800f86c <_kill_r>
 800f838:	e7ed      	b.n	800f816 <_raise_r+0x12>
 800f83a:	2a01      	cmp	r2, #1
 800f83c:	d009      	beq.n	800f852 <_raise_r+0x4e>
 800f83e:	1c51      	adds	r1, r2, #1
 800f840:	d103      	bne.n	800f84a <_raise_r+0x46>
 800f842:	2316      	movs	r3, #22
 800f844:	6003      	str	r3, [r0, #0]
 800f846:	2001      	movs	r0, #1
 800f848:	e7e5      	b.n	800f816 <_raise_r+0x12>
 800f84a:	2100      	movs	r1, #0
 800f84c:	0028      	movs	r0, r5
 800f84e:	6019      	str	r1, [r3, #0]
 800f850:	4790      	blx	r2
 800f852:	2000      	movs	r0, #0
 800f854:	e7df      	b.n	800f816 <_raise_r+0x12>
	...

0800f858 <raise>:
 800f858:	b510      	push	{r4, lr}
 800f85a:	4b03      	ldr	r3, [pc, #12]	@ (800f868 <raise+0x10>)
 800f85c:	0001      	movs	r1, r0
 800f85e:	6818      	ldr	r0, [r3, #0]
 800f860:	f7ff ffd0 	bl	800f804 <_raise_r>
 800f864:	bd10      	pop	{r4, pc}
 800f866:	46c0      	nop			@ (mov r8, r8)
 800f868:	200001a0 	.word	0x200001a0

0800f86c <_kill_r>:
 800f86c:	2300      	movs	r3, #0
 800f86e:	b570      	push	{r4, r5, r6, lr}
 800f870:	4d06      	ldr	r5, [pc, #24]	@ (800f88c <_kill_r+0x20>)
 800f872:	0004      	movs	r4, r0
 800f874:	0008      	movs	r0, r1
 800f876:	0011      	movs	r1, r2
 800f878:	602b      	str	r3, [r5, #0]
 800f87a:	f7f3 fb91 	bl	8002fa0 <_kill>
 800f87e:	1c43      	adds	r3, r0, #1
 800f880:	d103      	bne.n	800f88a <_kill_r+0x1e>
 800f882:	682b      	ldr	r3, [r5, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d000      	beq.n	800f88a <_kill_r+0x1e>
 800f888:	6023      	str	r3, [r4, #0]
 800f88a:	bd70      	pop	{r4, r5, r6, pc}
 800f88c:	20001cd8 	.word	0x20001cd8

0800f890 <_getpid_r>:
 800f890:	b510      	push	{r4, lr}
 800f892:	f7f3 fb7f 	bl	8002f94 <_getpid>
 800f896:	bd10      	pop	{r4, pc}

0800f898 <__swhatbuf_r>:
 800f898:	b570      	push	{r4, r5, r6, lr}
 800f89a:	000e      	movs	r6, r1
 800f89c:	001d      	movs	r5, r3
 800f89e:	230e      	movs	r3, #14
 800f8a0:	5ec9      	ldrsh	r1, [r1, r3]
 800f8a2:	0014      	movs	r4, r2
 800f8a4:	b096      	sub	sp, #88	@ 0x58
 800f8a6:	2900      	cmp	r1, #0
 800f8a8:	da0c      	bge.n	800f8c4 <__swhatbuf_r+0x2c>
 800f8aa:	89b2      	ldrh	r2, [r6, #12]
 800f8ac:	2380      	movs	r3, #128	@ 0x80
 800f8ae:	0011      	movs	r1, r2
 800f8b0:	4019      	ands	r1, r3
 800f8b2:	421a      	tst	r2, r3
 800f8b4:	d114      	bne.n	800f8e0 <__swhatbuf_r+0x48>
 800f8b6:	2380      	movs	r3, #128	@ 0x80
 800f8b8:	00db      	lsls	r3, r3, #3
 800f8ba:	2000      	movs	r0, #0
 800f8bc:	6029      	str	r1, [r5, #0]
 800f8be:	6023      	str	r3, [r4, #0]
 800f8c0:	b016      	add	sp, #88	@ 0x58
 800f8c2:	bd70      	pop	{r4, r5, r6, pc}
 800f8c4:	466a      	mov	r2, sp
 800f8c6:	f000 f853 	bl	800f970 <_fstat_r>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	dbed      	blt.n	800f8aa <__swhatbuf_r+0x12>
 800f8ce:	23f0      	movs	r3, #240	@ 0xf0
 800f8d0:	9901      	ldr	r1, [sp, #4]
 800f8d2:	021b      	lsls	r3, r3, #8
 800f8d4:	4019      	ands	r1, r3
 800f8d6:	4b04      	ldr	r3, [pc, #16]	@ (800f8e8 <__swhatbuf_r+0x50>)
 800f8d8:	18c9      	adds	r1, r1, r3
 800f8da:	424b      	negs	r3, r1
 800f8dc:	4159      	adcs	r1, r3
 800f8de:	e7ea      	b.n	800f8b6 <__swhatbuf_r+0x1e>
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	2340      	movs	r3, #64	@ 0x40
 800f8e4:	e7e9      	b.n	800f8ba <__swhatbuf_r+0x22>
 800f8e6:	46c0      	nop			@ (mov r8, r8)
 800f8e8:	ffffe000 	.word	0xffffe000

0800f8ec <__smakebuf_r>:
 800f8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ee:	2602      	movs	r6, #2
 800f8f0:	898b      	ldrh	r3, [r1, #12]
 800f8f2:	0005      	movs	r5, r0
 800f8f4:	000c      	movs	r4, r1
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	4233      	tst	r3, r6
 800f8fa:	d007      	beq.n	800f90c <__smakebuf_r+0x20>
 800f8fc:	0023      	movs	r3, r4
 800f8fe:	3347      	adds	r3, #71	@ 0x47
 800f900:	6023      	str	r3, [r4, #0]
 800f902:	6123      	str	r3, [r4, #16]
 800f904:	2301      	movs	r3, #1
 800f906:	6163      	str	r3, [r4, #20]
 800f908:	b005      	add	sp, #20
 800f90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f90c:	ab03      	add	r3, sp, #12
 800f90e:	aa02      	add	r2, sp, #8
 800f910:	f7ff ffc2 	bl	800f898 <__swhatbuf_r>
 800f914:	9f02      	ldr	r7, [sp, #8]
 800f916:	9001      	str	r0, [sp, #4]
 800f918:	0039      	movs	r1, r7
 800f91a:	0028      	movs	r0, r5
 800f91c:	f7ff f814 	bl	800e948 <_malloc_r>
 800f920:	2800      	cmp	r0, #0
 800f922:	d108      	bne.n	800f936 <__smakebuf_r+0x4a>
 800f924:	220c      	movs	r2, #12
 800f926:	5ea3      	ldrsh	r3, [r4, r2]
 800f928:	059a      	lsls	r2, r3, #22
 800f92a:	d4ed      	bmi.n	800f908 <__smakebuf_r+0x1c>
 800f92c:	2203      	movs	r2, #3
 800f92e:	4393      	bics	r3, r2
 800f930:	431e      	orrs	r6, r3
 800f932:	81a6      	strh	r6, [r4, #12]
 800f934:	e7e2      	b.n	800f8fc <__smakebuf_r+0x10>
 800f936:	2380      	movs	r3, #128	@ 0x80
 800f938:	89a2      	ldrh	r2, [r4, #12]
 800f93a:	6020      	str	r0, [r4, #0]
 800f93c:	4313      	orrs	r3, r2
 800f93e:	81a3      	strh	r3, [r4, #12]
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	6120      	str	r0, [r4, #16]
 800f944:	6167      	str	r7, [r4, #20]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00c      	beq.n	800f964 <__smakebuf_r+0x78>
 800f94a:	0028      	movs	r0, r5
 800f94c:	230e      	movs	r3, #14
 800f94e:	5ee1      	ldrsh	r1, [r4, r3]
 800f950:	f000 f820 	bl	800f994 <_isatty_r>
 800f954:	2800      	cmp	r0, #0
 800f956:	d005      	beq.n	800f964 <__smakebuf_r+0x78>
 800f958:	2303      	movs	r3, #3
 800f95a:	89a2      	ldrh	r2, [r4, #12]
 800f95c:	439a      	bics	r2, r3
 800f95e:	3b02      	subs	r3, #2
 800f960:	4313      	orrs	r3, r2
 800f962:	81a3      	strh	r3, [r4, #12]
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	9a01      	ldr	r2, [sp, #4]
 800f968:	4313      	orrs	r3, r2
 800f96a:	81a3      	strh	r3, [r4, #12]
 800f96c:	e7cc      	b.n	800f908 <__smakebuf_r+0x1c>
	...

0800f970 <_fstat_r>:
 800f970:	2300      	movs	r3, #0
 800f972:	b570      	push	{r4, r5, r6, lr}
 800f974:	4d06      	ldr	r5, [pc, #24]	@ (800f990 <_fstat_r+0x20>)
 800f976:	0004      	movs	r4, r0
 800f978:	0008      	movs	r0, r1
 800f97a:	0011      	movs	r1, r2
 800f97c:	602b      	str	r3, [r5, #0]
 800f97e:	f7f3 fb6f 	bl	8003060 <_fstat>
 800f982:	1c43      	adds	r3, r0, #1
 800f984:	d103      	bne.n	800f98e <_fstat_r+0x1e>
 800f986:	682b      	ldr	r3, [r5, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d000      	beq.n	800f98e <_fstat_r+0x1e>
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	bd70      	pop	{r4, r5, r6, pc}
 800f990:	20001cd8 	.word	0x20001cd8

0800f994 <_isatty_r>:
 800f994:	2300      	movs	r3, #0
 800f996:	b570      	push	{r4, r5, r6, lr}
 800f998:	4d06      	ldr	r5, [pc, #24]	@ (800f9b4 <_isatty_r+0x20>)
 800f99a:	0004      	movs	r4, r0
 800f99c:	0008      	movs	r0, r1
 800f99e:	602b      	str	r3, [r5, #0]
 800f9a0:	f7f3 fb6c 	bl	800307c <_isatty>
 800f9a4:	1c43      	adds	r3, r0, #1
 800f9a6:	d103      	bne.n	800f9b0 <_isatty_r+0x1c>
 800f9a8:	682b      	ldr	r3, [r5, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d000      	beq.n	800f9b0 <_isatty_r+0x1c>
 800f9ae:	6023      	str	r3, [r4, #0]
 800f9b0:	bd70      	pop	{r4, r5, r6, pc}
 800f9b2:	46c0      	nop			@ (mov r8, r8)
 800f9b4:	20001cd8 	.word	0x20001cd8

0800f9b8 <_init>:
 800f9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ba:	46c0      	nop			@ (mov r8, r8)
 800f9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9be:	bc08      	pop	{r3}
 800f9c0:	469e      	mov	lr, r3
 800f9c2:	4770      	bx	lr

0800f9c4 <_fini>:
 800f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c6:	46c0      	nop			@ (mov r8, r8)
 800f9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ca:	bc08      	pop	{r3}
 800f9cc:	469e      	mov	lr, r3
 800f9ce:	4770      	bx	lr
